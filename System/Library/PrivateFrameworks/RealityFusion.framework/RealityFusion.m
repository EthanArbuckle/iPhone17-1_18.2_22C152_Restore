uint64_t rf::data_flow::provider::AnchorDataProvider::AnchorDataProvider(uint64_t a1, unsigned char *a2)
{
  void *v3;
  rf::AnchorDefinitionComponent *v4;
  void *v5;
  rf::AnchorDefinitionComponent *v6;
  void *v7;
  rf::AnchorDefinitionComponent *v8;
  void *v9;
  unsigned __int16 v10;
  int v11;
  void *__p[2];
  char v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  char v18;
  void **v19;
  uint64_t v20;

  v20 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26E8F3748;
  *(unsigned char *)(a1 + 24) = *a2;
  v3 = rf::AnchorDefinitionComponent::instance((rf::AnchorDefinitionComponent *)a1);
  v16 = &unk_26E8F3818;
  v17 = a1;
  v19 = &v16;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v16, v3 + 1);
  v4 = (rf::AnchorDefinitionComponent *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v16);
  v5 = rf::AnchorDefinitionComponent::instance(v4);
  v16 = &unk_26E8F38A8;
  v17 = a1;
  v19 = &v16;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v16, v5 + 5);
  v6 = (rf::AnchorDefinitionComponent *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v16);
  v7 = rf::AnchorDefinitionComponent::instance(v6);
  v16 = &unk_26E8F3928;
  v17 = a1;
  v19 = &v16;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v16, v7 + 9);
  v8 = (rf::AnchorDefinitionComponent *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v16);
  v9 = rf::AnchorDefinitionComponent::instance(v8);
  v16 = &unk_26E8F39A8;
  v17 = a1;
  v19 = &v16;
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](&v16, v9 + 13);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v16);
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v15, (const UInt8 *)&v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.printAddedAnchorDefinitionComponent");
  v10 = rf::UserDefaults::BOOLValue((CFStringRef *)&v15, (const UInt8 *)__p);
  if (v10 > 0xFFu) {
    v11 = v10;
  }
  else {
    v11 = *(unsigned __int8 *)(a1 + 24);
  }
  *(unsigned char *)(a1 + 24) = v11 != 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v15);
  if (v18 < 0) {
    operator delete(v16);
  }
  return a1;
}

void sub_235A7DF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  rf::UserDefaults::~UserDefaults(&a16);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void *rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(rf::data_flow::provider::AnchorDataProvider *this)
{
  v1 = rf::AnchorDefinitionComponent::instance(this);
  v2 = (rf::AnchorDefinitionComponent *)std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100](v1 + 1);
  v3 = (char *)rf::AnchorDefinitionComponent::instance(v2) + 40;
  return std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100](v3);
}

void __clang_call_terminate(void *a1)
{
}

void rf::data_flow::provider::AnchorDataProvider::~AnchorDataProvider(rf::data_flow::provider::AnchorDataProvider *this)
{
}

{
  uint64_t vars8;

  rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(this);
  JUMPOUT(0x237DEE2B0);
}

void *rf::data_flow::provider::AnchorDataProvider::addAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  rf::data_flow::validateAnchor(a2);
  RFUUIDFromAnchor = (rf *)rf::helpers::getRFUUIDFromAnchor(a2, (uint64_t)v74);
  v5 = rf::realityFusionLogObject(RFUUIDFromAnchor);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v74, __p);
    v6 = (SBYTE7(v13) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v73 = v6;
    _os_log_impl(&dword_235A7C000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Adding local anchor %s", buf, 0xCu);
    if (SBYTE7(v13) < 0) {
      operator delete(__p[0]);
    }
  }

  char v23 = 0;
  char v24 = 0;
  __int16 v25 = 0;
  uint64_t v47 = 0;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  __int16 v64 = 0;
  char v65 = 0;
  char v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__p = 0u;
  long long v13 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  char v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  *(void *)&long long v17 = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)&v16 + 1, a2);
  LOBYTE(v64) = 1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (rf::Session::consumeInputFromProvider(v7, (uint64_t)__p), (uint64_t v8 = *(void *)(a1 + 8)) != 0))
  {
    if (v75) {
      v9 = (const unsigned __int8 *)v74[0];
    }
    else {
      v9 = (const unsigned __int8 *)v74;
    }
    AnchorPtrWithIdentifier = rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(v8 + 160), v9);
  }
  else
  {
    AnchorPtrWithIdentifier = 0;
  }
  rf::data_flow::provider::InputData::~InputData(__p);
  return AnchorPtrWithIdentifier;
}

void sub_235A7E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void *rf::data_flow::RFUUID::string@<X0>(rf::data_flow::RFUUID *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 16)) {
    this = *(rf::data_flow::RFUUID **)this;
  }
  snprintf(__str, 0x25uLL, "%02hhX%02hhX%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX-%02hhX%02hhX%02hhX%02hhX%02hhX%02hhX", *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((unsigned __int8 *)this + 2), *((unsigned __int8 *)this + 3), *((unsigned __int8 *)this + 4), *((unsigned __int8 *)this + 5), *((unsigned __int8 *)this + 6), *((unsigned __int8 *)this + 7), *((unsigned __int8 *)this + 8), *((unsigned __int8 *)this + 9), *((unsigned __int8 *)this + 10), *((unsigned __int8 *)this + 11), *((unsigned __int8 *)this + 12), *((unsigned __int8 *)this + 13), *((unsigned __int8 *)this + 14), *((unsigned __int8 *)this + 15));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void rf::data_flow::provider::AnchorDataProvider::updateAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  rf::data_flow::validateAnchor(a2);
  char v8 = 0;
  char v9 = 0;
  __int16 v10 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  __int16 v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  char v56 = 0;
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *((void *)&v6[0] + 1) = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)v6, a2);
  LOBYTE(v49) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    rf::Session::consumeInputFromProvider(v4, (uint64_t)v5);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v5);
}

void sub_235A7E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v4 = (rf *)rf::data_flow::validateAnchor(a2);
  uint64_t v5 = rf::realityFusionLogObject(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    rf::helpers::getRFUUIDFromAnchor(a2, (uint64_t)v10);
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
    v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    char v65 = v6;
    _os_log_impl(&dword_235A7C000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing local anchor %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  char v15 = 0;
  char v16 = 0;
  __int16 v17 = 0;
  uint64_t v39 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  __int16 v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  char v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(void *)&long long v12 = std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>((uint64_t *)&v11 + 1, a2);
  LOBYTE(v56) = 1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7) {
    rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v10);
}

void sub_235A7E6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchor(rf::data_flow::provider::AnchorDataProvider *this, const rf::data_flow::RFUUID *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = rf::realityFusionLogObject(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    long long v11 = v5;
    _os_log_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing local anchor %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  if (*((unsigned char *)a2 + 16)) {
    v6 = *(const unsigned __int8 **)a2;
  }
  else {
    v6 = (const unsigned __int8 *)a2;
  }
  AnchorPtrWithIdentifier = rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(*((void *)this + 1) + 160), v6);
  rf::data_flow::validateAnchor((uint64_t)AnchorPtrWithIdentifier);
  rf::data_flow::provider::AnchorDataProvider::removeAnchor((uint64_t)this, (uint64_t)AnchorPtrWithIdentifier);
}

void sub_235A7E7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::AnchorDataProvider::addAnchors(rf *a1, uint64_t *a2)
{
  v3 = a1;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  while (v4 != v5)
  {
    a1 = (rf *)rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  v6 = rf::realityFusionLogObject(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
    LODWORD(v9[0]) = 134217984;
    *(void *)((char *)v9 + 4) = v7;
    _os_log_impl(&dword_235A7C000, v6, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Adding %lu local anchors.", (uint8_t *)v9, 0xCu);
  }

  char v11 = 0;
  char v12 = 0;
  __int16 v13 = 0;
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  __int16 v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v9[4] + 1);
  *(_OWORD *)((char *)&v9[4] + 8) = *(_OWORD *)a2;
  *((void *)&v9[5] + 1) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v52) = 1;
  uint64_t v8 = *((void *)v3 + 1);
  if (v8) {
    rf::Session::consumeInputFromProvider(v8, (uint64_t)v9);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v9);
}

void sub_235A7E9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::provider::AnchorDataProvider::updateAnchors(uint64_t a1, uint64_t *a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  while (v4 != v5)
  {
    rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  char v13 = 0;
  char v14 = 0;
  __int16 v15 = 0;
  uint64_t v37 = 0;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  __int16 v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  char v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v8);
  long long v8 = *(_OWORD *)a2;
  *(void *)&long long v9 = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v54) = 1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    rf::Session::consumeInputFromProvider(v6, (uint64_t)v7);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v7);
}

void sub_235A7EB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::provider::AnchorDataProvider::removeAnchors(rf *a1, uint64_t *a2)
{
  v3 = a1;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  while (v4 != v5)
  {
    a1 = (rf *)rf::data_flow::validateAnchor(v4);
    v4 += 272;
  }
  uint64_t v6 = rf::realityFusionLogObject(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
    LODWORD(v9[0]) = 134217984;
    *(void *)((char *)v9 + 4) = v7;
    _os_log_impl(&dword_235A7C000, v6, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing %lu local anchors.", (uint8_t *)v9, 0xCu);
  }

  char v11 = 0;
  char v12 = 0;
  __int16 v13 = 0;
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  __int16 v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate((void **)&v9[7] + 1);
  *(_OWORD *)((char *)&v9[7] + 8) = *(_OWORD *)a2;
  *((void *)&v9[8] + 1) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LOBYTE(v52) = 1;
  uint64_t v8 = *((void *)v3 + 1);
  if (v8) {
    rf::Session::consumeInputFromProvider(v8, (uint64_t)v9);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v9);
}

void sub_235A7ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  Object = (unsigned __int8 *)RECustomComponentGetObject();
  REComponentGetEntity();
  if ((result & 1) != 0 || !Object[21] && !Object[20])
  {
    if (uuid_is_null(Object)) {
      uuid_generate_random(Object);
    }
    rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)v63);
    if (*(unsigned char *)(a1 + 24)) {
      rf::helpers::printAnchorDefinitionComponentInfo();
    }
    uint64_t v4 = (rf *)rf::data_flow::validateAnchor((uint64_t)v63);
    uint64_t v5 = rf::realityFusionLogObject(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      rf::helpers::getRFUUIDFromAnchor((uint64_t)v63, (uint64_t)v10);
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
      uint64_t v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      uint64_t v62 = v6;
      _os_log_impl(&dword_235A7C000, v5, OS_LOG_TYPE_DEFAULT, "Anchor Data Provider: Adding AnchorDefinition anchor %s", buf, 0xCu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    char v12 = 0;
    char v13 = 0;
    __int16 v14 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    char v52 = 0;
    __int16 v53 = 0;
    char v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    char v60 = 0;
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    char v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v10[4] + 1, (uint64_t)v63);
    LOBYTE(v53) = 1;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
    }
    rf::data_flow::provider::InputData::~InputData((void **)v10);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v63);
  }
  return result;
}

void sub_235A7EFCC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::isRemotelyOwned()
{
  RENetworkComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result) {
    return RENetworkComponentIsAuthoritative() ^ 1;
  }
  return result;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0xF0F0F0F0F0F0F0) {
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    }
    unint64_t v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x78787878787878) {
      unint64_t v13 = 0xF0F0F0F0F0F0F0;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, v13);
    }
    else {
      __int16 v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[272 * v10];
    long long v18 = &v14[272 * v13];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v16, a2);
    long long v17 = v16 + 272;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v9;
  return result;
}

void sub_235A7F150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t Object = RECustomComponentGetObject();
  REComponentGetEntity();
  if ((result & 1) != 0 || !*(unsigned char *)(Object + 21) && !*(unsigned char *)(Object + 20))
  {
    rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)v63);
    uint64_t v4 = (rf *)rf::data_flow::validateAnchor((uint64_t)v63);
    unint64_t v5 = rf::realityFusionLogObject(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      rf::helpers::getRFUUIDFromAnchor((uint64_t)v63, (uint64_t)v10);
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v10, __p);
      unint64_t v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      uint64_t v62 = v6;
      _os_log_impl(&dword_235A7C000, v5, OS_LOG_TYPE_DEFAULT, "AnchorDataProvider: Removing AnchorDefinition anchor %s", buf, 0xCu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    char v12 = 0;
    char v13 = 0;
    __int16 v14 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    char v52 = 0;
    __int16 v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    char v60 = 0;
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    char v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    char v53 = 1;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v10[7] + 1, (uint64_t)v63);
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v10);
    }
    rf::data_flow::provider::InputData::~InputData((void **)v10);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v63);
  }
  return result;
}

void sub_235A7F38C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264C68188, MEMORY[0x263F8C060]);
}

void sub_235A7F4D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void rf::UserDefaults::~UserDefaults(const void **this)
{
  v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__push_back_slow_path<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x78787878787878) {
    unint64_t v9 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  char v13 = v10;
  __int16 v14 = &v10[272 * v4];
  long long v16 = &v10[272 * v9];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v14, a2);
  long long v15 = v14 + 272;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_235A7F67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_235A7F6C4(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 256);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 256) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 256);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 256) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[27];
  if (v3)
  {
    a2[28] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[14];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 183) < 0) {
    operator delete(*(void **)(a2 + 160));
  }
  if (*(char *)(a2 + 159) < 0) {
    operator delete(*(void **)(a2 + 136));
  }
  uint64_t v3 = *(void **)(a2 + 112);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 175) < 0) {
    operator delete(*(void **)(a2 + 152));
  }
  if (*(char *)(a2 + 151) < 0) {
    operator delete(*(void **)(a2 + 128));
  }
  uint64_t v3 = *(void **)(a2 + 112);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  long long v5 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  long long v6 = a3[3];
  long long v7 = a3[4];
  long long v8 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 48) = v6;
  id result = *((id *)a3 + 14);
  *(void *)(a2 + 112) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  long long v7 = a3[3];
  long long v8 = a3[4];
  long long v9 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(void *)(a2 + 112) = *((id *)a3 + 14);
  long long v10 = a3[11];
  long long v12 = a3[8];
  long long v11 = a3[9];
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 128) = v12;
  *(_OWORD *)(a2 + 144) = v11;
  __n128 result = (__n128)a3[14];
  long long v14 = a3[15];
  long long v16 = a3[12];
  long long v15 = a3[13];
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v14;
  *(_OWORD *)(a2 + 192) = v16;
  *(_OWORD *)(a2 + 208) = v15;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  long long v7 = a3[3];
  long long v8 = a3[4];
  long long v9 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(void *)(a2 + 112) = *((id *)a3 + 14);
  float result = *((float *)a3 + 32);
  *(float *)(a2 + 128) = result;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 112) = *((id *)a2 + 14);
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[12];
  uint64_t v12 = *((void *)a2 + 26);
  long long v13 = a2[8];
  long long v14 = a2[9];
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 128) = v13;
  *(void *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((void *)(a1 + 216), *((const void **)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 4);
  return a1;
}

void sub_235A7FA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    float result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_235A7FAD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  }
  float result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev()
{
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 112) = *((id *)a2 + 14);
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v9;
  }
  long long v10 = (std::string *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v11 = a2[10];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  return a1;
}

void sub_235A7FC50(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v2);
  }

  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 112) = *((id *)a2 + 14);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v9;
  }
  long long v10 = (std::string *)(a1 + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 152);
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = a2[11];
  long long v13 = a2[12];
  long long v14 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_235A7FDEC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v2);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 256);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  return a1;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 272;
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(result - 272, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(272 * a2);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 256);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 256) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 256);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E8F37D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 256) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  __n128 result = (__n128)a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  long long v9 = a3[9];
  *(_OWORD *)(a2 + 128) = a3[8];
  *(_OWORD *)(a2 + 144) = v9;
  long long v10 = a3[10];
  long long v11 = a3[12];
  uint64_t v12 = *((void *)a3 + 26);
  *(_OWORD *)(a2 + 176) = a3[11];
  *(_OWORD *)(a2 + 192) = v11;
  *(_OWORD *)(a2 + 160) = v10;
  *(void *)(a2 + 208) = v12;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 216);
  *(__n128 *)(a2 + 216) = result;
  *(void *)(a2 + 232) = *((void *)a3 + 29);
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  *((void *)a3 + 29) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  *(unsigned char *)(a2 + 128) = *((unsigned char *)a3 + 128);
  long long v9 = *(long long *)((char *)a3 + 136);
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  *(_OWORD *)(a2 + 136) = v9;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 17) = 0;
  uint64_t v10 = *((void *)a3 + 22);
  *(_OWORD *)(a2 + 160) = a3[10];
  *(void *)(a2 + 176) = v10;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 20) = 0;
  __n128 result = (__n128)a3[12];
  *(__n128 *)(a2 + 192) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  uint64_t v9 = *((void *)a3 + 18);
  *(_OWORD *)(a2 + 128) = a3[8];
  *(void *)(a2 + 144) = v9;
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 16) = 0;
  long long v10 = *(long long *)((char *)a3 + 152);
  *(void *)(a2 + 168) = *((void *)a3 + 21);
  *(_OWORD *)(a2 + 152) = v10;
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 19) = 0;
  __n128 result = (__n128)a3[11];
  long long v12 = a3[12];
  long long v13 = a3[14];
  *(_OWORD *)(a2 + 208) = a3[13];
  *(_OWORD *)(a2 + 224) = v13;
  *(__n128 *)(a2 + 176) = result;
  *(_OWORD *)(a2 + 192) = v12;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  long long v9 = a3[8];
  long long v10 = a3[9];
  long long v11 = a3[11];
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 144) = v10;
  __n128 result = (__n128)a3[12];
  long long v13 = a3[13];
  long long v14 = a3[15];
  *(_OWORD *)(a2 + 224) = a3[14];
  *(_OWORD *)(a2 + 240) = v14;
  *(__n128 *)(a2 + 192) = result;
  *(_OWORD *)(a2 + 208) = v13;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t v8 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 112) = v8;
  float result = *((float *)a3 + 32);
  *(float *)(a2 + 128) = result;
  return result;
}

uint64_t std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(i - 272);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void rf::data_flow::provider::InputData::~InputData(void **this)
{
  if (*((char *)this + 839) < 0) {
    operator delete(this[102]);
  }
  if (*((char *)this + 807) < 0) {
    operator delete(this[98]);
  }
  if (*((char *)this + 783) < 0) {
    operator delete(this[95]);
  }
  uint64_t v2 = this[92];
  if (v2)
  {
    this[93] = v2;
    operator delete(v2);
  }
  long long v9 = this + 89;
  std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 86;
  std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v3 = this[83];
  if (v3)
  {
    this[84] = v3;
    operator delete(v3);
  }
  long long v9 = this + 80;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 77;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v4 = this[74];
  if (v4)
  {
    this[75] = v4;
    operator delete(v4);
  }
  long long v5 = this[71];
  if (v5)
  {
    this[72] = v5;
    operator delete(v5);
  }
  long long v6 = this[68];
  if (v6)
  {
    this[69] = v6;
    operator delete(v6);
  }
  long long v7 = this[65];
  if (v7)
  {
    this[66] = v7;
    operator delete(v7);
  }
  long long v9 = this + 62;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 59;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((unsigned char *)this + 448)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(this + 22));
  }
  long long v9 = this + 18;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 15;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 12;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this + 9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v8 = this[6];
  if (v8)
  {
    this[7] = v8;
    operator delete(v8);
  }
  long long v9 = this + 3;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = this;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void std::vector<rf::data_flow::provider::InputRoomBoundary>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 1200;
        std::__destroy_at[abi:ne180100]<rf::data_flow::provider::InputRoomBoundary,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<rf::data_flow::provider::InputRoomBoundary,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1184)) {
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 848));
  }
  if (*(unsigned char *)(a1 + 832)) {
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 496));
  }
  if (*(unsigned char *)(a1 + 480))
  {
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(a1 + 144));
  }
}

void rf::data_flow::provider::InputMesh::~InputMesh(id *this)
{
  if (*((unsigned char *)this + 328)) {

  }
  if (*((unsigned char *)this + 296)) {
  if (*((unsigned char *)this + 264))
  }

  if (*((unsigned char *)this + 232)) {
  if (*((unsigned char *)this + 200))
  }

  if (*((unsigned char *)this + 168)) {
  if (*((unsigned char *)this + 136))
  }
}

void std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        rf::data_flow::provider::InputMesh::~InputMesh(v4 - 42);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 144)
  {
    if (*(unsigned char *)(i - 24)) {
  }
    }
  a1[1] = v2;
}

void std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 272);
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v3 - 272);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26E8F3818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F3818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(*(void *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_0>,void ()(REComponent *)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235A80B6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26E8F38A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F38A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(*(void *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_1>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26E8F3928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F3928;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::addAnchorDefinitionComponent(*(void *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_2>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26E8F39A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F39A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return rf::data_flow::provider::AnchorDataProvider::removeAnchorDefinitionComponent(*(void *)(a1 + 8));
}

uint64_t std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3,std::allocator<rf::data_flow::provider::AnchorDataProvider::registerCallbackToComponent(void)::$_3>,void ()(REComponent *)>::target_type()
{
}

void *std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void rf::data_flow::PlaneAnchor::~PlaneAnchor(rf::data_flow::PlaneAnchor *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264C68190, MEMORY[0x263F8C068]);
}

void sub_235A81178(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void rf::getMessage(rf *this@<X0>, void *a2@<X8>, ...)
{
  va_start(va, a2);
  size_t v5 = vsnprintf(0, 0, (const char *)this, va);
  long long v6 = (char *)malloc_type_malloc(v5 + 1, 0x7A27C40EuLL);
  vsnprintf(v6, v5 + 1, (const char *)this, va);
  std::string::basic_string[abi:ne180100](a2, v6, v5);
  free(v6);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    long long v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    long long v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void RFARKitDataProviderCreate(void *a1)
{
  id v1 = a1;
  if (qword_26AB583F8 != -1) {
    dispatch_once(&qword_26AB583F8, &__block_literal_global);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235A81440(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v2, 0xA0C403368BFA0);

  _Unwind_Resume(a1);
}

void RFARKitDataProviderSetARSession(uint64_t a1, ARSession *a2)
{
}

id RFARKitDataProviderGetARSession(uint64_t a1)
{
  return *(id *)(*(void *)(a1 + 16) + 48);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider17ARKitDataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::provider::ARKitDataProvider]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58400 = 0u;
  xmmword_26AB58410 = 0u;
  xmmword_26AB58420 = 0u;
  unk_26AB58430 = 0u;
  xmmword_26AB58440 = 0u;
  unk_26AB58450 = 0u;
  size_t v7 = __dst;
  if (v9 < 0) {
    size_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58400 + 1) = v7;
  *(void *)&xmmword_26AB58410 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::initCallback;
  *(void *)&xmmword_26AB58420 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::finalizeCallback;
  qword_26AB58438 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58440 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235A81618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *float result = a2;
  if (v2)
  {
    rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider((rf::data_flow::provider::ARKitDataProvider *)(v2 + 8));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    size_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_235A81720(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

BOOL rf::data_flow::RFUUID::Equality::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16)) {
    int v3 = *(const unsigned __int8 **)a2;
  }
  else {
    int v3 = (const unsigned __int8 *)a2;
  }
  if (*(unsigned char *)(a3 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a3;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a3;
  }
  return uuid_compare(v3, v4) == 0;
}

__n128 _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void rf::detail::insertProbeInto(rf *a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = (long long *)a2[1];
  if (*a2 != (uint64_t *)v5)
  {
    do
    {
      long long v7 = *((_OWORD *)v4 + 1);
      long long v36 = *(_OWORD *)v4;
      long long v37 = v7;
      std::vector<int>::size_type v8 = rf::realityFusionLogObject(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v36, __p);
        int64_t v9 = __p;
        if (v33 < 0) {
          int64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        long long v35 = v9;
        _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Adding probe %s", buf, 0xCu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      unint64_t v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        long long v14 = *a3;
        uint64_t v15 = (v11 - *a3) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v10 - (void)v14;
        if (v17 >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v18);
          long long v14 = *a3;
          unint64_t v11 = a3[1];
        }
        else
        {
          long long v19 = 0;
        }
        long long v20 = v37;
        long long v21 = &v19[32 * v15];
        *(_OWORD *)long long v21 = v36;
        *((_OWORD *)v21 + 1) = v20;
        if (v11 == v14)
        {
          long long v24 = &v19[32 * v15];
        }
        else
        {
          long long v22 = &v19[32 * v15];
          do
          {
            long long v23 = *((_OWORD *)v11 - 1);
            long long v24 = v22 - 32;
            *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v11 -= 32;
            v22 -= 32;
          }
          while (v11 != v14);
        }
        long long v13 = v21 + 32;
        *a3 = v24;
        a3[1] = v21 + 32;
        a3[2] = &v19[32 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        long long v12 = v37;
        *(_OWORD *)unint64_t v11 = v36;
        *((_OWORD *)v11 + 1) = v12;
        long long v13 = v11 + 32;
      }
      a3[1] = v13;
      uint64_t v25 = *(void *)a1 + 288;
      __p[0] = &v36;
      long long v26 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v25, (uint64_t)&v36, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v27 = *(_OWORD *)v4;
      long long v28 = *((_OWORD *)v4 + 2);
      *((_OWORD *)v26 + 4) = *((_OWORD *)v4 + 1);
      *((_OWORD *)v26 + 5) = v28;
      *((_OWORD *)v26 + 3) = v27;
      long long v29 = *((_OWORD *)v4 + 3);
      long long v30 = *((_OWORD *)v4 + 4);
      long long v31 = *((_OWORD *)v4 + 6);
      *((_OWORD *)v26 + 8) = *((_OWORD *)v4 + 5);
      *((_OWORD *)v26 + 9) = v31;
      *((_OWORD *)v26 + 6) = v29;
      *((_OWORD *)v26 + 7) = v30;
      std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)(v26 + 20), v4 + 14);
      v26[22] = v4[16];
      v4 += 18;
    }
    while (v4 != (uint64_t *)v5);
  }
}

void sub_235A81AD4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void rf::detail::updateProbeAt(uint64_t a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = (long long *)a2[1];
  if (*a2 != (uint64_t *)v5)
  {
    do
    {
      long long v7 = *((_OWORD *)v4 + 1);
      long long v31 = *(_OWORD *)v4;
      long long v32 = v7;
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 288), (uint64_t)&v31))
      {
        int64_t v9 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          long long v12 = *a3;
          uint64_t v13 = (v9 - *a3) >> 5;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v8 - (void)v12;
          if (v15 >> 4 > v14) {
            unint64_t v14 = v15 >> 4;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v16);
            long long v12 = *a3;
            int64_t v9 = a3[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          long long v18 = v32;
          long long v19 = &v17[32 * v13];
          *(_OWORD *)long long v19 = v31;
          *((_OWORD *)v19 + 1) = v18;
          if (v9 == v12)
          {
            long long v22 = &v17[32 * v13];
          }
          else
          {
            long long v20 = &v17[32 * v13];
            do
            {
              long long v21 = *((_OWORD *)v9 - 1);
              long long v22 = v20 - 32;
              *((_OWORD *)v20 - 2) = *((_OWORD *)v9 - 2);
              *((_OWORD *)v20 - 1) = v21;
              v9 -= 32;
              v20 -= 32;
            }
            while (v9 != v12);
          }
          unint64_t v11 = v19 + 32;
          *a3 = v22;
          a3[1] = v19 + 32;
          a3[2] = &v17[32 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          long long v10 = v32;
          *(_OWORD *)int64_t v9 = v31;
          *((_OWORD *)v9 + 1) = v10;
          unint64_t v11 = v9 + 32;
        }
        a3[1] = v11;
        uint64_t v23 = *(void *)a1 + 288;
        long long v30 = &v31;
        long long v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v23, (uint64_t)&v31, (uint64_t)&std::piecewise_construct, &v30);
        long long v25 = *(_OWORD *)v4;
        long long v26 = *((_OWORD *)v4 + 2);
        *((_OWORD *)v24 + 4) = *((_OWORD *)v4 + 1);
        *((_OWORD *)v24 + 5) = v26;
        *((_OWORD *)v24 + 3) = v25;
        long long v27 = *((_OWORD *)v4 + 3);
        long long v28 = *((_OWORD *)v4 + 4);
        long long v29 = *((_OWORD *)v4 + 6);
        *((_OWORD *)v24 + 8) = *((_OWORD *)v4 + 5);
        *((_OWORD *)v24 + 9) = v29;
        *((_OWORD *)v24 + 6) = v27;
        *((_OWORD *)v24 + 7) = v28;
        std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)(v24 + 20), v4 + 14);
        v24[22] = v4[16];
      }
      v4 += 18;
    }
    while (v4 != (uint64_t *)v5);
  }
}

void sub_235A81D0C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *rf::detail::removeProbeFrom@<X0>(uint64_t *result@<X0>, rf::data_flow::RFUUID **a2@<X1>, char **a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = result;
    do
    {
      long long v7 = rf::realityFusionLogObject((rf *)result);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string(v4, __p);
        unint64_t v8 = __p;
        if (v25 < 0) {
          unint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        long long v27 = v8;
        _os_log_impl(&dword_235A7C000, v7, OS_LOG_TYPE_DEFAULT, "ARState: Removing probe %s", buf, 0xCu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }

      long long v10 = a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = (v10 - *a3) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v9 - (void)v13;
        if (v16 >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v17);
          uint64_t v13 = *a3;
          long long v10 = a3[1];
        }
        else
        {
          long long v18 = 0;
        }
        long long v19 = *((_OWORD *)v4 + 1);
        long long v20 = &v18[32 * v14];
        *(_OWORD *)long long v20 = *(_OWORD *)v4;
        *((_OWORD *)v20 + 1) = v19;
        if (v10 == v13)
        {
          uint64_t v23 = &v18[32 * v14];
        }
        else
        {
          long long v21 = &v18[32 * v14];
          do
          {
            long long v22 = *((_OWORD *)v10 - 1);
            uint64_t v23 = v21 - 32;
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v10 -= 32;
            v21 -= 32;
          }
          while (v10 != v13);
        }
        long long v12 = v20 + 32;
        *a3 = v23;
        a3[1] = v20 + 32;
        a3[2] = &v18[32 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        long long v11 = *((_OWORD *)v4 + 1);
        *(_OWORD *)long long v10 = *(_OWORD *)v4;
        *((_OWORD *)v10 + 1) = v11;
        long long v12 = v10 + 32;
      }
      a3[1] = v12;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v6 + 1240), (uint64_t)v4);
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v6 + 1280), (uint64_t)v4);
      __n128 result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v6 + 288), (uint64_t)v4);
      uint64_t v4 = (rf::data_flow::RFUUID *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
  return result;
}

void sub_235A81F74(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      id v4 = *(id *)a1;
      *(void *)a1 = v3;
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {

    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v23 = *(void **)a2;
    }
    else {
      uint64_t v23 = (void *)a2;
    }
    unint64_t v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_21;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v4 = v7;
    if (v7 >= v8) {
      unint64_t v4 = v7 % v8;
    }
  }
  else
  {
    unint64_t v4 = (v8 - 1) & v7;
  }
  long long v11 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v11) {
    goto LABEL_21;
  }
  long long v12 = (void *)*v11;
  if (!*v11) {
    goto LABEL_21;
  }
  long long v24 = a4;
  do
  {
    unint64_t v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
        return v12;
      }
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8) {
        v13 %= v8;
      }
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4) {
      break;
    }
LABEL_19:
    long long v12 = (void *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)&v25);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *char v25 = *v20;
    *long long v20 = v25;
  }
  else
  {
    *char v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      unint64_t v21 = *(void *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v25;
    }
  }
  long long v12 = v25;
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_235A822F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xC0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  long long v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  *((unsigned char *)v8 + 168) = 0;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((unsigned char *)v8 + 160) = 0;
  *(void *)&double result = 1065353216;
  *((void *)v8 + 22) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_235A823C8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      long long v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *long long v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            long long v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          long long v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((unsigned char *)__p + 168)) {
  }
    }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (!v3)
  {
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v13 = *(void **)a2;
    }
    else {
      unint64_t v13 = (void *)a2;
    }
    unint64_t v3 = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
    *(void *)(a2 + 24) = v3;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v7 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v4 - 1) & v3;
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint8x8_t v9 = (void *)*v8;
  if (*v8)
  {
    uint64_t v10 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v11 = v9[1];
      if (v11 == v3)
      {
        if (rf::data_flow::RFUUID::Equality::operator()(v10, (uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v11 >= *(void *)&v4) {
            v11 %= *(void *)&v4;
          }
        }
        else
        {
          v11 &= *(void *)&v4 - 1;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint8x8_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>(void *a1, uint64_t a2)
{
  double result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>(void *a1, uint64_t a2)
{
  double result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, a2, (uint64_t)&__p);
  int8x8_t v3 = (id *)__p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

_DWORD *rf::data_flow::consumer::SceneGraphVisualizer::drawSceneObject(_DWORD *result, float32x4_t *a2)
{
  int8x8_t v3 = result;
  int v4 = *result;
  if (*result)
  {
    double result = (_DWORD *)rf::helpers::drawAxis();
    int v4 = *v3;
  }
  if ((v4 & 2) != 0)
  {
    __asm { FMOV            V0.4S, #1.0 }
    return (_DWORD *)rf::helpers::drawBoundingBox(*((void *)v3 + 2), *((void *)v3 + 1), a2 + 2, a2[6].f32);
  }
  return result;
}

void rf::data_flow::provider::SyntheticARDataProvider::SyntheticARDataProvider(rf::data_flow::provider::SyntheticARDataProvider *a1, uint64_t a2)
{
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = &unk_26E8F3A58;
  uint64_t v4 = a2 + 8;
  *((void *)a1 + 3) = *(id *)a2;
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100]((uint64_t)a1 + 32, v4);
  *((void *)a1 + 8) = *(void *)(a2 + 40);
  rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(a1, v5);
}

void sub_235A82AF4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::~__value_func[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider *this, rf::data_flow::provider::SyntheticARDataProvider *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_235A82E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::provider::SyntheticARDataProvider::reset(rf::data_flow::provider::SyntheticARDataProvider *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  char v6 = 0;
  char v7 = 0;
  __int16 v8 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  char v38 = 0;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  __int16 v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  uint64_t v2 = (void *)((char *)this + 144);
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    rf::data_flow::provider::SyntheticARData::appendRemovedData((uint64_t)(v2 + 4), (uint64_t)v4);
  }
  LOBYTE(v47) = 1;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    rf::Session::consumeInputFromProvider(v3, (uint64_t)v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::clear((uint64_t)this + 128);
  rf::data_flow::provider::InputData::~InputData((void **)v4);
}

void sub_235A830C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::DataGraph::FunctionProperties::~FunctionProperties(void **this)
{
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

void rf::data_flow::provider::SyntheticARDataProvider::addData(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  unint64_t v50 = a2;
  LOBYTE(v115) = 0;
  *((void *)&v115 + 1) = 0;
  uuid_clear(uu);
  uint64_t v5 = (void **)(a1 + 128);
  char v6 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)(a1 + 128), &v50);
  if (v6)
  {
    char v7 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)(a1 + 128), &v50);
    if (!v7) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v8 = *((_OWORD *)v7 + 10);
    *(_OWORD *)uuid_t uu = *((_OWORD *)v7 + 9);
    long long v115 = v8;
    rf::data_flow::provider::SyntheticARDataProvider::removeData((rf::data_flow::provider::SyntheticARDataProvider *)a1, v50);
  }
  long long v9 = operator new(0x1B0uLL);
  long long v10 = (void *)(a1 + 144);
  *(void *)&long long v56 = v9;
  *((void *)&v56 + 1) = a1 + 144;
  LOBYTE(v57) = 0;
  void *v9 = 0;
  v9[1] = 0;
  v9[2] = v50;
  rf::data_flow::provider::SyntheticARData::SyntheticARData((uint64_t)(v9 + 4), *(void **)(a1 + 24), *(void *)(a1 + 64), a3);
  LOBYTE(v57) = 1;
  v9[1] = v9[2];
  long long v11 = (void *)v56;
  unint64_t v12 = *(void *)(v56 + 16);
  *(void *)(v56 + 8) = v12;
  unint64_t v13 = *(void *)(a1 + 136);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v15 = v12;
      if (v13 <= v12) {
        unint64_t v15 = v12 % v13;
      }
    }
    else
    {
      unint64_t v15 = (v13 - 1) & v12;
    }
    long long v16 = (void *)*((void *)*v5 + v15);
    if (v16)
    {
      for (char i = (void *)*v16; i; char i = (void *)*i)
      {
        unint64_t v18 = i[1];
        if (v18 == v12)
        {
          if (i[2] == v12) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= v13) {
              v18 %= v13;
            }
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v15) {
            break;
          }
        }
      }
    }
  }
  float v19 = (float)(unint64_t)(*(void *)(a1 + 152) + 1);
  float v20 = *(float *)(a1 + 160);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v13 = *(void *)(a1 + 136);
    }
    if (*(void *)&prime > v13) {
      goto LABEL_104;
    }
    if (*(void *)&prime >= v13) {
      goto LABEL_61;
    }
    unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
    if (v13 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
    {
      unint64_t v31 = std::__next_prime(v31);
    }
    else
    {
      uint64_t v33 = 1 << -(char)__clz(v31 - 1);
      if (v31 >= 2) {
        unint64_t v31 = v33;
      }
    }
    if (*(void *)&prime <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime >= v13)
    {
      unint64_t v13 = *(void *)(a1 + 136);
      goto LABEL_61;
    }
    if (prime)
    {
LABEL_104:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v25 = operator new(8 * *(void *)&prime);
      long long v26 = *v5;
      rf::data_flow::provider::SyntheticARDataProvider *v5 = v25;
      if (v26) {
        operator delete(v26);
      }
      uint64_t v27 = 0;
      *(int8x8_t *)(a1 + 136) = prime;
      do
        *((void *)*v5 + v27++) = 0;
      while (*(void *)&prime != v27);
      long long v28 = (void *)*v10;
      if (*v10)
      {
        unint64_t v29 = v28[1];
        uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        *((void *)*v5 + v29) = v10;
        long long v34 = (void *)*v28;
        if (*v28)
        {
          do
          {
            unint64_t v35 = v34[1];
            if (v30.u32[0] > 1uLL)
            {
              if (v35 >= *(void *)&prime) {
                v35 %= *(void *)&prime;
              }
            }
            else
            {
              v35 &= *(void *)&prime - 1;
            }
            if (v35 != v29)
            {
              if (!*((void *)*v5 + v35))
              {
                *((void *)*v5 + v35) = v28;
                goto LABEL_57;
              }
              *long long v28 = *v34;
              *long long v34 = **((void **)*v5 + v35);
              **((void **)*v5 + v35) = v34;
              long long v34 = v28;
            }
            unint64_t v35 = v29;
LABEL_57:
            long long v28 = v34;
            long long v34 = (void *)*v34;
            unint64_t v29 = v35;
          }
          while (v34);
        }
      }
      unint64_t v13 = (unint64_t)prime;
    }
    else
    {
      char v46 = *v5;
      rf::data_flow::provider::SyntheticARDataProvider *v5 = 0;
      if (v46) {
        operator delete(v46);
      }
      unint64_t v13 = 0;
      *(void *)(a1 + 136) = 0;
    }
  }
LABEL_61:
  unint64_t v36 = v11[1];
  uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.u32[0] > 1uLL)
  {
    if (v36 >= v13) {
      v36 %= v13;
    }
  }
  else
  {
    v36 &= v13 - 1;
  }
  char v38 = (void *)*((void *)*v5 + v36);
  if (v38)
  {
    *long long v11 = *v38;
LABEL_73:
    *char v38 = v11;
    goto LABEL_74;
  }
  *long long v11 = *v10;
  *long long v10 = v11;
  *((void *)*v5 + v36) = v10;
  if (*v11)
  {
    unint64_t v39 = *(void *)(*v11 + 8);
    if (v37.u32[0] > 1uLL)
    {
      if (v39 >= v13) {
        v39 %= v13;
      }
    }
    else
    {
      v39 &= v13 - 1;
    }
    char v38 = (char *)*v5 + 8 * v39;
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 152);
  *(void *)&long long v56 = 0;
LABEL_75:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v56, 0);
  char v67 = 0;
  char v68 = 0;
  __int16 v69 = 0;
  uint64_t v89 = 0;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  __int16 v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  memset(v88, 0, sizeof(v88));
  char v96 = 0;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  std::string::operator=(v88, (const std::string *)a3);
  LOBYTE(v106) = 1;
  uint64_t v40 = *(void *)(a1 + 8);
  if (v40) {
    rf::Session::consumeInputFromProvider(v40, (uint64_t)&v56);
  }
  if (*(void *)(a1 + 112))
  {
    if (!v6) {
      goto LABEL_89;
    }
    goto LABEL_83;
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v41 = *(void *)(a1 + 88);
  uint64_t v51 = *(void *)(a1 + 104);
  rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>(v41, (uint64_t)&v51, (uint64_t)v47);
  if (__p)
  {
    char v49 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v47);
  if (v6)
  {
LABEL_83:
    char v42 = (float32x4_t *)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)(a1 + 128), &v50);
    if (!v42) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    char v43 = v42 + 2;
    if ((_BYTE)v115) {
      char v44 = *(unsigned __int8 **)uu;
    }
    else {
      char v44 = uu;
    }
    rf::data_flow::provider::SyntheticARData::appendUpdateProbe(v43, (rf::data_flow::provider::InputData *)&v56, v44);
    LOBYTE(v106) = 1;
    uint64_t v45 = *(void *)(a1 + 8);
    if (v45) {
      rf::Session::consumeInputFromProvider(v45, (uint64_t)&v56);
    }
  }
LABEL_89:
  rf::data_flow::provider::InputData::~InputData((void **)&v56);
}

void sub_235A83790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void rf::data_flow::provider::SyntheticARDataProvider::removeData(rf::data_flow::provider::SyntheticARDataProvider *this, unint64_t a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v6 = a2;
  uint64_t v3 = (void *)((char *)this + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)this + 16, &v6))
  {
    char v9 = 0;
    char v10 = 0;
    __int16 v11 = 0;
    uint64_t v33 = 0;
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    char v41 = 0;
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    __int16 v50 = 0;
    char v51 = 0;
    char v52 = 0;
    char v53 = 0;
    char v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    char v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v3, &v6);
    if (!v4) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    rf::data_flow::provider::SyntheticARData::appendRemovedData((uint64_t)(v4 + 4), (uint64_t)v7);
    LOBYTE(v50) = 1;
    uint64_t v5 = *((void *)this + 1);
    if (v5) {
      rf::Session::consumeInputFromProvider(v5, (uint64_t)v7);
    }
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__erase_unique<unsigned long>(v3, &v6);
    rf::data_flow::provider::InputData::~InputData((void **)v7);
  }
}

void sub_235A83950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void rf::data_flow::provider::SyntheticARDataProvider::setDataTransform(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  unint64_t v12 = a2;
  uint64_t v5 = (void *)(a1 + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)(a1 + 128), &v12))
  {
    char v15 = 0;
    char v16 = 0;
    __int16 v17 = 0;
    uint64_t v39 = 0;
    uint64_t v41 = 0;
    uint64_t v40 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    char v52 = 0;
    char v53 = 0;
    char v54 = 0;
    char v55 = 0;
    __int16 v56 = 0;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    char v60 = 0;
    char v61 = 0;
    char v62 = 0;
    char v63 = 0;
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    char v46 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v12);
    if (!v6) {
      goto LABEL_8;
    }
    long long v7 = *a3;
    long long v8 = a3[1];
    long long v9 = a3[3];
    v6[7] = a3[2];
    v6[8] = v9;
    v6[5] = v7;
    v6[6] = v8;
    char v10 = std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v12);
    if (!v10) {
LABEL_8:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    rf::data_flow::provider::SyntheticARData::appendUpdatedData((rf::data_flow::provider::SyntheticARData *)(v10 + 4), (rf::data_flow::provider::InputData *)v13);
    LOBYTE(v56) = 1;
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11) {
      rf::Session::consumeInputFromProvider(v11, (uint64_t)v13);
    }
    rf::data_flow::provider::InputData::~InputData((void **)v13);
  }
}

void sub_235A83B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void rf::data_flow::provider::SyntheticARDataProvider::provideEnvironmentProbesOnRequest(rf::data_flow::provider::SyntheticARDataProvider *this, unint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v8 = a2;
  uint64_t v5 = (void *)((char *)this + 128);
  if (std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>((void *)this + 16, &v8))
  {
    char v11 = 0;
    char v12 = 0;
    __int16 v13 = 0;
    uint64_t v35 = 0;
    uint64_t v37 = 0;
    uint64_t v36 = 0;
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    __int16 v52 = 0;
    char v53 = 0;
    char v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    char v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    unint64_t v6 = (float32x4_t *)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(v5, &v8);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    rf::data_flow::provider::SyntheticARData::appendUpdateProbe(v6 + 2, (rf::data_flow::provider::InputData *)v9, a3);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      rf::Session::consumeInputFromProvider(v7, (uint64_t)v9);
    }
    rf::data_flow::provider::InputData::~InputData((void **)v9);
  }
}

void sub_235A83CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void rf::data_flow::provider::SyntheticARDataProvider::~SyntheticARDataProvider(rf::data_flow::provider::SyntheticARDataProvider *this)
{
  rf::data_flow::provider::SyntheticARDataProvider::~SyntheticARDataProvider(this);
  JUMPOUT(0x237DEE2B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::~__hash_table((uint64_t)this + 128);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::~__value_func[abi:ne180100]((void *)this + 4);
}

uint64_t std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData &,rf::data_flow::provider::InputData &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_235A83E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<rf::data_flow::DataGraph>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<rf::data_flow::DataGraph>::__enable_weak_this[abi:ne180100]<rf::data_flow::DataGraph,rf::data_flow::DataGraph,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::DataGraph *,std::shared_ptr<rf::data_flow::DataGraph>::__shared_ptr_default_delete<rf::data_flow::DataGraph,rf::data_flow::DataGraph>,std::allocator<rf::data_flow::DataGraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<rf::data_flow::DataGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void **)(a2 + 64);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a2 + 88);
    uint64_t v5 = v3;
    std::vector<rf::data_flow::details::FunctionStore::Function>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::~__hash_table(a2 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x237DEE2B0](a2, 0x10A0C401735900DLL);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<rf::data_flow::details::FunctionStore::Function>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::~__value_func[abi:ne180100]((void *)a1);
}

void *std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void rf::data_flow::details::Context::~Context(rf::data_flow::details::Context *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      rf::data_flow::provider::SyntheticARData::~SyntheticARData((rf::data_flow::provider::SyntheticARData *)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void rf::data_flow::provider::SyntheticARData::~SyntheticARData(rf::data_flow::provider::SyntheticARData *this)
{
  uint64_t v2 = (void *)*((void *)this + 45);
  if (v2)
  {
    *((void *)this + 46) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 42);
  if (v3)
  {
    *((void *)this + 43) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 39);
  if (v4)
  {
    *((void *)this + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 36);
  if (v5)
  {
    *((void *)this + 37) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 33);
  if (v6)
  {
    *((void *)this + 34) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 216);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void rf::getTypeName<void>(unsigned char *a1@<X8>)
{
  size_t v2 = 0;
  int v3 = 1;
  for (char i = 118; i != 91; char i = aStdStringViewR_1[v2++ + 51])
  {
    if (i == 93)
    {
      int v5 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      size_t v2 = 0;
      a1[23] = 0;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v5 = 1;
LABEL_8:
  v3 += v5;
  if (v3) {
    goto LABEL_9;
  }
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    *((void *)a1 + 1) = v2;
    *((void *)a1 + 2) = v7 | 0x8000000000000000;
    *(void *)a1 = v8;
    a1 = v8;
  }
  else
  {
    a1[23] = v2;
    if (!v2) {
      goto LABEL_18;
    }
  }
  memcpy(a1, "void]", v2);
LABEL_18:
  a1[v2] = 0;
}

void rf::data_flow::details::FunctionStore::addFunctionImpl(uint64_t *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  char v11 = *(void **)a4;
  char v12 = *(void **)(a4 + 8);
  if (*(void **)a4 != v12)
  {
    do
    {
      *(void *)&v24[0] = *v11;
      *((void *)&v24[0] + 1) = v10;
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_multi<std::pair<unsigned long const,unsigned long>>(a1 + 3, v24);
      ++v11;
    }
    while (v11 != v12);
  }
  std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100]((uint64_t)v24, a2);
  std::to_string(&v22, v10);
  __int16 v13 = std::string::insert(&v22, 0, "Function ", 9uLL);
  std::string v23 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v14 = &v23;
  if (a3[1].__r_.__value_.__s.__data_[0]) {
    long long v14 = a3;
  }
  std::string::size_type v26 = v14->__r_.__value_.__r.__words[2];
  long long v25 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  uint64_t v15 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v16 = *a5;
  uint64_t v28 = v15;
  uint64_t v29 = v16;
  unint64_t v17 = a1[1];
  if (v17 >= a1[2])
  {
    uint64_t v20 = std::vector<rf::data_flow::details::FunctionStore::Function>::__push_back_slow_path<rf::data_flow::details::FunctionStore::Function>(a1, (uint64_t)v24);
    long long v21 = __p[0];
    a1[1] = v20;
    if (v21)
    {
      __p[1] = v21;
      operator delete(v21);
    }
  }
  else
  {
    uint64_t v18 = std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](v17, (uint64_t)v24);
    long long v19 = v25;
    *(void *)(v18 + 48) = v26;
    *(void *)(v18 + 56) = 0;
    *(_OWORD *)(v18 + 32) = v19;
    long long v25 = 0uLL;
    std::string::size_type v26 = 0;
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 72) = 0;
    *(_OWORD *)(v18 + 56) = *(_OWORD *)__p;
    *(void *)(v18 + 72) = v28;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v28 = 0;
    *(void *)(v18 + 80) = v29;
    a1[1] = v18 + 88;
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_235A8496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_multi<std::pair<unsigned long const,unsigned long>>(void *a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  *uint64_t v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_235A84A38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    double result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (char i = (void *)*v7; *v7; char i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::vector<rf::data_flow::details::FunctionStore::Function>::__push_back_slow_path<rf::data_flow::details::FunctionStore::Function>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[88 * v9];
  std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](v11, a2);
  long long v12 = *(_OWORD *)(a2 + 32);
  *(void *)(v11 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(v11 + 32) = v12;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(v11 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(v11 + 80) = *(void *)(a2 + 80);
  v15[2] = v11 + 88;
  std::vector<rf::data_flow::details::FunctionStore::Function>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_235A85038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<rf::data_flow::details::FunctionStore::Function>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::details::FunctionStore::Function>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>,std::reverse_iterator<rf::data_flow::details::FunctionStore::Function*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](a7 + v11 - 88, a3 + v11 - 88);
      long long v14 = *(_OWORD *)(a3 + v11 - 56);
      *(void *)(v12 - 40) = *(void *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v11 - 32);
      uint64_t v15 = *(void *)(a3 + v11 - 8);
      *(void *)(v12 - 16) = *(void *)(a3 + v11 - 16);
      *(void *)(v13 - 32) = 0;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v12 - 8) = v15;
      v11 -= 88;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t std::__split_buffer<rf::data_flow::details::FunctionStore::Function>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<rf::data_flow::details::FunctionStore::Function,0>(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(rf::data_flow::details::Context &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x20uLL);
  *(void *)size_t v2 = &unk_26E8F3A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E8F3A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(unint64_t *a1, rf::data_flow::details::Context *a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, a1 + 1);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, void, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  char v13 = 0;
  char v14 = 0;
  __int16 v15 = 0;
  uint64_t v37 = 0;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  __int16 v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  char v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v7 = (void *)(a1[3] + 144);
  long long v40 = 0u;
  long long v41 = 0u;
  while (1)
  {
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void *)(a1[3] + 56);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, void *, _OWORD *))(*(void *)v8 + 48))(v8, v6, v7 + 4, v11);
  }
  LOBYTE(v54) = 1;
  uint64_t v9 = *(void *)(a1[3] + 8);
  if (v9) {
    rf::Session::consumeInputFromProvider(v9, (uint64_t)v11);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v11);
  return rf::data_flow::details::Context::markOutputReady(a2, a1 + 2);
}

void sub_235A85538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,rf::data_flow::provider::InputFrame,void>(rf::data_flow::provider::SyntheticARDataProvider::createSyntheticARState(rf::data_flow::provider::SyntheticARDataProvider&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::data_flow::provider::InputFrame> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x237DEE2B0);
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x263F8C1E8], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  __n128 result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x263F8C378] + 16);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::shared_ptr<rf::data_flow::DataGraph>::shared_ptr[abi:ne180100]<rf::data_flow::DataGraph,void>(void *a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint8x8_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      rf::data_flow::provider::SyntheticARData::~SyntheticARData((rf::data_flow::provider::SyntheticARData *)(v2 + 32));
    }
    operator delete((void *)v2);
  }
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  rf::data_flow::details::Context::Context((uint64_t)v8, (void *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::data_flow::provider::InputFrame>((uint64_t)v8, (void *)a2, (_OWORD *)(a2 + 16));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  *(void *)(a3 + 56) = v5;
  *(void *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_235A85980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::data_flow::provider::InputFrame>(uint64_t a1, void *a2, _OWORD *a3))(void, void, void, void, void)
{
  v12[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  uint64_t v6 = (void (*)(uint64_t))operator new(0x40uLL);
  long long v7 = a3[1];
  *(_OWORD *)uint64_t v6 = *a3;
  *((_OWORD *)v6 + 1) = v7;
  long long v8 = a3[3];
  *((_OWORD *)v6 + 2) = a3[2];
  *((_OWORD *)v6 + 3) = v8;
  v12[0] = (void (*)(uint64_t))std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100];
  v12[1] = v6;
  uint64_t v11 = a2;
  long long v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v11);
  std::any::operator=[abi:ne180100](v9 + 3, v12);
  return std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v12);
}

void sub_235A85A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

unint64_t *std::any::operator=[abi:ne180100](unint64_t *a1, void (**a2)(uint64_t))
{
  v9[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  std::any::any[abi:ne180100](v8, a2);
  if (v8 != (uint64_t (**)(void, void, void, void, void))a1)
  {
    unint64_t v3 = *a1;
    if (v8[0]) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if ((unint64_t)v8[0] | v3)
      {
        if (v8[0])
        {
          unint64_t v3 = (unint64_t)v8[0];
          uint64_t v5 = a1;
        }
        else
        {
          uint64_t v5 = (unint64_t *)v8;
        }
        if (v8[0]) {
          uint64_t v6 = (unint64_t *)v8;
        }
        else {
          uint64_t v6 = a1;
        }
        ((void (*)(uint64_t, unint64_t *, unint64_t *, void, void))v3)(2, v6, v5, 0, 0);
      }
    }
    else
    {
      v9[0] = 0;
      v9[1] = 0;
      ((void (*)(uint64_t, unint64_t *, uint64_t (**)(void, void, void, void, void), void, void))v3)(2, a1, v9, 0, 0);
      ((uint64_t (**)(uint64_t, void, unint64_t *, void, void))v8)[0](2, v8, a1, 0, 0);
      v9[0](2, v9, v8, 0, 0);
      std::any::reset[abi:ne180100](v9);
    }
  }
  std::any::reset[abi:ne180100](v8);
  return a1;
}

void sub_235A85B7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  char v14 = operator new(0x38uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *char v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *long long v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_235A85DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::any>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (***)(void, void, void, void, void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::any::reset[abi:ne180100](v2 + 3);
    }
    operator delete(v2);
  }
}

void *std::any::any[abi:ne180100](void *a1, void (**a2)(uint64_t))
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2) {
    (*a2)(2);
  }
  return a1;
}

void *std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint8x8_t v9 = *(long long **)(a2 + 8);
      uint64_t v10 = operator new(0x40uLL);
      __n128 result = 0;
      long long v11 = v9[3];
      long long v13 = *v9;
      long long v12 = v9[1];
      v10[2] = v9[2];
      v10[3] = v11;
      *uint64_t v10 = v13;
      v10[1] = v12;
      *a3 = std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100];
      a3[1] = v10;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v14 = *(void *)(a2 + 8);
      *a3 = std::__any_imp::_LargeHandler<rf::data_flow::provider::InputFrame>::__handle[abi:ne180100];
      a3[1] = v14;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v15 = a5 == &std::__any_imp::__unique_typeinfo<rf::data_flow::provider::InputFrame>::__id;
      if (v15) {
        __n128 result = *(void **)(a2 + 8);
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      operator delete(*(void **)(a2 + 8));
      __n128 result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__erase_unique<unsigned long>(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,rf::data_flow::provider::SyntheticARData>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

__n128 rf::detail::insertObjectsInto@<Q0>(__n128 *a1@<X0>, __n128 **a2@<X1>, char **a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = a1;
    do
    {
      __n128 v7 = v4[1];
      __n128 v36 = *v4;
      __n128 v37 = v7;
      unint64_t v8 = rf::realityFusionLogObject((rf *)a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v36, __p);
        uint8x8_t v9 = __p;
        if (v33 < 0) {
          uint8x8_t v9 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        long long v35 = v9;
        _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Adding object %s", buf, 0xCu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }

      long long v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v14 = *a3;
        uint64_t v15 = (v11 - *a3) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v10 - (void)v14;
        if (v17 >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v18);
          uint64_t v14 = *a3;
          long long v11 = a3[1];
        }
        else
        {
          unint64_t v19 = 0;
        }
        __n128 v20 = v37;
        long long v21 = &v19[32 * v15];
        *(__n128 *)long long v21 = v36;
        *((__n128 *)v21 + 1) = v20;
        if (v11 == v14)
        {
          long long v24 = &v19[32 * v15];
        }
        else
        {
          unint64_t v22 = &v19[32 * v15];
          do
          {
            long long v23 = *((_OWORD *)v11 - 1);
            long long v24 = v22 - 32;
            *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v11 -= 32;
            v22 -= 32;
          }
          while (v11 != v14);
        }
        long long v13 = v21 + 32;
        *a3 = v24;
        a3[1] = v21 + 32;
        a3[2] = &v19[32 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        __n128 v12 = v37;
        *(__n128 *)long long v11 = v36;
        *((__n128 *)v11 + 1) = v12;
        long long v13 = v11 + 32;
      }
      a3[1] = v13;
      uint64_t v25 = v6->n128_u64[0] + 328;
      __p[0] = &v36;
      a1 = (__n128 *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v25, (uint64_t)&v36, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      __n128 v26 = *v4;
      __n128 v27 = v4[1];
      __n128 v28 = v4[3];
      a1[5] = v4[2];
      a1[6] = v28;
      a1[3] = v26;
      a1[4] = v27;
      __n128 result = v4[4];
      __n128 v30 = v4[5];
      __n128 v31 = v4[6];
      a1[10].n128_u64[0] = v4[7].n128_u64[0];
      a1[8] = v30;
      a1[9] = v31;
      a1[7] = result;
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_235A862D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *rf::detail::updateObjectsAt@<X0>(void *result@<X0>, long long **a2@<X1>, char **a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = result;
    do
    {
      long long v7 = v4[1];
      long long v31 = *v4;
      long long v32 = v7;
      __n128 result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*v6 + 328), (uint64_t)&v31);
      if (result)
      {
        uint8x8_t v9 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          __n128 v12 = *a3;
          uint64_t v13 = (v9 - *a3) >> 5;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v8 - (void)v12;
          if (v15 >> 4 > v14) {
            unint64_t v14 = v15 >> 4;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v16);
            __n128 v12 = *a3;
            uint8x8_t v9 = a3[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          long long v18 = v32;
          unint64_t v19 = &v17[32 * v13];
          *(_OWORD *)unint64_t v19 = v31;
          *((_OWORD *)v19 + 1) = v18;
          if (v9 == v12)
          {
            unint64_t v22 = &v17[32 * v13];
          }
          else
          {
            __n128 v20 = &v17[32 * v13];
            do
            {
              long long v21 = *((_OWORD *)v9 - 1);
              unint64_t v22 = v20 - 32;
              *((_OWORD *)v20 - 2) = *((_OWORD *)v9 - 2);
              *((_OWORD *)v20 - 1) = v21;
              v9 -= 32;
              v20 -= 32;
            }
            while (v9 != v12);
          }
          long long v11 = v19 + 32;
          *a3 = v22;
          a3[1] = v19 + 32;
          a3[2] = &v17[32 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          long long v10 = v32;
          *(_OWORD *)uint8x8_t v9 = v31;
          *((_OWORD *)v9 + 1) = v10;
          long long v11 = v9 + 32;
        }
        a3[1] = v11;
        uint64_t v23 = *v6 + 328;
        __n128 v30 = &v31;
        __n128 result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v23, (uint64_t)&v31, (uint64_t)&std::piecewise_construct, &v30);
        long long v24 = *v4;
        long long v25 = v4[1];
        long long v26 = v4[3];
        *((_OWORD *)result + 5) = v4[2];
        *((_OWORD *)result + 6) = v26;
        *((_OWORD *)result + 3) = v24;
        *((_OWORD *)result + 4) = v25;
        long long v27 = v4[4];
        long long v28 = v4[5];
        long long v29 = v4[6];
        result[20] = *((void *)v4 + 14);
        *((_OWORD *)result + 8) = v28;
        *((_OWORD *)result + 9) = v29;
        *((_OWORD *)result + 7) = v27;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_235A864E8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void rf::detail::removeObjectsFrom(rf *a1@<X0>, rf::data_flow::RFUUID **a2@<X1>, char **a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = a1;
    do
    {
      long long v7 = rf::realityFusionLogObject(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string(v4, __p);
        unint64_t v8 = __p;
        if (v36 < 0) {
          unint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        uint64_t v38 = v8;
        _os_log_impl(&dword_235A7C000, v7, OS_LOG_TYPE_DEFAULT, "ARState: Removing object %s", buf, 0xCu);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }

      long long v10 = a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = (v10 - *a3) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v9 - (void)v13;
        if (v16 >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v17);
          uint64_t v13 = *a3;
          long long v10 = a3[1];
        }
        else
        {
          long long v18 = 0;
        }
        long long v19 = *((_OWORD *)v4 + 1);
        __n128 v20 = &v18[32 * v14];
        *(_OWORD *)__n128 v20 = *(_OWORD *)v4;
        *((_OWORD *)v20 + 1) = v19;
        if (v10 == v13)
        {
          uint64_t v23 = &v18[32 * v14];
        }
        else
        {
          long long v21 = &v18[32 * v14];
          do
          {
            long long v22 = *((_OWORD *)v10 - 1);
            uint64_t v23 = v21 - 32;
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v10 -= 32;
            v21 -= 32;
          }
          while (v10 != v13);
        }
        __n128 v12 = v20 + 32;
        *a3 = v23;
        a3[1] = v20 + 32;
        a3[2] = &v18[32 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        long long v11 = *((_OWORD *)v4 + 1);
        *(_OWORD *)long long v10 = *(_OWORD *)v4;
        *((_OWORD *)v10 + 1) = v11;
        __n128 v12 = v10 + 32;
      }
      a3[1] = v12;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*(void *)v6 + 1360), (uint64_t)v4);
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*(void *)v6 + 1400), (uint64_t)v4);
      long long v24 = *(int8x8_t **)v6;
      long long v25 = (void *)(*(void *)v6 + 328);
      a1 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v25, (uint64_t)v4);
      if (!a1) {
        goto LABEL_55;
      }
      int8x8_t v26 = v24[42];
      unint64_t v27 = *((void *)a1 + 1);
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&v26) {
          v27 %= *(void *)&v26;
        }
      }
      else
      {
        v27 &= *(void *)&v26 - 1;
      }
      int8x8_t v29 = *(int8x8_t *)a1;
      __n128 v30 = *(rf **)(*v25 + 8 * v27);
      do
      {
        long long v31 = (int8x8_t *)v30;
        __n128 v30 = *(rf **)v30;
      }
      while (v30 != a1);
      if (v31 == &v24[43]) {
        goto LABEL_44;
      }
      unint64_t v32 = (unint64_t)v31[1];
      if (v28.u32[0] > 1uLL)
      {
        if (v32 >= *(void *)&v26) {
          v32 %= *(void *)&v26;
        }
      }
      else
      {
        v32 &= *(void *)&v26 - 1;
      }
      if (v32 != v27)
      {
LABEL_44:
        if (v29)
        {
          unint64_t v33 = *(void *)(*(void *)&v29 + 8);
          if (v28.u32[0] > 1uLL)
          {
            unint64_t v34 = *(void *)(*(void *)&v29 + 8);
            if (v33 >= *(void *)&v26) {
              unint64_t v34 = v33 % *(void *)&v26;
            }
          }
          else
          {
            unint64_t v34 = v33 & (*(void *)&v26 - 1);
          }
          if (v34 == v27) {
            goto LABEL_48;
          }
        }
        *(void *)(*v25 + 8 * v27) = 0;
        int8x8_t v29 = *(int8x8_t *)a1;
      }
      if (v29)
      {
        unint64_t v33 = *(void *)(*(void *)&v29 + 8);
LABEL_48:
        if (v28.u32[0] > 1uLL)
        {
          if (v33 >= *(void *)&v26) {
            v33 %= *(void *)&v26;
          }
        }
        else
        {
          v33 &= *(void *)&v26 - 1;
        }
        if (v33 != v27)
        {
          *(void *)(*v25 + 8 * v33) = v31;
          int8x8_t v29 = *(int8x8_t *)a1;
        }
      }
      *long long v31 = v29;
      *(void *)a1 = 0;
      --*(void *)&v24[44];
      operator delete(a1);
LABEL_55:
      unint64_t v4 = (rf::data_flow::RFUUID *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
}

void sub_235A86870(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v23 = *(void **)a2;
    }
    else {
      uint64_t v23 = (void *)a2;
    }
    unint64_t v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_21;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v4 = v7;
    if (v7 >= v8) {
      unint64_t v4 = v7 % v8;
    }
  }
  else
  {
    unint64_t v4 = (v8 - 1) & v7;
  }
  long long v11 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v11) {
    goto LABEL_21;
  }
  __n128 v12 = (void *)*v11;
  if (!*v11) {
    goto LABEL_21;
  }
  long long v24 = a4;
  do
  {
    unint64_t v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
        return v12;
      }
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8) {
        v13 %= v8;
      }
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4) {
      break;
    }
LABEL_19:
    __n128 v12 = (void *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)&v25);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  __n128 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v25 = *v20;
    *__n128 v20 = v25;
  }
  else
  {
    *long long v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      unint64_t v21 = *(void *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v25;
    }
  }
  __n128 v12 = v25;
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_235A86B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  long long v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  double result = 0.0;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_235A86BE0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(a2 + 89);
  long long v4 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v5;
  id v9 = *(id *)(a2 + 112);
  int v10 = 0;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v7);
}

{
  long long v4;
  float32x4_t v5;
  float32x4_t v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t result;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27[4];
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  long long v36;
  _OWORD v37[2];
  id v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  int v47;
  uint64_t v48;

  char v48 = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)(a2 + 80);
  char v36 = *(_OWORD *)(a2 + 64);
  v37[0] = v4;
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(a2 + 89);
  long long v5 = *(float32x4_t *)(a2 + 16);
  unint64_t v32 = *(float32x4_t *)a2;
  unint64_t v33 = v5;
  uint64_t v6 = *(float32x4_t *)(a2 + 48);
  unint64_t v34 = *(float32x4_t *)(a2 + 32);
  long long v35 = v6;
  uint64_t v38 = *(id *)(a2 + 112);
  uint64_t v7 = *(_OWORD *)(a2 + 208);
  long long v43 = *(_OWORD *)(a2 + 192);
  char v44 = v7;
  unint64_t v8 = *(_OWORD *)(a2 + 240);
  char v45 = *(_OWORD *)(a2 + 224);
  char v46 = v8;
  id v9 = *(_OWORD *)(a2 + 144);
  uint64_t v39 = *(_OWORD *)(a2 + 128);
  long long v40 = v9;
  int v10 = *(_OWORD *)(a2 + 176);
  long long v41 = *(_OWORD *)(a2 + 160);
  long long v42 = v10;
  char v47 = 4;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  double result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v32);
  if ((*(unsigned char *)(a1 + 84) & 0x40) != 0)
  {
    __n128 v12 = 0;
    unint64_t v13 = *(float32x4_t *)(a1 + 16);
    float v14 = *(float32x4_t *)(a1 + 32);
    float v15 = *(float32x4_t *)(a1 + 48);
    BOOL v16 = *(float32x4_t *)(a1 + 64);
    unint64_t v17 = *(_OWORD *)(a2 + 144);
    unint64_t v18 = *(_OWORD *)(a2 + 160);
    size_t v19 = *(_OWORD *)(a2 + 176);
    uint8x8_t v28 = *(_OWORD *)(a2 + 128);
    int8x8_t v29 = v17;
    __n128 v30 = v18;
    long long v31 = v19;
    do
    {
      *(float32x4_t *)((char *)&v32 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(long long *)((char *)&v28 + v12))), v14, *(float32x2_t *)((char *)&v28 + v12), 1), v15, *(float32x4_t *)((char *)&v28 + v12), 2), v16, *(float32x4_t *)((char *)&v28 + v12), 3);
      v12 += 16;
    }
    while (v12 != 64);
    __n128 v20 = 0;
    v27[0] = v32;
    v27[1] = v33;
    v27[2] = v34;
    v27[3] = v35;
    unint64_t v21 = *(_OWORD *)(a2 + 208);
    long long v22 = *(_OWORD *)(a2 + 224);
    uint64_t v23 = *(_OWORD *)(a2 + 240);
    uint8x8_t v28 = *(_OWORD *)(a2 + 192);
    int8x8_t v29 = v21;
    __n128 v30 = v22;
    long long v31 = v23;
    do
    {
      *(float32x4_t *)((char *)&v32 + v20) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(long long *)((char *)&v28 + v20))), v14, *(float32x2_t *)((char *)&v28 + v20), 1), v15, *(float32x4_t *)((char *)&v28 + v20), 2), v16, *(float32x4_t *)((char *)&v28 + v20), 3);
      v20 += 16;
    }
    while (v20 != 64);
    int8x8_t v26 = a1 + 88;
    long long v24 = *(void *)(a1 + 88);
    long long v25 = *(void *)(v26 + 8);
    uint8x8_t v28 = xmmword_235AF7AE0;
    rf::helpers::drawSphere(v25, v24, v27);
    return rf::helpers::drawSphere(v25, v24, &v32);
  }
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  _OWORD v8[5];
  _OWORD v9[2];
  id v10;
  int v11;
  int v12;
  uint64_t v13;

  unint64_t v13 = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)(a2 + 80);
  v8[4] = *(_OWORD *)(a2 + 64);
  v9[0] = v4;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(a2 + 89);
  long long v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v6 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v6;
  int v10 = *(id *)(a2 + 112);
  uint64_t v11 = *(_DWORD *)(a2 + 128);
  __n128 v12 = 5;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
}

void sub_235A86C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(uint64_t result)
{
  uint64_t v1 = (float32x4_t *)result;
  __int32 v2 = *(_DWORD *)(result + 84);
  if (v2)
  {
    double result = rf::helpers::drawAxis();
    __int32 v2 = v1[5].i32[1];
  }
  if ((v2 & 6) != 0)
  {
    uint64_t v4 = v1[5].i64[1];
    uint64_t v3 = v1[6].i64[0];
    return rf::helpers::drawAnchorCube(v3, v4, v1 + 1);
  }
  return result;
}

void rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor const&>((uint64_t)&v75, (long long *)a2);
  int v79 = 1;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v75);
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v4 = 0;
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v5 = *(void *)(a1 + 96);
    float32x4_t v7 = *(float32x4_t *)(a1 + 16);
    float32x4_t v8 = *(float32x4_t *)(a1 + 32);
    float32x4_t v9 = *(float32x4_t *)(a1 + 48);
    float32x4_t v10 = *(float32x4_t *)(a1 + 64);
    long long v11 = *(_OWORD *)(a2 + 144);
    long long v12 = *(_OWORD *)(a2 + 160);
    long long v13 = *(_OWORD *)(a2 + 176);
    long long v71 = *(_OWORD *)(a2 + 128);
    long long v72 = v11;
    long long v73 = v12;
    long long v74 = v13;
    do
    {
      *(float32x4_t *)((char *)&v75 + v4) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(long long *)((char *)&v71 + v4))), v8, *(float32x2_t *)((char *)&v71 + v4), 1), v9, *(float32x4_t *)((char *)&v71 + v4), 2), v10, *(float32x4_t *)((char *)&v71 + v4), 3);
      v4 += 16;
    }
    while (v4 != 64);
    rf::helpers::drawPlaneRect(v5, v6, &v75, (float *)(a2 + 192));
  }
  else if ((*(unsigned char *)(a1 + 84) & 8) != 0)
  {
    uint64_t v14 = 0;
    uint64_t v16 = *(void *)(a1 + 88);
    uint64_t v15 = *(void *)(a1 + 96);
    float32x4_t v17 = *(float32x4_t *)(a1 + 16);
    float32x4_t v18 = *(float32x4_t *)(a1 + 32);
    float32x4_t v19 = *(float32x4_t *)(a1 + 48);
    float32x4_t v20 = *(float32x4_t *)(a1 + 64);
    long long v21 = *(_OWORD *)(a2 + 144);
    long long v22 = *(_OWORD *)(a2 + 160);
    long long v23 = *(_OWORD *)(a2 + 176);
    long long v71 = *(_OWORD *)(a2 + 128);
    long long v72 = v21;
    long long v73 = v22;
    long long v74 = v23;
    do
    {
      *(float32x4_t *)((char *)&v75 + v14) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(long long *)((char *)&v71 + v14))), v18, *(float32x2_t *)((char *)&v71 + v14), 1), v19, *(float32x4_t *)((char *)&v71 + v14), 2), v20, *(float32x4_t *)((char *)&v71 + v14), 3);
      v14 += 16;
    }
    while (v14 != 64);
    __asm { FMOV            V0.4S, #1.0 }
    rf::helpers::drawPlaneRect(v15, v16, &v75, (float *)(a2 + 192));
  }
  if ((*(unsigned char *)(a1 + 85) & 2) != 0)
  {
    rf::helpers::getDebugDescriptionForClassification((int *)(a2 + 212), &__p);
    uint64_t v29 = 0;
    float32x4_t v30 = *(float32x4_t *)(a2 + 48);
    float32x4_t v31 = vmulq_f32(*(float32x4_t *)(a2 + 32), (float32x4_t)0);
    float32x4_t v32 = *(float32x4_t *)(a2 + 64);
    float32x4_t v46 = *(float32x4_t *)(a2 + 80);
    float32x4_t v33 = vmlaq_f32(vmlaq_f32(*(float32x4_t *)(a2 + 32), (float32x4_t)0, v30), (float32x4_t)0, v32);
    int32x4_t v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v43 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    float32x4_t v37 = vmlaq_f32(vaddq_f32(v31, v30), (float32x4_t)0, v32);
    int32x4_t v38 = (int32x4_t)vmulq_f32(v37, v37);
    v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
    float32x2_t v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
    float32x2_t v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
    float32x4_t v44 = vmulq_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
    float32x4_t v41 = vaddq_f32(vmlaq_f32(v31, (float32x4_t)0, v30), v32);
    int32x4_t v42 = (int32x4_t)vmulq_f32(v41, v41);
    v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
    *(float32x2_t *)v31.f32 = vrsqrte_f32((float32x2_t)v42.u32[0]);
    *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32)));
    float32x4_t v45 = vmulq_n_f32(v41, vmul_f32(*(float32x2_t *)v31.f32, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32))).f32[0]);
    v43.i32[3] = 0;
    v44.i32[3] = 0;
    v45.i32[3] = 0;
    v46.i32[3] = 1.0;
    long long v71 = xmmword_235AF75E0;
    long long v72 = xmmword_235AF75F0;
    long long v73 = xmmword_235AF7600;
    long long v74 = xmmword_235AF7A90;
    do
    {
      *(float32x4_t *)((char *)&v75 + v29) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(long long *)((char *)&v71 + v29))), v44, *(float32x2_t *)((char *)&v71 + v29), 1), v45, *(float32x4_t *)((char *)&v71 + v29), 2), v46, *(float32x4_t *)((char *)&v71 + v29), 3);
      v29 += 16;
    }
    while (v29 != 64);
    uint64_t v47 = 0;
    float32x4_t v48 = v75;
    float32x4_t v49 = v76;
    float32x4_t v50 = v77;
    float32x4_t v51 = v78;
    float32x2_t v52 = vrsqrte_f32((float32x2_t)1065353216);
    *(float32x2_t *)&long long v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v52, v52)));
    float32x4_t v54 = vmulq_n_f32((float32x4_t)xmmword_235AF75E0, vmul_f32(*(float32x2_t *)&v53, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)&v53, *(float32x2_t *)&v53))).f32[0]);
    float v55 = vmulq_f32(v54, v54).f32[0];
    float v56 = vmuls_lane_f32(v54.f32[1], *(float32x2_t *)v54.f32, 1);
    float v57 = vmuls_lane_f32(v54.f32[2], v54, 2);
    float v58 = vmuls_lane_f32(v54.f32[0], *(float32x2_t *)v54.f32, 1);
    float v59 = vmuls_lane_f32(v54.f32[0], v54, 2);
    float v60 = vmuls_lane_f32(v54.f32[1], v54, 2);
    float v61 = v59 - v54.f32[1];
    *(float *)&long long v53 = v54.f32[1] + v59;
    *(float *)&long long v62 = v55 + (float)((float)(1.0 - v55) * -0.000000043711);
    *((float *)&v62 + 1) = v58 - v54.f32[2];
    *((void *)&v62 + 1) = v53;
    HIDWORD(v53) = 0;
    *(float *)&long long v53 = v54.f32[2] + v58;
    *((float *)&v53 + 1) = v56 + (float)((float)(1.0 - v56) * -0.000000043711);
    *((float *)&v53 + 2) = v60 - v54.f32[0];
    *(float *)&long long v63 = v61;
    *((float *)&v63 + 1) = v54.f32[0] + v60;
    *((void *)&v63 + 1) = COERCE_UNSIGNED_INT(v57 + (float)((float)(1.0 - v57) * -0.000000043711));
    long long v71 = v62;
    long long v72 = v53;
    long long v73 = v63;
    long long v74 = xmmword_235AF7AA0;
    do
    {
      *(float32x4_t *)((char *)&v75 + v47) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, COERCE_FLOAT(*(long long *)((char *)&v71 + v47))), v49, *(float32x2_t *)((char *)&v71 + v47), 1), v50, *(float32x4_t *)((char *)&v71 + v47), 2), v51, *(float32x4_t *)((char *)&v71 + v47), 3);
      v47 += 16;
    }
    while (v47 != 64);
    uint64_t v64 = 0;
    float32x4_t v65 = v75;
    float32x4_t v66 = v76;
    float32x4_t v67 = v77;
    float32x4_t v68 = v78;
    long long v71 = xmmword_235AF7AB0;
    long long v72 = xmmword_235AF7AC0;
    long long v73 = xmmword_235AF7AD0;
    long long v74 = xmmword_235AF7AA0;
    do
    {
      *(float32x4_t *)((char *)&v75 + v64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, COERCE_FLOAT(*(long long *)((char *)&v71 + v64))), v66, *(float32x2_t *)((char *)&v71 + v64), 1), v67, *(float32x4_t *)((char *)&v71 + v64), 2), v68, *(float32x4_t *)((char *)&v71 + v64), 3);
      v64 += 16;
    }
    while (v64 != 64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v69 = __p;
    }
    REDebugRendererDrawTextAtWorldTransform();
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_235A871BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(float32x4_t *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor const&>((uint64_t)v10, (long long *)a2);
  v10[64] = 2;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties((uint64_t)a1);
  uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v10);
  if ((a1[5].i8[4] & 0x10) != 0)
  {
    __asm { FMOV            V0.4S, #1.0 }
    return rf::helpers::drawPlaneRect(a1[6].i64[0], a1[5].i64[1], a1 + 1, (float *)(a2 + 192));
  }
  return result;
}

void sub_235A872A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(uint64_t a1, long long *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor const&>((uint64_t)&v12, a2);
  int v13 = 3;
  rf::data_flow::consumer::AnchorPropertyVisualizer::drawCommonProperties(a1);
  uint64_t result = std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v12);
  if ((*(unsigned char *)(a1 + 84) & 0x20) != 0)
  {
    uint64_t v5 = 0;
    long long v6 = a2[13];
    HIDWORD(v6) = 1.0;
    float32x4_t v7 = *(float32x4_t *)(a1 + 16);
    float32x4_t v8 = *(float32x4_t *)(a1 + 32);
    float32x4_t v9 = *(float32x4_t *)(a1 + 48);
    float32x4_t v10 = *(float32x4_t *)(a1 + 64);
    v11[0] = xmmword_235AF75E0;
    v11[1] = xmmword_235AF75F0;
    v11[2] = xmmword_235AF7600;
    v11[3] = v6;
    do
    {
      *(float32x4_t *)((char *)&v12 + v5 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v11[v5])), v8, *(float32x2_t *)&v11[v5], 1), v9, (float32x4_t)v11[v5], 2), v10, (float32x4_t)v11[v5], 3);
      ++v5;
    }
    while (v5 != 4);
    return rf::helpers::drawBox(*(void *)(a1 + 96), *(void *)(a1 + 88), &v12);
  }
  return result;
}

void sub_235A873CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235A875AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_235A87674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      __int32 v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            float32x4_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            float32x4_t v9 = (uint64_t **)v2[1];
            float32x4_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            char *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            __int32 v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        __int32 v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t rf::data_flow::consumer::EnvironmentProbeConsumer::EnvironmentProbeConsumer(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26E8F3BF0;
  *(void *)(a1 + 8) = 0;
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100](a1 + 72, (uint64_t)a2 + 56);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100](a1 + 104, (uint64_t)a2 + 88);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 152) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 160) = 1092616192;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_DWORD *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 1065353216;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 632) = 1065353216;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(int32x4_t *)(a1 + 736) = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v7 = 0x7F0000007FLL;
  *((void *)&v7 + 1) = 0x7F0000007FLL;
  *(_OWORD *)(a1 + 752) = v7;
  *(unsigned char *)(a1 + 137) = *((unsigned char *)a2 + 3);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 9);
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 32);
  std::string::basic_string[abi:ne180100]<0>(v14, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v16, (const UInt8 *)v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeUserDefaultsUpdatePeriod");
  unint64_t v8 = rf::UserDefaults::intValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v9) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0;
  }
  *(void *)(a1 + 168) = v10;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v16);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults((rf::data_flow::consumer::EnvironmentProbeConsumer *)a1);
  return a1;
}

void sub_235A87A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(v25 + 60));
  std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(v25 + 52));
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table(v26);
  if (*(unsigned char *)(v23 + 544) && *(unsigned char *)(v23 + 520)) {

  }
  if (*(unsigned char *)(v23 + 384))
  {
    if (*(unsigned char *)(v23 + 360)) {
  }
    }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table((uint64_t)(v25 + 1));
  RESharedPtr<REEntity>::~RESharedPtr(v25);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_235A87B04()
{
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults(rf::data_flow::consumer::EnvironmentProbeConsumer *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceGlobalProbe");
  unsigned __int16 v2 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v2 > 0xFFu) {
    int v3 = v2;
  }
  else {
    int v3 = *((unsigned __int8 *)this + 16);
  }
  *((unsigned char *)this + 136) = v3 != 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceProbeExposureAdjustment");
  unsigned __int16 v4 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v4 > 0xFFu) {
    int v5 = v4;
  }
  else {
    int v5 = *((unsigned __int8 *)this + 19);
  }
  *((unsigned char *)this + 137) = v5 != 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.ForceOneLocal");
  unsigned int v6 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v6 <= 0x100) {
    LOBYTE(v6) = 0;
  }
  if ((_BYTE)v6) {
    int v7 = 1;
  }
  else {
    int v7 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 35) = v7;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.CameraBasedProbePlacement");
  unsigned __int16 v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v8 > 0xFFu) {
    int v9 = v8;
  }
  else {
    int v9 = *((unsigned __int8 *)this + 48);
  }
  *((unsigned char *)this + 144) = v9 != 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.CameraBasedProbePlacementRadius");
  uint64_t v10 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v10 & 0xFF00000000) == 0) {
    LODWORD(v10) = *((_DWORD *)this + 13);
  }
  *((_DWORD *)this + 37) = v10;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeIntensityExpSmoothFactor");
  uint64_t v11 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v11 & 0xFF00000000) == 0) {
    LODWORD(v11) = *((_DWORD *)this + 14);
  }
  *((_DWORD *)this + 38) = v11;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeClampFloor");
  uint64_t v12 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v12 & 0xFF00000000) == 0) {
    LODWORD(v12) = *((_DWORD *)this + 15);
  }
  *((_DWORD *)this + 39) = v12;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.EnvProbeClampCeil");
  uint64_t v13 = rf::UserDefaults::floatValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if ((v13 & 0xFF00000000) == 0) {
    LODWORD(v13) = *((_DWORD *)this + 16);
  }
  *((_DWORD *)this + 40) = v13;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v16);
}

void sub_235A87D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  rf::UserDefaults::~UserDefaults(&a15);
  _Unwind_Resume(a1);
}

void sub_235A87E00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235A87DF8);
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v383 = *MEMORY[0x263EF8340];
  if (*(float *)a2 <= 10.0 && *(float *)a2 >= 0.0 && *(unsigned char *)(a2 + 32) && *(unsigned char *)(a2 + 16))
  {
    v326 = *(std::mutex **)(a1 + 8);
    std::mutex::lock(v326);
    uint64_t v5 = *(void *)(a1 + 168);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 176);
      if (v6 >= 2) {
        uint64_t v5 = v6 - 1;
      }
      *(void *)(a1 + 176) = v5;
      if (v6 <= 1) {
        rf::data_flow::consumer::EnvironmentProbeConsumer::readUserDefaults((rf::data_flow::consumer::EnvironmentProbeConsumer *)a1);
      }
    }
    if (!*(unsigned char *)(a2 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    MEMORY[0x237DEDE50](*(void *)(a2 + 8));
    if (!*(unsigned char *)(a2 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v7 = MEMORY[0x237DEDE90](*(void *)(a2 + 8));
    if (v7)
    {
      if (*(unsigned __int8 *)(a1 + 18) != RERenderManagerGetEnableProbeLightingLegacyBlur()) {
        RERenderManagerSetEnableProbeLightingLegacyBlur();
      }
      RERenderManagerSetEnableProbeExposureAdjustment();
      BOOL v8 = *(unsigned char *)(a1 + 137) != 0;
    }
    else
    {
      BOOL v8 = 0;
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (v7)
    {
      uint64_t ProbeManager = RERenderManagerGetProbeManager();
      char v10 = !v8;
      if (!ProbeManager) {
        char v10 = 1;
      }
      if ((v10 & 1) == 0)
      {
        RERenderManagerSetProbeIntensityScale();
        RERenderManagerSetProbeIntensityExpSmoothFactor();
        RERenderManagerSetProbeClampFloor();
        RERenderManagerSetProbeClampCeil();
      }
    }
    uint64_t v343 = a2;
    uint64_t v11 = *(uint64_t **)&v326[39].__m_.__opaque[32];
    if (v11)
    {
      uint64_t v12 = 0;
LABEL_30:
      v316 = (id *)(a1 + 400);
      v317 = (rf::data_flow::RFUUID *)(a1 + 240);
      location = (id *)(a1 + 352);
      v312 = (uint64_t *)(a1 + 184);
      v318 = (void *)(a1 + 664);
      v330 = (void *)(a1 + 560);
      v334 = (void *)(a1 + 600);
      v328 = (unint64_t *)(a1 + 616);
      v338 = (void *)(a1 + 192);
      v332 = (void *)(a1 + 208);
      while (1)
      {
        uint64_t v13 = v11[6];
        if (*(unsigned char *)(v13 + 120)) {
          BOOL v14 = *(unsigned char *)(v343 + 16) == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14) {
          goto LABEL_36;
        }
        uint64_t v15 = MEMORY[0x237DEDE50](*(void *)(v343 + 8));
        if (!*(unsigned char *)(v343 + 16)) {
          goto LABEL_631;
        }
        uint64_t v16 = v15;
        uint64_t v17 = MEMORY[0x237DEDE60](*(void *)(v343 + 8));
        if (!v16 || !v17) {
          goto LABEL_36;
        }
        REColorManagerSetAverageAREnvLightIntensity();
        float32x4_t v18 = v11 + 2;
        if (*(unsigned char *)(a1 + 544))
        {
          float32x4_t v19 = *((unsigned char *)v11 + 32) ? (const unsigned __int8 *)v11[2] : (const unsigned __int8 *)(v11 + 2);
          float32x4_t v20 = *(unsigned char *)(a1 + 416) ? *(const unsigned __int8 **)(a1 + 400) : (const unsigned __int8 *)(a1 + 400);
          unint64_t v21 = uuid_compare(v19, v20);
          unint64_t v2 = v21;
          if (*(unsigned char *)(a1 + 384))
          {
            if (*((unsigned char *)v11 + 32)) {
              long long v22 = (const unsigned __int8 *)v11[2];
            }
            else {
              long long v22 = (const unsigned __int8 *)(v11 + 2);
            }
            if (*(unsigned char *)(a1 + 256)) {
              uint64_t v23 = *(const unsigned __int8 **)(a1 + 240);
            }
            else {
              uint64_t v23 = (const unsigned __int8 *)(a1 + 240);
            }
            long long v24 = (rf *)uuid_compare(v22, v23);
            BOOL v25 = *(unsigned char *)(a1 + 137) != 0;
            if (!v2)
            {
              int v30 = *(unsigned __int8 *)(a1 + 384);
              if (*(unsigned char *)(a1 + 384))
              {
                float32x4_t v31 = rf::realityFusionLogObject(v24);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                {
                  rf::data_flow::RFUUID::string(v317, __p);
                  float32x4_t v32 = __p;
                  if (__p[23] < 0) {
                    float32x4_t v32 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&uint8_t buf[4] = v32;
                  _os_log_impl(&dword_235A7C000, v31, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Removing background anchor %s", buf, 0xCu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }

                uint64_t v33 = *(void *)(a1 + 128);
                int v30 = *(unsigned __int8 *)(a1 + 384);
                if (v33)
                {
                  if (*(unsigned char *)(a1 + 384))
                  {
                    (*(void (**)(uint64_t, rf::data_flow::RFUUID *))(*(void *)v33 + 48))(v33, v317);
                    int v30 = *(unsigned __int8 *)(a1 + 384);
                    goto LABEL_84;
                  }
LABEL_631:
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
              }
LABEL_84:
              if (v30 == *(unsigned __int8 *)(a1 + 544))
              {
                if (v30)
                {
                  long long v34 = *(_OWORD *)(a1 + 480);
                  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 464);
                  *(_OWORD *)(a1 + 320) = v34;
                  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 496);
                  long long v35 = *(_OWORD *)(a1 + 416);
                  *(_OWORD *)v317 = *(_OWORD *)v316;
                  *(_OWORD *)(a1 + 256) = v35;
                  long long v36 = *(_OWORD *)(a1 + 448);
                  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 432);
                  *(_OWORD *)(a1 + 288) = v36;
                  std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(location, *(void **)(a1 + 512), *(unsigned char *)(a1 + 520));
                  *(void *)(a1 + 368) = *(void *)(a1 + 528);
                  goto LABEL_156;
                }
              }
              else
              {
                if (v30)
                {
                  if (*(unsigned char *)(a1 + 360)) {

                  }
                  *(unsigned char *)(a1 + 384) = 0;
                }
                else
                {
                  std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>((uint64_t)v317, v316);
                  *(unsigned char *)(a1 + 384) = 1;
                }
LABEL_156:
                if (*(unsigned char *)(a1 + 544))
                {
                  if (*(unsigned char *)(a1 + 520)) {

                  }
                  *(unsigned char *)(a1 + 544) = 0;
                }
              }
              uint64_t v29 = *v312;
              if (!*v312)
              {
                float32x4_t v76 = rf::realityFusionLogObject(0);
                if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                {
                  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
                  float32x4_t v77 = __p;
                  if (__p[23] < 0) {
                    float32x4_t v77 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&uint8_t buf[4] = v77;
                  _os_log_impl(&dword_235A7C000, v76, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the background probe entity %s.", buf, 0xCu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }

                if (!*(unsigned char *)(v343 + 32)) {
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
                goto LABEL_167;
              }
LABEL_72:
LABEL_168:
              if (*(unsigned char *)(a1 + 384))
              {
                std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(location, *(void **)(v13 + 112), *(unsigned char *)(v13 + 120));
                goto LABEL_36;
              }
              goto LABEL_631;
            }
            if (!v24) {
              goto LABEL_71;
            }
          }
          else
          {
            BOOL v25 = *(unsigned char *)(a1 + 137) != 0;
            if (!v21)
            {
              int v30 = 0;
              goto LABEL_84;
            }
          }
        }
        else if (*(unsigned char *)(a1 + 384))
        {
          if (*((unsigned char *)v11 + 32)) {
            uint64_t v26 = (const unsigned __int8 *)v11[2];
          }
          else {
            uint64_t v26 = (const unsigned __int8 *)(v11 + 2);
          }
          if (*(unsigned char *)(a1 + 256)) {
            unint64_t v27 = *(const unsigned __int8 **)(a1 + 240);
          }
          else {
            unint64_t v27 = (const unsigned __int8 *)(a1 + 240);
          }
          int v28 = uuid_compare(v26, v27);
          BOOL v25 = *(unsigned char *)(a1 + 137) != 0;
          if (!v28)
          {
LABEL_71:
            uint64_t v29 = *v312;
            if (*v312) {
              goto LABEL_72;
            }
            long long v74 = rf::realityFusionLogObject(0);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
              float32x4_t v75 = __p;
              if (__p[23] < 0) {
                float32x4_t v75 = *(unsigned char **)__p;
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v75;
              _os_log_impl(&dword_235A7C000, v74, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the background probe entity %s.", buf, 0xCu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }

            if (!*(unsigned char *)(v343 + 32)) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
LABEL_167:
            RESceneAddEntity();
            RESharedPtr<REEntity>::operator=(v312, *(uint64_t *)__p);
            RESharedPtr<REEntity>::~RESharedPtr(__p);
            goto LABEL_168;
          }
        }
        else
        {
          BOOL v25 = *(unsigned char *)(a1 + 137) != 0;
        }
        float32x4_t v37 = (float32x4_t *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v318, (uint64_t)(v11 + 2));
        int32x4_t v38 = (uint64_t *)v37;
        if (!v37)
        {
          int32x4_t v42 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v338, (uint64_t)(v11 + 2));
          if (v42)
          {
          }
          else
          {
            long long v73 = rf::realityFusionLogObject(0);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
              v162 = __p;
              if (__p[23] < 0) {
                v162 = *(unsigned char **)__p;
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v162;
              _os_log_error_impl(&dword_235A7C000, v73, OS_LOG_TYPE_ERROR, "EnvironmentProbeConsumer: The probe %s was not expected", buf, 0xCu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
          }
          goto LABEL_36;
        }
        float32x4_t v39 = v37[4];
        long long v40 = (__int128)v37[6];
        long long v41 = (__int128)v37[7];
        float32x4_t v368 = v37[5];
        long long v369 = v40;
        long long v370 = v41;
        *(float32x4_t *)buf = v37[3];
        float32x4_t v367 = v39;
        float32x4_t v321 = v37[9];
        float32x4_t v324 = v37[8];
        int v319 = v37[10].u8[8];
        if (v37[10].i8[8]) {
          id v315 = (id)v37[10].i64[0];
        }
        else {
          id v315 = 0;
        }
        v313 = v38;
        uint64_t v43 = v38[22];
        long long v44 = *((_OWORD *)v11 + 2);
        *(_OWORD *)std::string __p = *v18;
        *(_OWORD *)&__p[16] = v44;
        float32x4_t v357 = v368;
        long long v358 = v369;
        long long v359 = v370;
        float32x4_t v355 = *(float32x4_t *)buf;
        float32x4_t v356 = v367;
        float32x4_t v360 = v324;
        float32x4_t v361 = v321;
        LOBYTE(v362) = 0;
        char v363 = 0;
        if (v319)
        {
          id v362 = v315;
          char v363 = 1;
        }
        uint64_t v364 = v43;
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>((uint64_t)v330, (uint64_t)__p, (uint64_t)__p);
        if (v363) {

        }
        int v314 = v25;
        v45.i64[0] = 0x3F0000003F000000;
        v45.i64[1] = 0x3F0000003F000000;
        float32x4_t v46 = vmulq_f32(v321, v45);
        long long v47 = *((_OWORD *)v11 + 2);
        *(_OWORD *)std::string __p = *v18;
        *(_OWORD *)&__p[16] = v47;
        float32x4_t v355 = vsubq_f32(v324, v46);
        float32x4_t v356 = vaddq_f32(v324, v46);
        unint64_t v48 = *((void *)&v47 + 1);
        if (!*((void *)&v47 + 1))
        {
          v163 = __p;
          if (__p[16]) {
            v163 = *(void **)__p;
          }
          unint64_t v48 = ((*v163 >> 2) + (*v163 << 6) + v163[1] + 2654435769) ^ *v163;
          *(void *)&__p[24] = v48;
        }
        unint64_t v49 = *(void *)(a1 + 608);
        uint64_t v322 = v12;
        float32x4_t v50 = (unint64_t *)(a1 + 600);
        if (v49)
        {
          uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v51.i16[0] = vaddlv_u8(v51);
          unint64_t v52 = v51.u32[0];
          if (v51.u32[0] > 1uLL)
          {
            unint64_t v2 = v48;
            if (v48 >= v49) {
              unint64_t v2 = v48 % v49;
            }
          }
          else
          {
            unint64_t v2 = (v49 - 1) & v48;
          }
          long long v53 = *(void **)(*v334 + 8 * v2);
          if (v53)
          {
            float32x4_t v54 = (void *)*v53;
            if (*v53)
            {
              while (1)
              {
                unint64_t v55 = v54[1];
                if (v55 == v48)
                {
                  unint64_t v56 = rf::data_flow::RFUUID::Equality::operator()(a1 + 632, (uint64_t)(v54 + 2), (uint64_t)__p);
                  if (v56) {
                    goto LABEL_200;
                  }
                }
                else
                {
                  if (v52 > 1)
                  {
                    if (v55 >= v49) {
                      v55 %= v49;
                    }
                  }
                  else
                  {
                    v55 &= v49 - 1;
                  }
                  if (v55 != v2)
                  {
LABEL_119:
                    float32x4_t v50 = (unint64_t *)(a1 + 600);
                    break;
                  }
                }
                float32x4_t v54 = (void *)*v54;
                if (!v54) {
                  goto LABEL_119;
                }
              }
            }
          }
        }
        unint64_t v56 = (unint64_t)operator new(0x50uLL);
        unint64_t v57 = v56;
        *(void *)unint64_t v56 = 0;
        *(void *)(v56 + 8) = v48;
        long long v58 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v56 + 16) = *(_OWORD *)__p;
        *(_OWORD *)(v56 + 32) = v58;
        float32x4_t v59 = v356;
        *(float32x4_t *)(v56 + 48) = v355;
        *(float32x4_t *)(v56 + 64) = v59;
        float v60 = (float)(unint64_t)(*(void *)(a1 + 624) + 1);
        float v61 = *(float *)(a1 + 632);
        if (!v49 || (float)(v61 * (float)v49) < v60) {
          break;
        }
LABEL_190:
        unint64_t v80 = *v50;
        long long v81 = *(unint64_t **)(*v50 + 8 * v2);
        if (v81)
        {
          *(void *)unint64_t v57 = *v81;
LABEL_198:
          *long long v81 = v57;
          goto LABEL_199;
        }
        *(void *)unint64_t v57 = *v328;
        unint64_t *v328 = v57;
        *(void *)(v80 + 8 * v2) = v328;
        if (*(void *)v57)
        {
          unint64_t v82 = *(void *)(*(void *)v57 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v82 >= v49) {
              v82 %= v49;
            }
          }
          else
          {
            v82 &= v49 - 1;
          }
          long long v81 = (unint64_t *)(*v50 + 8 * v82);
          goto LABEL_198;
        }
LABEL_199:
        ++*(void *)(a1 + 624);
LABEL_200:
        unint64_t v2 = rf::realityFusionLogObject((rf *)v56);
        unint64_t v83 = (unint64_t)(v11 + 2);
        if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v13, __p);
          long long v84 = __p;
          if (__p[23] < 0) {
            long long v84 = *(unsigned char **)__p;
          }
          *(_DWORD *)v376 = 136315138;
          *(void *)&v376[4] = v84;
          _os_log_impl(&dword_235A7C000, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Create the local probe entity %s.", v376, 0xCu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v85 = *(void *)v365;
        long long v86 = *(void **)(a1 + 648);
        unint64_t v87 = *(void *)(a1 + 656);
        if ((unint64_t)v86 >= v87)
        {
          unint64_t v2 = *(void *)(a1 + 640);
          uint64_t v89 = (uint64_t)((uint64_t)v86 - v2) >> 3;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v91 = v87 - v2;
          if (v91 >> 2 > v90) {
            unint64_t v90 = v91 >> 2;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          v355.i64[0] = a1 + 656;
          if (v92)
          {
            if (v92 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v93 = (char *)operator new(8 * v92);
          }
          else
          {
            long long v93 = 0;
          }
          long long v94 = &v93[8 * v89];
          *(void *)std::string __p = v93;
          *(void *)&__p[8] = v94;
          *(void *)&__p[16] = v94;
          *(void *)&__p[24] = &v93[8 * v92];
          *(void *)long long v94 = v85;
          if (v85)
          {
            RERetain();
            unint64_t v83 = (unint64_t)(v11 + 2);
            long long v86 = *(void **)(a1 + 648);
            unint64_t v2 = *(void *)(a1 + 640);
            long long v94 = *(char **)&__p[8];
            long long v95 = *(char **)&__p[16];
          }
          else
          {
            long long v95 = &v93[8 * v89];
            unint64_t v83 = (unint64_t)(v11 + 2);
          }
          v88 = v95 + 8;
          *(void *)&__p[16] = v95 + 8;
          if (v86 == (void *)v2)
          {
            int64x2_t v98 = vdupq_n_s64(v2);
          }
          else
          {
            uint64_t v96 = 0;
            do
            {
              uint64_t v97 = v86[v96 - 1];
              *(void *)&v94[v96 * 8 - 8] = v97;
              if (v97) {
                RERetain();
              }
              --v96;
            }
            while (&v86[v96] != (void *)v2);
            int64x2_t v98 = *(int64x2_t *)(a1 + 640);
            v88 = *(void **)&__p[16];
            v94 += v96 * 8;
            unint64_t v83 = (unint64_t)(v11 + 2);
          }
          *(void *)(a1 + 640) = v94;
          *(void *)(a1 + 648) = v88;
          *(int64x2_t *)&__p[8] = v98;
          uint64_t v99 = *(void *)(a1 + 656);
          *(void *)(a1 + 656) = *(void *)&__p[24];
          *(void *)&__p[24] = v99;
          *(void *)std::string __p = v98.i64[0];
          std::__split_buffer<RESharedPtr<REEntity>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          *long long v86 = *(void *)v365;
          if (v85) {
            RERetain();
          }
          v88 = v86 + 1;
          *(void *)(a1 + 648) = v86 + 1;
        }
        *(void *)(a1 + 648) = v88;
        long long v100 = *(_OWORD *)(v83 + 16);
        *(_OWORD *)std::string __p = *(_OWORD *)v83;
        *(_OWORD *)&__p[16] = v100;
        v355.i64[0] = *(void *)v365;
        if (*(void *)v365) {
          RERetain();
        }
        unint64_t v101 = *(void *)&__p[24];
        char v102 = (void **)(a1 + 192);
        if (!*(void *)&__p[24])
        {
          v164 = __p;
          if (__p[16]) {
            v164 = *(void **)__p;
          }
          unint64_t v101 = ((*v164 >> 2) + (*v164 << 6) + v164[1] + 2654435769) ^ *v164;
          *(void *)&__p[24] = v101;
        }
        unint64_t v103 = *(void *)(a1 + 200);
        if (v103)
        {
          uint8x8_t v104 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
          v104.i16[0] = vaddlv_u8(v104);
          unint64_t v2 = v104.u32[0];
          if (v104.u32[0] > 1uLL)
          {
            unint64_t v83 = v101;
            if (v101 >= v103) {
              unint64_t v83 = v101 % v103;
            }
          }
          else
          {
            unint64_t v83 = (v103 - 1) & v101;
          }
          char v105 = *(void **)(*v338 + 8 * v83);
          if (v105)
          {
            __int16 v106 = (void *)*v105;
            if (*v105)
            {
              while (1)
              {
                unint64_t v107 = v106[1];
                if (v107 == v101)
                {
                  if (rf::data_flow::RFUUID::Equality::operator()(a1 + 224, (uint64_t)(v106 + 2), (uint64_t)__p)) {
                    goto LABEL_306;
                  }
                }
                else
                {
                  if (v2 > 1)
                  {
                    if (v107 >= v103) {
                      v107 %= v103;
                    }
                  }
                  else
                  {
                    v107 &= v103 - 1;
                  }
                  if (v107 != v83)
                  {
LABEL_249:
                    char v102 = (void **)(a1 + 192);
                    break;
                  }
                }
                __int16 v106 = (void *)*v106;
                if (!v106) {
                  goto LABEL_249;
                }
              }
            }
          }
        }
        char v108 = operator new(0x38uLL);
        *(void *)v376 = v108;
        *(void *)&v376[8] = a1 + 208;
        *char v108 = 0;
        v108[1] = v101;
        long long v109 = *(_OWORD *)&__p[16];
        *((_OWORD *)v108 + 1) = *(_OWORD *)__p;
        *((_OWORD *)v108 + 2) = v109;
        v108[6] = v355.i64[0];
        v355.i64[0] = 0;
        LOBYTE(v377) = 1;
        float v110 = (float)(unint64_t)(*(void *)(a1 + 216) + 1);
        float v111 = *(float *)(a1 + 224);
        if (!v103 || (float)(v111 * (float)v103) < v110)
        {
          BOOL v112 = (v103 & (v103 - 1)) != 0;
          if (v103 < 3) {
            BOOL v112 = 1;
          }
          unint64_t v113 = v112 | (2 * v103);
          unint64_t v114 = vcvtps_u32_f32(v110 / v111);
          if (v113 <= v114) {
            int8x8_t prime = (int8x8_t)v114;
          }
          else {
            int8x8_t prime = (int8x8_t)v113;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          }
          unint64_t v103 = *(void *)(a1 + 200);
          if (*(void *)&prime <= v103)
          {
            if (*(void *)&prime < v103)
            {
              unint64_t v122 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 216) / *(float *)(a1 + 224));
              if (v103 < 3
                || (uint8x8_t v123 = (uint8x8_t)vcnt_s8((int8x8_t)v103), v123.i16[0] = vaddlv_u8(v123), v123.u32[0] > 1uLL))
              {
                unint64_t v122 = std::__next_prime(v122);
              }
              else
              {
                uint64_t v124 = 1 << -(char)__clz(v122 - 1);
                if (v122 >= 2) {
                  unint64_t v122 = v124;
                }
              }
              if (*(void *)&prime <= v122) {
                int8x8_t prime = (int8x8_t)v122;
              }
              if (*(void *)&prime >= v103)
              {
                unint64_t v103 = *(void *)(a1 + 200);
              }
              else
              {
                if (prime) {
                  goto LABEL_262;
                }
                v161 = *v102;
                *char v102 = 0;
                if (v161) {
                  operator delete(v161);
                }
                unint64_t v103 = 0;
                *(void *)(a1 + 200) = 0;
              }
            }
          }
          else
          {
LABEL_262:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v116 = operator new(8 * *(void *)&prime);
            v117 = *v102;
            *char v102 = v116;
            if (v117) {
              operator delete(v117);
            }
            uint64_t v118 = 0;
            *(int8x8_t *)(a1 + 200) = prime;
            do
              *((void *)*v102 + v118++) = 0;
            while (*(void *)&prime != v118);
            v119 = (void *)*v332;
            if (*v332)
            {
              unint64_t v120 = v119[1];
              uint8x8_t v121 = (uint8x8_t)vcnt_s8(prime);
              v121.i16[0] = vaddlv_u8(v121);
              if (v121.u32[0] > 1uLL)
              {
                if (v120 >= *(void *)&prime) {
                  v120 %= *(void *)&prime;
                }
              }
              else
              {
                v120 &= *(void *)&prime - 1;
              }
              *((void *)*v102 + v120) = v332;
              v125 = (void *)*v119;
              if (*v119)
              {
                do
                {
                  unint64_t v126 = v125[1];
                  if (v121.u32[0] > 1uLL)
                  {
                    if (v126 >= *(void *)&prime) {
                      v126 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v126 &= *(void *)&prime - 1;
                  }
                  if (v126 != v120)
                  {
                    if (!*((void *)*v102 + v126))
                    {
                      *((void *)*v102 + v126) = v119;
                      goto LABEL_287;
                    }
                    void *v119 = *v125;
                    void *v125 = **((void **)*v102 + v126);
                    **((void **)*v102 + v126) = v125;
                    v125 = v119;
                  }
                  unint64_t v126 = v120;
LABEL_287:
                  v119 = v125;
                  v125 = (void *)*v125;
                  unint64_t v120 = v126;
                }
                while (v125);
              }
            }
            unint64_t v103 = (unint64_t)prime;
          }
          if ((v103 & (v103 - 1)) != 0)
          {
            if (v101 >= v103) {
              unint64_t v83 = v101 % v103;
            }
            else {
              unint64_t v83 = v101;
            }
          }
          else
          {
            unint64_t v83 = (v103 - 1) & v101;
          }
        }
        v127 = (void *)*((void *)*v102 + v83);
        uint64_t v128 = *(void *)v376;
        if (v127)
        {
          **(void **)v376 = *v127;
        }
        else
        {
          **(void **)v376 = *v332;
          void *v332 = v128;
          *((void *)*v102 + v83) = v332;
          if (!*(void *)v128) {
            goto LABEL_305;
          }
          unint64_t v129 = *(void *)(*(void *)v128 + 8);
          if ((v103 & (v103 - 1)) != 0)
          {
            if (v129 >= v103) {
              v129 %= v103;
            }
          }
          else
          {
            v129 &= v103 - 1;
          }
          v127 = (char *)*v102 + 8 * v129;
        }
        void *v127 = v128;
LABEL_305:
        *(void *)v376 = 0;
        ++*(void *)(a1 + 216);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v376);
LABEL_306:
        RESharedPtr<REEntity>::~RESharedPtr(&v355);
        v130 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::erase(v318, v313);
        uint64_t v12 = v322;
        if (*(void *)(a1 + 688)) {
          goto LABEL_385;
        }
        v131 = *(rf::data_flow::RFUUID **)(a1 + 704);
        v132 = *(rf::data_flow::RFUUID **)(a1 + 712);
        while (v131 != v132)
        {
          long long v133 = *((_OWORD *)v131 + 1);
          *(_OWORD *)std::string __p = *(_OWORD *)v131;
          *(_OWORD *)&__p[16] = v133;
          unint64_t v2 = rf::realityFusionLogObject(v130);
          if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
          {
            rf::data_flow::RFUUID::string(v131, v376);
            v134 = v376;
            if (SBYTE7(v377) < 0) {
              v134 = *(uint8_t **)v376;
            }
            *(_DWORD *)v380 = 136315138;
            *(void *)&v380[4] = v134;
            _os_log_impl(&dword_235A7C000, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Removing localized anchor %s", v380, 0xCu);
            if (SBYTE7(v377) < 0) {
              operator delete(*(void **)v376);
            }
          }

          v135 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v334, (uint64_t)__p);
          if (v135)
          {
            int8x8_t v136 = *(int8x8_t *)(a1 + 608);
            unint64_t v137 = v135[1];
            uint8x8_t v138 = (uint8x8_t)vcnt_s8(v136);
            v138.i16[0] = vaddlv_u8(v138);
            if (v138.u32[0] > 1uLL)
            {
              if (v137 >= *(void *)&v136) {
                v137 %= *(void *)&v136;
              }
            }
            else
            {
              v137 &= *(void *)&v136 - 1;
            }
            unint64_t v139 = *v135;
            v140 = *(unint64_t **)(*v334 + 8 * v137);
            do
            {
              v141 = v140;
              v140 = (unint64_t *)*v140;
            }
            while (v140 != v135);
            if (v141 == v328) {
              goto LABEL_332;
            }
            unint64_t v142 = v141[1];
            if (v138.u32[0] > 1uLL)
            {
              if (v142 >= *(void *)&v136) {
                v142 %= *(void *)&v136;
              }
            }
            else
            {
              v142 &= *(void *)&v136 - 1;
            }
            if (v142 == v137)
            {
LABEL_334:
              if (v139)
              {
                unint64_t v143 = *(void *)(v139 + 8);
                goto LABEL_336;
              }
            }
            else
            {
LABEL_332:
              if (!v139) {
                goto LABEL_333;
              }
              unint64_t v143 = *(void *)(v139 + 8);
              if (v138.u32[0] > 1uLL)
              {
                unint64_t v144 = *(void *)(v139 + 8);
                if (v143 >= *(void *)&v136) {
                  unint64_t v144 = v143 % *(void *)&v136;
                }
              }
              else
              {
                unint64_t v144 = v143 & (*(void *)&v136 - 1);
              }
              if (v144 != v137)
              {
LABEL_333:
                *(void *)(*v334 + 8 * v137) = 0;
                unint64_t v139 = *v135;
                goto LABEL_334;
              }
LABEL_336:
              if (v138.u32[0] > 1uLL)
              {
                if (v143 >= *(void *)&v136) {
                  v143 %= *(void *)&v136;
                }
              }
              else
              {
                v143 &= *(void *)&v136 - 1;
              }
              if (v143 != v137)
              {
                *(void *)(*v334 + 8 * v143) = v141;
                unint64_t v139 = *v135;
              }
            }
            unint64_t *v141 = v139;
            unint64_t *v135 = 0;
            --*(void *)(a1 + 624);
            operator delete(v135);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__erase_unique<rf::data_flow::RFUUID>(v330, (uint64_t)__p);
          uint64_t v145 = *(void *)(a1 + 128);
          if (v145) {
            (*(void (**)(uint64_t, rf::data_flow::RFUUID *))(*(void *)v145 + 48))(v145, v131);
          }
          v146 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v338, (uint64_t)__p);
          if (v146)
          {
            if (!*(unsigned char *)(v343 + 32)) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            v147 = v146;
            RESceneRemoveEntity();
            int8x8_t v148 = *(int8x8_t *)(a1 + 200);
            unint64_t v149 = v147[1];
            uint8x8_t v150 = (uint8x8_t)vcnt_s8(v148);
            v150.i16[0] = vaddlv_u8(v150);
            if (v150.u32[0] > 1uLL)
            {
              if (v149 >= *(void *)&v148) {
                v149 %= *(void *)&v148;
              }
            }
            else
            {
              v149 &= *(void *)&v148 - 1;
            }
            v152 = *(void **)(*v338 + 8 * v149);
            do
            {
              v153 = v152;
              v152 = (void *)*v152;
            }
            while (v152 != v147);
            if (v153 == v332) {
              goto LABEL_367;
            }
            unint64_t v154 = v153[1];
            if (v150.u32[0] > 1uLL)
            {
              if (v154 >= *(void *)&v148) {
                v154 %= *(void *)&v148;
              }
            }
            else
            {
              v154 &= *(void *)&v148 - 1;
            }
            if (v154 != v149)
            {
LABEL_367:
              if (!*v147) {
                goto LABEL_368;
              }
              unint64_t v155 = *(void *)(*v147 + 8);
              if (v150.u32[0] > 1uLL)
              {
                if (v155 >= *(void *)&v148) {
                  v155 %= *(void *)&v148;
                }
              }
              else
              {
                v155 &= *(void *)&v148 - 1;
              }
              if (v155 != v149) {
LABEL_368:
              }
                *(void *)(*v338 + 8 * v149) = 0;
            }
            uint64_t v156 = *v147;
            if (*v147)
            {
              unint64_t v157 = *(void *)(v156 + 8);
              if (v150.u32[0] > 1uLL)
              {
                if (v157 >= *(void *)&v148) {
                  v157 %= *(void *)&v148;
                }
              }
              else
              {
                v157 &= *(void *)&v148 - 1;
              }
              if (v157 != v149)
              {
                *(void *)(*v338 + 8 * v157) = v153;
                uint64_t v156 = *v147;
              }
            }
            void *v153 = v156;
            void *v147 = 0;
            --*(void *)(a1 + 216);
            *(void *)v376 = v147;
            *(void *)&v376[8] = a1 + 208;
            LOBYTE(v377) = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v376);
          }
          else
          {
            v151 = rf::realityFusionLogObject(0);
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v376 = 0;
              _os_log_error_impl(&dword_235A7C000, v151, OS_LOG_TYPE_ERROR, "EnvironmentProbeConsumer: The removed probe was not stored in the probe entity dictionary", v376, 2u);
            }
          }
          v131 = (rf::data_flow::RFUUID *)((char *)v131 + 144);
        }
        std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)(a1 + 704));
        v158 = *(void **)(a1 + 640);
        v159 = *(void **)(a1 + 648);
        if (v158 != v159)
        {
          do
          {
            if (!*(unsigned char *)(v343 + 32)) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            RESceneAddEntity();
            ++v158;
          }
          while (v158 != v159);
          v158 = *(void **)(a1 + 648);
          v160 = *(void **)(a1 + 640);
          if (v158 != v160)
          {
            do
              RESharedPtr<REEntity>::~RESharedPtr(--v158);
            while (v158 != v160);
            v158 = v160;
          }
        }
        *(void *)(a1 + 648) = v158;
LABEL_385:
        RESharedPtr<REEntity>::~RESharedPtr(v365);
        if (v319) {

        }
LABEL_36:
        uint64_t v11 = (uint64_t *)*v11;
        if (v12)
        {
          uint64_t v12 = 1;
          goto LABEL_61;
        }
        if (v11)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v11 = *(uint64_t **)&v326[40].__m_.__opaque[8];
          uint64_t v12 = 1;
LABEL_61:
          if (!v11) {
            goto LABEL_415;
          }
        }
      }
      BOOL v62 = (v49 & (v49 - 1)) != 0;
      if (v49 < 3) {
        BOOL v62 = 1;
      }
      unint64_t v63 = v62 | (2 * v49);
      unint64_t v64 = vcvtps_u32_f32(v60 / v61);
      if (v63 <= v64) {
        size_t v65 = v64;
      }
      else {
        size_t v65 = v63;
      }
      if (v65 == 1)
      {
        size_t v65 = 2;
      }
      else if ((v65 & (v65 - 1)) != 0)
      {
        unint64_t v56 = std::__next_prime(v65);
        size_t v65 = v56;
      }
      unint64_t v49 = *(void *)(a1 + 608);
      if (v65 > v49) {
        goto LABEL_132;
      }
      if (v65 < v49)
      {
        unint64_t v56 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 624) / *(float *)(a1 + 632));
        if (v49 < 3 || (uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          unint64_t v56 = std::__next_prime(v56);
        }
        else
        {
          uint64_t v72 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2) {
            unint64_t v56 = v72;
          }
        }
        if (v65 <= v56) {
          size_t v65 = v56;
        }
        if (v65 >= v49)
        {
          unint64_t v49 = *(void *)(a1 + 608);
        }
        else
        {
          if (v65)
          {
LABEL_132:
            if (v65 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float32x4_t v66 = operator new(8 * v65);
            unint64_t v56 = *v50;
            *float32x4_t v50 = (unint64_t)v66;
            if (v56) {
              operator delete((void *)v56);
            }
            uint64_t v67 = 0;
            *(void *)(a1 + 608) = v65;
            do
              *(void *)(*v50 + 8 * v67++) = 0;
            while (v65 != v67);
            float32x4_t v68 = (void *)*v328;
            if (*v328)
            {
              size_t v69 = v68[1];
              uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
              v70.i16[0] = vaddlv_u8(v70);
              if (v70.u32[0] > 1uLL)
              {
                if (v69 >= v65) {
                  v69 %= v65;
                }
              }
              else
              {
                v69 &= v65 - 1;
              }
              *(void *)(*v50 + 8 * v69) = v328;
              float32x4_t v78 = (void *)*v68;
              if (*v68)
              {
                do
                {
                  size_t v79 = v78[1];
                  if (v70.u32[0] > 1uLL)
                  {
                    if (v79 >= v65) {
                      v79 %= v65;
                    }
                  }
                  else
                  {
                    v79 &= v65 - 1;
                  }
                  if (v79 != v69)
                  {
                    if (!*(void *)(*v50 + 8 * v79))
                    {
                      *(void *)(*v50 + 8 * v79) = v68;
                      goto LABEL_181;
                    }
                    *float32x4_t v68 = *v78;
                    *float32x4_t v78 = **(void **)(*v50 + 8 * v79);
                    **(void **)(*v50 + 8 * v79) = v78;
                    float32x4_t v78 = v68;
                  }
                  size_t v79 = v69;
LABEL_181:
                  float32x4_t v68 = v78;
                  float32x4_t v78 = (void *)*v78;
                  size_t v69 = v79;
                }
                while (v78);
              }
            }
            unint64_t v49 = v65;
            goto LABEL_185;
          }
          unint64_t v56 = *v50;
          *float32x4_t v50 = 0;
          if (v56) {
            operator delete((void *)v56);
          }
          unint64_t v49 = 0;
          *(void *)(a1 + 608) = 0;
        }
      }
LABEL_185:
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v48 >= v49) {
          unint64_t v2 = v48 % v49;
        }
        else {
          unint64_t v2 = v48;
        }
      }
      else
      {
        unint64_t v2 = (v49 - 1) & v48;
      }
      goto LABEL_190;
    }
    uint64_t v11 = *(uint64_t **)&v326[40].__m_.__opaque[8];
    if (v11)
    {
      uint64_t v12 = 1;
      goto LABEL_30;
    }
LABEL_415:
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    float v165 = *(float *)v343 + *(float *)(a1 + 232);
    *(float *)(a1 + 232) = v165;
    if (!*(void *)(a1 + 96) && !*(void *)(a1 + 128)) {
      goto LABEL_628;
    }
    if (*(unsigned char *)(a1 + 544))
    {
      if (*(unsigned char *)(a1 + 520))
      {
        v166 = (id *)(a1 + 512);
LABEL_425:
        id v320 = *v166;
        BOOL v168 = 0;
        float v165 = *(float *)(a1 + 232);
        BOOL v167 = 1;
        float v169 = *(float *)(a1 + 24);
        if (*(unsigned char *)(a1 + 544)) {
          float v169 = v169 + v169;
        }
        int v323 = 0;
        goto LABEL_431;
      }
      BOOL v168 = 0;
      id v320 = 0;
      float v169 = *(float *)(a1 + 24) + *(float *)(a1 + 24);
      BOOL v167 = 1;
    }
    else
    {
      BOOL v167 = *(unsigned char *)(a1 + 384) != 0;
      if (*(unsigned char *)(a1 + 384) && *(unsigned char *)(a1 + 360))
      {
        v166 = (id *)(a1 + 352);
        goto LABEL_425;
      }
      id v320 = 0;
      BOOL v168 = *(unsigned __int8 *)(a1 + 384) == 0;
      float v169 = *(float *)(a1 + 24);
    }
    int v323 = 1;
LABEL_431:
    BOOL v325 = v168;
    if (!v167 || v165 > v169)
    {
      if (*(unsigned char *)(a1 + 144))
      {
        MutableCameraAnchor = (float32x4_t *)rf::helpers::getMutableCameraAnchor((rf::helpers *)&v326[2].__m_.__opaque[8]);
        float32x4_t v339 = MutableCameraAnchor[5];
        id v171 = (id)MutableCameraAnchor[7].i64[0];
        if (*(unsigned char *)(a1 + 384)
          && *(unsigned char *)(a1 + 360)
          && (float32x4_t v172 = vsubq_f32(*(float32x4_t *)(a1 + 320), v339),
              float32x4_t v173 = vmulq_f32(v172, v172),
              sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v173, 2), vaddq_f32(v173, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v173.f32, 1))).f32[0]) <= *(float *)(a1 + 148)))
        {
          v327 = 0;
          v174 = 0;
        }
        else
        {
          if (re::internal::enableSignposts(0, 0)) {
            kdebug_trace();
          }
          if (!*(unsigned char *)(v343 + 32)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          v174 = *(float32x4_t **)&__p[8];
          v327 = *(float32x4_t **)__p;
          if (re::internal::enableSignposts(0, 0)) {
            kdebug_trace();
          }
          if (re::internal::enableSignposts(0, 0)) {
            kdebug_trace();
          }
          if (!*(unsigned char *)(v343 + 32)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v353, a1 + 72);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v352, a1 + 104);
          float32x4_t v175 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          v176.i64[0] = 0x7F0000007FLL;
          v176.i64[1] = 0x7F0000007FLL;
          if (v327 != v174)
          {
            v177 = v327;
            do
            {
              float32x4_t v179 = *v177;
              float32x4_t v178 = v177[1];
              uint32x4_t v180 = (uint32x4_t)vcgtq_f32(*v177, v178);
              v180.i32[3] = v180.i32[2];
              if ((vmaxvq_u32(v180) & 0x80000000) == 0)
              {
                v175.i32[3] = 0;
                v179.i32[3] = 0;
                float32x4_t v175 = vminnmq_f32(v175, v179);
                v176.i32[3] = 0;
                v178.i32[3] = 0;
                float32x4_t v176 = vmaxnmq_f32(v176, v178);
              }
              v177 += 2;
            }
            while (v177 != v174);
          }
          if (*(unsigned char *)(a1 + 144))
          {
            uint32x4_t v181 = (uint32x4_t)vcgtq_f32(v175, v176);
            v181.i32[3] = v181.i32[2];
            float32x4_t v182 = 0uLL;
            if ((vmaxvq_u32(v181) & 0x80000000) == 0)
            {
              v183.i64[0] = 0x3F0000003F000000;
              v183.i64[1] = 0x3F0000003F000000;
              float32x4_t v182 = vmulq_f32(vaddq_f32(v175, v176), v183);
            }
            float32x4_t v184 = vaddq_f32(v339, vsubq_f32(v339, v182));
            float32x4_t v185 = vsubq_f32(v176, v175);
            v185.i32[3] = 0;
            float32x4_t v186 = vmaxnmq_f32(v185, (float32x4_t)0);
            v185.i64[0] = 0x3F0000003F000000;
            v185.i64[1] = 0x3F0000003F000000;
            float32x4_t v187 = vmulq_f32(v186, v185);
            float32x4_t v188 = vsubq_f32(v184, v187);
            float32x4_t v189 = vaddq_f32(v184, v187);
            v175.i32[3] = 0;
            v188.i32[3] = 0;
            float32x4_t v175 = vminnmq_f32(v175, v188);
            v176.i32[3] = 0;
            v189.i32[3] = 0;
            float32x4_t v176 = vmaxnmq_f32(v176, v189);
          }
          uint32x4_t v190 = (uint32x4_t)vcgtq_f32(v175, v176);
          v190.i32[3] = v190.i32[2];
          if ((vmaxvq_u32(v190) & 0x80000000) != 0)
          {
            v195.i64[0] = 0x4000000040000000;
            v195.i32[2] = 0x40000000;
            v193.i64[0] = 0xC0000000C0000000;
            v193.i32[2] = -1073741824;
          }
          else
          {
            v191.i64[0] = 0x3F0000003F000000;
            v191.i64[1] = 0x3F0000003F000000;
            float32x4_t v192 = vmulq_f32(vaddq_f32(v175, v176), v191);
            v191.i64[0] = 0xC0000000C0000000;
            v191.i64[1] = 0xC0000000C0000000;
            float32x4_t v193 = vaddq_f32(v192, v191);
            v194.i64[0] = 0x4000000040000000;
            v194.i64[1] = 0x4000000040000000;
            float32x4_t v195 = vaddq_f32(v192, v194);
          }
          v175.i32[3] = 0;
          v193.i32[3] = 0;
          v176.i32[3] = 0;
          v195.i32[3] = 0;
          *(float32x4_t *)std::string __p = vminnmq_f32(v175, v193);
          *(float32x4_t *)&__p[16] = vmaxnmq_f32(v176, v195);
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v353);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v376, (uint64_t)v352);
          rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement((float32x4_t *)a1, (float32x4_t *)__p, (uint64_t)buf, (uint64_t)v376);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v376);
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](buf);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v352);
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v353);
          if (re::internal::enableSignposts(0, 0)) {
            kdebug_trace();
          }
        }
      }
      else
      {
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        if (!*(unsigned char *)(v343 + 32)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        v174 = *(float32x4_t **)&__p[8];
        v327 = *(float32x4_t **)__p;
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        if (!*(unsigned char *)(v343 + 32)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v351, a1 + 72);
        std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v350, a1 + 104);
        float32x4_t v196 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v197.i64[0] = 0x7F0000007FLL;
        v197.i64[1] = 0x7F0000007FLL;
        if (v327 != v174)
        {
          v198 = v327;
          do
          {
            float32x4_t v200 = *v198;
            float32x4_t v199 = v198[1];
            uint32x4_t v201 = (uint32x4_t)vcgtq_f32(*v198, v199);
            v201.i32[3] = v201.i32[2];
            if ((vmaxvq_u32(v201) & 0x80000000) == 0)
            {
              v196.i32[3] = 0;
              v200.i32[3] = 0;
              float32x4_t v196 = vminnmq_f32(v196, v200);
              v197.i32[3] = 0;
              v199.i32[3] = 0;
              float32x4_t v197 = vmaxnmq_f32(v197, v199);
            }
            v198 += 2;
          }
          while (v198 != v174);
        }
        uint32x4_t v202 = (uint32x4_t)vcgtq_f32(v196, v197);
        v202.i32[3] = v202.i32[2];
        if ((vmaxvq_u32(v202) & 0x80000000) != 0)
        {
          v207.i64[0] = 0x4000000040000000;
          v207.i32[2] = 0x40000000;
          v205.i64[0] = 0xC0000000C0000000;
          v205.i32[2] = -1073741824;
        }
        else
        {
          v203.i64[0] = 0x3F0000003F000000;
          v203.i64[1] = 0x3F0000003F000000;
          float32x4_t v204 = vmulq_f32(vaddq_f32(v196, v197), v203);
          v203.i64[0] = 0xC0000000C0000000;
          v203.i64[1] = 0xC0000000C0000000;
          float32x4_t v205 = vaddq_f32(v204, v203);
          v206.i64[0] = 0x4000000040000000;
          v206.i64[1] = 0x4000000040000000;
          float32x4_t v207 = vaddq_f32(v204, v206);
        }
        v196.i32[3] = 0;
        v205.i32[3] = 0;
        float32x4_t v208 = vminnmq_f32(v196, v205);
        v197.i32[3] = 0;
        v207.i32[3] = 0;
        float32x4_t v209 = vmaxnmq_f32(v197, v207);
        uint32x4_t v210 = (uint32x4_t)vcgtq_f32(v208, v209);
        v210.i32[3] = v210.i32[2];
        if ((vmaxvq_u32(v210) & 0x80000000) != 0)
        {
          float32x4_t v212 = 0uLL;
        }
        else
        {
          v211.i64[0] = 0x3F0000003F000000;
          v211.i64[1] = 0x3F0000003F000000;
          float32x4_t v212 = vmulq_f32(vaddq_f32(v208, v209), v211);
        }
        uint32x4_t v213 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(a1 + 736), v212);
        v213.i32[3] = v213.i32[2];
        if ((vmaxvq_u32(v213) & 0x80000000) != 0
          || (uint32x4_t v214 = (uint32x4_t)vcgtq_f32(v212, *(float32x4_t *)(a1 + 752)),
              v214.i32[3] = v214.i32[2],
              (vmaxvq_u32(v214) & 0x80000000) != 0))
        {
          *(float32x4_t *)std::string __p = v208;
          *(float32x4_t *)&__p[16] = v209;
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v351);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v376, (uint64_t)v350);
          rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement((float32x4_t *)a1, (float32x4_t *)__p, (uint64_t)buf, (uint64_t)v376);
          std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v376);
          std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](buf);
        }
        std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v350);
        std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v351);
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
      }
      if (*(unsigned char *)(a1 + 136))
      {
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        if (!*(unsigned char *)(v343 + 32)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v348, a1 + 72);
        std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v347, a1 + 104);
        unint64_t v215 = *(int *)(a1 + 140);
        uint64_t v216 = (char *)v174 - (char *)v327;
        if (v174 == v327)
        {
          v238 = 0;
          v222 = 0;
        }
        else
        {
          if (v216 < 0) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          float v217 = *(float *)(a1 + 36);
          float v344 = *(float *)(a1 + 32);
          v218 = (float32x4_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v216 >> 5);
          v220 = &v218[2 * v219];
          float v221 = v344;
          v222 = v218;
          v223 = v327;
          do
          {
            float32x4_t v225 = *v223;
            float32x4_t v224 = v223[1];
            float32x4_t v226 = vsubq_f32(v224, *v223);
            v226.i32[3] = 0;
            v227.i64[0] = 0x3F0000003F000000;
            v227.i64[1] = 0x3F0000003F000000;
            float32x4_t v228 = 0uLL;
            float32x4_t v229 = vmaxnmq_f32(v226, (float32x4_t)0);
            float32x4_t v230 = vmulq_n_f32(v229, v221);
            float v231 = v230.f32[1];
            if (v230.f32[0] >= v230.f32[1]) {
              float v231 = v230.f32[0];
            }
            if (v231 < v230.f32[2]) {
              float v231 = v230.f32[2];
            }
            uint32x4_t v232 = (uint32x4_t)vcgtq_f32(v225, v224);
            v232.i32[3] = v232.i32[2];
            if ((vmaxvq_u32(v232) & 0x80000000) == 0) {
              float32x4_t v228 = vmulq_f32(vaddq_f32(v224, v225), v227);
            }
            v224.f32[0] = v231 / v217;
            v230.i32[3] = 0;
            float32x4_t v233 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v224.f32, 0);
            v233.i32[3] = 0;
            float32_t v234 = v228.f32[1] + (v344 + -1.0) * v229.f32[1] * 0.5;
            v228.f32[1] = v234;
            float32x4_t v235 = vmulq_f32(vmaxnmq_f32(v230, v233), v227);
            float32x4_t v236 = vsubq_f32(v228, v235);
            float32x4_t v237 = vaddq_f32(v235, v228);
            if (v218 >= v220)
            {
              float32x4_t v335 = v236;
              float32x4_t v340 = v237;
              uint64_t v239 = ((char *)v218 - (char *)v222) >> 5;
              unint64_t v240 = v239 + 1;
              if ((unint64_t)(v239 + 1) >> 59) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (v220 - v222 > v240) {
                unint64_t v240 = v220 - v222;
              }
              if ((unint64_t)((char *)v220 - (char *)v222) >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v241 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v241 = v240;
              }
              if (v241) {
                unint64_t v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v241);
              }
              else {
                uint64_t v242 = 0;
              }
              v243 = (float32x4_t *)(v241 + 32 * v239);
              float32x4_t *v243 = v335;
              v243[1] = v340;
              if (v218 == v222)
              {
                v222 = (float32x4_t *)(v241 + 32 * v239);
              }
              else
              {
                v244 = (float32x4_t *)(v241 + 32 * v239);
                do
                {
                  float32x4_t v245 = v218[-1];
                  v244[-2] = v218[-2];
                  v244[-1] = v245;
                  v244 -= 2;
                  v218 -= 2;
                }
                while (v218 != v222);
                v218 = v222;
                v222 = v244;
              }
              v220 = (float32x4_t *)(v241 + 32 * v242);
              v238 = v243 + 2;
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              float32x4_t *v218 = v236;
              v218[1] = v237;
              v238 = v218 + 2;
            }
            float v221 = v344;
            v223 += 2;
            v218 = v238;
          }
          while (v223 != v174);
        }
        unint64_t v246 = 126 - 2 * __clz(((char *)v238 - (char *)v222) >> 5);
        if (v238 == v222) {
          uint64_t v247 = 0;
        }
        else {
          uint64_t v247 = v246;
        }
        if (v238 == v222)
        {
          v248 = 0;
          v249 = 0;
        }
        else
        {
          v248 = 0;
          v249 = 0;
          unint64_t v250 = 0;
          do
          {
            size_t v251 = (char *)v238 - (char *)&v222[2];
            if (v251)
            {
              float32x4_t v329 = v222[1];
              float32x4_t v331 = *v222;
              memmove(v222, &v222[2], v251);
              float32x4_t v253 = v329;
              float32x4_t v252 = v331;
              v238 = (float32x4_t *)((char *)v222 + v251);
              float32x4_t v341 = v329;
              float32x4_t v345 = v331;
              v254 = v222;
              do
              {
                float32x4_t v255 = v254[1];
                uint32x4_t v256 = (uint32x4_t)vcgtq_f32(v252, v255);
                v256.i32[3] = v256.i32[2];
                if ((vmaxvq_u32(v256) & 0x80000000) != 0
                  || (float32x4_t v257 = *v254,
                      uint32x4_t v258 = (uint32x4_t)vcgtq_f32(*v254, v253),
                      v258.i32[3] = v258.i32[2],
                      (vmaxvq_u32(v258) & 0x80000000) != 0))
                {
                  v254 += 2;
                }
                else
                {
                  size_t v259 = (char *)v238 - (char *)&v254[2];
                  if (v259)
                  {
                    float32x4_t v333 = *v254;
                    float32x4_t v336 = v254[1];
                    memmove(v254, &v254[2], v259);
                    float32x4_t v257 = v333;
                    float32x4_t v255 = v336;
                    float32x4_t v253 = v329;
                    float32x4_t v252 = v331;
                  }
                  float32x4_t v260 = v345;
                  v260.i32[3] = 0;
                  v257.i32[3] = 0;
                  float32x4_t v261 = vminnmq_f32(v260, v257);
                  float32x4_t v262 = v341;
                  v262.i32[3] = 0;
                  v255.i32[3] = 0;
                  float32x4_t v341 = vmaxnmq_f32(v262, v255);
                  float32x4_t v345 = v261;
                  v238 = (float32x4_t *)((char *)v254 + v259);
                }
              }
              while (v254 != v238);
            }
            else
            {
              v238 = v222;
              float32x4_t v341 = v222[1];
              float32x4_t v345 = *v222;
            }
            if ((unint64_t)v249 >= v250)
            {
              uint64_t v263 = ((char *)v249 - (char *)v248) >> 5;
              unint64_t v264 = v263 + 1;
              if ((unint64_t)(v263 + 1) >> 59) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v250 - (void)v248) >> 4 > v264) {
                unint64_t v264 = (uint64_t)(v250 - (void)v248) >> 4;
              }
              if (v250 - (unint64_t)v248 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v265 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v265 = v264;
              }
              if (v265) {
                unint64_t v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v265);
              }
              else {
                uint64_t v266 = 0;
              }
              v267 = (float32x4_t *)(v265 + 32 * v263);
              float32x4_t *v267 = v345;
              v267[1] = v341;
              if (v249 == v248)
              {
                v270 = (float32x4_t *)(v265 + 32 * v263);
              }
              else
              {
                unint64_t v268 = v265 + 32 * v263;
                do
                {
                  float32x4_t v269 = v249[-1];
                  v270 = (float32x4_t *)(v268 - 32);
                  *(float32x4_t *)(v268 - 32) = v249[-2];
                  *(float32x4_t *)(v268 - 16) = v269;
                  v249 -= 2;
                  v268 -= 32;
                }
                while (v249 != v248);
              }
              unint64_t v250 = v265 + 32 * v266;
              v249 = v267 + 2;
              if (v248) {
                operator delete(v248);
              }
              v248 = v270;
            }
            else
            {
              float32x4_t *v249 = v345;
              v249[1] = v341;
              v249 += 2;
            }
          }
          while (v222 != v238);
        }
        unint64_t v271 = ((char *)v249 - (char *)v248) >> 5;
        unint64_t v272 = 126 - 2 * __clz(v271);
        if (v249 == v248) {
          uint64_t v273 = 0;
        }
        else {
          uint64_t v273 = v272;
        }
        if (v271 <= v215) {
          v274 = v249;
        }
        else {
          v274 = &v248[2 * v215];
        }
        if (v222) {
          operator delete(v222);
        }
        *(_OWORD *)v380 = 0u;
        long long v381 = 0u;
        int v382 = 1065353216;
        v275 = (void *)(a1 + 704);
        std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100]((uint64_t *)(a1 + 704));
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear(a1 + 664);
        v276 = v248;
        if (v248 != v274)
        {
          v276 = v274;
          v277 = v248;
          do
          {
            v278 = *(uint64_t **)(a1 + 576);
            if (v278)
            {
              float32x4_t v280 = *v277;
              float32x4_t v279 = v277[1];
              float32x4_t v281 = vsubq_f32(v279, *v277);
              v279.i32[3] = 0;
              v280.i32[3] = 0;
              float32x4_t v342 = v280;
              float32x4_t v346 = v279;
              v281.i32[3] = 0;
              float32x4_t v337 = v281;
              char v282 = 1;
              do
              {
                while (1)
                {
                  v283 = (float32x4_t *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(a1 + 600), (uint64_t)(v278 + 2));
                  if (!v283) {
                    break;
                  }
                  float32x4_t v284 = v283[3];
                  float32x4_t v285 = v283[4];
                  v284.i32[3] = 0;
                  v285.i32[3] = 0;
                  float32x4_t v286 = vsubq_f32(vminnmq_f32(v285, v346), vmaxnmq_f32(v284, v342));
                  v286.i32[3] = 0;
                  float32x4_t v287 = vmaxnmq_f32(v286, (float32x4_t)0);
                  float32x4_t v288 = vmaxnmq_f32(v337, (float32x4_t)0);
                  if (vdivq_f32(vmulq_laneq_f32(vmulq_lane_f32(v287, *(float32x2_t *)v287.f32, 1), v287, 2), vmulq_laneq_f32(vmulq_lane_f32(v288, *(float32x2_t *)v288.f32, 1), v288, 2)).f32[0] <= *(float *)(a1 + 40))break; {
                  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)v380, (uint64_t)(v278 + 2), (_OWORD *)v278 + 1);
                  }
                  char v282 = 0;
                  v278 = (uint64_t *)*v278;
                  if (!v278) {
                    goto LABEL_577;
                  }
                }
                v278 = (uint64_t *)*v278;
              }
              while (v278);
              if (v282) {
                goto LABEL_576;
              }
LABEL_577:
              if (v276 != &v277[2]) {
                memmove(v277, &v277[2], (char *)v276 - (char *)&v277[2]);
              }
              v276 -= 2;
            }
            else
            {
LABEL_576:
              v277 += 2;
            }
          }
          while (v277 != v276);
        }
        for (uint64_t i = *(id **)(a1 + 576); i; uint64_t i = (id *)*i)
        {
          if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v380, (uint64_t)(i + 2)))
          {
            unint64_t v290 = *(void *)(a1 + 712);
            unint64_t v291 = *(void *)(a1 + 720);
            if (v290 >= v291)
            {
              unint64_t v293 = 0x8E38E38E38E38E39 * ((uint64_t)(v290 - *v275) >> 4);
              unint64_t v294 = v293 + 1;
              if (v293 + 1 > 0x1C71C71C71C71C7) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v295 = 0x8E38E38E38E38E39 * ((uint64_t)(v291 - *v275) >> 4);
              if (2 * v295 > v294) {
                unint64_t v294 = 2 * v295;
              }
              if (v295 >= 0xE38E38E38E38E3) {
                unint64_t v296 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v296 = v294;
              }
              v355.i64[0] = a1 + 720;
              if (v296) {
                v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(a1 + 720, v296);
              }
              else {
                v297 = 0;
              }
              uint64_t v298 = (uint64_t)&v297[144 * v293];
              *(void *)std::string __p = v297;
              *(void *)&__p[8] = v298;
              *(void *)&__p[24] = &v297[144 * v296];
              std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(v298, i + 6);
              *(void *)&__p[16] = v298 + 144;
              std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer((uint64_t *)(a1 + 704), __p);
              uint64_t v292 = *(void *)(a1 + 712);
              std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)__p);
            }
            else
            {
              uint64_t v292 = std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(v290, i + 6)+ 144;
              *(void *)(a1 + 712) = v292;
            }
            *(void *)(a1 + 712) = v292;
          }
        }
        if (v248 != v276)
        {
          v299 = v248;
          do
          {
            float32x4_t v300 = v299[1];
            int32x4_t v301 = vcgtq_f32(*v299, v300);
            v303.i32[3] = v301.i32[2];
            unsigned int v302 = vmaxvq_u32(v303);
            v303.i64[0] = 0;
            v303.i32[2] = 0;
            if ((v302 & 0x80000000) == 0)
            {
              v304.i64[0] = 0x3F0000003F000000;
              v304.i64[1] = 0x3F0000003F000000;
              uint32x4_t v303 = (uint32x4_t)vmulq_f32(vaddq_f32(*v299, v300), v304);
            }
            *(_OWORD *)v376 = xmmword_235AF75E0;
            long long v377 = xmmword_235AF75F0;
            v303.i32[3] = 1.0;
            long long v378 = xmmword_235AF7600;
            uint32x4_t v379 = v303;
            v367.i8[0] = 0;
            v367.i64[1] = 0;
            uuid_clear(buf);
            uuid_generate_random(buf);
            float32x4_t v368 = *(float32x4_t *)v376;
            long long v369 = v377;
            long long v370 = v378;
            float32x4_t v371 = (float32x4_t)v379;
            float32x4_t v305 = vsubq_f32(v299[1], *v299);
            v305.i32[3] = 0;
            float32x4_t v372 = vmaxnmq_f32(v305, (float32x4_t)0);
            LOBYTE(v373) = 0;
            unsigned __int8 v374 = 0;
            uint64_t v375 = 1065353216;
            if (v349)
            {
              float32x4_t v306 = vsubq_f32(v299[1], *v299);
              v306.i32[3] = 0;
              *(float32x4_t *)v365 = vmaxnmq_f32(v306, (float32x4_t)0);
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v349 + 48))(__p);
              *(_OWORD *)buf = *(_OWORD *)__p;
              float32x4_t v367 = *(float32x4_t *)&__p[16];
              int v307 = v374;
            }
            else
            {
              int v307 = 0;
            }
            *(_OWORD *)std::string __p = *(_OWORD *)buf;
            *(float32x4_t *)&__p[16] = v367;
            long long v359 = v370;
            float32x4_t v360 = v371;
            float32x4_t v361 = v372;
            float32x4_t v355 = *(float32x4_t *)buf;
            float32x4_t v356 = v367;
            float32x4_t v357 = v368;
            long long v358 = v369;
            LOBYTE(v362) = 0;
            char v363 = 0;
            if (v307)
            {
              id v362 = v373;
              char v363 = 1;
            }
            uint64_t v364 = v375;
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>(a1 + 664, (uint64_t)__p, (uint64_t)__p);
            if (v363) {

            }
            v309 = rf::realityFusionLogObject(v308);
            if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
            {
              rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)buf, __p);
              v310 = __p;
              if (__p[23] < 0) {
                v310 = *(unsigned char **)__p;
              }
              *(_DWORD *)v365 = 136315138;
              *(void *)&v365[4] = v310;
              _os_log_impl(&dword_235A7C000, v309, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Adding new localized anchor %s", v365, 0xCu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }

            if (v374) {
            v299 += 2;
            }
          }
          while (v299 != v276);
        }
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v380);
        if (v248) {
          operator delete(v248);
        }
        std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v347);
        std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v348);
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
      }
      *(_DWORD *)(a1 + 232) = 0;
      if (v327) {
        operator delete(v327);
      }
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (((v323 | v325) & 1) == 0) {

    }
LABEL_628:
    std::mutex::unlock(v326);
  }
}

void sub_235A8A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,std::mutex *a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((void *)(v55 - 240));
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](&STACK[0x290]);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](&a51);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](&a55);
  if (__p) {
    operator delete(__p);
  }
  if (((a23 | a25) & 1) == 0) {

  }
  std::mutex::unlock(a28);
  _Unwind_Resume(a1);
}

void anonymous namespace'::collectAABBsInScene(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  REMeshComponentGetComponentType();
  uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
  uint64_t v4 = v3;
  v17[1] = ComponentsOfClass;
  v17[2] = v3;
  uint64_t v15 = ComponentsOfClass;
  uint64_t v5 = v15;
  v17[3] = v15;
  char v18 = 1;
  uint64_t v6 = ComponentsOfClass + 8 * v4;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v16 = v17;
  if (v6 != v5)
  {
    unint64_t v7 = -1;
    uint64_t v8 = v5;
    do
    {
      uint64_t v15 = v8 + 8;
      uint64_t v8 = v15;
      ++v7;
    }
    while (v15 != v6);
    if (v7 >= 0x7FFFFFFFFFFFFFFLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(v7 + 1);
    uint64_t v10 = 0;
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[32 * v11];
    uint64_t v16 = v17;
    do
    {
      REComponentGetEntity();
      RETransformComponentGetComponentType();
      REEntityGetComponentByClass();
      RETransformComponentGetWorldMatrix4x4F();
      REEntityComputeMeshBounds();
      uint64_t v12 = &v9[v10];
      *(_OWORD *)uint64_t v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      uint64_t v15 = v5 + 8;
      uint64_t v5 = v15;
      v10 += 32;
    }
    while (v15 != v6);
    a1[1] = &v9[v10];
  }
}

void sub_235A8AAE8(_Unwind_Exception *exception_object)
{
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::updateBackgroundProbePlacement(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  float32x4_t v8 = *a2;
  float32x4_t v9 = a2[1];
  uint32x4_t v10 = (uint32x4_t)vcgtq_f32(*a2, v9);
  v10.i32[3] = v10.i32[2];
  if ((vmaxvq_u32(v10) & 0x80000000) != 0)
  {
    v12.i64[0] = 0;
    v12.i32[2] = 0;
  }
  else
  {
    v11.i64[0] = 0x3F0000003F000000;
    v11.i64[1] = 0x3F0000003F000000;
    float32x4_t v12 = vmulq_f32(vaddq_f32(v8, v9), v11);
  }
  v12.i32[3] = 1.0;
  float32x4_t v34 = v12;
  if (a1[1].i8[1])
  {
    float v13 = a1[1].f32[3];
    float32x4_t v14 = vsubq_f32(v9, v8);
    v14.i32[3] = 0;
    float32x4_t v15 = vmaxnmq_f32(v14, (float32x4_t)0);
    float v16 = v15.f32[1];
    if (v15.f32[1] <= v15.f32[0]) {
      float v16 = v15.f32[0];
    }
    if (v16 < v15.f32[2]) {
      float v16 = v15.f32[2];
    }
    BOOL v17 = v16 <= v13;
    unsigned int v18 = v16 > v13;
    int8x8_t v19 = (int8x8_t)vdup_n_s32(0x7F800000u);
    float v20 = INFINITY;
    int32x2_t v21 = vdup_n_s32(v18);
    if (v17) {
      float v20 = v15.f32[2];
    }
    *(int8x8_t *)v33.i8 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v21, 0x1FuLL)), v19, *(int8x8_t *)v15.f32);
    *(float *)&v33.i32[2] = v20;
  }
  else
  {
    int32x4_t v33 = vdupq_n_s32(0x7F800000u);
  }
  v40.i8[0] = 0;
  v40.i64[1] = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  long long v41 = xmmword_235AF75E0;
  long long v42 = xmmword_235AF75F0;
  long long v43 = xmmword_235AF7600;
  float32x4_t v44 = v34;
  int32x4_t v45 = v33;
  LOBYTE(v46) = 0;
  unsigned __int8 v47 = 0;
  uint64_t v48 = 1065353216;
  uint64_t v22 = *(void *)(a3 + 24);
  if (v22)
  {
    if (a1[34].i8[0])
    {
      uint64_t v23 = *(void *)(a4 + 24);
      if (v23)
      {
        (*(void (**)(void, float32x4_t *))(*(void *)v23 + 48))(*(void *)(a4 + 24), a1 + 25);
        uint64_t v22 = *(void *)(a3 + 24);
        if (!v22) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
      }
    }
    long long v24 = (rf *)(*(void *(**)(void **__return_ptr))(*(void *)v22 + 48))(__p);
    *(_OWORD *)uuid_t uu = *(_OWORD *)__p;
    float32x4_t v40 = v38;
    BOOL v25 = rf::realityFusionLogObject(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)uu, __p);
      uint64_t v26 = v38.i8[7] >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      long long v36 = v26;
      _os_log_impl(&dword_235A7C000, v25, OS_LOG_TYPE_DEFAULT, "EnvironmentProbeConsumer: Adding new background anchor %s", buf, 0xCu);
      if (v38.i8[7] < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (a1[24].i8[0]) {
    unint64_t v27 = a1 + 25;
  }
  else {
    unint64_t v27 = a1 + 15;
  }
  int v28 = v27[9].u8[0];
  float32x4_t v29 = v44;
  v27[4] = (float32x4_t)v43;
  v27[5] = v29;
  v27[6] = (float32x4_t)v45;
  float32x4_t v30 = v40;
  *unint64_t v27 = *(float32x4_t *)uu;
  v27[1] = v30;
  long long v31 = v42;
  v27[2] = (float32x4_t)v41;
  v27[3] = (float32x4_t)v31;
  if (v28)
  {
    std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>((id *)&v27[7], v46, v47);
    v27[8].i64[0] = v48;
  }
  else
  {
    v27[7].i8[0] = 0;
    v27[7].i8[8] = 0;
    if (v47)
    {
      v27[7].i64[0] = (uint64_t)v46;
      v27[7].i8[8] = 1;
    }
    v27[8].i64[0] = v48;
    v27[9].i8[0] = 1;
  }
  float32x4_t v32 = a2[1];
  a1[46] = *a2;
  a1[47] = v32;
  if (v47) {
}
  }

void sub_235A8AE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,char a40)
{
  if (a40) {

  }
  _Unwind_Resume(exception_object);
}

void *anonymous namespace'::updateEntityFromEnvironmentProbe(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  REAREnvironmentProbeComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    rf::getMessage((rf *)"The probe entity doesn't have probe component.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v7);
  }
  REComponentGetEntity();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentSetWorldMatrix4x4F();
  REAREnvironmentProbeComponentSetExtents();
  if (!*(unsigned char *)(a2 + 120)) {
    return (void *)REAREnvironmentProbeComponentSetTexture();
  }
  __p[0] = (void *)REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
  REAREnvironmentProbeComponentSetTexture();
  if (a4) {
    REAREnvironmentProbeComponentSetClippingPointLux();
  }
  return RESharedPtr<REAsset>::~RESharedPtr(__p);
}

void sub_235A8AF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::createEntityFromEnvironmentProbe(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *a1 = REEntityCreate();
  std::string::basic_string[abi:ne180100]<0>(&v14, "RFAREnvironmentProbeEntity");
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)a2, __p);
  if ((v13 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v8 = v13;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  char v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)float32x4_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  REEntitySetName();
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentSetWorldMatrix4x4F();
  REAREnvironmentProbeComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (!*(void *)(a2 + 24))
  {
    if (*(unsigned char *)(a2 + 16)) {
      float32x4_t v11 = *(void **)a2;
    }
    else {
      float32x4_t v11 = (void *)a2;
    }
    *(void *)(a2 + 24) = ((*v11 >> 2) + (*v11 << 6) + v11[1] + 2654435769) ^ *v11;
  }
  REAREnvironmentProbeComponentSetIdentifier();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();
  if (*(unsigned char *)(a2 + 120))
  {
    v14.__r_.__value_.__r.__words[0] = REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
    REAREnvironmentProbeComponentSetTexture();
    if (a5) {
      REAREnvironmentProbeComponentSetClippingPointLux();
    }
    RESharedPtr<REAsset>::~RESharedPtr(&v14);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_235A8B170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  RESharedPtr<REEntity>::~RESharedPtr(v26);
  _Unwind_Resume(a1);
}

uint64_t *RESharedPtr<REEntity>::operator=(uint64_t *a1, uint64_t a2)
{
  if (a2) {
    RERetain();
  }
  uint64_t v4 = *a1;
  *a1 = a2;
  if (v4) {
    RERelease();
  }
  return a1;
}

void *std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer(id *this)
{
  rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer(this);
  JUMPOUT(0x237DEE2B0);
}

{
  void **v2;

  *this = &unk_26E8F3BF0;
  unint64_t v2 = this + 88;
  std::vector<rf::data_flow::EnvironmentProbe>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(this + 83));
  unint64_t v2 = this + 80;
  std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(this + 75));
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)(this + 70));
  if (*((unsigned char *)this + 544) && *((unsigned char *)this + 520)) {

  }
  if (*((unsigned char *)this + 384) && *((unsigned char *)this + 360)) {
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table((uint64_t)(this + 24));
  }
  RESharedPtr<REEntity>::~RESharedPtr(this + 23);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](this + 13);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](this + 9);
}

uint64_t rf::data_flow::consumer::Consumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

void std::vector<RESharedPtr<REEntity>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = RESharedPtr<REEntity>::~RESharedPtr(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ranges::remove_if_view<ranges::transform_view<std::span<REComponent *,18446744073709551615ul>,anonymous namespace'::collectAABBsInScene(REScene *,BOOL)::$_0>,ranges::logical_negate<anonymous namespace'::collectAABBsInScene(REScene *,BOOL)::$_1>>::satisfy_forward(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1 + 8 * a2;
  if (*a3 != v3)
  {
    do
    {
      REComponentGetEntity();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RESceneUnderstandingComponentGetComponentType();
        if (!REEntityGetComponentByClass() || RESceneUnderstandingComponentGetSourceType() != 1)
        {
          REProbeClusterExclusionComponentGetComponentType();
          if (!REEntityGetComponentByClass())
          {
            MainBundle = CFBundleGetMainBundle();
            CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
            applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
            unint64_t v7 = v14;
            if ((v14 & 0x80u) != 0) {
              unint64_t v7 = (unint64_t)__p[1];
            }
            if (v7 == 36)
            {
              std::string::size_type v8 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
              BOOL v9 = memcmp(v8, "com.apple.AssetViewer.ASVAssetViewer", 0x24uLL) == 0;
            }
            else
            {
              BOOL v9 = 0;
            }
            Name = (const char *)REEntityGetName();
            BOOL v11 = v9 && strncmp("ARQL_", Name, 5uLL) == 0;
            if ((char)v14 < 0) {
              operator delete(__p[0]);
            }
            if (!v11) {
              break;
            }
          }
        }
      }
      uint64_t v12 = *a3 + 8;
      *a3 = v12;
    }
    while (v12 != v3);
  }
}

void sub_235A8B540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::AABB>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*,false>(unint64_t a1, float32x4_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    long long v10 = (float32x4_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float32x4_t v93 = a2[-2];
                float32x4_t v94 = a2[-1];
                unint64_t v92 = a2 - 2;
                float32x4_t v95 = vsubq_f32(v94, v93);
                v95.i32[3] = 0;
                float32x4_t v96 = vmaxnmq_f32(v95, (float32x4_t)0);
                float32x4_t v97 = vmulq_f32(v96, v96);
                float32x4_t v98 = vsubq_f32(v10[1], *v10);
                v98.i32[3] = 0;
                float32x4_t v99 = vmaxnmq_f32(v98, (float32x4_t)0);
                float32x4_t v100 = vmulq_f32(v99, v99);
                if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1))).f32[0])* 0.5))
                {
                  float32x4_t v214 = *v10;
                  float32x4_t v219 = v10[1];
                  float32x4_t v101 = v92[1];
                  *long long v10 = *v92;
                  v10[1] = v101;
                  *unint64_t v92 = v214;
                  v92[1] = v219;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            char v102 = v10 + 2;
            BOOL v104 = v10 == a2 || v102 == a2;
            if (a4)
            {
              if (!v104)
              {
                uint64_t v105 = 0;
                __int16 v106 = v10;
                do
                {
                  float32x4_t v108 = v106[1];
                  float32x4_t v107 = v106[2];
                  float32x4_t v109 = *v106;
                  __int16 v106 = v102;
                  float32x4_t v110 = v102[1];
                  float32x4_t v111 = vsubq_f32(v110, v107);
                  v111.i32[3] = 0;
                  float32x4_t v112 = vmaxnmq_f32(v111, (float32x4_t)0);
                  float32x4_t v113 = vmulq_f32(v112, v112);
                  float32x4_t v114 = vsubq_f32(v108, v109);
                  v114.i32[3] = 0;
                  float v115 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1))).f32[0])* 0.5;
                  float32x4_t v116 = vmaxnmq_f32(v114, (float32x4_t)0);
                  float32x4_t v117 = vmulq_f32(v116, v116);
                  if (v115 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2), vaddq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 1))).f32[0])* 0.5))
                  {
                    uint64_t v118 = v105;
                    while (1)
                    {
                      v119 = (float32x4_t *)((char *)v10 + v118);
                      float32x4_t v120 = *(float32x4_t *)((char *)v10 + v118 + 16);
                      v119[2] = *(float32x4_t *)((char *)v10 + v118);
                      v119[3] = v120;
                      if (!v118) {
                        break;
                      }
                      float32x4_t v121 = vsubq_f32(v119[-1], v119[-2]);
                      v121.i32[3] = 0;
                      float32x4_t v122 = vmaxnmq_f32(v121, (float32x4_t)0);
                      float32x4_t v123 = vmulq_f32(v122, v122);
                      v118 -= 32;
                      if (v115 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))).f32[0])* 0.5))
                      {
                        uint64_t v124 = (float32x4_t *)((char *)v10 + v118 + 32);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v124 = v10;
LABEL_81:
                    *uint64_t v124 = v107;
                    v124[1] = v110;
                  }
                  char v102 = v106 + 2;
                  v105 += 32;
                }
                while (&v106[2] != a2);
              }
            }
            else if (!v104)
            {
              do
              {
                float32x4_t v196 = *(float32x4_t *)(a1 + 16);
                float32x4_t v195 = *(float32x4_t *)(a1 + 32);
                float32x4_t v197 = *(float32x4_t *)a1;
                a1 = (unint64_t)v102;
                float32x4_t v198 = v102[1];
                float32x4_t v199 = vsubq_f32(v198, v195);
                v199.i32[3] = 0;
                float32x4_t v200 = vmaxnmq_f32(v199, (float32x4_t)0);
                float32x4_t v201 = vmulq_f32(v200, v200);
                float32x4_t v202 = vsubq_f32(v196, v197);
                v202.i32[3] = 0;
                float v203 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), vaddq_f32(v201, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1))).f32[0])* 0.5;
                float32x4_t v204 = vmaxnmq_f32(v202, (float32x4_t)0);
                float32x4_t v205 = vmulq_f32(v204, v204);
                if (v203 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v205, 2), vaddq_f32(v205, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v205.f32, 1))).f32[0])* 0.5))
                {
                  float32x4_t v206 = v102;
                  do
                  {
                    float32x4_t v207 = vsubq_f32(v206[-3], v206[-4]);
                    v207.i32[3] = 0;
                    float32x4_t v208 = vmaxnmq_f32(v207, (float32x4_t)0);
                    float32x4_t v209 = vmulq_f32(v208, v208);
                    float32x4_t v210 = v206[-1];
                    *float32x4_t v206 = v206[-2];
                    v206[1] = v210;
                    v206 -= 2;
                  }
                  while (v203 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v209, 2), vaddq_f32(v209, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v209.f32, 1))).f32[0])* 0.5));
                  *float32x4_t v206 = v195;
                  v206[1] = v198;
                }
                v102 += 2;
              }
              while ((float32x4_t *)(a1 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v125 = (v12 - 2) >> 1;
              int64_t v126 = v125;
              do
              {
                int64_t v127 = v126;
                if (v125 >= v126)
                {
                  uint64_t v128 = (2 * v126) | 1;
                  unint64_t v129 = &v10[2 * v128];
                  if (2 * v127 + 2 < (uint64_t)v12)
                  {
                    float32x4_t v130 = vsubq_f32(v129[1], *v129);
                    v130.i32[3] = 0;
                    float32x4_t v131 = vmaxnmq_f32(v130, (float32x4_t)0);
                    float32x4_t v132 = vmulq_f32(v131, v131);
                    float32x4_t v133 = vsubq_f32(v129[3], v129[2]);
                    v133.i32[3] = 0;
                    float32x4_t v134 = vmaxnmq_f32(v133, (float32x4_t)0);
                    float32x4_t v135 = vmulq_f32(v134, v134);
                    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0])* 0.5))
                    {
                      v129 += 2;
                      uint64_t v128 = 2 * v127 + 2;
                    }
                  }
                  float32x4_t v136 = vsubq_f32(v129[1], *v129);
                  v136.i32[3] = 0;
                  float32x4_t v137 = vmaxnmq_f32(v136, (float32x4_t)0);
                  float32x4_t v138 = vmulq_f32(v137, v137);
                  unint64_t v139 = &v10[2 * v127];
                  float v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0]);
                  float32x4_t v141 = v139[1];
                  float32x4_t v142 = *v139;
                  float32x4_t v143 = vsubq_f32(v141, *v139);
                  v143.i32[3] = 0;
                  float v144 = v140 * 0.5;
                  float32x4_t v145 = vmaxnmq_f32(v143, (float32x4_t)0);
                  float32x4_t v146 = vmulq_f32(v145, v145);
                  float v147 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0])* 0.5;
                  if (v144 <= v147)
                  {
                    do
                    {
                      int8x8_t v148 = v129;
                      float32x4_t v149 = v129[1];
                      *unint64_t v139 = *v129;
                      v139[1] = v149;
                      if (v125 < v128) {
                        break;
                      }
                      uint64_t v150 = 2 * v128;
                      uint64_t v128 = (2 * v128) | 1;
                      unint64_t v129 = &v10[2 * v128];
                      uint64_t v151 = v150 + 2;
                      if (v151 < (uint64_t)v12)
                      {
                        float32x4_t v152 = vsubq_f32(v129[1], *v129);
                        v152.i32[3] = 0;
                        float32x4_t v153 = vmaxnmq_f32(v152, (float32x4_t)0);
                        float32x4_t v154 = vmulq_f32(v153, v153);
                        float32x4_t v155 = vsubq_f32(v129[3], v129[2]);
                        v155.i32[3] = 0;
                        float32x4_t v156 = vmaxnmq_f32(v155, (float32x4_t)0);
                        float32x4_t v157 = vmulq_f32(v156, v156);
                        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), vaddq_f32(v157, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1))).f32[0])* 0.5))
                        {
                          v129 += 2;
                          uint64_t v128 = v151;
                        }
                      }
                      float32x4_t v158 = vsubq_f32(v129[1], *v129);
                      v158.i32[3] = 0;
                      float32x4_t v159 = vmaxnmq_f32(v158, (float32x4_t)0);
                      float32x4_t v160 = vmulq_f32(v159, v159);
                      unint64_t v139 = v148;
                    }
                    while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 2), vaddq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v160.f32, 1))).f32[0])* 0.5) <= v147);
                    *int8x8_t v148 = v142;
                    v148[1] = v141;
                  }
                }
                int64_t v126 = v127 - 1;
              }
              while (v127);
              uint64_t v161 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v162 = 0;
                float32x4_t v215 = *v10;
                float32x4_t v220 = v10[1];
                v163 = v10;
                do
                {
                  v164 = v163;
                  v163 += 2 * v162 + 2;
                  uint64_t v165 = 2 * v162;
                  uint64_t v162 = (2 * v162) | 1;
                  uint64_t v166 = v165 + 2;
                  if (v166 < v161)
                  {
                    float32x4_t v167 = vsubq_f32(v163[1], *v163);
                    v167.i32[3] = 0;
                    float32x4_t v168 = vmaxnmq_f32(v167, (float32x4_t)0);
                    float32x4_t v169 = vmulq_f32(v168, v168);
                    float32x4_t v170 = vsubq_f32(v163[3], v163[2]);
                    v170.i32[3] = 0;
                    float32x4_t v171 = vmaxnmq_f32(v170, (float32x4_t)0);
                    float32x4_t v172 = vmulq_f32(v171, v171);
                    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v169, 2), vaddq_f32(v169, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v172, 2), vaddq_f32(v172, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v172.f32, 1))).f32[0])* 0.5))
                    {
                      v163 += 2;
                      uint64_t v162 = v166;
                    }
                  }
                  float32x4_t v173 = v163[1];
                  float32x4_t *v164 = *v163;
                  v164[1] = v173;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                a2 -= 2;
                if (v163 == a2)
                {
                  float32x4_t *v163 = v215;
                  v163[1] = v220;
                }
                else
                {
                  float32x4_t v174 = a2[1];
                  float32x4_t *v163 = *a2;
                  v163[1] = v174;
                  *a2 = v215;
                  a2[1] = v220;
                  uint64_t v175 = (char *)v163 - (char *)v10 + 32;
                  if (v175 >= 33)
                  {
                    unint64_t v176 = (((unint64_t)v175 >> 5) - 2) >> 1;
                    v177 = &v10[2 * v176];
                    float32x4_t v178 = vsubq_f32(v177[1], *v177);
                    v178.i32[3] = 0;
                    float32x4_t v179 = vmaxnmq_f32(v178, (float32x4_t)0);
                    float32x4_t v180 = vmulq_f32(v179, v179);
                    float v181 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v180, 2), vaddq_f32(v180, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 1))).f32[0]);
                    float32x4_t v183 = *v163;
                    float32x4_t v182 = v163[1];
                    float32x4_t v184 = vsubq_f32(v182, *v163);
                    v184.i32[3] = 0;
                    float v185 = v181 * 0.5;
                    float32x4_t v186 = vmaxnmq_f32(v184, (float32x4_t)0);
                    float32x4_t v187 = vmulq_f32(v186, v186);
                    float v188 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 2), vaddq_f32(v187, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 1))).f32[0])* 0.5;
                    if (v185 > v188)
                    {
                      do
                      {
                        float32x4_t v189 = v177;
                        float32x4_t v190 = v177[1];
                        float32x4_t *v163 = *v177;
                        v163[1] = v190;
                        if (!v176) {
                          break;
                        }
                        unint64_t v176 = (v176 - 1) >> 1;
                        v177 = &v10[2 * v176];
                        float32x4_t v191 = vsubq_f32(v177[1], *v177);
                        v191.i32[3] = 0;
                        float32x4_t v192 = vmaxnmq_f32(v191, (float32x4_t)0);
                        float32x4_t v193 = vmulq_f32(v192, v192);
                        v163 = v189;
                      }
                      while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v193, 2), vaddq_f32(v193, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v193.f32, 1))).f32[0])* 0.5) > v188);
                      *float32x4_t v189 = v183;
                      v189[1] = v182;
                    }
                  }
                }
              }
              while (v161-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unsigned __int8 v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            float32x4_t v211 = *(float32x4_t *)a1;
            float32x4_t v216 = *(float32x4_t *)(a1 + 16);
            float32x4_t v15 = v14[1];
            *(float32x4_t *)a1 = *v14;
            *(float32x4_t *)(a1 + 16) = v15;
            *unsigned __int8 v14 = v211;
            v14[1] = v216;
          }
          else
          {
          }
          --a3;
          float32x4_t v16 = *(float32x4_t *)a1;
          if (a4) {
            break;
          }
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(a1 - 16), *(float32x4_t *)(a1 - 32));
          v22.i32[3] = 0;
          float32x4_t v23 = vmaxnmq_f32(v22, (float32x4_t)0);
          float32x4_t v24 = vmulq_f32(v23, v23);
          float v25 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
          float32x4_t v17 = *(float32x4_t *)(a1 + 16);
          float32x4_t v26 = vsubq_f32(v17, v16);
          v26.i32[3] = 0;
          float v27 = v25 * 0.5;
          float32x4_t v28 = vmaxnmq_f32(v26, (float32x4_t)0);
          float32x4_t v29 = vmulq_f32(v28, v28);
          float v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0])* 0.5;
          if (v27 > v21) {
            goto LABEL_12;
          }
          float32x4_t v62 = vsubq_f32(a2[-1], a2[-2]);
          v62.i32[3] = 0;
          float32x4_t v63 = vmaxnmq_f32(v62, (float32x4_t)0);
          float32x4_t v64 = vmulq_f32(v63, v63);
          if (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0])* 0.5))
          {
            uint8x8_t v70 = (float32x4_t *)(a1 + 32);
            do
            {
              long long v10 = v70;
              if (v70 >= a2) {
                break;
              }
              float32x4_t v71 = vsubq_f32(v70[1], *v70);
              v71.i32[3] = 0;
              float32x4_t v72 = vmaxnmq_f32(v71, (float32x4_t)0);
              float32x4_t v73 = vmulq_f32(v72, v72);
              v70 += 2;
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).f32[0])* 0.5));
          }
          else
          {
            long long v10 = (float32x4_t *)a1;
            do
            {
              float32x4_t v65 = v10[2];
              float32x4_t v66 = v10[3];
              v10 += 2;
              float32x4_t v67 = vsubq_f32(v66, v65);
              v67.i32[3] = 0;
              float32x4_t v68 = vmaxnmq_f32(v67, (float32x4_t)0);
              float32x4_t v69 = vmulq_f32(v68, v68);
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).f32[0])* 0.5));
          }
          long long v74 = a2;
          if (v10 < a2)
          {
            long long v74 = a2;
            do
            {
              float32x4_t v75 = v74[-2];
              float32x4_t v76 = v74[-1];
              v74 -= 2;
              float32x4_t v77 = vsubq_f32(v76, v75);
              v77.i32[3] = 0;
              float32x4_t v78 = vmaxnmq_f32(v77, (float32x4_t)0);
              float32x4_t v79 = vmulq_f32(v78, v78);
            }
            while (v21 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0])* 0.5));
          }
          while (v10 < v74)
          {
            float32x4_t v213 = *v10;
            float32x4_t v218 = v10[1];
            float32x4_t v80 = v74[1];
            *long long v10 = *v74;
            v10[1] = v80;
            *long long v74 = v213;
            v74[1] = v218;
            do
            {
              float32x4_t v81 = v10[2];
              float32x4_t v82 = v10[3];
              v10 += 2;
              float32x4_t v83 = vsubq_f32(v82, v81);
              v83.i32[3] = 0;
              float32x4_t v84 = vmaxnmq_f32(v83, (float32x4_t)0);
              float32x4_t v85 = vmulq_f32(v84, v84);
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).f32[0])* 0.5));
            do
            {
              float32x4_t v86 = v74[-2];
              float32x4_t v87 = v74[-1];
              v74 -= 2;
              float32x4_t v88 = vsubq_f32(v87, v86);
              v88.i32[3] = 0;
              float32x4_t v89 = vmaxnmq_f32(v88, (float32x4_t)0);
              float32x4_t v90 = vmulq_f32(v89, v89);
            }
            while (v21 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1))).f32[0])* 0.5));
          }
          BOOL v4 = (unint64_t)&v10[-2] >= a1;
          BOOL v5 = &v10[-2] == (float32x4_t *)a1;
          if (&v10[-2] != (float32x4_t *)a1)
          {
            float32x4_t v91 = v10[-1];
            *(float32x4_t *)a1 = v10[-2];
            *(float32x4_t *)(a1 + 16) = v91;
          }
          a4 = 0;
          v10[-2] = v16;
          v10[-1] = v17;
        }
        float32x4_t v17 = *(float32x4_t *)(a1 + 16);
        float32x4_t v18 = vsubq_f32(v17, v16);
        v18.i32[3] = 0;
        float32x4_t v19 = vmaxnmq_f32(v18, (float32x4_t)0);
        float32x4_t v20 = vmulq_f32(v19, v19);
        float v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* 0.5;
LABEL_12:
        uint64_t v30 = 0;
        do
        {
          float32x4_t v31 = vsubq_f32(*(float32x4_t *)(a1 + v30 + 48), *(float32x4_t *)(a1 + v30 + 32));
          v31.i32[3] = 0;
          float32x4_t v32 = vmaxnmq_f32(v31, (float32x4_t)0);
          float32x4_t v33 = vmulq_f32(v32, v32);
          v30 += 32;
        }
        while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])* 0.5) > v21);
        unint64_t v34 = a1 + v30;
        long long v35 = a2;
        if (v30 == 32)
        {
          long long v35 = a2;
          do
          {
            if (v34 >= (unint64_t)v35) {
              break;
            }
            float32x4_t v41 = v35[-2];
            float32x4_t v42 = v35[-1];
            v35 -= 2;
            float32x4_t v43 = vsubq_f32(v42, v41);
            v43.i32[3] = 0;
            float32x4_t v44 = vmaxnmq_f32(v43, (float32x4_t)0);
            float32x4_t v45 = vmulq_f32(v44, v44);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0])* 0.5) <= v21);
        }
        else
        {
          do
          {
            float32x4_t v36 = v35[-2];
            float32x4_t v37 = v35[-1];
            v35 -= 2;
            float32x4_t v38 = vsubq_f32(v37, v36);
            v38.i32[3] = 0;
            float32x4_t v39 = vmaxnmq_f32(v38, (float32x4_t)0);
            float32x4_t v40 = vmulq_f32(v39, v39);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0])* 0.5) <= v21);
        }
        if (v34 >= (unint64_t)v35)
        {
          float32x4_t v59 = (float32x4_t *)(v34 - 32);
        }
        else
        {
          float32x4_t v46 = (float32x4_t *)(a1 + v30);
          unsigned __int8 v47 = v35;
          do
          {
            float32x4_t v212 = *v46;
            float32x4_t v217 = v46[1];
            float32x4_t v48 = v47[1];
            *float32x4_t v46 = *v47;
            v46[1] = v48;
            *unsigned __int8 v47 = v212;
            v47[1] = v217;
            do
            {
              float32x4_t v49 = v46[2];
              float32x4_t v50 = v46[3];
              v46 += 2;
              float32x4_t v51 = vsubq_f32(v50, v49);
              v51.i32[3] = 0;
              float32x4_t v52 = vmaxnmq_f32(v51, (float32x4_t)0);
              float32x4_t v53 = vmulq_f32(v52, v52);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0])* 0.5) > v21);
            do
            {
              float32x4_t v54 = v47[-2];
              float32x4_t v55 = v47[-1];
              v47 -= 2;
              float32x4_t v56 = vsubq_f32(v55, v54);
              v56.i32[3] = 0;
              float32x4_t v57 = vmaxnmq_f32(v56, (float32x4_t)0);
              float32x4_t v58 = vmulq_f32(v57, v57);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])* 0.5) <= v21);
          }
          while (v46 < v47);
          float32x4_t v59 = v46 - 2;
        }
        if (v59 != (float32x4_t *)a1)
        {
          float32x4_t v60 = v59[1];
          *(float32x4_t *)a1 = *v59;
          *(float32x4_t *)(a1 + 16) = v60;
        }
        *float32x4_t v59 = v16;
        v59[1] = v17;
        if (v34 >= (unint64_t)v35) {
          break;
        }
LABEL_33:
        a4 = 0;
        long long v10 = v59 + 2;
      }
      long long v10 = v59 + 2;
      {
        break;
      }
      if (!v61) {
        goto LABEL_33;
      }
    }
    a2 = v59;
    if (!v61) {
      continue;
    }
    break;
  }
}

float32x4_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*,0>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v10 = vsubq_f32(a5[1], *a5);
  v10.i32[3] = 0;
  float32x4_t result = 0uLL;
  float32x4_t v12 = vmaxnmq_f32(v10, (float32x4_t)0);
  float32x4_t v13 = vmulq_f32(v12, v12);
  float32x4_t v14 = vsubq_f32(a4[1], *a4);
  v14.i32[3] = 0;
  float32x4_t v15 = vmaxnmq_f32(v14, (float32x4_t)0);
  float32x4_t v16 = vmulq_f32(v15, v15);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0])* 0.5))
  {
    float32x4_t v18 = *a4;
    float32x4_t v17 = a4[1];
    float32x4_t v19 = a5[1];
    *a4 = *a5;
    a4[1] = v19;
    *a5 = v18;
    a5[1] = v17;
    float32x4_t v20 = vsubq_f32(a4[1], *a4);
    v20.i32[3] = 0;
    float32x4_t v21 = vmaxnmq_f32(v20, (float32x4_t)0);
    float32x4_t v22 = vmulq_f32(v21, v21);
    float32x4_t v23 = vsubq_f32(a3[1], *a3);
    v23.i32[3] = 0;
    float32x4_t v24 = vmaxnmq_f32(v23, (float32x4_t)0);
    float32x4_t result = vmulq_f32(v24, v24);
    result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
    result.f32[0] = sqrtf(result.f32[0]) * 0.5;
    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0])* 0.5) > result.f32[0])
    {
      float32x4_t v26 = *a3;
      float32x4_t v25 = a3[1];
      float32x4_t v27 = a4[1];
      *a3 = *a4;
      a3[1] = v27;
      *a4 = v26;
      a4[1] = v25;
      float32x4_t v28 = vsubq_f32(a3[1], *a3);
      v28.i32[3] = 0;
      float32x4_t result = 0uLL;
      float32x4_t v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      float32x4_t v30 = vmulq_f32(v29, v29);
      float32x4_t v31 = vsubq_f32(a2[1], *a2);
      v31.i32[3] = 0;
      float32x4_t v32 = vmaxnmq_f32(v31, (float32x4_t)0);
      float32x4_t v33 = vmulq_f32(v32, v32);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])* 0.5))
      {
        float32x4_t v35 = *a2;
        float32x4_t v34 = a2[1];
        float32x4_t v36 = a3[1];
        *a2 = *a3;
        a2[1] = v36;
        *a3 = v35;
        a3[1] = v34;
        float32x4_t v37 = vsubq_f32(a2[1], *a2);
        v37.i32[3] = 0;
        float32x4_t v38 = vmaxnmq_f32(v37, (float32x4_t)0);
        float32x4_t v39 = vmulq_f32(v38, v38);
        float32x4_t v40 = vsubq_f32(a1[1], *a1);
        v40.i32[3] = 0;
        float32x4_t v41 = vmaxnmq_f32(v40, (float32x4_t)0);
        float32x4_t result = vmulq_f32(v41, v41);
        result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
        result.f32[0] = sqrtf(result.f32[0]) * 0.5;
        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0])* 0.5) > result.f32[0])
        {
          float32x4_t v42 = *a1;
          float32x4_t result = a1[1];
          float32x4_t v43 = a2[1];
          *a1 = *a2;
          a1[1] = v43;
          *a2 = v42;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

float32x4_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(a2[1], *a2);
  v3.i32[3] = 0;
  float32x4_t v4 = vmaxnmq_f32(v3, (float32x4_t)0);
  float32x4_t v5 = vmulq_f32(v4, v4);
  float v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])* 0.5;
  float32x4_t v7 = vsubq_f32(result[1], *result);
  v7.i32[3] = 0;
  float32x4_t v8 = vmaxnmq_f32(v7, (float32x4_t)0);
  float32x4_t v9 = vmulq_f32(v8, v8);
  float32x4_t v10 = vsubq_f32(a3[1], *a3);
  v10.i32[3] = 0;
  float32x4_t v11 = vmaxnmq_f32(v10, (float32x4_t)0);
  float32x4_t v12 = vmulq_f32(v11, v11);
  float v13 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5;
  if (v6 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5))
  {
    if (v13 > v6)
    {
      float32x4_t v18 = *a2;
      float32x4_t v17 = a2[1];
      float32x4_t v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = v17;
      float32x4_t v20 = vsubq_f32(a2[1], *a2);
      v20.i32[3] = 0;
      float32x4_t v21 = vmaxnmq_f32(v20, (float32x4_t)0);
      float32x4_t v22 = vmulq_f32(v21, v21);
      float32x4_t v23 = vsubq_f32(result[1], *result);
      v23.i32[3] = 0;
      float32x4_t v24 = vmaxnmq_f32(v23, (float32x4_t)0);
      float32x4_t v25 = vmulq_f32(v24, v24);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0])* 0.5))
      {
        float32x4_t v27 = *result;
        float32x4_t v26 = result[1];
        float32x4_t v28 = a2[1];
        *float32x4_t result = *a2;
        result[1] = v28;
        *a2 = v27;
        a2[1] = v26;
      }
    }
  }
  else
  {
    if (v13 <= v6)
    {
      float32x4_t v30 = *result;
      float32x4_t v29 = result[1];
      float32x4_t v31 = a2[1];
      *float32x4_t result = *a2;
      result[1] = v31;
      *a2 = v30;
      a2[1] = v29;
      float32x4_t v32 = vsubq_f32(a3[1], *a3);
      v32.i32[3] = 0;
      float32x4_t v33 = vmaxnmq_f32(v32, (float32x4_t)0);
      float32x4_t v34 = vmulq_f32(v33, v33);
      float32x4_t v35 = vsubq_f32(a2[1], *a2);
      v35.i32[3] = 0;
      float32x4_t v36 = vmaxnmq_f32(v35, (float32x4_t)0);
      float32x4_t v37 = vmulq_f32(v36, v36);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5) <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0])* 0.5))return result; {
      float32x4_t v15 = *a2;
      }
      float32x4_t v14 = a2[1];
      float32x4_t v38 = a3[1];
      *a2 = *a3;
      a2[1] = v38;
    }
    else
    {
      float32x4_t v15 = *result;
      float32x4_t v14 = result[1];
      float32x4_t v16 = a3[1];
      *float32x4_t result = *a3;
      result[1] = v16;
    }
    *a3 = v15;
    a3[1] = v14;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = a2 - 2;
      float32x4_t v7 = vsubq_f32(a2[-1], a2[-2]);
      v7.i32[3] = 0;
      float32x4_t v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      float32x4_t v9 = vmulq_f32(v8, v8);
      float32x4_t v10 = vsubq_f32(a1[1], *a1);
      v10.i32[3] = 0;
      float32x4_t v11 = vmaxnmq_f32(v10, (float32x4_t)0);
      float32x4_t v12 = vmulq_f32(v11, v11);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5))
      {
        float32x4_t v14 = *a1;
        float32x4_t v13 = a1[1];
        float32x4_t v15 = a2[-1];
        *a1 = *v6;
        a1[1] = v15;
        float32x4_t *v6 = v14;
        a2[-1] = v13;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      float32x4_t v16 = a1 + 4;
      float32x4_t v17 = a1 + 6;
      if (&a1[6] == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    float32x4_t v21 = *v17;
    float32x4_t v20 = v17[1];
    float32x4_t v22 = vsubq_f32(v20, *v17);
    v22.i32[3] = 0;
    float32x4_t v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    float32x4_t v24 = vmulq_f32(v23, v23);
    float32x4_t v25 = vsubq_f32(v16[1], *v16);
    v25.i32[3] = 0;
    float v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0])* 0.5;
    float32x4_t v27 = vmaxnmq_f32(v25, (float32x4_t)0);
    float32x4_t v28 = vmulq_f32(v27, v27);
    if (v26 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0])* 0.5))
    {
      uint64_t v29 = v18;
      while (1)
      {
        float32x4_t v30 = (float32x4_t *)((char *)a1 + v29);
        float32x4_t v31 = *(float32x4_t *)((char *)a1 + v29 + 80);
        v30[6] = *(float32x4_t *)((char *)a1 + v29 + 64);
        v30[7] = v31;
        if (v29 == -64) {
          break;
        }
        float32x4_t v32 = vsubq_f32(v30[3], v30[2]);
        v32.i32[3] = 0;
        float32x4_t v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        float32x4_t v34 = vmulq_f32(v33, v33);
        v29 -= 32;
        if (v26 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5))
        {
          float32x4_t v35 = (float32x4_t *)((char *)a1 + v29 + 96);
          goto LABEL_12;
        }
      }
      float32x4_t v35 = a1;
LABEL_12:
      *float32x4_t v35 = v21;
      v35[1] = v20;
      if (++v19 == 8) {
        return &v17[2] == a2;
      }
    }
    float32x4_t v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2) {
      return 1;
    }
  }
}

float32x4_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_0 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v8 = vsubq_f32(a4[1], *a4);
  v8.i32[3] = 0;
  float32x4_t result = 0uLL;
  float32x4_t v10 = vmaxnmq_f32(v8, (float32x4_t)0);
  float32x4_t v11 = vmulq_f32(v10, v10);
  float32x4_t v12 = vsubq_f32(a3[1], *a3);
  v12.i32[3] = 0;
  float32x4_t v13 = vmaxnmq_f32(v12, (float32x4_t)0);
  float32x4_t v14 = vmulq_f32(v13, v13);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0])* 0.5))
  {
    float32x4_t v16 = *a3;
    float32x4_t v15 = a3[1];
    float32x4_t v17 = a4[1];
    *a3 = *a4;
    a3[1] = v17;
    *a4 = v16;
    a4[1] = v15;
    float32x4_t v18 = vsubq_f32(a3[1], *a3);
    v18.i32[3] = 0;
    float32x4_t v19 = vmaxnmq_f32(v18, (float32x4_t)0);
    float32x4_t v20 = vmulq_f32(v19, v19);
    float32x4_t v21 = vsubq_f32(a2[1], *a2);
    v21.i32[3] = 0;
    float32x4_t v22 = vmaxnmq_f32(v21, (float32x4_t)0);
    float32x4_t result = vmulq_f32(v22, v22);
    result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
    result.f32[0] = sqrtf(result.f32[0]) * 0.5;
    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* 0.5) > result.f32[0])
    {
      float32x4_t v24 = *a2;
      float32x4_t v23 = a2[1];
      float32x4_t v25 = a3[1];
      *a2 = *a3;
      a2[1] = v25;
      *a3 = v24;
      a3[1] = v23;
      float32x4_t v26 = vsubq_f32(a2[1], *a2);
      v26.i32[3] = 0;
      float32x4_t v27 = vmaxnmq_f32(v26, (float32x4_t)0);
      float32x4_t result = vmulq_f32(v27, v27);
      result.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)result, 2), vaddq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 1))).u64[0];
      float32x4_t v28 = vsubq_f32(a1[1], *a1);
      v28.i32[3] = 0;
      result.f32[0] = sqrtf(result.f32[0]) * 0.5;
      float32x4_t v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      float32x4_t v30 = vmulq_f32(v29, v29);
      if (result.f32[0] > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0])* 0.5))
      {
        float32x4_t v31 = *a1;
        float32x4_t result = a1[1];
        float32x4_t v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        *a2 = v31;
        a2[1] = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_1 &,rf::AABB*,false>(unint64_t a1, float32x4_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    float32x4_t v10 = (float32x4_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float32x4_t v93 = a2[-2];
                float32x4_t v94 = a2[-1];
                unint64_t v92 = a2 - 2;
                float32x4_t v95 = vsubq_f32(v94, v93);
                v95.i32[3] = 0;
                float32x4_t v96 = vmaxnmq_f32(v95, (float32x4_t)0);
                float32x4_t v97 = vmulq_f32(v96, v96);
                float32x4_t v98 = vsubq_f32(v10[1], *v10);
                v98.i32[3] = 0;
                float32x4_t v99 = vmaxnmq_f32(v98, (float32x4_t)0);
                float32x4_t v100 = vmulq_f32(v99, v99);
                if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1))).f32[0])* 0.5))
                {
                  float32x4_t v214 = *v10;
                  float32x4_t v219 = v10[1];
                  float32x4_t v101 = v92[1];
                  *float32x4_t v10 = *v92;
                  v10[1] = v101;
                  *unint64_t v92 = v214;
                  v92[1] = v219;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            char v102 = v10 + 2;
            BOOL v104 = v10 == a2 || v102 == a2;
            if (a4)
            {
              if (!v104)
              {
                uint64_t v105 = 0;
                __int16 v106 = v10;
                do
                {
                  float32x4_t v108 = v106[1];
                  float32x4_t v107 = v106[2];
                  float32x4_t v109 = *v106;
                  __int16 v106 = v102;
                  float32x4_t v110 = v102[1];
                  float32x4_t v111 = vsubq_f32(v110, v107);
                  v111.i32[3] = 0;
                  float32x4_t v112 = vmaxnmq_f32(v111, (float32x4_t)0);
                  float32x4_t v113 = vmulq_f32(v112, v112);
                  float32x4_t v114 = vsubq_f32(v108, v109);
                  v114.i32[3] = 0;
                  float v115 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1))).f32[0])* 0.5;
                  float32x4_t v116 = vmaxnmq_f32(v114, (float32x4_t)0);
                  float32x4_t v117 = vmulq_f32(v116, v116);
                  if (v115 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2), vaddq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 1))).f32[0])* 0.5))
                  {
                    uint64_t v118 = v105;
                    while (1)
                    {
                      v119 = (float32x4_t *)((char *)v10 + v118);
                      float32x4_t v120 = *(float32x4_t *)((char *)v10 + v118 + 16);
                      v119[2] = *(float32x4_t *)((char *)v10 + v118);
                      v119[3] = v120;
                      if (!v118) {
                        break;
                      }
                      float32x4_t v121 = vsubq_f32(v119[-1], v119[-2]);
                      v121.i32[3] = 0;
                      float32x4_t v122 = vmaxnmq_f32(v121, (float32x4_t)0);
                      float32x4_t v123 = vmulq_f32(v122, v122);
                      v118 -= 32;
                      if (v115 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))).f32[0])* 0.5))
                      {
                        uint64_t v124 = (float32x4_t *)((char *)v10 + v118 + 32);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v124 = v10;
LABEL_81:
                    *uint64_t v124 = v107;
                    v124[1] = v110;
                  }
                  char v102 = v106 + 2;
                  v105 += 32;
                }
                while (&v106[2] != a2);
              }
            }
            else if (!v104)
            {
              do
              {
                float32x4_t v196 = *(float32x4_t *)(a1 + 16);
                float32x4_t v195 = *(float32x4_t *)(a1 + 32);
                float32x4_t v197 = *(float32x4_t *)a1;
                a1 = (unint64_t)v102;
                float32x4_t v198 = v102[1];
                float32x4_t v199 = vsubq_f32(v198, v195);
                v199.i32[3] = 0;
                float32x4_t v200 = vmaxnmq_f32(v199, (float32x4_t)0);
                float32x4_t v201 = vmulq_f32(v200, v200);
                float32x4_t v202 = vsubq_f32(v196, v197);
                v202.i32[3] = 0;
                float v203 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), vaddq_f32(v201, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1))).f32[0])* 0.5;
                float32x4_t v204 = vmaxnmq_f32(v202, (float32x4_t)0);
                float32x4_t v205 = vmulq_f32(v204, v204);
                if (v203 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v205, 2), vaddq_f32(v205, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v205.f32, 1))).f32[0])* 0.5))
                {
                  float32x4_t v206 = v102;
                  do
                  {
                    float32x4_t v207 = vsubq_f32(v206[-3], v206[-4]);
                    v207.i32[3] = 0;
                    float32x4_t v208 = vmaxnmq_f32(v207, (float32x4_t)0);
                    float32x4_t v209 = vmulq_f32(v208, v208);
                    float32x4_t v210 = v206[-1];
                    *float32x4_t v206 = v206[-2];
                    v206[1] = v210;
                    v206 -= 2;
                  }
                  while (v203 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v209, 2), vaddq_f32(v209, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v209.f32, 1))).f32[0])* 0.5));
                  *float32x4_t v206 = v195;
                  v206[1] = v198;
                }
                v102 += 2;
              }
              while ((float32x4_t *)(a1 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v125 = (v12 - 2) >> 1;
              int64_t v126 = v125;
              do
              {
                int64_t v127 = v126;
                if (v125 >= v126)
                {
                  uint64_t v128 = (2 * v126) | 1;
                  unint64_t v129 = &v10[2 * v128];
                  if (2 * v127 + 2 < (uint64_t)v12)
                  {
                    float32x4_t v130 = vsubq_f32(v129[1], *v129);
                    v130.i32[3] = 0;
                    float32x4_t v131 = vmaxnmq_f32(v130, (float32x4_t)0);
                    float32x4_t v132 = vmulq_f32(v131, v131);
                    float32x4_t v133 = vsubq_f32(v129[3], v129[2]);
                    v133.i32[3] = 0;
                    float32x4_t v134 = vmaxnmq_f32(v133, (float32x4_t)0);
                    float32x4_t v135 = vmulq_f32(v134, v134);
                    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0])* 0.5))
                    {
                      v129 += 2;
                      uint64_t v128 = 2 * v127 + 2;
                    }
                  }
                  float32x4_t v136 = vsubq_f32(v129[1], *v129);
                  v136.i32[3] = 0;
                  float32x4_t v137 = vmaxnmq_f32(v136, (float32x4_t)0);
                  float32x4_t v138 = vmulq_f32(v137, v137);
                  unint64_t v139 = &v10[2 * v127];
                  float v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0]);
                  float32x4_t v141 = v139[1];
                  float32x4_t v142 = *v139;
                  float32x4_t v143 = vsubq_f32(v141, *v139);
                  v143.i32[3] = 0;
                  float v144 = v140 * 0.5;
                  float32x4_t v145 = vmaxnmq_f32(v143, (float32x4_t)0);
                  float32x4_t v146 = vmulq_f32(v145, v145);
                  float v147 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0])* 0.5;
                  if (v144 <= v147)
                  {
                    do
                    {
                      int8x8_t v148 = v129;
                      float32x4_t v149 = v129[1];
                      *unint64_t v139 = *v129;
                      v139[1] = v149;
                      if (v125 < v128) {
                        break;
                      }
                      uint64_t v150 = 2 * v128;
                      uint64_t v128 = (2 * v128) | 1;
                      unint64_t v129 = &v10[2 * v128];
                      uint64_t v151 = v150 + 2;
                      if (v151 < (uint64_t)v12)
                      {
                        float32x4_t v152 = vsubq_f32(v129[1], *v129);
                        v152.i32[3] = 0;
                        float32x4_t v153 = vmaxnmq_f32(v152, (float32x4_t)0);
                        float32x4_t v154 = vmulq_f32(v153, v153);
                        float32x4_t v155 = vsubq_f32(v129[3], v129[2]);
                        v155.i32[3] = 0;
                        float32x4_t v156 = vmaxnmq_f32(v155, (float32x4_t)0);
                        float32x4_t v157 = vmulq_f32(v156, v156);
                        if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), vaddq_f32(v157, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1))).f32[0])* 0.5))
                        {
                          v129 += 2;
                          uint64_t v128 = v151;
                        }
                      }
                      float32x4_t v158 = vsubq_f32(v129[1], *v129);
                      v158.i32[3] = 0;
                      float32x4_t v159 = vmaxnmq_f32(v158, (float32x4_t)0);
                      float32x4_t v160 = vmulq_f32(v159, v159);
                      unint64_t v139 = v148;
                    }
                    while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 2), vaddq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v160.f32, 1))).f32[0])* 0.5) <= v147);
                    *int8x8_t v148 = v142;
                    v148[1] = v141;
                  }
                }
                int64_t v126 = v127 - 1;
              }
              while (v127);
              uint64_t v161 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v162 = 0;
                float32x4_t v215 = *v10;
                float32x4_t v220 = v10[1];
                v163 = v10;
                do
                {
                  v164 = v163;
                  v163 += 2 * v162 + 2;
                  uint64_t v165 = 2 * v162;
                  uint64_t v162 = (2 * v162) | 1;
                  uint64_t v166 = v165 + 2;
                  if (v166 < v161)
                  {
                    float32x4_t v167 = vsubq_f32(v163[1], *v163);
                    v167.i32[3] = 0;
                    float32x4_t v168 = vmaxnmq_f32(v167, (float32x4_t)0);
                    float32x4_t v169 = vmulq_f32(v168, v168);
                    float32x4_t v170 = vsubq_f32(v163[3], v163[2]);
                    v170.i32[3] = 0;
                    float32x4_t v171 = vmaxnmq_f32(v170, (float32x4_t)0);
                    float32x4_t v172 = vmulq_f32(v171, v171);
                    if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v169, 2), vaddq_f32(v169, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v172, 2), vaddq_f32(v172, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v172.f32, 1))).f32[0])* 0.5))
                    {
                      v163 += 2;
                      uint64_t v162 = v166;
                    }
                  }
                  float32x4_t v173 = v163[1];
                  float32x4_t *v164 = *v163;
                  v164[1] = v173;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                a2 -= 2;
                if (v163 == a2)
                {
                  float32x4_t *v163 = v215;
                  v163[1] = v220;
                }
                else
                {
                  float32x4_t v174 = a2[1];
                  float32x4_t *v163 = *a2;
                  v163[1] = v174;
                  *a2 = v215;
                  a2[1] = v220;
                  uint64_t v175 = (char *)v163 - (char *)v10 + 32;
                  if (v175 >= 33)
                  {
                    unint64_t v176 = (((unint64_t)v175 >> 5) - 2) >> 1;
                    v177 = &v10[2 * v176];
                    float32x4_t v178 = vsubq_f32(v177[1], *v177);
                    v178.i32[3] = 0;
                    float32x4_t v179 = vmaxnmq_f32(v178, (float32x4_t)0);
                    float32x4_t v180 = vmulq_f32(v179, v179);
                    float v181 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v180, 2), vaddq_f32(v180, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 1))).f32[0]);
                    float32x4_t v183 = *v163;
                    float32x4_t v182 = v163[1];
                    float32x4_t v184 = vsubq_f32(v182, *v163);
                    v184.i32[3] = 0;
                    float v185 = v181 * 0.5;
                    float32x4_t v186 = vmaxnmq_f32(v184, (float32x4_t)0);
                    float32x4_t v187 = vmulq_f32(v186, v186);
                    float v188 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 2), vaddq_f32(v187, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 1))).f32[0])* 0.5;
                    if (v185 > v188)
                    {
                      do
                      {
                        float32x4_t v189 = v177;
                        float32x4_t v190 = v177[1];
                        float32x4_t *v163 = *v177;
                        v163[1] = v190;
                        if (!v176) {
                          break;
                        }
                        unint64_t v176 = (v176 - 1) >> 1;
                        v177 = &v10[2 * v176];
                        float32x4_t v191 = vsubq_f32(v177[1], *v177);
                        v191.i32[3] = 0;
                        float32x4_t v192 = vmaxnmq_f32(v191, (float32x4_t)0);
                        float32x4_t v193 = vmulq_f32(v192, v192);
                        v163 = v189;
                      }
                      while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v193, 2), vaddq_f32(v193, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v193.f32, 1))).f32[0])* 0.5) > v188);
                      *float32x4_t v189 = v183;
                      v189[1] = v182;
                    }
                  }
                }
              }
              while (v161-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          float32x4_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            float32x4_t v211 = *(float32x4_t *)a1;
            float32x4_t v216 = *(float32x4_t *)(a1 + 16);
            float32x4_t v15 = v14[1];
            *(float32x4_t *)a1 = *v14;
            *(float32x4_t *)(a1 + 16) = v15;
            *float32x4_t v14 = v211;
            v14[1] = v216;
          }
          else
          {
          }
          --a3;
          float32x4_t v16 = *(float32x4_t *)a1;
          if (a4) {
            break;
          }
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(a1 - 16), *(float32x4_t *)(a1 - 32));
          v22.i32[3] = 0;
          float32x4_t v23 = vmaxnmq_f32(v22, (float32x4_t)0);
          float32x4_t v24 = vmulq_f32(v23, v23);
          float v25 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
          float32x4_t v17 = *(float32x4_t *)(a1 + 16);
          float32x4_t v26 = vsubq_f32(v17, v16);
          v26.i32[3] = 0;
          float v27 = v25 * 0.5;
          float32x4_t v28 = vmaxnmq_f32(v26, (float32x4_t)0);
          float32x4_t v29 = vmulq_f32(v28, v28);
          float v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0])* 0.5;
          if (v27 > v21) {
            goto LABEL_12;
          }
          float32x4_t v62 = vsubq_f32(a2[-1], a2[-2]);
          v62.i32[3] = 0;
          float32x4_t v63 = vmaxnmq_f32(v62, (float32x4_t)0);
          float32x4_t v64 = vmulq_f32(v63, v63);
          if (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0])* 0.5))
          {
            uint8x8_t v70 = (float32x4_t *)(a1 + 32);
            do
            {
              float32x4_t v10 = v70;
              if (v70 >= a2) {
                break;
              }
              float32x4_t v71 = vsubq_f32(v70[1], *v70);
              v71.i32[3] = 0;
              float32x4_t v72 = vmaxnmq_f32(v71, (float32x4_t)0);
              float32x4_t v73 = vmulq_f32(v72, v72);
              v70 += 2;
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).f32[0])* 0.5));
          }
          else
          {
            float32x4_t v10 = (float32x4_t *)a1;
            do
            {
              float32x4_t v65 = v10[2];
              float32x4_t v66 = v10[3];
              v10 += 2;
              float32x4_t v67 = vsubq_f32(v66, v65);
              v67.i32[3] = 0;
              float32x4_t v68 = vmaxnmq_f32(v67, (float32x4_t)0);
              float32x4_t v69 = vmulq_f32(v68, v68);
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).f32[0])* 0.5));
          }
          long long v74 = a2;
          if (v10 < a2)
          {
            long long v74 = a2;
            do
            {
              float32x4_t v75 = v74[-2];
              float32x4_t v76 = v74[-1];
              v74 -= 2;
              float32x4_t v77 = vsubq_f32(v76, v75);
              v77.i32[3] = 0;
              float32x4_t v78 = vmaxnmq_f32(v77, (float32x4_t)0);
              float32x4_t v79 = vmulq_f32(v78, v78);
            }
            while (v21 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0])* 0.5));
          }
          while (v10 < v74)
          {
            float32x4_t v213 = *v10;
            float32x4_t v218 = v10[1];
            float32x4_t v80 = v74[1];
            *float32x4_t v10 = *v74;
            v10[1] = v80;
            *long long v74 = v213;
            v74[1] = v218;
            do
            {
              float32x4_t v81 = v10[2];
              float32x4_t v82 = v10[3];
              v10 += 2;
              float32x4_t v83 = vsubq_f32(v82, v81);
              v83.i32[3] = 0;
              float32x4_t v84 = vmaxnmq_f32(v83, (float32x4_t)0);
              float32x4_t v85 = vmulq_f32(v84, v84);
            }
            while (v21 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).f32[0])* 0.5));
            do
            {
              float32x4_t v86 = v74[-2];
              float32x4_t v87 = v74[-1];
              v74 -= 2;
              float32x4_t v88 = vsubq_f32(v87, v86);
              v88.i32[3] = 0;
              float32x4_t v89 = vmaxnmq_f32(v88, (float32x4_t)0);
              float32x4_t v90 = vmulq_f32(v89, v89);
            }
            while (v21 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1))).f32[0])* 0.5));
          }
          BOOL v4 = (unint64_t)&v10[-2] >= a1;
          BOOL v5 = &v10[-2] == (float32x4_t *)a1;
          if (&v10[-2] != (float32x4_t *)a1)
          {
            float32x4_t v91 = v10[-1];
            *(float32x4_t *)a1 = v10[-2];
            *(float32x4_t *)(a1 + 16) = v91;
          }
          a4 = 0;
          v10[-2] = v16;
          v10[-1] = v17;
        }
        float32x4_t v17 = *(float32x4_t *)(a1 + 16);
        float32x4_t v18 = vsubq_f32(v17, v16);
        v18.i32[3] = 0;
        float32x4_t v19 = vmaxnmq_f32(v18, (float32x4_t)0);
        float32x4_t v20 = vmulq_f32(v19, v19);
        float v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* 0.5;
LABEL_12:
        uint64_t v30 = 0;
        do
        {
          float32x4_t v31 = vsubq_f32(*(float32x4_t *)(a1 + v30 + 48), *(float32x4_t *)(a1 + v30 + 32));
          v31.i32[3] = 0;
          float32x4_t v32 = vmaxnmq_f32(v31, (float32x4_t)0);
          float32x4_t v33 = vmulq_f32(v32, v32);
          v30 += 32;
        }
        while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])* 0.5) > v21);
        unint64_t v34 = a1 + v30;
        float32x4_t v35 = a2;
        if (v30 == 32)
        {
          float32x4_t v35 = a2;
          do
          {
            if (v34 >= (unint64_t)v35) {
              break;
            }
            float32x4_t v41 = v35[-2];
            float32x4_t v42 = v35[-1];
            v35 -= 2;
            float32x4_t v43 = vsubq_f32(v42, v41);
            v43.i32[3] = 0;
            float32x4_t v44 = vmaxnmq_f32(v43, (float32x4_t)0);
            float32x4_t v45 = vmulq_f32(v44, v44);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0])* 0.5) <= v21);
        }
        else
        {
          do
          {
            float32x4_t v36 = v35[-2];
            float32x4_t v37 = v35[-1];
            v35 -= 2;
            float32x4_t v38 = vsubq_f32(v37, v36);
            v38.i32[3] = 0;
            float32x4_t v39 = vmaxnmq_f32(v38, (float32x4_t)0);
            float32x4_t v40 = vmulq_f32(v39, v39);
          }
          while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0])* 0.5) <= v21);
        }
        if (v34 >= (unint64_t)v35)
        {
          float32x4_t v59 = (float32x4_t *)(v34 - 32);
        }
        else
        {
          float32x4_t v46 = (float32x4_t *)(a1 + v30);
          unsigned __int8 v47 = v35;
          do
          {
            float32x4_t v212 = *v46;
            float32x4_t v217 = v46[1];
            float32x4_t v48 = v47[1];
            *float32x4_t v46 = *v47;
            v46[1] = v48;
            *unsigned __int8 v47 = v212;
            v47[1] = v217;
            do
            {
              float32x4_t v49 = v46[2];
              float32x4_t v50 = v46[3];
              v46 += 2;
              float32x4_t v51 = vsubq_f32(v50, v49);
              v51.i32[3] = 0;
              float32x4_t v52 = vmaxnmq_f32(v51, (float32x4_t)0);
              float32x4_t v53 = vmulq_f32(v52, v52);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0])* 0.5) > v21);
            do
            {
              float32x4_t v54 = v47[-2];
              float32x4_t v55 = v47[-1];
              v47 -= 2;
              float32x4_t v56 = vsubq_f32(v55, v54);
              v56.i32[3] = 0;
              float32x4_t v57 = vmaxnmq_f32(v56, (float32x4_t)0);
              float32x4_t v58 = vmulq_f32(v57, v57);
            }
            while ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])* 0.5) <= v21);
          }
          while (v46 < v47);
          float32x4_t v59 = v46 - 2;
        }
        if (v59 != (float32x4_t *)a1)
        {
          float32x4_t v60 = v59[1];
          *(float32x4_t *)a1 = *v59;
          *(float32x4_t *)(a1 + 16) = v60;
        }
        *float32x4_t v59 = v16;
        v59[1] = v17;
        if (v34 >= (unint64_t)v35) {
          break;
        }
LABEL_33:
        a4 = 0;
        float32x4_t v10 = v59 + 2;
      }
      float32x4_t v10 = v59 + 2;
      {
        break;
      }
      if (!v61) {
        goto LABEL_33;
      }
    }
    a2 = v59;
    if (!v61) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::computeSceneMeshAABBClusterIslands(std::vector<rf::AABB> const&,int,float,float)::$_1 &,rf::AABB*>(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = a2 - 2;
      float32x4_t v7 = vsubq_f32(a2[-1], a2[-2]);
      v7.i32[3] = 0;
      float32x4_t v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      float32x4_t v9 = vmulq_f32(v8, v8);
      float32x4_t v10 = vsubq_f32(a1[1], *a1);
      v10.i32[3] = 0;
      float32x4_t v11 = vmaxnmq_f32(v10, (float32x4_t)0);
      float32x4_t v12 = vmulq_f32(v11, v11);
      if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])* 0.5) > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* 0.5))
      {
        float32x4_t v14 = *a1;
        float32x4_t v13 = a1[1];
        float32x4_t v15 = a2[-1];
        *a1 = *v6;
        a1[1] = v15;
        float32x4_t *v6 = v14;
        a2[-1] = v13;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      float32x4_t v16 = a1 + 4;
      float32x4_t v17 = a1 + 6;
      if (&a1[6] == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    float32x4_t v21 = *v17;
    float32x4_t v20 = v17[1];
    float32x4_t v22 = vsubq_f32(v20, *v17);
    v22.i32[3] = 0;
    float32x4_t v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    float32x4_t v24 = vmulq_f32(v23, v23);
    float32x4_t v25 = vsubq_f32(v16[1], *v16);
    v25.i32[3] = 0;
    float v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0])* 0.5;
    float32x4_t v27 = vmaxnmq_f32(v25, (float32x4_t)0);
    float32x4_t v28 = vmulq_f32(v27, v27);
    if (v26 > (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0])* 0.5))
    {
      uint64_t v29 = v18;
      while (1)
      {
        uint64_t v30 = (float32x4_t *)((char *)a1 + v29);
        float32x4_t v31 = *(float32x4_t *)((char *)a1 + v29 + 80);
        v30[6] = *(float32x4_t *)((char *)a1 + v29 + 64);
        v30[7] = v31;
        if (v29 == -64) {
          break;
        }
        float32x4_t v32 = vsubq_f32(v30[3], v30[2]);
        v32.i32[3] = 0;
        float32x4_t v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        float32x4_t v34 = vmulq_f32(v33, v33);
        v29 -= 32;
        if (v26 <= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0])* 0.5))
        {
          float32x4_t v35 = (float32x4_t *)((char *)a1 + v29 + 96);
          goto LABEL_12;
        }
      }
      float32x4_t v35 = a1;
LABEL_12:
      *float32x4_t v35 = v21;
      v35[1] = v20;
      if (++v19 == 8) {
        return &v17[2] == a2;
      }
    }
    float32x4_t v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2) {
      return 1;
    }
  }
}

uint64_t std::construct_at[abi:ne180100]<rf::data_flow::EnvironmentProbe,rf::data_flow::EnvironmentProbe const&,rf::data_flow::EnvironmentProbe*>(uint64_t a1, id *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    *(void *)(a1 + 112) = a2[14];
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(void *)(a1 + 128) = a2[16];
  return a1;
}

uint64_t std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 144);
      long long v9 = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v7 - 128) = *(_OWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 112) = v9;
      *(_OWORD *)(v7 - 144) = v8;
      long long v10 = *(_OWORD *)(a3 - 96);
      long long v11 = *(_OWORD *)(a3 - 80);
      long long v12 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 48) = v12;
      *(_OWORD *)(v7 - 96) = v10;
      *(_OWORD *)(v7 - 80) = v11;
      *(unsigned char *)(v7 - 32) = 0;
      *(unsigned char *)(v7 - 24) = 0;
      if (*(unsigned char *)(a3 - 24))
      {
        uint64_t v13 = *(void *)(a3 - 32);
        *(void *)(a3 - 32) = 0;
        *(void *)(v7 - 32) = v13;
        *(unsigned char *)(v7 - 24) = 1;
      }
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      uint64_t v7 = *((void *)&v19 + 1) - 144;
      *((void *)&v19 + 1) -= 144;
      a3 -= 144;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,std::reverse_iterator<rf::data_flow::EnvironmentProbe*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 + 120)) {

    }
    v1 += 144;
  }
}

uint64_t std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<rf::data_flow::EnvironmentProbe>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 144;
    if (*(unsigned char *)(v2 - 24))
    {

      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
}

void *RESharedPtr<REAsset>::~RESharedPtr(void *a1)
{
  if (*a1) {
    RERelease();
  }
  return a1;
}

void std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<objc_object  {objcproto10MTLTexture}*,false> const&>(id *location, void *a2, unsigned __int8 a3)
{
  if (*((unsigned __int8 *)location + 8) == a3)
  {
    if (*((unsigned char *)location + 8))
    {
      objc_storeStrong(location, a2);
    }
  }
  else if (*((unsigned char *)location + 8))
  {

    *((unsigned char *)location + 8) = 0;
  }
  else
  {
    id *location = a2;
    *((unsigned char *)location + 8) = 1;
  }
}

uint64_t std::__split_buffer<RESharedPtr<REEntity>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    RESharedPtr<REEntity>::~RESharedPtr((void *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *RESharedPtr<REEntity>::~RESharedPtr(void *a1)
{
  if (*a1) {
    RERelease();
  }
  return a1;
}

uint64_t std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      RESharedPtr<REEntity>::~RESharedPtr(v2 + 6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(int a1, id *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (id *)*v2;
      if (*((unsigned char *)v2 + 168)) {

      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      float32x4_t v25 = *(void **)a2;
    }
    else {
      float32x4_t v25 = (void *)a2;
    }
    unint64_t v7 = ((*v25 >> 2) + (*v25 << 6) + v25[1] + 2654435769) ^ *v25;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  long long v12 = operator new(0x30uLL);
  *long long v12 = 0;
  v12[1] = v7;
  long long v14 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  float32x4_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *long long v12 = *v22;
LABEL_39:
    *float32x4_t v22 = v12;
    goto LABEL_40;
  }
  *long long v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    float32x4_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_235A8E410(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,rf::data_flow::EnvironmentProbe>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      float32x4_t v31 = *(void **)a2;
    }
    else {
      float32x4_t v31 = (void *)a2;
    }
    unint64_t v7 = ((*v31 >> 2) + (*v31 << 6) + v31[1] + 2654435769) ^ *v31;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    long long v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  float v15 = operator new(0xC0uLL);
  float v16 = v15;
  *float v15 = 0;
  v15[1] = v7;
  long long v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v17;
  long long v18 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v15 + 7) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v15 + 8) = v18;
  *((_OWORD *)v15 + 9) = *(_OWORD *)(a3 + 128);
  long long v19 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v15 + 4) = v19;
  long long v20 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v15 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v15 + 6) = v20;
  *((unsigned char *)v15 + 160) = 0;
  *((unsigned char *)v15 + 168) = 0;
  if (*(unsigned char *)(a3 + 152))
  {
    uint64_t v21 = *(void *)(a3 + 144);
    *(void *)(a3 + 144) = 0;
    v15[20] = v21;
    *((unsigned char *)v15 + 168) = 1;
  }
  v15[22] = *(void *)(a3 + 160);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v8 || (float)(v23 * (float)v8) < v22)
  {
    BOOL v24 = 1;
    if (v8 >= 3) {
      BOOL v24 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v8);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v27);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (v29)
  {
    *float v16 = *v29;
LABEL_41:
    *uint64_t v29 = v16;
    goto LABEL_42;
  }
  *float v16 = *v14;
  *long long v14 = v16;
  *(void *)(v28 + 8 * v3) = v14;
  if (*v16)
  {
    unint64_t v30 = *(void *)(*v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v30 >= v8) {
        v30 %= v8;
      }
    }
    else
    {
      v30 &= v8 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_235A8E6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REEntity>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      RESharedPtr<REEntity>::~RESharedPtr(v1 + 6);
    }
    operator delete(v1);
  }
}

void *std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    long long v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235A8E9B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    long long v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235A8EC20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t isInputMesh(ARAnchor *a1)
{
  uint64_t v1 = a1;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_235A8EC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
}

void *std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E8F3C48;
  return result;
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F3C48;
}

void std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  v36[0] = v3;
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(void *)(a2 + 816) = 0;
  *(void *)(a2 + 832) = 0;
  *(void *)(a2 + 824) = 0;
  *(unsigned char *)(a2 + 976) = 0;
  *(unsigned char *)(a2 + 992) = 0;
  *(unsigned char *)(a2 + 996) = 0;
  *(unsigned char *)(a2 + 1000) = 0;
  *(unsigned char *)(a2 + 1004) = 0;
  *(unsigned char *)(a2 + 1008) = 0;
  *(unsigned char *)(a2 + 1012) = 0;
  *(unsigned char *)(a2 + 1016) = 0;
  *(unsigned char *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(unsigned char *)(a2 + 1026) = 0;
  *(unsigned char *)(a2 + 1028) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  *(unsigned char *)(a2 + 1040) = 0;
  *(unsigned char *)(a2 + 1064) = 0;
  *(unsigned char *)(a2 + 1072) = 0;
  *(unsigned char *)(a2 + 1088) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(unsigned char *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  uint64_t v29 = a2;
  v44[2] = 0;
  uint64_t v45 = [v3 count];
  float32x4_t v46 = v36;
  char v47 = 1;
  float32x4_t v48 = isInputMesh;
  LOBYTE(v49) = 0;
  char v51 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v44);
  uint64_t v4 = v49;
  uint64_t v5 = v50;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v44);
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  *((void *)&v52 + 1) = v5;
  float32x4_t v53 = v44;
  uint64_t v31 = v45;
  if (v45 != v4)
  {
    uint64_t v6 = v4;
    unint64_t v7 = 0;
    uint64_t v8 = v6;
    do
    {
      *(void *)&long long v52 = v6 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v53, (uint64_t)&v52);
      ++v7;
      uint64_t v6 = v52;
    }
    while (v31 != (void)v52);
    v36[1] = &v34;
    char v37 = 0;
    std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](&v34, v7);
    uint64_t v32 = 0;
    uint64_t v38 = v8;
    float32x4_t v39 = v5;
    float32x4_t v40 = v44;
    uint64_t v30 = *((void *)&v34 + 1);
    do
    {
      id v33 = [**v39 objectAtIndexedSubscript:(int)v8];
      uint8x8_t v9 = [v33 identifier];
      rf::data_flow::RFUUID::copy(v9, (uint64_t)buf);
      uint64_t v10 = v75;
      if (!v75)
      {
        size_t v27 = buf;
        if (BYTE2(v73)) {
          size_t v27 = *(void **)buf;
        }
        uint64_t v10 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
        uint64_t v75 = v10;
      }
      long long v11 = [v33 geometry];
      long long v12 = [v11 vertices];
      [v12 count];
      unint64_t v13 = [v33 geometry];
      long long v14 = [v13 faces];
      [v14 count];
      float v15 = [v33 geometry];
      float v16 = [v15 classification];
      [v16 count];
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v43, 7525, v10);

      if (re::internal::enableSignposts(0, 0))
      {
        long long v17 = [v33 identifier];
        rf::data_flow::RFUUID::copy(v17, (uint64_t)buf);
        if (!v75)
        {
          uint64_t v28 = buf;
          if (BYTE2(v73)) {
            uint64_t v28 = *(void **)buf;
          }
          uint64_t v75 = ((*v28 >> 2) + (*v28 << 6) + v28[1] + 2654435769) ^ *v28;
        }
        long long v18 = [v33 geometry];
        long long v19 = [v18 vertices];
        [v19 count];
        long long v20 = [v33 geometry];
        uint64_t v21 = [v20 faces];
        [v21 count];
        float v22 = [v33 geometry];
        float v23 = [v22 classification];
        [v23 count];
        kdebug_trace();
      }
      rf::helpers::createInputMeshFromARMeshAnchor(v33, 0, (uint64_t)&v52);
      unint64_t v25 = rf::realityFusionLogObject(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v52, __p);
        unint64_t v26 = __p;
        if (v42 < 0) {
          unint64_t v26 = (void **)__p[0];
        }
        if (!v56 || !v59 || !v62) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v72 = 2048;
        uint64_t v73 = v55;
        __int16 v74 = 2048;
        uint64_t v75 = v58;
        __int16 v76 = 2048;
        uint64_t v77 = v61;
        _os_log_impl(&dword_235A7C000, v25, OS_LOG_TYPE_DEFAULT, "RFARMeshServiceDelegate: Adding mesh %s %ld %ld %ld", buf, 0x2Au);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }

      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v43);
      std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v30 + v32, &v52);
      if (v70) {

      }
      if (v68) {
      if (v66)
      }

      if (v64) {
      if (v62)
      }

      if (v59) {
      if (v56)
      }

      uint64_t v38 = v8 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v40, (uint64_t)&v38);
      uint64_t v8 = v38;
      v32 += 336;
    }
    while (v31 != v38);
    *((void *)&v34 + 1) = v30 + v32;
  }
  std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate((void **)v29);
  *(_OWORD *)uint64_t v29 = v34;
  *(void *)(v29 + 16) = v35;
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  *(void *)&long long v52 = &v34;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
}

void sub_235A8F334(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, ...)
{
  va_start(va, a16);
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  rf::data_flow::provider::InputData::~InputData(a3);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<meshServiceAddAnchorCallback(void)::$_0,std::allocator<meshServiceAddAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceAddAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    uint64_t v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235A8F654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[336 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(336 * a2);
}

__n128 std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    uint64_t v7 = *((void *)a2 + 14);
    *((void *)a2 + 14) = 0;
    *(void *)(a1 + 112) = v7;
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 120) = result;
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    uint64_t v8 = *((void *)a2 + 18);
    *((void *)a2 + 18) = 0;
    *(void *)(a1 + 144) = v8;
    __n128 result = *(__n128 *)((char *)a2 + 152);
    *(__n128 *)(a1 + 152) = result;
    *(unsigned char *)(a1 + 168) = 1;
  }
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  if (*((unsigned char *)a2 + 200))
  {
    uint64_t v9 = *((void *)a2 + 22);
    *((void *)a2 + 22) = 0;
    *(void *)(a1 + 176) = v9;
    __n128 result = *(__n128 *)((char *)a2 + 184);
    *(__n128 *)(a1 + 184) = result;
    *(unsigned char *)(a1 + 200) = 1;
  }
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  if (*((unsigned char *)a2 + 232))
  {
    uint64_t v10 = *((void *)a2 + 26);
    *((void *)a2 + 26) = 0;
    *(void *)(a1 + 208) = v10;
    __n128 result = *(__n128 *)((char *)a2 + 216);
    *(__n128 *)(a1 + 216) = result;
    *(unsigned char *)(a1 + 232) = 1;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    uint64_t v11 = *((void *)a2 + 30);
    *((void *)a2 + 30) = 0;
    *(void *)(a1 + 240) = v11;
    __n128 result = *(__n128 *)((char *)a2 + 248);
    *(__n128 *)(a1 + 248) = result;
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if (*((unsigned char *)a2 + 296))
  {
    uint64_t v12 = *((void *)a2 + 34);
    *((void *)a2 + 34) = 0;
    *(void *)(a1 + 272) = v12;
    __n128 result = *(__n128 *)((char *)a2 + 280);
    *(__n128 *)(a1 + 280) = result;
    *(unsigned char *)(a1 + 296) = 1;
  }
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    uint64_t v13 = *((void *)a2 + 38);
    *((void *)a2 + 38) = 0;
    *(void *)(a1 + 304) = v13;
    __n128 result = *(__n128 *)((char *)a2 + 312);
    *(__n128 *)(a1 + 312) = result;
    *(unsigned char *)(a1 + 328) = 1;
  }
  return result;
}

void rf::data_flow::RFUUID::copy(rf::data_flow::RFUUID *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  long long v5 = 0uLL;
  [(rf::data_flow::RFUUID *)v4 getUUIDBytes:&v5];
  *(_OWORD *)a2 = v5;
}

void sub_235A8F8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

re::internal::AriadneSignpostScopeGuard *re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard(re::internal::AriadneSignpostScopeGuard *this, int a2, uint64_t a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  return this;
}

void re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard(re::internal::AriadneSignpostScopeGuard *this)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
}

void std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate(void **a1)
{
  uint64_t v1 = (id *)*a1;
  if (*a1)
  {
    long long v3 = (id *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        rf::data_flow::provider::InputMesh::~InputMesh(v3 - 42);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
}

void *std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E8F3CD8;
  return result;
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F3CD8;
}

void std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  v34[0] = v3;
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(void *)(a2 + 816) = 0;
  *(void *)(a2 + 832) = 0;
  *(void *)(a2 + 824) = 0;
  *(unsigned char *)(a2 + 976) = 0;
  *(unsigned char *)(a2 + 992) = 0;
  *(unsigned char *)(a2 + 996) = 0;
  *(unsigned char *)(a2 + 1000) = 0;
  *(unsigned char *)(a2 + 1004) = 0;
  *(unsigned char *)(a2 + 1008) = 0;
  *(unsigned char *)(a2 + 1012) = 0;
  *(unsigned char *)(a2 + 1016) = 0;
  *(unsigned char *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(unsigned char *)(a2 + 1026) = 0;
  *(unsigned char *)(a2 + 1028) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  *(unsigned char *)(a2 + 1040) = 0;
  *(unsigned char *)(a2 + 1064) = 0;
  *(unsigned char *)(a2 + 1072) = 0;
  *(unsigned char *)(a2 + 1088) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(unsigned char *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  uint64_t v25 = a2;
  v40[2] = 0;
  uint64_t v41 = [v3 count];
  char v42 = v34;
  char v43 = 1;
  float32x4_t v44 = isInputMesh;
  LOBYTE(v45) = 0;
  char v47 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v40);
  uint64_t v4 = v45;
  long long v5 = v46;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v40);
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  *((void *)&v48 + 1) = v5;
  uint64_t v49 = v40;
  uint64_t v30 = v41;
  if (v41 != v4)
  {
    uint64_t v6 = v4;
    unint64_t v7 = 0;
    uint64_t v8 = v6;
    do
    {
      *(void *)&long long v48 = v6 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v49, (uint64_t)&v48);
      ++v7;
      uint64_t v6 = v48;
    }
    while (v30 != (void)v48);
    v34[1] = &v32;
    char v35 = 0;
    std::vector<rf::data_flow::provider::InputMesh>::__vallocate[abi:ne180100](&v32, v7);
    uint64_t v31 = 0;
    uint64_t v36 = v8;
    char v37 = v5;
    uint64_t v38 = v40;
    uint64_t v26 = *((void *)&v32 + 1);
    do
    {
      uint64_t v27 = v8;
      id v9 = [**v37 objectAtIndexedSubscript:(int)v8];
      uint64_t v28 = [v9 identifier];
      rf::data_flow::RFUUID::copy(v28, (uint64_t)v64);
      uint64_t v10 = v66;
      if (!v66)
      {
        float v23 = v64;
        if (v65) {
          float v23 = (void *)v64[0];
        }
        uint64_t v10 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
        uint64_t v66 = v10;
      }
      uint64_t v11 = [v9 geometry];
      uint64_t v12 = [v11 vertices];
      [v12 count];
      uint64_t v13 = [v9 geometry];
      long long v14 = [v13 faces];
      [v14 count];
      float v15 = [v9 geometry];
      float v16 = [v15 classification];
      [v16 count];
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 7525, v10);

      if (re::internal::enableSignposts(0, 0))
      {
        uint64_t v29 = [v9 identifier];
        rf::data_flow::RFUUID::copy(v29, (uint64_t)v64);
        if (!v66)
        {
          BOOL v24 = v64;
          if (v65) {
            BOOL v24 = (void *)v64[0];
          }
          uint64_t v66 = ((*v24 >> 2) + (*v24 << 6) + v24[1] + 2654435769) ^ *v24;
        }
        long long v17 = [v9 geometry];
        long long v18 = [v17 vertices];
        [v18 count];
        long long v19 = [v9 geometry];
        long long v20 = [v19 faces];
        [v20 count];
        uint64_t v21 = [v9 geometry];
        float v22 = [v21 classification];
        [v22 count];
        kdebug_trace();
      }
      rf::helpers::createInputMeshFromARMeshAnchor(v9, 0, (uint64_t)&v48);
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);

      std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v26 + v31, &v48);
      if (v63) {

      }
      if (v61) {
      if (v59)
      }

      if (v57) {
      if (v55)
      }

      if (v53) {
      if (v51)
      }

      uint64_t v36 = v27 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v38, (uint64_t)&v36);
      uint64_t v8 = v36;
      v31 += 336;
    }
    while (v30 != v36);
    *((void *)&v32 + 1) = v26 + v31;
  }
  std::vector<rf::data_flow::provider::InputMesh>::__vdeallocate((void **)(v25 + 24));
  *(_OWORD *)(v25 + 24) = v32;
  *(void *)(v25 + 40) = v33;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  *(void *)&long long v48 = &v32;
  std::vector<rf::data_flow::provider::InputMesh>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_235A9002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<meshServiceUpdateAnchorCallback(void)::$_0,std::allocator<meshServiceUpdateAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceUpdateAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    uint64_t v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235A902B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__func()
{
}

void *std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E8F3D58;
  return result;
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F3D58;
}

void std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  id v34 = v3;
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 464) = 0;
  *(void *)(a2 + 816) = 0;
  *(void *)(a2 + 832) = 0;
  *(void *)(a2 + 824) = 0;
  *(unsigned char *)(a2 + 976) = 0;
  *(unsigned char *)(a2 + 992) = 0;
  *(unsigned char *)(a2 + 996) = 0;
  *(unsigned char *)(a2 + 1000) = 0;
  *(unsigned char *)(a2 + 1004) = 0;
  *(unsigned char *)(a2 + 1008) = 0;
  *(unsigned char *)(a2 + 1012) = 0;
  *(unsigned char *)(a2 + 1016) = 0;
  *(unsigned char *)(a2 + 1020) = 0;
  *(_WORD *)(a2 + 1024) = 0;
  *(unsigned char *)(a2 + 1026) = 0;
  *(unsigned char *)(a2 + 1028) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  *(unsigned char *)(a2 + 1040) = 0;
  *(unsigned char *)(a2 + 1064) = 0;
  *(unsigned char *)(a2 + 1072) = 0;
  *(unsigned char *)(a2 + 1088) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_OWORD *)(a2 + 712) = 0u;
  *(_OWORD *)(a2 + 728) = 0u;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a2 + 776) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(unsigned char *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_OWORD *)(a2 + 848) = 0u;
  *(_OWORD *)(a2 + 864) = 0u;
  v38[2] = 0;
  uint64_t v39 = [v3 count];
  float32x4_t v40 = &v34;
  char v41 = 1;
  char v42 = isInputMesh;
  LOBYTE(v43) = 0;
  char v45 = 0;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v38);
  long long v5 = v43;
  uint64_t v4 = v44;
  ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin((uint64_t)v38);
  uint64_t v6 = (char *)v39;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  v49[1] = v4;
  id v50 = v38;
  if ((char *)v39 == v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      v49[0] = v11 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v50, (uint64_t)v49);
      ++v10;
      uint64_t v11 = (char *)v49[0];
    }
    while (v6 != v49[0]);
    uint64_t v29 = v6;
    std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](&v31, v10);
    uint64_t v12 = 0;
    char v35 = v5;
    uint64_t v36 = (id **)v4;
    char v37 = v38;
    uint64_t v30 = v32;
    do
    {
      id v13 = [**v36 objectAtIndexedSubscript:(int)v5];
      if (re::internal::enableSignposts(0, 0))
      {
        uint64_t v28 = [v13 identifier];
        rf::data_flow::RFUUID::copy(v28, (uint64_t)v49);
        if (!v51)
        {
          BOOL v24 = v49;
          if ((_BYTE)v50) {
            BOOL v24 = (void **)v49[0];
          }
          uint64_t v51 = ((unint64_t)v24[1] + 64 * (void)*v24 + ((unint64_t)*v24 >> 2) + 2654435769u) ^ (unint64_t)*v24;
        }
        uint64_t v26 = [v13 geometry];
        uint64_t v27 = [v26 vertices];
        [v27 count];
        long long v14 = [v13 geometry];
        float v15 = [v14 faces];
        [v15 count];
        float v16 = [v13 geometry];
        long long v17 = [v16 classification];
        [v17 count];
        kdebug_trace();
      }
      long long v18 = [v13 identifier];
      rf::data_flow::RFUUID::copy(v18, (uint64_t)v46);

      long long v20 = rf::realityFusionLogObject(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v46, v49);
        uint64_t v21 = v49;
        if (SHIBYTE(v50) < 0) {
          uint64_t v21 = (void **)v49[0];
        }
        *(_DWORD *)buf = 136315138;
        long long v48 = v21;
        _os_log_impl(&dword_235A7C000, v20, OS_LOG_TYPE_DEFAULT, "RFARMeshServiceDelegate: Removing mesh %s", buf, 0xCu);
        if (SHIBYTE(v50) < 0) {
          operator delete(v49[0]);
        }
      }

      float v22 = (_OWORD *)(v30 + v12);
      long long v23 = v46[1];
      *float v22 = v46[0];
      v22[1] = v23;
      char v35 = v5 + 1;
      ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward((uint64_t)v37, (uint64_t)&v35);
      long long v5 = v35;
      v12 += 32;
    }
    while (v29 != v35);
    uint64_t v7 = v31;
    uint64_t v9 = v30 + v12;
    uint64_t v8 = v33;
  }
  uint64_t v25 = v34;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v8;
}

void sub_235A90780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }
  rf::data_flow::provider::InputData::~InputData(a10);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<meshServiceRemoveAnchorCallback(void)::$_0,std::allocator<meshServiceRemoveAnchorCallback(void)::$_0>,rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::target_type()
{
}

double ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::cache_begin(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void ranges::remove_if_view<ranges::transform_view<ranges::iota_view<unsigned long,unsigned long>,meshServiceRemoveAnchorCallback(void)::$_0::operator() const(NSArray<ARAnchor *> *)::{lambda(int)#1}>,ranges::logical_negate<BOOL (*)(ARAnchor *)>>::satisfy_forward(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    uint64_t v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235A90984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void rf::synthetic::getMeshPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  rf::data_flow::RFUUID::string(a1, __p);
  unint64_t v1 = v4;
  if ((v4 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v4 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  for (; v1; --v1)
  {
    if (*(unsigned char *)v2 == 45) {
      *(unsigned char *)uint64_t v2 = 95;
    }
    uint64_t v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A90A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::synthetic::getAnchorPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  rf::data_flow::RFUUID::string(a1, __p);
  unint64_t v1 = v4;
  if ((v4 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v4 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  for (; v1; --v1)
  {
    if (*(unsigned char *)v2 == 45) {
      *(unsigned char *)uint64_t v2 = 95;
    }
    uint64_t v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A90B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::synthetic::getObjectPathFromIdentifier(rf::data_flow::RFUUID *a1)
{
  rf::data_flow::RFUUID::string(a1, __p);
  unint64_t v1 = v4;
  if ((v4 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v4 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  for (; v1; --v1)
  {
    if (*(unsigned char *)v2 == 45) {
      *(unsigned char *)uint64_t v2 = 95;
    }
    uint64_t v2 = (void **)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((char)v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A90BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::query::QueryDatabasePerScene::updateUsingScene(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  v109.i64[0] = a2;
  v104.i64[0] = (uint64_t)&v109;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(a1, &v109, (uint64_t)&std::piecewise_construct, &v104);
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  v104.i64[0] = 0;
  long long v3 = std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>((float *)v95, 0, &v104);
  v3[4] = 0x3F8000003F800000;
  v3[5] = 1065353216;
  v3[6] = 0;
  v3[7] = 0x3F80000000000000;
  v3[8] = 0;
  v3[9] = 0;
  EntitiesArray = (void *)RESceneGetEntitiesArray();
  if (v5)
  {
    float32x4_t v88 = (float32x4_t **)(v2 + 5);
    float32x4_t v86 = &EntitiesArray[v5];
    while (1)
    {
      float32x4_t v87 = EntitiesArray;
      uint64_t v6 = *EntitiesArray;
      if ((REIsEntityHidden() & 1) == 0) {
        break;
      }
LABEL_150:
      EntitiesArray = v87 + 1;
      if (v87 + 1 == v86) {
        return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v95);
      }
    }
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    v104.i64[0] = v6;
    std::deque<REEntity *>::push_back(v97, &v104);
    while (1)
    {
      if (!*((void *)&v98 + 1))
      {
        std::deque<REEntity *>::~deque[abi:ne180100](v97);
        goto LABEL_150;
      }
      unint64_t v7 = *(void *)(*(void *)(*((void *)&v97[0] + 1) + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v98 & 0x1FF));
      *(void *)&long long v98 = v98 + 1;
      --*((void *)&v98 + 1);
      if ((unint64_t)v98 >= 0x400)
      {
        operator delete(**((void ***)&v97[0] + 1));
        *((void *)&v97[0] + 1) += 8;
        *(void *)&long long v98 = v98 - 512;
      }
      uint64_t LocalId = REEntityGetLocalId();
      v103.i8[0] = 0;
      v103.i64[1] = 0;
      uuid_clear(uu);
      *(void *)uuid_t uu = LocalId;
      unint64_t v9 = v103.u64[1];
      if (!v103.i64[1])
      {
        float32x4_t v83 = uu;
        if (v103.i8[0]) {
          float32x4_t v83 = (unsigned __int8 *)LocalId;
        }
        unint64_t v9 = ((*(void *)v83 >> 2) + (*(void *)v83 << 6) + *((void *)v83 + 1) + 2654435769) ^ *(void *)v83;
        v103.i64[1] = v9;
      }
      int8x8_t v10 = (int8x8_t)v2[4];
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v13 = v9;
          if (v9 >= *(void *)&v10) {
            unint64_t v13 = v9 % *(void *)&v10;
          }
        }
        else
        {
          unint64_t v13 = (*(void *)&v10 - 1) & v9;
        }
        long long v14 = *(float32x4_t ***)(v2[3] + 8 * v13);
        if (v14)
        {
          for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
          {
            unint64_t v16 = i->u64[1];
            if (v16 == v9)
            {
              if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v2 + 7), (uint64_t)&i[1], (uint64_t)uu)) {
                goto LABEL_107;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v16 >= *(void *)&v10) {
                  v16 %= *(void *)&v10;
                }
              }
              else
              {
                v16 &= *(void *)&v10 - 1;
              }
              if (v16 != v13) {
                break;
              }
            }
          }
        }
      }
      RESharedPtr<REEntity>::fromGet(v7, (uint64_t *)&v104);
      uint64_t v17 = v104.i64[0];
      v104.i64[0] = 0;
      float32x4_t v100 = 0u;
      RESharedPtr<REEntity>::~RESharedPtr(&v104);
      v109.i64[0] = v17;
      *(void *)&long long v99 = 0;
      float32x4_t v110 = v100;
      int v111 = 0;
      float32x4_t v104 = *(float32x4_t *)uu;
      float32x4_t v105 = v103;
      int v108 = -1;
      *(void *)&long long v106 = v17;
      if (v17) {
        RERetain();
      }
      float32x4_t v107 = v110;
      int v108 = 0;
      unint64_t v18 = v105.u64[1];
      if (!v105.i64[1])
      {
        float32x4_t v84 = &v104;
        if (v105.i8[0]) {
          float32x4_t v84 = (float32x4_t *)v104.i64[0];
        }
        unint64_t v18 = (((unint64_t)v84->i64[0] >> 2) + (v84->i64[0] << 6) + v84->i64[1] + 2654435769) ^ v84->i64[0];
        v105.i64[1] = v18;
      }
      unint64_t v19 = v2[4];
      if (v19)
      {
        uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v20.i16[0] = vaddlv_u8(v20);
        unint64_t v21 = v20.u32[0];
        if (v20.u32[0] > 1uLL)
        {
          int8x8_t v10 = (int8x8_t)v18;
          if (v18 >= v19) {
            int8x8_t v10 = (int8x8_t)(v18 % v19);
          }
        }
        else
        {
          int8x8_t v10 = (int8x8_t)((v19 - 1) & v18);
        }
        float v22 = *(float32x4_t ***)(v2[3] + 8 * *(void *)&v10);
        if (v22)
        {
          for (uint64_t i = *v22; i; uint64_t i = (float32x4_t *)i->i64[0])
          {
            unint64_t v23 = i->u64[1];
            if (v23 == v18)
            {
              if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v2 + 7), (uint64_t)&i[1], (uint64_t)&v104)) {
                goto LABEL_102;
              }
            }
            else
            {
              if (v21 > 1)
              {
                if (v23 >= v19) {
                  v23 %= v19;
                }
              }
              else
              {
                v23 &= v19 - 1;
              }
              if (v23 != *(void *)&v10) {
                break;
              }
            }
          }
        }
      }
      BOOL v24 = (float32x4_t *)operator new(0x60uLL);
      uint64_t i = v24;
      v24->i64[0] = 0;
      v24->i64[1] = v18;
      float32x4_t v25 = v105;
      v24[1] = v104;
      void v24[2] = v25;
      v24[3].i8[0] = 0;
      v24[5].i32[0] = -1;
      int v26 = v108;
      if (v108 != -1)
      {
        v24[3].i64[0] = v106;
        *(void *)&long long v106 = 0;
        v24[4] = v107;
        v24[5].i32[0] = v26;
      }
      float v27 = (float)(unint64_t)(v2[6] + 1);
      float v28 = *((float *)v2 + 14);
      if (!v19 || (float)(v28 * (float)v19) < v27) {
        break;
      }
LABEL_92:
      uint64_t v45 = v2[3];
      float32x4_t v46 = *(float32x4_t ***)(v45 + 8 * *(void *)&v10);
      if (v46)
      {
        i->i64[0] = (uint64_t)*v46;
LABEL_100:
        *float32x4_t v46 = i;
        goto LABEL_101;
      }
      i->i64[0] = (uint64_t)*v88;
      void *v88 = i;
      *(void *)(v45 + 8 * *(void *)&v10) = v88;
      if (i->i64[0])
      {
        unint64_t v47 = *(void *)(i->i64[0] + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v47 >= v19) {
            v47 %= v19;
          }
        }
        else
        {
          v47 &= v19 - 1;
        }
        float32x4_t v46 = (float32x4_t **)(v2[3] + 8 * v47);
        goto LABEL_100;
      }
LABEL_101:
      ++v2[6];
LABEL_102:
      if (v108 != -1) {
        RESharedPtr<REEntity>::~RESharedPtr(&v106);
      }
      if (v111 != -1) {
        RESharedPtr<REEntity>::~RESharedPtr(&v109);
      }
      RESharedPtr<REEntity>::~RESharedPtr(&v99);
LABEL_107:
      if (i[5].i32[0]) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t Parent = REEntityGetParent();
      if (!*((void *)&v95[0] + 1)) {
        goto LABEL_152;
      }
      unint64_t v49 = 0x9DDFEA08EB382D69 * (((8 * Parent) + 8) ^ HIDWORD(Parent));
      unint64_t v50 = 0x9DDFEA08EB382D69 * (HIDWORD(Parent) ^ (v49 >> 47) ^ v49);
      unint64_t v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v95 + 8));
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        unint64_t v53 = v51;
        if (v51 >= *((void *)&v95[0] + 1)) {
          unint64_t v53 = v51 % *((void *)&v95[0] + 1);
        }
      }
      else
      {
        unint64_t v53 = (*((void *)&v95[0] + 1) - 1) & v51;
      }
      id v54 = *(float32x4_t ***)(*(void *)&v95[0] + 8 * v53);
      if (!v54 || (char v55 = *v54) == 0) {
LABEL_152:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      while (1)
      {
        unint64_t v56 = v55->u64[1];
        if (v56 == v51) {
          break;
        }
        if (v52.u32[0] > 1uLL)
        {
          if (v56 >= *((void *)&v95[0] + 1)) {
            v56 %= *((void *)&v95[0] + 1);
          }
        }
        else
        {
          v56 &= *((void *)&v95[0] + 1) - 1;
        }
        if (v56 != v53) {
          goto LABEL_152;
        }
LABEL_123:
        char v55 = (float32x4_t *)v55->i64[0];
        if (!v55) {
          goto LABEL_152;
        }
      }
      if (v55[1].i64[0] != Parent) {
        goto LABEL_123;
      }
      float32x4_t v92 = v55[3];
      float32x4_t v93 = v55[2];
      float32x4_t v94 = v55[4];
      if (REEntityGetComponent())
      {
        RETransformComponentGetLocalSRT();
        float32x4_t v90 = v58;
        float32x4_t v91 = v57;
        float32x4_t v89 = v59;
      }
      else if (REEntityGetComponent())
      {
        REAnchorComponentGetWorldTransform();
        float32x4_t v104 = v60;
        float32x4_t v105 = v61;
        long long v106 = v62;
        float32x4_t v107 = v63;
        float32x4_t v109 = 0u;
        long long v99 = xmmword_235AF7AA0;
        float32x4_t v101 = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v104, (int32x4_t *)&v109, &v99, &v101);
        float32x4_t v90 = (float32x4_t)v99;
        float32x4_t v91 = v109;
        float32x4_t v89 = v101;
      }
      else
      {
        float32x4_t v89 = 0u;
        float32x4_t v90 = (float32x4_t)xmmword_235AF7AA0;
        float32x4_t v91 = (float32x4_t)xmmword_235AF7DF0;
      }
      v104.i64[0] = v7;
      char v64 = (float32x4_t *)std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>((float *)v95, v7, &v104);
      _Q7 = (int32x4_t)v92;
      float32x4_t v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q7, _Q7), (int8x16_t)v92, 0xCuLL);
      float32x4_t v67 = vnegq_f32(v92);
      float32x4_t v68 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), v67), v89, v66);
      int32x4_t v69 = (int32x4_t)vaddq_f32(v68, v68);
      float32x4_t v70 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v69, v69), (int8x16_t)v69, 0xCuLL);
      int32x4_t v71 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), (int8x16_t)v70, 0xCuLL), v67), v70, v66);
      _S3 = v90.i32[3];
      _Q2 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL), v67), v90, v66);
      float32x4_t v74 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q2, _Q2), (int8x16_t)_Q2, 0xCuLL), v90, v92, 3), v92, v90, 3);
      __asm { FMLA            S2, S3, V7.S[3] }
      v74.i32[3] = _Q2.i32[0];
      void v64[2] = vmulq_f32(v93, v91);
      v64[3] = v74;
      float32x4_t v79 = vaddq_f32(v94, vmulq_f32(v93, vaddq_f32(vaddq_f32(v89, vmulq_laneq_f32(v70, v92, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v71, v71), (int8x16_t)v71, 0xCuLL))));
      v64[4] = v79;
      i[4] = v79;
      uint64_t ChildCount = REEntityGetChildCount();
      if (ChildCount)
      {
        for (uint64_t j = 0; j != ChildCount; ++j)
        {
          v104.i64[0] = REEntityGetChild();
          std::deque<REEntity *>::push_back(v97, &v104);
        }
      }
    }
    BOOL v29 = (v19 & (v19 - 1)) != 0;
    if (v19 < 3) {
      BOOL v29 = 1;
    }
    unint64_t v30 = v29 | (2 * v19);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v19 = v2[4];
    if (*(void *)&prime > v19) {
      goto LABEL_58;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)v2[6] / *((float *)v2 + 14));
      if (v19 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = v2[4];
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v33 = operator new(8 * *(void *)&prime);
          id v34 = (void *)v2[3];
          v2[3] = v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          v2[4] = prime;
          do
            *(void *)(v2[3] + 8 * v35++) = 0;
          while (*(void *)&prime != v35);
          uint64_t v36 = *v88;
          if (*v88)
          {
            unint64_t v37 = v36->u64[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }
            else
            {
              v37 &= *(void *)&prime - 1;
            }
            *(void *)(v2[3] + 8 * v37) = v88;
            char v42 = (float32x4_t *)v36->i64[0];
            if (v36->i64[0])
            {
              do
              {
                unint64_t v43 = v42->u64[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }
                else
                {
                  v43 &= *(void *)&prime - 1;
                }
                if (v43 != v37)
                {
                  uint64_t v44 = v2[3];
                  if (!*(void *)(v44 + 8 * v43))
                  {
                    *(void *)(v44 + 8 * v43) = v36;
                    goto LABEL_83;
                  }
                  v36->i64[0] = v42->i64[0];
                  v42->i64[0] = **(void **)(v2[3] + 8 * v43);
                  **(void **)(v2[3] + 8 * v43) = v42;
                  char v42 = v36;
                }
                unint64_t v43 = v37;
LABEL_83:
                uint64_t v36 = v42;
                char v42 = (float32x4_t *)v42->i64[0];
                unint64_t v37 = v43;
              }
              while (v42);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_87;
        }
        float32x4_t v82 = (void *)v2[3];
        v2[3] = 0;
        if (v82) {
          operator delete(v82);
        }
        unint64_t v19 = 0;
        v2[4] = 0;
      }
    }
LABEL_87:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19) {
        int8x8_t v10 = (int8x8_t)(v18 % v19);
      }
      else {
        int8x8_t v10 = (int8x8_t)v18;
      }
    }
    else
    {
      int8x8_t v10 = (int8x8_t)((v19 - 1) & v18);
    }
    goto LABEL_92;
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v95);
}

void sub_235A91640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void *std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  unint64_t v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_235A91968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      if (*((_DWORD *)v2 + 20) != -1) {
        RESharedPtr<REEntity>::~RESharedPtr(v2 + 6);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,re::GenericSRT<float>>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,re::GenericSRT<float>>>>::__emplace_unique_key_args<REEntity *,std::piecewise_construct_t const&,std::tuple<REEntity *&&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x50uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[4] = 0x3F8000003F800000;
  i[5] = 1065353216;
  i[6] = 0;
  i[7] = 0x3F80000000000000;
  i[8] = 0;
  i[9] = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v20 = operator new(8 * *(void *)&prime);
          unint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          unint64_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            BOOL v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *unint64_t v23 = *v29;
                  *BOOL v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  BOOL v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                unint64_t v23 = v29;
                BOOL v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v31 = *(void **)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *uint64_t v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_235A91E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<REEntity *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REEntity *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<REEntity *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      id v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint8x8_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<REEntity **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<REEntity **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      id v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<REEntity **>::push_back(&v54, &v53);
  uint8x8_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<REEntity **>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_235A921F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<REEntity **>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint8x8_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(a1[4], v16);
      BOOL v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<REEntity **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t RESharedPtr<REEntity>::fromGet@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = result;
  *a2 = 0;
  if (result) {
    double result = RERetain();
  }
  *a2 = v2;
  return result;
}

void sub_235A92718(_Unwind_Exception *a1)
{
  RESharedPtr<REEntity>::~RESharedPtr(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    if (*((_DWORD *)__p + 20) != -1) {
      RESharedPtr<REEntity>::~RESharedPtr(__p + 6);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t re::decomposeScaleRotationTranslation<float>(uint64_t result, int32x4_t *a2, void *a3, _OWORD *a4)
{
  *a4 = *(_OWORD *)(result + 48);
  float32x4_t v4 = *(float32x4_t *)(result + 16);
  float32x4_t v5 = *(float32x4_t *)(result + 32);
  float32x4_t v6 = vmulq_f32(*(float32x4_t *)result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL)));
  float v7 = -1.0;
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0] > 0.0)float v7 = 1.0; {
  float32x4_t v8 = vmulq_f32(*(float32x4_t *)result, *(float32x4_t *)result);
  }
  float32x4_t v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  float32x4_t v10 = vmulq_f32(v4, v4);
  v9.f32[0] = sqrtf(v9.f32[0]);
  float32x4_t v11 = vmulq_f32(v5, v5);
  v9.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v9.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  int32x4_t v12 = (int32x4_t)vmulq_n_f32(v9, v7);
  *a2 = v12;
  uint64_t v13 = v12.i64[1];
  float32x4_t v14 = (float32x4_t)vdupq_laneq_s32(v12, 2);
  uint64_t v15 = v12.i64[0];
  float32x4_t v16 = vdivq_f32(*(float32x4_t *)result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 0));
  float32x4_t v17 = vdivq_f32(*(float32x4_t *)(result + 16), (float32x4_t)vdupq_lane_s32((int32x2_t)((__int128)__PAIR128__(v13, v15) >> 32), 0));
  int32x4_t v18 = (int32x4_t)vmulq_f32(v16, v16);
  float32x4_t v19 = vdivq_f32(*(float32x4_t *)(result + 32), v14);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20)));
  float32x4_t v22 = vmulq_n_f32(v16, vmul_f32(v21, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v21, v21))).f32[0]);
  float32x4_t v23 = vmulq_f32(v22, v17);
  float32x4_t v24 = vmulq_f32(v22, v22);
  float32x4_t v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
  float32x4_t v26 = vsubq_f32(v17, vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))), v25).f32[0]));
  int32x4_t v27 = (int32x4_t)vmulq_f32(v26, v26);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
  float32x4_t v28 = vmulq_n_f32(v26, vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
  float32x4_t v29 = vmulq_f32(v22, v19);
  float32x4_t v30 = vmulq_n_f32(v22, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))), v25).f32[0]);
  float32x4_t v31 = vmulq_f32(v19, v28);
  float32x4_t v32 = vsubq_f32(v19, v30);
  float32x4_t v33 = vmulq_f32(v28, v28);
  float32x4_t v34 = vsubq_f32(v32, vmulq_n_f32(v28, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)))).f32[0]));
  int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
  v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
  *(float32x2_t *)v33.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
  *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)));
  float32x4_t v36 = vmulq_n_f32(v34, vmul_f32(*(float32x2_t *)v33.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32))).f32[0]);
  float v37 = (float)(v22.f32[0] + v28.f32[1]) + v36.f32[2];
  if (v37 >= 0.0)
  {
    float v47 = sqrtf(v37 + 1.0);
    float32_t v48 = v47 + v47;
    float32x2_t v49 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47));
    float32x2_t v50 = vmul_f32(v49, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v49));
    v51.i32[0] = vmul_f32(v50, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v47 + v47), v50)).u32[0];
    float v43 = vmuls_lane_f32(v51.f32[0], (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), v36), 1);
    float v44 = vmuls_n_f32(vsubq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2)).f32[0], v51.f32[0]);
    v52.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v28.f32).u32[0];
    v52.f32[1] = v48;
    v51.i32[1] = 0.25;
    float32x2_t v53 = vmul_f32(v52, v51);
  }
  else
  {
    if (v22.f32[0] >= v28.f32[1] && v22.f32[0] >= v36.f32[2])
    {
      float v38 = sqrtf(v22.f32[0] + (float)((float)(1.0 - v28.f32[1]) - v36.f32[2]));
      *(float *)&unsigned int v39 = v38 + v38;
      float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
      float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      unsigned __int32 v42 = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      float v43 = *(float *)&v39 * 0.25;
      float v44 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      float32x2_t v45 = (float32x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v28).u64[0];
      v28.i32[0] = vadd_f32(v45, *(float32x2_t *)v36.f32).u32[0];
      float32x2_t v46 = vsub_f32(v45, *(float32x2_t *)v36.f32);
LABEL_11:
      v28.i32[1] = v46.i32[1];
      float32x2_t v53 = vmul_n_f32(*(float32x2_t *)v28.f32, *(float *)&v42);
      goto LABEL_12;
    }
    float v54 = 1.0 - v22.f32[0];
    if (v28.f32[1] >= v36.f32[2])
    {
      float v67 = sqrtf(v28.f32[1] + (float)(v54 - v36.f32[2]));
      float v68 = v67 + v67;
      float32x2_t v69 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67));
      float32x2_t v70 = vmul_f32(v69, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v69));
      unsigned __int32 v42 = vmul_f32(v70, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v67 + v67), v70)).u32[0];
      float v43 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), v28).f32[0], *(float *)&v42);
      float v44 = v68 * 0.25;
      float32x2_t v71 = (float32x2_t)vrev64_s32(*(int32x2_t *)v36.f32);
      float32x2_t v72 = (float32x2_t)vzip2q_s32((int32x4_t)v28, (int32x4_t)v22).u64[0];
      v28.i32[0] = vadd_f32(v71, v72).u32[0];
      float32x2_t v46 = vsub_f32(v71, v72);
      goto LABEL_11;
    }
    float32x4_t v55 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2);
    float32x2_t v56 = (float32x2_t)__PAIR64__(v22.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v54 - v28.f32[1]) + v36.f32[2])));
    float32x2_t v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 0);
    LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v36).u32[0];
    float32x2_t v59 = vsub_f32(*(float32x2_t *)v22.f32, v57);
    v57.i32[0] = 2.0;
    v57.i32[0] = vmul_f32(v56, v57).u32[0];
    v57.i32[1] = v59.i32[1];
    float32x2_t v60 = vrecpe_f32((float32x2_t)v57.u32[0]);
    float32x2_t v61 = vmul_f32(v60, vrecps_f32((float32x2_t)v57.u32[0], v60));
    v59.i32[0] = vmul_f32(v61, vrecps_f32((float32x2_t)v57.u32[0], v61)).u32[0];
    float v43 = vmuls_n_f32(v58, v59.f32[0]);
    float v44 = vmuls_lane_f32(v59.f32[0], (float32x2_t)*(_OWORD *)&vaddq_f32(v55, v36), 1);
    __asm { FMOV            V3.2S, #0.25 }
    _D3.i32[1] = v59.i32[0];
    float32x2_t v53 = vmul_f32(v57, _D3);
  }
LABEL_12:
  *a3 = __PAIR64__(LODWORD(v44), LODWORD(v43));
  a3[1] = v53;
  return result;
}

uint64_t std::deque<REEntity *>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<REEntity **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<REEntity **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::DebugOptionConsumer(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26E8F3DD8;
  *(void *)(a1 + 8) = 0;
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  long long v6 = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 60) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 128));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 448));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 768));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 1088));
  rf::data_flow::consumer::MeshVisualizer::MeshVisualizer((rf::data_flow::consumer::MeshVisualizer *)(a1 + 1408));
  *(_DWORD *)(a1 + 1728) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58468))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v27, (const UInt8 *)v25);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.enableRoomDebugVisualization");
    unsigned int v16 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v27, (const UInt8 *)__p);
    if (v16 <= 0x100) {
      char v17 = 0;
    }
    else {
      char v17 = v16;
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::UserDefaults::~UserDefaults(&v27);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    _MergedGlobals_0 = v17 != 0;
    __cxa_guard_release(&qword_26AB58468);
  }
  *(unsigned char *)(a1 + 64) |= _MergedGlobals_0;
  uint64_t v7 = *(int *)(a1 + 68);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58478, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58478))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v27, (const UInt8 *)v25);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.roomVisualizationMode");
    unint64_t v18 = rf::UserDefaults::intValue((CFStringRef *)&v27, (const UInt8 *)__p);
    if (v19) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = v7;
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::UserDefaults::~UserDefaults(&v27);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    qword_26AB58470 = v20;
    __cxa_guard_release(&qword_26AB58478);
  }
  int v8 = qword_26AB58470;
  if (qword_26AB58470 >= 2) {
    int v8 = v7;
  }
  *(_DWORD *)(a1 + 68) = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58480, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58480))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    rf::UserDefaults::UserDefaults((CFStringRef *)&v27, (const UInt8 *)v25);
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.DebugOptionConsumer.roomClassificationAlpha");
    uint64_t v21 = rf::UserDefaults::floatValue((CFStringRef *)&v27, (const UInt8 *)__p);
    if ((v21 & 0xFF00000000) != 0) {
      float v22 = *(float *)&v21;
    }
    else {
      float v22 = 0.1;
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::UserDefaults::~UserDefaults(&v27);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    dword_26AB58464 = LODWORD(v22);
    __cxa_guard_release(&qword_26AB58480);
  }
  float v9 = 1.0;
  if (*(float *)&dword_26AB58464 <= 1.0) {
    float v9 = *(float *)&dword_26AB58464;
  }
  LODWORD(v10) = 0;
  if (*(float *)&dword_26AB58464 < 0.0) {
    float v9 = 0.0;
  }
  uint64_t v11 = *(void *)(a1 + 992);
  if (*(void *)(a1 + 1000) != v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 12;
    do
    {
      *(float *)(v11 + v13) = v9;
      *(float *)(a1 + 1036) = v9;
      ++v12;
      uint64_t v11 = *(void *)(a1 + 992);
      v13 += 16;
    }
    while (v12 < (*(void *)(a1 + 1000) - v11) >> 4);
  }
  *(void *)&long long v14 = 1061997773;
  DWORD1(v10) = 1061997773;
  DWORD2(v14) = 0;
  *((float *)&v14 + 3) = v9;
  *(_OWORD *)(a1 + 1184) = v14;
  DWORD2(v10) = 0;
  *((float *)&v10 + 3) = v9;
  *(_OWORD *)(a1 + 1504) = v10;
  *(unsigned char *)(a1 + 1730) = 1;
  return a1;
}

void sub_235A93010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  rf::UserDefaults::~UserDefaults(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_guard_abort(&qword_26AB58480);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v28);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v27);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v26);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v25);
  rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(v24);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 14);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 13);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 12);
  RESharedPtr<REAsset>::~RESharedPtr(v22 + 11);
  RESharedPtr<REAsset>::~RESharedPtr(v23);
  _Unwind_Resume(a1);
}

__n128 rf::data_flow::consumer::DebugOptionConsumer::setRoomVisualizationClassificationAlpha(__n128 *this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  result.n128_u32[0] = 0;
  if (v3) {
    float v2 = 0.0;
  }
  unint64_t v5 = this[62].n128_u64[0];
  if (this[62].n128_u64[1] != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v2;
      this[64].n128_f32[3] = v2;
      ++v6;
      unint64_t v5 = this[62].n128_u64[0];
      v7 += 16;
    }
    while (v6 < (uint64_t)(this[62].n128_u64[1] - v5) >> 4);
  }
  v8.n128_u64[0] = 1061997773;
  result.n128_u32[1] = 1061997773;
  v8.n128_u32[2] = 0;
  v8.n128_f32[3] = v2;
  result.n128_u32[2] = 0;
  this[74] = v8;
  result.n128_f32[3] = v2;
  this[94] = result;
  this[108].n128_u8[2] = 1;
  return result;
}

void rf::data_flow::consumer::MeshVisualizer::~MeshVisualizer(rf::data_flow::consumer::MeshVisualizer *this)
{
  float v2 = (void *)*((void *)this + 34);
  if (v2) {
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 24);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 6);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 5);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::data_flow::consumer::DebugOptionConsumer::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 32) || !*(unsigned char *)(a2 + 16)) {
    return;
  }
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)v5);
  if (!*(unsigned char *)(a2 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v6 = MEMORY[0x237DEDE50](*(void *)(a2 + 8));
  if (!*(unsigned char *)(a2 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x237DEDE90](*(void *)(a2 + 8));
  if (v7)
  {
    uint64_t v9 = v8;
    if (v8)
    {
      if (RERenderManagerIsBeingUpdated())
      {
        if (!*(void *)(v4 + 88))
        {
          *(void *)&long long v118 = REAssetManagerCreateAssetHandle();
          uint64_t v10 = *(void *)(v4 + 96);
          *(void *)(v4 + 96) = v118;
          if (v10) {
            RERelease();
          }
          *(void *)&long long v118 = 0;
          RESharedPtr<REAsset>::~RESharedPtr(&v118);
          REAssetHandleLoadAsync();
          *(void *)&long long v118 = REAssetManagerMaterialMemoryAssetCreate();
          uint64_t v11 = *(void *)(v4 + 88);
          *(void *)(v4 + 88) = v118;
          if (v11) {
            RERelease();
          }
          *(void *)&long long v118 = 0;
          RESharedPtr<REAsset>::~RESharedPtr(&v118);
          REAssetHandleLoadAsync();
        }
        if (!*(void *)(v4 + 104))
        {
          *(void *)&long long v118 = REAssetManagerCreateAssetHandle();
          uint64_t v12 = *(void *)(v4 + 112);
          *(void *)(v4 + 112) = v118;
          if (v12) {
            RERelease();
          }
          *(void *)&long long v118 = 0;
          RESharedPtr<REAsset>::~RESharedPtr(&v118);
          REAssetHandleLoadAsync();
          *(void *)&long long v118 = REAssetManagerMaterialMemoryAssetCreate();
          uint64_t v13 = *(void *)(v4 + 104);
          *(void *)(v4 + 104) = v118;
          if (v13) {
            RERelease();
          }
          *(void *)&long long v118 = 0;
          RESharedPtr<REAsset>::~RESharedPtr(&v118);
          REAssetHandleLoadAsync();
        }
        if (!*(void *)(v4 + 80))
        {
          *(void *)&long long v118 = REAssetManagerCreateAssetHandle();
          uint64_t v14 = *(void *)(v4 + 80);
          *(void *)(v4 + 80) = v118;
          if (v14) {
            RERelease();
          }
          *(void *)&long long v118 = 0;
          RESharedPtr<REAsset>::~RESharedPtr(&v118);
          if ((REAssetHandleIsLoaded() & 1) == 0) {
            REAssetHandleLoadAsync();
          }
        }
        uint64_t v15 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
        rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 128);
        unsigned int v16 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
        rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 448);
        float32x4_t v113 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 768);
        rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 768);
        *(void *)(v4 + 824) = 9;
        uint64_t v112 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 1088);
        rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 1088);
        *(void *)(v4 + 1144) = 8;
        int v111 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 1408);
        rf::data_flow::consumer::MeshVisualizer::setupMaterials(v4 + 1408);
        *(void *)(v4 + 1464) = 8;
        if (*(unsigned char *)(v4 + 1731)) {
          goto LABEL_26;
        }
        if (!REAssetHandleIsLoaded()
          || !REAssetHandleIsLoaded()
          || !REAssetHandleIsLoaded()
          || !REAssetHandleIsLoaded()
          || !REAssetHandleIsLoaded()
          || *(_DWORD *)(v4 + 192) != 2)
        {
          *(unsigned char *)(v4 + 1731) = 0;
          goto LABEL_263;
        }
        BOOL v98 = *(_DWORD *)(v4 + 512) == 2;
        *(unsigned char *)(v4 + 1731) = v98;
        if (v98)
        {
LABEL_26:
          if (!*(unsigned char *)(a2 + 32)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          unsigned int v17 = *(_DWORD *)(*(void *)(v4 + 8) + 2888);
          if (v17 > 4 || ((1 << v17) & 0x15) == 0)
          {
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(v4 + 128);
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(v4 + 448);
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v113);
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v112);
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)v111);
            *(_WORD *)(v4 + 1728) = 257;
            *(unsigned char *)(v4 + 1730) = 1;
            goto LABEL_263;
          }
          uint64_t v102 = v4;
          if (!*(unsigned char *)(v4 + 16)) {
            goto LABEL_181;
          }
          uint64_t v105 = REPrimitiveRenderAddContext();
          REPrimitiveRenderSetShapeMaterial();
          uint64_t v106 = REPrimitiveRenderAddContext();
          REPrimitiveRenderSetShapeMaterial();
          REAnchorComponentGetComponentType();
          uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
          *(_OWORD *)std::string __p = 0u;
          long long v115 = 0u;
          float v116 = 1.0;
          float32x4_t v109 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
          float32x4_t v110 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
          if (v19)
          {
            uint64_t v20 = ComponentsOfClass;
            uint64_t v107 = ComponentsOfClass + 8 * v19;
            while (1)
            {
              AnchorCFStringRef Identifier = REAnchorComponentGetAnchorIdentifier();
              LOBYTE(v132) = 0;
              *((void *)&v132 + 1) = 0;
              uuid_clear(uu);
              *(void *)uuid_t uu = AnchorIdentifier;
              LOBYTE(v132) = 1;
              REComponentGetEntity();
              REAnchoringComponentGetComponentType();
              uint64_t ComponentByClass = REEntityGetComponentByClass();
              long long v118 = *(_OWORD *)uu;
              long long v119 = v132;
              *(void *)&long long v120 = ComponentByClass;
              unint64_t v23 = *((void *)&v132 + 1);
              if (!*((void *)&v132 + 1))
              {
                float32x2_t v52 = &v118;
                if ((_BYTE)v119) {
                  float32x2_t v52 = (long long *)v118;
                }
                unint64_t v23 = ((*(void *)v52 >> 2) + (*(void *)v52 << 6) + *((void *)v52 + 1) + 2654435769) ^ *(void *)v52;
                *((void *)&v119 + 1) = v23;
              }
              unint64_t v24 = (unint64_t)__p[1];
              if (__p[1])
              {
                uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                v25.i16[0] = vaddlv_u8(v25);
                unint64_t v26 = v25.u32[0];
                if (v25.u32[0] > 1uLL)
                {
                  unint64_t v2 = v23;
                  if ((void *)v23 >= __p[1]) {
                    unint64_t v2 = v23 % (unint64_t)__p[1];
                  }
                }
                else
                {
                  unint64_t v2 = ((unint64_t)__p[1] - 1) & v23;
                }
                int32x4_t v27 = (void *)*((void *)__p[0] + v2);
                if (v27)
                {
                  float32x4_t v28 = (void *)*v27;
                  if (*v27)
                  {
                    do
                    {
                      unint64_t v29 = v28[1];
                      if (v29 == v23)
                      {
                        if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)&v116, (uint64_t)(v28 + 2), (uint64_t)&v118))
                        {
                          goto LABEL_105;
                        }
                      }
                      else
                      {
                        if (v26 > 1)
                        {
                          if ((void *)v29 >= __p[1]) {
                            v29 %= (unint64_t)__p[1];
                          }
                        }
                        else
                        {
                          v29 &= (unint64_t)__p[1] - 1;
                        }
                        if (v29 != v2) {
                          break;
                        }
                      }
                      float32x4_t v28 = (void *)*v28;
                    }
                    while (v28);
                  }
                }
              }
              float32x4_t v30 = operator new(0x38uLL);
              *float32x4_t v30 = 0;
              v30[1] = v23;
              long long v31 = v119;
              *((_OWORD *)v30 + 1) = v118;
              *((_OWORD *)v30 + 2) = v31;
              v30[6] = v120;
              float v32 = (float)(unint64_t)(*((void *)&v115 + 1) + 1);
              if (!v24 || (float)(v116 * (float)v24) < v32) {
                break;
              }
LABEL_95:
              float32_t v48 = __p[0];
              float32x2_t v49 = (void *)*((void *)__p[0] + v2);
              if (v49)
              {
                *float32x4_t v30 = *v49;
              }
              else
              {
                *float32x4_t v30 = v115;
                *(void *)&long long v115 = v30;
                v48[v2] = &v115;
                if (!*v30) {
                  goto LABEL_104;
                }
                unint64_t v50 = *(void *)(*v30 + 8);
                if ((v24 & (v24 - 1)) != 0)
                {
                  if (v50 >= v24) {
                    v50 %= v24;
                  }
                }
                else
                {
                  v50 &= v24 - 1;
                }
                float32x2_t v49 = (char *)__p[0] + 8 * v50;
              }
              *float32x2_t v49 = v30;
LABEL_104:
              ++*((void *)&v115 + 1);
LABEL_105:
              v20 += 8;
              unsigned int v16 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 448);
              uint64_t v15 = (rf::data_flow::consumer::MeshVisualizer *)(v4 + 128);
              if (v20 == v107) {
                goto LABEL_129;
              }
            }
            BOOL v33 = (v24 & (v24 - 1)) != 0;
            if (v24 < 3) {
              BOOL v33 = 1;
            }
            unint64_t v34 = v33 | (2 * v24);
            unint64_t v35 = vcvtps_u32_f32(v32 / v116);
            if (v34 <= v35) {
              int8x8_t prime = (int8x8_t)v35;
            }
            else {
              int8x8_t prime = (int8x8_t)v34;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
            unint64_t v24 = (unint64_t)__p[1];
            if ((void *)*(void *)&prime > __p[1]) {
              goto LABEL_61;
            }
            if ((void *)*(void *)&prime < __p[1])
            {
              unint64_t v43 = vcvtps_u32_f32((float)*((unint64_t *)&v115 + 1) / v116);
              if (__p[1] < (void *)3
                || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
              {
                unint64_t v43 = std::__next_prime(v43);
              }
              else
              {
                uint64_t v45 = 1 << -(char)__clz(v43 - 1);
                if (v43 >= 2) {
                  unint64_t v43 = v45;
                }
              }
              if (*(void *)&prime <= v43) {
                int8x8_t prime = (int8x8_t)v43;
              }
              if ((void *)*(void *)&prime >= __p[1])
              {
                unint64_t v24 = (unint64_t)__p[1];
              }
              else
              {
                if (prime)
                {
LABEL_61:
                  if (*(void *)&prime >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  float v37 = operator new(8 * *(void *)&prime);
                  float v38 = __p[0];
                  __p[0] = v37;
                  if (v38) {
                    operator delete(v38);
                  }
                  uint64_t v39 = 0;
                  __p[1] = (void *)prime;
                  do
                    *((void *)__p[0] + v39++) = 0;
                  while (*(void *)&prime != v39);
                  float32x2_t v40 = (void **)v115;
                  if ((void)v115)
                  {
                    unint64_t v41 = *(void *)(v115 + 8);
                    uint8x8_t v42 = (uint8x8_t)vcnt_s8(prime);
                    v42.i16[0] = vaddlv_u8(v42);
                    if (v42.u32[0] > 1uLL)
                    {
                      if (v41 >= *(void *)&prime) {
                        v41 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v41 &= *(void *)&prime - 1;
                    }
                    *((void *)__p[0] + v41) = &v115;
                    for (i = *v40; i; unint64_t v41 = v47)
                    {
                      unint64_t v47 = i[1];
                      if (v42.u32[0] > 1uLL)
                      {
                        if (v47 >= *(void *)&prime) {
                          v47 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v47 &= *(void *)&prime - 1;
                      }
                      if (v47 != v41)
                      {
                        if (!*((void *)__p[0] + v47))
                        {
                          *((void *)__p[0] + v47) = v40;
                          goto LABEL_86;
                        }
                        *float32x2_t v40 = (void *)*i;
                        *uint64_t i = **((void **)__p[0] + v47);
                        **((void **)__p[0] + v47) = i;
                        uint64_t i = v40;
                      }
                      unint64_t v47 = v41;
LABEL_86:
                      float32x2_t v40 = (void **)i;
                      uint64_t i = (void *)*i;
                    }
                  }
                  unint64_t v24 = (unint64_t)prime;
                  goto LABEL_90;
                }
                float32x2_t v51 = __p[0];
                __p[0] = 0;
                if (v51) {
                  operator delete(v51);
                }
                unint64_t v24 = 0;
                __p[1] = 0;
              }
            }
LABEL_90:
            if ((v24 & (v24 - 1)) != 0)
            {
              if (v23 >= v24) {
                unint64_t v2 = v23 % v24;
              }
              else {
                unint64_t v2 = v23;
              }
            }
            else
            {
              unint64_t v2 = (v24 - 1) & v23;
            }
            goto LABEL_95;
          }
LABEL_129:
          char v53 = *(unsigned char *)(v5 + 768);
          uint64_t v104 = v5 + 496;
          if (v53)
          {
            rf::helpers::getRFUUIDFromAnchor(v5 + 496, (uint64_t)&v118);
            long long v128 = v118;
            long long v129 = v119;
            char v53 = 1;
          }
          else
          {
            LOBYTE(v128) = 0;
          }
          char v130 = v53;
          float v54 = *(uint64_t **)(v5 + 160);
          if (!v54) {
            goto LABEL_177;
          }
          uint64_t v108 = v9;
          uint64_t v103 = v5;
LABEL_135:
          if (v130)
          {
            float32x4_t v55 = (_BYTE)v129 ? (const unsigned __int8 *)v128 : (const unsigned __int8 *)&v128;
            float32x2_t v56 = *((unsigned char *)v54 + 32) ? (const unsigned __int8 *)v54[2] : (const unsigned __int8 *)(v54 + 2);
            if (!uuid_compare(v55, v56)) {
              goto LABEL_171;
            }
          }
          rf::helpers::getTransformFromAnchor((uint64_t)(v54 + 6));
          unint64_t v57 = v54[5];
          if (!v57)
          {
            if (*((unsigned char *)v54 + 32)) {
              float v68 = (void *)v54[2];
            }
            else {
              float v68 = v54 + 2;
            }
            unint64_t v57 = ((*v68 >> 2) + (*v68 << 6) + v68[1] + 2654435769) ^ *v68;
            v54[5] = v57;
          }
          if (!__p[1])
          {
            float32x2_t v61 = 0;
            goto LABEL_167;
          }
          uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v58.i16[0] = vaddlv_u8(v58);
          unint64_t v59 = v58.u32[0];
          if (v58.u32[0] > 1uLL)
          {
            unint64_t v60 = v57;
            if ((void *)v57 >= __p[1]) {
              unint64_t v60 = v57 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v60 = ((unint64_t)__p[1] - 1) & v57;
          }
          long long v62 = (void *)*((void *)__p[0] + v60);
          if (!v62)
          {
            float32x2_t v61 = 0;
LABEL_163:
            uint64_t v5 = v103;
            goto LABEL_166;
          }
          float32x2_t v61 = (void *)*v62;
          if (!*v62) {
            goto LABEL_163;
          }
          while (1)
          {
            unint64_t v63 = v61[1];
            if (v63 == v57)
            {
              if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)&v116, (uint64_t)(v61 + 2), (uint64_t)(v54 + 2))) {
                goto LABEL_165;
              }
            }
            else
            {
              if (v59 > 1)
              {
                if ((void *)v63 >= __p[1]) {
                  v63 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v63 &= (unint64_t)__p[1] - 1;
              }
              if (v63 != v60)
              {
                float32x2_t v61 = 0;
LABEL_165:
                uint64_t v4 = v102;
                uint64_t v5 = v103;
LABEL_166:
                unsigned int v16 = v109;
LABEL_167:
                long long v119 = *(_OWORD *)uu;
                long long v120 = v132;
                long long v121 = v133;
                long long v122 = v134;
                uint64_t v64 = v106;
                if (v61) {
                  uint64_t v64 = v105;
                }
                int v65 = *(_DWORD *)(v4 + 20);
                uint64_t v66 = *(void *)(v4 + 80);
                LOBYTE(v118) = v61 != 0;
                char v123 = 0;
                int v124 = v65;
                uint64_t v9 = v108;
                uint64_t v125 = v64;
                uint64_t v126 = v108;
                uint64_t v127 = v66;
                uint64_t v67 = *((unsigned int *)v54 + 76);
                uint64_t v15 = v110;
                if (v67 == -1) {
                  std::__throw_bad_variant_access[abi:ne180100]();
                }
                *(void *)uuid_t uu = &v118;
                ((void (*)(unsigned __int8 *, uint64_t *))off_26E8F3E10[v67])(uu, v54 + 6);
LABEL_171:
                float v54 = (uint64_t *)*v54;
                if (!v54)
                {
LABEL_177:
                  if (*(unsigned char *)(v5 + 768))
                  {
                    rf::helpers::getTransformFromAnchor(v104);
                    long long v119 = *(_OWORD *)uu;
                    long long v120 = v132;
                    long long v121 = v133;
                    long long v122 = v134;
                    int v69 = *(_DWORD *)(v4 + 20);
                    uint64_t v70 = *(void *)(v4 + 80);
                    LOBYTE(v118) = 0;
                    char v123 = 1;
                    int v124 = v69;
                    uint64_t v125 = v106;
                    uint64_t v126 = v9;
                    uint64_t v127 = v70;
                    uint64_t v71 = *(unsigned int *)(v5 + 752);
                    if (v71 == -1) {
                      std::__throw_bad_variant_access[abi:ne180100]();
                    }
                    float32x4_t v117 = &v118;
                    ((void (*)(long long **, uint64_t))off_26E8F3E10[v71])(&v117, v104);
                  }
                  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
LABEL_181:
                  if (*(unsigned char *)(v4 + 24))
                  {
                    uint64_t v72 = REPrimitiveRenderAddContext();
                    REPrimitiveRenderSetShapeMaterial();
                    LODWORD(v118) = *(_DWORD *)(v4 + 28);
                    *((void *)&v118 + 1) = v72;
                    *(void *)&long long v119 = v9;
                    for (uint64_t j = *(float32x4_t **)(v5 + 408); j; uint64_t j = (float32x4_t *)j->i64[0])
                      rf::data_flow::consumer::SceneGraphVisualizer::drawSceneObject(&v118, j + 3);
                  }
                  if (*(unsigned char *)(v4 + 32))
                  {
                    float32x4_t v74 = *(uint64_t ***)(v5 + 80);
                    ++*(_DWORD *)(v4 + 216);
                    if (*(unsigned char *)(v4 + 1728))
                    {
                      for (; v74; float32x4_t v74 = (uint64_t **)*v74)
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)v74[6]);
                      *(unsigned char *)(v4 + 1728) = 0;
                    }
                    for (k = *(uint64_t ***)(v5 + 1816); k; k = (uint64_t **)*k)
                      rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)k[6]);
                    for (m = *(uint64_t ***)(v5 + 1856); m; m = (uint64_t **)*m)
                      rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)m[6]);
                    for (n = *(void **)(v5 + 1896); n; n = (void *)*n)
                      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v15, n[6]);
                    uint64_t v78 = REPrimitiveRenderAddContext();
                    rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v15, v9, v78, *(_DWORD *)(v4 + 36), *(_DWORD *)(v4 + 40));
                    for (iuint64_t i = *(uint64_t ***)(v5 + 80); ii; iuint64_t i = (uint64_t **)*ii)
                      rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v15, (const rf::data_flow::consumer::Mesh *)ii[6]);
                  }
                  if (*(unsigned char *)(v4 + 45))
                  {
                    float32x4_t v80 = *(uint64_t ***)(v5 + 120);
                    ++*(_DWORD *)(v4 + 536);
                    if (*(unsigned char *)(v4 + 1729))
                    {
                      for (; v80; float32x4_t v80 = (uint64_t **)*v80)
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)v80[6]);
                      *(unsigned char *)(v4 + 1729) = 0;
                    }
                    for (juint64_t j = *(uint64_t ***)(v5 + 1936); jj; juint64_t j = (uint64_t **)*jj)
                      rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)jj[6]);
                    for (kk = *(uint64_t ***)(v5 + 1976); kk; kk = (uint64_t **)*kk)
                      rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)kk[6]);
                    for (mm = *(void **)(v5 + 2016); mm; mm = (void *)*mm)
                      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v16, mm[6]);
                    uint64_t v84 = REPrimitiveRenderAddContext();
                    rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v16, v9, v84, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 52));
                    for (nn = *(uint64_t ***)(v5 + 120); nn; nn = (uint64_t **)*nn)
                      rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v16, (const rf::data_flow::consumer::Mesh *)nn[6]);
                  }
                  if (*(unsigned char *)(v4 + 56))
                  {
                    uint64_t v86 = REPrimitiveRenderAddContext();
                    REPrimitiveRenderSetShapeMaterial();
                    LODWORD(v118) = *(_DWORD *)(v4 + 60);
                    *((void *)&v118 + 1) = v86;
                    *(void *)&long long v119 = v9;
                    for (i1 = *(float32x4_t **)(v5 + 368); i1; i1 = (float32x4_t *)i1->i64[0])
                      rf::data_flow::consumer::EnvironmentProbeVisualizer::drawEnvironmentProbe(&v118, i1 + 3);
                  }
                  if (*(unsigned char *)(v4 + 64))
                  {
                    float32x4_t v88 = *(uint64_t **)(v5 + 288);
                    ++*(_DWORD *)(v4 + 856);
                    ++*(_DWORD *)(v4 + 1176);
                    ++*(_DWORD *)(v4 + 1496);
                    if (*(unsigned char *)(v4 + 1730))
                    {
                      for (; v88; float32x4_t v88 = (uint64_t *)*v88)
                      {
                        if (*((unsigned char *)v88 + 608)) {
                          rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v88 + 24));
                        }
                        if (*((unsigned char *)v88 + 1040)) {
                          rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v88 + 78));
                        }
                        if (*((unsigned char *)v88 + 1472)) {
                          rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v88 + 132));
                        }
                      }
                      *(unsigned char *)(v4 + 1730) = 0;
                    }
                    for (i2 = *(void **)(v5 + 2776); i2; i2 = (void *)*i2)
                    {
                      float32x4_t v90 = (unsigned char *)i2[6];
                      if (v90[560]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v90 + 144));
                      }
                      if (v90[992]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v90 + 576));
                      }
                      if (v90[1424]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v90 + 1008));
                      }
                    }
                    for (i3 = *(void **)(v5 + 2816); i3; i3 = (void *)*i3)
                    {
                      float32x4_t v92 = (unsigned char *)i3[6];
                      if (v92[560]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v113, (const rf::data_flow::consumer::Mesh *)(v92 + 144));
                      }
                      if (v92[992]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v92 + 576));
                      }
                      if (v92[1424]) {
                        rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(v111, (const rf::data_flow::consumer::Mesh *)(v92 + 1008));
                      }
                    }
                    for (i4 = *(uint64_t **)(v5 + 2856); i4; i4 = (uint64_t *)*i4)
                    {
                      if (*((unsigned char *)i4 + 608)) {
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v113, (uint64_t)(i4 + 24));
                      }
                      if (*((unsigned char *)i4 + 1040)) {
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v112, (uint64_t)(i4 + 78));
                      }
                      if (*((unsigned char *)i4 + 1472)) {
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(v111, (uint64_t)(i4 + 132));
                      }
                    }
                    uint64_t v94 = REPrimitiveRenderAddContext();
                    rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v113, v9, v94, 9, 0);
                    uint64_t v95 = REPrimitiveRenderAddContext();
                    rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v112, v9, v95, 8, 0);
                    uint64_t v96 = REPrimitiveRenderAddContext();
                    rf::data_flow::consumer::MeshVisualizer::setMaterial((uint64_t)v111, v9, v96, 8, 0);
                    float32x4_t v97 = *(uint64_t **)(v5 + 288);
                    if (v97)
                    {
LABEL_249:
                      if (*(unsigned char *)(v102 + 72)) {
                        BOOL v98 = *((unsigned char *)v97 + 176) == 0;
                      }
                      else {
                        BOOL v98 = 0;
                      }
                      if (!v98)
                      {
                        int v99 = *(_DWORD *)(v102 + 68);
                        if (v99 == 1)
                        {
                          if (*((unsigned char *)v97 + 1040)) {
                            rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v112, (const rf::data_flow::consumer::Mesh *)(v97 + 78));
                          }
                          if (*((unsigned char *)v97 + 1472))
                          {
                            float32x4_t v100 = (const rf::data_flow::consumer::Mesh *)(v97 + 132);
                            float32x4_t v101 = v111;
LABEL_261:
                            rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(v101, v100);
                          }
                        }
                        else if (!v99 && *((unsigned char *)v97 + 608))
                        {
                          float32x4_t v100 = (const rf::data_flow::consumer::Mesh *)(v97 + 24);
                          float32x4_t v101 = v113;
                          goto LABEL_261;
                        }
                      }
                      float32x4_t v97 = (uint64_t *)*v97;
                      if (!v97) {
                        break;
                      }
                      goto LABEL_249;
                    }
                  }
                  break;
                }
                goto LABEL_135;
              }
            }
            float32x2_t v61 = (void *)*v61;
            if (!v61) {
              goto LABEL_165;
            }
          }
        }
      }
    }
  }
LABEL_263:
  std::mutex::unlock((std::mutex *)v5);
}

void sub_235A94278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationClassificationsAlpha(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  uint64_t v5 = *(void *)(this + 352);
  if (*(void *)(this + 360) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 396) = v4;
      ++v6;
      uint64_t v5 = *(void *)(this + 352);
      v7 += 16;
    }
    while (v6 < (*(void *)(this + 360) - v5) >> 4);
  }
  *(unsigned char *)(this + 1728) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationMaterialsAlpha(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  uint64_t v5 = *(void *)(this + 272);
  if (*(void *)(this + 280) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 316) = v4;
      ++v6;
      uint64_t v5 = *(void *)(this + 272);
      v7 += 16;
    }
    while (v6 < (*(void *)(this + 280) - v5) >> 4);
  }
  *(unsigned char *)(this + 1728) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationClassificationsAlpha(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  uint64_t v5 = *(void *)(this + 672);
  if (*(void *)(this + 680) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 716) = v4;
      ++v6;
      uint64_t v5 = *(void *)(this + 672);
      v7 += 16;
    }
    while (v6 < (*(void *)(this + 680) - v5) >> 4);
  }
  *(unsigned char *)(this + 1729) = 1;
  return this;
}

uint64_t rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationMaterialsAlpha(uint64_t this, float a2)
{
  float v2 = 1.0;
  if (a2 <= 1.0) {
    float v2 = a2;
  }
  BOOL v3 = a2 < 0.0;
  float v4 = 0.0;
  if (!v3) {
    float v4 = v2;
  }
  uint64_t v5 = *(void *)(this + 592);
  if (*(void *)(this + 600) != v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 12;
    do
    {
      *(float *)(v5 + v7) = v4;
      *(float *)(this + 636) = v4;
      ++v6;
      uint64_t v5 = *(void *)(this + 592);
      v7 += 16;
    }
    while (v6 < (*(void *)(this + 600) - v5) >> 4);
  }
  *(unsigned char *)(this + 1729) = 1;
  return this;
}

void rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer(rf::data_flow::consumer::DebugOptionConsumer *this)
{
  rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer(this);
  JUMPOUT(0x237DEE2B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  *(void *)this = &unk_26E8F3DD8;
  float v2 = (void *)*((void *)this + 210);
  if (v2) {
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 204);
  if (v3)
  {
    *((void *)this + 205) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 200);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 194);
  if (v5)
  {
    *((void *)this + 195) = v5;
    operator delete(v5);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 182);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 181);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 1408);
  unint64_t v6 = (void *)*((void *)this + 170);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 164);
  if (v7)
  {
    *((void *)this + 165) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 160);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 154);
  if (v9)
  {
    *((void *)this + 155) = v9;
    operator delete(v9);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 142);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 141);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 1088);
  uint64_t v10 = (void *)*((void *)this + 130);
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 124);
  if (v11)
  {
    *((void *)this + 125) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 120);
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 114);
  if (v13)
  {
    *((void *)this + 115) = v13;
    operator delete(v13);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 102);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 101);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 768);
  uint64_t v14 = (void *)*((void *)this + 90);
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 84);
  if (v15)
  {
    *((void *)this + 85) = v15;
    operator delete(v15);
  }
  unsigned int v16 = (void *)*((void *)this + 80);
  if (v16) {
    operator delete(v16);
  }
  unsigned int v17 = (void *)*((void *)this + 74);
  if (v17)
  {
    *((void *)this + 75) = v17;
    operator delete(v17);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 62);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 61);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 448);
  unint64_t v18 = (void *)*((void *)this + 50);
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 44);
  if (v19)
  {
    *((void *)this + 45) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 40);
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 34);
  if (v21)
  {
    *((void *)this + 35) = v21;
    operator delete(v21);
  }
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 22);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 21);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 14);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 13);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 12);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 11);
  RESharedPtr<REAsset>::~RESharedPtr((void *)this + 10);
}

rf::data_flow::consumer::MeshVisualizer *rf::data_flow::consumer::MeshVisualizer::MeshVisualizer(rf::data_flow::consumer::MeshVisualizer *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 6) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 6) = _Q0;
  *((_OWORD *)this + 7) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 16) = _Q0;
  rf::ColorPaletteMaterialARKit::ColorPaletteMaterialARKit((rf::data_flow::consumer::MeshVisualizer *)((char *)this + 144));
  rf::ColorPaletteClassificationARKit::ColorPaletteClassificationARKit((rf::data_flow::consumer::MeshVisualizer *)((char *)this + 224));
  *((_WORD *)this + 152) = 257;
  return this;
}

void sub_235A94560(_Unwind_Exception *a1)
{
  float v4 = v3;
  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v4);
  RESharedPtr<REAsset>::~RESharedPtr((void *)(v1 + 48));
  RESharedPtr<REAsset>::~RESharedPtr(v2);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(rf::ColorPaletteMaterialARKit *this)
{
  float v2 = (void *)*((void *)this + 6);
  if (v2) {
    operator delete(v2);
  }
  BOOL v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  float v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    float v2 = __p;
    do
    {
      BOOL v3 = (void *)*v2;
      float v4 = (std::__shared_weak_count *)v2[7];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      float v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, long long *a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::consumer::AnchorPropertyVisualizer &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t *a1, uint64_t a2)
{
  return rf::data_flow::consumer::AnchorPropertyVisualizer::operator()(*a1, a2);
}

void RFAnchorManagementServiceCreate()
{
  v1[2] = *MEMORY[0x263EF8340];
  v0[5] = 0;
  v0[0] = 0;
  *(void *)((char *)v0 + 7) = 0;
  v0[9] = 0;
  v1[0] = 0;
  *(void *)((char *)v1 + 7) = 0;
  if (qword_26AB58490 != -1) {
    dispatch_once(&qword_26AB58490, &__block_literal_global_0);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235A949D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::consumer::AnchorManagementConfig::~AnchorManagementConfig(rf::data_flow::consumer::AnchorManagementConfig *this)
{
  std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::~__value_func[abi:ne180100]((void *)this + 13);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__value_func[abi:ne180100]((void *)this + 9);
  std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__value_func[abi:ne180100]((void *)this + 5);
  std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__value_func[abi:ne180100](this);
}

uint64_t RFAnchorManagementServiceCleanupWithServiceLocator(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 16);
    __n128 result = MEMORY[0x237DEDEB0](a2);
    if (result)
    {
      __n128 result = REShadowManagerClearShadowClusterRootUpdateHandler();
      *(unsigned char *)(v2 + 200) = 0;
    }
  }
  return result;
}

uint64_t RFAnchorManagementUpdateAnchoringInScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  int v7 = 0;
  uint64_t v8 = ECSManagerNullable;
  char v9 = v5;
  uint64_t v10 = a2;
  char v11 = 1;
  uint64_t v12 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)(v3 + 8) + 16))(v3 + 8, &v7);
}

uint64_t RFAnchorManagementServiceUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return RFAnchorManagementServiceUpdateByDeltaTime(a1, a2, a3, 0.0);
}

uint64_t RFAnchorManagementServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  uint64_t v7 = *(void *)(a1 + 16) + 8;
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (!ECSManagerNullable)
  {
    char v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    float v11 = a4;
    uint64_t v12 = ECSManagerNullable;
    char v13 = v9;
    uint64_t v14 = a2;
    char v15 = 1;
    uint64_t v16 = 0;
    return (*(uint64_t (**)(uint64_t, float *))(*(void *)v7 + 16))(v7, &v11);
  }
  uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
  char v9 = 1;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  float v11 = a4;
  uint64_t v12 = ECSManagerNullable;
  char v13 = v9;
  uint64_t v14 = a2;
  char v15 = 1;
  uint64_t v16 = *a3;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)v7 + 16))(v7, &v11);
}

uint64_t RFAnchorManagementSetDebugVisualizationEnabled(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 64) != a2) {
    *(unsigned char *)(v2 + 64) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementIsDebugVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 64);
}

uint64_t RFAnchorManagementSetRequiresPlacement(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 65) != a2) {
    *(unsigned char *)(v2 + 65) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementGetRequiresPlacement(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 65);
}

uint64_t RFAnchorManagementSetRestrictNestedAnchoring(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 66) != a2) {
    *(unsigned char *)(v2 + 66) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementGetRestrictNestedAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 66);
}

uint64_t RFAnchorManagementSetRestrictAnchoring(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 67) != a2) {
    *(unsigned char *)(v2 + 67) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementGetRestrictAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 67);
}

uint64_t RFAnchorManagementSetCheckEntitledAncestor(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 68) != a2) {
    *(unsigned char *)(v2 + 68) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementGetCheckEntitledAncestor(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 68);
}

void *RFAnchorManagementAddNestedAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 208), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveNestedAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)(v2 + 208), &v4);
}

void *RFAnchorManagementAddAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 248), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveAnchoringEntitledPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)(v2 + 248), &v4);
}

void *RFAnchorManagementAddAnchoringEntitledAncestor(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 288), &v4, &v4);
}

uint64_t *RFAnchorManagementRemoveAnchoringEntitledAncestor(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)(v2 + 288), &v4);
}

uint64_t RFAnchorManagementSetStrictLocalAnchoring(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 69) != a2) {
    *(unsigned char *)(v2 + 69) = a2;
  }
  return result;
}

uint64_t RFAnchorManagementGetStrictLocalAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 69);
}

uint64_t RFAnchorManagerSetRestrictTransformSync(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 70) != a2) {
    *(unsigned char *)(v2 + 70) = a2;
  }
  return result;
}

uint64_t RFAnchorManagerGetRestrictTransformSync(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 70);
}

void *RFAnchorManagerAllowTransformSyncingForPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((float *)(v2 + 328), &v4, &v4);
}

uint64_t *RFAnchorManagerRevokeTransformSyncingForPeer(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v4 = a2;
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)(v2 + 328), &v4);
}

void *RFAnchorManagementSetAnchoringStateChangeCallback(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F3E70;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::function<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::operator=((void *)(v2 + 32), (uint64_t)v4);
  return std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__value_func[abi:ne180100](v4);
}

void sub_235A94F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RFAnchorManagerAddReservedAnchorIdentifier(uint64_t a1, long long *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  char v6 = 0;
  uint64_t v7 = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *a2;
  return std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v3 + 368, (uint64_t)&v5, &v5);
}

uint64_t *RFAnchorManagerRemoveReservedAnchorIdentifier(uint64_t a1, long long *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  char v6 = 0;
  uint64_t v7 = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *a2;
  return std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v3 + 368), (uint64_t)&v5);
}

void *RFAnchorManagementSetOnAnchorCreatedCallback(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F3F00;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::function<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::operator=((void *)(v2 + 72), (uint64_t)v4);
  return std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__value_func[abi:ne180100](v4);
}

void sub_235A950D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RFAnchorManagementSetOnCustomAnchorCreateCallback(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F4010;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::operator=((void *)(v2 + 104), (uint64_t)v4);
  return std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__value_func[abi:ne180100](v4);
}

void sub_235A95178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RFAnchorManagementSetOnImageAnchorChangedCallback(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F40A0;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::function<void ()(NSSet<ARReferenceImage *> *)>::operator=((void *)(v2 + 136), (uint64_t)v4);
  return std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::~__value_func[abi:ne180100](v4);
}

void sub_235A95220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorManagementSetInClientProcess(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 168) = a2;
  return result;
}

uint64_t RFAnchorManagementGetInClientProcess(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 168);
}

uint64_t RFAnchorManagementSetNeedClientAnchoring(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)(v2 + 169) = a2;
  *(unsigned char *)(v2 + 24) = 1;
  return result;
}

BOOL RFAnchorManagementGetNeedClientAnchoring(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 16) + 169) | *(unsigned __int8 *)(*(void *)(a1 + 16) + 24)) != 0;
}

uint64_t RFAnchorManagementSetClientNeedWorldAnchoring(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 170) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedWorldAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 170);
}

uint64_t RFAnchorManagementSetClientNeedPlaneAnchoring(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 171) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedPlaneAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 171);
}

uint64_t RFAnchorManagementSetClientNeedImageAnchoring(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 172) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedImageAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 172);
}

uint64_t RFAnchorManagementSetClientNeedObjectAnchoring(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 173) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedObjectAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 173);
}

uint64_t RFAnchorManagementSetClientNeedHandAnchoring(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 174) = a2;
  return result;
}

uint64_t RFAnchorManagementGetClientNeedHandAnchoring(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 174);
}

void *std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer24AnchorManagementConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_2[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      unint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    unint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  unint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::AnchorManagementConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58498 = 0u;
  xmmword_26AB584A8 = 0u;
  xmmword_26AB584B8 = 0u;
  unk_26AB584C8 = 0u;
  xmmword_26AB584D8 = 0u;
  unk_26AB584E8 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58498 + 1) = v7;
  *(void *)&xmmword_26AB584A8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::initCallback;
  *(void *)&xmmword_26AB584B8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::finalizeCallback;
  qword_26AB584D0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB584D8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_1 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235A95698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::finalizeCallback(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject>::operator()[abi:ne180100](v2);
  }
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::BridgableObject>::operator()[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_26E8F6738;
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::~__hash_table(a1 + 480);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::~__hash_table(a1 + 424);

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a1 + 368);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a1 + 328);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a1 + 288);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a1 + 248);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(a1 + 208);
  RESharedPtr<REAsset>::~RESharedPtr((void *)(a1 + 192));
  std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::~__value_func[abi:ne180100]((void *)(a1 + 136));
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__value_func[abi:ne180100]((void *)(a1 + 104));
  std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));
  std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,0>(uint64_t a1)
{
  rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription((rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription(rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription *this)
{
  rf::internal::assert_impl<(rf::internal::AssertLevel)0,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda(void)#1}>(*(void *)this != 0);
  MEMORY[0x237DED7B0](*(void *)this, *((void *)this + 1), *((void *)this + 2));
}

uint64_t rf::internal::assert_impl<(rf::internal::AssertLevel)0,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda(void)#1}>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!result)
  {
    rf::getMessage((rf *)"Event bug should not be null", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v1);
    uint64_t v4 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda()#1}::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v2 = &v3;
    }
    else {
      uint64_t v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    }
    int v7 = 136315138;
    uint64_t v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_235A95A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription::~SceneSubscription()::{lambda()#1}::operator()(void *a1@<X8>)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::string v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::string v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ARReferenceImage * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ARReferenceImage * {__strong}>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F3E70;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F3E70;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetAnchoringStateChangeCallback::$_0,std::allocator<RFAnchorManagementSetAnchoringStateChangeCallback::$_0>,void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::target_type()
{
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F3F00;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F3F00;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  if (v5 != -1)
  {
    p_CFTypeRef cf = &cf;
    ((void (*)(CFTypeRef **, unsigned char *))off_26E8F3F70[v5])(&p_cf, v4);
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
  }
  std::__throw_bad_variant_access[abi:ne180100]();
}

void sub_235A96018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnAnchorCreatedCallback::$_0,std::allocator<RFAnchorManagementSetOnAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::target_type()
{
}

void rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>()
{
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  LOBYTE(v6) = 0;
  *((void *)&v6 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  double result = *(double *)uu;
  long long v4 = v6;
  *a2 = *(_OWORD *)uu;
  a2[1] = v4;
  return result;
}

void rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::createWithCFAllocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>()
{
  if (rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag != -1) {
    dispatch_once(&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag, &__block_literal_global_18);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235A96480(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10F2C40557DAE71);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINSt3__17variantIJNS_9data_flow12CustomAnchorENS4_11PlaneAnchorENS4_11ImageAnchorENS4_12ObjectAnchorENS4_10FaceAnchorENS4_10BodyAnchorEEEEEEE13registerClassEv_block_invoke()
{
  rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(__p);
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass = 0u;
  xmmword_26882EE88 = 0u;
  xmmword_26882EE98 = 0u;
  unk_26882EEA8 = 0u;
  xmmword_26882EEB8 = 0u;
  unk_26882EEC8 = 0u;
  if (v2 >= 0) {
    size_t v0 = __p;
  }
  else {
    size_t v0 = (void **)__p[0];
  }
  *((void *)&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass
  + 1) = v0;
  *(void *)&xmmword_26882EE88 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback;
  *(void *)&xmmword_26882EE98 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback;
  qword_26882EEB0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26882EEB8 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback;
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfTypeID = _CFRuntimeRegisterClass();
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(unsigned char *a1@<X8>)
{
  size_t v2 = 0;
  int v3 = 1;
  for (char i = 115; i != 91; char i = aStdStringViewR_3[v2++ + 51])
  {
    if (i == 93)
    {
      int v5 = -1;
      goto LABEL_8;
    }
    if (!i)
    {
      size_t v2 = 0;
      a1[23] = 0;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v5 = 1;
LABEL_8:
  v3 += v5;
  if (v3) {
    goto LABEL_9;
  }
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    *((void *)a1 + 1) = v2;
    *((void *)a1 + 2) = v7 | 0x8000000000000000;
    *(void *)a1 = v8;
    a1 = v8;
  }
  else
  {
    a1[23] = v2;
    if (!v2) {
      goto LABEL_18;
    }
  }
  memcpy(a1, "std::variant<rf::data_flow::CustomAnchor, rf::data_flow::PlaneAnchor, rf::data_flow::ImageAnchor, rf::data_flow::ObjectAnchor, rf::data_flow::FaceAnchor, rf::data_flow::BodyAnchor>]", v2);
LABEL_18:
  a1[v2] = 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject,std::default_delete<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

void *rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::CFObjectRef(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZ44RFAnchorManagementSetOnAnchorCreatedCallbackENK3__0clENS_7variantIJN2rf9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEEEUlRT_E0_EEJRNS0_6__baseILNS0_6_TraitE1EJSC_SD_SE_SF_SG_SH_EEEEEEDcSJ_DpT0_@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F4010;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F4010;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0,std::allocator<RFAnchorManagementSetOnCustomAnchorCreateCallback::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::target_type()
{
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F40A0;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F40A0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0,std::allocator<RFAnchorManagementSetOnImageAnchorChangedCallback::$_0>,void ()(NSSet<ARReferenceImage *> *)>::target_type()
{
}

void RFEnvironmentProbePlacementServiceCreate()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v0 = 16777217;
  int v1 = 3;
  long long v2 = xmmword_235AF84F0;
  uint64_t v3 = 0x3F8000003F4CCCCDLL;
  char v4 = 0;
  long long v5 = xmmword_235AF8500;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (qword_26AB58500 != -1) {
    dispatch_once(&qword_26AB58500, &__block_literal_global_1);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235A96C44(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RFEnvironmentProbePlacementServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  float v9 = a3;
  uint64_t v10 = ECSManagerNullable;
  char v11 = v7;
  uint64_t v12 = a2;
  char v13 = 1;
  uint64_t v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 16) + 16))(v5 + 16, &v9);
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)(v2 + 32) = a2;
  *(unsigned char *)(v2 + 152) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetLocalizedProbeEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 152);
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 33) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetBackgroundParallaxEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 33);
}

uint64_t RFEnvironmentProbePlacementServiceSetMaxLocalizedProbeCount(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(_DWORD *)(v2 + 36) = a2;
  *(_DWORD *)(v2 + 156) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetMaxLocalizedProbeCount(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 156);
}

uint64_t RFEnvironmentProbePlacementServiceSetProbeUpdateInterval(uint64_t result, float a2)
{
  *(float *)(*(void *)(result + 16) + 40) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetProbeUpdateInterval(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 16) + 40);
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundProbeMaxExtent(uint64_t result, float a2)
{
  *(float *)(*(void *)(result + 16) + 44) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetBackgroundProbeMaxExtent(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 16) + 44);
}

uint64_t RFEnvironmentProbePlacementServiceSetIslandSearchExpansionFactor(uint64_t result, float a2)
{
  *(float *)(*(void *)(result + 16) + 48) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetIslandSearchExpansionFactor(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 16) + 48);
}

uint64_t RFEnvironmentProbePlacementServiceSetMaximumProbeSideRatio(uint64_t result, float a2)
{
  *(float *)(*(void *)(result + 16) + 52) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetMaximumProbeSideRatio(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 16) + 52);
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeCoverageThreshold(uint64_t result, float a2)
{
  *(float *)(*(void *)(result + 16) + 56) = a2;
  return result;
}

float RFEnvironmentProbePlacementServiceGetLocalizedProbeCoverageThreshold(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 16) + 56);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F4150;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((void *)(v2 + 88), (uint64_t)v4);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A96EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F41E0;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((void *)(v2 + 120), (uint64_t)v4);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A96F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F4270;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((void *)(v2 + 88), (uint64_t)v4);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A97038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F42F0;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((void *)(v2 + 120), (uint64_t)v4);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A97104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F4370;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator=((void *)(v2 + 88), (uint64_t)v4);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A971D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v5[0] = &unk_26E8F43F0;
  v5[1] = MEMORY[0x237DEE740](a2);
  v5[3] = v5;
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  std::function<void ()(rf::data_flow::EnvironmentProbe const&)>::operator=((void *)(v2 + 120), (uint64_t)v4);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v4);
  return std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100](v5);
}

void sub_235A9729C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(rf::data_flow::EnvironmentProbe const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t RFEnvironmentProbePlacementServiceSetLegacyBlurEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 34) = a2;
  return result;
}

uint64_t RFEnvironmentProbePlacementServiceGetLegacyBlurEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 34);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer24EnvironmentProbeConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_4[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      char v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    char v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  char v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::EnvironmentProbeConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58508 = 0u;
  xmmword_26AB58518 = 0u;
  xmmword_26AB58528 = 0u;
  unk_26AB58538 = 0u;
  xmmword_26AB58548 = 0u;
  unk_26AB58558 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58508 + 1) = v7;
  *(void *)&xmmword_26AB58518 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::initCallback;
  *(void *)&xmmword_26AB58528 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::finalizeCallback;
  qword_26AB58540 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58548 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_2 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235A97464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    rf::data_flow::consumer::EnvironmentProbeConsumer::~EnvironmentProbeConsumer((id *)(v2 + 16));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F4150;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F4150;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

double std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()@<D0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8) {
    (*(void (**)(uint64_t, unsigned __int8 *, __n128, __n128, __n128, __n128, __n128))(v8 + 16))(v8, uu, *a2, a2[1], a2[2], a2[3], *a3);
  }
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uuid_clear((unsigned __int8 *)a4);
  double result = *(double *)uu;
  *(_OWORD *)a4 = *(_OWORD *)uu;
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCB::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F41E0;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F41E0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(dst, 0, sizeof(dst));
  if (*((unsigned char *)a2 + 16)) {
    a2 = (uint64_t *)*a2;
  }
  uuid_copy(dst, (const unsigned __int8 *)a2);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(result + 16))(result, dst);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCB::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F4270;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F4270;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uuid_clear((unsigned __int8 *)a4);
  uuid_generate_random((unsigned __int8 *)a4);
  if (*(void *)(a1 + 8))
  {
    id v8 = objc_alloc(MEMORY[0x263F20E78]);
    int64_t v9 = rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)a4);
    id v10 = (id)objc_msgSend(v8, "initWithIdentifier:transform:extent:", v9, *a2, a2[2], a2[4], a2[6], *a3);

    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_235A97BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

id rf::data_flow::RFUUID::asNSUUID(rf::data_flow::RFUUID *this)
{
  id v2 = objc_alloc(MEMORY[0x263F08C38]);
  if (*((unsigned char *)this + 16)) {
    this = *(rf::data_flow::RFUUID **)this;
  }
  int v3 = (void *)[v2 initWithUUIDBytes:this];
  return v3;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F42F0;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F42F0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, double *a2)
{
  if (*(void *)(a1 + 8))
  {
    id v4 = objc_alloc(MEMORY[0x263F20E78]);
    uint64_t v5 = rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)a2);
    id v6 = (id)objc_msgSend(v4, "initWithIdentifier:transform:extent:", v5, a2[4], a2[6], a2[8], a2[10], a2[12]);

    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_235A97E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeAnchorRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F4370;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F4370;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::operator()@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X8>)
{
  *((unsigned char *)a4 + 16) = 0;
  a4[3] = 0;
  uuid_clear((unsigned __int8 *)a4);
  uuid_generate_random((unsigned __int8 *)a4);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    if (*((unsigned char *)a4 + 16)) {
      int64_t v9 = (uint64_t *)*a4;
    }
    else {
      int64_t v9 = a4;
    }
    long long v10 = *a2;
    long long v11 = a2[1];
    long long v12 = a2[2];
    long long v13 = a2[3];
    long long v14 = *a3;
    v15[0] = v9;
    v15[1] = 0;
    long long v16 = v10;
    long long v17 = v11;
    long long v18 = v12;
    long long v19 = v13;
    long long v20 = v14;
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, v15);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback::$_0>,rf::data_flow::RFUUID ()(re::Matrix4x4<float> const&,re::Vector3<float> const&)>::target_type()
{
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F43F0;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F43F0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    if (*((unsigned char *)a2 + 16)) {
      int v3 = (uint64_t *)*a2;
    }
    else {
      int v3 = a2;
    }
    long long v4 = *((_OWORD *)a2 + 2);
    long long v5 = *((_OWORD *)a2 + 3);
    long long v6 = *((_OWORD *)a2 + 4);
    long long v7 = *((_OWORD *)a2 + 5);
    long long v8 = *((_OWORD *)a2 + 6);
    v9[0] = v3;
    v9[1] = 0;
    long long v10 = v4;
    long long v11 = v5;
    long long v12 = v6;
    long long v13 = v7;
    long long v14 = v8;
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, v9);
  }
  return result;
}

uint64_t std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0,std::allocator<RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback::$_0>,void ()(rf::data_flow::EnvironmentProbe const&)>::target_type()
{
}

void rf::data_flow::provider::CameraMetadataProvider::setCameraMetadataExposure(rf::data_flow::provider::CameraMetadataProvider *this, float a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  char v5 = 0;
  char v6 = 0;
  __int16 v7 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v37 = 0;
  char v38 = 0;
  char v39 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  char v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  float v40 = a2;
  char v41 = 1;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  __int16 v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    rf::Session::consumeInputFromProvider(v2, (uint64_t)v3);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v3);
}

void sub_235A9846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::provider::CameraMetadataProvider::setClippingPointLux(rf::data_flow::provider::CameraMetadataProvider *this, float a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  char v5 = 0;
  char v6 = 0;
  __int16 v7 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v37 = 0;
  char v38 = 0;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  char v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  float v42 = a2;
  char v43 = 1;
  char v44 = 0;
  char v45 = 0;
  __int16 v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    rf::Session::consumeInputFromProvider(v2, (uint64_t)v3);
  }
  rf::data_flow::provider::InputData::~InputData((void **)v3);
}

void sub_235A985A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void rf::data_flow::provider::CameraMetadataProvider::~CameraMetadataProvider(rf::data_flow::provider::CameraMetadataProvider *this)
{
}

void RFQueryCreateEntityQueryUsingPredicate()
{
  if (qword_26AB58570 != -1) {
    dispatch_once(&qword_26AB58570, &__block_literal_global_2);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235A9868C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectIN3csq5QueryINSt3__113unordered_mapINS_9data_flow6RFUUIDENS4_7variantIJNS2_19EntryWithPropertiesIJNS_5query16REEntityPropertyENSA_16PositionPropertyEEEEEEENS7_4HashENS7_8EqualityENS4_9allocatorINS4_4pairIKS7_SE_EEEEEEEEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 99; ; char i = aStdStringViewR_5[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "csq::Query<std::unordered_map<rf::data_flow::RFUUID, std::variant<csq::EntryWithProperties<rf::query::REEntityProperty, rf::query::PositionProperty>>, rf::data_flow::RFUUID::Hash, rf::data_flow::RFUUID::Equality>>]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58578 = 0u;
  xmmword_26AB58588 = 0u;
  xmmword_26AB58598 = 0u;
  unk_26AB585A8 = 0u;
  xmmword_26AB585B8 = 0u;
  unk_26AB585C8 = 0u;
  __int16 v7 = __dst;
  if (v9 < 0) {
    __int16 v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58578 + 1) = v7;
  *(void *)&xmmword_26AB58588 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::initCallback;
  *(void *)&xmmword_26AB58598 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::finalizeCallback;
  qword_26AB585B0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB585B8 = rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyDebugDescriptionCallback;
  _MergedGlobals_3 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235A98850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::finalizeCallback(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>::operator()[abi:ne180100](v2);
  }
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<csq::Query<std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>::BridgableObject>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t rf::data_flow::consumer::LoggingConsumer::LoggingConsumer(uint64_t a1)
{
  *(void *)a1 = &unk_26E8F44D0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x263EF83A8], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 352) = dispatch_queue_create("RealityFusionLoggingConsumer", v3);

  *(void *)(a1 + 360) = dispatch_group_create();
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  return a1;
}

void rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer(rf::data_flow::consumer::LoggingConsumer *this)
{
  *(void *)this = &unk_26E8F44D0;
  uint64_t v2 = *((void *)this + 45);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    int v3 = (void *)*((void *)this + 45);
    *((void *)this + 45) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 44);
  *((void *)this + 44) = 0;

  uint64_t v5 = (void **)((char *)this + 368);
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v5);

  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32);
}

{
  uint64_t vars8;

  rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer(this);
  JUMPOUT(0x237DEE2B0);
}

void rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)v2);
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v4 = rf::realityFusionLogObject(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      char v38 = *(std::string **)(v2 + 1792);
      LODWORD(v57.__first_) = 134217984;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v57.__first_ + 4) = v38;
      _os_log_debug_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer saveSnapshotRequested for frame %lu", (uint8_t *)&v57, 0xCu);
    }

    if (*(char *)(a1 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    }
    else {
      std::string v49 = *(std::string *)(a1 + 32);
    }
    long long v5 = *(_OWORD *)(a1 + 80);
    long long v50 = *(_OWORD *)(a1 + 64);
    long long v51 = v5;
    long long v6 = *(_OWORD *)(a1 + 112);
    long long v52 = *(_OWORD *)(a1 + 96);
    long long v53 = v6;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v54, a1 + 128);
    int v55 = *(_DWORD *)(a1 + 160);
    __int16 v56 = *(_WORD *)(a1 + 164);
    v40.i64[0] = a1;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v41, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string v41 = v49;
    }
    long long v42 = v50;
    long long v43 = v51;
    long long v44 = v52;
    long long v45 = v53;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v54);
    int v47 = v55;
    __int16 v48 = v56;
    unint64_t v8 = *(NSObject **)(a1 + 352);
    unint64_t v7 = *(NSObject **)(a1 + 360);
    v57.__first_ = (std::__split_buffer<std::string>::pointer)MEMORY[0x263EF8330];
    v57.__begin_ = (std::__split_buffer<std::string>::pointer)3321888768;
    v57.__end_ = (std::__split_buffer<std::string>::pointer)___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__0cvU13block_pointerFvvEEv_block_invoke;
    v57.__end_cap_.__value_ = (std::string *)&__block_descriptor_192_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0_e5_v8__0l;
    v57.__end_cap_.__value_ = (std::allocator<std::string> *)v40.i64[0];
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v41;
    }
    long long v59 = v42;
    long long v60 = v43;
    long long v61 = v44;
    long long v62 = v45;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v63, (uint64_t)v46);
    int v64 = v47;
    __int16 v65 = v48;
    int64_t v9 = (void *)MEMORY[0x237DEE740](&v57);
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v63);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    dispatch_group_async(v7, v8, v9);

    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v46);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    int v3 = (rf *)std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v54);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 336))
  {
    long long v10 = rf::realityFusionLogObject(v3);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      char v39 = *(std::string **)(v2 + 1792);
      LODWORD(v57.__first_) = 134217984;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v57.__first_ + 4) = v39;
      _os_log_debug_impl(&dword_235A7C000, v10, OS_LOG_TYPE_DEBUG, "LoggingConsumer saveFullSnapshotRequested for frame %lu", (uint8_t *)&v57, 0xCu);
    }

    if (*(char *)(a1 + 215) < 0) {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a1 + 192), *(void *)(a1 + 200));
    }
    else {
      std::string v49 = *(std::string *)(a1 + 192);
    }
    long long v11 = *(_OWORD *)(a1 + 240);
    long long v50 = *(_OWORD *)(a1 + 224);
    long long v51 = v11;
    long long v12 = *(_OWORD *)(a1 + 272);
    long long v52 = *(_OWORD *)(a1 + 256);
    long long v53 = v12;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v54, a1 + 288);
    int v55 = *(_DWORD *)(a1 + 320);
    __int16 v56 = *(_WORD *)(a1 + 324);
    v40.i64[0] = a1;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v41, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string v41 = v49;
    }
    long long v42 = v50;
    long long v43 = v51;
    long long v44 = v52;
    long long v45 = v53;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v54);
    int v47 = v55;
    __int16 v48 = v56;
    long long v14 = *(NSObject **)(a1 + 352);
    long long v13 = *(NSObject **)(a1 + 360);
    v57.__first_ = (std::__split_buffer<std::string>::pointer)MEMORY[0x263EF8330];
    v57.__begin_ = (std::__split_buffer<std::string>::pointer)3321888768;
    v57.__end_ = (std::__split_buffer<std::string>::pointer)___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__1cvU13block_pointerFvvEEv_block_invoke;
    v57.__end_cap_.__value_ = (std::string *)&__block_descriptor_192_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1_e5_v8__0l;
    v57.__end_cap_.__value_ = (std::allocator<std::string> *)v40.i64[0];
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v41;
    }
    long long v59 = v42;
    long long v60 = v43;
    long long v61 = v44;
    long long v62 = v45;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v63, (uint64_t)v46);
    int v64 = v47;
    __int16 v65 = v48;
    long long v15 = (void *)MEMORY[0x237DEE740](&v57);
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v63);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    dispatch_group_async(v13, v14, v15);

    std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::reset[abi:ne180100](a1 + 192);
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v46);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v54);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  long long v16 = *(uint64_t **)(a1 + 368);
  long long v17 = *(uint64_t **)(a1 + 376);
  if (v17 != v16 && *(void *)(v2 + 2064))
  {
    int64x2_t v40 = 0uLL;
    v41.__r_.__value_.__r.__words[0] = 0;
    long long v18 = *(void **)(v2 + 2056);
    if (v18)
    {
      do
      {
        if (!*(unsigned char *)(v18[6] + 376)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        id v19 = (id) REAssetHandleCopyAssetIdentifierString();
        std::string::basic_string[abi:ne180100]<0>(&v49, (char *)[v19 UTF8String]);
        CFRelease(v19);
        long long v20 = (_OWORD *)v40.i64[1];
        if (v40.i64[1] >= v41.__r_.__value_.__r.__words[0])
        {
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v40.i64[1] - v40.i64[0]) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v41.__r_.__value_.__r.__words[0] - v40.i64[0]) >> 3) > v23) {
            unint64_t v23 = 0x5555555555555556 * ((uint64_t)(v41.__r_.__value_.__r.__words[0] - v40.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41.__r_.__value_.__r.__words[0] - v40.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v23;
          }
          v57.__end_cap_.__value_ = (std::allocator<std::string> *)&v41;
          if (v24) {
            long long v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v41, v24);
          }
          else {
            long long v25 = 0;
          }
          std::__split_buffer<std::string>::pointer begin = (std::string *)((char *)v25 + 8 * ((v40.i64[1] - v40.i64[0]) >> 3));
          v57.__first_ = v25;
          v57.__begin_ = begin;
          v57.__end_ = begin;
          v57.__end_cap_.__value_ = &v25[v24];
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(begin, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
            std::__split_buffer<std::string>::pointer begin = v57.__begin_;
            std::__split_buffer<std::string>::pointer end = v57.__end_;
          }
          else
          {
            long long v28 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
            begin->__r_.__value_.__r.__words[2] = v49.__r_.__value_.__r.__words[2];
            *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v28;
            std::__split_buffer<std::string>::pointer end = v25 + v22;
          }
          uint64_t v31 = v40.i64[1];
          uint64_t v30 = v40.i64[0];
          if (v40.i64[1] == v40.i64[0])
          {
            int64x2_t v33 = vdupq_n_s64(v40.u64[1]);
          }
          else
          {
            do
            {
              long long v32 = *(_OWORD *)(v31 - 24);
              begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v31 - 8);
              *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v32;
              --begin;
              *(void *)(v31 - 16) = 0;
              *(void *)(v31 - 8) = 0;
              *(void *)(v31 - 24) = 0;
              v31 -= 24;
            }
            while (v31 != v30);
            int64x2_t v33 = v40;
          }
          std::__split_buffer<std::string>::pointer v26 = end + 1;
          v40.i64[0] = (uint64_t)begin;
          v40.i64[1] = (uint64_t)&end[1];
          *(int64x2_t *)&v57.__begin_ = v33;
          long long v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v57.__end_cap_.__value_;
          v57.__end_cap_.__value_ = v34;
          v57.__first_ = (std::__split_buffer<std::string>::pointer)v33.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v57);
        }
        else
        {
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v40.i64[1], v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v21 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
            *(void *)(v40.i64[1] + 16) = *((void *)&v49.__r_.__value_.__l + 2);
            *long long v20 = v21;
          }
          std::__split_buffer<std::string>::pointer v26 = (std::__split_buffer<std::string>::pointer)((char *)v20 + 24);
        }
        v40.i64[1] = (uint64_t)v26;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }

        long long v18 = (void *)*v18;
      }
      while (v18);
      long long v16 = *(uint64_t **)(a1 + 368);
      long long v17 = *(uint64_t **)(a1 + 376);
    }
    for (; v16 != v17; v16 += 2)
    {
      uint64_t v35 = *v16;
      char v36 = (std::__shared_weak_count *)v16[1];
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(void *)(v35 + 88);
      if (v37)
      {
        v57.__first_ = *(std::__split_buffer<std::string>::pointer *)(v2 + 1792);
        (*(void (**)(uint64_t, std::__split_buffer<std::string> *, int64x2_t *))(*(void *)v37 + 48))(v37, &v57, &v40);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
    }
    v57.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  }
  std::mutex::unlock((std::mutex *)v2);
}

void sub_235A992AC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__split_buffer<std::string> *a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(rf::ConsumerRequest const&)::$_0::~$_0((uint64_t)&a9);
  rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest((rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *)&a32);
  std::mutex::unlock(v52);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::LoggingConsumer::consumeLatestUpdate(rf::ConsumerRequest const&)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest(rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

double std::__fs::filesystem::path::stem[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__stem(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_uuid_t dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&__uuid_t dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_uuid_t dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::extension[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_uuid_t dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&__uuid_t dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_uuid_t dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

std::string *rf::data_flow::consumer::LoggingConsumer::requestSaveFullSnapshot(std::string *this, std::string *a2)
{
  uint64_t v4 = rf::realityFusionLogObject((rf *)this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::basic_string_view<_CharT, _Traits>::size_type v6 = 0;
    _os_log_debug_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer::requestSaveFullSnapshot", v6, 2u);
  }

  return std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>(this + 8, a2);
}

std::string *std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>(std::string *this, std::string *__str)
{
  v19[3] = *MEMORY[0x263EF8340];
  if (this[6].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    long long v4 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[1];
    long long v6 = *(_OWORD *)&__str[1].__r_.__value_.__r.__words[1];
    long long v5 = *(_OWORD *)&__str[2].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[2].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v4;
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v5;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)&__str[4]);
    unint64_t v7 = this + 4;
    if (v17 != (void *)&this[4])
    {
      std::string::size_type v8 = (std::string::size_type)v18;
      std::string::pointer data = this[5].__r_.__value_.__l.__data_;
      if (v18 == (std::string::pointer)v17)
      {
        if (data == (std::string::pointer)v7)
        {
          (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
          (*(void (**)(std::string::pointer))(*(void *)v18 + 32))(v18);
          std::string::pointer v18 = 0;
          (*(void (**)(std::string::size_type, void *))(*(void *)this[5].__r_.__value_.__l.__data_ + 24))(this[5].__r_.__value_.__r.__words[0], v17);
          (*(void (**)(std::string::size_type))(*(void *)this[5].__r_.__value_.__l.__data_ + 32))(this[5].__r_.__value_.__r.__words[0]);
          this[5].__r_.__value_.__r.__words[0] = 0;
          std::string::pointer v18 = (std::string::pointer)v17;
          (*(void (**)(void *, std::string *))(v19[0] + 24))(v19, this + 4);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(void *, std::string *))(v17[0] + 24))(v17, this + 4);
          (*(void (**)(std::string::pointer))(*(void *)v18 + 32))(v18);
          std::string::pointer v18 = this[5].__r_.__value_.__l.__data_;
        }
        this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      }
      else if (data == (std::string::pointer)v7)
      {
        (*(void (**)(std::string *, void *))(v7->__r_.__value_.__r.__words[0] + 24))(this + 4, v17);
        (*(void (**)(std::string::size_type))(*(void *)this[5].__r_.__value_.__l.__data_ + 32))(this[5].__r_.__value_.__r.__words[0]);
        this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        std::string::pointer v18 = (std::string::pointer)v17;
      }
      else
      {
        std::string::pointer v18 = this[5].__r_.__value_.__l.__data_;
        this[5].__r_.__value_.__r.__words[0] = v8;
      }
    }
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v17);
    int v15 = __str[5].__r_.__value_.__r.__words[1];
    WORD2(this[5].__r_.__value_.__r.__words[1]) = WORD2(__str[5].__r_.__value_.__r.__words[1]);
    LODWORD(this[5].__r_.__value_.__r.__words[1]) = v15;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v10 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
    }
    long long v11 = *(_OWORD *)&__str[1].__r_.__value_.__r.__words[1];
    long long v12 = *(_OWORD *)&__str[2].__r_.__value_.__l.__data_;
    long long v13 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[1];
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[2].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v13;
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v11;
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v12;
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)&this[4], (uint64_t)&__str[4]);
    int v14 = __str[5].__r_.__value_.__r.__words[1];
    WORD2(this[5].__r_.__value_.__r.__words[1]) = WORD2(__str[5].__r_.__value_.__r.__words[1]);
    LODWORD(this[5].__r_.__value_.__r.__words[1]) = v14;
    this[6].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_235A9999C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *rf::data_flow::consumer::LoggingConsumer::startSavingSnapshots(rf::data_flow::consumer::LoggingConsumer *this, std::string *a2)
{
  long long v4 = rf::realityFusionLogObject(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long v6 = 0;
    _os_log_debug_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEBUG, "LoggingConsumer::startSavingSnapshots", v6, 2u);
  }

  return std::optional<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest>::operator=[abi:ne180100]<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest const&,void>((std::string *)((char *)this + 32), a2);
}

unint64_t *std::vector<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::push_back[abi:ne180100](unint64_t *result, long long *a2)
{
  std::__fs::filesystem::path::__string_view v3 = result;
  unint64_t v4 = result[2];
  long long v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *result;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    unint64_t v22 = result + 2;
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v13 = (char *)operator new(16 * v12);
    int v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)int v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *v3;
      long long v5 = (void *)v3[1];
    }
    unint64_t v7 = v14 + 16;
    if (v5 == (void *)v8)
    {
      int64x2_t v17 = vdupq_n_s64(v8);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v16;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (void *)v8);
      int64x2_t v17 = *(int64x2_t *)v3;
    }
    unint64_t *v3 = (unint64_t)v14;
    v3[1] = (unint64_t)v7;
    int64x2_t v20 = v17;
    unint64_t v18 = v3[2];
    v3[2] = (unint64_t)&v13[16 * v12];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    double result = (unint64_t *)std::__split_buffer<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    void *v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = v5 + 2;
  }
  v3[1] = (unint64_t)v7;
  return result;
}

void rf::data_flow::consumer::LoggingConsumer::removeCallbacks(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 368);
  std::__fs::filesystem::path::__string_view v3 = *(long long **)(a1 + 376);
  if ((long long *)v4 != v3)
  {
    while (*(void *)v4 != *a2)
    {
      v4 += 16;
      if ((long long *)v4 == v3)
      {
        uint64_t v4 = *(void *)(a1 + 376);
        break;
      }
    }
  }
  if ((long long *)v4 != v3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *,std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *,std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *>((uint64_t)&v9, (long long *)(v4 + 16), v3, v4);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 376);
    if (v7 != v5)
    {
      do
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 376) = v6;
  }
}

uint64_t std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__0cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(char *)(a1 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else {
    std::string v50 = *(std::string *)(a1 + 48);
  }
  float32x4_t v3 = *(float32x4_t *)(a1 + 96);
  v51[0] = *(float32x4_t *)(a1 + 80);
  v51[1] = v3;
  float32x4_t v4 = *(float32x4_t *)(a1 + 128);
  v51[2] = *(float32x4_t *)(a1 + 112);
  v51[3] = v4;
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v52, a1 + 144);
  int v54 = *(_DWORD *)(a1 + 176);
  __int16 v55 = *(_WORD *)(a1 + 180);
  uint64_t v5 = v2[1];
  std::mutex::lock((std::mutex *)v5);
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v49, 0);
  rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale((rf::synthetic::SyntheticUsdKitParser *)v49, 1.0);
  LODWORD(v6) = v54;
  if ((_BYTE)v54)
  {
    if (*(void *)(v5 + 1824) || (uint64_t v6 = *(void *)(v5 + 1864)) != 0)
    {
      for (char i = *(uint64_t **)(v5 + 1816); i; char i = (uint64_t *)*i)
      {
        v48.__pn_.__r_.__value_.__s.__data_[0] = 3;
        rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)i + 6, v51, (unsigned __int8 *)&v48);
      }
      for (uint64_t j = *(uint64_t **)(v5 + 1856); j; uint64_t j = (uint64_t *)*j)
      {
        v48.__pn_.__r_.__value_.__s.__data_[0] = 3;
        rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)j + 6, v51, (unsigned __int8 *)&v48);
      }
      LODWORD(v6) = 1;
    }
  }
  if (HIBYTE(v55) && (*(void *)(v5 + 1944) || *(void *)(v5 + 1984)))
  {
    for (k = *(uint64_t **)(v5 + 1936); k; k = (uint64_t *)*k)
    {
      v48.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)k + 6, v51, (unsigned __int8 *)&v48);
    }
    for (m = *(uint64_t **)(v5 + 1976); m; m = (uint64_t *)*m)
    {
      v48.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)m + 6, v51, (unsigned __int8 *)&v48);
    }
    LODWORD(v6) = 1;
  }
  if (BYTE1(v54) && (*(void *)(v5 + 2304) || *(void *)(v5 + 2344)))
  {
    for (n = (void *)(v5 + 2296);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v49, n[6], (long long *)v51))
    {
      n = (void *)*n;
      if (!n) {
        break;
      }
    }
    for (ichar i = (void *)(v5 + 2336);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v49, ii[6], (long long *)v51))
    {
      ichar i = (void *)*ii;
      if (!ii) {
        break;
      }
    }
    LODWORD(v6) = 1;
  }
  if (HIBYTE(v54) && *(void *)(v5 + 2064))
  {
    for (juint64_t j = *(uint64_t **)(v5 + 2056); jj; juint64_t j = (uint64_t *)*jj)
    {
      v48.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)jj + 6, v51, (unsigned __int8 *)&v48);
    }
    LODWORD(v6) = 1;
  }
  if ((_BYTE)v55 && *(void *)(v5 + 2104))
  {
    for (kk = *(uint64_t **)(v5 + 2096); kk; kk = (uint64_t *)*kk)
    {
      v48.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v49, (_OWORD **)kk + 6, v51, (unsigned __int8 *)&v48);
    }
    LODWORD(v6) = 1;
  }
  if (BYTE2(v54) && (*(void *)(v5 + 2424) || *(void *)(v5 + 2464)))
  {
    for (mm = (void *)(v5 + 2416);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v49, mm[6], v51))
    {
      mm = (void *)*mm;
      if (!mm) {
        break;
      }
    }
    for (nn = (void *)(v5 + 2456);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v49, nn[6], v51))
    {
      nn = (void *)*nn;
      if (!nn) {
        break;
      }
    }
  }
  else if (!v6)
  {
    goto LABEL_107;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v48.__pn_, (std::string **)&v50);
  std::__fs::filesystem::path::stem[abi:ne180100]((uint64_t)&v43, &v48);
  int v17 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v44, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v44 = v43;
  }
  unint64_t v18 = std::string::append(&v44, "_", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, *(void *)(v5 + 1792));
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v20 = &v42;
  }
  else {
    int64x2_t v20 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  unint64_t v22 = std::string::append(&v56, (const std::string::value_type *)v20, size);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  pn.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&__p, &v48);
  int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = __p;
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v25 = &v41;
  }
  else {
    long long v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v41.__r_.__value_.__l.__size_;
  }
  long long v27 = std::string::append(&pn, (const std::string::value_type *)v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  std::string::size_type v47 = v27->__r_.__value_.__r.__words[2];
  long long v46 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_70;
    }
  }
  else if ((v24 & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_70:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_83:
    operator delete(v43.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  if (v17 < 0) {
    goto LABEL_83;
  }
LABEL_78:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v56, (std::string **)&v46);
  std::__fs::filesystem::path::remove_filename[abi:ne180100](&v48);
  std::__fs::filesystem::path::operator/=[abi:ne180100](&v48, (std::__fs::filesystem::path *)&v56);
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v48.__pn_.__r_.__value_.__l.__data_, v48.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v48.__pn_;
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = (rf *)rf::synthetic::SyntheticUsdKitParser::save((uint64_t)v49, (uint64_t *)&pn);
  if (v29)
  {
    uint64_t v30 = rf::realityFusionLogObject(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v38 = *(void *)(v5 + 1792);
      LODWORD(v56.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = v38;
      _os_log_debug_impl(&dword_235A7C000, v30, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot for frame %lu", (uint8_t *)&v56, 0xCu);
    }

    long long v32 = rf::realityFusionLogObject(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      p_std::string pn = &pn;
      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
      }
      LODWORD(v56.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_pn;
      _os_log_debug_impl(&dword_235A7C000, v32, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot at path: %s", (uint8_t *)&v56, 0xCu);
    }

    if (v53) {
      (*(void (**)(uint64_t, std::string *))(*(void *)v53 + 48))(v53, &pn);
    }
    int64x2_t v33 = (uint64_t *)v2[46];
    for (i1 = (uint64_t *)v2[47]; v33 != i1; v33 += 2)
    {
      uint64_t v35 = *v33;
      char v36 = (std::__shared_weak_count *)v33[1];
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(void *)(v35 + 24);
      if (v37)
      {
        v56.__r_.__value_.__r.__words[0] = *(void *)(v5 + 1792);
        (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 48))(v37, &v56);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_107:

  std::mutex::unlock((std::mutex *)v5);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v52);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_235A9A408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,void *a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  operator delete(v60);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v62 - 89) < 0) {
    operator delete(*(void **)(v62 - 112));
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v61 < 0) {
    operator delete(a23);
  }
  if (a48 < 0) {
    operator delete(a43);
  }

  std::mutex::unlock(v59);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v58);
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  uint64_t result = std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  int v9 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 180) = *(_WORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return result;
}

void sub_235A9A638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__0(uint64_t a1)
{
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 144));
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEENK3__1cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(char *)(a1 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else {
    std::string v43 = *(std::string *)(a1 + 48);
  }
  float32x4_t v3 = *(float32x4_t *)(a1 + 96);
  v44[0] = *(float32x4_t *)(a1 + 80);
  v44[1] = v3;
  float32x4_t v4 = *(float32x4_t *)(a1 + 128);
  v44[2] = *(float32x4_t *)(a1 + 112);
  void v44[3] = v4;
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v45, a1 + 144);
  int v47 = *(_DWORD *)(a1 + 176);
  __int16 v48 = *(_WORD *)(a1 + 180);
  uint64_t v5 = v2[1];
  std::mutex::lock((std::mutex *)v5);
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v42, 0);
  rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale((rf::synthetic::SyntheticUsdKitParser *)v42, 1.0);
  if ((_BYTE)v47)
  {
    for (char i = *(uint64_t **)(v5 + 80); i; char i = (uint64_t *)*i)
    {
      v41.__pn_.__r_.__value_.__s.__data_[0] = 3;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v42, (_OWORD **)i + 6, v44, (unsigned __int8 *)&v41);
    }
  }
  if (HIBYTE(v48))
  {
    for (uint64_t j = *(uint64_t **)(v5 + 120); j; uint64_t j = (uint64_t *)*j)
    {
      v41.__pn_.__r_.__value_.__s.__data_[0] = 4;
      rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh((uint64_t)v42, (_OWORD **)j + 6, v44, (unsigned __int8 *)&v41);
    }
  }
  if (BYTE1(v47))
  {
    for (k = (void *)(v5 + 160);
          ;
          rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor((uint64_t)v42, (uint64_t)(k + 6), (long long *)v44))
    {
      k = (void *)*k;
      if (!k) {
        break;
      }
    }
  }
  if (BYTE2(v47))
  {
    for (m = (void *)(v5 + 408);
          ;
          rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject((uint64_t)v42, (uint64_t)(m + 6), v44))
    {
      m = (void *)*m;
      if (!m) {
        break;
      }
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v41.__pn_, (std::string **)&v43);
  std::__fs::filesystem::path::stem[abi:ne180100]((uint64_t)&v36, &v41);
  int v10 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v37, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = v36;
  }
  uint64_t v11 = std::string::append(&v37, "_", 1uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v35, *(void *)(v5 + 1792));
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v35;
  }
  else {
    long long v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  long long v15 = std::string::append(&v49, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  pn.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&__p, &v41);
  int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = __p;
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v18 = &v34;
  }
  else {
    unint64_t v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v34.__r_.__value_.__l.__size_;
  }
  int64x2_t v20 = std::string::append(&pn, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v40 = v20->__r_.__value_.__r.__words[2];
  long long v39 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_38:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_46;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_46:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v49, (std::string **)&v39);
  std::__fs::filesystem::path::remove_filename[abi:ne180100](&v41);
  std::__fs::filesystem::path::operator/=[abi:ne180100](&v41, (std::__fs::filesystem::path *)&v49);
  if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v41.__pn_.__r_.__value_.__l.__data_, v41.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v41.__pn_;
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  unint64_t v22 = (rf *)rf::synthetic::SyntheticUsdKitParser::save((uint64_t)v42, (uint64_t *)&pn);
  if (v22)
  {
    long long v23 = rf::realityFusionLogObject(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v31 = *(void *)(v5 + 1792);
      LODWORD(v49.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = v31;
      _os_log_debug_impl(&dword_235A7C000, v23, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved full snapshot for frame %lu", (uint8_t *)&v49, 0xCu);
    }

    long long v25 = rf::realityFusionLogObject(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      p_std::string pn = &pn;
      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
      }
      LODWORD(v49.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_pn;
      _os_log_debug_impl(&dword_235A7C000, v25, OS_LOG_TYPE_DEBUG, "LoggingConsumer: Saved snapshot at path: %s", (uint8_t *)&v49, 0xCu);
    }

    if (v46) {
      (*(void (**)(uint64_t, std::string *))(*(void *)v46 + 48))(v46, &pn);
    }
    long long v27 = (uint64_t *)v2[46];
    for (n = (uint64_t *)v2[47]; v27 != n; v27 += 2)
    {
      uint64_t v28 = *v27;
      uint64_t v29 = (std::__shared_weak_count *)v27[1];
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = *(void *)(v28 + 56);
      if (v30)
      {
        v49.__r_.__value_.__r.__words[0] = *(void *)(v5 + 1792);
        (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 48))(v30, &v49);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  }

  std::mutex::unlock((std::mutex *)v5);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v45);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_235A9ACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,void *a58)
{
  operator delete(v60);
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v62 - 73) < 0) {
    operator delete(*(void **)(v62 - 96));
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (v61 < 0) {
    operator delete(a26);
  }
  if (a54 < 0) {
    operator delete(a49);
  }

  std::mutex::unlock(v59);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v58);
  if (*(char *)(v62 - 217) < 0) {
    operator delete(*(void **)(v62 - 240));
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  uint64_t result = std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  int v9 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 180) = *(_WORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return result;
}

void sub_235A9AEBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea16_32c96_ZTSKZN2rf9data_flow8consumer15LoggingConsumer19consumeLatestUpdateERKNS_15ConsumerRequestEE3__1(uint64_t a1)
{
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 144));
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void std::__optional_destruct_base<rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 144) = 0;
  }
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    float32x4_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    std::string::size_type v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      long long v5 = this;
    }
    else {
      long long v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    int v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *,std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *,std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)long long v5 = 0;
      *((void *)v5 + 1) = 0;
      unint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    int v4 = (std::string *)a2;
  }
  else {
    int v4 = *a2;
  }
  if (v3 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v5)
  {
    if (v4 >= this && (std::string *)((char *)&this->__r_.__value_.__l.__data_ + 1) > v4)
    {
      if (v5 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v5 > 0x16)
      {
        uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v10 = v5 | 7;
        }
        uint64_t v11 = v10 + 1;
        p_uuid_t dst = (void **)operator new(v10 + 1);
        size_t v16 = v5;
        int64_t v17 = v11 | 0x8000000000000000;
        __uuid_t dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = v5;
        p_uuid_t dst = (void **)&__dst;
      }
      memcpy(p_dst, v4, v5);
      *((unsigned char *)p_dst + v5) = 0;
      if (v17 >= 0) {
        long long v12 = (const std::string::value_type *)&__dst;
      }
      else {
        long long v12 = (const std::string::value_type *)__dst;
      }
      if (v17 >= 0) {
        std::string::size_type v13 = HIBYTE(v17);
      }
      else {
        std::string::size_type v13 = v16;
      }
      std::string::append(this, v12, v13);
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst);
      }
    }
    else
    {
      long long v7 = this;
      if (v5 >= 0x17)
      {
        std::string::__grow_by(this, 0x16uLL, v5 - 22, 0, 0, 0, 0);
        this->__r_.__value_.__l.__size_ = 0;
        long long v7 = this;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          long long v7 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
      }
      for (uint64_t i = 0; i != v5; ++i)
        v7->__r_.__value_.__s.__data_[i] = v4->__r_.__value_.__s.__data_[i];
      v7->__r_.__value_.__s.__data_[i] = 0;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v5;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v5 & 0x7F;
      }
    }
  }
  return this;
}

void sub_235A9B3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RFAnchorPtrGetIdentifierPtr(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F4568[v1])(&v4, a1);
}

uint64_t RFAnchorPtrGetIdentifier(uint64_t a1, uint64_t a2)
{
  int v4 = &v5;
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 256);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26E8F4598[v2])(&v6, a1);
}

uint64_t RFAnchorPtrSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 256);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26E8F45C8[v2])(&v5, a1);
}

uint64_t RFAnchorPtrGetType(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, a1);
  if (v5 == 5) {
    uint64_t v1 = 5;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v5 >= 5) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = v5;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2;
}

uint64_t RFAnchorPtrCopyDescription(uint64_t a1)
{
  v3[35] = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, a1);
  uint64_t DebugDescriptionForAnchor = rf::helpers::getDebugDescriptionForAnchor((uint64_t)v3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return DebugDescriptionForAnchor;
}

void sub_235A9B60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RFAnchorPtrGetTrackable()
{
  return 1;
}

uint64_t RFAnchorPtrGetTracked(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F45F8[v1])(&v4, a1);
}

uint64_t RFAnchorPtrSetTracked(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 256);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F4628[v2])(&v5, a1);
}

__n128 RFAnchorPtrGetTransform(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6, a1);
  if (v7 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v5 = &v4;
  *(double *)&long long v1 = ((double (*)(char **, unsigned char *))off_26E8F4658[v7])(&v5, v6);
  long long v3 = v1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
  return (__n128)v3;
}

void sub_235A9B77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t RFAnchorPtrSetTransform(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v5 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v8 = v7;
  return ((uint64_t (*)(_OWORD **, uint64_t))off_26E8F4688[v5])(&v8, a1);
}

uint64_t RFAnchorPtrGetAlignment(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 256) == 1)
  {
    int v1 = *(_DWORD *)(a1 + 208);
    if (v1 == 1) {
      unsigned __int8 v2 = 2;
    }
    else {
      unsigned __int8 v2 = -1;
    }
    if (v1) {
      return v2;
    }
    else {
      return 1;
    }
  }
  else
  {
    return -1;
  }
}

void RFAnchorPtrSetAlignment(uint64_t a1, int a2)
{
  if (a1 && *(_DWORD *)(a1 + 256) == 1)
  {
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        int v3 = 1;
        goto LABEL_10;
      }
      char v4 = rf::realityFusionLogObject((rf *)a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "RFAnchorPtrSetAlignment: Setting kREAnchoringAlignmentAny to the anchor.", v5, 2u);
      }
    }
    int v3 = 0;
LABEL_10:
    if (*(_DWORD *)(a1 + 208) != v3)
    {
      *(_DWORD *)(a1 + 208) = v3;
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
}

uint64_t RFAnchorPtrGetClassification(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, a1);
  if (v5 == 1 && (v4 - 1) <= 4) {
    uint64_t v1 = qword_235AF8BF8[v4 - 1];
  }
  else {
    uint64_t v1 = -1;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return v1;
}

void RFAnchorPtrSetClassification(uint64_t a1, uint64_t a2)
{
  if (a1 && *(_DWORD *)(a1 + 256) == 1)
  {
    int v3 = *(_DWORD *)(a1 + 212);
    int v4 = 1;
    int v5 = v3;
    switch(a2)
    {
      case 1:
        goto LABEL_13;
      case 2:
        int v4 = 2;
        goto LABEL_12;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_7;
      case 4:
        int v4 = 3;
        goto LABEL_12;
      case 8:
        int v4 = 4;
        goto LABEL_12;
      default:
        if (a2 == 16)
        {
          int v4 = 5;
LABEL_12:
          int v5 = *(_DWORD *)(a1 + 212);
        }
        else
        {
LABEL_7:
          uint64_t v6 = rf::realityFusionLogObject((rf *)a1);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            v7[0] = 0;
            _os_log_error_impl(&dword_235A7C000, v6, OS_LOG_TYPE_ERROR, "RFAnchorPtrSetClassification: Cannot recognize the classification.", (uint8_t *)v7, 2u);
          }

          int v5 = *(_DWORD *)(a1 + 212);
          int v4 = v3;
        }
LABEL_13:
        if (v5 != v4)
        {
          *(_DWORD *)(a1 + 2std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v4;
          *(unsigned char *)(a1 + 104) = 1;
        }
        break;
    }
  }
}

__n128 RFAnchorPtrGetCenter(__n128 *a1)
{
  result.n128_u64[0] = 0;
  if (a1[16].n128_u32[0] == 1) {
    return a1[11];
  }
  return result;
}

float32x4_t *RFAnchorPtrSetCenter(float32x4_t *result, float32x4_t a2)
{
  if (result)
  {
    if (result[16].i32[0] == 1)
    {
      a2.i32[3] = 1.0;
      float32x4_t v2 = vaddq_f32(result[8], (float32x4_t)xmmword_235AF8BC0);
      int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
      if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) >= 1.0e-10
        || (float32x4_t v4 = vaddq_f32(result[9], (float32x4_t)xmmword_235AF8BE0),
            int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) >= 1.0e-10)
        || (float32x4_t v6 = vaddq_f32(result[10], (float32x4_t)xmmword_235AF8BD0),
            int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10)
        || (float32x4_t v8 = vsubq_f32(result[11], a2),
            int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
            fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10))
      {
        result[8] = (float32x4_t)xmmword_235AF75E0;
        result[9] = (float32x4_t)xmmword_235AF75F0;
        result[10] = (float32x4_t)xmmword_235AF7600;
        result[11] = a2;
        result[6].i8[8] = 1;
      }
    }
  }
  return result;
}

__n128 RFAnchorPtrGetExtent(__n128 *a1)
{
  result.n128_u64[0] = 0;
  if (a1[16].n128_u32[0] == 1) {
    return a1[12];
  }
  return result;
}

float32x4_t *RFAnchorPtrSetExtent(float32x4_t *result, float32x4_t a2)
{
  if (result && result[16].i32[0] == 1)
  {
    float32x4_t v2 = vsubq_f32(a2, result[12]);
    float32x4_t v3 = vmulq_f32(v2, v2);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]) >= 1.0e-10)
    {
      result[12] = a2;
      result[6].i8[8] = 1;
    }
  }
  return result;
}

CFStringRef RFAnchorPtrCopyReferenceName(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 256);
  if (v1 == 3)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    float32x4_t v3 = (const char *)(a1 + 128);
    if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v1 != 2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    float32x4_t v3 = "";
    return CFStringCreateWithCString(v4, v3, 0x8000100u);
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  float32x4_t v3 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
LABEL_4:
  }
    float32x4_t v3 = *(const char **)v3;
LABEL_5:
  CFAllocatorRef v4 = v2;
  return CFStringCreateWithCString(v4, v3, 0x8000100u);
}

void RFAnchorPtrSetReferenceName(uint64_t a1, const __CFString *a2)
{
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  if (!a1) {
    goto LABEL_39;
  }
  int v3 = *(_DWORD *)(a1 + 256);
  if (v3 == 3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 151);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 151);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 136);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v10 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 128), p_str, *(void *)(a1 + 136))) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 151)) {
          goto LABEL_39;
        }
        std::string::size_type v13 = (unsigned __int8 *)(a1 + 128);
        while (*v13 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v13;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v9) {
            goto LABEL_39;
          }
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 128), &__str);
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_39;
    }
    uint64_t v4 = *(unsigned __int8 *)(a1 + 159);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 159);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 144);
    }
    std::string::size_type v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v6 = __str.__r_.__value_.__l.__size_;
    }
    if (v5 == v6)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int8x16_t v7 = &__str;
      }
      else {
        int8x16_t v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v4 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 136), v7, *(void *)(a1 + 144))) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 159)) {
          goto LABEL_39;
        }
        float32x4_t v8 = (unsigned __int8 *)(a1 + 136);
        while (*v8 == v7->__r_.__value_.__s.__data_[0])
        {
          ++v8;
          int8x16_t v7 = (std::string *)((char *)v7 + 1);
          if (!--v4) {
            goto LABEL_39;
          }
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 136), &__str);
  }
  *(unsigned char *)(a1 + 104) = 1;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_235A9BE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RFAnchorPtrCopyReferenceGroup(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 256);
  if (v1 == 3)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v3 = (const char *)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v1 != 2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v3 = "";
    return CFStringCreateWithCString(v4, v3, 0x8000100u);
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  int v3 = (const char *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
LABEL_4:
  }
    int v3 = *(const char **)v3;
LABEL_5:
  CFAllocatorRef v4 = v2;
  return CFStringCreateWithCString(v4, v3, 0x8000100u);
}

void RFAnchorPtrSetReferenceGroup(uint64_t a1, const __CFString *a2)
{
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  if (!a1) {
    goto LABEL_39;
  }
  int v3 = *(_DWORD *)(a1 + 256);
  if (v3 == 3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 175);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 175);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 160);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v10 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 152), p_str, *(void *)(a1 + 160))) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 175)) {
          goto LABEL_39;
        }
        std::string::size_type v13 = (unsigned __int8 *)(a1 + 152);
        while (*v13 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v13;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v9) {
            goto LABEL_39;
          }
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 152), &__str);
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_39;
    }
    uint64_t v4 = *(unsigned __int8 *)(a1 + 183);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 183);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 168);
    }
    std::string::size_type v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v6 = __str.__r_.__value_.__l.__size_;
    }
    if (v5 == v6)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int8x16_t v7 = &__str;
      }
      else {
        int8x16_t v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v4 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 160), v7, *(void *)(a1 + 168))) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 183)) {
          goto LABEL_39;
        }
        float32x4_t v8 = (unsigned __int8 *)(a1 + 160);
        while (*v8 == v7->__r_.__value_.__s.__data_[0])
        {
          ++v8;
          int8x16_t v7 = (std::string *)((char *)v7 + 1);
          if (!--v4) {
            goto LABEL_39;
          }
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 160), &__str);
  }
  *(unsigned char *)(a1 + 104) = 1;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_235A9C01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    CFAllocatorRef v2 = *(__n128 **)a2;
  }
  else {
    CFAllocatorRef v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ***a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **a1;
  LOBYTE(v9) = 0;
  *((void *)&v9 + 1) = 0;
  uuid_clear((unsigned __int8 *)&v8);
  long long v8 = *v3;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v4 = *(const unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = (const unsigned __int8 *)a2;
  }
  if ((_BYTE)v9) {
    uint64_t v5 = (const unsigned __int8 *)v8;
  }
  else {
    uint64_t v5 = (const unsigned __int8 *)&v8;
  }
  if (uuid_compare(v4, v5))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned __int8 **result, uint64_t a2)
{
  int v2 = **result;
  if (*(unsigned __int8 *)(a2 + 99) != v2)
  {
    *(unsigned char *)(a2 + 99) = v2;
    *(unsigned char *)(a2 + 104) = 1;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

float32x4_t **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorPtrSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(float32x4_t **result, float32x4_t *a2)
{
  float32x4_t v2 = **result;
  float32x4_t v3 = (*result)[1];
  float32x4_t v4 = (*result)[2];
  float32x4_t v5 = (*result)[3];
  float32x4_t v6 = vsubq_f32(a2[2], v2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) >= 1.0e-10
    || (float32x4_t v8 = vsubq_f32(a2[3], v3),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v10 = vsubq_f32(a2[4], v4),
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) >= 1.0e-10)
    || (float32x4_t v12 = vsubq_f32(a2[5], v5),
        int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) >= 1.0e-10))
  {
    a2[2] = v2;
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = v5;
    a2[6].i8[8] = 1;
  }
  return result;
}

CFStringRef *rf::UserDefaults::UserDefaults(CFStringRef *a1, const UInt8 *a2)
{
  float32x4_t v2 = a2;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    if ((v4 & 0x80u) == 0) {
      CFIndex v5 = v4;
    }
    else {
      CFIndex v5 = *((void *)v2 + 1);
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
    *a1 = v6;
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v8 = v2[23];
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)v2 + 1);
  }
  if (!v8)
  {
    int8x16_t v9 = (const void *)*MEMORY[0x263EFFE60];
    if (*MEMORY[0x263EFFE60]) {
      CFRetain((CFTypeRef)*MEMORY[0x263EFFE60]);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v12, v9);
    CFStringRef v10 = *a1;
    *a1 = v12;
    CFStringRef v12 = v10;
    if (v10) {
      CFRelease(v10);
    }
  }
  return a1;
}

void sub_235A9CCAC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  int v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void rf::UserDefaults::getValue(CFStringRef *a1@<X0>, const UInt8 *a2@<X1>, CFPropertyListRef *a3@<X8>)
{
  float32x4_t v3 = a2;
  CFIndex v6 = a2[23];
  if ((v6 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v7 = *((void *)v3 + 1);
    if ((v6 & 0x80u) == 0) {
      CFIndex v8 = v6;
    }
    else {
      CFIndex v8 = v7;
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, a2, v8, 0x8000100u, 0);
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    CFStringRef v9 = 0;
  }
  *a3 = CFPreferencesCopyAppValue(v9, *a1);
  if (v9) {
    CFRelease(v9);
  }
}

void sub_235A9CDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  float32x4_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<__CFData const*>::~ObjectRef(const void **a1)
{
  float32x4_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t rf::UserDefaults::BOOLValue(CFStringRef *a1, const UInt8 *a2)
{
  rf::UserDefaults::getValue(a1, a2, &cf);
  CFNumberRef v2 = (const __CFNumber *)cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID() || v3 == CFBooleanGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v2, kCFNumberIntType, &valuePtr);
      BOOL v4 = valuePtr != 0;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
      BOOL v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    BOOL v4 = 0;
    int v5 = 0;
  }
  return v4 | (v5 << 8);
}

void sub_235A9CF30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t rf::UserDefaults::intValue(CFStringRef *a1, const UInt8 *a2)
{
  rf::UserDefaults::getValue(a1, a2, &cf);
  CFNumberRef v2 = (const __CFNumber *)cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      uint64_t v7 = 0;
      CFNumberGetValue(v2, kCFNumberLongLongType, &v7);
      unsigned __int8 v4 = v7;
      unint64_t v5 = v7 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      unsigned __int8 v4 = 0;
      unint64_t v5 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    unint64_t v5 = 0;
    unsigned __int8 v4 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | v4;
}

void sub_235A9CFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t rf::UserDefaults::uintValue(CFStringRef *a1, const UInt8 *a2)
{
  rf::UserDefaults::getValue(a1, a2, &cf);
  CFNumberRef v2 = (const __CFNumber *)cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      uint64_t v7 = 0;
      CFNumberGetValue(v2, kCFNumberLongLongType, &v7);
      unsigned __int8 v4 = v7;
      unint64_t v5 = v7 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      unsigned __int8 v4 = 0;
      unint64_t v5 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    unint64_t v5 = 0;
    unsigned __int8 v4 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | v4;
}

void sub_235A9D0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t rf::UserDefaults::floatValue(CFStringRef *a1, const UInt8 *a2)
{
  rf::UserDefaults::getValue(a1, a2, &cf);
  CFNumberRef v2 = (const __CFNumber *)cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue(v2, kCFNumberFloatType, &valuePtr);
      unsigned int v4 = valuePtr;
      uint64_t v5 = 0x100000000;
    }
    else
    {
      uint64_t v5 = 0;
      unsigned int v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  return v5 & 0x100000000 | v4;
}

void sub_235A9D170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return this;
}

void sub_235A9D214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    CFIndex v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_235A9D2A8(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (UInt8 *)a2;
    }
    else {
      uint64_t v7 = *(UInt8 **)a2;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_235A9D3FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    CFIndex v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    CFIndex v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t rf::data_flow::validateAnchor(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf9data_flow14validateAnchorERKNS_7variantIJNS7_12CustomAnchorENS7_11PlaneAnchorENS7_11ImageAnchorENS7_12ObjectAnchorENS7_10FaceAnchorENS7_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJS9_SA_SB_SC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix
                                                    + v1))(&v4, a1);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, float32x4_t *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(a2[4]), (int8x16_t)vcgezq_f32(a2[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[2]), (int8x16_t)vcgezq_f32(a2[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[3]), (int8x16_t)vcgezq_f32(a2[3]))))))BOOL v3 = 0; {
  else
  }
    BOOL v3 = v2 == 0;
  if (!v3)
  {
    size_t v8 = a2;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(__p, (rf::data_flow::RFUUID **)&v8);
    rf::internal::logAssert((const char *)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v6);
    uint64_t v10 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(&v9, (rf::data_flow::RFUUID **)&v8);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v7 = &v9;
    }
    else {
      size_t v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    int v13 = 136315138;
    int v14 = v7;
    _os_log_send_and_compose_impl();
    std::string::~string(&v9);
    _os_crash_msg();
    __break(1u);
  }
  float32_t result = a2[5].f32[3];
  size_t v8 = a2;
  return result;
}

void sub_235A9D6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  int v2 = (rf::data_flow::RFUUID *)this;
  BOOL v3 = (std::string *)v26;
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v4 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))BOOL v5 = 0; {
  else
  }
    BOOL v5 = v4 == 0;
  if (!v5)
  {
    unint64_t v22 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(__p, &v22);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v11);
    uint64_t v24 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)std::string::size_type v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    BOOL v3 = &v23;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &v23;
    }
    else {
      char v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v12;
    int v20 = 12;
    int v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
LABEL_22:
    unint64_t v22 = v2;
    rf::data_flow::RFUUID::string(v2, v26);
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
    rf::data_flow::RFUUID::string(v2, v26);
    if ((SBYTE7(v27) & 0x80u) == 0) {
      int v13 = v26;
    }
    else {
      int v13 = (void **)v26[0];
    }
    rf::getMessage((rf *)"Plane anchor %s center transform cannot contain NaN", __p, v13, v20, v22);
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v14);
    uint64_t v24 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)std::string::size_type v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_0::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v23;
    }
    else {
      long long v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v15;
    LODWORD(v21) = 12;
    long long v16 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
    unint64_t v22 = v16;
    rf::data_flow::RFUUID::string(v16, v26);
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
    rf::data_flow::RFUUID::string(v16, v26);
    if ((SBYTE7(v27) & 0x80u) == 0) {
      long long v17 = v26;
    }
    else {
      long long v17 = (void **)v26[0];
    }
    rf::getMessage((rf *)"Plane anchor %s extent cannot contain NaN", __p, v17, v21, v22);
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v18);
    uint64_t v24 = 0;
    memset(&__p[2], 0, 24);
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)std::string::size_type v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_1::operator()(&v23, &v22);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &v23;
    }
    else {
      long long v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v19;
    _os_log_send_and_compose_impl();
    std::string::~string(&v23);
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v22 = (rf::data_flow::RFUUID *)this;
  int v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[10]), (int8x16_t)vcgezq_f32(this[10])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[8]), (int8x16_t)vcgezq_f32(this[8])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[9]), (int8x16_t)vcgezq_f32(this[9]))))))BOOL v8 = 0; {
  else
  }
    BOOL v8 = v7 == 0;
  if (!v8) {
    goto LABEL_22;
  }
  unint64_t v22 = (rf::data_flow::RFUUID *)this;
  float32_t result = this[12].f32[2];
  unint64_t v22 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_235A9DBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))BOOL v3 = 0; {
  else
  }
    BOOL v3 = v2 == 0;
  if (!v3)
  {
    char v12 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(__p, &v12);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v6);
    uint64_t v14 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(&v13, &v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v13;
    }
    else {
      int v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v7;
    BOOL v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
    char v12 = v8;
    rf::data_flow::RFUUID::string(v8, v16);
    if (SBYTE7(v17) < 0) {
      operator delete(v16[0]);
    }
    rf::data_flow::RFUUID::string(v8, v16);
    if ((SBYTE7(v17) & 0x80u) == 0) {
      std::string v9 = v16;
    }
    else {
      std::string v9 = (void **)v16[0];
    }
    rf::getMessage((rf *)"Image anchor %s extent cannot contain NaN", __p, v9, 12, v12);
    if (SBYTE7(v17) < 0) {
      operator delete(v16[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v10);
    uint64_t v14 = 0;
    memset(&__p[2], 0, 24);
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ImageAnchor const&)::$_0::operator()(&v13, &v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFRange v11 = &v13;
    }
    else {
      CFRange v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v11;
    _os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
  }
  char v12 = (rf::data_flow::RFUUID *)this;
  float32_t result = this[12].f32[2];
  char v12 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_235A9DF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))BOOL v3 = 0; {
  else
  }
    BOOL v3 = v2 == 0;
  if (!v3)
  {
    long long v17 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(__p, &v17);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v6);
    uint64_t v19 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)unint64_t v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v18;
    }
    else {
      int v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    v21[2] = 136315138;
    *(void *)&v21[3] = v7;
    BOOL v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
    long long v17 = v8;
    rf::data_flow::RFUUID::string(v8, v22);
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    rf::data_flow::RFUUID::string(v8, v22);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      std::string v9 = v22;
    }
    else {
      std::string v9 = (void **)v22[0];
    }
    rf::getMessage((rf *)"Object anchor %s center cannot contain NaN", __p, v9, 12, v17);
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v10);
    uint64_t v19 = 0;
    memset(v21, 0, sizeof(v21));
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)unint64_t v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_0::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFRange v11 = &v18;
    }
    else {
      CFRange v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    v21[2] = 136315138;
    *(void *)&v21[3] = v11;
    LODWORD(v16) = 12;
    char v12 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
    long long v17 = v12;
    rf::data_flow::RFUUID::string(v12, v22);
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    rf::data_flow::RFUUID::string(v12, v22);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      std::string v13 = v22;
    }
    else {
      std::string v13 = (void **)v22[0];
    }
    rf::getMessage((rf *)"Object anchor %s extent cannot contain NaN", __p, v13, v16, v17);
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(v21[1]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v14);
    uint64_t v19 = 0;
    memset(v21, 0, sizeof(v21));
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)unint64_t v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_1::operator()(&v18, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v18;
    }
    else {
      long long v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    v21[2] = 136315138;
    *(void *)&v21[3] = v15;
    _os_log_send_and_compose_impl();
    std::string::~string(&v18);
    _os_crash_msg();
    __break(1u);
  }
  long long v17 = (rf::data_flow::RFUUID *)this;
  float32_t result = this[14].f32[2];
  long long v17 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_235A9E434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  int v2 = (rf::data_flow::RFUUID *)this;
  BOOL v3 = (std::string *)v27;
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v4 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))BOOL v5 = 0; {
  else
  }
    BOOL v5 = v4 == 0;
  if (!v5)
  {
    long long v20 = (rf::data_flow::RFUUID *)this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(__p, &v20);
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v11);
    uint64_t v22 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    BOOL v3 = &v21;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &v21;
    }
    else {
      char v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    int v25 = 136315138;
    long long v26 = v12;
    LODWORD(v19) = 12;
    int v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  long long v20 = (rf::data_flow::RFUUID *)this;
  int v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[10]), (int8x16_t)vcgezq_f32(this[10])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[8]), (int8x16_t)vcgezq_f32(this[8])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[9]), (int8x16_t)vcgezq_f32(this[9]))))))BOOL v8 = 0; {
  else
  }
    BOOL v8 = v7 == 0;
  if (!v8)
  {
LABEL_24:
    long long v20 = v2;
    rf::data_flow::RFUUID::string(v2, v27);
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
    rf::data_flow::RFUUID::string(v2, v27);
    if ((SBYTE7(v28) & 0x80u) == 0) {
      std::string v13 = v27;
    }
    else {
      std::string v13 = (void **)v27[0];
    }
    rf::getMessage((rf *)"Face anchor %s leftEye cannot contain NaN", __p, v13, v19, v20);
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v14);
    uint64_t v22 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    BOOL v3 = &v21;
    rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_0::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v21;
    }
    else {
      long long v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    int v25 = 136315138;
    long long v26 = v15;
    LODWORD(v19) = 12;
    int v2 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
LABEL_37:
    long long v20 = v2;
    rf::data_flow::RFUUID::string(v2, v27);
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
    rf::data_flow::RFUUID::string(v2, v27);
    if ((SBYTE7(v28) & 0x80u) == 0) {
      uint64_t v16 = v27;
    }
    else {
      uint64_t v16 = (void **)v27[0];
    }
    rf::getMessage((rf *)"Face anchor %s rightEye cannot contain NaN", __p, v16, v19, v20);
    if (SBYTE7(v28) < 0) {
      operator delete(v27[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v17);
    uint64_t v22 = 0;
    *(_OWORD *)&v3[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v3[2].__r_.__value_.__r.__words[2] = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_1::operator()(&v21, &v20);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v18 = &v21;
    }
    else {
      std::string v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    int v25 = 136315138;
    long long v26 = v18;
    _os_log_send_and_compose_impl();
    std::string::~string(&v21);
    _os_crash_msg();
    __break(1u);
  }
  long long v20 = (rf::data_flow::RFUUID *)this;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[12]), (int8x16_t)vcgezq_f32(this[12])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[13]), (int8x16_t)vcgezq_f32(this[13])))))|| (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[14]), (int8x16_t)vcgezq_f32(this[14])))) & 0xF) != 0)
  {
    goto LABEL_37;
  }
  float32_t result = this[15].f32[3];
  long long v20 = (rf::data_flow::RFUUID *)this;
  return result;
}

void sub_235A9E9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float32_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::validateAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(int a1, float32x4_t *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v2 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_235AF8C30, vorrq_s8((int8x16_t)vcltzq_f32(this[4]), (int8x16_t)vcgezq_f32(this[4])))) & 0xF;
  if (vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_235AF8C20, (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[2]), (int8x16_t)vcgezq_f32(this[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(this[3]), (int8x16_t)vcgezq_f32(this[3]))))))BOOL v3 = 0; {
  else
  }
    BOOL v3 = v2 == 0;
  if (!v3)
  {
    char v12 = this;
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(__p, (rf::data_flow::RFUUID **)&v12);
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v6);
    uint64_t v14 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(&v13, (rf::data_flow::RFUUID **)&v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v13;
    }
    else {
      int v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v7;
    BOOL v8 = (rf::data_flow::RFUUID *)_os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
    rf::data_flow::RFUUID::string(v8, v16);
    if (SBYTE7(v17) < 0) {
      operator delete(v16[0]);
    }
    rf::data_flow::RFUUID::string(v8, v16);
    if ((SBYTE7(v17) & 0x80u) == 0) {
      std::string v9 = v16;
    }
    else {
      std::string v9 = (void **)v16[0];
    }
    rf::getMessage((rf *)"Body anchor %s estimatedScaleFactor cannot contain NaN", __p, v9, 12, v12);
    if (SBYTE7(v17) < 0) {
      operator delete(v16[0]);
    }
    rf::internal::logAssert((const char *)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v10);
    uint64_t v14 = 0;
    memset(&__p[2], 0, 24);
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::data_flow::validateAnchor(rf::data_flow::BodyAnchor const&)::$_0::operator()(&v13, (rf::data_flow::RFUUID **)&v12);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFRange v11 = &v13;
    }
    else {
      CFRange v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[3]) = 136315138;
    *(void **)((char *)&__p[3] + 4) = v11;
    _os_log_send_and_compose_impl();
    std::string::~string(&v13);
    _os_crash_msg();
    __break(1u);
  }
  char v12 = this;
  float32_t result = this[8].f32[0];
  char v12 = this;
  return result;
}

void sub_235A9ED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::CustomAnchor>(rf::data_flow::CustomAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::CustomAnchor]";
  int v7 = "rf::data_flow::CustomAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9EE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::PlaneAnchor>(rf::data_flow::PlaneAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::PlaneAnchor]";
  int v7 = "rf::data_flow::PlaneAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ImageAnchor>(rf::data_flow::ImageAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::ImageAnchor]";
  int v7 = "rf::data_flow::ImageAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::ObjectAnchor>(rf::data_flow::ObjectAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::ObjectAnchor]";
  int v7 = "rf::data_flow::ObjectAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::FaceAnchor>(rf::data_flow::FaceAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::FaceAnchor]";
  int v7 = "rf::data_flow::FaceAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateBaseAnchorProperty<rf::data_flow::BodyAnchor>(rf::data_flow::BodyAnchor const&)::{lambda(void)#1}::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v4 = 1;
  char v5 = 114;
  CFIndex v6 = "f::data_flow::BodyAnchor]";
  int v7 = "rf::data_flow::BodyAnchor]";
  while (1)
  {
    if (v5 == 91)
    {
      int v8 = 1;
      goto LABEL_10;
    }
    if (v5 != 93) {
      break;
    }
    int v8 = -1;
LABEL_10:
    v4 += v8;
    if (!v4) {
      goto LABEL_12;
    }
LABEL_11:
    char v9 = *v6++;
    char v5 = v9;
  }
  if (v5) {
    goto LABEL_11;
  }
  int v7 = 0;
LABEL_12:
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  rf::getMessage((rf *)"%s %s cannot contain NaN transform", a1, v7, v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_0::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Plane anchor %s center transform cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::PlaneAnchor const&)::$_1::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Plane anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ImageAnchor const&)::$_0::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Image anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_0::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Object anchor %s center cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::ObjectAnchor const&)::$_1::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Object anchor %s extent cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_0::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Face anchor %s leftEye cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::FaceAnchor const&)::$_1::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Face anchor %s rightEye cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::validateAnchor(rf::data_flow::BodyAnchor const&)::$_0::operator()(void *a1, rf::data_flow::RFUUID **a2)
{
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  rf::data_flow::RFUUID::string(*a2, __p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  rf::getMessage((rf *)"Body anchor %s estimatedScaleFactor cannot contain NaN", a1, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235A9F8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rf::CoordinateSpaceTracker::~CoordinateSpaceTracker(rf::CoordinateSpaceTracker *this)
{
  if (*(void *)this)
  {
    uint64_t EventBus = REEngineGetEventBus();
    BOOL v3 = (void *)*((void *)this + 1);
    int v4 = (void *)*((void *)this + 2);
    if (v3 != v4)
    {
      uint64_t v5 = EventBus;
      do
      {
        MEMORY[0x237DED7B0](v5, *v3, v3[1]);
        v3 += 2;
      }
      while (v3 != v4);
    }
    for (uint64_t i = (void *)*((void *)this + 6); i; uint64_t i = (void *)*i)
    {
      uint64_t v7 = RESceneGetEventBus();
      int v8 = (void *)i[3];
      char v9 = (void *)i[4];
      if (v8 != v9)
      {
        uint64_t v10 = v7;
        do
        {
          MEMORY[0x237DED7B0](v10, *v8, v8[1]);
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::~__hash_table((uint64_t)this + 32);
  CFRange v11 = (void *)*((void *)this + 1);
  if (v11)
  {
    *((void *)this + 2) = v11;
    operator delete(v11);
  }
}

uint64_t rf::CoordinateSpaceTracker::findCoordinateSpaceDefinitionEntity(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Parent = REEntityGetParent();
  if (!Parent) {
    return 0;
  }
  uint64_t v2 = Parent;
  uint64_t v3 = 0;
  do
  {
    RECoordinateSpaceDefinitionComponentGetComponentType();
    if (REEntityGetComponentByClass()) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = REEntityGetParent();
  }
  while (v2);
  return v3;
}

uint64_t std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::vector<RESubscriptionHandle>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      int v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v8 = i[6];
    uint64_t v7 = (std::__shared_weak_count *)i[7];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      uint64_t v29 = REEntityCreate();
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v9 + 1;
      std::to_string(&v25, v9);
      uint64_t v10 = std::string::insert(&v25, 0, "Mesh Entity ", 0xCuLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      char v12 = std::string::append(&v26, " ", 1uLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v24, a4);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v24;
      }
      else {
        uint64_t v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v24.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = std::string::append(&v30, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v28 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      REEntitySetName();
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      RETransformComponentGetComponentType();
      REEntityAddComponentByClass();
      RETransformComponentSetWorldMatrix4x4F();
      REAnchorComponentGetComponentType();
      REEntityAddComponentByClass();
      REAnchorComponentSetAnchoredLocally();
      RESceneUnderstandingComponentGetComponentType();
      REEntityAddComponentByClass();
      long long v18 = rf::data_flow::RFUUID::asNSUUID((rf::data_flow::RFUUID *)v8);
      RESceneUnderstandingComponentSetIdentifier();

      RESceneUnderstandingComponentSetEntityType();
      long long v19 = (rf *)RESceneAddEntity();
      long long v20 = rf::realityFusionLogObject(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t Name = REEntityGetName();
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v8, __p);
        uint64_t v22 = v28 >= 0 ? __p : (void **)__p[0];
        LODWORD(v30.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = Name;
        WORD2(v30.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
        _os_log_impl(&dword_235A7C000, v20, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Adding entity %s with mesh %s", (uint8_t *)&v30, 0x16u);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p[0]);
        }
      }

      if (*(unsigned char *)(a1 + 16))
      {
        RENetworkComponentGetComponentType();
        REEntityAddComponentByClass();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(void *)(v8 + 24))
        {
          if (*(unsigned char *)(v8 + 16)) {
            long long v23 = *(void **)v8;
          }
          else {
            long long v23 = (void *)v8;
          }
          *(void *)(v8 + 24) = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
        }
        kdebug_trace();
      }
      RESharedPtr<REEntity>::~RESharedPtr(&v29);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_235A9FE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  RESharedPtr<REEntity>::~RESharedPtr(&a36);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void *rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  RESceneUnderstandingComponentGetComponentType();
  v21[0] = RESceneGetComponentsOfClass();
  v21[1] = v5;
  uint64_t v14 = v21[0];
  uint64_t v15 = v5;
  uint64_t v16 = v21;
  long long v17 = a3;
  char v18 = 1;
  LOBYTE(v19) = 0;
  char v20 = 0;
  ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&v14);
  uint64_t v6 = v19;
  float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&v14);
  uint64_t v8 = v14 + 8 * v15;
  uint64_t v22 = v6;
  for (i = &v14; v22 != v8; uint64_t v6 = v22)
  {
    REComponentGetEntity();
    RETransformComponentGetComponentType();
    REEntityGetComponentByClass();
    uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
    char v25 = 0;
    uint64_t v26 = 0;
    uuid_clear(uu);
    *(void *)uuid_t uu = IdentifierPtr;
    char v25 = 1;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(a3, (uint64_t)uu);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v12 = v10[6];
    long long v11 = (std::__shared_weak_count *)v10[7];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RETransformComponentSetWorldMatrix4x4F();
    if (*(unsigned char *)(a1 + 16)) {
      RENetworkMarkComponentDirty();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(void *)(v12 + 24))
      {
        if (*(unsigned char *)(v12 + 16)) {
          long long v13 = *(void **)v12;
        }
        else {
          long long v13 = (void *)v12;
        }
        *(void *)(v12 + 24) = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
      }
      kdebug_trace();
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v22 = v6 + 8;
    float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(i, &v22);
  }
  return result;
}

void sub_235AA014C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  RESceneUnderstandingComponentGetComponentType();
  uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
  uint64_t v12 = v4;
  uint64_t v13 = a3;
  char v14 = 1;
  LOBYTE(v15) = 0;
  char v16 = 0;
  ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&ComponentsOfClass);
  uint64_t v5 = v15;
  float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(&ComponentsOfClass);
  uint64_t v7 = ComponentsOfClass + 8 * v12;
  uint64_t v17 = v5;
  for (i = &ComponentsOfClass; v17 != v7; uint64_t v5 = v17)
  {
    Entity = (rf *)REComponentGetEntity();
    unint64_t v9 = rf::realityFusionLogObject(Entity);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t Name = REEntityGetName();
      *(_DWORD *)buf = 136315138;
      uint64_t v20 = Name;
      _os_log_impl(&dword_235A7C000, v9, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Removing entity %s", buf, 0xCu);
    }

    MEMORY[0x237DED700](Entity);
    uint64_t v17 = v5 + 8;
    float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(i, &v17);
  }
  return result;
}

void sub_235AA02DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::EntitiesProcessor::consumeLatestUpdate(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    BOOL v2 = *(unsigned char *)(a2 + 16) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    rf::data_flow::consumer::EntitiesProcessor::getOrCreateSceneUnderstandingRoot(a1);
    uint64_t v5 = *(void *)(a1 + 8);
    std::mutex::lock((std::mutex *)v5);
    RESceneUnderstandingRootComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneUnderstandingRootComponentSetUpdateId();
    if (*(unsigned char *)(a1 + 16)) {
      RENetworkMarkComponentDirty();
    }
    rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(a1, v4, v5 + 1800, 1);
    updated = rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(a1, v4, (void *)(v5 + 1840));
    rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene((uint64_t)updated, v4, v5 + 1880);
    rf::data_flow::consumer::EntitiesProcessor::addNewMeshEntitiesToScene(a1, v4, v5 + 1920, 2);
    uint64_t v7 = rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(a1, v4, (void *)(v5 + 1960));
    rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene((uint64_t)v7, v4, v5 + 2000);
    std::mutex::unlock((std::mutex *)v5);
  }
}

void sub_235AA03FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::EntitiesProcessor::getOrCreateSceneUnderstandingRoot(uint64_t a1)
{
  RESceneUnderstandingRootComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v2)
  {
    return REComponentGetEntity();
  }
  else
  {
    uint64_t v5 = REEntityCreate();
    REEntitySetName();
    RESceneUnderstandingRootComponentGetComponentType();
    REEntityAddComponentByClass();
    REComponentClassFromType();
    REEntityAddComponentByClass();
    REAnchorComponentSetAnchoredLocally();
    RESceneUnderstandingRenderOptionsComponentGetComponentType();
    REEntityAddComponentByClass();
    if (*(unsigned char *)(a1 + 16))
    {
      REComponentClassFromType();
      REEntityAddComponentByClass();
    }
    RESceneAddEntity();
    REHideEntity();
    uint64_t v4 = v5;
    RESharedPtr<REEntity>::~RESharedPtr(&v5);
    return v4;
  }
}

void sub_235AA0524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  RESharedPtr<REEntity>::~RESharedPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::EntitiesProcessor::~EntitiesProcessor(rf::data_flow::consumer::EntitiesProcessor *this)
{
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (!v3)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v13 = *(void **)a2;
    }
    else {
      uint64_t v13 = (void *)a2;
    }
    unint64_t v3 = ((*v13 >> 2) + (*v13 << 6) + v13[1] + 2654435769) ^ *v13;
    *(void *)(a2 + 24) = v3;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v7 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v4 - 1) & v3;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = (void *)*v8;
  if (*v8)
  {
    uint64_t v10 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v11 = v9[1];
      if (v3 == v11)
      {
        if (rf::data_flow::RFUUID::Equality::operator()(v10, (uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v11 >= *(void *)&v4) {
            v11 %= *(void *)&v4;
          }
        }
        else
        {
          v11 &= *(void *)&v4 - 1;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(void *result, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    int8x8_t v4 = result;
    do
    {
      float32_t result = (void *)RESceneUnderstandingComponentGetSourceType();
      if (result != 2)
      {
        uint8x8_t v5 = (void *)v4[3];
        uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        char v9 = 0;
        uint64_t v10 = 0;
        uuid_clear(uu);
        *(void *)uuid_t uu = IdentifierPtr;
        char v9 = 1;
        float32_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result) {
          break;
        }
      }
      uint64_t v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(void *result)
{
  if (!*((unsigned char *)result + 48))
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::updateMeshEntitiesInScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(result, &v2);
    v1[5] = v2;
    *((unsigned char *)v1 + 48) = 1;
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(void *result, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    int8x8_t v4 = result;
    do
    {
      float32_t result = (void *)RESceneUnderstandingComponentGetSourceType();
      if (result != 2)
      {
        uint8x8_t v5 = (void *)v4[2];
        uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        char v9 = 0;
        uint64_t v10 = 0;
        uuid_clear(uu);
        *(void *)uuid_t uu = IdentifierPtr;
        char v9 = 1;
        float32_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result) {
          break;
        }
      }
      uint64_t v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::cache_begin(void *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    float32_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::EntitiesProcessor::removeMeshEntitiesFromScene(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>> const&)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((unsigned char *)v1 + 40) = 1;
  }
  return result;
}

uint64_t *rf::HandMetadataComponent::instance(rf::HandMetadataComponent *this)
{
  {
    rf::HandMetadataComponent::instance(void)::instance = 0;
    qword_26882F0D8 = 0;
    qword_26882F0F8 = 0;
    dword_26882F100 = 0;
  }
  return &rf::HandMetadataComponent::instance(void)::instance;
}

void sub_235AA097C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(rf::data_flow::provider::InputFrame &&)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    int8x8_t v4 = v8;
    uint8x8_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame &&)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_235AA0C88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_235AA0D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(rf::data_flow::provider::InputFrame &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void rf::ARState::consume(unint64_t a1, uint64_t a2)
{
  uint64_t v301 = *MEMORY[0x263EF8340];
  v294.n128_u64[0] = a1 + 64;
  v294.n128_u64[1] = a1;
  std::mutex::lock((std::mutex *)a1);
  int v6 = *(unsigned __int8 *)(a2 + 1032);
  int v7 = *(unsigned __int8 *)(a2 + 1026);
  if (*(unsigned char *)(a2 + 1032)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    int v9 = *(_DWORD *)(a1 + 2888);
    switch(v9)
    {
      case 0:
        if (*(unsigned char *)(a2 + 1032))
        {
          int v10 = *(_DWORD *)(a2 + 1028);
          if (v10 == 2) {
            goto LABEL_47;
          }
          if (v10 == 1)
          {
            int v11 = 1;
            goto LABEL_43;
          }
        }
        if (*(unsigned char *)(a2 + 1026) && *(unsigned char *)(a2 + 1025)) {
          *(_DWORD *)(a1 + 2888) = 2;
        }
        goto LABEL_39;
      case 1:
        int v15 = *(_DWORD *)(a2 + 1028);
        if (*(unsigned char *)(a2 + 1032)) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16)
        {
          *(_DWORD *)(a1 + 2888) = 0;
          goto LABEL_51;
        }
        if (*(unsigned char *)(a2 + 1026) && *(unsigned char *)(a2 + 1025))
        {
          *(_DWORD *)(a1 + 2888) = 3;
          goto LABEL_35;
        }
        if (!*(unsigned char *)(a2 + 1032)) {
          goto LABEL_40;
        }
        if (v15 != 2) {
          goto LABEL_51;
        }
LABEL_47:
        *(_DWORD *)(a1 + 2888) = 4;
        goto LABEL_49;
      case 2:
        if (*(unsigned char *)(a2 + 1032)) {
          BOOL v13 = *(_DWORD *)(a2 + 1028) == 1;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          int v11 = 3;
          goto LABEL_43;
        }
        if (*(unsigned char *)(a2 + 1026) && !*(unsigned char *)(a2 + 1025))
        {
          *(_DWORD *)(a1 + 2888) = 0;
          goto LABEL_35;
        }
        goto LABEL_39;
      case 3:
        if (*(unsigned char *)(a2 + 1032)) {
          BOOL v14 = *(_DWORD *)(a2 + 1028) == 0;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14)
        {
          int v11 = 2;
LABEL_43:
          *(_DWORD *)(a1 + 2888) = v11;
        }
        else
        {
          if (*(unsigned char *)(a2 + 1026) && !*(unsigned char *)(a2 + 1025))
          {
            *(_DWORD *)(a1 + 2888) = 1;
LABEL_35:
            *(unsigned char *)(a1 + 1784) = 1;
          }
LABEL_39:
          if (!v6)
          {
LABEL_40:
            int v17 = -1;
            goto LABEL_52;
          }
        }
        goto LABEL_51;
      case 4:
        if (!*(unsigned char *)(a2 + 1032)) {
          goto LABEL_40;
        }
        int v12 = *(_DWORD *)(a2 + 1028);
        if (v12)
        {
          if (v12 != 1) {
            goto LABEL_51;
          }
          *(_DWORD *)(a1 + 2888) = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 2888) = 0;
LABEL_49:
          LOBYTE(vstd::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1;
        }
        *(unsigned char *)(a1 + 1785) = v12;
LABEL_51:
        int v17 = *(_DWORD *)(a2 + 1028);
LABEL_52:
        int v18 = *(unsigned __int8 *)(a2 + 1025);
        uint64_t v19 = rf::realityFusionLogObject(v5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *(_DWORD *)(a1 + 2888);
          *(_DWORD *)buf = 67109888;
          if (v7) {
            int v21 = v18;
          }
          else {
            int v21 = -1;
          }
          *(_DWORD *)&uint8_t buf[4] = v9;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v20;
          *(_WORD *)&buf[14] = 1024;
          LODWORD(v298) = v17;
          WORD2(v298) = 1024;
          *(_DWORD *)((char *)&v298 + 6) = v21;
          _os_log_impl(&dword_235A7C000, v19, OS_LOG_TYPE_DEFAULT, "ARState: TrackingState has changed from %d to %d (input: tracking - %d, travel - %d)", buf, 0x1Au);
        }

        break;
      default:
        goto LABEL_39;
    }
  }
  if (*(unsigned char *)(a2 + 996)) {
    BOOL v22 = *(_DWORD *)(a2 + 992) == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (!v22)
  {
    rf::detail::insertMeshesInto((uint64_t *)&v294, (uint64_t *)a2, (unsigned char *)(a1 + 2928), (uint64_t)v292);
    for (uint64_t i = v293; i; uint64_t i = (uint64_t *)*i)
    {
      *(void *)buf = i + 2;
      std::string v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v294.n128_u64[0] + 720, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
      long long v25 = *((_OWORD *)i + 3);
      i[6] = 0;
      i[7] = 0;
      uint64_t v26 = (std::__shared_weak_count *)v24[7];
      *((_OWORD *)v24 + 3) = v25;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    rf::detail::updateMeshAt((uint64_t *)&v294, (uint64_t *)(a2 + 24), (unsigned char *)(a1 + 2928), (uint64_t)v290);
    for (uint64_t j = v291; j; uint64_t j = (uint64_t *)*j)
    {
      *(void *)buf = j + 2;
      int64_t v28 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v294.n128_u64[0] + 760, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
      long long v29 = *((_OWORD *)j + 3);
      j[6] = 0;
      j[7] = 0;
      std::string v30 = (std::__shared_weak_count *)v28[7];
      *((_OWORD *)v28 + 3) = v29;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
    rf::detail::removeMeshesFrom((uint64_t)&v294, (uint64_t *)(a2 + 48), *(unsigned char *)(a1 + 2904), (uint64_t)v288);
    uint64_t v31 = v289;
    if (v289)
    {
      uint64_t v32 = v294.n128_u64[0] + 800;
      do
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v32, (uint64_t)(v31 + 2), (uint64_t)(v31 + 2));
        uint64_t v31 = (void *)*v31;
      }
      while (v31);
    }
    rf::detail::requestFloorPlaneForPlacementIfNeeded((uint64_t *)(a2 + 72), (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 120), a1 + 3032);
    rf::detail::updateExternalAnchorsAt((unsigned int *)&v294, (uint64_t *)(a2 + 144), a1 + 2968);
    rf::detail::relocalizeExternalAnchors(&v294, (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 72), a1 + 3000);
    rf::detail::insertAnchorsInto((uint64_t)&v294, (uint64_t *)(a2 + 72), a1 + 2936, (char **)&v286);
    std::string v34 = v286;
    int64x2_t v33 = v287;
    if (v286 != v287)
    {
      uint64_t v35 = v294.n128_u64[0] + 1080;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v35, (uint64_t)v34, v34);
        v34 += 2;
      }
      while (v34 != v33);
    }
    rf::detail::updateAnchorsAt((uint64_t)&v294, (uint64_t *)(a2 + 96), (char **)&v284);
    std::string v37 = v284;
    std::string v36 = v285;
    if (v284 != v285)
    {
      uint64_t v38 = v294.n128_u64[0] + 1120;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v38, (uint64_t)v37, v37);
        v37 += 2;
      }
      while (v37 != v36);
    }
    rf::detail::removeAnchorsFrom((uint64_t)&v294, (uint64_t *)(a2 + 120), a1 + 3032, (uint64_t)v282);
    long long v39 = v283;
    if (v283)
    {
      uint64_t v40 = v294.n128_u64[0] + 1200;
      do
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v40, (uint64_t)(v39 + 2), (_OWORD *)v39 + 1);
        long long v39 = (uint64_t *)*v39;
      }
      while (v39);
    }
    if (*(unsigned char *)(a2 + 464))
    {
      memset(v295, 0, sizeof(v295));
      int v296 = 1065353216;
      unint64_t v41 = v294.n128_u64[0];
      std::string v42 = *(uint64_t **)(v294.n128_u64[0] + 96);
      if (v42)
      {
        do
        {
          while (*((_DWORD *)v42 + 76) == 3)
          {
            long long v43 = *((_OWORD *)v42 + 2);
            *(_OWORD *)buf = *((_OWORD *)v42 + 1);
            long long v298 = v43;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v299, (uint64_t)(v42 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v295, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v299);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1080), (uint64_t)(v42 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1120), (uint64_t)(v42 + 2));
            std::string v44 = (uint64_t *)*v42;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(v294.n128_u64[0] + 80), v42, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            std::string v42 = v44;
            if (!v44) {
              goto LABEL_88;
            }
          }
          std::string v42 = (uint64_t *)*v42;
        }
        while (v42);
LABEL_88:
        unint64_t v41 = v294.n128_u64[0];
      }
      long long v45 = *(uint64_t **)(v41 + 136);
      if (v45)
      {
        do
        {
          while (*((_DWORD *)v45 + 76) == 3)
          {
            long long v46 = *((_OWORD *)v45 + 2);
            *(_OWORD *)buf = *((_OWORD *)v45 + 1);
            long long v298 = v46;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v299, (uint64_t)(v45 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v295, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v299);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1080), (uint64_t)(v45 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1120), (uint64_t)(v45 + 2));
            int v47 = (uint64_t *)*v45;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(v294.n128_u64[0] + 120), v45, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            long long v45 = v47;
            if (!v47) {
              goto LABEL_94;
            }
          }
          long long v45 = (uint64_t *)*v45;
        }
        while (v45);
LABEL_94:
        unint64_t v41 = v294.n128_u64[0];
      }
      __int16 v48 = *(uint64_t **)&v295[16];
      if (*(void *)&v295[16])
      {
        uint64_t v49 = v41 + 1200;
        do
        {
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v49, (uint64_t)(v48 + 2), (_OWORD *)v48 + 1);
          __int16 v48 = (uint64_t *)*v48;
        }
        while (v48);
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v295);
    }
    if (*(unsigned char *)(a2 + 465))
    {
      memset(v295, 0, sizeof(v295));
      int v296 = 1065353216;
      unint64_t v50 = v294.n128_u64[0];
      long long v51 = *(uint64_t **)(v294.n128_u64[0] + 96);
      if (v51)
      {
        do
        {
          while (*((_DWORD *)v51 + 76) == 2)
          {
            long long v52 = *((_OWORD *)v51 + 2);
            *(_OWORD *)buf = *((_OWORD *)v51 + 1);
            long long v298 = v52;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v299, (uint64_t)(v51 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v295, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v299);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1080), (uint64_t)(v51 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1120), (uint64_t)(v51 + 2));
            uint64_t v53 = (uint64_t *)*v51;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(v294.n128_u64[0] + 80), v51, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            long long v51 = v53;
            if (!v53) {
              goto LABEL_105;
            }
          }
          long long v51 = (uint64_t *)*v51;
        }
        while (v51);
LABEL_105:
        unint64_t v50 = v294.n128_u64[0];
      }
      int v54 = *(uint64_t **)(v50 + 136);
      if (v54)
      {
        do
        {
          while (*((_DWORD *)v54 + 76) == 2)
          {
            long long v55 = *((_OWORD *)v54 + 2);
            *(_OWORD *)buf = *((_OWORD *)v54 + 1);
            long long v298 = v55;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v299, (uint64_t)(v54 + 6));
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)v295, (uint64_t)buf, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v299);
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1080), (uint64_t)(v54 + 2));
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1120), (uint64_t)(v54 + 2));
            std::string v56 = (uint64_t *)*v54;
            std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(v294.n128_u64[0] + 120), v54, (uint64_t)buf);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
            int v54 = v56;
            if (!v56) {
              goto LABEL_111;
            }
          }
          int v54 = (uint64_t *)*v54;
        }
        while (v54);
LABEL_111:
        unint64_t v50 = v294.n128_u64[0];
      }
      uint64_t v57 = *(uint64_t **)&v295[16];
      if (*(void *)&v295[16])
      {
        uint64_t v58 = v50 + 1200;
        do
        {
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(v58, (uint64_t)(v57 + 2), (_OWORD *)v57 + 1);
          uint64_t v57 = (uint64_t *)*v57;
        }
        while (v57);
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v295);
    }
    if (*(unsigned char *)(a2 + 996) && *(_DWORD *)(a2 + 992) == 1)
    {
      uint64_t v59 = a2 + 176;
      unint64_t v60 = v294.n128_u64[0];
      uint64_t v61 = v294.n128_u64[0] + 432;
      if (*(unsigned __int8 *)(v294.n128_u64[0] + 704) == *(unsigned __int8 *)(a2 + 448))
      {
        if (*(unsigned char *)(v294.n128_u64[0] + 704)) {
          std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(v61, v59);
        }
      }
      else
      {
        if (*(unsigned char *)(v294.n128_u64[0] + 704))
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v61);
          char v132 = 0;
        }
        else
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v61, v59);
          char v132 = 1;
        }
        *(unsigned char *)(v60 + 704) = v132;
      }
    }
    rf::detail::insertProbeInto((rf *)&v294, (uint64_t **)(a2 + 472), (char **)&v280);
    long long v134 = v280;
    long long v133 = v281;
    if (v280 != v281)
    {
      uint64_t v135 = v294.n128_u64[0] + 1240;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v135, (uint64_t)v134, v134);
        v134 += 2;
      }
      while (v134 != v133);
    }
    rf::detail::updateProbeAt((uint64_t)&v294, (uint64_t **)(a2 + 496), (char **)&v278);
    float32x4_t v137 = v278;
    float32x4_t v136 = v279;
    if (v278 != v279)
    {
      uint64_t v138 = v294.n128_u64[0] + 1280;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v138, (uint64_t)v137, v137);
        v137 += 2;
      }
      while (v137 != v136);
    }
    rf::detail::removeProbeFrom((uint64_t *)&v294, (rf::data_flow::RFUUID **)(a2 + 520), (char **)&v276);
    float v140 = v276;
    unint64_t v139 = v277;
    if (v276 != v277)
    {
      uint64_t v141 = v294.n128_u64[0] + 1320;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v141, (uint64_t)v140, v140);
        v140 += 2;
      }
      while (v140 != v139);
    }
    rf::detail::insertObjectsInto(&v294, (__n128 **)(a2 + 544), (char **)&v274);
    float32x4_t v143 = v274;
    float32x4_t v142 = v275;
    if (v274 != v275)
    {
      uint64_t v144 = v294.n128_u64[0] + 1360;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v144, (uint64_t)v143, v143);
        v143 += 2;
      }
      while (v143 != v142);
    }
    rf::detail::updateObjectsAt(&v294, (long long **)(a2 + 568), (char **)&v272);
    float32x4_t v146 = v272;
    float32x4_t v145 = v273;
    if (v272 != v273)
    {
      uint64_t v147 = v294.n128_u64[0] + 1400;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v147, (uint64_t)v146, v146);
        v146 += 2;
      }
      while (v146 != v145);
    }
    rf::detail::removeObjectsFrom((rf *)&v294, (rf::data_flow::RFUUID **)(a2 + 592), (char **)&v270);
    float32x4_t v149 = v270;
    int8x8_t v148 = v271;
    if (v270 != v271)
    {
      uint64_t v150 = v294.n128_u64[0] + 1440;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v150, (uint64_t)v149, v149);
        v149 += 2;
      }
      while (v149 != v148);
    }
    rf::detail::insertRoomBoundaryAnchorsInto((uint64_t *)&v294, (uint64_t *)(a2 + 688), (char **)&v268);
    float32x4_t v152 = v268;
    uint64_t v151 = v269;
    if (v268 != v269)
    {
      uint64_t v153 = v294.n128_u64[0] + 1480;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v153, (uint64_t)v152, v152);
        v152 += 2;
      }
      while (v152 != v151);
    }
    rf::detail::updateRoomBoundarysAt((uint64_t *)&v294, (uint64_t *)(a2 + 712), (char **)&__p);
    float32x4_t v155 = __p;
    unint64_t v154 = (unint64_t)v267;
    if (__p != v267)
    {
      uint64_t v156 = v294.n128_u64[0] + 1520;
      do
      {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v156, (uint64_t)v155, v155);
        v155 += 2;
      }
      while (v155 != (_OWORD *)v154);
    }
    unint64_t v258 = a1;
    uint64_t v259 = a2;
    rf::detail::removeRoomBoundaryAnchorsFrom((int8x8_t **)&v294, (rf::data_flow::RFUUID **)(a2 + 736), (uint64_t)buf);
    float32x4_t v157 = (uint64_t *)v298;
    if ((void)v298)
    {
      unint64_t v158 = v294.n128_u64[0];
      float32x4_t v159 = (void *)(v294.n128_u64[0] + 1560);
      float32x4_t v260 = (void *)(v294.n128_u64[0] + 1576);
      uint64_t v261 = v294.n128_u64[0] + 1592;
      do
      {
        unint64_t v160 = v157[5];
        if (!v160)
        {
          if (*((unsigned char *)v157 + 32)) {
            float32x4_t v182 = (void *)v157[2];
          }
          else {
            float32x4_t v182 = v157 + 2;
          }
          unint64_t v160 = ((*v182 >> 2) + (*v182 << 6) + v182[1] + 2654435769) ^ *v182;
          v157[5] = v160;
        }
        unint64_t v154 = *(void *)(v158 + 1568);
        if (v154)
        {
          uint8x8_t v161 = (uint8x8_t)vcnt_s8((int8x8_t)v154);
          v161.i16[0] = vaddlv_u8(v161);
          unint64_t v162 = v161.u32[0];
          if (v161.u32[0] > 1uLL)
          {
            unint64_t v2 = v160;
            if (v160 >= v154) {
              unint64_t v2 = v160 % v154;
            }
          }
          else
          {
            unint64_t v2 = (v154 - 1) & v160;
          }
          v163 = *(void **)(*v159 + 8 * v2);
          if (v163)
          {
            v164 = (void *)*v163;
            if (*v163)
            {
              do
              {
                unint64_t v165 = v164[1];
                if (v165 == v160)
                {
                  if (rf::data_flow::RFUUID::Equality::operator()(v261, (uint64_t)(v164 + 2), (uint64_t)(v157 + 2))) {
                    goto LABEL_353;
                  }
                }
                else
                {
                  if (v162 > 1)
                  {
                    if (v165 >= v154) {
                      v165 %= v154;
                    }
                  }
                  else
                  {
                    v165 &= v154 - 1;
                  }
                  if (v165 != v2) {
                    break;
                  }
                }
                v164 = (void *)*v164;
              }
              while (v164);
            }
          }
        }
        uint64_t v166 = operator new(0x5D0uLL);
        *(void *)unint64_t v295 = v166;
        *(void *)&v295[8] = v260;
        v295[16] = 0;
        void *v166 = 0;
        v166[1] = v160;
        long long v167 = *((_OWORD *)v157 + 2);
        *((_OWORD *)v166 + 1) = *((_OWORD *)v157 + 1);
        *((_OWORD *)v166 + 2) = v167;
        *((_OWORD *)v166 + 3) = *((_OWORD *)v157 + 3);
        long long v168 = *((_OWORD *)v157 + 7);
        long long v170 = *((_OWORD *)v157 + 4);
        long long v169 = *((_OWORD *)v157 + 5);
        *((_OWORD *)v166 + 6) = *((_OWORD *)v157 + 6);
        *((_OWORD *)v166 + 7) = v168;
        *((_OWORD *)v166 + 4) = v170;
        *((_OWORD *)v166 + 5) = v169;
        long long v172 = *((_OWORD *)v157 + 9);
        long long v171 = *((_OWORD *)v157 + 10);
        long long v173 = *((_OWORD *)v157 + 8);
        *((unsigned char *)v166 + 176) = *((unsigned char *)v157 + 176);
        *((_OWORD *)v166 + 9) = v172;
        *((_OWORD *)v166 + 10) = v171;
        *((_OWORD *)v166 + 8) = v173;
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v166 + 24), (long long *)v157 + 12);
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v166 + 78), (long long *)v157 + 39);
        std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v166 + 132), (long long *)v157 + 66);
        v295[16] = 1;
        float v174 = (float)(unint64_t)(*(void *)(v158 + 1584) + 1);
        float v175 = *(float *)(v158 + 1592);
        if (!v154 || (float)(v175 * (float)v154) < v174)
        {
          BOOL v176 = (v154 & (v154 - 1)) != 0;
          if (v154 < 3) {
            BOOL v176 = 1;
          }
          unint64_t v177 = v176 | (2 * v154);
          unint64_t v178 = vcvtps_u32_f32(v174 / v175);
          if (v177 <= v178) {
            size_t v179 = v178;
          }
          else {
            size_t v179 = v177;
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>((uint64_t)v159, v179);
          unint64_t v154 = *(void *)(v158 + 1568);
          if ((v154 & (v154 - 1)) != 0)
          {
            if (v160 >= v154) {
              unint64_t v2 = v160 % v154;
            }
            else {
              unint64_t v2 = v160;
            }
          }
          else
          {
            unint64_t v2 = (v154 - 1) & v160;
          }
        }
        float32x4_t v180 = *(void **)(*v159 + 8 * v2);
        if (v180)
        {
          **(void **)unint64_t v295 = *v180;
          *float32x4_t v180 = *(void *)v295;
        }
        else
        {
          **(void **)unint64_t v295 = *v260;
          *float32x4_t v260 = *(void *)v295;
          *(void *)(*v159 + 8 * v2) = v260;
          if (**(void **)v295)
          {
            unint64_t v181 = *(void *)(**(void **)v295 + 8);
            if ((v154 & (v154 - 1)) != 0)
            {
              if (v181 >= v154) {
                v181 %= v154;
              }
            }
            else
            {
              v181 &= v154 - 1;
            }
            *(void *)(*v159 + 8 * v181) = *(void *)v295;
          }
        }
        *(void *)unint64_t v295 = 0;
        ++*(void *)(v158 + 1584);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)v295, 0);
LABEL_353:
        float32x4_t v157 = (uint64_t *)*v157;
      }
      while (v157);
    }
    unint64_t v184 = v258;
    uint64_t v183 = v259;
    uint64_t v185 = *(unsigned __int8 *)(v259 + 783);
    if ((v185 & 0x80u) != 0) {
      uint64_t v185 = *(void *)(v259 + 768);
    }
    if (v185)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v294.n128_u64[0] + 368, (unsigned __int8 *)(v259 + 760), v259 + 760);
      unint64_t v154 = v294.n128_u64[0];
      if (*(char *)(v259 + 783) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v295, *(const std::string::value_type **)(v259 + 760), *(void *)(v259 + 768));
      }
      else
      {
        *(_OWORD *)unint64_t v295 = *(_OWORD *)(v259 + 760);
        *(void *)&v295[16] = *(void *)(v259 + 776);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v154 + 1600, v295, (uint64_t)v295);
      if ((v295[23] & 0x80000000) != 0) {
        operator delete(*(void **)v295);
      }
    }
    uint64_t v186 = *(unsigned __int8 *)(v259 + 807);
    if ((v186 & 0x80u) != 0) {
      uint64_t v186 = *(void *)(v259 + 792);
    }
    if (!v186) {
      goto LABEL_420;
    }
    unint64_t v187 = v294.n128_u64[0];
    float v188 = (void *)(v294.n128_u64[0] + 392);
    unint64_t v189 = std::__string_hash<char>::operator()[abi:ne180100](v294.n128_u64[0] + 392, v259 + 784);
    int8x8_t v190 = *(int8x8_t *)(v187 + 376);
    if (!*(void *)&v190) {
      goto LABEL_415;
    }
    unint64_t v191 = v189;
    uint8x8_t v192 = (uint8x8_t)vcnt_s8(v190);
    v192.i16[0] = vaddlv_u8(v192);
    unint64_t v193 = v192.u32[0];
    if (v192.u32[0] > 1uLL)
    {
      unint64_t v194 = v189;
      if (v189 >= *(void *)&v190) {
        unint64_t v194 = v189 % *(void *)&v190;
      }
    }
    else
    {
      unint64_t v194 = (*(void *)&v190 - 1) & v189;
    }
    float32x4_t v195 = *(void ***)(*(void *)(v187 + 368) + 8 * v194);
    if (!v195) {
      goto LABEL_415;
    }
    float32x4_t v196 = *v195;
    if (!*v195) {
      goto LABEL_415;
    }
    while (1)
    {
      unint64_t v197 = v196[1];
      if (v197 == v191)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v187 + 400, (unsigned __int8 *)v196 + 16, (unsigned __int8 *)(v259 + 784)))
        {
          int8x8_t v198 = *(int8x8_t *)(v187 + 376);
          float32x4_t v199 = (void *)*v196;
          unint64_t v200 = v196[1];
          uint8x8_t v201 = (uint8x8_t)vcnt_s8(v198);
          v201.i16[0] = vaddlv_u8(v201);
          if (v201.u32[0] > 1uLL)
          {
            if (v200 >= *(void *)&v198) {
              v200 %= *(void *)&v198;
            }
          }
          else
          {
            v200 &= *(void *)&v198 - 1;
          }
          uint64_t v202 = *(void *)(v187 + 368);
          float v203 = *(void **)(v202 + 8 * v200);
          do
          {
            float32x4_t v204 = v203;
            float v203 = (void *)*v203;
          }
          while (v203 != v196);
          if (v204 == (void *)(v187 + 384)) {
            goto LABEL_404;
          }
          unint64_t v205 = v204[1];
          if (v201.u32[0] > 1uLL)
          {
            if (v205 >= *(void *)&v198) {
              v205 %= *(void *)&v198;
            }
          }
          else
          {
            v205 &= *(void *)&v198 - 1;
          }
          if (v205 == v200)
          {
LABEL_406:
            if (v199)
            {
              unint64_t v206 = v199[1];
              goto LABEL_408;
            }
          }
          else
          {
LABEL_404:
            if (!v199) {
              goto LABEL_405;
            }
            unint64_t v206 = v199[1];
            if (v201.u32[0] > 1uLL)
            {
              unint64_t v207 = v199[1];
              if (v206 >= *(void *)&v198) {
                unint64_t v207 = v206 % *(void *)&v198;
              }
            }
            else
            {
              unint64_t v207 = v206 & (*(void *)&v198 - 1);
            }
            if (v207 != v200)
            {
LABEL_405:
              *(void *)(v202 + 8 * v200) = 0;
              float32x4_t v199 = (void *)*v196;
              goto LABEL_406;
            }
LABEL_408:
            if (v201.u32[0] > 1uLL)
            {
              if (v206 >= *(void *)&v198) {
                v206 %= *(void *)&v198;
              }
            }
            else
            {
              v206 &= *(void *)&v198 - 1;
            }
            if (v206 != v200)
            {
              *(void *)(*(void *)(v187 + 368) + 8 * v206) = v204;
              float32x4_t v199 = (void *)*v196;
            }
          }
          *float32x4_t v204 = v199;
          *float32x4_t v196 = 0;
          --*v188;
          v295[16] = 1;
          *(void *)&v295[8] = v187 + 384;
          *(void *)unint64_t v295 = 0;
          std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v295[8], (void **)v196);
LABEL_415:
          unint64_t v154 = v294.n128_u64[0];
          uint64_t v183 = v259;
          if (*(char *)(v259 + 807) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v295, *(const std::string::value_type **)(v259 + 784), *(void *)(v259 + 792));
          }
          else
          {
            *(_OWORD *)unint64_t v295 = *(_OWORD *)(v259 + 784);
            *(void *)&v295[16] = *(void *)(v259 + 800);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v154 + 1640, v295, (uint64_t)v295);
          unint64_t v184 = v258;
          if ((v295[23] & 0x80000000) != 0) {
            operator delete(*(void **)v295);
          }
LABEL_420:
          uint64_t v208 = *(unsigned __int8 *)(v183 + 839);
          if ((v208 & 0x80u) != 0) {
            uint64_t v208 = *(void *)(v183 + 824);
          }
          if (v208)
          {
            uint64_t v209 = v183 + 816;
            unint64_t v210 = v294.n128_u64[0];
            float32x4_t v211 = (void *)(v294.n128_u64[0] + 1704);
            unint64_t v212 = std::__string_hash<char>::operator()[abi:ne180100](v294.n128_u64[0] + 1704, v183 + 816);
            unint64_t v213 = v212;
            unint64_t v214 = *(void *)(v210 + 1688);
            if (v214)
            {
              uint8x8_t v215 = (uint8x8_t)vcnt_s8((int8x8_t)v214);
              v215.i16[0] = vaddlv_u8(v215);
              unint64_t v216 = v215.u32[0];
              if (v215.u32[0] > 1uLL)
              {
                unint64_t v154 = v212;
                if (v212 >= v214) {
                  unint64_t v154 = v212 % v214;
                }
              }
              else
              {
                unint64_t v154 = (v214 - 1) & v212;
              }
              float32x4_t v217 = *(void ***)(*(void *)(v210 + 1680) + 8 * v154);
              if (v217)
              {
                float32x4_t v218 = (char *)*v217;
                if (*v217)
                {
                  while (1)
                  {
                    unint64_t v219 = *((void *)v218 + 1);
                    if (v219 == v213)
                    {
                      if (std::equal_to<std::string>::operator()[abi:ne180100](v210 + 1712, (unsigned __int8 *)v218 + 16, (unsigned __int8 *)(v183 + 816)))
                      {
                        unint64_t v184 = v258;
                        uint64_t v183 = v259;
                        goto LABEL_500;
                      }
                    }
                    else
                    {
                      if (v216 > 1)
                      {
                        if (v219 >= v214) {
                          v219 %= v214;
                        }
                      }
                      else
                      {
                        v219 &= v214 - 1;
                      }
                      if (v219 != v154)
                      {
LABEL_440:
                        unint64_t v184 = v258;
                        uint64_t v183 = v259;
                        break;
                      }
                    }
                    float32x4_t v218 = *(char **)v218;
                    if (!v218) {
                      goto LABEL_440;
                    }
                  }
                }
              }
            }
            float32x4_t v218 = (char *)operator new(0x70uLL);
            *(void *)float32x4_t v218 = 0;
            *((void *)v218 + 1) = v213;
            float32x4_t v220 = (std::string *)(v218 + 16);
            if (*(char *)(v183 + 839) < 0)
            {
              std::string::__init_copy_ctor_external(v220, *(const std::string::value_type **)(v183 + 816), *(void *)(v183 + 824));
            }
            else
            {
              *(_OWORD *)&v220->__r_.__value_.__l.__data_ = *(_OWORD *)v209;
              *((void *)v218 + 4) = *(void *)(v209 + 16);
            }
            *((_OWORD *)v218 + 5) = 0u;
            *((_OWORD *)v218 + 6) = 0u;
            *((_OWORD *)v218 + 3) = 0u;
            *((_OWORD *)v218 + 4) = 0u;
            float v221 = (float)(unint64_t)(*(void *)(v210 + 1704) + 1);
            float v222 = *(float *)(v210 + 1712);
            if (!v214 || (float)(v222 * (float)v214) < v221)
            {
              BOOL v223 = 1;
              if (v214 >= 3) {
                BOOL v223 = (v214 & (v214 - 1)) != 0;
              }
              unint64_t v224 = v223 | (2 * v214);
              unint64_t v225 = vcvtps_u32_f32(v221 / v222);
              if (v224 <= v225) {
                int8x8_t prime = (int8x8_t)v225;
              }
              else {
                int8x8_t prime = (int8x8_t)v224;
              }
              if (*(void *)&prime == 1)
              {
                int8x8_t prime = (int8x8_t)2;
              }
              else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
              {
                int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
              }
              unint64_t v214 = *(void *)(v210 + 1688);
              if (*(void *)&prime <= v214)
              {
                if (*(void *)&prime < v214)
                {
                  unint64_t v233 = vcvtps_u32_f32((float)*(unint64_t *)(v210 + 1704) / *(float *)(v210 + 1712));
                  if (v214 < 3
                    || (uint8x8_t v234 = (uint8x8_t)vcnt_s8((int8x8_t)v214), v234.i16[0] = vaddlv_u8(v234), v234.u32[0] > 1uLL))
                  {
                    unint64_t v233 = std::__next_prime(v233);
                  }
                  else
                  {
                    uint64_t v235 = 1 << -(char)__clz(v233 - 1);
                    if (v233 >= 2) {
                      unint64_t v233 = v235;
                    }
                  }
                  if (*(void *)&prime <= v233) {
                    int8x8_t prime = (int8x8_t)v233;
                  }
                  if (*(void *)&prime >= v214)
                  {
                    unint64_t v214 = *(void *)(v210 + 1688);
                  }
                  else
                  {
                    if (prime) {
                      goto LABEL_456;
                    }
                    float32x4_t v257 = *(void **)(v210 + 1680);
                    *(void *)(v210 + 1680) = 0;
                    if (v257) {
                      operator delete(v257);
                    }
                    unint64_t v214 = 0;
                    *(void *)(v210 + 1688) = 0;
                  }
                }
              }
              else
              {
LABEL_456:
                if (*(void *)&prime >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                float32x4_t v227 = operator new(8 * *(void *)&prime);
                float32x4_t v228 = *(void **)(v210 + 1680);
                *(void *)(v210 + 1680) = v227;
                if (v228) {
                  operator delete(v228);
                }
                uint64_t v229 = 0;
                *(int8x8_t *)(v210 + 1688) = prime;
                do
                  *(void *)(*(void *)(v210 + 1680) + 8 * v229++) = 0;
                while (*(void *)&prime != v229);
                float32x4_t v230 = *(void **)(v210 + 1696);
                if (v230)
                {
                  unint64_t v231 = v230[1];
                  uint8x8_t v232 = (uint8x8_t)vcnt_s8(prime);
                  v232.i16[0] = vaddlv_u8(v232);
                  if (v232.u32[0] > 1uLL)
                  {
                    if (v231 >= *(void *)&prime) {
                      v231 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v231 &= *(void *)&prime - 1;
                  }
                  *(void *)(*(void *)(v210 + 1680) + 8 * v231) = v210 + 1696;
                  float32x4_t v236 = (void *)*v230;
                  if (*v230)
                  {
                    do
                    {
                      unint64_t v237 = v236[1];
                      if (v232.u32[0] > 1uLL)
                      {
                        if (v237 >= *(void *)&prime) {
                          v237 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v237 &= *(void *)&prime - 1;
                      }
                      if (v237 != v231)
                      {
                        uint64_t v238 = *(void *)(v210 + 1680);
                        if (!*(void *)(v238 + 8 * v237))
                        {
                          *(void *)(v238 + 8 * v237) = v230;
                          goto LABEL_481;
                        }
                        *float32x4_t v230 = *v236;
                        *float32x4_t v236 = **(void **)(*(void *)(v210 + 1680) + 8 * v237);
                        **(void **)(*(void *)(v210 + 1680) + 8 * v237) = v236;
                        float32x4_t v236 = v230;
                      }
                      unint64_t v237 = v231;
LABEL_481:
                      float32x4_t v230 = v236;
                      float32x4_t v236 = (void *)*v236;
                      unint64_t v231 = v237;
                    }
                    while (v236);
                  }
                }
                unint64_t v214 = (unint64_t)prime;
              }
              if ((v214 & (v214 - 1)) != 0)
              {
                if (v213 >= v214) {
                  unint64_t v154 = v213 % v214;
                }
                else {
                  unint64_t v154 = v213;
                }
              }
              else
              {
                unint64_t v154 = (v214 - 1) & v213;
              }
            }
            uint64_t v239 = *(void *)(v210 + 1680);
            unint64_t v240 = *(void **)(v239 + 8 * v154);
            if (v240)
            {
              *(void *)float32x4_t v218 = *v240;
              goto LABEL_498;
            }
            *(void *)float32x4_t v218 = *(void *)(v210 + 1696);
            *(void *)(v210 + 1696) = v218;
            *(void *)(v239 + 8 * v154) = v210 + 1696;
            if (*(void *)v218)
            {
              unint64_t v241 = *(void *)(*(void *)v218 + 8);
              if ((v214 & (v214 - 1)) != 0)
              {
                if (v241 >= v214) {
                  v241 %= v214;
                }
              }
              else
              {
                v241 &= v214 - 1;
              }
              unint64_t v240 = (void *)(*(void *)(v210 + 1680) + 8 * v241);
LABEL_498:
              *unint64_t v240 = v218;
            }
            ++*v211;
LABEL_500:
            long long v242 = *(_OWORD *)(v183 + 848);
            long long v243 = *(_OWORD *)(v183 + 864);
            long long v244 = *(_OWORD *)(v183 + 896);
            *((_OWORD *)v218 + 5) = *(_OWORD *)(v183 + 880);
            *((_OWORD *)v218 + 6) = v244;
            *((_OWORD *)v218 + 3) = v242;
            *((_OWORD *)v218 + 4) = v243;
          }
          rf::detail::insertPRRMeshesInto((rf *)&v294, (void *)(v183 + 616), (uint64_t)v295);
          float32x4_t v245 = *(void **)&v295[16];
          if (*(void *)&v295[16])
          {
            uint64_t v246 = v294.n128_u64[0] + 960;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v246, (uint64_t)(v245 + 2), (uint64_t)(v245 + 2));
              float32x4_t v245 = (void *)*v245;
            }
            while (v245);
          }
          rf::detail::updatePRRMeshesAt((uint64_t)&v294, (uint64_t *)(v183 + 640), (uint64_t)v264);
          uint64_t v247 = v265;
          if (v265)
          {
            uint64_t v248 = v294.n128_u64[0] + 1000;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v248, (uint64_t)(v247 + 2), (uint64_t)(v247 + 2));
              uint64_t v247 = (void *)*v247;
            }
            while (v247);
          }
          rf::detail::removePRRMeshesFrom((uint64_t *)&v294, (uint64_t *)(v183 + 664), *(unsigned char *)(v184 + 2904), (uint64_t)v262);
          v249 = v263;
          if (v263)
          {
            uint64_t v250 = v294.n128_u64[0] + 1040;
            do
            {
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(v250, (uint64_t)(v249 + 2), (uint64_t)(v249 + 2));
              v249 = (void *)*v249;
            }
            while (v249);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v262);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v264);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v295);
          if (*(unsigned char *)(v183 + 976))
          {
            MutableCameraAnchor = rf::helpers::getMutableCameraAnchor((rf::helpers *)(v294.n128_u64[0] + 80));
            long long v252 = *(_OWORD *)(v183 + 912);
            long long v253 = *(_OWORD *)(v183 + 928);
            long long v254 = *(_OWORD *)(v183 + 960);
            MutableCameraAnchor[4] = *(_OWORD *)(v183 + 944);
            MutableCameraAnchor[5] = v254;
            MutableCameraAnchor[2] = v252;
            MutableCameraAnchor[3] = v253;
          }
          if (*(unsigned char *)(v183 + 1004))
          {
            unint64_t v255 = v294.n128_u64[0];
            *(_DWORD *)(v294.n128_u64[0] + 408) = *(_DWORD *)(v183 + 1000);
            *(unsigned char *)(v255 + 4std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1;
          }
          if (*(unsigned char *)(v183 + 1012))
          {
            unint64_t v256 = v294.n128_u64[0];
            *(_DWORD *)(v294.n128_u64[0] + 416) = *(_DWORD *)(v183 + 1008);
            *(unsigned char *)(v256 + 420) = 1;
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)buf);
          if (__p)
          {
            v267 = __p;
            operator delete(__p);
          }
          if (v268)
          {
            float32x4_t v269 = v268;
            operator delete(v268);
          }
          if (v270)
          {
            unint64_t v271 = v270;
            operator delete(v270);
          }
          if (v272)
          {
            uint64_t v273 = v272;
            operator delete(v272);
          }
          if (v274)
          {
            v275 = v274;
            operator delete(v274);
          }
          if (v276)
          {
            v277 = v276;
            operator delete(v276);
          }
          if (v278)
          {
            float32x4_t v279 = v278;
            operator delete(v278);
          }
          if (v280)
          {
            float32x4_t v281 = v280;
            operator delete(v280);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)v282);
          if (v284)
          {
            float32x4_t v285 = v284;
            operator delete(v284);
          }
          if (v286)
          {
            float32x4_t v287 = v286;
            operator delete(v286);
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v288);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v290);
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)v292);
          goto LABEL_537;
        }
      }
      else
      {
        if (v193 > 1)
        {
          if (v197 >= *(void *)&v190) {
            v197 %= *(void *)&v190;
          }
        }
        else
        {
          v197 &= *(void *)&v190 - 1;
        }
        if (v197 != v194) {
          goto LABEL_415;
        }
      }
      float32x4_t v196 = (void *)*v196;
      if (!v196) {
        goto LABEL_415;
      }
    }
  }
  v292[0] = (uint64_t *)&v294;
  uint64_t v62 = (void *)v294.n128_u64[0];
  uint64_t v63 = *(void *)(v294.n128_u64[0] + 16);
  if (!v63) {
    goto LABEL_268;
  }
  do
  {
    while (*(unsigned char *)(*(void *)(v63 + 48) + 112))
    {
      uint64_t v63 = *(void *)v63;
      if (!v63) {
        goto LABEL_267;
      }
    }
    int v64 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 720), v63 + 16);
    if (v64) {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase((void *)(v294.n128_u64[0] + 720), v64);
    }
    __int16 v65 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 760), v63 + 16);
    if (v65) {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase((void *)(v294.n128_u64[0] + 760), v65);
    }
    unint64_t v66 = *(void *)(v63 + 40);
    if (!v66)
    {
      if (*(unsigned char *)(v63 + 32)) {
        char v123 = *(void **)(v63 + 16);
      }
      else {
        char v123 = (void *)(v63 + 16);
      }
      unint64_t v66 = ((*v123 >> 2) + (*v123 << 6) + v123[1] + 2654435769) ^ *v123;
      *(void *)(v63 + 40) = v66;
    }
    uint64_t v67 = (void *)v294.n128_u64[0];
    int8x8_t v68 = *(int8x8_t *)(v294.n128_u64[0] + 848);
    if (!*(void *)&v68) {
      goto LABEL_176;
    }
    uint8x8_t v69 = (uint8x8_t)vcnt_s8(v68);
    v69.i16[0] = vaddlv_u8(v69);
    unint64_t v70 = v69.u32[0];
    if (v69.u32[0] > 1uLL)
    {
      unint64_t v71 = v66;
      if (v66 >= *(void *)&v68) {
        unint64_t v71 = v66 % *(void *)&v68;
      }
    }
    else
    {
      unint64_t v71 = (*(void *)&v68 - 1) & v66;
    }
    uint64_t v72 = *(void ***)(*(void *)(v294.n128_u64[0] + 840) + 8 * v71);
    if (!v72) {
      goto LABEL_176;
    }
    uint64_t v73 = *v72;
    if (!*v72) {
      goto LABEL_176;
    }
    uint64_t v74 = v294.n128_u64[0] + 872;
    while (1)
    {
      unint64_t v75 = v73[1];
      if (v75 == v66) {
        break;
      }
      if (v70 > 1)
      {
        if (v75 >= *(void *)&v68) {
          v75 %= *(void *)&v68;
        }
      }
      else
      {
        v75 &= *(void *)&v68 - 1;
      }
      if (v75 != v71) {
        goto LABEL_175;
      }
LABEL_146:
      uint64_t v73 = (void *)*v73;
      if (!v73) {
        goto LABEL_175;
      }
    }
    if (!rf::data_flow::RFUUID::Equality::operator()(v74, (uint64_t)(v73 + 2), v63 + 16)) {
      goto LABEL_146;
    }
    unint64_t v76 = v294.n128_u64[0];
    int8x8_t v77 = *(int8x8_t *)(v294.n128_u64[0] + 848);
    unint64_t v78 = v73[1];
    uint8x8_t v79 = (uint8x8_t)vcnt_s8(v77);
    v79.i16[0] = vaddlv_u8(v79);
    if (v79.u32[0] > 1uLL)
    {
      if (v78 >= *(void *)&v77) {
        v78 %= *(void *)&v77;
      }
    }
    else
    {
      v78 &= *(void *)&v77 - 1;
    }
    uint64_t v80 = *(void *)(v294.n128_u64[0] + 840);
    float32x4_t v81 = *(void **)(v80 + 8 * v78);
    do
    {
      float32x4_t v82 = v81;
      float32x4_t v81 = (void *)*v81;
    }
    while (v81 != v73);
    if (v82 == (void *)(v294.n128_u64[0] + 856)) {
      goto LABEL_165;
    }
    unint64_t v83 = v82[1];
    if (v79.u32[0] > 1uLL)
    {
      if (v83 >= *(void *)&v77) {
        v83 %= *(void *)&v77;
      }
    }
    else
    {
      v83 &= *(void *)&v77 - 1;
    }
    if (v83 != v78)
    {
LABEL_165:
      if (!*v73) {
        goto LABEL_166;
      }
      unint64_t v84 = *(void *)(*v73 + 8);
      if (v79.u32[0] > 1uLL)
      {
        if (v84 >= *(void *)&v77) {
          v84 %= *(void *)&v77;
        }
      }
      else
      {
        v84 &= *(void *)&v77 - 1;
      }
      if (v84 != v78) {
LABEL_166:
      }
        *(void *)(v80 + 8 * v78) = 0;
    }
    uint64_t v85 = *v73;
    if (*v73)
    {
      unint64_t v86 = *(void *)(v85 + 8);
      if (v79.u32[0] > 1uLL)
      {
        if (v86 >= *(void *)&v77) {
          v86 %= *(void *)&v77;
        }
      }
      else
      {
        v86 &= *(void *)&v77 - 1;
      }
      if (v86 != v78)
      {
        *(void *)(*(void *)(v76 + 840) + 8 * v86) = v82;
        uint64_t v85 = *v73;
      }
    }
    *float32x4_t v82 = v85;
    *uint64_t v73 = 0;
    --*(void *)(v76 + 864);
    *(void *)buf = v73;
    *(void *)&buf[8] = v76 + 856;
    LOBYTE(v298) = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_175:
    uint64_t v67 = (void *)v294.n128_u64[0];
LABEL_176:
    unint64_t v87 = *(void *)(v63 + 40);
    if (!v87)
    {
      if (*(unsigned char *)(v63 + 32)) {
        int v124 = *(void **)(v63 + 16);
      }
      else {
        int v124 = (void *)(v63 + 16);
      }
      unint64_t v87 = ((*v124 >> 2) + (*v124 << 6) + v124[1] + 2654435769) ^ *v124;
      *(void *)(v63 + 40) = v87;
    }
    int8x8_t v88 = (int8x8_t)v67[111];
    if (!*(void *)&v88) {
      goto LABEL_224;
    }
    uint8x8_t v89 = (uint8x8_t)vcnt_s8(v88);
    v89.i16[0] = vaddlv_u8(v89);
    unint64_t v90 = v89.u32[0];
    if (v89.u32[0] > 1uLL)
    {
      unint64_t v91 = v87;
      if (v87 >= *(void *)&v88) {
        unint64_t v91 = v87 % *(void *)&v88;
      }
    }
    else
    {
      unint64_t v91 = (*(void *)&v88 - 1) & v87;
    }
    float32x4_t v92 = *(void ***)(v67[110] + 8 * v91);
    if (!v92) {
      goto LABEL_224;
    }
    float32x4_t v93 = *v92;
    if (!*v92) {
      goto LABEL_224;
    }
    uint64_t v94 = (uint64_t)(v67 + 114);
    while (2)
    {
      unint64_t v95 = v93[1];
      if (v95 != v87)
      {
        if (v90 > 1)
        {
          if (v95 >= *(void *)&v88) {
            v95 %= *(void *)&v88;
          }
        }
        else
        {
          v95 &= *(void *)&v88 - 1;
        }
        if (v95 != v91) {
          goto LABEL_223;
        }
LABEL_193:
        float32x4_t v93 = (void *)*v93;
        if (!v93) {
          goto LABEL_223;
        }
        continue;
      }
      break;
    }
    if (!rf::data_flow::RFUUID::Equality::operator()(v94, (uint64_t)(v93 + 2), v63 + 16)) {
      goto LABEL_193;
    }
    unint64_t v96 = v294.n128_u64[0];
    int8x8_t v97 = *(int8x8_t *)(v294.n128_u64[0] + 888);
    unint64_t v98 = v93[1];
    uint8x8_t v99 = (uint8x8_t)vcnt_s8(v97);
    v99.i16[0] = vaddlv_u8(v99);
    if (v99.u32[0] > 1uLL)
    {
      if (v98 >= *(void *)&v97) {
        v98 %= *(void *)&v97;
      }
    }
    else
    {
      v98 &= *(void *)&v97 - 1;
    }
    float32x4_t v100 = (void *)*v93;
    uint64_t v101 = *(void *)(v294.n128_u64[0] + 880);
    uint64_t v102 = *(void **)(v101 + 8 * v98);
    do
    {
      uint64_t v103 = v102;
      uint64_t v102 = (void *)*v102;
    }
    while (v102 != v93);
    if (v103 == (void *)(v294.n128_u64[0] + 896)) {
      goto LABEL_212;
    }
    unint64_t v104 = v103[1];
    if (v99.u32[0] > 1uLL)
    {
      if (v104 >= *(void *)&v97) {
        v104 %= *(void *)&v97;
      }
    }
    else
    {
      v104 &= *(void *)&v97 - 1;
    }
    if (v104 == v98)
    {
LABEL_214:
      if (v100)
      {
        unint64_t v105 = v100[1];
        goto LABEL_216;
      }
    }
    else
    {
LABEL_212:
      if (!v100) {
        goto LABEL_213;
      }
      unint64_t v105 = v100[1];
      if (v99.u32[0] > 1uLL)
      {
        unint64_t v106 = v100[1];
        if (v105 >= *(void *)&v97) {
          unint64_t v106 = v105 % *(void *)&v97;
        }
      }
      else
      {
        unint64_t v106 = v105 & (*(void *)&v97 - 1);
      }
      if (v106 != v98)
      {
LABEL_213:
        *(void *)(v101 + 8 * v98) = 0;
        float32x4_t v100 = (void *)*v93;
        goto LABEL_214;
      }
LABEL_216:
      if (v99.u32[0] > 1uLL)
      {
        if (v105 >= *(void *)&v97) {
          v105 %= *(void *)&v97;
        }
      }
      else
      {
        v105 &= *(void *)&v97 - 1;
      }
      if (v105 != v98)
      {
        *(void *)(*(void *)(v96 + 880) + 8 * v105) = v103;
        float32x4_t v100 = (void *)*v93;
      }
    }
    *uint64_t v103 = v100;
    *float32x4_t v93 = 0;
    --*(void *)(v96 + 904);
    std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](v93 + 6);
    operator delete(v93);
LABEL_223:
    uint64_t v67 = (void *)v294.n128_u64[0];
LABEL_224:
    uint64_t v107 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v67 + 115, v63 + 16);
    uint64_t v108 = v107;
    if (v107)
    {
      unint64_t v109 = v294.n128_u64[0];
      int8x8_t v110 = *(int8x8_t *)(v294.n128_u64[0] + 928);
      unint64_t v111 = v107[1];
      uint8x8_t v112 = (uint8x8_t)vcnt_s8(v110);
      v112.i16[0] = vaddlv_u8(v112);
      if (v112.u32[0] > 1uLL)
      {
        if (v111 >= *(void *)&v110) {
          v111 %= *(void *)&v110;
        }
      }
      else
      {
        v111 &= *(void *)&v110 - 1;
      }
      uint64_t v113 = *v107;
      uint64_t v114 = *(void *)(v294.n128_u64[0] + 920);
      long long v115 = *(uint64_t **)(v114 + 8 * v111);
      do
      {
        float v116 = v115;
        long long v115 = (uint64_t *)*v115;
      }
      while (v115 != v107);
      if (v116 == (uint64_t *)(v294.n128_u64[0] + 936)) {
        goto LABEL_242;
      }
      unint64_t v117 = v116[1];
      if (v112.u32[0] > 1uLL)
      {
        if (v117 >= *(void *)&v110) {
          v117 %= *(void *)&v110;
        }
      }
      else
      {
        v117 &= *(void *)&v110 - 1;
      }
      if (v117 == v111)
      {
LABEL_244:
        if (v113)
        {
          unint64_t v118 = *(void *)(v113 + 8);
          goto LABEL_246;
        }
      }
      else
      {
LABEL_242:
        if (!v113) {
          goto LABEL_243;
        }
        unint64_t v118 = *(void *)(v113 + 8);
        if (v112.u32[0] > 1uLL)
        {
          unint64_t v119 = *(void *)(v113 + 8);
          if (v118 >= *(void *)&v110) {
            unint64_t v119 = v118 % *(void *)&v110;
          }
        }
        else
        {
          unint64_t v119 = v118 & (*(void *)&v110 - 1);
        }
        if (v119 != v111)
        {
LABEL_243:
          *(void *)(v114 + 8 * v111) = 0;
          uint64_t v113 = *v107;
          goto LABEL_244;
        }
LABEL_246:
        if (v112.u32[0] > 1uLL)
        {
          if (v118 >= *(void *)&v110) {
            v118 %= *(void *)&v110;
          }
        }
        else
        {
          v118 &= *(void *)&v110 - 1;
        }
        if (v118 != v111)
        {
          *(void *)(*(void *)(v109 + 920) + 8 * v118) = v116;
          uint64_t v113 = *v107;
        }
      }
      *float v116 = v113;
      *uint64_t v107 = 0;
      --*(void *)(v109 + 944);

      operator delete(v108);
    }
    unint64_t v120 = v294.n128_u64[0];
    long long v121 = *(_OWORD *)(v63 + 32);
    *(_OWORD *)buf = *(_OWORD *)(v63 + 16);
    long long v298 = v121;
    long long v122 = *(std::__shared_weak_count **)(v63 + 56);
    uint64_t v299 = *(void *)(v63 + 48);
    float32x4_t v300 = v122;
    if (v122) {
      atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(v120 + 800, (uint64_t)buf, (uint64_t)buf);
    if (v300) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v300);
    }
    uint64_t v63 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase(v294.n128_u64[0], (uint64_t *)v63);
  }
  while (v63);
LABEL_267:
  uint64_t v62 = (void *)v294.n128_u64[0];
LABEL_268:
  for (k = v62[7]; k; uint64_t v62 = (void *)v294.n128_u64[0])
  {
    while (*(unsigned char *)(*(void *)(k + 48) + 112))
    {
      uint64_t k = *(void *)k;
      if (!k) {
        goto LABEL_281;
      }
    }
    uint64_t v126 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v62 + 120, k + 16);
    if (v126) {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase((void *)(v294.n128_u64[0] + 960), v126);
    }
    uint64_t v127 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(v294.n128_u64[0] + 1000), k + 16);
    if (v127) {
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase((void *)(v294.n128_u64[0] + 1000), v127);
    }
    unint64_t v128 = v294.n128_u64[0];
    long long v129 = *(_OWORD *)(k + 32);
    *(_OWORD *)buf = *(_OWORD *)(k + 16);
    long long v298 = v129;
    char v130 = *(std::__shared_weak_count **)(k + 56);
    uint64_t v299 = *(void *)(k + 48);
    float32x4_t v300 = v130;
    if (v130) {
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(v128 + 1040, (uint64_t)buf, (uint64_t)buf);
    if (v300) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v300);
    }
    uint64_t k = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase((void *)(v294.n128_u64[0] + 40), (uint64_t *)k);
  }
LABEL_281:
  float32x4_t v131 = (uint64_t *)v62[38];
  if (v131)
  {
    do
    {
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>(v294.n128_u64[0] + 1320, (uint64_t)(v131 + 2), (_OWORD *)v131 + 1);
      float32x4_t v131 = (uint64_t *)*v131;
    }
    while (v131);
    uint64_t v62 = (void *)v294.n128_u64[0];
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::clear((uint64_t)(v62 + 36));
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((void *)(v294.n128_u64[0] + 1240));
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((void *)(v294.n128_u64[0] + 1280));
LABEL_537:
  std::mutex::unlock((std::mutex *)v294.n128_u64[1]);
}

void sub_235AA2BCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_235AA2EB8()
{
}

void rf::ARState::consumeChangesSinceLast(uint64_t a1, uint64_t a2)
{
  uint64_t v232 = *MEMORY[0x263EF8340];
  unint64_t v160 = (void *)(a1 + 64);
  float v188 = (void *)(a1 + 64);
  unint64_t v189 = (std::mutex *)a1;
  std::mutex::lock((std::mutex *)a1);
  unint64_t v200 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v199 = 0u;
  *(_DWORD *)uint8x8_t v201 = 1065353216;
  memset(&v201[8], 0, 32);
  memset(&v202[1], 0, 32);
  LODWORD(v202[0]) = 1065353216;
  LODWORD(v202[5]) = 1065353216;
  memset(&v202[6], 0, 32);
  memset(&v202[11], 0, 32);
  LODWORD(v202[10]) = 1065353216;
  *(_DWORD *)float v203 = 1065353216;
  memset(&v203[8], 0, 32);
  memset(&v204[8], 0, 32);
  *(_DWORD *)float32x4_t v204 = 1065353216;
  *(_DWORD *)unint64_t v205 = 1065353216;
  memset(&v205[8], 0, 32);
  *(_DWORD *)unint64_t v206 = 1065353216;
  memset(&v206[8], 0, 32);
  *(_DWORD *)unint64_t v207 = 1065353216;
  memset(&v207[8], 0, 32);
  *(_DWORD *)uint64_t v208 = 1065353216;
  memset(&v208[8], 0, 32);
  *(_DWORD *)uint64_t v209 = 1065353216;
  memset(&v209[8], 0, 32);
  *(_DWORD *)unint64_t v210 = 1065353216;
  memset(&v210[8], 0, 32);
  *(_DWORD *)float32x4_t v211 = 1065353216;
  memset(&v211[8], 0, 32);
  *(_DWORD *)unint64_t v212 = 1065353216;
  memset(&v212[8], 0, 32);
  *(_DWORD *)unint64_t v213 = 1065353216;
  memset(&v213[8], 0, 32);
  *(_DWORD *)unint64_t v214 = 1065353216;
  memset(&v214[8], 0, 32);
  *(_DWORD *)uint8x8_t v215 = 1065353216;
  memset(&v215[8], 0, 32);
  *(_DWORD *)unint64_t v216 = 1065353216;
  memset(&v216[8], 0, 32);
  *(_DWORD *)float32x4_t v217 = 1065353216;
  memset(&v217[8], 0, 32);
  *(_DWORD *)float32x4_t v218 = 1065353216;
  memset(&v218[8], 0, 32);
  *(_DWORD *)unint64_t v219 = 1065353216;
  memset(&v219[8], 0, 32);
  *(_DWORD *)float32x4_t v220 = 1065353216;
  memset(&v220[8], 0, 32);
  *(_DWORD *)float v221 = 1065353216;
  memset(&v221[8], 0, 32);
  *(_DWORD *)float v222 = 1065353216;
  memset(&v222[8], 0, 32);
  int v223 = 1065353216;
  memset(v224, 0, sizeof(v224));
  int v225 = 1065353216;
  Entity = v226;
  memset(v226, 0, sizeof(v226));
  int v227 = 1065353216;
  *(void *)(a1 + 1792) = 0;
  __int16 v228 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1800, (uint64_t *)&__p[1]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1840, (uint64_t *)&v201[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1880, &v202[1]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1920, &v202[6]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 1960, &v202[11]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2000, (uint64_t *)&v203[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2040, (uint64_t *)&v204[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2080, (uint64_t *)&v205[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign(a1 + 2120, (uint64_t *)&v206[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2160, (uint64_t *)&v207[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2200, (uint64_t *)&v208[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(a1 + 2240, (uint64_t *)&v209[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2280, (uint64_t *)&v210[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2320, (uint64_t *)&v211[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign(a1 + 2360, (uint64_t *)&v212[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2400, (uint64_t *)&v213[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2440, (uint64_t *)&v214[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2480, (uint64_t *)&v215[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2520, (uint64_t *)&v216[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2560, (uint64_t *)&v217[8]);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign(a1 + 2600, (uint64_t *)&v218[8]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 2640, (uint64_t *)&v219[8]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 2680, (uint64_t *)&v220[8]);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign(a1 + 2720, (uint64_t *)&v221[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2760, (uint64_t *)&v222[8]);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(a1 + 2800, (uint64_t *)v224);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign(a1 + 2840, v226);
  *(_WORD *)(a1 + 2880) = v228;
  rf::data_flow::consumer::UpdateData::~UpdateData((rf::data_flow::consumer::UpdateData *)__p);
  uint64_t v4 = *(void *)(a1 + 2896);
  *(void *)(a1 + 2896) = v4 + 1;
  *(void *)(a1 + 1792) = v4;
  long long v170 = (std::mutex *)a1;
  if (!*(unsigned char *)(a2 + 8))
  {
    int v7 = v160;
    goto LABEL_186;
  }
  uint8x8_t v5 = *(void **)(a1 + 840);
  if (v5)
  {
    uint64_t v6 = 0;
    long long v185 = 0u;
    long long v186 = 0u;
    int v187 = 1065353216;
LABEL_7:
    BOOL v8 = (void *)(a1 + 800);
    do
    {
      while (1)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>((uint64_t)&v185, (uint64_t)(v5 + 2), (uint64_t)(v5 + 2));
        if (v6) {
          break;
        }
        int v9 = (void *)*v5;
        uint8x8_t v5 = v8;
        if (!v9) {
          break;
        }
        uint64_t v6 = 0;
        uint8x8_t v5 = v9;
      }
      uint8x8_t v5 = (void *)*v5;
      uint64_t v6 = 1;
    }
    while (v5);
    if (!*(unsigned char *)(a2 + 8)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    goto LABEL_14;
  }
  uint8x8_t v5 = *(void **)(a1 + 800);
  long long v185 = 0u;
  long long v186 = 0u;
  int v187 = 1065353216;
  if (v5)
  {
    uint64_t v6 = 1;
    goto LABEL_7;
  }
LABEL_14:
  int v10 = (rf *)MEMORY[0x237DEDE50](*(void *)a2);
  int v11 = (uint64_t *)v186;
  if (!(void)v186) {
    goto LABEL_147;
  }
  int v12 = v10;
  uint64_t v166 = *MEMORY[0x263F37670];
  uint64_t v165 = *MEMORY[0x263F37660];
  CFAllocatorRef v168 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v167 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  do
  {
    long long v13 = *((_OWORD *)v11 + 2);
    long long v195 = *((_OWORD *)v11 + 1);
    long long v196 = v13;
    uint64_t v14 = *(void *)(v11[6] + 32);
    if (rf::isRealityFusionVerboseLoggingEnabled(void)::once != -1) {
      dispatch_once(&rf::isRealityFusionVerboseLoggingEnabled(void)::once, &__block_literal_global_4_0);
    }
    if (rf::isRealityFusionVerboseLoggingEnabled(void)::_realityFusionVerboseLoggingEnabled)
    {
      uint64_t v32 = rf::realityFusionLogObject(v10);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(_DWORD *)(v11[6] + 116);
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v195, __p);
        std::string v34 = "PRR";
        if (!v33) {
          std::string v34 = "MeshChunk";
        }
        if ((SBYTE7(v199) & 0x80u) == 0) {
          uint64_t v35 = __p;
        }
        else {
          uint64_t v35 = (void **)__p[0];
        }
        *(_DWORD *)unint64_t v193 = 136315394;
        *(void *)&v193[4] = v34;
        *(_WORD *)&v193[12] = 2080;
        *(void *)&v193[14] = v35;
        _os_log_impl(&dword_235A7C000, v32, OS_LOG_TYPE_DEFAULT, "ARState: Update Mesh Asset for %s mesh %s", v193, 0x16u);
        if (SBYTE7(v199) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((void *)&v196 + 1))
      {
        std::string v36 = &v195;
        if ((_BYTE)v196) {
          std::string v36 = (long long *)v195;
        }
        *((void *)&v196 + 1) = ((*(void *)v36 >> 2) + (*(void *)v36 << 6) + *((void *)v36 + 1) + 2654435769) ^ *(void *)v36;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*((void *)&v196 + 1))
      {
        std::string v37 = &v195;
        if ((_BYTE)v196) {
          std::string v37 = (long long *)v195;
        }
        *((void *)&v196 + 1) = ((*(void *)v37 >> 2) + (*(void *)v37 << 6) + *((void *)v37 + 1) + 2654435769) ^ *(void *)v37;
      }
      kdebug_trace();
    }
    if (v170[45].__m_.__opaque[44])
    {
      __p[0] = 0;
      __p[1] = __p;
      *(void *)&long long v199 = 0x6812000000;
      *((void *)&v199 + 1) = __Block_byref_object_copy_;
      unint64_t v200 = __Block_byref_object_dispose_;
      *(void *)uint8x8_t v201 = "";
      *(void *)&v201[8] = v170;
      *(void *)&v201[16] = v14;
      *(_OWORD *)&v201[24] = v195;
      *(_OWORD *)uint64_t v202 = v196;
      v202[2] = v12;
      int v15 = *(NSObject **)&v170[45].__m_.__opaque[32];
      BOOL v16 = *(NSObject **)&v170[45].__m_.__opaque[24];
      *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 3221225472;
      *(void *)&long long v230 = ___ZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManager_block_invoke;
      *((void *)&v230 + 1) = &unk_264C68288;
      unint64_t v231 = __p;
      dispatch_group_async(v15, v16, &block);
      _Block_object_dispose(__p, 8);
      goto LABEL_59;
    }
    uint64_t v18 = *(void *)v193;
    if (!*(void *)v193)
    {
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*((void *)&v196 + 1))
        {
          uint64_t v38 = &v195;
          if ((_BYTE)v196) {
            uint64_t v38 = (long long *)v195;
          }
          *((void *)&v196 + 1) = ((*(void *)v38 >> 2) + (*(void *)v38 << 6) + *((void *)v38 + 1) + 2654435769) ^ *(void *)v38;
        }
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*((void *)&v196 + 1))
        {
          long long v39 = &v195;
          if ((_BYTE)v196) {
            long long v39 = (long long *)v195;
          }
          *((void *)&v196 + 1) = ((*(void *)v39 >> 2) + (*(void *)v39 << 6) + *((void *)v39 + 1) + 2654435769) ^ *(void *)v39;
        }
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*((void *)&v196 + 1))
        {
          uint64_t v40 = &v195;
          if ((_BYTE)v196) {
            uint64_t v40 = (long long *)v195;
          }
          *((void *)&v196 + 1) = ((*(void *)v40 >> 2) + (*(void *)v40 << 6) + *((void *)v40 + 1) + 2654435769) ^ *(void *)v40;
        }
        kdebug_trace();
      }
      goto LABEL_57;
    }
    if (!*(unsigned char *)(*(void *)v193 + 216)
      || (int v17 = *(rf **)(*(void *)v193 + 192)) == 0
      || (int v17 = (rf *)[(rf *)v17 length]) == 0)
    {
      BOOL v22 = rf::realityFusionLogObject(v17);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_47;
      }
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v195, __p);
      if ((SBYTE7(v199) & 0x80u) == 0) {
        uint64_t v27 = __p;
      }
      else {
        uint64_t v27 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      std::string v24 = v22;
      long long v25 = "Updated Mesh with identifier %s should have indices buffer";
LABEL_75:
      _os_log_error_impl(&dword_235A7C000, v24, OS_LOG_TYPE_ERROR, v25, buf, 0xCu);
      if (SBYTE7(v199) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_47;
    }
    if (!*(unsigned char *)(v18 + 152)
      || (int v17 = *(rf **)(v18 + 128)) == 0
      || (int v17 = (rf *)[(rf *)v17 length]) == 0)
    {
      BOOL v22 = rf::realityFusionLogObject(v17);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_47;
      }
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v195, __p);
      if ((SBYTE7(v199) & 0x80u) == 0) {
        long long v23 = __p;
      }
      else {
        long long v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v23;
      std::string v24 = v22;
      long long v25 = "Updated Mesh with identifier %s should have position buffer";
      goto LABEL_75;
    }
    if (*(unsigned char *)(v18 + 184))
    {
      int v17 = *(rf **)(v18 + 160);
      if (v17)
      {
        int v17 = (rf *)[(rf *)v17 length];
        if (v17)
        {
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*((void *)&v196 + 1))
            {
              unint64_t v41 = &v195;
              if ((_BYTE)v196) {
                unint64_t v41 = (long long *)v195;
              }
              *((void *)&v196 + 1) = ((*(void *)v41 >> 2)
                                      + (*(void *)v41 << 6)
                                      + *((void *)v41 + 1)
                                      + 2654435769) ^ *(void *)v41;
            }
            kdebug_trace();
          }
          if (!*(unsigned char *)(v18 + 376) || !*(void *)(v18 + 368))
          {
            Mutable = (void *)REAssetServiceMeshAssetCreateMutable();
            int v20 = Mutable;
            __p[0] = Mutable;
            if (*(unsigned char *)(v18 + 376))
            {
              uint64_t v21 = *(void *)(v18 + 368);
              *(void *)(v18 + 368) = v20;
              if (v21) {
                RERelease();
              }
              __p[0] = 0;
            }
            else
            {
              *(void *)(v18 + 368) = Mutable;
              __p[0] = 0;
              *(unsigned char *)(v18 + 376) = 1;
            }
            RESharedPtr<REAsset>::~RESharedPtr(__p);
          }
          *(void *)buf = v166;
          *(void *)&buf[8] = v165;
          REMeshAttributesDescriptorCreate();
          REMeshDefinitionCreateWithAttributes();
          uint64_t v28 = *(void *)(v18 + 208);
          uint64_t v163 = [*(id *)(v18 + 192) length];
          long long v29 = (const UInt8 *)[*(id *)(v18 + 192) contents];
          if (v163 >= 4 * v28) {
            CFIndex v30 = 4 * v28;
          }
          else {
            CFIndex v30 = v163;
          }
          CFDataRef v164 = CFDataCreateWithBytesNoCopy(v168, v29, v30, v167);
          *(void *)&long long v182 = v164;
          CFDataRef v162 = CFDataCreateWithBytesNoCopy(v168, (const UInt8 *)[*(id *)(v18 + 128) contents], objc_msgSend(*(id *)(v18 + 128), "length"), v167);
          *(void *)&v180[0] = v162;
          CFDataRef cf = CFDataCreateWithBytesNoCopy(v168, (const UInt8 *)[*(id *)(v18 + 160) contents], objc_msgSend(*(id *)(v18 + 160), "length"), v167);
          *(void *)&long long v177 = cf;
          REMeshDefinitionSetIndicesWithData();
          REMeshDefinitionSetAttributeWithData();
          REMeshDefinitionSetAttributeWithData();
          REMeshModelDefinitionCreate();
          REMeshModelDefinitionAppendTriangles();
          REMeshAssetReplaceAllWithModel();
          RERelease();
          RERelease();
          RERelease();
          uint64_t v31 = v188;
          *(_OWORD *)std::string __p = v195;
          long long v199 = v196;
          unint64_t v200 = *(uint64_t (**)())(v18 + 368);
          if (v200) {
            RERetain();
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>((uint64_t)(v31 + 105), (uint64_t)__p, (uint64_t)__p);
          RESharedPtr<REAsset>::~RESharedPtr(&v200);
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*((void *)&v196 + 1))
            {
              std::string v42 = &v195;
              if ((_BYTE)v196) {
                std::string v42 = (long long *)v195;
              }
              *((void *)&v196 + 1) = ((*(void *)v42 >> 2)
                                      + (*(void *)v42 << 6)
                                      + *((void *)v42 + 1)
                                      + 2654435769) ^ *(void *)v42;
            }
            kdebug_trace();
          }
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*((void *)&v196 + 1))
            {
              long long v43 = &v195;
              if ((_BYTE)v196) {
                long long v43 = (long long *)v195;
              }
              *((void *)&v196 + 1) = ((*(void *)v43 >> 2)
                                      + (*(void *)v43 << 6)
                                      + *((void *)v43 + 1)
                                      + 2654435769) ^ *(void *)v43;
            }
            kdebug_trace();
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v162) {
            CFRelease(v162);
          }
          if (v164) {
            CFRelease(v164);
          }
          goto LABEL_57;
        }
      }
    }
    BOOL v22 = rf::realityFusionLogObject(v17);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v195, __p);
      if ((SBYTE7(v199) & 0x80u) == 0) {
        uint64_t v26 = __p;
      }
      else {
        uint64_t v26 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      std::string v24 = v22;
      long long v25 = "Updated Mesh with identifier %s should have normal buffer";
      goto LABEL_75;
    }
LABEL_47:

LABEL_57:
    int v10 = *(rf **)&v193[8];
    if (*(void *)&v193[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v193[8]);
    }
LABEL_59:
    int v11 = (uint64_t *)*v11;
  }
  while (v11);
  if (v170[45].__m_.__opaque[40])
  {
    for (uint64_t i = (uint64_t *)v186; i; uint64_t i = (uint64_t *)*i)
    {
      long long v45 = (unint64_t *)i[2];
      unint64_t v46 = i[3];
      int v47 = *((unsigned __int8 *)i + 32);
      LODWORD(v195) = *(_DWORD *)((char *)i + 33);
      *(_DWORD *)((char *)&v195 + 3) = *((_DWORD *)i + 9);
      uint64_t v48 = i[5];
      uint64_t v49 = *(void *)(i[6] + 32);
      if (re::internal::enableSignposts(0, 0))
      {
        if (!v48)
        {
          if (v47)
          {
            unint64_t v52 = *v45;
            unint64_t v53 = v45[1];
          }
          else
          {
            unint64_t v52 = (unint64_t)v45;
            unint64_t v53 = v46;
          }
          uint64_t v48 = ((v52 >> 2) + (v52 << 6) + v53 + 2654435769u) ^ v52;
        }
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!v48)
        {
          if (v47)
          {
            unint64_t v54 = *v45;
            unint64_t v55 = v45[1];
          }
          else
          {
            unint64_t v54 = (unint64_t)v45;
            unint64_t v55 = v46;
          }
          uint64_t v48 = ((v54 >> 2) + (v54 << 6) + v55 + 2654435769u) ^ v54;
        }
        kdebug_trace();
      }
      __p[0] = 0;
      __p[1] = __p;
      *(void *)&long long v199 = 0x6012000000;
      *((void *)&v199 + 1) = __Block_byref_object_copy__6;
      unint64_t v200 = __Block_byref_object_dispose__7;
      *(void *)uint8x8_t v201 = "";
      *(void *)&v201[8] = v170;
      *(void *)&v201[16] = v49;
      *(void *)&v201[24] = v45;
      *(void *)&v201[32] = v46;
      LOBYTE(v202[0]) = v47;
      *(_DWORD *)((char *)v202 + 1) = v195;
      HIDWORD(v202[0]) = *(_DWORD *)((char *)&v195 + 3);
      v202[1] = v48;
      unint64_t v50 = *(NSObject **)&v170[45].__m_.__opaque[32];
      long long v51 = *(NSObject **)&v170[45].__m_.__opaque[24];
      *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 3221225472;
      *(void *)&long long v230 = ___ZN2rf7ARState18updatePhysicsShapeERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEE_block_invoke;
      *((void *)&v230 + 1) = &unk_264C68288;
      unint64_t v231 = __p;
      dispatch_group_async(v50, v51, &block);
      _Block_object_dispose(__p, 8);
    }
  }
LABEL_147:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v185);
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  MEMORY[0x237DEDE50](*(void *)a2);
  std::string v56 = v188;
  uint64_t v57 = (void *)v188[107];
  if (v57)
  {
    do
    {
      uint64_t v58 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(v57 + 2));
      if (v58) {
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v58[6] + 368, v57 + 6);
      }
      uint64_t v59 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 5, (uint64_t)(v57 + 2));
      if (v59) {
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v59[6] + 368, v57 + 6);
      }
      uint64_t v57 = (void *)*v57;
    }
    while (v57);
    std::string v56 = v188;
  }
  Entity = (uint64_t *)v56[112];
  if (Entity)
  {
    do
    {
      Entity[6] = 0;
      *(void *)&blocunint64_t k = REAssetManagerCollisionMeshAssetCreateFromMesh();
      *(void *)&long long v185 = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(Entity + 2)))
      {
        __p[0] = Entity + 2;
        unint64_t v60 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v188, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(v60[6] + 384, (uint64_t *)&v185);
        if (re::internal::enableSignposts(0, 0))
        {
          if (!Entity[5])
          {
            if (*((unsigned char *)Entity + 32)) {
              uint64_t v61 = (void *)Entity[2];
            }
            else {
              uint64_t v61 = Entity + 2;
            }
            Entity[5] = ((*v61 >> 2) + (*v61 << 6) + v61[1] + 2654435769) ^ *v61;
          }
          __p[0] = Entity + 2;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v188, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
          kdebug_trace();
        }
      }
      RESharedPtr<REAsset>::~RESharedPtr(&v185);
      RESharedPtr<REAsset>::~RESharedPtr(&block);
      Entity = (uint64_t *)*Entity;
    }
    while (Entity);
    std::string v56 = v188;
  }
  for (uint64_t j = (uint64_t **)v56[117]; j; uint64_t j = (uint64_t **)*j)
  {
    uint64_t v63 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(j + 2));
    if (v63) {
      std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(v63[6] + 400, j[6]);
    }
    int v64 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 5, (uint64_t)(j + 2));
    if (v64) {
      std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(v64[6] + 400, j[6]);
    }
  }
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  REServiceLocatorGetECSService();
  for (unint64_t k = 0; k < REECSManagerSceneCount(); ++k)
  {
    Scene = (rf::AnchorDefinitionComponent *)REECSManagerGetScene();
    uint64_t v67 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::instance(Scene);
    if (*(void *)v67)
    {
      rf::AnchorDefinitionComponent::instance(v67);
      ComponentsOfCustomType = (char *)RESceneGetComponentsOfCustomType();
      uint64_t v70 = v69;
      *(void *)&long long v185 = ComponentsOfCustomType;
      *((void *)&v185 + 1) = v69;
      __p[0] = ComponentsOfCustomType;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward((uint64_t)ComponentsOfCustomType, v69, (uint64_t *)__p);
      unint64_t v71 = (char *)__p[0];
      *(void **)&long long v186 = __p[0];
      BYTE8(v186) = 1;
      uint64_t v72 = &ComponentsOfCustomType[8 * v70];
      *(void **)&long long v195 = __p[0];
      *((void *)&v195 + 1) = &v185;
      if (v72 != __p[0])
      {
        do
        {
          uint64_t Object = RECustomComponentGetObject();
          LOBYTE(v230) = 0;
          *((void *)&v230 + 1) = 0;
          uuid_clear((unsigned __int8 *)&block);
          *(void *)&blocunint64_t k = Object;
          LOBYTE(v230) = 1;
          Entity = (uint64_t *)REComponentGetEntity();
          uint64_t v74 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 10, (uint64_t)&block);
          unint64_t v75 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 15, (uint64_t)&block);
          if (v74)
          {
            if (REEntityIsActive())
            {
              rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)__p);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v74 + 6), (uint64_t)__p);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
              std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)(v188 + 140), (uint64_t)&block, &block);
            }
          }
          else
          {
            unint64_t v76 = v75;
            if (v75 && REEntityIsActive())
            {
              rf::helpers::createAnchorFromAnchorDefinitionComponent((uint64_t)__p);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v76 + 6), (uint64_t)__p);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
            }
          }
          *(void *)&long long v195 = v71 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward(**((void **)&v195 + 1), *(void *)(*((void *)&v195 + 1) + 8), (uint64_t *)&v195);
          unint64_t v71 = (char *)v195;
        }
        while ((char *)v195 != v72);
      }
    }
  }
  int v7 = v188;
LABEL_186:
  int8x8_t v77 = (uint64_t *)v7[107];
  if (v77)
  {
    while (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(v77 + 2)))
    {
      int8x8_t v77 = (uint64_t *)*v77;
      if (!v77) {
        goto LABEL_189;
      }
    }
    long long v185 = 0u;
    long long v186 = 0u;
    int v187 = 1065353216;
LABEL_258:
    *(void *)&blocunint64_t k = v77 + 2;
    float32x4_t v131 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v188, (uint64_t)(v77 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)&block);
    long long v132 = *((_OWORD *)v77 + 2);
    *(_OWORD *)std::string __p = *((_OWORD *)v77 + 1);
    long long v199 = v132;
    uint64_t v133 = v131[7];
    unint64_t v200 = (uint64_t (*)())v131[6];
    *(void *)uint8x8_t v201 = v133;
    if (v133) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v133 + 8), 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>((uint64_t)&v185, (uint64_t)__p, (uint64_t)__p);
    if (*(void *)v201) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v201);
    }
    while (1)
    {
      int8x8_t v77 = (uint64_t *)*v77;
      if (!v77) {
        break;
      }
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(v77 + 2)))
      {
        goto LABEL_258;
      }
    }
  }
  else
  {
LABEL_189:
    long long v185 = 0u;
    long long v186 = 0u;
    int v187 = 1065353216;
  }
  unint64_t v78 = (uint64_t *)v188[112];
  if (v78)
  {
    while (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(v78 + 2)))
    {
      unint64_t v78 = (uint64_t *)*v78;
      if (!v78) {
        goto LABEL_193;
      }
    }
    long long v195 = 0u;
    long long v196 = 0u;
    int v197 = 1065353216;
LABEL_266:
    *(void *)&blocunint64_t k = v78 + 2;
    long long v134 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)v188, (uint64_t)(v78 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)&block);
    long long v135 = *((_OWORD *)v78 + 2);
    *(_OWORD *)std::string __p = *((_OWORD *)v78 + 1);
    long long v199 = v135;
    uint64_t v136 = v134[7];
    unint64_t v200 = (uint64_t (*)())v134[6];
    *(void *)uint8x8_t v201 = v136;
    if (v136) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>((uint64_t)&v195, (uint64_t)__p, (uint64_t)__p);
    if (*(void *)v201) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v201);
    }
    while (1)
    {
      unint64_t v78 = (uint64_t *)*v78;
      if (!v78) {
        break;
      }
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188, (uint64_t)(v78 + 2)))
      {
        goto LABEL_266;
      }
    }
  }
  else
  {
LABEL_193:
    long long v195 = 0u;
    long long v196 = 0u;
    int v197 = 1065353216;
  }
  uint8x8_t v79 = v188;
  uint64_t v80 = (uint64_t *)v188[137];
  memset(v193, 0, sizeof(v193));
  int v194 = 1065353216;
  if (v80)
  {
    do
    {
      float32x4_t v81 = v188;
      float32x4_t v82 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 10, (uint64_t)(v80 + 2));
      Entity = v82 + 6;
      unint64_t v83 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v81 + 15, (uint64_t)(v80 + 2));
      unint64_t v84 = (uint64_t (*)())(v83 + 6);
      if (!v83) {
        unint64_t v84 = 0;
      }
      long long v85 = *((_OWORD *)v80 + 2);
      if (v82) {
        unint64_t v84 = (uint64_t (*)())(v82 + 6);
      }
      *(_OWORD *)std::string __p = *((_OWORD *)v80 + 1);
      long long v199 = v85;
      unint64_t v200 = v84;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>((float *)v193, (uint64_t)__p, (uint64_t)__p);
      uint64_t v80 = (uint64_t *)*v80;
    }
    while (v80);
    uint8x8_t v79 = v188;
  }
  *(void *)&long long v199 = v79 + 140;
  *((void *)&v199 + 1) = v79 + 135;
  unint64_t v200 = (uint64_t (*)())&v188;
  v201[0] = 1;
  uint64_t v86 = v79[142];
  if (v86)
  {
    unint64_t v87 = 0;
  }
  else
  {
    uint64_t v86 = v79[137];
    unint64_t v87 = 1;
  }
  *(_OWORD *)buf = 0u;
  long long v191 = 0u;
  int v192 = 1065353216;
  *(void *)&long long v182 = &__p[1];
  *((void *)&v182 + 1) = v86;
  *(void *)&long long v183 = v87;
  *((void *)&v183 + 1) = &v200;
  while (2)
  {
    if (v87 == -1)
    {
LABEL_208:
      int8x8_t v88 = (uint64_t **)*((void *)&v183 + 1);
LABEL_211:
      uint64_t v89 = **v88;
      unint64_t v90 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(v89 + 80), (uint64_t)(Entity + 2));
      unint64_t v91 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(v89 + 120), (uint64_t)(Entity + 2));
      float32x4_t v92 = (void **)(v91 + 6);
      if (!v91) {
        float32x4_t v92 = 0;
      }
      long long v93 = *((_OWORD *)Entity + 2);
      if (v90) {
        float32x4_t v92 = (void **)(v90 + 6);
      }
      blocunint64_t k = *((_OWORD *)Entity + 1);
      long long v230 = v93;
      unint64_t v231 = v92;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>((float *)buf, (uint64_t)&block, (uint64_t)&block);
      *((void *)&block + 1) = -1;
      ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(v183, (void **)&v182 + 1, &v182, (uint64_t)&block);
      unint64_t v87 = v183;
      continue;
    }
    break;
  }
  if (v87 != 1)
  {
    int8x8_t v88 = (uint64_t **)*((void *)&v183 + 1);
    if (v87 < 2) {
      Entity = (uint64_t *)*((void *)&v182 + 1);
    }
    goto LABEL_211;
  }
  Entity = (uint64_t *)*((void *)&v182 + 1);
  if (*((void *)&v182 + 1)) {
    goto LABEL_208;
  }
  uint64_t v94 = v188;
  unint64_t v95 = (uint64_t *)v188[172];
  long long v182 = 0u;
  long long v183 = 0u;
  int v184 = 1065353216;
  if (v95)
  {
    do
    {
      __p[0] = v95 + 2;
      unint64_t v96 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v188 + 41), (uint64_t)(v95 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v97 = *((_OWORD *)v95 + 2);
      *(_OWORD *)std::string __p = *((_OWORD *)v95 + 1);
      long long v199 = v97;
      unint64_t v200 = (uint64_t (*)())(v96 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)&v182, (uint64_t)__p, (uint64_t)__p);
      unint64_t v95 = (uint64_t *)*v95;
    }
    while (v95);
    uint64_t v94 = v188;
  }
  *(void *)&long long v199 = v94 + 175;
  *((void *)&v199 + 1) = v94 + 170;
  unint64_t v200 = (uint64_t (*)())&v188;
  v201[0] = 1;
  uint64_t v98 = v94[177];
  if (v98)
  {
    unint64_t v99 = 0;
  }
  else
  {
    uint64_t v98 = v94[172];
    unint64_t v99 = 1;
  }
  memset(v180, 0, sizeof(v180));
  int v181 = 1065353216;
  *(void *)&long long v177 = &__p[1];
  *((void *)&v177 + 1) = v98;
  *(void *)&long long v178 = v99;
  *((void *)&v178 + 1) = &v200;
  while (2)
  {
    if (v99 == -1)
    {
LABEL_226:
      float32x4_t v100 = (void **)*((void *)&v178 + 1);
LABEL_229:
      uint64_t v101 = **v100 + 328;
      *(void *)&v175[0] = Entity + 2;
      uint64_t v102 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v101, (uint64_t)(Entity + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)v175);
      long long v103 = *((_OWORD *)Entity + 2);
      blocunint64_t k = *((_OWORD *)Entity + 1);
      long long v230 = v103;
      unint64_t v231 = (void **)(v102 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)v180, (uint64_t)&block, (uint64_t)&block);
      *((void *)&block + 1) = -1;
      ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(v178, (void **)&v177 + 1, &v177, (uint64_t)&block);
      unint64_t v99 = v178;
      continue;
    }
    break;
  }
  if (v99 != 1)
  {
    float32x4_t v100 = (void **)*((void *)&v178 + 1);
    if (v99 < 2) {
      Entity = (uint64_t *)*((void *)&v177 + 1);
    }
    goto LABEL_229;
  }
  Entity = (uint64_t *)*((void *)&v177 + 1);
  if (*((void *)&v177 + 1)) {
    goto LABEL_226;
  }
  unint64_t v104 = v188;
  unint64_t v105 = (uint64_t *)v188[182];
  long long v106 = 0uLL;
  blocunint64_t k = 0u;
  long long v230 = 0u;
  LODWORD(v231) = 1065353216;
  if (v105)
  {
    do
    {
      __p[0] = v105 + 2;
      uint64_t v107 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::SceneObject>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v188 + 41), (uint64_t)(v105 + 2), (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v108 = *((_OWORD *)v105 + 2);
      *(_OWORD *)std::string __p = *((_OWORD *)v105 + 1);
      long long v199 = v108;
      unint64_t v200 = (uint64_t (*)())(v107 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>((float *)&block, (uint64_t)__p, (uint64_t)__p);
      unint64_t v105 = (uint64_t *)*v105;
    }
    while (v105);
    unint64_t v104 = v188;
    long long v106 = 0uLL;
  }
  uint64_t v109 = v104[157];
  long long v177 = v106;
  long long v178 = v106;
  int v179 = 1065353216;
  if (v109)
  {
    do
    {
      __p[0] = (void *)(v109 + 16);
      int8x8_t v110 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v188 + 36), v109 + 16, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v111 = *(_OWORD *)(v109 + 32);
      *(_OWORD *)std::string __p = *(_OWORD *)(v109 + 16);
      long long v199 = v111;
      unint64_t v200 = (uint64_t (*)())(v110 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>((float *)&v177, (uint64_t)__p, (uint64_t)__p);
      uint64_t v109 = *(void *)v109;
    }
    while (v109);
    unint64_t v104 = v188;
  }
  uint64_t v112 = v104[162];
  long long v113 = 0uLL;
  memset(v175, 0, sizeof(v175));
  int v176 = 1065353216;
  if (v112)
  {
    do
    {
      __p[0] = (void *)(v112 + 16);
      uint64_t v114 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)(v188 + 36), v112 + 16, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v115 = *(_OWORD *)(v112 + 32);
      *(_OWORD *)std::string __p = *(_OWORD *)(v112 + 16);
      long long v199 = v115;
      unint64_t v200 = (uint64_t (*)())(v114 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>((float *)v175, (uint64_t)__p, (uint64_t)__p);
      uint64_t v112 = *(void *)v112;
    }
    while (v112);
    unint64_t v104 = v188;
    long long v113 = 0uLL;
  }
  uint64_t v116 = v104[187];
  v173[0] = v113;
  v173[1] = v113;
  int v174 = 1065353216;
  if (v116)
  {
    do
    {
      unint64_t v117 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 26, v116 + 16);
      if (!v117) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      long long v118 = *(_OWORD *)(v116 + 32);
      *(_OWORD *)std::string __p = *(_OWORD *)(v116 + 16);
      long long v199 = v118;
      unint64_t v200 = (uint64_t (*)())(v117 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>((float *)v173, (uint64_t)__p, (uint64_t)__p);
      uint64_t v116 = *(void *)v116;
    }
    while (v116);
    unint64_t v104 = v188;
  }
  uint64_t v119 = v104[192];
  memset(v171, 0, sizeof(v171));
  int v172 = 1065353216;
  if (v119)
  {
    do
    {
      unint64_t v120 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v188 + 26, v119 + 16);
      if (!v120) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      long long v121 = *(_OWORD *)(v119 + 32);
      *(_OWORD *)std::string __p = *(_OWORD *)(v119 + 16);
      long long v199 = v121;
      unint64_t v200 = (uint64_t (*)())(v120 + 6);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>((float *)v171, (uint64_t)__p, (uint64_t)__p);
      uint64_t v119 = *(void *)v119;
    }
    while (v119);
    unint64_t v104 = v188;
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v104 + 217), v104 + 90);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 222), v188 + 95);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 227), v188 + 100);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 232), v188 + 120);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 237), v188 + 125);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 242), v188 + 130);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 247), (uint64_t *)&v185);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v188 + 252), (uint64_t *)&v195);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign((uint64_t)(v188 + 257), v188 + 115);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 277), (uint64_t *)v193);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 282), (uint64_t *)buf);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign((uint64_t)(v188 + 287), v188 + 150);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 292), (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 297), (uint64_t *)v180);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 302), (uint64_t *)&block);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 307), (uint64_t *)&v177);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 312), (uint64_t *)v175);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v188 + 317), v188 + 165);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v188 + 322), v188 + 200);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v188 + 327), v188 + 205);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign((uint64_t)(v188 + 332), v188 + 210);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 337), (uint64_t *)v173);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign((uint64_t)(v188 + 342), (uint64_t *)v171);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign((uint64_t)(v188 + 347), v188 + 195);
  long long v122 = v188;
  char v123 = v188 + 90;
  *((_WORD *)v188 + 1408) = *((_WORD *)v188 + 860);
  *(_OWORD *)std::string __p = 0u;
  long long v199 = 0u;
  memset(v201, 0, 32);
  LODWORD(v200) = 1065353216;
  *(_DWORD *)&v201[32] = 1065353216;
  memset(v202, 0, 32);
  memset(&v202[5], 0, 32);
  LODWORD(v202[4]) = 1065353216;
  LODWORD(v202[9]) = 1065353216;
  memset(&v202[10], 0, 32);
  memset(v203, 0, 32);
  LODWORD(v202[14]) = 1065353216;
  *(_DWORD *)&v203[32] = 1065353216;
  memset(v204, 0, 32);
  *(_DWORD *)&v204[32] = 1065353216;
  memset(v205, 0, 32);
  *(_DWORD *)&v205[32] = 1065353216;
  memset(v206, 0, 32);
  *(_DWORD *)&v206[32] = 1065353216;
  memset(v207, 0, 32);
  *(_DWORD *)&v207[32] = 1065353216;
  memset(v208, 0, 32);
  *(_DWORD *)&v208[32] = 1065353216;
  memset(v209, 0, 32);
  *(_DWORD *)&v209[32] = 1065353216;
  memset(v210, 0, 32);
  *(_DWORD *)&v210[32] = 1065353216;
  memset(v211, 0, 32);
  *(_DWORD *)&v211[32] = 1065353216;
  memset(v212, 0, 32);
  *(_DWORD *)&v212[32] = 1065353216;
  memset(v213, 0, 32);
  *(_DWORD *)&v213[32] = 1065353216;
  memset(v214, 0, 32);
  *(_DWORD *)&v214[32] = 1065353216;
  memset(v215, 0, 32);
  *(_DWORD *)&v215[32] = 1065353216;
  memset(v216, 0, 32);
  *(_DWORD *)&v216[32] = 1065353216;
  memset(v217, 0, 32);
  *(_DWORD *)&v217[32] = 1065353216;
  memset(v218, 0, 32);
  *(_DWORD *)&v218[32] = 1065353216;
  memset(v219, 0, 32);
  *(_DWORD *)&v219[32] = 1065353216;
  memset(v220, 0, 32);
  *(_DWORD *)&v220[32] = 1065353216;
  memset(v221, 0, 32);
  *(_DWORD *)&v221[32] = 1065353216;
  memset(v222, 0, 32);
  *(_DWORD *)&v222[32] = 1065353216;
  LOWORD(v223) = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)v123, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v122 + 95), (uint64_t *)v201);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v122 + 100), v202);
  if (v122[108])
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node((void *)v122[107]);
    v122[107] = 0;
    uint64_t v124 = v122[106];
    if (v124)
    {
      for (uint64_t m = 0; m != v124; ++m)
        *(void *)(v122[105] + 8 * m) = 0;
    }
    v122[108] = 0;
  }
  uint64_t v126 = v202[5];
  v202[5] = 0;
  uint64_t v127 = (void *)v122[105];
  v122[105] = v126;
  if (v127) {
    operator delete(v127);
  }
  long long v128 = *(_OWORD *)&v202[6];
  v122[106] = v202[6];
  v202[6] = 0;
  uint64_t v129 = v202[8];
  v122[108] = v202[8];
  *((_DWORD *)v122 + 218) = v202[9];
  v122[107] = *((void *)&v128 + 1);
  if (v129)
  {
    unint64_t v130 = *(void *)(*((void *)&v128 + 1) + 8);
    if (((unint64_t)v128 & ((void)v128 - 1)) != 0)
    {
      if (*((void *)&v128 + 1) >= (unint64_t)v128) {
        unint64_t v130 = *((void *)&v128 + 1) % (unint64_t)v128;
      }
    }
    else
    {
      unint64_t v130 = *((void *)&v128 + 1) & (v128 - 1);
    }
    *(void *)(v122[105] + 8 * v130) = v122 + 107;
    v202[7] = 0;
    v202[8] = 0;
  }
  if (v122[113])
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node((void *)v122[112]);
    v122[112] = 0;
    uint64_t v137 = v122[111];
    if (v137)
    {
      for (uint64_t n = 0; n != v137; ++n)
        *(void *)(v122[110] + 8 * n) = 0;
    }
    v122[113] = 0;
  }
  uint64_t v139 = v202[10];
  v202[10] = 0;
  float v140 = (void *)v122[110];
  v122[110] = v139;
  if (v140) {
    operator delete(v140);
  }
  unint64_t v141 = v202[11];
  uint64_t v142 = v202[12];
  v122[111] = v202[11];
  v202[11] = 0;
  uint64_t v143 = v202[13];
  v122[113] = v202[13];
  *((_DWORD *)v122 + 228) = v202[14];
  v122[112] = v142;
  if (v143)
  {
    unint64_t v144 = *(void *)(v142 + 8);
    if ((v141 & (v141 - 1)) != 0)
    {
      if (v144 >= v141) {
        v144 %= v141;
      }
    }
    else
    {
      v144 &= v141 - 1;
    }
    *(void *)(v122[110] + 8 * v144) = v122 + 112;
    *(_OWORD *)&v202[12] = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign((uint64_t)(v122 + 115), (uint64_t *)v203);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v122 + 120), (uint64_t *)v204);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v122 + 125), (uint64_t *)v205);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign((uint64_t)(v122 + 130), (uint64_t *)v206);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 135), (uint64_t *)v207);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 140), (uint64_t *)v208);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 145), (uint64_t *)v209);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign((uint64_t)(v122 + 150), (uint64_t *)v210);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 155), (uint64_t *)v211);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 160), (uint64_t *)v212);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 165), (uint64_t *)v213);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 170), (uint64_t *)v214);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 175), (uint64_t *)v215);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 180), (uint64_t *)v216);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 185), (uint64_t *)v217);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign((uint64_t)(v122 + 190), (uint64_t *)v218);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign((uint64_t)(v122 + 195), (uint64_t *)v219);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v122 + 200), (uint64_t *)v220);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v122 + 205), (uint64_t *)v221);
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign((uint64_t)(v122 + 210), (uint64_t *)v222);
  *((_WORD *)v122 + 860) = v223;
  rf::ARStateData::SinceLastData::~SinceLastData((rf::ARStateData::SinceLastData *)__p);
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v171);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v173);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v175);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v177);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&block);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v180);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v182);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v193);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v195);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&v185);
  std::mutex::unlock(v189);
  if ((kdebug_is_enabled() & 1) != 0 || (kdebug_is_enabled() & 1) != 0 || kdebug_is_enabled())
  {
    std::mutex::lock(v170);
    float32x4_t v145 = *(uint64_t **)&v170[2].__m_.__opaque[24];
    if (v145)
    {
      int v146 = 0;
      int v147 = 0;
      int v148 = 0;
      int v149 = 0;
      int v150 = 0;
      int v151 = 0;
      int v152 = 0;
      do
      {
        switch(*((_DWORD *)v145 + 76))
        {
          case 0:
            ++v150;
            break;
          case 1:
            int v153 = *((_DWORD *)v145 + 64);
            BOOL v154 = v153 == 0;
            if (v153) {
              int v155 = v147;
            }
            else {
              int v155 = v146;
            }
            if (v154) {
              int v146 = v155 + 1;
            }
            else {
              int v147 = v155 + 1;
            }
            break;
          case 2:
            ++v148;
            break;
          case 3:
            ++v149;
            break;
          case 4:
            ++v151;
            break;
          case 5:
            ++v152;
            break;
          default:
            break;
        }
        float32x4_t v145 = (uint64_t *)*v145;
      }
      while (v145);
    }
    else
    {
      int v146 = 0;
      int v147 = 0;
      int v148 = 0;
      int v149 = 0;
      int v150 = 0;
      int v151 = 0;
      int v152 = 0;
    }
    for (iuint64_t i = *(uint64_t **)v170[3].__m_.__opaque; ii; iuint64_t i = (uint64_t *)*ii)
    {
      switch(*((_DWORD *)ii + 76))
      {
        case 0:
          ++v150;
          break;
        case 1:
          int v157 = *((_DWORD *)ii + 64);
          BOOL v158 = v157 == 0;
          if (v157) {
            int v159 = v147;
          }
          else {
            int v159 = v146;
          }
          if (v158) {
            int v146 = v159 + 1;
          }
          else {
            int v147 = v159 + 1;
          }
          break;
        case 2:
          ++v148;
          break;
        case 3:
          ++v149;
          break;
        case 4:
          ++v151;
          break;
        case 5:
          ++v152;
          break;
        default:
          continue;
      }
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    std::mutex::unlock(v170);
  }
}

void sub_235AA5100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)&a69);
  std::mutex::unlock((std::mutex *)STACK[0x218]);
  _Unwind_Resume(a1);
}

uint64_t rf::ARState::ARState(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v4 = a1 + 144;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(unsigned char *)(a1 + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(unsigned char *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 476) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 484) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 492) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 1065353216;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_DWORD *)(a1 + 896) = 1065353216;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_DWORD *)(a1 + 936) = 1065353216;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 1065353216;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 1065353216;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1056) = 1065353216;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_DWORD *)(a1 + 1096) = 1065353216;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1136) = 1065353216;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1176) = 1065353216;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1216) = 1065353216;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 1065353216;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1296) = 1065353216;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1336) = 1065353216;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_DWORD *)(a1 + 1376) = 1065353216;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_DWORD *)(a1 + 1416) = 1065353216;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_DWORD *)(a1 + 1456) = 1065353216;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 1065353216;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1536) = 1065353216;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_DWORD *)(a1 + 1576) = 1065353216;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1656) = 1065353216;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_DWORD *)(a1 + 1736) = 1065353216;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_DWORD *)(a1 + 1776) = 1065353216;
  *(_WORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_DWORD *)(a1 + 1832) = 1065353216;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_DWORD *)(a1 + 1872) = 1065353216;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_DWORD *)(a1 + 19std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1952) = 1065353216;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_DWORD *)(a1 + 1992) = 1065353216;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_DWORD *)(a1 + 2032) = 1065353216;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_DWORD *)(a1 + 2072) = 1065353216;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_DWORD *)(a1 + 21std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_DWORD *)(a1 + 2152) = 1065353216;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_DWORD *)(a1 + 2192) = 1065353216;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_DWORD *)(a1 + 2232) = 1065353216;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_DWORD *)(a1 + 2272) = 1065353216;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_DWORD *)(a1 + 23std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_DWORD *)(a1 + 2352) = 1065353216;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_DWORD *)(a1 + 2392) = 1065353216;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_DWORD *)(a1 + 2432) = 1065353216;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_DWORD *)(a1 + 2472) = 1065353216;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_DWORD *)(a1 + 25std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_DWORD *)(a1 + 2552) = 1065353216;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_DWORD *)(a1 + 2592) = 1065353216;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_DWORD *)(a1 + 2632) = 1065353216;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_DWORD *)(a1 + 2672) = 1065353216;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_DWORD *)(a1 + 27std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_DWORD *)(a1 + 2752) = 1065353216;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_DWORD *)(a1 + 2792) = 1065353216;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_DWORD *)(a1 + 2832) = 1065353216;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_DWORD *)(a1 + 2872) = 1065353216;
  *(_WORD *)(a1 + 2880) = 0;
  *(_DWORD *)(a1 + 2888) = 0;
  *(void *)(a1 + 2896) = 0;
  *(unsigned char *)(a1 + 2904) = 1;
  uint8x8_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(v5, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 29std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = dispatch_queue_create("SceneUnderstandingARManager", v6);

  *(void *)(a1 + 2920) = dispatch_group_create();
  char v7 = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 2928) = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 2932) = v7;
  *(void *)(a1 + 2960) = 0;
  *(void *)(a1 + 2992) = 0;
  *(void *)(a1 + 3024) = 0;
  *(void *)(a1 + 3056) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v41, (const UInt8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v43, "com.apple.re.HideMeshRemoveCrash");
  unsigned __int16 v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v41, (const UInt8 *)&v43);
  if ((_BYTE)v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8 >= 0x100u;
  }
  char v10 = !v9;
  *(unsigned char *)(a1 + 2904) = v10;
  if (SBYTE7(v44) < 0) {
    operator delete((void *)v43);
  }
  rf::UserDefaults::~UserDefaults((const void **)&v41);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  int v12 = rf::helpers::kCameraIdentifier(v11);
  long long v43 = *v12;
  long long v44 = v12[1];
  long long v13 = rf::helpers::kBodyIdentifier((rf::helpers *)v12);
  long long v41 = *v13;
  long long v42 = v13[1];
  uint64_t v14 = rf::helpers::kHeadIdentifier((rf::helpers *)v13);
  long long v15 = v14[1];
  long long v39 = *v14;
  long long v40 = v15;
  std::mutex::lock((std::mutex *)a1);
  int v17 = rf::helpers::kCameraIdentifier(v16);
  long long v18 = v17[1];
  *(_OWORD *)std::string __p = *v17;
  long long v27 = v18;
  long long v28 = v43;
  long long v29 = v44;
  long long v30 = xmmword_235AF75E0;
  long long v31 = xmmword_235AF75F0;
  long long v32 = xmmword_235AF7600;
  long long v33 = xmmword_235AF7AA0;
  int v34 = 16842752;
  int v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  std::mutex::lock((std::mutex *)a1);
  int v20 = rf::helpers::kBodyIdentifier(v19);
  long long v21 = v20[1];
  *(_OWORD *)std::string __p = *v20;
  long long v27 = v21;
  long long v28 = v41;
  long long v29 = v42;
  long long v30 = xmmword_235AF75E0;
  long long v31 = xmmword_235AF75F0;
  long long v32 = xmmword_235AF7600;
  long long v33 = xmmword_235AF7AA0;
  int v34 = 16842752;
  int v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  std::mutex::lock((std::mutex *)a1);
  long long v23 = rf::helpers::kHeadIdentifier(v22);
  long long v24 = v23[1];
  *(_OWORD *)std::string __p = *v23;
  long long v27 = v24;
  long long v28 = v39;
  long long v29 = v40;
  long long v30 = xmmword_235AF75E0;
  long long v31 = xmmword_235AF75F0;
  long long v32 = xmmword_235AF7600;
  long long v33 = xmmword_235AF7AA0;
  int v34 = 16842752;
  int v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, (uint64_t)__p, __p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  std::mutex::unlock((std::mutex *)a1);
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  rf::ARState::consumeChangesSinceLast(a1, (uint64_t)__p);
  return a1;
}

void sub_235AA59BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v24 + 3032));
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)(v24 + 3000));
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)(v24 + 2968));
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)(v24 + 2936));

  rf::ARStateData::~ARStateData((rf::ARStateData *)(v24 + 64));
  std::mutex::~mutex((std::mutex *)v24);
  _Unwind_Resume(a1);
}

void rf::ARState::~ARState(rf::ARState *this)
{
  unint64_t v2 = *((void *)this + 365);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v3 = (void *)*((void *)this + 365);
    *((void *)this + 365) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 364);
  *((void *)this + 364) = 0;

  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear((uint64_t)this + 64);
  if (*((void *)this + 370))
  {
    uint8x8_t v5 = this;
    rf::ARState::~ARState()::$_0::operator()((rf *)&v5, (uint64_t)this + 144);
    rf::ARState::~ARState()::$_0::operator()((rf *)&v5, (uint64_t)this + 184);
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear((uint64_t)this + 144);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 379);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)this + 375);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)this + 371);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((void *)this + 367);

  rf::ARStateData::~ARStateData((rf::ARState *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

rf *rf::ARState::~ARState()::$_0::operator()(rf *result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)result;
    do
    {
      if (!*((_DWORD *)v2 + 76) && *((_DWORD *)v2 + 37) == 1)
      {
        uint64_t v4 = rf::realityFusionLogObject(result);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)(v2 + 6), __p);
          uint8x8_t v5 = v8 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          char v10 = v5;
          _os_log_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEFAULT, "ARState: Cleaning up anchor %s", buf, 0xCu);
          if (v8 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v6 = *(void *)(v3 + 2960);
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float32_t result = (rf *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, v2 + 6);
      }
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_235AA5CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::anonymous namespace'::tryGetCurrentMesh(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  char v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*a4, a3);
  if (v8
    || (char v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*a4 + 5, a3)) != 0)
  {
    uint64_t v10 = v8[6];
    BOOL v9 = (std::__shared_weak_count *)v8[7];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10 && *(void *)(v10 + 32) == a2)
    {
      *a1 = v10;
      a1[1] = v9;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void ___ZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManager_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v2 = *(std::mutex **)(v1 + 48);
  uint64_t v3 = v9;
  if (v9)
  {
    if (*(unsigned char *)(v9 + 360))
    {
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(void *)(v1 + 88))
        {
          if (*(unsigned char *)(v1 + 80)) {
            uint8x8_t v5 = *(void **)(v1 + 64);
          }
          else {
            uint8x8_t v5 = (void *)(v1 + 64);
          }
          *(void *)(v1 + 88) = ((*v5 >> 2) + (*v5 << 6) + v5[1] + 2654435769) ^ *v5;
        }
        kdebug_trace();
      }
      if (!*(unsigned char *)(v3 + 360)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v11 = MEMORY[0x263EF8330];
      uint64_t v12 = 3321888768;
      long long v13 = ___ZZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManagerENK3__0clEv_block_invoke;
      uint64_t v14 = &__block_descriptor_96_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE_e33_v24__0__REAsset__8____CFError__16l;
      long long v15 = v2;
      long long v4 = *(_OWORD *)(v1 + 80);
      long long v16 = *(_OWORD *)(v1 + 64);
      long long v17 = v4;
      uint64_t v18 = v3;
      uint64_t v19 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *(void *)(v1 + 56);
      REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError();
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
  }
  else
  {
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(void *)(v1 + 88))
      {
        if (*(unsigned char *)(v1 + 80)) {
          uint64_t v6 = *(void **)(v1 + 64);
        }
        else {
          uint64_t v6 = (void *)(v1 + 64);
        }
        *(void *)(v1 + 88) = ((*v6 >> 2) + (*v6 << 6) + v6[1] + 2654435769) ^ *v6;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(void *)(v1 + 88))
      {
        if (*(unsigned char *)(v1 + 80)) {
          char v7 = *(void **)(v1 + 64);
        }
        else {
          char v7 = (void *)(v1 + 64);
        }
        *(void *)(v1 + 88) = ((*v7 >> 2) + (*v7 << 6) + v7[1] + 2654435769) ^ *v7;
      }
      kdebug_trace();
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(void *)(v1 + 88))
      {
        if (*(unsigned char *)(v1 + 80)) {
          char v8 = *(void **)(v1 + 64);
        }
        else {
          char v8 = (void *)(v1 + 64);
        }
        *(void *)(v1 + 88) = ((*v8 >> 2) + (*v8 << 6) + v8[1] + 2654435769) ^ *v8;
      }
      kdebug_trace();
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_235AA60B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void ___ZN2rf7ARState18updatePhysicsShapeERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = v49;
  if (v49)
  {
    if (!*(unsigned char *)(v49 + 152)) {
      goto LABEL_24;
    }
    long long v4 = *(void **)(v49 + 128);
    if (!v4) {
      goto LABEL_24;
    }
    if (![v4 length]) {
      goto LABEL_24;
    }
    if (!*(unsigned char *)(v3 + 216)) {
      goto LABEL_24;
    }
    uint8x8_t v5 = *(void **)(v3 + 192);
    if (!v5 || ![v5 length]) {
      goto LABEL_24;
    }
    if (re::internal::enableSignposts(0, 0))
    {
      if (!*(void *)(v1 + 88))
      {
        if (*(unsigned char *)(v1 + 80)) {
          unint64_t v46 = *(void **)(v1 + 64);
        }
        else {
          unint64_t v46 = (void *)(v1 + 64);
        }
        *(void *)(v1 + 88) = ((*v46 >> 2) + (*v46 << 6) + v46[1] + 2654435769) ^ *v46;
      }
      kdebug_trace();
    }
    uint64_t v6 = [*(id *)(v3 + 128) contents];
    [*(id *)(v3 + 192) contents];
    uint64_t v7 = RECollisionMeshCreateWithFormat();
    std::mutex::lock((std::mutex *)v2);
    long long v8 = *(_OWORD *)(v1 + 80);
    long long v51 = *(_OWORD *)(v1 + 64);
    long long v52 = v8;
    uint64_t v53 = v7;
    unint64_t v9 = *((void *)&v8 + 1);
    if (!*((void *)&v8 + 1))
    {
      uint64_t v45 = &v51;
      if ((_BYTE)v52) {
        uint64_t v45 = (long long *)v51;
      }
      unint64_t v9 = ((*(void *)v45 >> 2) + (*(void *)v45 << 6) + *((void *)v45 + 1) + 2654435769) ^ *(void *)v45;
      *((void *)&v52 + 1) = v9;
    }
    unint64_t v10 = *(void *)(v2 + 952);
    if (v10)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      unint64_t v12 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        uint64_t v6 = v9;
        if (v9 >= v10) {
          uint64_t v6 = v9 % v10;
        }
      }
      else
      {
        uint64_t v6 = (v10 - 1) & v9;
      }
      long long v13 = *(void **)(*(void *)(v2 + 944) + 8 * v6);
      if (v13)
      {
        uint64_t v14 = (void *)*v13;
        if (*v13)
        {
          do
          {
            unint64_t v15 = v14[1];
            if (v15 == v9)
            {
              if (rf::data_flow::RFUUID::Equality::operator()(v2 + 976, (uint64_t)(v14 + 2), (uint64_t)&v51)) {
                goto LABEL_97;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v6) {
                break;
              }
            }
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
      }
    }
    long long v16 = operator new(0x38uLL);
    long long v17 = (void *)(v2 + 960);
    *long long v16 = 0;
    v16[1] = v9;
    long long v18 = v52;
    *((_OWORD *)v16 + 1) = v51;
    *((_OWORD *)v16 + 2) = v18;
    v16[6] = v53;
    uint64_t v53 = 0;
    float v19 = (float)(unint64_t)(*(void *)(v2 + 968) + 1);
    float v20 = *(float *)(v2 + 976);
    if (v10 && (float)(v20 * (float)v10) >= v19)
    {
LABEL_87:
      uint64_t v37 = *(void *)(v2 + 944);
      int v38 = *(void **)(v37 + 8 * v6);
      if (v38)
      {
        *long long v16 = *v38;
      }
      else
      {
        *long long v16 = *v17;
        *long long v17 = v16;
        *(void *)(v37 + 8 * v6) = v17;
        if (!*v16)
        {
LABEL_96:
          ++*(void *)(v2 + 968);
LABEL_97:
          uint64_t v40 = v53;
          uint64_t v53 = 0;
          if (v40) {
            RECollisionMeshDestroy();
          }
          std::mutex::unlock((std::mutex *)v2);
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*(void *)(v1 + 88))
            {
              if (*(unsigned char *)(v1 + 80)) {
                int v47 = *(void **)(v1 + 64);
              }
              else {
                int v47 = (void *)(v1 + 64);
              }
              *(void *)(v1 + 88) = ((*v47 >> 2) + (*v47 << 6) + v47[1] + 2654435769) ^ *v47;
            }
            kdebug_trace();
          }
          if (re::internal::enableSignposts(0, 0))
          {
            if (!*(void *)(v1 + 88))
            {
              if (*(unsigned char *)(v1 + 80)) {
                uint64_t v48 = *(void **)(v1 + 64);
              }
              else {
                uint64_t v48 = (void *)(v1 + 64);
              }
              *(void *)(v1 + 88) = ((*v48 >> 2) + (*v48 << 6) + v48[1] + 2654435769) ^ *v48;
            }
LABEL_23:
            kdebug_trace();
            goto LABEL_24;
          }
          goto LABEL_24;
        }
        unint64_t v39 = *(void *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v39 >= v10) {
            v39 %= v10;
          }
        }
        else
        {
          v39 &= v10 - 1;
        }
        int v38 = (void *)(*(void *)(v2 + 944) + 8 * v39);
      }
      *int v38 = v16;
      goto LABEL_96;
    }
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(v2 + 952);
    if (*(void *)&prime > v10) {
      goto LABEL_53;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 968) / *(float *)(v2 + 976));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(v2 + 952);
      }
      else
      {
        if (prime)
        {
LABEL_53:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)(v2 + 944);
          *(void *)(v2 + 944) = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(v2 + 952) = prime;
          do
            *(void *)(*(void *)(v2 + 944) + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          long long v28 = (void *)*v17;
          if (*v17)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v2 + 944) + 8 * v29) = v17;
            int v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  uint64_t v36 = *(void *)(v2 + 944);
                  if (!*(void *)(v36 + 8 * v35))
                  {
                    *(void *)(v36 + 8 * v35) = v28;
                    goto LABEL_78;
                  }
                  *long long v28 = *v34;
                  *int v34 = **(void **)(*(void *)(v2 + 944) + 8 * v35);
                  **(void **)(*(void *)(v2 + 944) + 8 * v35) = v34;
                  int v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_78:
                long long v28 = v34;
                int v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_82;
        }
        long long v41 = *(void **)(v2 + 944);
        *(void *)(v2 + 944) = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        *(void *)(v2 + 952) = 0;
      }
    }
LABEL_82:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v6 = v9 % v10;
      }
      else {
        uint64_t v6 = v9;
      }
    }
    else
    {
      uint64_t v6 = (v10 - 1) & v9;
    }
    goto LABEL_87;
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(void *)(v1 + 88))
    {
      if (*(unsigned char *)(v1 + 80)) {
        long long v42 = *(void **)(v1 + 64);
      }
      else {
        long long v42 = (void *)(v1 + 64);
      }
      *(void *)(v1 + 88) = ((*v42 >> 2) + (*v42 << 6) + v42[1] + 2654435769) ^ *v42;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(void *)(v1 + 88))
    {
      if (*(unsigned char *)(v1 + 80)) {
        long long v43 = *(void **)(v1 + 64);
      }
      else {
        long long v43 = (void *)(v1 + 64);
      }
      *(void *)(v1 + 88) = ((*v43 >> 2) + (*v43 << 6) + v43[1] + 2654435769) ^ *v43;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(void *)(v1 + 88))
    {
      if (*(unsigned char *)(v1 + 80)) {
        long long v44 = *(void **)(v1 + 64);
      }
      else {
        long long v44 = (void *)(v1 + 64);
      }
      *(void *)(v1 + 88) = ((*v44 >> 2) + (*v44 << 6) + v44[1] + 2654435769) ^ *v44;
    }
    goto LABEL_23;
  }
LABEL_24:
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
}

void sub_235AA68C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ARState::getAnchorWithIdentifier@<X0>(rf::ARState *this@<X0>, const unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v12 = 0;
  uint64_t v13 = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = a2;
  char v12 = 1;
  unint64_t v6 = (unint64_t)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)this + 18, (uint64_t)uu);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)this + 23, (uint64_t)uu);
  char v8 = v6 | result;
  if (v6 | result)
  {
    uint64_t v9 = result + 48;
    if (!result) {
      uint64_t v9 = 0;
    }
    if (v6) {
      uint64_t v10 = v6 + 48;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a3, v10);
    char v8 = 1;
  }
  else
  {
    *a3 = 0;
  }
  a3[272] = v8;
  return result;
}

void *rf::ARState::getAnchorPtrWithIdentifier(rf::ARState *this, const unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v9 = 0;
  uint64_t v10 = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = a2;
  char v9 = 1;
  long long v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)this + 18, (uint64_t)uu);
  uint8x8_t v5 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)this + 23, (uint64_t)uu);
  unint64_t v6 = v5 + 6;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v4) {
    return v4 + 6;
  }
  else {
    return v6;
  }
}

void rf::ARState::getAnchors(rf::ARState *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v44, *((void *)this + 21));
  long long v4 = (void *)*((void *)this + 20);
  uint64_t v6 = v44;
  for (uint64_t i = v45;
        i != v6;
  uint64_t v45 = v6;
  if (v4)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v47, (uint64_t)(v4 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v44, (uint64_t)&v47);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v47);
      long long v4 = (void *)*v4;
    }
    while (v4);
    uint64_t v6 = v45;
  }
  uint64_t v7 = v44;
  a2[2] = v46;
  char v8 = a2 + 2;
  *a2 = v7;
  a2[1] = v6;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = 0;
  int v47 = (void **)&v44;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v44, *((void *)this + 26));
  char v9 = (void *)*((void *)this + 25);
  uint64_t v11 = v44;
  for (uint64_t j = v45;
        j != v11;
  uint64_t v45 = v11;
  if (v9)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v47, (uint64_t)(v9 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v44, (uint64_t)&v47);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v47);
      char v9 = (void *)*v9;
    }
    while (v9);
    uint64_t v11 = v45;
  }
  uint64_t v12 = v44;
  v43[0] = v44;
  v43[1] = v11;
  v43[2] = v46;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v47 = (void **)&v44;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
  if (v11 - v12 >= 1)
  {
    uint64_t v13 = (v11 - v12) / 272;
    unint64_t v15 = (void **)*a2;
    unint64_t v14 = a2[1];
    uint64_t v16 = (uint64_t)(v14 - *a2) / 272;
    uint64_t v17 = *a2 + 272 * v16;
    if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v8 - v14) >> 4)) < v13)
    {
      unint64_t v18 = v16 + v13;
      if ((unint64_t)(v16 + v13) > 0xF0F0F0F0F0F0F0) {
        _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
      }
      if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v8 - (void)v15) >> 4) > v18) {
        unint64_t v18 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v8 - (void)v15) >> 4);
      }
      if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v8 - (void)v15) >> 4) >= 0x78787878787878) {
        unint64_t v19 = 0xF0F0F0F0F0F0F0;
      }
      else {
        unint64_t v19 = v18;
      }
      long long v51 = a2 + 2;
      if (v19) {
        float v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)(a2 + 2), v19);
      }
      else {
        float v20 = 0;
      }
      uint64_t v24 = (uint64_t)&v20[34 * v16];
      int v47 = v20;
      uint64_t v48 = v24;
      uint64_t v49 = v24;
      unint64_t v50 = &v20[34 * v19];
      uint64_t v25 = v24 + 272 * v13;
      uint64_t v26 = 272 * v13;
      do
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(v24, v12);
        v24 += 272;
        v12 += 272;
        v26 -= 272;
      }
      while (v26);
      uint64_t v27 = v48;
      uint64_t v28 = *a2;
      if (*a2 != v17)
      {
        uint64_t v29 = v17;
        do
        {
          v27 -= 272;
          v29 -= 272;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v27, v29);
        }
        while (v29 != v28);
      }
      uint64_t v30 = a2[1];
      if (v30 != v17)
      {
        do
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v25, v17);
          v17 += 272;
          v25 += 272;
        }
        while (v17 != v30);
        uint64_t v17 = a2[1];
      }
      unint64_t v31 = (void **)*a2;
      *a2 = v27;
      a2[1] = v25;
      uint8x8_t v32 = (void **)a2[2];
      a2[2] = (uint64_t)v50;
      uint64_t v49 = v17;
      unint64_t v50 = v32;
      int v47 = v31;
      uint64_t v48 = (uint64_t)v31;
      std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v47);
      goto LABEL_54;
    }
    uint64_t v42 = (uint64_t)(v14 - *a2) / 272;
    if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v14 - v17) >> 4)) >= v13)
    {
      uint64_t v21 = v12 + 272 * v13;
      uint64_t v23 = a2[1];
    }
    else
    {
      uint64_t v21 = v12 + 16 * ((uint64_t)(v14 - v17) >> 4);
      if (v21 == v11)
      {
        uint64_t v23 = a2[1];
      }
      else
      {
        uint64_t v22 = 0;
        do
        {
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor(v14 + v22, v21 + v22);
          v22 += 272;
        }
        while (v21 + v22 != v11);
        uint64_t v23 = v14 + v22;
      }
      a2[1] = v23;
      if ((uint64_t)(v14 - v17) < 1) {
        goto LABEL_54;
      }
    }
    unint64_t v33 = v23 - 272 * v13;
    uint64_t v34 = v23;
    if (v33 < v14)
    {
      uint64_t v34 = v23;
      do
      {
        uint64_t v35 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v34, v33);
        v33 += 272;
        uint64_t v34 = v35 + 272;
      }
      while (v33 < v14);
    }
    a2[1] = v34;
    uint64_t v36 = 16 * ((v23 - (v17 + 272 * v13)) >> 4);
    uint64_t v37 = v23 - 272;
    while (v36)
    {
      uint64_t v38 = (uint64_t)&v15[34 * v42 - 34] + v36;
      v36 -= 272;
      uint64_t v39 = v37 - 272;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(v37, v38);
      uint64_t v37 = v39;
    }
    for (; v12 != v21; v17 += 272)
    {
      uint64_t v40 = *(unsigned int *)(v17 + 256);
      uint64_t v41 = *(unsigned int *)(v12 + 256);
      if (v40 == -1)
      {
        if (v41 != -1)
        {
LABEL_52:
          int v47 = (void **)v17;
          ((void (*)(void ***, uint64_t, uint64_t))off_26E8F47C0[v41])(&v47, v17, v12);
        }
      }
      else
      {
        if (v41 != -1) {
          goto LABEL_52;
        }
        ((void (*)(void ***, uint64_t))off_26E8F4730[v40])(&v47, v17);
        *(_DWORD *)(v17 + 256) = -1;
      }
      v12 += 272;
    }
  }
LABEL_54:
  int v47 = (void **)v43;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&v47);
}

void sub_235AA6F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t rf::ARState::visitAnchors(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void **)(result + 160); i; uint64_t i = (void *)*i)
    uint64_t result = std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(a2, (uint64_t)(i + 6));
  for (uint64_t j = *(void **)(v3 + 200); j; uint64_t j = (void *)*j)
    uint64_t result = std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(a2, (uint64_t)(j + 6));
  return result;
}

void rf::ARState::getUpdatedAnchors(rf::ARState *this@<X0>, void *a2@<X8>)
{
  v13[35] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(&v10, *((void *)this + 151));
  long long v4 = (void *)*((void *)this + 150);
  uint64_t v6 = v10;
  for (uint64_t i = v11;
        i != v6;
  uint64_t v11 = v6;
  if (v4)
  {
    uint64_t v7 = (void *)((char *)this + 144);
    do
    {
      char v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v7, (uint64_t)(v4 + 2));
      if (!v8) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v13, (uint64_t)(v8 + 6));
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(&v10, (uint64_t)v13);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
      long long v4 = (void *)*v4;
    }
    while (v4);
    uint64_t v6 = v11;
  }
  uint64_t v9 = v12;
  *a2 = v10;
  a2[1] = v6;
  a2[2] = v9;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  v13[0] = (void **)&v10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_235AA71CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void rf::anonymous namespace'::clearARDataFromState(rf::LockedARStateData &)::$_0::operator()(uint64_t **a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)a2[2];
  while (v2)
  {
    rf::helpers::getBaseAnchorProperties((uint64_t)(v2 + 6));
    BOOL v5 = v12[17] == 1;

    if (v5)
    {
      uint64_t v6 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(**a1 + 1080), (uint64_t)(v2 + 2));
      if (v6) {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase((void *)(**a1 + 1080), v6);
      }
      uint64_t v7 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(**a1 + 1120), (uint64_t)(v2 + 2));
      if (v7) {
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::erase((void *)(**a1 + 1120), v7);
      }
      uint64_t v8 = **a1;
      long long v9 = *((_OWORD *)v2 + 2);
      v11[0] = *((_OWORD *)v2 + 1);
      v11[1] = v9;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v12, (uint64_t)(v2 + 6));
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v8 + 1200, (uint64_t)v11, v11);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
      uint64_t v10 = (uint64_t *)*v2;
      std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a2, v2, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      uint64_t v2 = v10;
    }
    else
    {
      uint64_t v2 = (uint64_t *)*v2;
    }
  }
}

void sub_235AA73B8(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void rf::data_flow::ImageAnchor::~ImageAnchor(void **this)
{
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
}

void rf::data_flow::ObjectAnchor::~ObjectAnchor(void **this)
{
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2 + 48);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[7];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      RESharedPtr<REAsset>::~RESharedPtr(v1 + 6);
    }
    operator delete(v1);
  }
}

uint64_t std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return RECollisionMeshDestroy();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v26 = *(void **)a2;
    }
    else {
      uint64_t v26 = (void *)a2;
    }
    unint64_t v7 = ((*v26 >> 2) + (*v26 << 6) + v26[1] + 2654435769) ^ *v26;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v12 = operator new(0x40uLL);
  *uint64_t v12 = 0;
  v12[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v12 + 2) = v15;
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t v12 = *v23;
LABEL_39:
    *uint64_t v23 = v12;
    goto LABEL_40;
  }
  *uint64_t v12 = *v14;
  *uint64_t v14 = v12;
  *(void *)(v22 + 8 * v3) = v14;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_235AA787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    void v1[3] = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 256);
  uint64_t v4 = *(unsigned int *)(a2 + 256);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E8F4730[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 256) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E8F4760[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<0ul,rf::data_flow::CustomAnchor>(a1, (long long *)a3);
  }
  else
  {
    long long v3 = *(_OWORD *)a3;
    long long v4 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v4;
    *(_OWORD *)a2 = v3;
    long long v5 = *(_OWORD *)(a3 + 48);
    long long v6 = *(_OWORD *)(a3 + 64);
    long long v7 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v6;
    *(_OWORD *)(a2 + 80) = v7;
    *(_OWORD *)(a2 + 48) = v5;
    uint64_t v8 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    uint8x8_t v9 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v8;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<0ul,rf::data_flow::CustomAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v12, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  *(_DWORD *)(a1 + 256) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256) == 1)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    long long v7 = *(_OWORD *)(a3 + 48);
    long long v8 = *(_OWORD *)(a3 + 64);
    long long v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    uint64_t v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;

    long long v12 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 144) = v12;
    long long v13 = *(_OWORD *)(a3 + 160);
    long long v14 = *(_OWORD *)(a3 + 176);
    long long v15 = *(_OWORD *)(a3 + 192);
    *(void *)(a2 + 208) = *(void *)(a3 + 208);
    *(_OWORD *)(a2 + 176) = v14;
    *(_OWORD *)(a2 + 192) = v15;
    *(_OWORD *)(a2 + 160) = v13;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a2 + 216, (__n128 *)(a3 + 216));
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(a1, (long long *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v16, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  long long v11 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v11;
  long long v12 = a2[10];
  long long v13 = a2[12];
  uint64_t v14 = *((void *)a2 + 26);
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  *(void *)(a1 + 208) = v14;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *(_DWORD *)(a1 + 256) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256) == 2)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    long long v7 = *(_OWORD *)(a3 + 48);
    long long v8 = *(_OWORD *)(a3 + 64);
    long long v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    long long v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;

    *(unsigned char *)(a2 + 128) = *(unsigned char *)(a3 + 128);
    long long v12 = (void **)(a2 + 136);
    if (*(char *)(a2 + 159) < 0) {
      operator delete(*v12);
    }
    long long v13 = *(_OWORD *)(a3 + 136);
    *(void *)(a2 + 152) = *(void *)(a3 + 152);
    *(_OWORD *)long long v12 = v13;
    *(unsigned char *)(a3 + 159) = 0;
    *(unsigned char *)(a3 + 136) = 0;
    uint64_t v14 = (void **)(a2 + 160);
    if (*(char *)(a2 + 183) < 0) {
      operator delete(*v14);
    }
    long long v15 = *(_OWORD *)(a3 + 160);
    *(void *)(a2 + 176) = *(void *)(a3 + 176);
    *(_OWORD *)uint64_t v14 = v15;
    *(unsigned char *)(a3 + 183) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(a1, (long long *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v14, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  long long v11 = *(long long *)((char *)a2 + 136);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *(_OWORD *)(a1 + 136) = v11;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v12 = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 160) = a2[10];
  *(void *)(a1 + 176) = v12;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 20) = 0;
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_DWORD *)(a1 + 256) = 2;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256) == 3)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    long long v7 = *(_OWORD *)(a3 + 48);
    long long v8 = *(_OWORD *)(a3 + 64);
    long long v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    long long v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;

    uint64_t v12 = (void **)(a2 + 128);
    if (*(char *)(a2 + 151) < 0) {
      operator delete(*v12);
    }
    long long v13 = *(_OWORD *)(a3 + 128);
    *(void *)(a2 + 144) = *(void *)(a3 + 144);
    *(_OWORD *)uint64_t v12 = v13;
    *(unsigned char *)(a3 + 151) = 0;
    *(unsigned char *)(a3 + 128) = 0;
    char v14 = (void **)(a2 + 152);
    if (*(char *)(a2 + 175) < 0) {
      operator delete(*v14);
    }
    long long v15 = *(_OWORD *)(a3 + 152);
    *(void *)(a2 + 168) = *(void *)(a3 + 168);
    *(_OWORD *)char v14 = v15;
    *(unsigned char *)(a3 + 175) = 0;
    *(unsigned char *)(a3 + 152) = 0;
    long long v16 = *(_OWORD *)(a3 + 176);
    long long v17 = *(_OWORD *)(a3 + 192);
    long long v18 = *(_OWORD *)(a3 + 224);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 224) = v18;
    *(_OWORD *)(a2 + 176) = v16;
    *(_OWORD *)(a2 + 192) = v17;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(a1, (long long *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v17, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  uint64_t v11 = *((void *)a2 + 18);
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = v11;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 16) = 0;
  long long v12 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v12;
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 19) = 0;
  long long v13 = a2[11];
  long long v14 = a2[12];
  long long v15 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = v14;
  *(_DWORD *)(a1 + 256) = 3;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<4ul,rf::data_flow::FaceAnchor,rf::data_flow::FaceAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256) == 4)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    long long v7 = *(_OWORD *)(a3 + 48);
    long long v8 = *(_OWORD *)(a3 + 64);
    long long v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    uint64_t v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;

    long long v12 = *(_OWORD *)(a3 + 128);
    long long v13 = *(_OWORD *)(a3 + 144);
    long long v14 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(a2 + 176) = v14;
    *(_OWORD *)(a2 + 128) = v12;
    *(_OWORD *)(a2 + 144) = v13;
    long long v15 = *(_OWORD *)(a3 + 192);
    long long v16 = *(_OWORD *)(a3 + 208);
    long long v17 = *(_OWORD *)(a3 + 240);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
    *(_OWORD *)(a2 + 240) = v17;
    *(_OWORD *)(a2 + 192) = v15;
    *(_OWORD *)(a2 + 208) = v16;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<4ul,rf::data_flow::FaceAnchor>(a1, (long long *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<4ul,rf::data_flow::FaceAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v18, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  long long v11 = a2[8];
  long long v12 = a2[9];
  long long v13 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  long long v14 = a2[12];
  long long v15 = a2[13];
  long long v16 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = v15;
  *(_DWORD *)(a1 + 256) = 4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<5ul,rf::data_flow::BodyAnchor,rf::data_flow::BodyAnchor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 256) == 5)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
    long long v7 = *(_OWORD *)(a3 + 48);
    long long v8 = *(_OWORD *)(a3 + 64);
    long long v9 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 80) = v9;
    *(_OWORD *)(a2 + 48) = v7;
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    long long v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;

    *(_DWORD *)(a2 + 128) = *(_DWORD *)(a3 + 128);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<5ul,rf::data_flow::BodyAnchor>(a1, (long long *)a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<5ul,rf::data_flow::BodyAnchor>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26E8F4730[v4])(&v12, a1);
  }
  *(_DWORD *)(a1 + 256) = -1;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v10 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
  *(_DWORD *)(a1 + 256) = 5;
  return a1;
}

void rf::data_flow::consumer::UpdateData::~UpdateData(rf::data_flow::consumer::UpdateData *this)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      RESharedPtr<REAsset>::~RESharedPtr(v1 + 6);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>::reset[abi:ne180100](v1 + 6);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void rf::ARStateData::SinceLastData::~SinceLastData(rf::ARStateData::SinceLastData *this)
{
  std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table((uint64_t)this + 960);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 920);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 880);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)this + 840);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 800);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 760);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 720);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 680);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 640);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 600);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 560);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 520);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 480);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 440);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 400);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 360);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 320);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 280);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::unique_ptr<RECollisionMesh,rf::RECollisionMeshDeleter>>>>::__deallocate_node(*((void **)this + 22));
  uint64_t v2 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v2) {
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__deallocate_node(*((void **)this + 17));
  long long v3 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::ARStateData::~ARStateData(rf::ARStateData *this)
{
  rf::data_flow::consumer::UpdateData::~UpdateData((rf::ARStateData *)((char *)this + 1728));
  rf::ARStateData::SinceLastData::~SinceLastData((rf::ARStateData *)((char *)this + 720));
  if (*((unsigned char *)this + 704)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 432);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this);
}

void rf::anonymous namespace'::tryGetCurrentMesh(void *a1, uint64_t a2, uint64_t a3, std::mutex *this)
{
  v8[0] = &this[1].__m_.__sig;
  v8[1] = &this->__m_.__sig;
  std::mutex::lock(this);
  std::mutex::unlock(this);
}

void sub_235AA87D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZZN2rf7ARState15updateMeshAssetERNS_17LockedARStateDataERKNSt3__113unordered_mapINS_9data_flow6RFUUIDENS3_10shared_ptrINS5_8consumer4MeshEEENS6_4HashENS6_8EqualityENS3_9allocatorINS3_4pairIKS6_SA_EEEEEEP14REAssetManagerENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v4);
  long long v5 = *(_OWORD *)(a1 + 56);
  v10[0] = *(_OWORD *)(a1 + 40);
  v10[1] = v5;
  v11[0] = a2;
  uint64_t v9 = 0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>((uint64_t)v4[14].__m_.__opaque, (uint64_t)v10, (uint64_t)v10);
  RESharedPtr<REAsset>::~RESharedPtr(v11);
  RESharedPtr<REAsset>::~RESharedPtr(&v9);
  uint64_t v6 = *(void *)(a1 + 72);
  if (*(unsigned char *)(v6 + 360))
  {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((void *)(v6 + 352));
    *(unsigned char *)(v6 + 360) = 0;
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 56)) {
        long long v7 = *(void **)(a1 + 40);
      }
      else {
        long long v7 = (void *)(a1 + 40);
      }
      *(void *)(a1 + 64) = ((*v7 >> 2) + (*v7 << 6) + v7[1] + 2654435769) ^ *v7;
    }
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0))
  {
    if (!*(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 56)) {
        long long v8 = *(void **)(a1 + 40);
      }
      else {
        long long v8 = (void *)(a1 + 40);
      }
      *(void *)(a1 + 64) = ((*v8 >> 2) + (*v8 << 6) + v8[1] + 2654435769) ^ *v8;
    }
    kdebug_trace();
  }
  std::mutex::unlock(v4);
}

void sub_235AA8980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN2rf9data_flow8consumer4MeshEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(void *a1)
{
  if (*a1) {
    RERelease();
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 256);
  if (v5 != -1)
  {
    if (!v5)
    {
      long long v6 = *a3;
      long long v7 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v7;
      *(_OWORD *)a2 = v6;
      long long v8 = a3[3];
      long long v9 = a3[4];
      long long v10 = a3[5];
      *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v9;
      *(_OWORD *)(a2 + 80) = v10;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v8;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      return;
    }
    ((void (*)(char *, uint64_t))off_26E8F4730[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  long long v11 = *a3;
  long long v12 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v12;
  *(_OWORD *)uint64_t v4 = v11;
  long long v13 = a3[3];
  long long v14 = a3[4];
  long long v15 = a3[5];
  *(_OWORD *)(v4 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v14;
  *(_OWORD *)(v4 + 80) = v15;
  *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(void *)(v4 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a3 + 14);
  *(_DWORD *)(v4 + 256) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 1)
  {
    long long v6 = *(_OWORD *)a3;
    long long v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    long long v8 = *(_OWORD *)(a3 + 48);
    long long v9 = *(_OWORD *)(a3 + 64);
    long long v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    long long v11 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 144) = v11;
    long long v12 = *(_OWORD *)(a3 + 160);
    long long v13 = *(_OWORD *)(a3 + 176);
    long long v14 = *(_OWORD *)(a3 + 192);
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = *(void *)(a3 + 208);
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 192) = v14;
    *(_OWORD *)(a2 + 160) = v12;
    if (a2 != a3)
    {
      long long v15 = *(char **)(a3 + 216);
      uint64_t v16 = *(void *)(a3 + 224);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)(a2 + 216), v15, v16, (v16 - (uint64_t)v15) >> 4);
    }
  }
  else
  {
    long long v17 = *(_OWORD *)(a3 + 80);
    v24[4] = *(_OWORD *)(a3 + 64);
    v25[0] = v17;
    *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)(a3 + 89);
    long long v18 = *(_OWORD *)(a3 + 16);
    v24[0] = *(_OWORD *)a3;
    v24[1] = v18;
    long long v19 = *(_OWORD *)(a3 + 48);
    void v24[2] = *(_OWORD *)(a3 + 32);
    v24[3] = v19;
    id v26 = *(id *)(a3 + 112);
    long long v20 = *(_OWORD *)(a3 + 176);
    long long v29 = *(_OWORD *)(a3 + 160);
    long long v30 = v20;
    long long v31 = *(_OWORD *)(a3 + 192);
    long long v21 = *(_OWORD *)(a3 + 144);
    long long v27 = *(_OWORD *)(a3 + 128);
    long long v28 = v21;
    uint64_t v22 = *(const void **)(a3 + 216);
    uint64_t v32 = *(void *)(a3 + 208);
    std::string __p = 0;
    uint64_t v23 = *(void *)(a3 + 224);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, v22, v23, (v23 - (uint64_t)v22) >> 4);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(v4, v24);
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
  }
}

void sub_235AA8C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 2)
  {
    long long v6 = *(_OWORD *)a3;
    long long v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    long long v8 = *(_OWORD *)(a3 + 48);
    long long v9 = *(_OWORD *)(a3 + 64);
    long long v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    *(unsigned char *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *(unsigned char *)(a3 + 128);
    std::string::operator=((std::string *)(a2 + 136), (const std::string *)(a3 + 136));
    std::string::operator=((std::string *)(a2 + 160), (const std::string *)(a3 + 160));
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
  }
  else
  {
    long long v11 = *(_OWORD *)(a3 + 80);
    v14[4] = *(_OWORD *)(a3 + 64);
    v15[0] = v11;
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(a3 + 89);
    long long v12 = *(_OWORD *)(a3 + 16);
    v14[0] = *(_OWORD *)a3;
    v14[1] = v12;
    long long v13 = *(_OWORD *)(a3 + 48);
    v14[2] = *(_OWORD *)(a3 + 32);
    v14[3] = v13;
    id v16 = *(id *)(a3 + 112);
    char v17 = *(unsigned char *)(a3 + 128);
    if (*(char *)(a3 + 159) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a3 + 136), *(void *)(a3 + 144));
    }
    else {
      std::string v18 = *(std::string *)(a3 + 136);
    }
    if (*(char *)(a3 + 183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 160), *(void *)(a3 + 168));
    }
    else {
      std::string __p = *(std::string *)(a3 + 160);
    }
    long long v20 = *(_OWORD *)(a3 + 192);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(v4, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
}

void sub_235AA8E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 256) == 3)
  {
    long long v6 = *(_OWORD *)a3;
    long long v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)a2 = v6;
    long long v8 = *(_OWORD *)(a3 + 48);
    long long v9 = *(_OWORD *)(a3 + 64);
    long long v10 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 89) = *(_OWORD *)(a3 + 89);
    *(_OWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 80) = v10;
    *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v8;
    objc_storeStrong((id *)(a2 + 112), *(id *)(a3 + 112));
    std::string::operator=((std::string *)(a2 + 128), (const std::string *)(a3 + 128));
    std::string::operator=((std::string *)(a2 + 152), (const std::string *)(a3 + 152));
    long long v11 = *(_OWORD *)(a3 + 224);
    long long v13 = *(_OWORD *)(a3 + 176);
    long long v12 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = *(_OWORD *)(a3 + 208);
    *(_OWORD *)(a2 + 224) = v11;
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 192) = v12;
  }
  else
  {
    long long v14 = *(_OWORD *)(a3 + 80);
    void v19[4] = *(_OWORD *)(a3 + 64);
    v20[0] = v14;
    *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)(a3 + 89);
    long long v15 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v15;
    long long v16 = *(_OWORD *)(a3 + 48);
    v19[2] = *(_OWORD *)(a3 + 32);
    v19[3] = v16;
    id v21 = *(id *)(a3 + 112);
    if (*(char *)(a3 + 151) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a3 + 128), *(void *)(a3 + 136));
    }
    else {
      std::string v22 = *(std::string *)(a3 + 128);
    }
    if (*(char *)(a3 + 175) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 152), *(void *)(a3 + 160));
    }
    else {
      std::string __p = *(std::string *)(a3 + 152);
    }
    long long v17 = *(_OWORD *)(a3 + 192);
    long long v24 = *(_OWORD *)(a3 + 176);
    long long v25 = v17;
    long long v18 = *(_OWORD *)(a3 + 224);
    long long v26 = *(_OWORD *)(a3 + 208);
    long long v27 = v18;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(v4, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_235AA9068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 256);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      long long v7 = *a3;
      long long v8 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v7;
      long long v9 = a3[3];
      long long v10 = a3[4];
      long long v11 = a3[5];
      *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 80) = v11;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v9;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      long long v12 = a3[8];
      long long v13 = a3[9];
      long long v14 = a3[11];
      *(_OWORD *)(a2 + 160) = a3[10];
      *(_OWORD *)(a2 + 176) = v14;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v12;
      *(_OWORD *)(a2 + 144) = v13;
      __n128 result = (__n128)a3[12];
      long long v16 = a3[13];
      long long v17 = a3[15];
      *(_OWORD *)(a2 + 224) = a3[14];
      *(_OWORD *)(a2 + 240) = v17;
      *(__n128 *)(a2 + 192) = result;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v16;
      return result;
    }
    ((void (*)(char *, uint64_t))off_26E8F4730[v5])(&v28, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  long long v18 = *a3;
  long long v19 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v19;
  *(_OWORD *)uint64_t v4 = v18;
  long long v20 = a3[3];
  long long v21 = a3[4];
  long long v22 = a3[5];
  *(_OWORD *)(v4 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v21;
  *(_OWORD *)(v4 + 80) = v22;
  *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v20;
  *(void *)(v4 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a3 + 14);
  long long v23 = a3[8];
  long long v24 = a3[9];
  long long v25 = a3[11];
  *(_OWORD *)(v4 + 160) = a3[10];
  *(_OWORD *)(v4 + 176) = v25;
  *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v23;
  *(_OWORD *)(v4 + 144) = v24;
  __n128 result = (__n128)a3[12];
  long long v26 = a3[13];
  long long v27 = a3[15];
  *(_OWORD *)(v4 + 224) = a3[14];
  *(_OWORD *)(v4 + 240) = v27;
  *(__n128 *)(v4 + 192) = result;
  *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v26;
  *(_DWORD *)(v4 + 256) = 4;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN2rf9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJSA_SB_SC_SD_SE_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 256);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      long long v7 = *a3;
      long long v8 = a3[2];
      *(_OWORD *)(a2 + 16) = a3[1];
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v7;
      long long v9 = a3[3];
      long long v10 = a3[4];
      long long v11 = a3[5];
      *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 80) = v11;
      *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v9;
      objc_storeStrong((id *)(a2 + 112), *((id *)a3 + 14));
      float result = *((float *)a3 + 32);
      *(float *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_26E8F4730[v5])(&v18, v4);
  }
  *(_DWORD *)(v4 + 256) = -1;
  long long v13 = *a3;
  long long v14 = a3[2];
  *(_OWORD *)(v4 + 16) = a3[1];
  *(_OWORD *)(v4 + 32) = v14;
  *(_OWORD *)uint64_t v4 = v13;
  long long v15 = a3[3];
  long long v16 = a3[4];
  long long v17 = a3[5];
  *(_OWORD *)(v4 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(v4 + 64) = v16;
  *(_OWORD *)(v4 + 80) = v17;
  *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v15;
  *(void *)(v4 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a3 + 14);
  float result = *((float *)a3 + 32);
  *(float *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = result;
  *(_DWORD *)(v4 + 256) = 5;
  return result;
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      long long v25 = *(void **)a2;
    }
    else {
      long long v25 = (void *)a2;
    }
    unint64_t v7 = ((*v25 >> 2) + (*v25 << 6) + v25[1] + 2654435769) ^ *v25;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    long long v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  long long v14 = operator new(0x140uLL);
  v26[0] = v14;
  v26[1] = a1 + 16;
  *long long v14 = 0;
  v14[1] = v7;
  long long v15 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v15;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v14 + 6), (uint64_t)(a3 + 2));
  char v27 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v26[0] = *v22;
    *long long v22 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v23 = *(void *)(*(void *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v26[0];
    }
  }
  long long v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_235AA958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = *(void *)(a2 + 24);
  if (!v8)
  {
    if (*(unsigned char *)(a2 + 16)) {
      char v27 = *(void **)a2;
    }
    else {
      char v27 = (void *)a2;
    }
    unint64_t v8 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
    *(void *)(a2 + 24) = v8;
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    long long v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  long long v15 = (void *)(a1 + 16);
  unint64_t v13 = operator new(0x40uLL);
  *unint64_t v13 = 0;
  v13[1] = v8;
  long long v16 = (*a4)[1];
  *((_OWORD *)v13 + 1) = **a4;
  *((_OWORD *)v13 + 2) = v16;
  v13[6] = 0;
  v13[7] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *unint64_t v13 = *v24;
LABEL_39:
    *long long v24 = v13;
    goto LABEL_40;
  }
  *unint64_t v13 = *v15;
  *long long v15 = v13;
  *(void *)(v23 + 8 * v4) = v15;
  if (*v13)
  {
    unint64_t v25 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_235AA982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      char v27 = *(void **)a2;
    }
    else {
      char v27 = (void *)a2;
    }
    unint64_t v7 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = (void *)(a1 + 16);
  long long v12 = operator new(0x40uLL);
  *long long v12 = 0;
  v12[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v12 + 2) = v15;
  uint64_t v16 = *(void *)(a3 + 40);
  v12[6] = *(void *)(a3 + 32);
  v12[7] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *long long v12 = *v24;
LABEL_41:
    *long long v24 = v12;
    goto LABEL_42;
  }
  *long long v12 = *v14;
  *unint64_t v14 = v12;
  *(void *)(v23 + 8 * v3) = v14;
  if (*v12)
  {
    unint64_t v25 = *(void *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_235AA9AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v2 + 6));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      long long v24 = *(void **)a2;
    }
    else {
      long long v24 = (void *)a2;
    }
    unint64_t v7 = ((*v24 >> 2) + (*v24 << 6) + v24[1] + 2654435769) ^ *v24;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x140uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  char v26 = 0;
  *unint64_t v14 = 0;
  v14[1] = v7;
  long long v15 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v15;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v14 + 6), (uint64_t)(a3 + 2));
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_235AA9E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1456)) {
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 1040));
  }
  if (*(unsigned char *)(a1 + 1024)) {
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 608));
  }
  if (*(unsigned char *)(a1 + 592))
  {
    rf::data_flow::consumer::Mesh::~Mesh((id *)(a1 + 176));
  }
}

void rf::data_flow::consumer::Mesh::~Mesh(id *this)
{
  if (*((unsigned char *)this + 408)) {

  }
  if (*((unsigned char *)this + 392)) {
    RESharedPtr<REAsset>::~RESharedPtr(this + 48);
  }
  if (*((unsigned char *)this + 376)) {
    RESharedPtr<REAsset>::~RESharedPtr(this + 46);
  }
  if (*((unsigned char *)this + 360)) {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(this + 44);
  }
  if (*((unsigned char *)this + 344)) {

  }
  if (*((unsigned char *)this + 312)) {
  if (*((unsigned char *)this + 280))
  }

  if (*((unsigned char *)this + 248)) {
  if (*((unsigned char *)this + 216))
  }

  if (*((unsigned char *)this + 184)) {
  if (*((unsigned char *)this + 152))
  }
}

uint64_t std::__optional_copy_base<rf::data_flow::consumer::Mesh,false>::__optional_copy_base[abi:ne180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 416) = 0;
  if (*((unsigned char *)a2 + 416))
  {
    long long v4 = *a2;
    long long v5 = a2[1];
    long long v6 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v6;
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    long long v7 = a2[4];
    long long v8 = a2[5];
    long long v9 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v9;
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v8;
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
    *(unsigned char *)(a1 + 152) = 0;
    if (*((unsigned char *)a2 + 152))
    {
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *((id *)a2 + 16);
      *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
      *(unsigned char *)(a1 + 152) = 1;
    }
    *(unsigned char *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 184) = 0;
    if (*((unsigned char *)a2 + 184))
    {
      *(void *)(a1 + 160) = *((id *)a2 + 20);
      *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = *(long long *)((char *)a2 + 168);
      *(unsigned char *)(a1 + 184) = 1;
    }
    *(unsigned char *)(a1 + 192) = 0;
    *(unsigned char *)(a1 + 216) = 0;
    if (*((unsigned char *)a2 + 216))
    {
      *(void *)(a1 + 192) = *((id *)a2 + 24);
      *(_OWORD *)(a1 + 200) = *(long long *)((char *)a2 + 200);
      *(unsigned char *)(a1 + 216) = 1;
    }
    *(unsigned char *)(a1 + 224) = 0;
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 0;
    if (*((unsigned char *)a2 + 248))
    {
      *(void *)(a1 + 224) = *((id *)a2 + 28);
      *(_OWORD *)(a1 + 232) = *(long long *)((char *)a2 + 232);
      *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 1;
    }
    *(unsigned char *)(a1 + 256) = 0;
    *(unsigned char *)(a1 + 280) = 0;
    if (*((unsigned char *)a2 + 280))
    {
      *(void *)(a1 + 256) = *((id *)a2 + 32);
      *(_OWORD *)(a1 + 264) = *(long long *)((char *)a2 + 264);
      *(unsigned char *)(a1 + 280) = 1;
    }
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 0;
    *(unsigned char *)(a1 + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
    if (*((unsigned char *)a2 + 312))
    {
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = *((id *)a2 + 36);
      *(_OWORD *)(a1 + 296) = *(long long *)((char *)a2 + 296);
      *(unsigned char *)(a1 + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1;
    }
    *(unsigned char *)(a1 + 320) = 0;
    *(unsigned char *)(a1 + 344) = 0;
    if (*((unsigned char *)a2 + 344))
    {
      *(void *)(a1 + 320) = *((id *)a2 + 40);
      *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = *(long long *)((char *)a2 + 328);
      *(unsigned char *)(a1 + 344) = 1;
    }
    *(unsigned char *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 360) = 0;
    if (*((unsigned char *)a2 + 360))
    {
      uint64_t v10 = *((void *)a2 + 44);
      *(void *)(a1 + 352) = v10;
      if (v10) {
        RERetain();
      }
      *(unsigned char *)(a1 + 360) = 1;
    }
    std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100]((unsigned char *)(a1 + 368), (uint64_t *)a2 + 46);
    std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100]((unsigned char *)(a1 + 384), (uint64_t *)a2 + 48);
    *(unsigned char *)(a1 + 400) = 0;
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 0;
    if (*((unsigned char *)a2 + 408))
    {
      *(void *)(a1 + 400) = *((id *)a2 + 50);
      *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 1;
    }
    *(unsigned char *)(a1 + 416) = 1;
  }
  return a1;
}

void sub_235AAA20C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 360)) {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(v2);
  }
  if (*(unsigned char *)(v1 + 344)) {

  }
  if (*(unsigned char *)(v1 + 312)) {
  if (*(unsigned char *)(v1 + 280))
  }

  if (*(unsigned char *)(v1 + 248)) {
  if (*(unsigned char *)(v1 + 216))
  }

  if (*(unsigned char *)(v1 + 184)) {
  if (*(unsigned char *)(v1 + 152))
  }

  if (*(unsigned char *)(v1 + 416)) {
    rf::data_flow::consumer::Mesh::~Mesh((id *)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v3 = *a2;
    *(void *)a1 = *a2;
    if (v3) {
      RERetain();
    }
    a1[8] = 1;
  }
  return a1;
}

void sub_235AAA310(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    RESharedPtr<REAsset>::~RESharedPtr((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<rf::data_flow::RFUUID const,rf::data_flow::consumer::RoomBoundary>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_235AAA5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  int v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_235AAA774(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v4 + v7 + v8 + a3;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v6 + v9 + v17;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v30 + v28 + v39 + v29;
        uint64_t v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::optional<RESharedPtr<REAsset>>::operator=[abi:ne180100]<RESharedPtr<REAsset>&,void>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    RESharedPtr<REAsset>::operator=((uint64_t *)a1, a2);
  }
  else
  {
    uint64_t v3 = *a2;
    *(void *)a1 = *a2;
    if (v3) {
      RERetain();
    }
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1;
  }
  return a1;
}

uint64_t *RESharedPtr<REAsset>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    RERetain();
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    RERelease();
  }
  return a1;
}

uint64_t std::optional<MDLMesh * {__strong}>::operator=[abi:ne180100]<MDLMesh * {__strong}&,void>(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1;
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  uint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *uint64_t v11 = 0;
    v11[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v26 = *(void **)a2;
    }
    else {
      uint64_t v26 = (void *)a2;
    }
    unint64_t v7 = ((*v26 >> 2) + (*v26 << 6) + v26[1] + 2654435769) ^ *v26;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x40uLL);
  *unint64_t v15 = 0;
  v15[1] = v7;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *unint64_t v15 = *v24;
LABEL_39:
    *unint64_t v24 = v15;
    goto LABEL_40;
  }
  *unint64_t v15 = *v14;
  *unint64_t v14 = v15;
  *(void *)(v23 + 8 * v3) = v14;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
}

void sub_235AAB70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v37 = *(void **)a2;
    }
    else {
      uint64_t v37 = (void *)a2;
    }
    unint64_t v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x38uLL);
  *unint64_t v14 = 0;
  v14[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *((void *)a1 + 1);
    if (*(void *)&prime > v8) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *unint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                unint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v33 = *(void **)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *unint64_t v14 = *v34;
LABEL_73:
    *uint64_t v34 = v14;
    goto LABEL_74;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((void *)a1 + 3);
}

void sub_235AABB60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ranges::detail::variant_visit_<ranges::detail::variant_data_<meta::list<ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,0ul>>,ranges::detail::indexed_datum<std::__hash_const_iterator<std::__hash_node<rf::data_flow::RFUUID,void *> *>,std::integral_constant<unsigned long,1ul>>>,true>::type,ranges::detail::variant_visitor<ranges::concat_view<ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>,ranges::ref_view<std::unordered_set<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>>>::cursor<true>::next_fun,ranges::variant<void,void>>,ranges::detail::indexed_element_fn>(uint64_t result, void **a2, void *a3, uint64_t a4)
{
  if (result)
  {
    *a2 = (void *)**a2;
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1;
  }
  else
  {
    *a2 = (void *)**a2;
    if (!a3[1])
    {
      a3[1] = *(void *)(*(void *)(*a3 + 16) + 16);
      a3[2] = 1;
    }
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::SceneObject const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::SceneObject const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v37 = *(void **)a2;
    }
    else {
      uint64_t v37 = (void *)a2;
    }
    unint64_t v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x38uLL);
  *unint64_t v14 = 0;
  v14[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *((void *)a1 + 1);
    if (*(void *)&prime > v8) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *unint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                unint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v33 = *(void **)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *unint64_t v14 = *v34;
LABEL_73:
    *uint64_t v34 = v14;
    goto LABEL_74;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((void *)a1 + 3);
}

void sub_235AABFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::EnvironmentProbe const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v37 = *(void **)a2;
    }
    else {
      uint64_t v37 = (void *)a2;
    }
    unint64_t v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x38uLL);
  *unint64_t v14 = 0;
  v14[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *((void *)a1 + 1);
    if (*(void *)&prime > v8) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *unint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                unint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v33 = *(void **)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *unint64_t v14 = *v34;
LABEL_73:
    *uint64_t v34 = v14;
    goto LABEL_74;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((void *)a1 + 3);
}

void sub_235AAC444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::reference_wrapper<rf::data_flow::consumer::RoomBoundary const>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary const&>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v37 = *(void **)a2;
    }
    else {
      uint64_t v37 = (void *)a2;
    }
    unint64_t v7 = ((*v37 >> 2) + (*v37 << 6) + v37[1] + 2654435769) ^ *v37;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 8), (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x38uLL);
  *unint64_t v14 = 0;
  v14[1] = v7;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v15;
  v14[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *((void *)a1 + 1);
    if (*(void *)&prime > v8) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *unint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                unint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v33 = *(void **)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *unint64_t v14 = *v34;
LABEL_73:
    *uint64_t v34 = v14;
    goto LABEL_74;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*((void *)a1 + 3);
}

void sub_235AAC890(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,RESharedPtr<REAsset>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v38 = *(void **)a2;
    }
    else {
      unint64_t v38 = (void *)a2;
    }
    unint64_t v7 = ((*v38 >> 2) + (*v38 << 6) + v38[1] + 2654435769) ^ *v38;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = (void *)(a1 + 16);
  long long v15 = operator new(0x38uLL);
  v39[0] = v15;
  v39[1] = a1 + 16;
  *long long v15 = 0;
  v15[1] = v7;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v16;
  v15[6] = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  char v40 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if (*(void *)&prime > v8) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          unint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_56;
                  }
                  *unint64_t v26 = *v32;
                  *unint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_56:
                unint64_t v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v35 = v39[0];
  if (v34)
  {
    *(void *)v39[0] = *v34;
LABEL_73:
    *uint64_t v34 = v35;
    goto LABEL_74;
  }
  *(void *)v39[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v35;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*(void *)v35)
  {
    unint64_t v36 = *(void *)(*(void *)v35 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v36 >= v8) {
        v36 %= v8;
      }
    }
    else
    {
      v36 &= v8 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_73;
  }
LABEL_74:
  v39[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_235AACE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,RESharedPtr<REAsset>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::ARState::updateAnchorDefinitions(rf::LockedARStateData &,REScene *)::$_0>>::satisfy_forward(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = result + 8 * a2;
  if (*a3 != v3)
  {
    do
    {
      uint64_t Object = RECustomComponentGetObject();
      REComponentGetEntity();
      RENetworkComponentGetComponentType();
      unint64_t result = REEntityGetComponentByClass();
      if (result)
      {
        unint64_t result = RENetworkComponentIsAuthoritative();
        if (!result) {
          break;
        }
      }
      if (!*(unsigned char *)(Object + 21) && !*(unsigned char *)(Object + 20)) {
        break;
      }
      uint64_t v6 = *a3 + 8;
      *a3 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    }
    uint64_t v5 = a1[1] - *a1;
    _OWORD v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 272 * v6;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_235AACF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::emplace_back<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0xF0F0F0F0F0F0F0) {
      _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x78787878787878) {
      unint64_t v12 = 0xF0F0F0F0F0F0F0;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v15 = v13;
    long long v16 = &v13[272 * v9];
    float v18 = &v13[272 * v12];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v16, a2);
    float v17 = v16 + 272;
    std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v8;
  return v8 - 272;
}

void sub_235AAD078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void RFDebugServiceCreate()
{
  long long v1 = 0u;
  memset(v2, 0, sizeof(v2));
  long long v0 = 0u;
  if (qword_26AB585E0 != -1) {
    dispatch_once(&qword_26AB585E0, &__block_literal_global_3);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235AAD164(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10B0C4095DBC23ELL);
  _Unwind_Resume(a1);
}

uint64_t RFDebugServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFDebugServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFDebugServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  RESceneGetECSManagerNullable();
  float v7 = a3;
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  char v9 = 1;
  uint64_t v10 = a2;
  char v11 = 1;
  uint64_t v12 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 16) + 16))(v5 + 16, &v7);
}

uint64_t RFDebugServiceSetAnchorVisualizationEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 32) = a2;
  return result;
}

uint64_t RFDebugServiceGetAnchorVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 32);
}

uint64_t RFDebugServiceSetAnchorVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 36) = a2;
  return result;
}

uint64_t RFDebugServiceGetAnchorVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 36);
}

uint64_t RFDebugServiceSetSceneGraphVisualizationEnabled(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 16) + 40) = 0;
  return result;
}

uint64_t RFDebugServiceGetSceneGraphVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 40);
}

uint64_t RFDebugServiceSetSceneGraphVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 44) = a2;
  return result;
}

uint64_t RFDebugServiceGetSceneVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 44);
}

double RFDebugServiceSetMeshVisualizationEnabled(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(unsigned char *)(v2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a2;
  double result = *(double *)(v2 + 52);
  *(double *)(v2 + 200) = result;
  *(unsigned char *)(v2 + 1744) = 1;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 48);
}

uint64_t RFDebugServiceSetMeshVisualizationMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  int v3 = *(unsigned __int8 *)(v2 + 60);
  if (v3 == 2)
  {
    if (*(_DWORD *)(v2 + 52) == a2)
    {
      int v5 = *(_DWORD *)(v2 + 56);
    }
    else
    {
      *(_DWORD *)(v2 + 52) = a2;
      int v5 = *(_DWORD *)(v2 + 56);
      *(_DWORD *)(v2 + 200) = a2;
      *(_DWORD *)(v2 + 204) = v5;
      *(unsigned char *)(v2 + 1744) = 1;
    }
    if (v5 != a2)
    {
      *(_DWORD *)(v2 + 56) = a2;
      int v4 = a2;
      goto LABEL_13;
    }
  }
  else
  {
    if (v3 == 1)
    {
      if (*(_DWORD *)(v2 + 56) == a2) {
        return result;
      }
      *(_DWORD *)(v2 + 56) = a2;
      int v4 = *(_DWORD *)(v2 + 52);
      goto LABEL_13;
    }
    if (!*(unsigned char *)(v2 + 60) && *(_DWORD *)(v2 + 52) != a2)
    {
      *(_DWORD *)(v2 + 52) = a2;
      int v4 = a2;
      a2 = *(_DWORD *)(v2 + 56);
LABEL_13:
      *(_DWORD *)(v2 + 200) = v4;
      *(_DWORD *)(v2 + 204) = a2;
      *(unsigned char *)(v2 + 1744) = 1;
    }
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationMode(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  int v2 = *(unsigned __int8 *)(v1 + 60);
  if (v2 == 2) {
    return *(int *)(v1 + 52);
  }
  if (v2 != 1)
  {
    if (*(unsigned char *)(v1 + 60)) {
      return result;
    }
    return *(int *)(v1 + 52);
  }
  return *(int *)(v1 + 56);
}

uint64_t RFDebugServiceSetMeshVisualizationSolidMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(_DWORD *)(v2 + 52) != a2)
  {
    *(_DWORD *)(v2 + 52) = a2;
    int v3 = *(_DWORD *)(v2 + 56);
    *(_DWORD *)(v2 + 200) = a2;
    *(_DWORD *)(v2 + 204) = v3;
    *(unsigned char *)(v2 + 1744) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationSolidMode(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 52);
}

uint64_t RFDebugServiceSetMeshVisualizationWireMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(_DWORD *)(v2 + 56) != a2)
  {
    *(_DWORD *)(v2 + 56) = a2;
    *(_DWORD *)(v2 + 200) = *(_DWORD *)(v2 + 52);
    *(_DWORD *)(v2 + 204) = a2;
    *(unsigned char *)(v2 + 1744) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationWireMode(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 56);
}

uint64_t RFDebugServiceSetMeshVisualizationFillMode(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)(v2 + 60) = a2;
  if (a2 == 2)
  {
    int v5 = *(_DWORD *)(v2 + 52);
    int v4 = *(_DWORD *)(v2 + 56);
    if (v5)
    {
      if (v5 != v4)
      {
        *(_DWORD *)(v2 + 56) = v5;
        int v4 = v5;
LABEL_21:
        *(_DWORD *)(v2 + 200) = v4;
        *(_DWORD *)(v2 + 204) = v5;
        *(unsigned char *)(v2 + 1744) = 1;
      }
    }
    else if (v4)
    {
      *(_DWORD *)(v2 + 52) = v4;
      int v5 = v4;
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 == 1)
    {
      int v6 = *(_DWORD *)(v2 + 52);
      int v5 = *(_DWORD *)(v2 + 56);
      if (v5)
      {
        if (!v6) {
          return result;
        }
      }
      else
      {
        if (!v6) {
          return result;
        }
        *(_DWORD *)(v2 + 56) = v6;
        int v5 = v6;
      }
      int v4 = 0;
      *(_DWORD *)(v2 + 52) = 0;
      goto LABEL_21;
    }
    if (a2) {
      return result;
    }
    int v4 = *(_DWORD *)(v2 + 52);
    int v3 = *(_DWORD *)(v2 + 56);
    if (v4)
    {
      if (!v3) {
        return result;
      }
      goto LABEL_15;
    }
    if (v3)
    {
      *(_DWORD *)(v2 + 52) = v3;
      int v4 = v3;
LABEL_15:
      int v5 = 0;
      *(_DWORD *)(v2 + 56) = 0;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationFillMode(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 60);
}

int8x16_t RFDebugServiceSetMeshVisualizationSolidConstantModeColor(uint64_t a1, float32x4_t a2)
{
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(void *)(a1 + 16) + 240) = result;
  return result;
}

__n128 RFDebugServiceGetMeshVisualizationSolidConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(void *)(a1 + 16) + 240);
}

int8x16_t RFDebugServiceSetMeshVisualizationWireConstantModeColor(uint64_t a1, float32x4_t a2)
{
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(void *)(a1 + 16) + 256) = result;
  return result;
}

__n128 RFDebugServiceGetMeshVisualizationWireConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(void *)(a1 + 16) + 256);
}

float RFDebugServiceSetMeshVisualizationClassificationColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __n128 v5 = a3;
  return rf::ColorPalette::setColor((void *)(v3 + 288), a2, (long long *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetMeshVisualizationClassificationColor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 288);
  BOOL v4 = (*(void *)(v2 + 296) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  uint64_t v5 = v2 + 320;
  if (!v4) {
    uint64_t v5 = v3 + 16 * a2;
  }
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetMeshVisualizationClassificationsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationClassificationsAlpha(*(void *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetMeshVisualizationClassificationsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = rf::ColorPalette::setColorVisibility(v3 + 368, a2);
  *(unsigned char *)(v3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 448) = ~(-1 << ((*(void *)(v3 + 376) - *(void *)(v3 + 368)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationClassificationsVisibility(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 424);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v1 + 416);
  do
  {
    uint64_t result = (((*(void *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float RFDebugServiceSetMeshVisualizationMaterialColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __n128 v5 = a3;
  return rf::ColorPalette::setColor((void *)(v3 + 288), a2, (long long *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetMeshVisualizationMaterialColor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 288);
  BOOL v4 = (*(void *)(v2 + 296) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  uint64_t v5 = v2 + 320;
  if (!v4) {
    uint64_t v5 = v3 + 16 * a2;
  }
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetMeshVisualizationMaterialsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setMeshVisualizationMaterialsAlpha(*(void *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetMeshVisualizationMaterialsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = rf::ColorPalette::setColorVisibility(v3 + 288, a2);
  *(unsigned char *)(v3 + 449) = ~(-1 << ((*(void *)(v3 + 296) - *(void *)(v3 + 288)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetMeshVisualizationMaterialsVisibility(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 344);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v1 + 336);
  do
  {
    uint64_t result = (((*(void *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

double RFDebugServiceSetPRRMeshVisualizationEnabled(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(unsigned char *)(v2 + 61) = a2;
  double result = *(double *)(v2 + 64);
  *(double *)(v2 + 520) = result;
  *(unsigned char *)(v2 + 1745) = 1;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 61);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationSolidMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(_DWORD *)(v2 + 64) != a2)
  {
    *(_DWORD *)(v2 + 64) = a2;
    int v3 = *(_DWORD *)(v2 + 68);
    *(_DWORD *)(v2 + 520) = a2;
    *(_DWORD *)(v2 + 524) = v3;
    *(unsigned char *)(v2 + 1745) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationSolidMode(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 64);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationWireMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(_DWORD *)(v2 + 68) != a2)
  {
    *(_DWORD *)(v2 + 6std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
    *(_DWORD *)(v2 + 520) = *(_DWORD *)(v2 + 64);
    *(_DWORD *)(v2 + 524) = a2;
    *(unsigned char *)(v2 + 1745) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationWireMode(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 68);
}

int8x16_t RFDebugServiceSetPRRMeshVisualizationSolidConstantModeColor(uint64_t a1, float32x4_t a2)
{
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(void *)(a1 + 16) + 560) = result;
  return result;
}

__n128 RFDebugServiceGetPRRMeshVisualizationSolidConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(void *)(a1 + 16) + 560);
}

int8x16_t RFDebugServiceSetPRRMeshVisualizationWireConstantModeColor(uint64_t a1, float32x4_t a2)
{
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(a2, _Q2), (int8x16_t)_Q2, (int8x16_t)a2), (int8x16_t)vcltzq_f32(a2));
  *(int8x16_t *)(*(void *)(a1 + 16) + 576) = result;
  return result;
}

__n128 RFDebugServiceGetPRRMeshVisualizationWireConstantModeColor(uint64_t a1)
{
  return *(__n128 *)(*(void *)(a1 + 16) + 576);
}

float RFDebugServiceSetPRRMeshVisualizationClassificationColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __n128 v5 = a3;
  return rf::ColorPalette::setColor((void *)(v3 + 608), a2, (long long *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetPRRMeshVisualizationClassificationColor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 608);
  BOOL v4 = (*(void *)(v2 + 616) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  uint64_t v5 = v2 + 640;
  if (!v4) {
    uint64_t v5 = v3 + 16 * a2;
  }
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetPRRMeshVisualizationClassificationsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationClassificationsAlpha(*(void *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationClassificationsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = rf::ColorPalette::setColorVisibility(v3 + 688, a2);
  *(unsigned char *)(v3 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 768) = ~(-1 << ((*(void *)(v3 + 696) - *(void *)(v3 + 688)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationClassificationsVisibility(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 744);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v1 + 736);
  do
  {
    uint64_t result = (((*(void *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float RFDebugServiceSetPRRMeshVisualizationMaterialColor(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __n128 v5 = a3;
  return rf::ColorPalette::setColor((void *)(v3 + 608), a2, (long long *)&v5, a3.n128_f32[0]);
}

__n128 RFDebugServiceGetPRRMeshVisualizationMaterialColor(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 608);
  BOOL v4 = (*(void *)(v2 + 616) - v3) >> 4 <= (unint64_t)a2 || a2 <= 0;
  uint64_t v5 = v2 + 640;
  if (!v4) {
    uint64_t v5 = v3 + 16 * a2;
  }
  return *(__n128 *)v5;
}

uint64_t RFDebugServiceSetPRRMeshVisualizationMaterialsAlpha(uint64_t a1, float a2)
{
  return rf::data_flow::consumer::DebugOptionConsumer::setPRRMeshVisualizationMaterialsAlpha(*(void *)(a1 + 16) + 16, a2);
}

uint64_t RFDebugServiceSetPRRMeshVisualizationMaterialsVisibility(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = rf::ColorPalette::setColorVisibility(v3 + 608, a2);
  *(unsigned char *)(v3 + 769) = ~(-1 << ((*(void *)(v3 + 616) - *(void *)(v3 + 608)) >> 4)) == a2;
  return result;
}

uint64_t RFDebugServiceGetPRRMeshVisualizationMaterialsVisibility(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 664);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v1 + 656);
  do
  {
    uint64_t result = (((*(void *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) << v3) | result;
    ++v3;
  }
  while (v2 != v3);
  return result;
}

uint64_t RFDebugServiceSetEnvironmentProbeVisualizationEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 72) = a2;
  return result;
}

uint64_t RFDebugServiceGetEnvironmentProbeVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 72);
}

uint64_t RFDebugServiceSetEnvironmentProbeVisualizationTypes(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 76) = a2;
  return result;
}

uint64_t RFDebugServiceGetEnvironmentProbeVisualizationTypes(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 76);
}

uint64_t RFDebugServiceSetRoomVisualizationEnabled(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)(v2 + 80) = a2;
  *(unsigned char *)(v2 + 1746) = 1;
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 80);
}

double RFDebugServiceSetRoomVisualizationClassificationAlpha(uint64_t a1, float a2)
{
  *(void *)&double result = rf::data_flow::consumer::DebugOptionConsumer::setRoomVisualizationClassificationAlpha((__n128 *)(*(void *)(a1 + 16) + 16), a2).n128_u64[0];
  return result;
}

uint64_t RFDebugServiceSetRoomVisualizationMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(_DWORD *)(v2 + 84) != a2)
  {
    *(_DWORD *)(v2 + 84) = a2;
    *(unsigned char *)(v2 + 1746) = 1;
  }
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationMode(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 16) + 84);
}

uint64_t RFDebugServiceSetRoomVisualizationCurrentRoomOnly(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(unsigned __int8 *)(v2 + 88) != a2) {
    *(unsigned char *)(v2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = a2;
  }
  return result;
}

uint64_t RFDebugServiceGetRoomVisualizationCurrentRoomOnly(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 88);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer19DebugOptionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_12[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      BOOL v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    BOOL v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  BOOL v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::DebugOptionConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB585E8 = 0u;
  xmmword_26AB585F8 = 0u;
  xmmword_26AB58608 = 0u;
  unk_26AB58618 = 0u;
  xmmword_26AB58628 = 0u;
  unk_26AB58638 = 0u;
  float v7 = __dst;
  if (v9 < 0) {
    float v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB585E8 + 1) = v7;
  *(void *)&xmmword_26AB585F8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::initCallback;
  *(void *)&xmmword_26AB58608 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::finalizeCallback;
  qword_26AB58620 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58628 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_4 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AADC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    rf::data_flow::consumer::DebugOptionConsumer::~DebugOptionConsumer((rf::data_flow::consumer::DebugOptionConsumer *)(v2 + 16));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t rf::data_flow::consumer::AtmospherePlacementConsumer::AtmospherePlacementConsumer(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26E8F4820;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  long long v3 = a2[2];
  long long v4 = a2[3];
  long long v5 = a2[4];
  uint64_t v6 = *((void *)a2 + 10);
  long long v7 = *a2;
  long long v8 = a2[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 850045863;
  uint64_t v9 = a1 + 128;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v3;
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 109) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_235AF75E0;
  *(_OWORD *)(a1 + 272) = xmmword_235AF75F0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = xmmword_235AF7600;
  *(_OWORD *)(a1 + 304) = xmmword_235AF7AA0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = dispatch_group_create();
  uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  char v11 = dispatch_queue_attr_make_with_qos_class(v10, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(v9 + 240) = dispatch_queue_create("RoomExtentComputeQueue", v11);

  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.recalibrateIntervalUpdate");
  uint64_t v12 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v12 & 0xFF00000000) == 0) {
    LODWORD(vstd::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(_DWORD *)(a1 + 60);
  }
  *(_DWORD *)(a1 + 60) = v12;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.recalibrateIntervalNoUpdate");
  uint64_t v13 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v13 & 0xFF00000000) == 0) {
    LODWORD(v13) = *(_DWORD *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 56) = v13;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentCenterDifference");
  uint64_t v14 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v14 & 0xFF00000000) == 0) {
    LODWORD(v14) = *(_DWORD *)(a1 + 68);
  }
  *(_DWORD *)(a1 + 6std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v14;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentExtentDifference");
  uint64_t v15 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v15 & 0xFF00000000) == 0) {
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v15;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentOrientationDifference");
  uint64_t v16 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v16 & 0xFF00000000) == 0) {
    LODWORD(v16) = *(_DWORD *)(a1 + 76);
  }
  *(_DWORD *)(a1 + 76) = v16;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.minimalRoomExtentHeightDifference");
  uint64_t v17 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v17 & 0xFF00000000) == 0) {
    LODWORD(v17) = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(a1 + 80) = v17;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCrossfadeDuration");
  uint64_t v18 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v18 & 0xFF00000000) == 0) {
    LODWORD(v1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 64) = v18;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyOutdoorCeilingOffset");
  uint64_t v19 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v19 & 0xFF00000000) == 0) {
    LODWORD(v19) = *(_DWORD *)(a1 + 88);
  }
  *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = v19;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCombinedExtentRatioThreshold");
  uint64_t v20 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v20 & 0xFF00000000) == 0) {
    LODWORD(v20) = *(_DWORD *)(a1 + 96);
  }
  *(_DWORD *)(a1 + 96) = v20;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.lowestWallOffset");
  uint64_t v21 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v21 & 0xFF00000000) == 0) {
    LODWORD(v21) = *(_DWORD *)(a1 + 28);
  }
  *(_DWORD *)(a1 + 2std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v21;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.highestWallOffset");
  uint64_t v22 = rf::UserDefaults::floatValue((CFStringRef *)&v35, (const UInt8 *)__p);
  if ((v22 & 0xFF00000000) == 0) {
    LODWORD(v22) = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 32) = v22;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyDefaultBoundsType");
  unint64_t v23 = rf::UserDefaults::intValue((CFStringRef *)&v35, (const UInt8 *)__p);
  char v25 = v24;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v25)
  {
    if (v23)
    {
      if (v23 != 1) {
        goto LABEL_77;
      }
      __int16 v26 = 257;
    }
    else
    {
      __int16 v26 = 256;
    }
    *(_WORD *)(a1 + 84) = v26;
  }
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v35, (const UInt8 *)v33);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.environment.openSkyCombinedExtentEstimationMode");
  unint64_t v27 = rf::UserDefaults::intValue((CFStringRef *)&v35, (const UInt8 *)__p);
  char v29 = v28;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v35);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v29 && v27 < 5) {
    *(unsigned char *)(a1 + 92) = v27;
  }
  return a1;
}

void sub_235AAE3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  rf::UserDefaults::~UserDefaults((const void **)(v23 - 40));
  if (a21 < 0) {
    operator delete(a16);
  }

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v21 + 192);
  std::mutex::~mutex(v22);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::AtmospherePlacementConsumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
  return result;
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::useRFRoomExtentFeatureFlagEnabled(rf::data_flow::consumer::AtmospherePlacementConsumer *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58650))
  {
    _MergedGlobals_5 = _os_feature_enabled_impl();
    __cxa_guard_release(&qword_26AB58650);
  }
}

void sub_235AAE588(_Unwind_Exception *a1)
{
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::calibrate(rf *a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    long long v5 = rf::realityFusionLogObject(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_235A7C000, v5, OS_LOG_TYPE_INFO, "AtmospherePlacementConsumer: Skipping calibration, not needed for Atmosphere", v6, 2u);
    }
  }
  else
  {
    rf::data_flow::consumer::AtmospherePlacementConsumer::useRFRoomExtentFeatureFlagEnabled(a1);
  }
}

void rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer(rf::data_flow::consumer::AtmospherePlacementConsumer *this)
{
  rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer(this);
  JUMPOUT(0x237DEE2B0);
}

{

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  std::mutex::~mutex((std::mutex *)this + 2);
}

uint64_t rf::data_flow::consumer::VFXCollisionConsumer::consumeLatestUpdate(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    BOOL v3 = *(unsigned char *)(a2 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(a2 + 24);
  REVFXSceneComponentGetComponentType();
  uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
  uint64_t v8 = ComponentsOfClass;
  unint64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = 8 * v7;
    char v11 = (unint64_t *)ComponentsOfClass;
    do
    {
      if (MEMORY[0x237DEE070](*v11)) {
        goto LABEL_11;
      }
      ++v11;
      v10 -= 8;
    }
    while (v10);
    *(_OWORD *)std::string __p = 0u;
    long long v256 = 0u;
    float v257 = 1.0;
    goto LABEL_99;
  }
  char v11 = (unint64_t *)ComponentsOfClass;
LABEL_11:
  uint64_t v10 = v8 + 8 * v9;
  *(_OWORD *)std::string __p = 0u;
  long long v256 = 0u;
  float v257 = 1.0;
  if (v11 != (unint64_t *)v10)
  {
    while (1)
    {
      unint64_t v2 = *v11;
      unint64_t v12 = 0x9DDFEA08EB382D69 * ((8 * *v11 + 8) ^ HIDWORD(*v11));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(*v11) ^ (v12 >> 47) ^ v12);
      unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
      unint64_t v15 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v9 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
          if ((void *)v14 >= __p[1]) {
            unint64_t v9 = v14 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v9 = v14 & ((unint64_t)__p[1] - 1);
        }
        uint64_t v17 = (void *)*((void *)__p[0] + v9);
        if (v17)
        {
          for (char i = (void *)*v17; i; char i = (void *)*i)
          {
            unint64_t v19 = i[1];
            if (v19 == v14)
            {
              if (i[2] == v2) {
                goto LABEL_84;
              }
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if ((void *)v19 >= __p[1]) {
                  v19 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v19 &= (unint64_t)__p[1] - 1;
              }
              if (v19 != v9) {
                break;
              }
            }
          }
        }
      }
      uint64_t v20 = operator new(0x18uLL);
      *uint64_t v20 = 0;
      v20[1] = v14;
      _OWORD v20[2] = v2;
      float v21 = (float)(unint64_t)(*((void *)&v256 + 1) + 1);
      if (!v15 || (float)(v257 * (float)v15) < v21) {
        break;
      }
LABEL_74:
      uint64_t v37 = __p[0];
      unint64_t v38 = (void *)*((void *)__p[0] + v9);
      if (v38)
      {
        *uint64_t v20 = *v38;
      }
      else
      {
        *uint64_t v20 = v256;
        *(void *)&long long v256 = v20;
        v37[v9] = &v256;
        if (!*v20) {
          goto LABEL_83;
        }
        unint64_t v39 = *(void *)(*v20 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v39 >= v15) {
            v39 %= v15;
          }
        }
        else
        {
          v39 &= v15 - 1;
        }
        unint64_t v38 = (char *)__p[0] + 8 * v39;
      }
      *unint64_t v38 = v20;
LABEL_83:
      ++*((void *)&v256 + 1);
LABEL_84:
      if (++v11 != (unint64_t *)v10)
      {
        while ((MEMORY[0x237DEE070](*v11) & 1) == 0)
        {
          if (++v11 == (unint64_t *)v10) {
            goto LABEL_99;
          }
        }
        if (v11 != (unint64_t *)v10) {
          continue;
        }
      }
      goto LABEL_99;
    }
    BOOL v22 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3) {
      BOOL v22 = 1;
    }
    unint64_t v23 = v22 | (2 * v15);
    unint64_t v24 = vcvtps_u32_f32(v21 / v257);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = (unint64_t)__p[1];
    }
    if (*(void *)&prime > v15) {
      goto LABEL_40;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)&v256 + 1) / v257);
      if (v15 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = __p[0];
          __p[0] = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v28++) = 0;
          while (*(void *)&prime != v28);
          char v29 = (void **)v256;
          if ((void)v256)
          {
            unint64_t v30 = *(void *)(v256 + 8);
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v30) = &v256;
            for (j = *v29; j; unint64_t v30 = v36)
            {
              unint64_t v36 = j[1];
              if (v31.u32[0] > 1uLL)
              {
                if (v36 >= *(void *)&prime) {
                  v36 %= *(void *)&prime;
                }
              }
              else
              {
                v36 &= *(void *)&prime - 1;
              }
              if (v36 != v30)
              {
                if (!*((void *)__p[0] + v36))
                {
                  *((void *)__p[0] + v36) = v29;
                  goto LABEL_65;
                }
                *char v29 = (void *)*j;
                *uint64_t j = **((void **)__p[0] + v36);
                **((void **)__p[0] + v36) = j;
                uint64_t j = v29;
              }
              unint64_t v36 = v30;
LABEL_65:
              char v29 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_69;
        }
        char v40 = __p[0];
        __p[0] = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v15 = 0;
        __p[1] = 0;
      }
    }
LABEL_69:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v9 = v14 % v15;
      }
      else {
        unint64_t v9 = v14;
      }
    }
    else
    {
      unint64_t v9 = (v15 - 1) & v14;
    }
    goto LABEL_74;
  }
LABEL_99:
  unint64_t v41 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v42 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v41 >> 47) ^ v41);
  unint64_t v43 = v42 ^ (v42 >> 47);
  unint64_t v44 = 0x9DDFEA08EB382D69 * v43;
  unint64_t v45 = *(void *)(v4 + 32);
  if (*((void *)&v256 + 1))
  {
    if (v45)
    {
      uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
      v46.i16[0] = vaddlv_u8(v46);
      if (v46.u32[0] > 1uLL)
      {
        uint64_t v10 = 0x9DDFEA08EB382D69 * v43;
        if (v44 >= v45) {
          uint64_t v10 = v44 % v45;
        }
      }
      else
      {
        uint64_t v10 = (v45 - 1) & v44;
      }
      uint64_t v49 = *(unint64_t **)(*(void *)(v4 + 24) + 8 * v10);
      if (v49)
      {
        for (unint64_t k = *v49; k; unint64_t k = *(void *)k)
        {
          unint64_t v51 = *(void *)(k + 8);
          if (v51 == v44)
          {
            if (*(void *)(k + 16) == v5) {
              goto LABEL_191;
            }
          }
          else
          {
            if (v46.u32[0] > 1uLL)
            {
              if (v51 >= v45) {
                v51 %= v45;
              }
            }
            else
            {
              v51 &= v45 - 1;
            }
            if (v51 != v10) {
              break;
            }
          }
        }
      }
    }
    uint64_t v52 = (char *)operator new(0x40uLL);
    uint64_t v53 = (void *)(v4 + 40);
    v262.n128_u64[0] = (unint64_t)v52;
    v262.n128_u64[1] = v4 + 40;
    *(void *)uint64_t v52 = 0;
    *((void *)v52 + 1) = v44;
    *((void *)v52 + 2) = v5;
    *(_OWORD *)(v52 + 24) = 0u;
    *(_OWORD *)(v52 + 40) = 0u;
    *((_DWORD *)v52 + 14) = 1065353216;
    v263.n128_u8[0] = 1;
    float v54 = (float)(unint64_t)(*(void *)(v4 + 48) + 1);
    float v55 = *(float *)(v4 + 56);
    if (v45 && (float)(v55 * (float)v45) >= v54)
    {
LABEL_181:
      unint64_t v76 = *(unint64_t **)(*(void *)(v4 + 24) + 8 * v10);
      unint64_t k = v262.n128_u64[0];
      if (v76)
      {
        *(void *)v262.n128_u64[0] = *v76;
      }
      else
      {
        *(void *)v262.n128_u64[0] = *(void *)(v4 + 40);
        *(void *)(v4 + 40) = k;
        *(void *)(*(void *)(v4 + 24) + 8 * v10) = v53;
        if (!*(void *)k)
        {
LABEL_190:
          v262.n128_u64[0] = 0;
          ++*(void *)(v4 + 48);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_191:
          uint64_t v239 = *(std::mutex **)(v4 + 8);
          std::mutex::lock(v239);
          unint64_t v78 = (void *)v256;
          if ((void)v256)
          {
            int v240 = 0;
            long long v242 = 0;
            long long v243 = (void *)(k + 40);
            unint64_t v238 = k;
            do
            {
              int8x8_t v79 = *(int8x8_t *)(k + 32);
              if (v79)
              {
                unint64_t v80 = v78[2];
                unint64_t v81 = 0x9DDFEA08EB382D69 * (((8 * v80) + 8) ^ HIDWORD(v80));
                unint64_t v82 = 0x9DDFEA08EB382D69 * (HIDWORD(v80) ^ (v81 >> 47) ^ v81);
                unint64_t v83 = 0x9DDFEA08EB382D69 * (v82 ^ (v82 >> 47));
                uint8x8_t v84 = (uint8x8_t)vcnt_s8(v79);
                v84.i16[0] = vaddlv_u8(v84);
                if (v84.u32[0] > 1uLL)
                {
                  unint64_t v85 = v83;
                  if (v83 >= *(void *)&v79) {
                    unint64_t v85 = v83 % *(void *)&v79;
                  }
                }
                else
                {
                  unint64_t v85 = v83 & (*(void *)&v79 - 1);
                }
                uint64_t v86 = *(void **)(*(void *)(k + 24) + 8 * v85);
                if (v86)
                {
                  for (uint64_t m = (void *)*v86; m; uint64_t m = (void *)*m)
                  {
                    unint64_t v88 = m[1];
                    if (v88 == v83)
                    {
                      if (m[2] == v80) {
                        goto LABEL_344;
                      }
                    }
                    else
                    {
                      if (v84.u32[0] > 1uLL)
                      {
                        if (v88 >= *(void *)&v79) {
                          v88 %= *(void *)&v79;
                        }
                      }
                      else
                      {
                        v88 &= *(void *)&v79 - 1;
                      }
                      if (v88 != v85) {
                        break;
                      }
                    }
                  }
                }
              }
              *(_OWORD *)__uint64_t n = 0u;
              long long v253 = 0u;
              int v254 = 1065353216;
              if (v240)
              {
                uint64_t v89 = v242;
                if (!v242)
                {
                  long long v242 = 0;
                  goto LABEL_216;
                }
              }
              else
              {
                uint64_t v89 = *(__n128 **)&v239[2].__m_.__opaque[24];
                if (!v89)
                {
LABEL_215:
                  long long v242 = 0;
                  int v240 = 1;
                  goto LABEL_216;
                }
                while (v89[19].n128_u32[0] != 1)
                {
                  uint64_t v89 = (__n128 *)v89->n128_u64[0];
                  if (!v89) {
                    goto LABEL_215;
                  }
                }
                int v240 = 1;
              }
              long long v242 = v89;
              if (v89[19].n128_u32[0] != 1) {
                std::__throw_bad_variant_access[abi:ne180100]();
              }
LABEL_308:
              unint64_t v138 = 0;
              uint64_t v139 = v78[2];
              __n128 v141 = v89[14];
              __n128 v140 = v89[15];
              float32x4_t v142 = (float32x4_t)v89[5];
              float32x4_t v143 = (float32x4_t)v89[6];
              float32x4_t v144 = (float32x4_t)v89[7];
              float32x4_t v145 = (float32x4_t)v89[8];
              __n128 v146 = v89[12];
              __n128 v147 = v89[13];
              __n128 v258 = v89[11];
              __n128 v259 = v146;
              __n128 v260 = v147;
              __n128 v261 = v141;
              do
              {
                *(float32x4_t *)((char *)&v262 + v13std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v138))), v143, (float32x2_t)v258.n128_u64[v138 / 8], 1), v144, *(float32x4_t *)((char *)&v258 + v138), 2), v145, *(float32x4_t *)((char *)&v258 + v138), 3);
                v138 += 16;
              }
              while (v138 != 64);
              uint64_t v251 = MEMORY[0x237DEE050](v139, v140, v262, v263, v264, v265);
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)__n, (uint64_t)&v89[1], (__n128 *)v89[1].n128_u64, &v251);
              while (1)
              {
                uint64_t v89 = (__n128 *)v89->n128_u64[0];
                if (!v89) {
                  break;
                }
                if (v89[19].n128_u32[0] == 1) {
                  goto LABEL_308;
                }
              }
LABEL_216:
              unint64_t v90 = v78[2];
              unint64_t v91 = 0x9DDFEA08EB382D69 * (((8 * v90) + 8) ^ HIDWORD(v90));
              unint64_t v92 = 0x9DDFEA08EB382D69 * (HIDWORD(v90) ^ (v91 >> 47) ^ v91);
              unint64_t v93 = 0x9DDFEA08EB382D69 * (v92 ^ (v92 >> 47));
              int8x8_t v94 = *(int8x8_t *)(k + 32);
              if (v94)
              {
                uint8x8_t v95 = (uint8x8_t)vcnt_s8(v94);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  unint64_t v2 = 0x9DDFEA08EB382D69 * (v92 ^ (v92 >> 47));
                  if (v93 >= *(void *)&v94) {
                    unint64_t v2 = v93 % *(void *)&v94;
                  }
                }
                else
                {
                  unint64_t v2 = v93 & (*(void *)&v94 - 1);
                }
                unint64_t v96 = *(void **)(*(void *)(k + 24) + 8 * v2);
                if (v96)
                {
                  for (uint64_t n = (void *)*v96; n; uint64_t n = (void *)*n)
                  {
                    unint64_t v98 = n[1];
                    if (v98 == v93)
                    {
                      if (n[2] == v90) {
                        goto LABEL_343;
                      }
                    }
                    else
                    {
                      if (v95.u32[0] > 1uLL)
                      {
                        if (v98 >= *(void *)&v94) {
                          v98 %= *(void *)&v94;
                        }
                      }
                      else
                      {
                        v98 &= *(void *)&v94 - 1;
                      }
                      if (v98 != v2) {
                        break;
                      }
                    }
                  }
                }
              }
              unint64_t v99 = (char *)operator new(0x40uLL);
              unint64_t v245 = v2;
              unint64_t v246 = (unint64_t)v94;
              long long v244 = v78;
              v262.n128_u64[0] = (unint64_t)v99;
              v262.n128_u64[1] = (unint64_t)v243;
              v263.n128_u8[0] = 0;
              *(void *)unint64_t v99 = 0;
              *((void *)v99 + 1) = v93;
              unint64_t v241 = v93;
              *((void *)v99 + 2) = v90;
              *(_OWORD *)(v99 + 24) = 0u;
              float32x4_t v100 = (uint64_t *)(v99 + 24);
              *((_DWORD *)v99 + 14) = v254;
              *(_OWORD *)(v99 + 40) = 0u;
              std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)(v99 + 24), __n[1]);
              unint64_t v2 = v253;
              if ((void)v253)
              {
                uint64_t v248 = v99 + 40;
                do
                {
                  unint64_t v101 = *(void *)(v2 + 40);
                  if (!v101)
                  {
                    if (*(unsigned char *)(v2 + 32)) {
                      unint64_t v120 = *(void **)(v2 + 16);
                    }
                    else {
                      unint64_t v120 = (void *)(v2 + 16);
                    }
                    unint64_t v101 = ((*v120 >> 2) + (*v120 << 6) + v120[1] + 2654435769) ^ *v120;
                    *(void *)(v2 + 40) = v101;
                  }
                  unint64_t v102 = *((void *)v99 + 4);
                  if (v102)
                  {
                    uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
                    v103.i16[0] = vaddlv_u8(v103);
                    unint64_t v104 = v103.u32[0];
                    if (v103.u32[0] > 1uLL)
                    {
                      unint64_t k = v101;
                      if (v101 >= v102) {
                        unint64_t k = v101 % v102;
                      }
                    }
                    else
                    {
                      unint64_t k = (v102 - 1) & v101;
                    }
                    unint64_t v105 = *(void **)(*v100 + 8 * k);
                    if (v105)
                    {
                      long long v106 = (void *)*v105;
                      if (*v105)
                      {
                        do
                        {
                          unint64_t v107 = v106[1];
                          if (v107 == v101)
                          {
                            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(v99 + 56), (uint64_t)(v106 + 2), v2 + 16))
                            {
                              goto LABEL_273;
                            }
                          }
                          else
                          {
                            if (v104 > 1)
                            {
                              if (v107 >= v102) {
                                v107 %= v102;
                              }
                            }
                            else
                            {
                              v107 &= v102 - 1;
                            }
                            if (v107 != k) {
                              break;
                            }
                          }
                          long long v106 = (void *)*v106;
                        }
                        while (v106);
                      }
                    }
                  }
                  long long v108 = operator new(0x38uLL);
                  *long long v108 = 0;
                  v108[1] = v101;
                  long long v109 = *(_OWORD *)(v2 + 16);
                  long long v110 = *(_OWORD *)(v2 + 32);
                  v108[6] = *(void *)(v2 + 48);
                  *((_OWORD *)v108 + 1) = v109;
                  *((_OWORD *)v108 + 2) = v110;
                  float v111 = (float)(unint64_t)(*((void *)v99 + 6) + 1);
                  float v112 = *((float *)v99 + 14);
                  if (!v102 || (float)(v112 * (float)v102) < v111)
                  {
                    BOOL v113 = (v102 & (v102 - 1)) != 0;
                    if (v102 < 3) {
                      BOOL v113 = 1;
                    }
                    unint64_t v114 = v113 | (2 * v102);
                    unint64_t v115 = vcvtps_u32_f32(v111 / v112);
                    if (v114 <= v115) {
                      size_t v116 = v115;
                    }
                    else {
                      size_t v116 = v114;
                    }
                    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)v100, v116);
                    unint64_t v102 = *((void *)v99 + 4);
                    if ((v102 & (v102 - 1)) != 0)
                    {
                      if (v101 >= v102) {
                        unint64_t k = v101 % v102;
                      }
                      else {
                        unint64_t k = v101;
                      }
                    }
                    else
                    {
                      unint64_t k = (v102 - 1) & v101;
                    }
                  }
                  uint64_t v117 = *v100;
                  long long v118 = *(void **)(*v100 + 8 * k);
                  if (v118)
                  {
                    *long long v108 = *v118;
                  }
                  else
                  {
                    *long long v108 = *v248;
                    void *v248 = v108;
                    *(void *)(v117 + 8 * k) = v248;
                    if (!*v108) {
                      goto LABEL_272;
                    }
                    unint64_t v119 = *(void *)(*v108 + 8);
                    if ((v102 & (v102 - 1)) != 0)
                    {
                      if (v119 >= v102) {
                        v119 %= v102;
                      }
                    }
                    else
                    {
                      v119 &= v102 - 1;
                    }
                    long long v118 = (void *)(*v100 + 8 * v119);
                  }
                  *long long v118 = v108;
LABEL_272:
                  ++*((void *)v99 + 6);
LABEL_273:
                  unint64_t v2 = *(void *)v2;
                }
                while (v2);
              }
              v263.n128_u8[0] = 1;
              unint64_t k = v238;
              float v121 = (float)(unint64_t)(*(void *)(v238 + 48) + 1);
              float v122 = *(float *)(v238 + 56);
              unint64_t v123 = v245;
              int8x8_t v124 = (int8x8_t)v246;
              if (!v246 || (float)(v122 * (float)v246) < v121)
              {
                BOOL v125 = (v246 & (v246 - 1)) != 0;
                if (v246 < 3) {
                  BOOL v125 = 1;
                }
                unint64_t v126 = v125 | (2 * v246);
                unint64_t v127 = vcvtps_u32_f32(v121 / v122);
                if (v126 <= v127) {
                  int8x8_t v128 = (int8x8_t)v127;
                }
                else {
                  int8x8_t v128 = (int8x8_t)v126;
                }
                if (*(void *)&v128 == 1)
                {
                  int8x8_t v128 = (int8x8_t)2;
                  goto LABEL_289;
                }
                if ((*(void *)&v128 & (*(void *)&v128 - 1)) != 0)
                {
                  unint64_t v123 = v241;
                  int8x8_t v128 = (int8x8_t)std::__next_prime(*(void *)&v128);
                }
                else
                {
LABEL_289:
                  unint64_t v123 = v241;
                }
                int8x8_t v124 = *(int8x8_t *)(v238 + 32);
                if (*(void *)&v128 <= *(void *)&v124)
                {
                  if (*(void *)&v128 < *(void *)&v124)
                  {
                    unint64_t v135 = vcvtps_u32_f32((float)*(unint64_t *)(v238 + 48) / *(float *)(v238 + 56));
                    if (*(void *)&v124 < 3uLL
                      || (uint8x8_t v136 = (uint8x8_t)vcnt_s8(v124), v136.i16[0] = vaddlv_u8(v136), v136.u32[0] > 1uLL))
                    {
                      unint64_t v135 = std::__next_prime(v135);
                    }
                    else
                    {
                      uint64_t v137 = 1 << -(char)__clz(v135 - 1);
                      if (v135 >= 2) {
                        unint64_t v135 = v137;
                      }
                    }
                    if (*(void *)&v128 <= v135) {
                      int8x8_t v128 = (int8x8_t)v135;
                    }
                    if (*(void *)&v128 >= *(void *)&v124)
                    {
                      int8x8_t v124 = *(int8x8_t *)(v238 + 32);
                    }
                    else
                    {
                      if (v128) {
                        goto LABEL_292;
                      }
                      BOOL v154 = *(void **)(v238 + 24);
                      *(void *)(v238 + 24) = 0;
                      if (v154) {
                        operator delete(v154);
                      }
                      int8x8_t v124 = 0;
                      *(void *)(v238 + 32) = 0;
                    }
                  }
                }
                else
                {
LABEL_292:
                  if (*(void *)&v128 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v129 = operator new(8 * *(void *)&v128);
                  unint64_t v130 = *(void **)(v238 + 24);
                  *(void *)(v238 + 24) = v129;
                  if (v130) {
                    operator delete(v130);
                  }
                  uint64_t v131 = 0;
                  *(int8x8_t *)(v238 + 32) = v128;
                  do
                    *(void *)(*(void *)(v238 + 24) + 8 * v131++) = 0;
                  while (*(void *)&v128 != v131);
                  long long v132 = (void *)*v243;
                  if (*v243)
                  {
                    unint64_t v133 = v132[1];
                    uint8x8_t v134 = (uint8x8_t)vcnt_s8(v128);
                    v134.i16[0] = vaddlv_u8(v134);
                    if (v134.u32[0] > 1uLL)
                    {
                      if (v133 >= *(void *)&v128) {
                        v133 %= *(void *)&v128;
                      }
                    }
                    else
                    {
                      v133 &= *(void *)&v128 - 1;
                    }
                    *(void *)(*(void *)(v238 + 24) + 8 * v133) = v243;
                    int v148 = (void *)*v132;
                    if (*v132)
                    {
                      do
                      {
                        unint64_t v149 = v148[1];
                        if (v134.u32[0] > 1uLL)
                        {
                          if (v149 >= *(void *)&v128) {
                            v149 %= *(void *)&v128;
                          }
                        }
                        else
                        {
                          v149 &= *(void *)&v128 - 1;
                        }
                        if (v149 != v133)
                        {
                          uint64_t v150 = *(void *)(v238 + 24);
                          if (!*(void *)(v150 + 8 * v149))
                          {
                            *(void *)(v150 + 8 * v149) = v132;
                            goto LABEL_325;
                          }
                          void *v132 = *v148;
                          *int v148 = **(void **)(*(void *)(v238 + 24) + 8 * v149);
                          **(void **)(*(void *)(v238 + 24) + 8 * v149) = v148;
                          int v148 = v132;
                        }
                        unint64_t v149 = v133;
LABEL_325:
                        long long v132 = v148;
                        int v148 = (void *)*v148;
                        unint64_t v133 = v149;
                      }
                      while (v148);
                    }
                  }
                  int8x8_t v124 = v128;
                }
                if ((*(void *)&v124 & (*(void *)&v124 - 1)) != 0)
                {
                  if (v123 >= *(void *)&v124) {
                    v123 %= *(void *)&v124;
                  }
                }
                else
                {
                  v123 &= *(void *)&v124 - 1;
                }
              }
              int v151 = *(unint64_t **)(*(void *)(v238 + 24) + 8 * v123);
              unint64_t v152 = v262.n128_u64[0];
              unint64_t v78 = v244;
              if (v151)
              {
                *(void *)v262.n128_u64[0] = *v151;
LABEL_341:
                unint64_t *v151 = v152;
                goto LABEL_342;
              }
              *(void *)v262.n128_u64[0] = *(void *)(v238 + 40);
              *(void *)(v238 + 40) = v152;
              *(void *)(*(void *)(v238 + 24) + 8 * v123) = v243;
              if (*(void *)v152)
              {
                unint64_t v153 = *(void *)(*(void *)v152 + 8);
                if ((*(void *)&v124 & (*(void *)&v124 - 1)) != 0)
                {
                  if (v153 >= *(void *)&v124) {
                    v153 %= *(void *)&v124;
                  }
                }
                else
                {
                  v153 &= *(void *)&v124 - 1;
                }
                int v151 = (unint64_t *)(*(void *)(v238 + 24) + 8 * v153);
                goto LABEL_341;
              }
LABEL_342:
              v262.n128_u64[0] = 0;
              ++*(void *)(v238 + 48);
              std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_343:
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__n);
LABEL_344:
              unint64_t v78 = (void *)*v78;
            }
            while (v78);
          }
          uint64_t v156 = (void *)(k + 40);
          int v155 = *(void **)(k + 40);
          if (!v155) {
            goto LABEL_483;
          }
          while (1)
          {
            if (__p[1])
            {
              unint64_t v157 = v155[2];
              unint64_t v158 = 0x9DDFEA08EB382D69 * (((8 * v157) + 8) ^ HIDWORD(v157));
              unint64_t v159 = 0x9DDFEA08EB382D69 * (HIDWORD(v157) ^ (v158 >> 47) ^ v158);
              unint64_t v160 = 0x9DDFEA08EB382D69 * (v159 ^ (v159 >> 47));
              uint8x8_t v161 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v161.i16[0] = vaddlv_u8(v161);
              if (v161.u32[0] > 1uLL)
              {
                unint64_t v162 = v160;
                if ((void *)v160 >= __p[1]) {
                  unint64_t v162 = v160 % (unint64_t)__p[1];
                }
              }
              else
              {
                unint64_t v162 = v160 & ((unint64_t)__p[1] - 1);
              }
              uint64_t v163 = (void *)*((void *)__p[0] + v162);
              if (v163)
              {
                for (ichar i = (void *)*v163; ii; ichar i = (void *)*ii)
                {
                  unint64_t v165 = ii[1];
                  if (v165 == v160)
                  {
                    if (ii[2] == v157)
                    {
                      int v176 = (void *)*v155;
                      goto LABEL_399;
                    }
                  }
                  else
                  {
                    if (v161.u32[0] > 1uLL)
                    {
                      if ((void *)v165 >= __p[1]) {
                        v165 %= (unint64_t)__p[1];
                      }
                    }
                    else
                    {
                      v165 &= (unint64_t)__p[1] - 1;
                    }
                    if (v165 != v162) {
                      break;
                    }
                  }
                }
              }
            }
            int8x8_t v166 = *(int8x8_t *)(k + 32);
            unint64_t v167 = v155[1];
            uint8x8_t v168 = (uint8x8_t)vcnt_s8(v166);
            v168.i16[0] = vaddlv_u8(v168);
            if (v168.u32[0] > 1uLL)
            {
              if (v167 >= *(void *)&v166) {
                v167 %= *(void *)&v166;
              }
            }
            else
            {
              v167 &= *(void *)&v166 - 1;
            }
            int v176 = (void *)*v155;
            uint64_t v169 = *(void *)(k + 24);
            long long v170 = *(void **)(v169 + 8 * v167);
            do
            {
              long long v171 = v170;
              long long v170 = (void *)*v170;
            }
            while (v170 != v155);
            if (v171 != v156)
            {
              unint64_t v172 = v171[1];
              if (v168.u32[0] > 1uLL)
              {
                if (v172 >= *(void *)&v166) {
                  v172 %= *(void *)&v166;
                }
              }
              else
              {
                v172 &= *(void *)&v166 - 1;
              }
              long long v173 = (void *)*v155;
              if (v172 == v167) {
                goto LABEL_391;
              }
            }
            if (!v176) {
              break;
            }
            unint64_t v174 = v176[1];
            if (v168.u32[0] > 1uLL)
            {
              if (v174 >= *(void *)&v166) {
                v174 %= *(void *)&v166;
              }
            }
            else
            {
              v174 &= *(void *)&v166 - 1;
            }
            long long v173 = (void *)*v155;
            if (v174 != v167) {
              break;
            }
LABEL_392:
            unint64_t v175 = v173[1];
            if (v168.u32[0] > 1uLL)
            {
              if (v175 >= *(void *)&v166) {
                v175 %= *(void *)&v166;
              }
            }
            else
            {
              v175 &= *(void *)&v166 - 1;
            }
            if (v175 != v167)
            {
              *(void *)(*(void *)(k + 24) + 8 * v175) = v171;
              long long v173 = (void *)*v155;
            }
LABEL_398:
            *long long v171 = v173;
            *int v155 = 0;
            --*(void *)(k + 48);
            v262.n128_u64[0] = (unint64_t)v155;
            v262.n128_u64[1] = k + 40;
            v263.n128_u8[0] = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
LABEL_399:
            int v155 = v176;
            if (!v176)
            {
              long long v177 = (void *)*v156;
              if (v177)
              {
                long long v178 = 0;
                int v249 = 0;
                int v179 = 0;
                int v247 = 0;
                float32x4_t v180 = 0;
                int v250 = 0;
                do
                {
                  if (v250)
                  {
                    if (!v180) {
                      goto LABEL_409;
                    }
                  }
                  else
                  {
                    float32x4_t v180 = *(void **)&v239[35].__m_.__opaque[48];
                    if (!v180)
                    {
LABEL_408:
                      int v250 = 1;
                      goto LABEL_409;
                    }
                    while (*(_DWORD *)(v180[6] + 256) != 1)
                    {
                      float32x4_t v180 = (void *)*v180;
                      if (!v180) {
                        goto LABEL_408;
                      }
                    }
                    int v250 = 1;
                  }
                  uint64_t v181 = v180[6];
                  if (*(_DWORD *)(v181 + 256) != 1) {
                    std::__throw_bad_variant_access[abi:ne180100]();
                  }
                  long long v182 = v180;
LABEL_428:
                  if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v182 + 2)))
                  {
                    unint64_t v183 = 0;
                    __n128 v185 = *(__n128 *)(v181 + 176);
                    __n128 v184 = *(__n128 *)(v181 + 192);
                    float32x4_t v186 = *(float32x4_t *)(v181 + 32);
                    float32x4_t v187 = *(float32x4_t *)(v181 + 48);
                    float32x4_t v188 = *(float32x4_t *)(v181 + 64);
                    float32x4_t v189 = *(float32x4_t *)(v181 + 80);
                    __n128 v190 = *(__n128 *)(v181 + 144);
                    __n128 v191 = *(__n128 *)(v181 + 160);
                    uint64_t v192 = v177[2];
                    __n128 v258 = *(__n128 *)(v181 + 128);
                    __n128 v259 = v190;
                    __n128 v260 = v191;
                    __n128 v261 = v185;
                    do
                    {
                      *(float32x4_t *)((char *)&v262 + v183) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v183))), v187, (float32x2_t)v258.n128_u64[v183 / 8], 1), v188, *(float32x4_t *)((char *)&v258 + v183), 2), v189, *(float32x4_t *)((char *)&v258 + v183), 3);
                      v183 += 16;
                    }
                    while (v183 != 64);
                    v262.n128_u64[0] = MEMORY[0x237DEE050](v192, v184, v262, v263, v264, v265);
                    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)(v177 + 3), (uint64_t)(v182 + 2), (_OWORD *)v182 + 1, &v262);
                  }
                  while (1)
                  {
                    long long v182 = (void *)*v182;
                    if (!v182) {
                      break;
                    }
                    uint64_t v181 = v182[6];
                    if (*(_DWORD *)(v181 + 256) == 1) {
                      goto LABEL_428;
                    }
                  }
LABEL_409:
                  if (v249)
                  {
                    if (!v179) {
                      goto LABEL_416;
                    }
                  }
                  else
                  {
                    int v179 = *(uint64_t **)v239[37].__m_.__opaque;
                    if (!v179)
                    {
LABEL_415:
                      int v249 = 1;
                      goto LABEL_416;
                    }
                    while (*((_DWORD *)v179 + 76) != 1)
                    {
                      int v179 = (uint64_t *)*v179;
                      if (!v179) {
                        goto LABEL_415;
                      }
                    }
                    int v249 = 1;
                  }
                  unint64_t v193 = v177 + 3;
                  int v194 = v179;
LABEL_437:
                  long long v195 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v194 + 2));
                  if (v195)
                  {
                    MEMORY[0x237DEE080](v177[2], v195[6]);
                    long long v196 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v194 + 2));
                    if (v196)
                    {
                      int8x8_t v197 = (int8x8_t)v177[4];
                      unint64_t v198 = v196[1];
                      uint8x8_t v199 = (uint8x8_t)vcnt_s8(v197);
                      v199.i16[0] = vaddlv_u8(v199);
                      if (v199.u32[0] > 1uLL)
                      {
                        if (v198 >= *(void *)&v197) {
                          v198 %= *(void *)&v197;
                        }
                      }
                      else
                      {
                        v198 &= *(void *)&v197 - 1;
                      }
                      uint64_t v200 = *v196;
                      uint8x8_t v201 = *(uint64_t **)(*v193 + 8 * v198);
                      do
                      {
                        uint64_t v202 = v201;
                        uint8x8_t v201 = (uint64_t *)*v201;
                      }
                      while (v201 != v196);
                      if (v202 == v177 + 5) {
                        goto LABEL_456;
                      }
                      unint64_t v203 = v202[1];
                      if (v199.u32[0] > 1uLL)
                      {
                        if (v203 >= *(void *)&v197) {
                          v203 %= *(void *)&v197;
                        }
                      }
                      else
                      {
                        v203 &= *(void *)&v197 - 1;
                      }
                      if (v203 == v198)
                      {
LABEL_458:
                        if (v200)
                        {
                          unint64_t v204 = *(void *)(v200 + 8);
                          goto LABEL_460;
                        }
                      }
                      else
                      {
LABEL_456:
                        if (!v200) {
                          goto LABEL_457;
                        }
                        unint64_t v204 = *(void *)(v200 + 8);
                        if (v199.u32[0] > 1uLL)
                        {
                          unint64_t v205 = *(void *)(v200 + 8);
                          if (v204 >= *(void *)&v197) {
                            unint64_t v205 = v204 % *(void *)&v197;
                          }
                        }
                        else
                        {
                          unint64_t v205 = v204 & (*(void *)&v197 - 1);
                        }
                        if (v205 != v198)
                        {
LABEL_457:
                          *(void *)(*v193 + 8 * v19std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
                          uint64_t v200 = *v196;
                          goto LABEL_458;
                        }
LABEL_460:
                        if (v199.u32[0] > 1uLL)
                        {
                          if (v204 >= *(void *)&v197) {
                            v204 %= *(void *)&v197;
                          }
                        }
                        else
                        {
                          v204 &= *(void *)&v197 - 1;
                        }
                        if (v204 != v198)
                        {
                          *(void *)(*v193 + 8 * v204) = v202;
                          uint64_t v200 = *v196;
                        }
                      }
                      *uint64_t v202 = v200;
                      *long long v196 = 0;
                      --v177[6];
                      operator delete(v196);
                    }
                  }
                  while (1)
                  {
                    int v194 = (uint64_t *)*v194;
                    if (!v194) {
                      break;
                    }
                    if (*((_DWORD *)v194 + 76) == 1) {
                      goto LABEL_437;
                    }
                  }
LABEL_416:
                  if (v247)
                  {
                    if (v178) {
                      goto LABEL_471;
                    }
                  }
                  else
                  {
                    long long v178 = *(void **)&v239[36].__m_.__opaque[24];
                    if (v178)
                    {
                      while (*(_DWORD *)(v178[6] + 256) != 1)
                      {
                        long long v178 = (void *)*v178;
                        if (!v178) {
                          goto LABEL_422;
                        }
                      }
                      int v247 = 1;
LABEL_471:
                      uint64_t v206 = v178[6];
                      if (*(_DWORD *)(v206 + 256) != 1) {
                        std::__throw_bad_variant_access[abi:ne180100]();
                      }
                      unint64_t v207 = v178;
LABEL_473:
                      uint64_t v208 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v177 + 3, (uint64_t)(v207 + 2));
                      unint64_t v209 = 0;
                      if (v208)
                      {
                        uint64_t v210 = v208[6];
                        __n128 v212 = *(__n128 *)(v206 + 176);
                        __n128 v211 = *(__n128 *)(v206 + 192);
                        float32x4_t v213 = *(float32x4_t *)(v206 + 32);
                        float32x4_t v214 = *(float32x4_t *)(v206 + 48);
                        float32x4_t v215 = *(float32x4_t *)(v206 + 64);
                        float32x4_t v216 = *(float32x4_t *)(v206 + 80);
                        __n128 v217 = *(__n128 *)(v206 + 144);
                        __n128 v218 = *(__n128 *)(v206 + 160);
                        uint64_t v219 = v177[2];
                        __n128 v258 = *(__n128 *)(v206 + 128);
                        __n128 v259 = v217;
                        __n128 v260 = v218;
                        __n128 v261 = v212;
                        do
                        {
                          *(float32x4_t *)((char *)&v262 + v209) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v213, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v209))), v214, (float32x2_t)v258.n128_u64[v209 / 8], 1), v215, *(float32x4_t *)((char *)&v258 + v209), 2), v216, *(float32x4_t *)((char *)&v258 + v209), 3);
                          v209 += 16;
                        }
                        while (v209 != 64);
                        MEMORY[0x237DEE090](v219, v210, v211, v262, v263, v264, v265);
                      }
                      else
                      {
                        __n128 v221 = *(__n128 *)(v206 + 176);
                        __n128 v220 = *(__n128 *)(v206 + 192);
                        float32x4_t v222 = *(float32x4_t *)(v206 + 32);
                        float32x4_t v223 = *(float32x4_t *)(v206 + 48);
                        float32x4_t v224 = *(float32x4_t *)(v206 + 64);
                        float32x4_t v225 = *(float32x4_t *)(v206 + 80);
                        __n128 v226 = *(__n128 *)(v206 + 144);
                        __n128 v227 = *(__n128 *)(v206 + 160);
                        uint64_t v228 = v177[2];
                        __n128 v258 = *(__n128 *)(v206 + 128);
                        __n128 v259 = v226;
                        __n128 v260 = v227;
                        __n128 v261 = v221;
                        do
                        {
                          *(float32x4_t *)((char *)&v262 + v209) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v222, COERCE_FLOAT(*(_OWORD *)((char *)&v258 + v209))), v223, (float32x2_t)v258.n128_u64[v209 / 8], 1), v224, *(float32x4_t *)((char *)&v258 + v209), 2), v225, *(float32x4_t *)((char *)&v258 + v209), 3);
                          v209 += 16;
                        }
                        while (v209 != 64);
                        v262.n128_u64[0] = MEMORY[0x237DEE050](v228, v220, v262, v263, v264, v265);
                        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>((uint64_t)(v177 + 3), (uint64_t)(v207 + 2), (_OWORD *)v207 + 1, &v262);
                      }
                      while (1)
                      {
                        unint64_t v207 = (void *)*v207;
                        if (!v207) {
                          goto LABEL_423;
                        }
                        uint64_t v206 = v207[6];
                        if (*(_DWORD *)(v206 + 256) == 1) {
                          goto LABEL_473;
                        }
                      }
                    }
LABEL_422:
                    int v247 = 1;
                  }
LABEL_423:
                  long long v177 = (void *)*v177;
                }
                while (v177);
              }
LABEL_483:
              std::mutex::unlock(v239);
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
            }
          }
          *(void *)(v169 + 8 * v167) = 0;
          long long v173 = (void *)*v155;
LABEL_391:
          if (!v173) {
            goto LABEL_398;
          }
          goto LABEL_392;
        }
        unint64_t v77 = *(void *)(*(void *)k + 8);
        if ((v45 & (v45 - 1)) != 0)
        {
          if (v77 >= v45) {
            v77 %= v45;
          }
        }
        else
        {
          v77 &= v45 - 1;
        }
        unint64_t v76 = (unint64_t *)(*(void *)(v4 + 24) + 8 * v77);
      }
      *unint64_t v76 = k;
      goto LABEL_190;
    }
    BOOL v56 = 1;
    if (v45 >= 3) {
      BOOL v56 = (v45 & (v45 - 1)) != 0;
    }
    unint64_t v57 = v56 | (2 * v45);
    unint64_t v58 = vcvtps_u32_f32(v54 / v55);
    if (v57 <= v58) {
      int8x8_t v59 = (int8x8_t)v58;
    }
    else {
      int8x8_t v59 = (int8x8_t)v57;
    }
    if (*(void *)&v59 == 1)
    {
      int8x8_t v59 = (int8x8_t)2;
    }
    else if ((*(void *)&v59 & (*(void *)&v59 - 1)) != 0)
    {
      int8x8_t v59 = (int8x8_t)std::__next_prime(*(void *)&v59);
      unint64_t v45 = *(void *)(v4 + 32);
    }
    if (*(void *)&v59 > v45) {
      goto LABEL_132;
    }
    if (*(void *)&v59 < v45)
    {
      unint64_t v66 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 48) / *(float *)(v4 + 56));
      if (v45 < 3 || (uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        unint64_t v66 = std::__next_prime(v66);
      }
      else
      {
        uint64_t v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2) {
          unint64_t v66 = v68;
        }
      }
      if (*(void *)&v59 <= v66) {
        int8x8_t v59 = (int8x8_t)v66;
      }
      if (*(void *)&v59 >= v45)
      {
        unint64_t v45 = *(void *)(v4 + 32);
      }
      else
      {
        if (v59)
        {
LABEL_132:
          if (*(void *)&v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v60 = operator new(8 * *(void *)&v59);
          uint64_t v61 = *(void **)(v4 + 24);
          *(void *)(v4 + 24) = v60;
          if (v61) {
            operator delete(v61);
          }
          uint64_t v62 = 0;
          *(int8x8_t *)(v4 + 32) = v59;
          do
            *(void *)(*(void *)(v4 + 24) + 8 * v62++) = 0;
          while (*(void *)&v59 != v62);
          uint64_t v63 = (void *)*v53;
          if (*v53)
          {
            unint64_t v64 = v63[1];
            uint8x8_t v65 = (uint8x8_t)vcnt_s8(v59);
            v65.i16[0] = vaddlv_u8(v65);
            if (v65.u32[0] > 1uLL)
            {
              if (v64 >= *(void *)&v59) {
                v64 %= *(void *)&v59;
              }
            }
            else
            {
              v64 &= *(void *)&v59 - 1;
            }
            *(void *)(*(void *)(v4 + 24) + 8 * v64) = v53;
            uint64_t v73 = (void *)*v63;
            if (*v63)
            {
              do
              {
                unint64_t v74 = v73[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v74 >= *(void *)&v59) {
                    v74 %= *(void *)&v59;
                  }
                }
                else
                {
                  v74 &= *(void *)&v59 - 1;
                }
                if (v74 != v64)
                {
                  uint64_t v75 = *(void *)(v4 + 24);
                  if (!*(void *)(v75 + 8 * v74))
                  {
                    *(void *)(v75 + 8 * v74) = v63;
                    goto LABEL_172;
                  }
                  *uint64_t v63 = *v73;
                  *uint64_t v73 = **(void **)(*(void *)(v4 + 24) + 8 * v74);
                  **(void **)(*(void *)(v4 + 24) + 8 * v74) = v73;
                  uint64_t v73 = v63;
                }
                unint64_t v74 = v64;
LABEL_172:
                uint64_t v63 = v73;
                uint64_t v73 = (void *)*v73;
                unint64_t v64 = v74;
              }
              while (v73);
            }
          }
          unint64_t v45 = (unint64_t)v59;
          goto LABEL_176;
        }
        uint64_t v229 = *(void **)(v4 + 24);
        *(void *)(v4 + 24) = 0;
        if (v229) {
          operator delete(v229);
        }
        unint64_t v45 = 0;
        *(void *)(v4 + 32) = 0;
      }
    }
LABEL_176:
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v44 >= v45) {
        uint64_t v10 = v44 % v45;
      }
      else {
        uint64_t v10 = v44;
      }
    }
    else
    {
      uint64_t v10 = (v45 - 1) & v44;
    }
    goto LABEL_181;
  }
  if (v45)
  {
    uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      unint64_t v48 = 0x9DDFEA08EB382D69 * v43;
      if (v44 >= v45) {
        unint64_t v48 = v44 % v45;
      }
    }
    else
    {
      unint64_t v48 = (v45 - 1) & v44;
    }
    uint64_t v69 = *(void ***)(*(void *)(v4 + 24) + 8 * v48);
    if (v69)
    {
      uint64_t v70 = *v69;
      if (v70)
      {
        unint64_t v71 = v45 - 1;
        do
        {
          unint64_t v72 = v70[1];
          if (v72 == v44)
          {
            if (v70[2] == v5)
            {
              unint64_t v230 = v70[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v230 >= v45) {
                  v230 %= v45;
                }
              }
              else
              {
                v230 &= v71;
              }
              uint64_t v231 = *(void *)(v4 + 24);
              uint64_t v232 = *(void **)(v231 + 8 * v230);
              do
              {
                unint64_t v233 = v232;
                uint64_t v232 = (void *)*v232;
              }
              while (v232 != v70);
              if (v233 == (void *)(v4 + 40)) {
                goto LABEL_512;
              }
              unint64_t v234 = v233[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v234 >= v45) {
                  v234 %= v45;
                }
              }
              else
              {
                v234 &= v71;
              }
              if (v234 != v230)
              {
LABEL_512:
                if (!*v70) {
                  goto LABEL_513;
                }
                unint64_t v235 = *(void *)(*v70 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v235 >= v45) {
                    v235 %= v45;
                  }
                }
                else
                {
                  v235 &= v71;
                }
                if (v235 != v230) {
LABEL_513:
                }
                  *(void *)(v231 + 8 * v230) = 0;
              }
              uint64_t v236 = *v70;
              if (*v70)
              {
                unint64_t v237 = *(void *)(v236 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v237 >= v45) {
                    v237 %= v45;
                  }
                }
                else
                {
                  v237 &= v71;
                }
                if (v237 != v230)
                {
                  *(void *)(*(void *)(v4 + 24) + 8 * v237) = v233;
                  uint64_t v236 = *v70;
                }
              }
              *unint64_t v233 = v236;
              *uint64_t v70 = 0;
              --*(void *)(v4 + 48);
              v262.n128_u64[0] = (unint64_t)v70;
              v262.n128_u64[1] = v4 + 40;
              v263.n128_u8[0] = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v262);
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
            }
          }
          else
          {
            if (v47.u32[0] > 1uLL)
            {
              if (v72 >= v45) {
                v72 %= v45;
              }
            }
            else
            {
              v72 &= v71;
            }
            if (v72 != v48) {
              return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
            }
          }
          uint64_t v70 = (void *)*v70;
        }
        while (v70);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)__p);
}

void sub_235AB004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  operator delete(v27);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::VFXCollisionConsumer::~VFXCollisionConsumer(rf::data_flow::consumer::VFXCollisionConsumer *this)
{
  *(void *)this = &unk_26E8F4868;
  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E8F4868;
  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::__unordered_map_hasher<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::hash<REComponent *>,std::equal_to<REComponent *>,true>,std::__unordered_map_equal<REComponent *,std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,std::equal_to<REComponent *>,std::hash<REComponent *>,true>,std::allocator<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&,long long &>(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  unint64_t v5 = a4;
  unint64_t v9 = *(void *)(a2 + 24);
  if (!v9)
  {
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v27 = *(void **)a2;
    }
    else {
      unint64_t v27 = (void *)a2;
    }
    unint64_t v9 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
    *(void *)(a2 + 24) = v9;
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = (void *)*v13;
      if (*v13)
      {
        while (1)
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
            {
LABEL_19:
              unint64_t v5 = a4;
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_19;
          }
        }
      }
    }
  }
  uint8x8_t v16 = operator new(0x38uLL);
  *uint8x8_t v16 = 0;
  v16[1] = v9;
  long long v17 = a3[1];
  *((_OWORD *)v16 + 1) = *a3;
  *((_OWORD *)v16 + 2) = v17;
  v16[6] = *v5;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint8x8_t v16 = *v25;
LABEL_40:
    *char v25 = v16;
    goto LABEL_41;
  }
  *uint8x8_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    unint64_t v26 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void sub_235AB0574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      uint8x8_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t RFAnchorGetIdentifierPtr(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(v1 + 272);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unint64_t v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F48A0[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorGetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v3 = *(unsigned int *)(v2 + 272);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26E8F48D0[v3])(&v7, v2 + 16);
}

uint64_t RFAnchorSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v3 = *(unsigned int *)(v2 + 272);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26E8F4900[v3])(&v7, v2 + 16);
}

uint64_t RFAnchorGetType(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(void *)(a1 + 16) + 16);
  if (v5 == 5) {
    uint64_t v1 = 5;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v5 >= 5) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = v5;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2;
}

uint64_t RFAnchorGetARAnchor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(v1 + 272);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F4960[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorCopyDescription(uint64_t a1)
{
  v3[35] = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, *(void *)(a1 + 16) + 16);
  uint64_t DebugDescriptionForAnchor = rf::helpers::getDebugDescriptionForAnchor((uint64_t)v3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return DebugDescriptionForAnchor;
}

void sub_235AB0A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RFAnchorGetTrackable(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(void *)(a1 + 16) + 16);
  char v1 = v5;
  BOOL v2 = v5 < 6;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
  return v2 & (0x34u >> v1);
}

uint64_t RFAnchorGetTracked(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(v1 + 272);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned int v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F4990[v2])(&v5, v1 + 16);
}

uint64_t RFAnchorSetTracked(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v5 = a2;
  uint64_t v3 = *(unsigned int *)(v2 + 272);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t))off_26E8F49C0[v3])(&v6, v2 + 16);
}

__n128 RFAnchorGetTransform(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6, *(void *)(a1 + 16) + 16);
  if (v7 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v5 = &v4;
  *(double *)&long long v1 = ((double (*)(char **, unsigned char *))off_26E8F49F0[v7])(&v5, v6);
  long long v3 = v1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
  return (__n128)v3;
}

void sub_235AB0C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t RFAnchorSetTransform(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  v8[0] = a2;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  v8[3] = a5;
  uint64_t v6 = *(unsigned int *)(v5 + 272);
  if (v6 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v9 = v8;
  return ((uint64_t (*)(_OWORD **, uint64_t))off_26E8F4A20[v6])(&v9, v5 + 16);
}

uint64_t RFAnchorGetAlignment(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 1)
  {
    int v3 = *(_DWORD *)(v1 + 224);
    if (v3 == 1) {
      LOBYTE(v2) = 2;
    }
    if (v3 == 2) {
      return -1;
    }
    else {
      return v2;
    }
  }
  else
  {
    return -1;
  }
}

void RFAnchorSetAlignment(rf *a1, int a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    switch(a2)
    {
      case 255:
        int v3 = rf::realityFusionLogObject(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)char v4 = 0;
          _os_log_error_impl(&dword_235A7C000, v3, OS_LOG_TYPE_ERROR, "RFAnchorSetAlignment: Setting the classification with kREAnchoringAlignmentAny", v4, 2u);
        }

        break;
      case 2:
        *(_DWORD *)(v2 + 224) = 1;
        break;
      case 1:
        *(_DWORD *)(v2 + 224) = 0;
        break;
    }
  }
}

uint64_t RFAnchorGetClassification(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v3, *(void *)(a1 + 16) + 16);
  if (v5 == 1 && (v4 - 1) <= 4) {
    uint64_t v1 = qword_235AF8FC8[v4 - 1];
  }
  else {
    uint64_t v1 = -1;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return v1;
}

void RFAnchorSetClassification(rf *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    switch(a2)
    {
      case -1:
        int v3 = rf::realityFusionLogObject(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v5 = 0;
          _os_log_error_impl(&dword_235A7C000, v3, OS_LOG_TYPE_ERROR, "RFAnchorSetClassification: Setting the classification with kREAnchoringClassificationAny", v5, 2u);
        }

        return;
      case 0:
      case 3:
      case 5:
      case 6:
      case 7:
        return;
      case 1:
        int v4 = 1;
        goto LABEL_12;
      case 2:
        int v4 = 2;
        goto LABEL_12;
      case 4:
        int v4 = 3;
        goto LABEL_12;
      case 8:
        int v4 = 4;
        goto LABEL_12;
      default:
        if (a2 != 16) {
          return;
        }
        int v4 = 5;
LABEL_12:
        *(_DWORD *)(v2 + 22std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v4;
        break;
    }
  }
}

__n128 RFAnchorGetCenter(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 16);
  result.n128_u64[0] = 0;
  if (v1[17].n128_u32[0] == 1) {
    return v1[12];
  }
  return result;
}

__n128 RFAnchorSetCenter(uint64_t a1, __n128 result)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 + 272) == 1)
  {
    result.n128_u32[3] = 1.0;
    *(_OWORD *)(v2 + 144) = xmmword_235AF75E0;
    *(_OWORD *)(v2 + 160) = xmmword_235AF75F0;
    *(_OWORD *)(v2 + 176) = xmmword_235AF7600;
    *(__n128 *)(v2 + 192) = result;
  }
  return result;
}

__n128 RFAnchorGetExtent(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 16);
  result.n128_u64[0] = 0;
  if (v1[17].n128_u32[0] == 1) {
    return v1[13];
  }
  return result;
}

uint64_t RFAnchorSetExtent(uint64_t result, __n128 a2)
{
  uint64_t v2 = *(__n128 **)(result + 16);
  if (v2[17].n128_u32[0] == 1) {
    v2[13] = a2;
  }
  return result;
}

uint64_t RFAnchorGetBoundaryPoints()
{
  return 0;
}

CFStringRef RFAnchorCopyReferenceName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 3)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v4 = (const char *)(v1 + 144);
    if (*(char *)(v1 + 167) < 0) {
LABEL_6:
    }
      int v4 = *(const char **)v4;
  }
  else
  {
    if (v2 != 2)
    {
      int v4 = "";
      CFAllocatorRef v3 = 0;
      return CFStringCreateWithCString(v3, v4, 0x8000100u);
    }
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v4 = (const char *)(v1 + 152);
    if (*(char *)(v1 + 175) < 0) {
      goto LABEL_6;
    }
  }
  return CFStringCreateWithCString(v3, v4, 0x8000100u);
}

void RFAnchorSetReferenceName(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  int v3 = *(_DWORD *)(v2 + 272);
  if (v3 == 3)
  {
    int v4 = (std::string *)(v2 + 144);
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_6;
    }
    int v4 = (std::string *)(v2 + 152);
  }
  std::string::operator=(v4, &__str);
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_235AB107C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RFAnchorCopyReferenceGroup(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(_DWORD *)(v1 + 272);
  if (v2 == 3)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v4 = (const char *)(v1 + 168);
    if (*(char *)(v1 + 191) < 0) {
LABEL_6:
    }
      int v4 = *(const char **)v4;
  }
  else
  {
    if (v2 != 2)
    {
      int v4 = "";
      CFAllocatorRef v3 = 0;
      return CFStringCreateWithCString(v3, v4, 0x8000100u);
    }
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v4 = (const char *)(v1 + 176);
    if (*(char *)(v1 + 199) < 0) {
      goto LABEL_6;
    }
  }
  return CFStringCreateWithCString(v3, v4, 0x8000100u);
}

void RFAnchorSetReferenceGroup(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  applesauce::CF::details::CFString_get_value<true>(a2, (uint64_t)&__str);
  int v3 = *(_DWORD *)(v2 + 272);
  if (v3 == 3)
  {
    int v4 = (std::string *)(v2 + 168);
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_6;
    }
    int v4 = (std::string *)(v2 + 176);
  }
  std::string::operator=(v4, &__str);
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_235AB1170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RFAnchorCreateCustom(_OWORD *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  LOBYTE(v19) = 0;
  *((void *)&v19 + 1) = 0;
  uuid_clear(uu);
  __n128 v20 = a2;
  __n128 v21 = a3;
  __n128 v22 = a4;
  *(__n128 *)size_t v23 = a5;
  *(void *)&v23[16] = 16842752;
  v23[24] = 0;
  id v24 = 0;
  LOBYTE(v11) = 0;
  *((void *)&v11 + 1) = 0;
  uuid_clear(v10);
  *(_OWORD *)uuid_t uu = *a1;
  long long v19 = v11;
  __n128 v14 = v22;
  v15[0] = *(_OWORD *)v23;
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)&v23[9];
  *(_OWORD *)uuid_t v10 = *(_OWORD *)uu;
  __n128 v12 = v20;
  __n128 v13 = v21;
  id v16 = v24;
  int v17 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB1298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);

  _Unwind_Resume(a1);
}

void RFAnchorCreatePlane(uint64_t a1, __n128 a2, float32x4_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  char v21 = 0;
  uint64_t v22 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  __n128 v23 = a2;
  float32x4_t v24 = a3;
  __n128 v25 = a4;
  __n128 v26 = a5;
  int v27 = 16842752;
  int v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  long long v31 = xmmword_235AF75E0;
  long long v32 = xmmword_235AF75F0;
  __n128 v8 = a6;
  v8.n128_u32[3] = 1.0;
  long long v33 = xmmword_235AF7600;
  __n128 v34 = v8;
  __n128 v35 = a7;
  int v9 = 1;
  switch(a1)
  {
    case 1:
      goto LABEL_8;
    case 2:
      int v9 = 2;
      goto LABEL_8;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      int v9 = 3;
      goto LABEL_8;
    case 8:
      int v9 = 4;
      goto LABEL_8;
    default:
      if (a1 == 16) {
        int v9 = 5;
      }
      else {
LABEL_5:
      }
        int v9 = 0;
LABEL_8:
      uint64_t v40 = 0;
      float32x4_t v10 = vmulq_f32(a3, (float32x4_t)xmmword_235AF75F0);
      std::string __p = 0;
      uint64_t v39 = 0;
      v10.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
      BOOL v11 = v10.f32[0] <= 0.70711;
      if (v10.f32[0] < -0.70711) {
        BOOL v11 = 0;
      }
      int v37 = v9;
      BOOL v36 = v11;
      std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>((uint64_t)v18, (long long *)uu);
      int v19 = 1;
      rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
  }
}

void sub_235AB1498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void RFAnchorCreateImage(char *a1, char *a2, char a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  char v17 = 0;
  uint64_t v18 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  __n128 v19 = a4;
  __n128 v20 = a5;
  __n128 v21 = a6;
  __n128 v22 = a7;
  __int16 v23 = 0;
  char v24 = 1;
  char v25 = a3;
  int v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  long long v32 = 0u;
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>((uint64_t)v14, (long long *)uu);
  int v15 = 2;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

void RFAnchorCreateObject(char *a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  char v15 = 0;
  uint64_t v16 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  __n128 v17 = a3;
  __n128 v18 = a4;
  __n128 v19 = a5;
  __n128 v20 = a6;
  int v21 = 16842752;
  int v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v25, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  v27[16] = 0;
  uint64_t v28 = 0;
  uuid_clear(v27);
  long long v29 = 0u;
  long long v30 = 0u;
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>((uint64_t)v12, (long long *)uu);
  int v13 = 3;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB17BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

void RFAnchorCreateCamera(rf::helpers *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v5 = rf::helpers::kCameraIdentifier(a1);
  long long v6 = v5[1];
  long long v22 = *v5;
  long long v23 = v6;
  long long v11 = v22;
  long long v12 = v6;
  __n128 v13 = a2;
  __n128 v14 = a3;
  __n128 v15 = a4;
  __n128 v16 = a5;
  int v17 = 16842752;
  int v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB18DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void RFAnchorCreateBody(rf::helpers *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v5 = rf::helpers::kBodyIdentifier(a1);
  long long v6 = v5[1];
  long long v22 = *v5;
  long long v23 = v6;
  long long v11 = v22;
  long long v12 = v6;
  __n128 v13 = a2;
  __n128 v14 = a3;
  __n128 v15 = a4;
  __n128 v16 = a5;
  int v17 = 16842752;
  int v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB19A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void RFAnchorCreate(_OWORD *a1, uint64_t a2, uint64_t a3, __n128 a4, float32x4_t a5, __n128 a6, __n128 a7)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)uuid_t uu = 0u;
  long long v15 = 0u;
  uuid_clear(uu);
  long long v16 = xmmword_235AF75E0;
  long long v17 = xmmword_235AF75F0;
  long long v18 = xmmword_235AF7600;
  long long v19 = xmmword_235AF7AA0;
  *(void *)&long long v20 = 16842752;
  BYTE8(v20) = 0;
  *(void *)&long long v21 = 0;
  int v22 = 0;
  rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
}

void sub_235AB1AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::createAnchor(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, __n128 a5, float32x4_t a6, __n128 a7, __n128 a8)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  LOBYTE(v54) = 0;
  *((void *)&v54 + 1) = 0;
  uuid_clear(uu);
  *(_OWORD *)uuid_t uu = *a2;
  switch(a3)
  {
    case 0:
      long long v55 = *(_OWORD *)uu;
      long long v56 = v54;
      __n128 v57 = a5;
      float32x4_t v58 = a6;
      __n128 v59 = a7;
      *(__n128 *)unint64_t v60 = a8;
      *(_DWORD *)&v60[16] = 16842752;
      *(_DWORD *)&v60[20] = 0;
      v60[24] = 0;
      id v61 = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>(a1, a1, (uint64_t)&v55);

      return;
    case 1:
      long long v41 = *(_OWORD *)uu;
      long long v42 = v54;
      __n128 v43 = a5;
      float32x4_t v44 = a6;
      __n128 v45 = a7;
      *(__n128 *)uint8x8_t v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obuint64_t j = 0;
      *(_OWORD *)unint64_t v48 = xmmword_235AF75E0;
      *(_OWORD *)&v48[16] = xmmword_235AF75F0;
      long long v12 = v35;
      HIDWORD(vstd::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1.0;
      *(_OWORD *)&v48[32] = xmmword_235AF7600;
      long long v49 = v12;
      long long v50 = v36;
      int v13 = 1;
      switch(a4)
      {
        case 1:
          break;
        case 2:
          int v13 = 2;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_25;
        case 4:
          int v13 = 3;
          break;
        case 8:
          int v13 = 4;
          break;
        default:
          if (a4 == 16) {
            int v13 = 5;
          }
          else {
LABEL_25:
          }
            int v13 = 0;
          break;
      }
      long long v52 = 0uLL;
      v51[1] = 0;
      float32x4_t v28 = vmulq_f32(a6, (float32x4_t)xmmword_235AF75F0);
      v28.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
      BOOL v29 = v28.f32[0] <= 0.70711;
      if (v28.f32[0] < -0.70711) {
        BOOL v29 = 0;
      }
      v51[0] = (void *)__PAIR64__(v13, v29);
      if (*(_DWORD *)(a1 + 256) == 1)
      {
        long long v30 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v30;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        long long v31 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v31;
        float32x4_t v32 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v32;
        objc_storeStrong((id *)(a1 + 112), 0);
        long long v33 = v49;
        *(_OWORD *)(a1 + 160) = *(_OWORD *)&v48[32];
        *(_OWORD *)(a1 + 176) = v33;
        *(_OWORD *)(a1 + 192) = v50;
        *(void **)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v51[0];
        long long v34 = *(_OWORD *)&v48[16];
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *(_OWORD *)v48;
        *(_OWORD *)(a1 + 144) = v34;
        if (&v41 != (long long *)a1) {
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)(a1 + 216), (char *)v51[1], v52, (uint64_t)(v52 - (unint64_t)v51[1]) >> 4);
        }
      }
      else
      {
        __n128 v59 = v45;
        *(_OWORD *)unint64_t v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        long long v55 = v41;
        long long v56 = v42;
        __n128 v57 = v43;
        float32x4_t v58 = v44;
        id v61 = 0;
        *(_OWORD *)&v62[32] = *(_OWORD *)&v48[32];
        long long v63 = v49;
        long long v64 = v50;
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v48;
        *(_OWORD *)&v62[16] = *(_OWORD *)&v48[16];
        v65[0] = v51[0];
        v65[1] = 0;
        long long v66 = 0uLL;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v65[1], v51[1], v52, (uint64_t)(v52 - (unint64_t)v51[1]) >> 4);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor>(a1, &v55);
        if (v65[1])
        {
          *(void **)&long long v66 = v65[1];
          operator delete(v65[1]);
        }
      }
      if (v51[1])
      {
        *(void **)&long long v52 = v51[1];
        operator delete(v51[1]);
      }

      return;
    case 2:
      long long v41 = *(_OWORD *)uu;
      long long v42 = v54;
      __n128 v43 = a5;
      float32x4_t v44 = a6;
      __n128 v45 = a7;
      *(__n128 *)uint8x8_t v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obuint64_t j = 0;
      v48[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v48[8], "");
      std::string::basic_string[abi:ne180100]<0>(&v48[32], "");
      long long v50 = 0u;
      if (*(_DWORD *)(a1 + 256) == 2)
      {
        long long v14 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v14;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        long long v15 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v15;
        float32x4_t v16 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v16;
        objc_storeStrong((id *)(a1 + 112), obj);
        *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v48[0];
        std::string::operator=((std::string *)(a1 + 136), (const std::string *)&v48[8]);
        std::string::operator=((std::string *)(a1 + 160), (const std::string *)&v48[32]);
        *(_OWORD *)(a1 + 192) = v50;
      }
      else
      {
        __n128 v59 = v45;
        *(_OWORD *)unint64_t v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        long long v55 = v41;
        long long v56 = v42;
        __n128 v57 = v43;
        float32x4_t v58 = v44;
        id v61 = obj;
        v62[0] = v48[0];
        if ((v48[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[8], *(const std::string::value_type **)&v48[8], *(std::string::size_type *)&v48[16]);
        }
        else
        {
          *(_OWORD *)&v62[8] = *(_OWORD *)&v48[8];
          *(void *)&v62[24] = *(void *)&v48[24];
        }
        if (SBYTE7(v49) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[32], *(const std::string::value_type **)&v48[32], *(std::string::size_type *)&v48[40]);
        }
        else
        {
          *(_OWORD *)&v62[32] = *(_OWORD *)&v48[32];
          *(void *)&long long v63 = v49;
        }
        long long v64 = v50;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<2ul,rf::data_flow::ImageAnchor>(a1, &v55);
        if (SBYTE7(v63) < 0) {
          operator delete(*(void **)&v62[32]);
        }
        if ((v62[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v62[8]);
        }
      }
      if (SBYTE7(v49) < 0) {
        operator delete(*(void **)&v48[32]);
      }
      if ((v48[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v48[8]);
      }

      return;
    case 3:
      long long v41 = *(_OWORD *)uu;
      long long v42 = v54;
      __n128 v43 = a5;
      float32x4_t v44 = a6;
      __n128 v45 = a7;
      *(__n128 *)uint8x8_t v46 = a8;
      *(_DWORD *)&v46[16] = 16842752;
      *(_DWORD *)&v46[20] = 0;
      v46[24] = 0;
      obuint64_t j = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      std::string::basic_string[abi:ne180100]<0>(&v48[24], "");
      LOBYTE(v50) = 0;
      *((void *)&v50 + 1) = 0;
      uuid_clear((unsigned __int8 *)&v49);
      *(_OWORD *)unint64_t v51 = 0u;
      long long v52 = 0u;
      if (*(_DWORD *)(a1 + 256) == 3)
      {
        long long v17 = *(_OWORD *)v46;
        *(__n128 *)(a1 + 64) = v45;
        *(_OWORD *)(a1 + 80) = v17;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v46[9];
        long long v18 = v42;
        *(_OWORD *)a1 = v41;
        *(_OWORD *)(a1 + 16) = v18;
        float32x4_t v19 = v44;
        *(__n128 *)(a1 + 32) = v43;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v19;
        objc_storeStrong((id *)(a1 + 112), obj);
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)v48);
        std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v48[24]);
        long long v20 = v50;
        *(_OWORD *)(a1 + 176) = v49;
        *(_OWORD *)(a1 + 192) = v20;
        long long v21 = v52;
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = *(_OWORD *)v51;
        *(_OWORD *)(a1 + 224) = v21;
      }
      else
      {
        __n128 v59 = v45;
        *(_OWORD *)unint64_t v60 = *(_OWORD *)v46;
        *(_OWORD *)&v60[9] = *(_OWORD *)&v46[9];
        long long v55 = v41;
        long long v56 = v42;
        __n128 v57 = v43;
        float32x4_t v58 = v44;
        id v61 = obj;
        if ((v48[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v62, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
        }
        else
        {
          *(_OWORD *)uint64_t v62 = *(_OWORD *)v48;
          *(void *)&v62[16] = *(void *)&v48[16];
        }
        if ((v48[47] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v62[24], *(const std::string::value_type **)&v48[24], *(std::string::size_type *)&v48[32]);
        }
        else
        {
          *(_OWORD *)&v62[24] = *(_OWORD *)&v48[24];
          *(void *)&v62[40] = *(void *)&v48[40];
        }
        long long v63 = v49;
        long long v64 = v50;
        *(_OWORD *)uint8x8_t v65 = *(_OWORD *)v51;
        long long v66 = v52;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__emplace[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor>(a1, &v55);
        if ((v62[47] & 0x80000000) != 0) {
          operator delete(*(void **)&v62[24]);
        }
        if ((v62[23] & 0x80000000) != 0) {
          operator delete(*(void **)v62);
        }
      }
      if ((v48[47] & 0x80000000) != 0) {
        operator delete(*(void **)&v48[24]);
      }
      if ((v48[23] & 0x80000000) != 0) {
        operator delete(*(void **)v48);
      }

      return;
    case 4:
      long long v55 = *(_OWORD *)uu;
      long long v56 = v54;
      uint64_t v22 = *(unsigned int *)(a1 + 256);
      if (v22 == -1) {
        goto LABEL_20;
      }
      if (v22 == 4)
      {
        long long v23 = v54;
        *(_OWORD *)a1 = *(_OWORD *)uu;
        *(_OWORD *)(a1 + 16) = v23;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(void *)(a1 + 96) = 16842752;
        *(unsigned char *)(a1 + 104) = 0;
        objc_storeStrong((id *)(a1 + 112), 0);
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 176) = 0u;
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
      else
      {
        ((void (*)(long long *, uint64_t))off_26E8F4930[v22])(&v41, a1);
LABEL_20:
        *(_DWORD *)(a1 + 256) = -1;
        long long v26 = v56;
        *(_OWORD *)a1 = v55;
        *(_OWORD *)(a1 + 16) = v26;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(void *)(a1 + 96) = 16842752;
        *(unsigned char *)(a1 + 104) = 0;
        *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 176) = 0u;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0u;
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_DWORD *)(a1 + 256) = 4;
      }
      break;
    case 5:
      long long v55 = *(_OWORD *)uu;
      long long v56 = v54;
      uint64_t v24 = *(unsigned int *)(a1 + 256);
      if (v24 == -1) {
        goto LABEL_22;
      }
      if (v24 == 5)
      {
        long long v25 = v54;
        *(_OWORD *)a1 = *(_OWORD *)uu;
        *(_OWORD *)(a1 + 16) = v25;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(void *)(a1 + 96) = 16842752;
        *(unsigned char *)(a1 + 104) = 0;
        objc_storeStrong((id *)(a1 + 112), 0);
        *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 1065353216;
      }
      else
      {
        ((void (*)(long long *, uint64_t))off_26E8F4930[v24])(&v41, a1);
LABEL_22:
        *(_DWORD *)(a1 + 256) = -1;
        long long v27 = v56;
        *(_OWORD *)a1 = v55;
        *(_OWORD *)(a1 + 16) = v27;
        *(__n128 *)(a1 + 32) = a5;
        *(float32x4_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a6;
        *(__n128 *)(a1 + 64) = a7;
        *(__n128 *)(a1 + 80) = a8;
        *(void *)(a1 + 96) = 16842752;
        *(unsigned char *)(a1 + 104) = 0;
        *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
        *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 1065353216;
        *(_DWORD *)(a1 + 256) = 5;
      }
      break;
    default:
      return;
  }
}

void sub_235AB2388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }

  rf::data_flow::ObjectAnchor::~ObjectAnchor(&a21);
  _Unwind_Resume(a1);
}

void RFAnchorUpdate(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  v25[0] = a4;
  v25[1] = a5;
  void v25[2] = a6;
  void v25[3] = a7;
  uint64_t v11 = *(void *)(a1 + 16);
  switch(a2)
  {
    case 0:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 1:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 1) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 2:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 2) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 3) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 4:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 4) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 5:
      int v12 = *(_DWORD *)(v11 + 272);
      if (v12 == 5)
      {
LABEL_10:
        uint64_t v24 = v25;
LABEL_11:
        v26[0] = &v24;
        ((void (*)(void *, uint64_t))off_26E8F4A50[v12])(v26, v11 + 16);
        if (a2 == 1)
        {
          if (*(_DWORD *)(v11 + 272) != 1) {
LABEL_32:
          }
            std::__throw_bad_variant_access[abi:ne180100]();
          __n128 v14 = a8;
          v14.n128_u32[3] = 1.0;
          *(_OWORD *)(v11 + 144) = xmmword_235AF75E0;
          *(_OWORD *)(v11 + 160) = xmmword_235AF75F0;
          *(_OWORD *)(v11 + 176) = xmmword_235AF7600;
          *(__n128 *)(v11 + 192) = v14;
          *(__n128 *)(v11 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = a9;
          int v15 = 1;
          switch(a3)
          {
            case 1:
              break;
            case 2:
              int v15 = 2;
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_25;
            case 4:
              int v15 = 3;
              break;
            case 8:
              int v15 = 4;
              break;
            default:
              if (a3 == 16) {
                int v15 = 5;
              }
              else {
LABEL_25:
              }
                int v15 = 0;
              break;
          }
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v11 + 64), (float32x4_t)xmmword_235AF75F0);
          v16.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
          BOOL v17 = v16.f32[0] <= 0.70711;
          if (v16.f32[0] < -0.70711) {
            BOOL v17 = 0;
          }
          *(_DWORD *)(v11 + 224) = v17;
          *(_DWORD *)(v11 + 22std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v15;
        }
      }
      else
      {
LABEL_3:
        rf::helpers::getRFUUIDFromAnchor(v11 + 16, (uint64_t)v26);
        if (v27) {
          int v13 = (_OWORD *)v26[0];
        }
        else {
          int v13 = v26;
        }
      }
      return;
    default:
      int v12 = *(_DWORD *)(v11 + 272);
      uint64_t v24 = v25;
      if (v12 == -1) {
        goto LABEL_32;
      }
      goto LABEL_11;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

unsigned char *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifierPtr::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, unsigned char *a2)
{
  if (a2[16]) {
    return *(unsigned char **)a2;
  }
  else {
    return a2;
  }
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(__n128 ****a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v2 = *(__n128 **)a2;
  }
  else {
    uint64_t v2 = (__n128 *)a2;
  }
  __n128 result = *v2;
  ****a1 = *v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetIdentifier::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(long long ****a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = ***a1;
  v6.n128_u8[0] = 0;
  v6.n128_u64[1] = 0;
  uuid_clear((unsigned __int8 *)&v5);
  long long v5 = *v3;
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetARAnchor::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

unsigned char **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTracked::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(unsigned char **result, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = **result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorGetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t a1, __n128 *a2)
{
  return a2[2];
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorSetTransform::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(__n128 **a1, __n128 *a2)
{
  __n128 result = **a1;
  __n128 v3 = (*a1)[1];
  __n128 v4 = (*a1)[2];
  __n128 v5 = (*a1)[3];
  a2[2] = result;
  a2[3] = v3;
  a2[4] = v4;
  a2[5] = v5;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v6;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a2 + 14);
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[12];
  uint64_t v12 = *((void *)a2 + 26);
  long long v13 = a2[8];
  long long v14 = a2[9];
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v13;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v12;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((void *)(a1 + 216), *((const void **)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 4);
  return a1;
}

void sub_235AB2EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v6;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a2 + 14);
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *((unsigned char *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v9;
  }
  long long v10 = (std::string *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v11 = a2[10];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  return a1;
}

void sub_235AB2F88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v2);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v6;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *((id *)a2 + 14);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v9;
  }
  long long v10 = (std::string *)(a1 + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 152);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = *((void *)a2 + 21);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = a2[11];
  long long v13 = a2[12];
  long long v14 = a2[14];
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_235AB3084(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v2);
  }

  _Unwind_Resume(a1);
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<RFAnchorUpdate::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::PlaneAnchor,rf::ImageAnchor,rf::ObjectAnchor,rf::FaceAnchor,rf::BodyAnchor> &>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v2 = **a1;
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  a2[2] = *(_OWORD *)v2;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  return result;
}

void *rf::data_flow::provider::ARKitDataProvider::ARKitDataProvider(void *a1, id *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E8F4A90;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = *a2;
  a1[6] = 0;
  __n128 v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  long long v4 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v5 = dispatch_queue_create("RFARServiceDelegate", v4);
  long long v6 = (void *)a1[4];
  a1[4] = v5;

  dispatch_group_t v7 = dispatch_group_create();
  long long v8 = (void *)a1[3];
  a1[3] = v7;

  return a1;
}

void rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider(rf::data_flow::provider::ARKitDataProvider *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    __n128 v3 = (void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
  }
  long long v4 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;

  [*((id *)this + 5) pause];
  [*((id *)this + 5) _removeObserver:*((void *)this + 6)];
  dispatch_queue_t v5 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;

  long long v6 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  rf::data_flow::provider::ARKitDataProvider::~ARKitDataProvider(this);
  JUMPOUT(0x237DEE2B0);
}

void rf::data_flow::provider::ARKitDataProvider::setARSession(rf::data_flow::provider::ARKitDataProvider *this, ARSession *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v4 = a2;
  dispatch_queue_t v5 = (id *)((char *)this + 40);
  if (*((ARSession **)this + 5) != v4)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    uint64_t v42 = 0;
    uint64_t v44 = 0;
    uint64_t v43 = 0;
    char v50 = 0;
    int v51 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v17 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    char v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    char v52 = 1;
    char v53 = 0;
    char v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    char v58 = 0;
    __int16 v59 = 0;
    char v60 = 0;
    char v61 = 0;
    char v62 = 0;
    char v63 = 0;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    uint64_t v6 = *((void *)this + 1);
    if (v6) {
      rf::Session::consumeInputFromProvider(v6, (uint64_t)&v7);
    }
    rf::data_flow::provider::InputData::~InputData((void **)&v7);
    if (*v5) {
      objc_msgSend(*v5, "_removeObserver:", *((void *)this + 6), v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
    }
    objc_storeStrong((id *)this + 5, a2);
    [*((id *)this + 5) _addObserver:*((void *)this + 6)];
  }
}

void sub_235AB3460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  rf::data_flow::provider::InputData::~InputData(&a9);

  _Unwind_Resume(a1);
}

void *rf::data_flow::provider::ARKitDataProvider::setSession(uint64_t a1, uint64_t a2)
{
  _OWORD v7[4] = *MEMORY[0x263EF8340];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
  __n128 v3 = *(void **)(a1 + 48);
  if (!v3)
  {
    long long v4 = objc_alloc_init(RFARSessionObserver);
    dispatch_queue_t v5 = *(void **)(a1 + 48);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;

    [*(id *)(a1 + 48) setDispatchGroup:*(void *)(a1 + 24)];
    [*(id *)(a1 + 48) setBackgroundComputeQueue:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) _addObserver:*(void *)(a1 + 48)];
    __n128 v3 = *(void **)(a1 + 48);
  }
  v7[0] = &unk_26E8F4AD0;
  v7[1] = a1;
  void v7[3] = v7;
  [v3 setCallback:v7];
  return std::__function::__value_func<void ()(rf::data_flow::provider::InputData &&)>::~__value_func[abi:ne180100](v7);
}

void sub_235AB3558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(rf::data_flow::provider::InputData &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::provider::ARKitDataProvider::update(id *this, double a2)
{
  return [this[6] updateSession:this[5] withTime:a2];
}

void std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::~__func()
{
}

void *std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E8F4AD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F4AD0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v2) {
    rf::Session::consumeInputFromProvider(v2, a2);
  }
}

uint64_t std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0,std::allocator<rf::data_flow::provider::ARKitDataProvider::setSession(rf::Session *)::$_0>,void ()(rf::data_flow::provider::InputData &&)>::target_type()
{
}

void *std::__function::__value_func<void ()(rf::data_flow::provider::InputData &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

long long *rf::helpers::kCameraIdentifier(rf::helpers *this)
{
  {
    byte_26882F120 = 0;
    qword_26882F128 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier);
  }
  if (rf::helpers::kCameraIdentifier(void)::once != -1) {
    dispatch_once(&rf::helpers::kCameraIdentifier(void)::once, &__block_literal_global_4);
  }
  return &rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier;
}

void sub_235AB3778(_Unwind_Exception *a1)
{
}

double ___ZN2rf7helpers17kCameraIdentifierEv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  LOBYTE(v2) = 0;
  *((void *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = 1;
  double result = *(double *)&v2;
  rf::helpers::kCameraIdentifier(void)::_kCameraCFStringRef Identifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_26882F120 = v2;
  return result;
}

long long *rf::helpers::kBodyIdentifier(rf::helpers *this)
{
  {
    byte_26882F150 = 0;
    qword_26882F158 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kBodyIdentifier(void)::_kBodyIdentifier);
  }
  if (rf::helpers::kBodyIdentifier(void)::once != -1) {
    dispatch_once(&rf::helpers::kBodyIdentifier(void)::once, &__block_literal_global_2);
  }
  return &rf::helpers::kBodyIdentifier(void)::_kBodyIdentifier;
}

void sub_235AB3894(_Unwind_Exception *a1)
{
}

double ___ZN2rf7helpers15kBodyIdentifierEv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  LOBYTE(v2) = 0;
  *((void *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = 2;
  double result = *(double *)&v2;
  rf::helpers::kBodyIdentifier(void)::_kBodyCFStringRef Identifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_26882F150 = v2;
  return result;
}

long long *rf::helpers::kHeadIdentifier(rf::helpers *this)
{
  {
    byte_26882F180 = 0;
    qword_26882F188 = 0;
    uuid_clear((unsigned __int8 *)&rf::helpers::kHeadIdentifier(void)::_kHeadIdentifier);
  }
  if (rf::helpers::kHeadIdentifier(void)::once != -1) {
    dispatch_once(&rf::helpers::kHeadIdentifier(void)::once, &__block_literal_global_4);
  }
  return &rf::helpers::kHeadIdentifier(void)::_kHeadIdentifier;
}

void sub_235AB39B0(_Unwind_Exception *a1)
{
}

double ___ZN2rf7helpers15kHeadIdentifierEv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  LOBYTE(v2) = 0;
  *((void *)&v2 + 1) = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = 1;
  double result = *(double *)&v2;
  rf::helpers::kHeadIdentifier(void)::_kHeadCFStringRef Identifier = *(_OWORD *)uu;
  *(_OWORD *)&byte_26882F180 = v2;
  return result;
}

void *rf::helpers::getMutableCameraAnchor(rf::helpers *a1)
{
  rf::helpers::kCameraIdentifier(a1);
  long long v4 = &rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier;
  long long v2 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)a1, (uint64_t)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier, (uint64_t)&std::piecewise_construct, &v4);
  if (*((_DWORD *)v2 + 76)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return v2 + 6;
}

void *rf::helpers::getCameraAnchor(rf::helpers *a1)
{
  rf::helpers::kCameraIdentifier(a1);
  long long v2 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(a1, (uint64_t)&rf::helpers::kCameraIdentifier(void)::_kCameraIdentifier);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (*((_DWORD *)v2 + 76)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return v2 + 6;
}

uint64_t rf::helpers::getBaseAnchorProperties(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers23getBaseAnchorPropertiesERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

uint64_t rf::helpers::getRFUUIDFromAnchor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  uint64_t v6 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v7 = &v6;
  return ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers19getRFUUIDFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v7, a1);
}

void *rf::helpers::getDebugDescriptionForClassification@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, *((char **)&off_264C682A8 + *a1));
}

void rf::helpers::getDebugDescriptionForAnchorType(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a1 + 256))
  {
    case 1:
      id v7 = *(id *)(a1 + 112);
      dispatch_queue_t v5 = *(const void **)(a1 + 216);
      uint64_t v8 = *(void *)(a1 + 208);
      std::string __p = 0;
      uint64_t v6 = *(void *)(a1 + 224);
      long long v10 = 0;
      uint64_t v11 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, v5, v6, (v6 - (uint64_t)v5) >> 4);
      if (HIDWORD(v8) < 8) {
        std::string::basic_string[abi:ne180100]<0>(a2, off_264C682E8[SHIDWORD(v8)]);
      }
      if (__p)
      {
        long long v10 = __p;
        operator delete(__p);
      }

      return;
    case 2:
      char v3 = "Image";
      goto LABEL_12;
    case 3:
      char v3 = "Object";
      goto LABEL_12;
    case 4:
      char v3 = "Face";
      goto LABEL_12;
    case 5:
      char v3 = "Body";
      goto LABEL_12;
    default:
      char v3 = "Custom";
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(a2, v3);
      return;
  }
}

void sub_235AB3DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

uint64_t rf::helpers::getDebugDescriptionForAnchor(uint64_t a1)
{
  v24[4] = *MEMORY[0x263EF8340];
  rf::helpers::getDebugDescriptionForAnchorType(a1, &__p);
  if ((v20 & 0x80u) == 0) {
    p_p = (const UInt8 *)&__p;
  }
  else {
    p_p = (const UInt8 *)__p;
  }
  if (p_p)
  {
    if ((v20 & 0x80u) == 0) {
      CFIndex v3 = v20;
    }
    else {
      CFIndex v3 = v19;
    }
    CFStringRef v4 = CFStringCreateWithBytes(0, p_p, v3, 0x8000100u, 0);
    CFStringRef v23 = v4;
    if (!v4)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if ((v20 & 0x80) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    CFStringRef v4 = 0;
    CFStringRef v23 = 0;
    if ((v20 & 0x80) != 0) {
LABEL_10:
    }
      operator delete(__p);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v5 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  std::string __p = &v17;
  ((void (*)(void *__return_ptr, void **, uint64_t))off_26E8F4C10[v5])(v24, &__p, a1);
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v24, &__p);
  if ((v20 & 0x80u) == 0) {
    uint64_t v6 = (const UInt8 *)&__p;
  }
  else {
    uint64_t v6 = (const UInt8 *)__p;
  }
  if (v6)
  {
    if ((v20 & 0x80u) == 0) {
      CFIndex v7 = v20;
    }
    else {
      CFIndex v7 = v19;
    }
    CFStringRef v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
    CFStringRef v22 = v8;
    if (!v8)
    {
      long long v14 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](v14, "Could not construct");
      __cxa_throw(v14, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if ((v20 & 0x80) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    CFStringRef v8 = 0;
    CFStringRef v22 = 0;
    if ((v20 & 0x80) != 0) {
LABEL_21:
    }
      operator delete(__p);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 256);
  if (v9 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(void *)&long long v17 = &v16;
  ((void (*)(void **__return_ptr, long long *, uint64_t))off_26E8F4C40[v9])(&__p, &v17, a1);
  *(_OWORD *)long long v15 = v21;
  long long v17 = 0u;
  CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"<translation=(%f %f %f) rotation=(%0.2f° %0.2f° %0.2f°)>", v15[0], v15[1], v15[2], (float)((float)(*(float *)&v17 * 180.0) * 0.31831), (float)((float)(*((float *)&v17 + 1) * 180.0) * 0.31831), (float)((float)(*((float *)&v17 + 2) * 180.0) * 0.31831));
  applesauce::CF::make_StringRef((applesauce::CF::StringRef *)&v16, v8, v10, v4);
  uint64_t v11 = v16;
  CFRelease(v10);
  if (v8) {
    CFRelease(v8);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v11;
}

void sub_235AB4108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef((const void **)(v26 - 96));
  _Unwind_Resume(a1);
}

void re::anonymous namespace'::matrixToEulerXYZ<re::Matrix4x4<float>,float>(float *a1, float *a2)
{
  float v4 = a1[8];
  if (v4 > 1.0) {
    float v4 = 1.0;
  }
  if (v4 < -1.0) {
    float v4 = -1.0;
  }
  a2[1] = asinf(v4);
  if (fabsf(a1[8]) >= 0.9999)
  {
    *a2 = atan2f(a1[6], a1[5]);
    float v5 = 0.0;
  }
  else
  {
    *a2 = atan2f(-a1[9], a1[10]);
    float v5 = atan2f(-a1[4], *a1);
  }
  a2[2] = v5;
}

applesauce::CF::StringRef *applesauce::CF::make_StringRef@<X0>(applesauce::CF::StringRef *a1@<X8>, ...)
{
  va_start(va, a1);
  CFStringRef v4 = CFStringCreateWithFormatAndArguments(0, 0, @"%@: %@ - %@", va);
  if (!v4)
  {
    exceptiouint64_t n = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return applesauce::CF::StringRef::StringRef(a1, v4);
}

void sub_235AB42B0()
{
  __cxa_throw(v0, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_235AB42D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t rf::helpers::getTrackedFromAnchor(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  CFStringRef v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers20getTrackedFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

__n128 rf::helpers::planeCenterAndRotationToCenterTransform@<Q0>(long long *a1@<X0>, _OWORD *a2@<X8>, float a3@<S0>)
{
  float32x2_t v5 = vrsqrte_f32((float32x2_t)1065353216);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v5, v5)));
  float32x4_t v22 = vmulq_n_f32((float32x4_t)xmmword_235AF75F0, vmul_f32(v6, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v6, v6))).f32[0]);
  float v7 = vmuls_lane_f32(v22.f32[1], *(float32x2_t *)v22.f32, 1);
  float v8 = vmuls_lane_f32(v22.f32[2], v22, 2);
  float v9 = vmuls_lane_f32(v22.f32[0], *(float32x2_t *)v22.f32, 1);
  float v10 = vmuls_lane_f32(v22.f32[0], v22, 2);
  float v11 = vmuls_lane_f32(v22.f32[1], v22, 2);
  __float2 v12 = __sincosf_stret(a3);
  float v13 = vmulq_f32(v22, v22).f32[0];
  float v14 = vmuls_lane_f32(v12.__sinval, *(float32x2_t *)v22.f32, 1);
  float v15 = vmuls_lane_f32(v12.__sinval, v22, 2);
  float v16 = v14 + (float)(v10 * (float)(1.0 - v12.__cosval));
  HIDWORD(v17) = 0;
  *(float *)&long long v17 = v13 + (float)(v12.__cosval * (float)(1.0 - v13));
  *((float *)&v17 + 1) = v15 + (float)(v9 * (float)(1.0 - v12.__cosval));
  HIDWORD(v19) = 0;
  *((float *)&v17 + 2) = -(float)(v14 - (float)(v10 * (float)(1.0 - v12.__cosval)));
  *(float *)&long long v18 = -(float)(v15 - (float)(v9 * (float)(1.0 - v12.__cosval)));
  *((float *)&v18 + 1) = v7 + (float)(v12.__cosval * (float)(1.0 - v7));
  *((void *)&v18 + 1) = COERCE_UNSIGNED_INT((float)(v12.__sinval * v22.f32[0]) + (float)(v11
                                                                                         * (float)(1.0 - v12.__cosval)));
  *(float *)&long long v19 = v16;
  *((float *)&v19 + 1) = -(float)((float)(v12.__sinval * v22.f32[0]) - (float)(v11 * (float)(1.0 - v12.__cosval)));
  *((float *)&v19 + 2) = v8 + (float)(v12.__cosval * (float)(1.0 - v8));
  *a2 = v17;
  a2[1] = v18;
  long long v20 = *a1;
  HIDWORD(v20) = 1.0;
  a2[2] = v19;
  a2[3] = v20;
  result.n128_u64[0] = v19;
  result.n128_u32[2] = DWORD2(v19);
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

id std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getBaseAnchorProperties(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)(a1 + 89);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  id result = *(id *)(a1 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = result;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getRFUUIDFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(void **a1, uint64_t a2)
{
  long long v2 = (_OWORD *)**a1;
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  _OWORD *v2 = *(_OWORD *)a2;
  v2[1] = v4;
  return result;
}

void applesauce::CF::construct_error(applesauce::CF *this)
{
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getDebugDescriptionForAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 99) | *(unsigned __int8 *)(a2 + 128)) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTrackedFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 99);
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      CFStringRef v23 = *(void **)a2;
    }
    else {
      CFStringRef v23 = (void *)a2;
    }
    unint64_t v7 = ((*v23 >> 2) + (*v23 << 6) + v23[1] + 2654435769) ^ *v23;
    *(void *)(a2 + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_21;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v4 = v7;
    if (v7 >= v8) {
      unint64_t v4 = v7 % v8;
    }
  }
  else
  {
    unint64_t v4 = (v8 - 1) & v7;
  }
  float v11 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v11) {
    goto LABEL_21;
  }
  __float2 v12 = (void *)*v11;
  if (!*v11) {
    goto LABEL_21;
  }
  long long v24 = a4;
  do
  {
    unint64_t v13 = v12[1];
    if (v13 == v7)
    {
      if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
        return v12;
      }
      goto LABEL_19;
    }
    if (v10 > 1)
    {
      if (v13 >= v8) {
        v13 %= v8;
      }
    }
    else
    {
      v13 &= v8 - 1;
    }
    if (v13 != v4) {
      break;
    }
LABEL_19:
    __float2 v12 = (void *)*v12;
  }
  while (v12);
  a4 = v24;
LABEL_21:
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a1, v7, a4, (uint64_t)v25);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)v25[0] = *v20;
    *long long v20 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v21 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v25[0];
    }
  }
  __float2 v12 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v12;
}

void sub_235AB4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x140uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  long long v9 = (*a3)[1];
  *((_OWORD *)v8 + 1) = **a3;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uuid_clear((unsigned __int8 *)v8 + 48);
  *((_OWORD *)v8 + 5) = xmmword_235AF75E0;
  *((_OWORD *)v8 + 6) = xmmword_235AF75F0;
  *((_OWORD *)v8 + 7) = xmmword_235AF7600;
  *((_OWORD *)v8 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = xmmword_235AF7AA0;
  *(void *)&double result = 16842752;
  *((void *)v8 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 16842752;
  *((unsigned char *)v8 + 152) = 0;
  *((void *)v8 + 20) = 0;
  *((_DWORD *)v8 + 76) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_235AB4B1C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t rf::helpers::getTransformFromAnchor(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 256);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers22getTransformFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, a1);
}

double rf::helpers::getTransformFromAnchor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  REAnchoringComponentGetScaleFactor();
  unsigned int v23 = v10;
  *(void *)&long long v26 = a2;
  *((void *)&v26 + 1) = a3;
  *(void *)&long long v27 = a4;
  uint64_t v11 = *(unsigned int *)(a1 + 256);
  if (v11 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(void *)&v25[0] = &v26;
  ((void (*)(_OWORD *__return_ptr, _OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZN2rf7helpers22getTransformFromAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENS9_11PlaneAnchorENS9_11ImageAnchorENS9_12ObjectAnchorENS9_10FaceAnchorENS9_10BodyAnchorEEEERKP11REComponentRKN2re9Matrix4x4IfEERKNS7_27HandAnchorPlacementDefaultsEE3__0EEJRKNS0_6__implIJSA_SB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v11])(v24, v25, a1);
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0;
  LODWORD(v14) = 0;
  HIDWORD(v14) = v23;
  *((void *)&v13 + 1) = v23;
  float32x4_t v15 = (float32x4_t)v24[0];
  float32x4_t v16 = (float32x4_t)v24[1];
  float32x4_t v17 = (float32x4_t)v24[2];
  float32x4_t v18 = (float32x4_t)v24[3];
  v25[0] = v23;
  v25[1] = v14;
  void v25[2] = v13;
  void v25[3] = xmmword_235AF7AA0;
  do
  {
    *(long long *)((char *)&v26 + v12 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v25[v12])), v16, *(float32x2_t *)&v25[v12], 1), v17, (float32x4_t)v25[v12], 2), v18, (float32x4_t)v25[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  double result = *(double *)&v26;
  long long v20 = v27;
  long long v21 = v28;
  long long v22 = v29;
  *a5 = v26;
  a5[1] = v20;
  a5[2] = v21;
  a5[3] = v22;
  return result;
}

uint64_t rf::helpers::isRemotelyOwned()
{
  uint64_t result = REEntityGetComponent();
  if (result) {
    return RENetworkComponentIsAuthoritative() ^ 1;
  }
  return result;
}

uint64_t rf::helpers::classificationMatches(int a1, unint64_t a2)
{
  if (a2 == -1) {
    return 1;
  }
  switch(a1)
  {
    case 1:
      uint64_t result = a2 & 1;
      break;
    case 2:
      uint64_t result = (a2 >> 1) & 1;
      break;
    case 3:
      uint64_t result = (a2 >> 2) & 1;
      break;
    case 4:
      uint64_t result = (a2 >> 3) & 1;
      break;
    case 5:
      uint64_t result = (a2 >> 4) & 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t rf::helpers::getInternalActiveCamera()
{
  REPerspectiveCameraComponentGetComponentType();
  uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
  uint64_t v2 = v1;
  RECustomMatrixCameraComponentGetComponentType();
  uint64_t v3 = RESceneGetComponentsOfClass();
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  if (v2)
  {
    while (1)
    {
      uint64_t Entity = REComponentGetEntity();
      if (REEntityIsActive())
      {
        uint64_t Name = REEntityGetName();
        if (strlen((const char *)Name) != 15
          || (*(void *)Name == 0x6C75616665445F5FLL ? (BOOL v9 = *(void *)(Name + 7) == 0x6172656D6143746CLL) : (BOOL v9 = 0),
              !v9
           || (RECameraViewDescriptorsComponentGetComponentType(),
               REEntityGetComponentByClass(),
               RECameraViewDescriptorsComponentGetRenderOrder() != 0x80000000)))
        {
          RENetworkComponentGetComponentType();
          if (!REEntityGetComponentByClass() || (RENetworkComponentIsAuthoritative() & 1) != 0) {
            return Entity;
          }
        }
      }
      uint64_t v10 = REEntityGetName();
      if (strlen((const char *)v10) == 15
        && *(void *)v10 == 0x6C75616665445F5FLL
        && *(void *)(v10 + 7) == 0x6172656D6143746CLL)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetComponentByClass();
        if (RECameraViewDescriptorsComponentGetRenderOrder() == 0x80000000) {
          uint64_t v6 = Entity;
        }
      }
      ComponentsOfClass += 8;
      if (!--v2) {
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    if (v5)
    {
      while (1)
      {
        uint64_t v12 = REComponentGetEntity();
        if (REEntityIsActive())
        {
          uint64_t v13 = REEntityGetName();
          if (strlen((const char *)v13) != 15
            || (*(void *)v13 == 0x6C75616665445F5FLL
              ? (BOOL v14 = *(void *)(v13 + 7) == 0x6172656D6143746CLL)
              : (BOOL v14 = 0),
                !v14
             || (RECameraViewDescriptorsComponentGetComponentType(),
                 REEntityGetComponentByClass(),
                 RECameraViewDescriptorsComponentGetRenderOrder() != 0x80000000)))
          {
            RENetworkComponentGetComponentType();
            if (!REEntityGetComponentByClass() || (RENetworkComponentIsAuthoritative() & 1) != 0) {
              break;
            }
          }
        }
        uint64_t v15 = REEntityGetName();
        if (strlen((const char *)v15) == 15
          && *(void *)v15 == 0x6C75616665445F5FLL
          && *(void *)(v15 + 7) == 0x6172656D6143746CLL)
        {
          RECameraViewDescriptorsComponentGetComponentType();
          REEntityGetComponentByClass();
          if (RECameraViewDescriptorsComponentGetRenderOrder() == 0x80000000) {
            uint64_t v6 = v12;
          }
        }
        v3 += 8;
        if (!--v5) {
          return v6;
        }
      }
      return v12;
    }
  }
  return v6;
}

std::string *rf::helpers::getFullPath@<X0>(std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v11 = a1;
  std::string::size_type v12 = a2;
  BOOL v9 = a3;
  std::string::size_type v10 = a4;
  uint64_t v6 = (const char *)&str_3_0;
  if (!std::string_view::starts_with[abi:ne180100](&v11, "/", 1uLL)
    && !std::string_view::starts_with[abi:ne180100](&v9, "/", 1uLL))
  {
    uint64_t v6 = "/";
  }
  size_t v7 = strlen(v6);
  if (std::string_view::starts_with[abi:ne180100](&v11, "reality", 7uLL)
    || std::string_view::starts_with[abi:ne180100](&v11, "usd:", 4uLL))
  {
    return rf::concatStringViews<std::string_view,std::string_view,std::string_view>(v11, v12, v6, v7, v9, v10, a5);
  }
  else
  {
    return rf::concatStringViews<std::string_view>(v9, v10, a5);
  }
}

BOOL std::string_view::starts_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  return a1[1] >= a3 && std::string_view::compare[abi:ne180100](a1, 0, a3, __s2, a3) == 0;
}

std::string *rf::concatStringViews<std::string_view,std::string_view,std::string_view>@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, const std::string::value_type *a5@<X4>, std::string::size_type a6@<X5>, std::string *a7@<X8>)
{
  a7->__r_.__value_.__r.__words[0] = 0;
  a7->__r_.__value_.__l.__size_ = 0;
  a7->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a7, __s, __n);
  std::string::append(a7, a3, a4);
  return std::string::append(a7, a5, a6);
}

void sub_235AB510C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *rf::concatStringViews<std::string_view>@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::string::append(a3, __s, __n);
}

void sub_235AB5160(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float rf::helpers::rotationThatFitsRect(float a1, double a2, double a3)
{
  double v4 = a2;
  float v5 = *((float *)&a3 + 1);
  if (((vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a2)).u32[0] & 1) != 0
     || *((float *)&a2 + 1) > *((float *)&a3 + 1))
    && (*(float *)&a2 > *((float *)&a3 + 1) || *((float *)&a2 + 1) > *(float *)&a3))
  {
    double v29 = a3;
    double v32 = a2;
    rf::getMessage((rf *)"The size is too small.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v24);
    a3 = v29;
    a2 = v32;
  }
  float v6 = 3.1416;
  if (a1 > 3.1416 || a1 < -3.1416)
  {
    double v30 = a3;
    double v33 = a2;
    rf::getMessage((rf *)"The rotation is invalid.", __p);
    rf::internal::logAssert((const char *)__p);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v25);
    a3 = v30;
    a2 = v33;
  }
  float v7 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a2)));
  if (v7 >= 0.00000011921)
  {
    float v8 = *(float *)&a3 / v7;
    if (a1 > 2.35619456) {
      goto LABEL_17;
    }
    if (a1 < -2.38761048)
    {
      float v6 = -3.1416;
      goto LABEL_17;
    }
    if (a1 <= 0.7854)
    {
      float v9 = 0.0;
      if (a1 < -0.7854) {
        float v9 = -1.0;
      }
      float v6 = (float)(v9 * 0.5) * 3.1416;
      if (a1 >= -0.7854)
      {
LABEL_17:
        float32x2_t v28 = *(float32x2_t *)&a3;
        float32x2_t v31 = *(float32x2_t *)&a2;
        float v10 = a1 - v6;
        float v11 = v5 / v7;
        if (v8 >= 1.0)
        {
          float v12 = 0.0;
          if (v11 >= 1.0) {
            return a1;
          }
          goto LABEL_35;
        }
        float v26 = *(float *)&a3 / v7;
        float v13 = acosf(v8);
        float v14 = v13;
        if (vcgt_f32(v28, v31).u8[0])
        {
          float v15 = acosf(*(float *)&v4 / v7) - v13;
          if (v10 >= 0.0)
          {
            BOOL v17 = v15 < v10;
LABEL_30:
            if (v17) {
              float v12 = v15;
            }
            else {
              float v12 = v10;
            }
LABEL_33:
            float v8 = v26;
LABEL_34:
            if (v11 >= 1.0) {
              return v6 + v12;
            }
LABEL_35:
            float v27 = v12;
            float v18 = v8;
            float v19 = acosf(v5 / v7);
            if (vcgt_f32(v28, v31).i32[1])
            {
              float v20 = acosf(*((float *)&v4 + 1) / v7) - v11;
              if (v10 >= 0.0)
              {
                BOOL v22 = v20 < v10;
LABEL_45:
                if (!v22) {
                  float v20 = v10;
                }
LABEL_47:
                float v21 = v18;
                goto LABEL_48;
              }
              float v20 = -v20;
            }
            else
            {
              float v20 = 0.0;
              float v21 = v18;
              if (v31.f32[0] >= v5)
              {
LABEL_48:
                if (v21 >= 1.0) {
                  return v6 + v20;
                }
                float v12 = v27;
                if (vabds_f32(v27, v10) >= vabds_f32(v20, v10)) {
                  return v6 + v20;
                }
                return v6 + v12;
              }
              float v20 = (float)(acosf(*(float *)&v4 / v7) - v19) + 1.5708;
              if (v10 < 0.0)
              {
                float v20 = -v20;
                if (v10 <= v20) {
                  float v20 = v10;
                }
                goto LABEL_47;
              }
            }
            BOOL v22 = v10 < v20;
            goto LABEL_45;
          }
          float v15 = -v15;
        }
        else
        {
          float v12 = 0.0;
          float v8 = v26;
          if ((vcgt_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1)).u8[0] & 1) == 0) {
            goto LABEL_34;
          }
          float v15 = (float)(acosf(*((float *)&v4 + 1) / v7) - v14) + 1.5708;
          if (v10 < 0.0)
          {
            float v16 = -v15;
            if (v10 <= v16) {
              float v12 = v10;
            }
            else {
              float v12 = v16;
            }
            goto LABEL_33;
          }
        }
        BOOL v17 = v10 < v15;
        goto LABEL_30;
      }
    }
    else
    {
      float v6 = 1.5708;
    }
    a2 = COERCE_DOUBLE(vrev64_s32(*(int32x2_t *)&a2));
    goto LABEL_17;
  }
  return a1;
}

void sub_235AB54B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::rayPlaneHitTestInBounds(float32x4_t a1, float32x4_t a2, simd_float4 a3, float32x4_t a4, simd_float4 a5, float32x4_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, simd_float4 a18, float32x4_t a19)
{
  float32x4_t v19 = vmulq_f32(a4, a2);
  float32x4_t v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
  if (v20.f32[0] <= -0.00000011921
    && (float32x4_t v21 = vmulq_f32(a4, vsubq_f32(a6, a1)),
        float v22 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))), v20).f32[0], v22 >= 0.0))
  {
    float v29 = v22;
    float32x4_t v30 = vmlaq_n_f32(a1, a2, v22);
    v32.columns[0] = a3;
    v32.columns[1] = (simd_float4)a4;
    v32.columns[2] = a5;
    v32.columns[3] = (simd_float4)a6;
    simd_float4x4 v33 = __invert_f4(v32);
    float32x4_t v31 = vaddq_f32((float32x4_t)v33.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v33.columns[0], v30.f32[0]), (float32x4_t)v33.columns[1], *(float32x2_t *)v30.f32, 1), (float32x4_t)v33.columns[2], v30, 2));
    v33.columns[0] = a15;
    v33.columns[1] = a16;
    v33.columns[2] = a17;
    v33.columns[3] = a18;
    simd_float4x4 v34 = __invert_f4(v33);
    float32x4_t v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v34.columns[0], v31.f32[0]), (float32x4_t)v34.columns[1], *(float32x2_t *)v31.f32, 1), (float32x4_t)v34.columns[2], v31, 2), (float32x4_t)v34.columns[3], v31, 3);
    v34.columns[1].i64[0] = 0x3F0000003F000000;
    v34.columns[1].i64[1] = 0x3F0000003F000000;
    float32x4_t v26 = vmulq_f32(a19, (float32x4_t)v34.columns[1]);
    if (v25.f32[0] >= (float)-v26.f32[0] && v25.f32[0] <= v26.f32[0])
    {
      uint64_t v23 = 0x100000000;
      if (v25.f32[2] >= (float)-v26.f32[2] && v25.f32[2] <= v26.f32[2])
      {
        uint64_t v24 = LODWORD(v29);
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  return v24 | v23;
}

uint64_t *rf::helpers::getNearestPlaneAnchorConstPtr(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  float v9 = *(simd_float4 **)(a2 + 16);
  if (!v9) {
    return 0;
  }
  float v10 = (float32x4_t *)a1;
  float v11 = 0;
  float v12 = 3.4028e38;
  float v13 = 3.4028e38;
  do
  {
    if (v9[19].i32[0] == 1)
    {
      unint64_t v14 = v10[2].u64[1];
      if (v14 == -1)
      {
        float32x4_t v28 = v10[1];
        if ((v10[2].i8[0] & 2) == 0
          || (a9.i64[0] = v9[6].i64[0],
              a9.i32[2] = v9[6].i32[2],
              float32x4_t v29 = vmulq_f32(a9, vnegq_f32(v28)),
              a9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))), a9.f32[0] >= 0.93969))
        {
          a1 = rf::helpers::rayPlaneHitTestInBounds(*v10, v28, v9[5], (float32x4_t)v9[6], v9[7], (float32x4_t)v9[8], a1, -1, a3, a4, a5, a6, a7, a8, v9[11], v9[12], v9[11], v9[12], (float32x4_t)v9[13]);
          if (HIDWORD(a1) != 0 && v13 > *(float *)&a1)
          {
            float v11 = (uint64_t *)&v9[3];
            float v13 = *(float *)&a1;
          }
        }
      }
      else
      {
        a1 = rf::helpers::classificationMatches(v9[16].i32[1], v14);
        if (a1)
        {
          a9 = (float32x4_t)v9[6];
          float32x4_t v15 = vmulq_f32(v10[1], a9);
          float32x4_t v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
          if (v16.f32[0] <= -0.00000011921)
          {
            float32x4_t v17 = (float32x4_t)v9[8];
            float32x4_t v18 = vmulq_f32(a9, vsubq_f32(v17, *v10));
            float v19 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))), v16).f32[0];
            if (v19 >= 0.0)
            {
              float v35 = v19;
              uint64_t v20 = 0;
              float32x4_t v21 = (float32x4_t)v9[5];
              float32x4_t v22 = (float32x4_t)v9[7];
              simd_float4 v23 = v9[12];
              simd_float4 v24 = v9[13];
              simd_float4 v25 = v9[14];
              v36[0] = v9[11];
              v36[1] = v23;
              id v36[2] = v24;
              v36[3] = v25;
              do
              {
                v37.columns[v20] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(v36[v20])), a9, *(float32x2_t *)&v36[v20], 1), v22, (float32x4_t)v36[v20], 2), v17, (float32x4_t)v36[v20], 3);
                ++v20;
              }
              while (v20 != 4);
              float32x4_t v31 = (float32x4_t)v37.columns[0];
              float32x4_t v32 = (float32x4_t)v37.columns[1];
              float32x4_t v33 = (float32x4_t)v37.columns[3];
              float32x4_t v34 = (float32x4_t)v37.columns[2];
              simd_float4x4 v38 = __invert_f4(v37);
              float32x4_t v26 = *v10;
              float32x4_t v27 = vmlaq_n_f32(*v10, v10[1], v35);
              v38.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v38.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v38.columns[0], v27.f32[0]), (float32x4_t)v38.columns[1], *(float32x2_t *)v27.f32, 1), (float32x4_t)v38.columns[2], v27, 2));
              v38.columns[2].i64[0] = 0x3F0000003F000000;
              v38.columns[2].i64[1] = 0x3F0000003F000000;
              v38.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v9[15], (float32x4_t)v38.columns[2]);
              v38.columns[0].i32[3] = 0;
              v38.columns[2] = (simd_float4)vnegq_f32((float32x4_t)v38.columns[1]);
              v38.columns[2].i32[3] = 0;
              v38.columns[0] = (simd_float4)vmaxnmq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[2]);
              v38.columns[0].i32[3] = 0;
              v38.columns[1].i32[3] = 0;
              v38.columns[0] = (simd_float4)vminnmq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[1]);
              v26.i32[3] = 1.0;
              v38.columns[0] = (simd_float4)vsubq_f32(vaddq_f32(v33, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v38.columns[0].f32[0]), v32, *(float32x2_t *)v38.columns[0].f32, 1), v34, (float32x4_t)v38.columns[0], 2)), v26);
              a9 = vmulq_f32((float32x4_t)v38.columns[0], (float32x4_t)v38.columns[0]);
              a9.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)a9.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL)));
              if (a9.f32[0] < v12)
              {
                float v11 = (uint64_t *)&v9[3];
                float v13 = v35;
                float v12 = a9.f32[0];
              }
            }
          }
        }
      }
    }
    float v9 = (simd_float4 *)v9->i64[0];
  }
  while (v9);
  return v11;
}

uint64_t *rf::helpers::getNearestPlaneAnchor@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float32x4_t a10@<Q0>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = rf::helpers::getNearestPlaneAnchorConstPtr(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  if (result)
  {
    int v13 = v12;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v14, (uint64_t)result);
    int v15 = v13;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(a9, (uint64_t)v14);
    *(_DWORD *)(a9 + 272) = v15;
    *(unsigned char *)(a9 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 1;
    return (uint64_t *)std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  }
  else
  {
    *(unsigned char *)a9 = 0;
    *(unsigned char *)(a9 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 0;
  }
  return result;
}

uint64_t rf::helpers::updateShadowMarker(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (REEntityGetComponent())
  {
    REEntityGetOrAddComponent();
    RETransformComponentGetWorldPosition();
    float32x4_t v12 = v3;
    REEntityGetComponent();
    REAnchoringComponentGetDescriptorBounds();
    v13[0] = vaddq_f32(v12, (float32x4_t)xmmword_235AF9150);
    v13[1] = xmmword_235AF9160;
    char v14 = 1;
    uint64_t v15 = -1;
    uint64_t v16 = v4.i64[0];
    rf::helpers::getNearestPlaneAnchor((unint64_t)v13, a2, v5, v6, v7, v8, v9, v10, (uint64_t)v17, v4);
    if (v19)
    {
      if (v18 != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      REEntityGetOrAddComponent();
      uint64_t result = REAnchorShadowMarkerSetPointAndNormal();
    }
    else
    {
      REAnchorShadowMarkerComponentGetComponentType();
      uint64_t result = REEntityRemoveComponentByClass();
    }
    if (v19) {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
    }
  }
  else
  {
    REAnchorShadowMarkerComponentGetComponentType();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

void sub_235AB5B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a21);
  }
  _Unwind_Resume(exception_object);
}

void *rf::helpers::tryGetAnchorFromAllAnchors(uint64_t a1, uint64_t a2)
{
  float32x4_t v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(a1 + 80), a2);
  uint64_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(a1 + 120), a2);
  if (v4) {
    return v4 + 6;
  }
  float32x4_t v4 = result;
  if (result) {
    return v4 + 6;
  }
  return result;
}

uint64_t rf::helpers::validateAnchorState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  AnchorCFStringRef Identifier = REAnchorComponentGetAnchorIdentifier();
  char v33 = 0;
  uint64_t v34 = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = AnchorIdentifier;
  char v33 = 1;
  REComponentGetEntity();
  if (REAnchoringComponentGetMode() || REAnchoringComponentGetDescriptorType() == 1)
  {
    AnchorFromAllAnchors = rf::helpers::tryGetAnchorFromAllAnchors(a3, (uint64_t)uu);
    char v8 = v7;
    uint64_t DescriptorType = REAnchoringComponentGetDescriptorType();
    switch((int)DescriptorType)
    {
      case 0:
        uint64_t v10 = rf::helpers::kCameraIdentifier((rf::helpers *)DescriptorType);
        float v11 = uu;
        if (v33) {
          float v11 = *(unsigned __int8 **)uu;
        }
        if (*((unsigned char *)v10 + 16)) {
          float32x4_t v12 = *(const unsigned __int8 **)v10;
        }
        else {
          float32x4_t v12 = (const unsigned __int8 *)v10;
        }
        LOBYTE(DescriptorType) = uuid_compare(v11, v12) == 0;
        break;
      case 1:
        if (REAnchoringComponentGetIsDescriptorWorldTransformDirty()) {
          goto LABEL_35;
        }
        LOBYTE(DescriptorType) = REAnchorComponentGetAnchoredLocally();
        break;
      case 2:
        if (!v8) {
          goto LABEL_35;
        }
        DescriptorAnchorCFStringRef Identifier = (const unsigned __int8 *)REAnchoringComponentGetDescriptorAnchorIdentifier();
        LOBYTE(v29) = 0;
        *((void *)&v29 + 1) = 0;
        uuid_clear(v28);
        *(void *)uuid_t v28 = DescriptorAnchorIdentifier;
        LOBYTE(v29) = 1;
        if (v33) {
          float32x4_t v22 = *(unsigned __int8 **)uu;
        }
        else {
          float32x4_t v22 = uu;
        }
        int v23 = uuid_compare(v22, DescriptorAnchorIdentifier);
        LOBYTE(DescriptorType) = 0;
        if (!v23) {
          LOBYTE(DescriptorType) = rf::helpers::getTrackedFromAnchor((uint64_t)AnchorFromAllAnchors);
        }
        break;
      case 3:
        if (!v8) {
          goto LABEL_35;
        }
        LOBYTE(DescriptorType) = rf::helpers::planeAnchorMatches((uint64_t)AnchorFromAllAnchors);
        break;
      case 4:
        if (!v8) {
          goto LABEL_35;
        }
        LOBYTE(DescriptorType) = rf::helpers::imageAnchorMatches((uint64_t)AnchorFromAllAnchors, a1, 0);
        break;
      case 5:
        if (!v8) {
          goto LABEL_35;
        }
        LOBYTE(DescriptorType) = rf::helpers::objectAnchorMatches((uint64_t)AnchorFromAllAnchors);
        break;
      case 6:
        if (!v8) {
          goto LABEL_35;
        }
        BOOL v24 = *((_DWORD *)AnchorFromAllAnchors + 64) == 4;
        goto LABEL_29;
      case 7:
        if (v8)
        {
          BOOL v24 = *((_DWORD *)AnchorFromAllAnchors + 64) == 5;
LABEL_29:
          LOBYTE(DescriptorType) = v24 && *((unsigned char *)AnchorFromAllAnchors + 99) != 0;
        }
        else
        {
LABEL_35:
          LOBYTE(DescriptorType) = 0;
        }
        break;
      default:
        return DescriptorType & 1;
    }
  }
  else
  {
    REAnchorComponentGetWorldTransform();
    *(_OWORD *)uuid_t v28 = v13;
    long long v29 = v14;
    long long v30 = v15;
    long long v31 = v16;
    REAnchoringComponentGetWorldTransformOfDescriptorTransform();
    v27[0] = v17;
    v27[1] = v18;
    v27[2] = v19;
    v27[3] = v20;
    LOBYTE(DescriptorType) = re::areAlmostEqual<float>((float *)v28, (float *)v27);
  }
  return DescriptorType & 1;
}

BOOL re::areAlmostEqual<float>(float *a1, float *a2)
{
  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v2 = a1[1];
  float v3 = a2[1];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v4 = a1[2];
  float v5 = a2[2];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v6 = a1[3];
  float v7 = a2[3];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v8 = a1[4];
  float v9 = a2[4];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v10 = a1[5];
  float v11 = a2[5];
  if (v10 != v11 && vabds_f32(v10, v11) >= (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v12 = a1[6];
  float v13 = a2[6];
  if (v12 != v13 && vabds_f32(v12, v13) >= (float)((float)((float)(fabsf(v12) + fabsf(v13)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v14 = a1[7];
  float v15 = a2[7];
  if (v14 != v15 && vabds_f32(v14, v15) >= (float)((float)((float)(fabsf(v14) + fabsf(v15)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v16 = a1[8];
  float v17 = a2[8];
  if (v16 != v17 && vabds_f32(v16, v17) >= (float)((float)((float)(fabsf(v16) + fabsf(v17)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v18 = a1[9];
  float v19 = a2[9];
  if (v18 != v19 && vabds_f32(v18, v19) >= (float)((float)((float)(fabsf(v18) + fabsf(v19)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v20 = a1[10];
  float v21 = a2[10];
  if (v20 != v21 && vabds_f32(v20, v21) >= (float)((float)((float)(fabsf(v20) + fabsf(v21)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v22 = a1[11];
  float v23 = a2[11];
  if (v22 != v23 && vabds_f32(v22, v23) >= (float)((float)((float)(fabsf(v22) + fabsf(v23)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v24 = a1[12];
  float v25 = a2[12];
  if (v24 != v25 && vabds_f32(v24, v25) >= (float)((float)((float)(fabsf(v24) + fabsf(v25)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v26 = a1[13];
  float v27 = a2[13];
  if (v26 != v27 && vabds_f32(v26, v27) >= (float)((float)((float)(fabsf(v26) + fabsf(v27)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v28 = a1[14];
  float v29 = a2[14];
  if (v28 != v29 && vabds_f32(v28, v29) >= (float)((float)((float)(fabsf(v28) + fabsf(v29)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v30 = a1[15];
  float v31 = a2[15];
  return v30 == v31 || vabds_f32(v30, v31) < (float)((float)((float)(fabsf(v30) + fabsf(v31)) + 1.0) * 0.00001);
}

BOOL rf::helpers::planeAnchorMatches(uint64_t a1)
{
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity) && REEntityGetCustomComponent()) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 256) != 1) {
    return 0;
  }
  int DescriptorAlignment = REAnchoringComponentGetDescriptorAlignment();
  DescriptorClassificatiouint64_t n = REAnchoringComponentGetDescriptorClassification();
  REAnchoringComponentGetDescriptorBounds();
  if (DescriptorAlignment != 255)
  {
    int v7 = *(_DWORD *)(a1 + 208);
    if (v7)
    {
      if (v7 != 1 || (DescriptorAlignment & 2) == 0) {
        return 0;
      }
    }
    else if ((DescriptorAlignment & 1) == 0)
    {
      return 0;
    }
  }
  uint64_t v9 = v6;
  int v8 = rf::helpers::classificationMatches(*(_DWORD *)(a1 + 212), DescriptorClassification);
  BOOL result = 0;
  if (v8)
  {
    if (*(float *)(a1 + 192) >= *(float *)&v9) {
      return *(float *)(a1 + 200) >= *((float *)&v9 + 1);
    }
  }
  return result;
}

uint64_t rf::helpers::imageAnchorMatches(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 256) != 2) {
    return 0;
  }
  if (!REAnchoringComponentGetDescriptorResourceStyle())
  {
    rf::getMessage((rf *)"AnchorManagementConsumer: Image anchoring target should not have kREAnchoringResourceNone", v31);
    rf::internal::logAssert((const char *)v31);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    rf::internal::debugBreakHandler(v27);
    uint64_t v30 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)std::string __p = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::helpers::imageAnchorMatches(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent *,BOOL)::$_0::operator()(&v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v28 = &v29;
    }
    else {
      float v28 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    int v33 = 136315138;
    uint64_t v34 = v28;
    _os_log_send_and_compose_impl();
    std::string::~string(&v29);
    _os_crash_msg();
    __break(1u);
  }
  DescriptorResourceGroup = (char *)REAnchoringComponentGetDescriptorResourceGroup();
  size_t v6 = strlen(DescriptorResourceGroup);
  DescriptorResourceuint64_t Name = (char *)REAnchoringComponentGetDescriptorResourceName();
  size_t v8 = strlen(DescriptorResourceName);
  rf::helpers::getFullPath(DescriptorResourceGroup, v6, DescriptorResourceName, v8, (std::string *)__p);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 159);
  if ((v9 & 0x80u) == 0) {
    float v10 = (void *)*(unsigned __int8 *)(a1 + 159);
  }
  else {
    float v10 = *(void **)(a1 + 144);
  }
  float v11 = (void *)BYTE7(v36);
  int v12 = SBYTE7(v36);
  if (SBYTE7(v36) < 0) {
    float v11 = __p[1];
  }
  if (v10 == v11)
  {
    float v13 = (const void **)(a1 + 136);
    if ((SBYTE7(v36) & 0x80u) == 0) {
      float v14 = __p;
    }
    else {
      float v14 = (void **)__p[0];
    }
    if ((v9 & 0x80) != 0)
    {
      BOOL v23 = memcmp(*v13, v14, *(void *)(a1 + 144)) == 0;
    }
    else if (*(unsigned char *)(a1 + 159))
    {
      uint64_t v15 = v9 - 1;
      do
      {
        int v17 = *(unsigned __int8 *)v13;
        float v13 = (const void **)((char *)v13 + 1);
        int v16 = v17;
        int v19 = *(unsigned __int8 *)v14;
        float v14 = (void **)((char *)v14 + 1);
        int v18 = v19;
        BOOL v21 = v15-- != 0;
        BOOL v22 = v16 == v18;
        BOOL v23 = v16 == v18;
      }
      while (v22 && v21);
    }
    else
    {
      BOOL v23 = 1;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  if (*(unsigned char *)(a1 + 99))
  {
    int v25 = 1;
  }
  else
  {
    int v25 = a3 ^ 1;
    if (!*(unsigned char *)(a1 + 128)) {
      int v25 = 0;
    }
  }
  uint64_t v24 = v23 & v25;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v24;
}

void sub_235AB6578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL rf::helpers::objectAnchorMatches(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 256) != 3) {
    return 0;
  }
  DescriptorResourceGroup = (char *)REAnchoringComponentGetDescriptorResourceGroup();
  size_t v3 = strlen(DescriptorResourceGroup);
  DescriptorResourceuint64_t Name = (char *)REAnchoringComponentGetDescriptorResourceName();
  size_t v5 = strlen(DescriptorResourceName);
  rf::helpers::getFullPath(DescriptorResourceGroup, v3, DescriptorResourceName, v5, &__p);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 151);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 151);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 136);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v7 == size)
  {
    float v10 = (const void **)(a1 + 128);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v6 & 0x80) != 0)
    {
      BOOL v19 = memcmp(*v10, p_p, *(void *)(a1 + 136)) == 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 151))
      {
        BOOL v19 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v19;
        }
        goto LABEL_25;
      }
      uint64_t v12 = v6 - 1;
      do
      {
        int v14 = *(unsigned __int8 *)v10;
        float v10 = (const void **)((char *)v10 + 1);
        int v13 = v14;
        int v16 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v15 = v16;
        BOOL v18 = v12-- != 0;
        BOOL v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
    }
    if (v9 < 0) {
LABEL_25:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v19 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_25;
    }
  }
  return v19;
}

uint64_t rf::helpers::cacheAnchorBeforeTravelMode(uint64_t result, uint64_t a2)
{
  if (result)
  {
    BOOL result = REAnchoringComponentGetDescriptorType();
    if (result == 1)
    {
      REAnchorComponentGetAnchorIdentifier();
      REAnchoringComponentSetDescriptorCachedAnchorIdentifier();
      return MEMORY[0x270F1C098](a2);
    }
  }
  return result;
}

uint64_t rf::helpers::isAnchoringTypeAuthorizedForPeer(uint64_t a1, void *a2)
{
  if (!a1)
  {
    rf::getMessage((rf *)"Anchoring component should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v7);
  }
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  REComponentGetEntity();
  if (!a1)
  {
    rf::getMessage((rf *)"Entity should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v8);
  }
  if (!a2[3]) {
    return 1;
  }
  RENetworkComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (!result) {
    return result;
  }
  __p[0] = (void *)RENetworkComponentOwnerPeerID();
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)__p);
  if (!result) {
    return result;
  }
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if ((DescriptorType - 3) < 3) {
    return (*((unsigned __int8 *)v6 + 24) >> 1) & 1;
  }
  if (DescriptorType == 2) {
    return 1;
  }
  if (DescriptorType == 1) {
    return (*((unsigned __int8 *)v6 + 24) >> 1) & 1;
  }
  return 0;
}

void sub_235AB6878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::needAnchoringInClientProcessForEntity(unsigned char *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2)
  {
    if (*a1)
    {
      REAnchoringComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (result)
      {
        int v4 = REAnchoringComponentGetDescriptorType() - 1;
        uint64_t result = 1;
        switch(v4)
        {
          case 0:
            int v5 = a1[1];
            goto LABEL_10;
          case 1:
            return result;
          case 2:
            int v5 = a1[2];
            goto LABEL_10;
          case 3:
            int v5 = a1[3];
            goto LABEL_10;
          case 4:
            int v5 = a1[4];
LABEL_10:
            uint64_t result = v5 != 0;
            break;
          default:
            uint64_t result = 0;
            break;
        }
      }
    }
  }
  return result;
}

uint64_t rf::helpers::needAnchoringInServerProcessForEntity(uint64_t result)
{
  if (result)
  {
    REClientAnchorSyncComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      uint64_t result = REClientAnchorSyncComponentIsAnchored();
      if (result)
      {
        REAnchoringComponentGetComponentType();
        uint64_t result = REEntityGetComponentByClass();
        if (result) {
          return REAnchoringComponentGetDescriptorType() - 6 < 0xFFFFFFFB;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t rf::helpers::isAnchoringTypeAuthorizedForSelf(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  else
  {
    rf::getMessage((rf *)"Anchoring component should not be nullptr", __p);
    rf::internal::logAssert((const char *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v4);
    if ((a2 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  if ((DescriptorType - 3) < 3) {
    return (a2 >> 1) & 1;
  }
  if (DescriptorType != 2)
  {
    if (DescriptorType != 1) {
      return 0;
    }
    return (a2 >> 1) & 1;
  }
  return 1;
}

void sub_235AB6A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::helpers::shouldAnchorEntityInClientProcess(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  uint64_t result = rf::helpers::needAnchoringInClientProcessForEntity(a2, a1);
  if (result)
  {
    REAnchoringComponentGetComponentType();
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    return rf::helpers::isAnchoringTypeAuthorizedForSelf(ComponentByClass, a3);
  }
  return result;
}

uint64_t rf::helpers::shouldAnchorEntityRequiringClientAnchoring(uint64_t a1, void *a2)
{
  REClientAnchorSyncComponentGetComponentType();
  REEntityGetComponentByClass();
  REAnchoringComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  uint64_t result = rf::helpers::isAnchoringTypeAuthorizedForPeer(ComponentByClass, a2);
  if (result)
  {
    return REClientAnchorSyncComponentIsAnchored();
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity)) {
    REEntityGetCustomComponent();
  }
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    float32x4_t v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    float32x4_t v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    float32x4_t v15 = vmulq_laneq_f32(a1[4], v6, 2);
    float32x4_t v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransforuint64_t m = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      long long v8 = CoordinateSpaceOfDescriptorTransform[1];
      long long v9 = CoordinateSpaceOfDescriptorTransform[2];
      long long v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      simd_float4x4 v23 = __invert_f4(v22);
      uint64_t v11 = 0;
      simd_float4x4 v20 = v23;
      do
      {
        *(long long *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21)) {
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
      }
    }
    *a2 = v17;
    a2[1] = v18;
    __n128 result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    float32x4_t v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    __n128 result = (__n128)a1[4];
    float32x4_t v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  __n128 result = rf::PlacementComponentTypeInfo::instance(Entity);
  if (*result) {
    __n128 result = (void *)REEntityGetCustomComponent();
  }
  if (*(_DWORD *)(a1 + 208))
  {
    long long v6 = *(_OWORD *)(a1 + 48);
    *a2 = *(_OWORD *)(a1 + 32);
    a2[1] = v6;
    long long v7 = *(_OWORD *)(a1 + 80);
    a2[2] = *(_OWORD *)(a1 + 64);
    a2[3] = v7;
  }
  else
  {
    __n128 result = (void *)REComposeMatrix();
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity)) {
    REEntityGetCustomComponent();
  }
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    float32x4_t v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    float32x4_t v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    float32x4_t v15 = vmulq_laneq_f32(a1[4], v6, 2);
    float32x4_t v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransforuint64_t m = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      long long v8 = CoordinateSpaceOfDescriptorTransform[1];
      long long v9 = CoordinateSpaceOfDescriptorTransform[2];
      long long v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      simd_float4x4 v23 = __invert_f4(v22);
      uint64_t v11 = 0;
      simd_float4x4 v20 = v23;
      do
      {
        *(long long *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21)) {
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
      }
    }
    *a2 = v17;
    a2[1] = v18;
    __n128 result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    float32x4_t v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    __n128 result = (__n128)a1[4];
    float32x4_t v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity)) {
    REEntityGetCustomComponent();
  }
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    float32x4_t v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    float32x4_t v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    float32x4_t v15 = vmulq_laneq_f32(a1[4], v6, 2);
    float32x4_t v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransforuint64_t m = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      long long v8 = CoordinateSpaceOfDescriptorTransform[1];
      long long v9 = CoordinateSpaceOfDescriptorTransform[2];
      long long v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      simd_float4x4 v23 = __invert_f4(v22);
      uint64_t v11 = 0;
      simd_float4x4 v20 = v23;
      do
      {
        *(long long *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21)) {
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
      }
    }
    *a2 = v17;
    a2[1] = v18;
    __n128 result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    float32x4_t v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    __n128 result = (__n128)a1[4];
    float32x4_t v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<Q0>(float32x4_t *a1@<X1>, float32x4_t *a2@<X8>)
{
  int DescriptorType = REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity)) {
    REEntityGetCustomComponent();
  }
  if (DescriptorType == 1)
  {
    REAnchoringComponentGetWorldScaleOfDescriptorTransform();
    float32x4_t v17 = vmulq_n_f32(a1[2], v6.f32[0]);
    float32x4_t v18 = vmulq_lane_f32(a1[3], *(float32x2_t *)v6.f32, 1);
    float32x4_t v15 = vmulq_laneq_f32(a1[4], v6, 2);
    float32x4_t v16 = a1[5];
    if (REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform())
    {
      CoordinateSpaceOfDescriptorTransforuint64_t m = (_OWORD *)REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform();
      long long v8 = CoordinateSpaceOfDescriptorTransform[1];
      long long v9 = CoordinateSpaceOfDescriptorTransform[2];
      long long v10 = CoordinateSpaceOfDescriptorTransform[3];
      v19[0] = *CoordinateSpaceOfDescriptorTransform;
      v19[1] = v8;
      v19[2] = v9;
      v19[3] = v10;
      REAnchoringComponentGetDescriptorTransform();
      simd_float4x4 v23 = __invert_f4(v22);
      uint64_t v11 = 0;
      simd_float4x4 v20 = v23;
      do
      {
        *(long long *)((char *)&v21 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)&v20.columns[v11])), v18, *(float32x2_t *)v20.columns[v11].f32, 1), v15, (float32x4_t)v20.columns[v11], 2), v16, (float32x4_t)v20.columns[v11], 3);
        ++v11;
      }
      while (v11 != 4);
      if (!re::areAlmostEqual<float>((float *)v19, (float *)&v21)) {
        REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform();
      }
    }
    *a2 = v17;
    a2[1] = v18;
    __n128 result = (__n128)v16;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    float32x4_t v13 = a1[3];
    *a2 = a1[2];
    a2[1] = v13;
    __n128 result = (__n128)a1[4];
    float32x4_t v14 = a1[5];
    a2[2] = (float32x4_t)result;
    a2[3] = v14;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::helpers::getTransformFromAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent * const&,re::Matrix4x4<float> const&,rf::helpers::HandAnchorPlacementDefaults const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  REAnchoringComponentGetDescriptorType();
  uint64_t Entity = (rf::PlacementComponentTypeInfo *)REComponentGetEntity();
  if (*rf::PlacementComponentTypeInfo::instance(Entity)) {
    REEntityGetCustomComponent();
  }
  uint64_t v5 = 0;
  float32x4_t v6 = (float32x4_t)*(unsigned int *)(a1 + 128);
  v8.i64[0] = 0;
  v7.i32[0] = 0;
  v7.i32[3] = 0;
  *(uint64_t *)((char *)v7.i64 + 4) = v6.u32[0];
  v8.i64[1] = v6.u32[0];
  long long v9 = *(_OWORD *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 80);
  v16[0] = *(_OWORD *)(a1 + 32);
  v16[1] = v9;
  v16[2] = v10;
  void v16[3] = v11;
  do
  {
    v17[v5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v16[v5])), v7, *(float32x2_t *)&v16[v5], 1), v8, (float32x4_t)v16[v5], 2), (float32x4_t)xmmword_235AF7AA0, (float32x4_t)v16[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  double result = *(double *)v17;
  long long v13 = v17[1];
  long long v14 = v17[2];
  long long v15 = v17[3];
  *a2 = v17[0];
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  return result;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  long long v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

void rf::helpers::imageAnchorMatches(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,REComponent *,BOOL)::$_0::operator()(void *a1)
{
}

void rf::data_flow::consumer::MeshVisualizer::GenerateDebugMeshFromUpdateDataMesh(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v7 = a1;
  *(void *)a5 = 0;
  *(void *)(a5 + 24) = 0;
  float32x4_t v8 = (id *)(a5 + 24);
  *(unsigned char *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
  uint64_t v129 = (id *)(a5 + 48);
  *(unsigned char *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  *(unsigned char *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  int8x8_t v128 = (id *)(a5 + 112);
  *(unsigned char *)(a5 + 136) = 0;
  *(unsigned char *)(a5 + 144) = 0;
  *(unsigned char *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0;
  *(unsigned char *)(a5 + 176) = 1;
  *(_DWORD *)(a5 + 180) = *(_DWORD *)(a1 + 88);
  if ((v9 & 0xA) == 0)
  {
    if (*(unsigned char *)(a2 + 152))
    {
      objc_storeStrong((id *)a5, *(id *)(a2 + 128));
      *(_OWORD *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 136);
      if (*(unsigned char *)(a2 + 216))
      {
        objc_storeStrong(v8, *(id *)(a2 + 192));
        *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 200);
        if ((v9 & 4) != 0)
        {
          if (!*(unsigned char *)(a2 + 280)) {
            goto LABEL_287;
          }
          std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>((uint64_t)v128, a2 + 256);
        }
        if ((v9 & 1) == 0) {
          return;
        }
        if (*(unsigned char *)(a2 + 184))
        {
          std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>((uint64_t)v129, a2 + 160);
          return;
        }
      }
    }
LABEL_287:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*(void *)(a2 + 200) != 36)
  {
    rf::getMessage((rf *)"Bad index buffer format!", &v151);
    rf::internal::logAssert((const char *)&v151);
    if (SBYTE7(v152) < 0) {
      operator delete((void *)v151);
    }
    rf::internal::debugBreakHandler(v123);
  }
  uint64_t v137 = [*(id *)(a2 + 192) contents];
  if ((v9 & 2) != 0)
  {
    if (*(void *)(a2 + 232) != 45)
    {
      rf::getMessage((rf *)"Bad per face attribute buffer format for classification!", &v151);
      rf::internal::logAssert((const char *)&v151);
      if (SBYTE7(v152) < 0) {
        operator delete((void *)v151);
      }
      rf::internal::debugBreakHandler(v125);
    }
    uint64_t v135 = [*(id *)(a2 + 224) contents];
  }
  else
  {
    uint64_t v135 = 0;
  }
  if (v9 >= 8)
  {
    if (*(void *)(a2 + 296) != 45)
    {
      rf::getMessage((rf *)"Bad per face attribute buffer format for material!", &v151);
      rf::internal::logAssert((const char *)&v151);
      if (SBYTE7(v152) < 0) {
        operator delete((void *)v151);
      }
      rf::internal::debugBreakHandler(v126);
    }
    uint64_t v134 = [*(id *)(a2 + 288) contents];
  }
  else
  {
    uint64_t v134 = 0;
  }
  if (((v9 & 2) == 0 || *(unsigned char *)(v7 + 304)) && (v9 < 8 || *(unsigned char *)(v7 + 305)))
  {
    unint64_t v10 = *(void *)(a2 + 208);
    char v132 = 1;
    if (!v10)
    {
LABEL_186:
      *(unsigned char *)(a5 + 176) = 0;
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 208);
    if (v11 < 3) {
      goto LABEL_186;
    }
    unint64_t v12 = 0;
    uint64_t v13 = v11 / 3;
    long long v15 = (unsigned char *)v134;
    long long v14 = (unsigned char *)v135;
    do
    {
      if ((v9 & 2) != 0
        && ((unint64_t v16 = *v14, *v14) ? (v17 = *(void *)(v7 + 280) > v16) : (v17 = 0),
            v17 && ((*(void *)(*(void *)(v7 + 272) + ((v16 >> 3) & 0x18)) >> v16) & 1) != 0)
        || v9 >= 8
        && ((unint64_t v18 = *v15, *v15) ? (v19 = *(void *)(v7 + 200) > v18) : (v19 = 0),
            v19 && ((*(void *)(*(void *)(v7 + 192) + ((v18 >> 3) & 0x18)) >> v18) & 1) != 0))
      {
        v12 += 3;
      }
      ++v15;
      ++v14;
      --v13;
    }
    while (v13);
    char v132 = 0;
    unint64_t v10 = v12;
    if (!v12) {
      goto LABEL_186;
    }
  }
  simd_float4x4 v20 = [*(id *)(a2 + 192) device];
  uint64_t v131 = a2;
  uint64_t v21 = [v20 newBufferWithLength:4 * v10 options:0];
  simd_float4x4 v22 = *(void **)(a5 + 24);
  *(void *)(a5 + 24) = v21;

  *(void *)(a5 + 32) = 36;
  *(void *)(a5 + 40) = v10;

  uint64_t v136 = [*(id *)(a5 + 24) contents];
  long long v151 = 0u;
  long long v152 = 0u;
  float v153 = 1.0;
  unint64_t v127 = v10;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v151, (unint64_t)(float)v10);
  long long v148 = 0u;
  long long v149 = 0u;
  float v150 = 1.0;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v148, (unint64_t)(float)v10);
  uint64_t v23 = *(void *)(a2 + 208);
  unint64_t v133 = (void *)v7;
  if (v23 >= 3)
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    uint64_t v140 = 0;
    uint64_t v142 = v9 << 48;
    while (1)
    {
      if (v132)
      {
LABEL_49:
        uint64_t v26 = 0;
LABEL_50:
        uint64_t v27 = v24;
        if ((v9 & 2) != 0) {
          uint64_t v28 = *(unsigned __int8 *)(v135 + v140);
        }
        else {
          uint64_t v28 = 255;
        }
        if (v9 >= 8) {
          uint64_t v29 = *(unsigned __int8 *)(v134 + v140);
        }
        else {
          uint64_t v29 = 255;
        }
        uint64_t v30 = *(unsigned int *)(v137 + 4 * (v26 + 3 * v140));
        unint64_t v31 = v30 + 2654435769;
        if ((v9 & 2) != 0) {
          v31 ^= (v31 >> 2) + 2654435769u + (v31 << 6) + v28;
        }
        if (v9 >= 8) {
          unint64_t v32 = (v29 + 2654435769 + (v31 >> 2) + (v31 << 6)) ^ v31;
        }
        else {
          unint64_t v32 = v31;
        }
        unint64_t v33 = *((void *)&v151 + 1);
        uint64_t v34 = v28 << 32;
        uint64_t v146 = v27;
        if (!*((void *)&v151 + 1))
        {
          unsigned int v144 = v25 + 1;
          goto LABEL_103;
        }
        uint8x8_t v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v151 + 8));
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          unint64_t v36 = v32;
          if (v32 >= *((void *)&v151 + 1)) {
            unint64_t v36 = v32 % *((void *)&v151 + 1);
          }
        }
        else
        {
          unint64_t v36 = (*((void *)&v151 + 1) + 0x3FFFFFFFFFFFLL) & v32;
        }
        long long v37 = *(uint64_t ***)(v151 + 8 * v36);
        if (!v37 || (long long v38 = *v37) == 0)
        {
LABEL_83:
          if (v35.u32[0] > 1uLL)
          {
            unint64_t v5 = v32;
            if (v32 >= *((void *)&v151 + 1)) {
              unint64_t v5 = v32 % *((void *)&v151 + 1);
            }
          }
          else
          {
            unint64_t v5 = (*((void *)&v151 + 1) + 0x3FFFFFFFFFFFLL) & v32;
          }
          unsigned int v144 = v25 + 1;
          uint64_t v40 = *(uint64_t ***)(v151 + 8 * v5);
          if (v40)
          {
            for (char i = *v40; i; char i = (uint64_t *)*i)
            {
              unint64_t v42 = i[1];
              if (v42 == v32)
              {
                if (*((_DWORD *)i + 4) == v30
                  && *((unsigned __int8 *)i + 22) == v9
                  && ((v9 & 2) == 0 || *((unsigned __int8 *)i + 20) == v28)
                  && (v9 < 8 || *((unsigned __int8 *)i + 21) == v29))
                {
                  goto LABEL_126;
                }
              }
              else
              {
                if (v35.u32[0] > 1uLL)
                {
                  if (v42 >= *((void *)&v151 + 1)) {
                    v42 %= *((void *)&v151 + 1);
                  }
                }
                else
                {
                  v42 &= *((void *)&v151 + 1) - 1;
                }
                if (v42 != v5) {
                  break;
                }
              }
            }
          }
LABEL_103:
          uint64_t v43 = operator new(0x20uLL);
          *uint64_t v43 = 0;
          v43[1] = v32;
          v43[2] = v34 | (v29 << 40) | v142 | v30;
          *((_DWORD *)v43 + 6) = v25;
          float v44 = (float)(unint64_t)(*((void *)&v152 + 1) + 1);
          if (!v33 || (float)(v153 * (float)v33) < v44)
          {
            BOOL v45 = v33 < 3 || (v33 & (v33 - 1)) != 0;
            unint64_t v46 = v45 | (2 * v33);
            unint64_t v47 = vcvtps_u32_f32(v44 / v153);
            if (v46 <= v47) {
              size_t v48 = v47;
            }
            else {
              size_t v48 = v46;
            }
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v151, v48);
            unint64_t v33 = *((void *)&v151 + 1);
            if ((v33 & (v33 - 1)) != 0)
            {
              if (v32 >= *((void *)&v151 + 1)) {
                unint64_t v5 = v32 % *((void *)&v151 + 1);
              }
              else {
                unint64_t v5 = v32;
              }
            }
            else
            {
              unint64_t v5 = (*((void *)&v151 + 1) + 0x3FFFFFFFFFFFLL) & v32;
            }
          }
          uint64_t v49 = v151;
          char v50 = *(void **)(v151 + 8 * v5);
          if (v50)
          {
            *uint64_t v43 = *v50;
            goto LABEL_124;
          }
          *uint64_t v43 = v152;
          *(void *)&long long v152 = v43;
          *(void *)(v49 + 8 * v5) = &v152;
          if (*v43)
          {
            unint64_t v51 = *(void *)(*v43 + 8);
            if ((v33 & (v33 - 1)) != 0)
            {
              if (v51 >= v33) {
                v51 %= v33;
              }
            }
            else
            {
              v51 &= v33 - 1;
            }
            char v50 = (void *)(v151 + 8 * v51);
LABEL_124:
            *char v50 = v43;
          }
          ++*((void *)&v152 + 1);
LABEL_126:
          unint64_t v52 = *((void *)&v148 + 1);
          if (*((void *)&v148 + 1))
          {
            uint8x8_t v53 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v148 + 8));
            v53.i16[0] = vaddlv_u8(v53);
            if (v53.u32[0] > 1uLL)
            {
              unint64_t v5 = v25;
              if (*((void *)&v148 + 1) <= (unint64_t)v25) {
                unint64_t v5 = (unint64_t)v25 % *((void *)&v148 + 1);
              }
            }
            else
            {
              unint64_t v5 = (DWORD2(v148) - 1) & v25;
            }
            char v54 = *(uint64_t ***)(v148 + 8 * v5);
            if (v54)
            {
              for (uint64_t j = *v54; j; uint64_t j = (uint64_t *)*j)
              {
                unint64_t v56 = j[1];
                if (v56 == v25)
                {
                  if (*((_DWORD *)j + 4) == v25)
                  {
                    unsigned int v67 = v25;
                    unsigned int v25 = v144;
                    uint64_t v27 = v146;
                    goto LABEL_164;
                  }
                }
                else
                {
                  if (v53.u32[0] > 1uLL)
                  {
                    if (v56 >= *((void *)&v148 + 1)) {
                      v56 %= *((void *)&v148 + 1);
                    }
                  }
                  else
                  {
                    v56 &= *((void *)&v148 + 1) - 1;
                  }
                  if (v56 != v5) {
                    break;
                  }
                }
              }
            }
          }
          char v57 = operator new(0x20uLL);
          *char v57 = 0;
          v57[1] = v25;
          *((_DWORD *)v57 + 4) = v25;
          *(void *)((char *)v57 + 20) = v34 | (v29 << 40) | v142 | v30;
          float v58 = (float)(unint64_t)(*((void *)&v149 + 1) + 1);
          if (!v52 || (float)(v150 * (float)v52) < v58)
          {
            BOOL v59 = (v52 & (v52 - 1)) != 0;
            if (v52 < 3) {
              BOOL v59 = 1;
            }
            unint64_t v60 = v59 | (2 * v52);
            unint64_t v61 = vcvtps_u32_f32(v58 / v150);
            if (v60 <= v61) {
              size_t v62 = v61;
            }
            else {
              size_t v62 = v60;
            }
            std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v148, v62);
            unint64_t v52 = *((void *)&v148 + 1);
            if ((*((void *)&v148 + 1) & (*((void *)&v148 + 1) - 1)) != 0)
            {
              if (*((void *)&v148 + 1) <= (unint64_t)v25) {
                unint64_t v5 = (unint64_t)v25 % *((void *)&v148 + 1);
              }
              else {
                unint64_t v5 = v25;
              }
            }
            else
            {
              unint64_t v5 = (DWORD2(v148) - 1) & v25;
            }
          }
          uint64_t v63 = v148;
          char v64 = *(void **)(v148 + 8 * v5);
          if (v64)
          {
            *char v57 = *v64;
            uint64_t v27 = v146;
            unsigned int v65 = v144;
            goto LABEL_162;
          }
          *char v57 = v149;
          *(void *)&long long v149 = v57;
          *(void *)(v63 + 8 * v5) = &v149;
          uint64_t v27 = v146;
          unsigned int v65 = v144;
          if (*v57)
          {
            unint64_t v66 = *(void *)(*v57 + 8);
            if ((v52 & (v52 - 1)) != 0)
            {
              if (v66 >= v52) {
                v66 %= v52;
              }
            }
            else
            {
              v66 &= v52 - 1;
            }
            char v64 = (void *)(v148 + 8 * v66);
LABEL_162:
            *char v64 = v57;
          }
          ++*((void *)&v149 + 1);
          unsigned int v67 = v25;
          unsigned int v25 = v65;
          goto LABEL_164;
        }
        while (1)
        {
          unint64_t v39 = v38[1];
          if (v39 == v32)
          {
            if (*((_DWORD *)v38 + 4) == v30
              && *((unsigned __int8 *)v38 + 22) == v9
              && ((v9 & 2) == 0 || *((unsigned __int8 *)v38 + 20) == v28)
              && (v9 < 8 || *((unsigned __int8 *)v38 + 21) == v29))
            {
              unsigned int v67 = *((_DWORD *)v38 + 6);
LABEL_164:
              uint64_t v24 = v27 + 1;
              *(_DWORD *)(v136 + 4 * v27) = v67;
              if (++v26 == 3)
              {
                uint64_t v23 = *(void *)(v131 + 208);
                unint64_t v7 = (unint64_t)v133;
                goto LABEL_184;
              }
              goto LABEL_50;
            }
          }
          else
          {
            if (v35.u32[0] > 1uLL)
            {
              if (v39 >= *((void *)&v151 + 1)) {
                v39 %= *((void *)&v151 + 1);
              }
            }
            else
            {
              v39 &= *((void *)&v151 + 1) - 1;
            }
            if (v39 != v36) {
              goto LABEL_83;
            }
          }
          long long v38 = (uint64_t *)*v38;
          if (!v38) {
            goto LABEL_83;
          }
        }
      }
      if ((v9 & 2) != 0
        && ((unint64_t v68 = *(unsigned __int8 *)(v135 + v140), *(unsigned char *)(v135 + v140))
          ? (BOOL v69 = *(void *)(v7 + 280) > v68)
          : (BOOL v69 = 0),
            v69))
      {
        uint64_t v70 = *(void *)(*(void *)(v7 + 272) + ((v68 >> 3) & 0x18)) & (1 << v68);
        if (v9 < 8 || v70)
        {
          if (v70) {
            goto LABEL_49;
          }
          goto LABEL_184;
        }
      }
      else if (v9 < 8)
      {
        goto LABEL_184;
      }
      unint64_t v71 = *(unsigned __int8 *)(v134 + v140);
      if (*(unsigned char *)(v134 + v140)) {
        BOOL v72 = *(void *)(v7 + 200) > v71;
      }
      else {
        BOOL v72 = 0;
      }
      if (v72 && ((*(void *)(*(void *)(v7 + 192) + ((v71 >> 3) & 0x18)) >> v71) & 1) != 0) {
        goto LABEL_49;
      }
LABEL_184:
      if (++v140 >= v23 / 3) {
        goto LABEL_188;
      }
    }
  }
  unsigned int v25 = 0;
  uint64_t v24 = 0;
LABEL_188:
  if (v24 != v127)
  {
    rf::getMessage((rf *)"Error writing new index stream!", v154);
    rf::internal::logAssert((const char *)v154);
    if (v155 < 0) {
      operator delete(v154[0]);
    }
    rf::internal::debugBreakHandler(v124);
  }
  uint64_t v73 = objc_msgSend(*(id *)(v131 + 192), "device", v127);
  uint64_t v74 = 12 * v25;
  uint64_t v75 = [v73 newBufferWithLength:v74 options:0];
  id v76 = *(id *)a5;
  *(void *)a5 = v75;

  *(void *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 30;
  *(void *)(a5 + 16) = v25;
  uint64_t v147 = v25;

  uint64_t v77 = [*(id *)(v131 + 128) contents];
  uint64_t v78 = [*(id *)a5 contents];
  if ((v9 & 1) == 0)
  {
    uint64_t v145 = 0;
    uint64_t v79 = 0;
    if ((v9 & 4) == 0) {
      goto LABEL_191;
    }
LABEL_197:
    unint64_t v85 = [*(id *)(v131 + 192) device];
    uint64_t v86 = [v85 newBufferWithLength:v74 options:0];
    if (*(unsigned char *)(a5 + 136))
    {
      id v87 = *v128;
      *int8x8_t v128 = (id)v86;
    }
    else
    {
      *(void *)(a5 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v86;
      *(unsigned char *)(a5 + 136) = 1;
    }
    *(void *)(a5 + 120) = 30;
    *(void *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v25;

    uint64_t v80 = [*(id *)(v131 + 256) contents];
    uint64_t v81 = [*v128 contents];
    if ((v9 & 2) == 0) {
      goto LABEL_192;
    }
    goto LABEL_201;
  }
  unint64_t v82 = [*(id *)(v131 + 192) device];
  uint64_t v83 = [v82 newBufferWithLength:v74 options:0];
  if (*(unsigned char *)(a5 + 72))
  {
    id v84 = *v129;
    *uint64_t v129 = (id)v83;
  }
  else
  {
    *(void *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v83;
    *(unsigned char *)(a5 + 72) = 1;
  }
  *(void *)(a5 + 56) = 30;
  *(void *)(a5 + 64) = v25;

  uint64_t v145 = [*(id *)(v131 + 160) contents];
  uint64_t v79 = [*v129 contents];
  if ((v9 & 4) != 0) {
    goto LABEL_197;
  }
LABEL_191:
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  if ((v9 & 2) == 0)
  {
LABEL_192:
    uint64_t v143 = 0;
    goto LABEL_205;
  }
LABEL_201:
  unint64_t v88 = [*(id *)(v131 + 192) device];
  uint64_t v89 = [v88 newBufferWithLength:16 * v25 options:0];
  if (*(unsigned char *)(a5 + 104))
  {
    unint64_t v90 = *(void **)(a5 + 80);
    *(void *)(a5 + 80) = v89;
  }
  else
  {
    *(void *)(a5 + 80) = v89;
    *(unsigned char *)(a5 + 104) = 1;
  }
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 31;
  *(void *)(a5 + 96) = v25;

  uint64_t v143 = [*(id *)(a5 + 80) contents];
LABEL_205:
  if (v9 >= 8)
  {
    unint64_t v91 = [*(id *)(v131 + 192) device];
    uint64_t v92 = [v91 newBufferWithLength:16 * v25 options:0];
    if (*(unsigned char *)(a5 + 168))
    {
      unint64_t v93 = *(void **)(a5 + 144);
      *(void *)(a5 + 144) = v92;
    }
    else
    {
      *(void *)(a5 + 144) = v92;
      *(unsigned char *)(a5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 1;
    }
    *(void *)(a5 + 152) = 31;
    *(void *)(a5 + 160) = v25;

    uint64_t v141 = [*(id *)(a5 + 144) contents];
  }
  else
  {
    uint64_t v141 = 0;
  }
  if (v25)
  {
    unint64_t v94 = 0;
    uint64_t v139 = (_OWORD *)(v7 + 256);
    unint64_t v138 = (_OWORD *)(v7 + 176);
    unint64_t v95 = *((void *)&v148 + 1);
    do
    {
      if (v95)
      {
        uint8x8_t v96 = (uint8x8_t)vcnt_s8((int8x8_t)v95);
        v96.i16[0] = vaddlv_u8(v96);
        if (v96.u32[0] > 1uLL)
        {
          unint64_t v7 = v94;
          if (v95 <= v94) {
            unint64_t v7 = v94 % v95;
          }
        }
        else
        {
          unint64_t v7 = (v95 + 0xFFFFFFFF) & v94;
        }
        long long v97 = *(void ***)(v148 + 8 * v7);
        if (v97)
        {
          unint64_t v98 = *v97;
          if (*v97)
          {
            do
            {
              unint64_t v99 = v98[1];
              if (v99 == v94)
              {
                if (v94 == *((_DWORD *)v98 + 4))
                {
                  float v122 = v133;
                  goto LABEL_252;
                }
              }
              else
              {
                if (v96.u32[0] > 1uLL)
                {
                  if (v99 >= v95) {
                    v99 %= v95;
                  }
                }
                else
                {
                  v99 &= v95 - 1;
                }
                if (v99 != v7) {
                  break;
                }
              }
              unint64_t v98 = (void *)*v98;
            }
            while (v98);
          }
        }
      }
      unint64_t v98 = operator new(0x20uLL);
      *unint64_t v98 = 0;
      v98[1] = v94;
      *((_DWORD *)v98 + 4) = v94;
      *(void *)((char *)v98 + 20) = 0;
      float v100 = (float)(unint64_t)(*((void *)&v149 + 1) + 1);
      if (!v95 || (float)(v150 * (float)v95) < v100)
      {
        BOOL v101 = v95 < 3 || (v95 & (v95 - 1)) != 0;
        unint64_t v102 = v101 | (2 * v95);
        unint64_t v103 = vcvtps_u32_f32(v100 / v150);
        if (v102 <= v103) {
          size_t v104 = v103;
        }
        else {
          size_t v104 = v102;
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v148, v104);
        unint64_t v95 = *((void *)&v148 + 1);
        if ((*((void *)&v148 + 1) & (*((void *)&v148 + 1) - 1)) != 0)
        {
          if (*((void *)&v148 + 1) <= v94) {
            unint64_t v7 = v94 % *((void *)&v148 + 1);
          }
          else {
            unint64_t v7 = v94;
          }
        }
        else
        {
          unint64_t v7 = (*((void *)&v148 + 1) + 0xFFFFFFFFLL) & v94;
        }
      }
      uint64_t v105 = v148;
      long long v106 = *(void **)(v148 + 8 * v7);
      if (v106)
      {
        *unint64_t v98 = *v106;
        float v122 = v133;
      }
      else
      {
        *unint64_t v98 = v149;
        *(void *)&long long v149 = v98;
        *(void *)(v105 + 8 * v7) = &v149;
        float v122 = v133;
        if (!*v98) {
          goto LABEL_251;
        }
        unint64_t v107 = *(void *)(*v98 + 8);
        if ((v95 & (v95 - 1)) != 0)
        {
          if (v107 >= v95) {
            v107 %= v95;
          }
        }
        else
        {
          v107 &= v95 - 1;
        }
        long long v106 = (void *)(v148 + 8 * v107);
      }
      *long long v106 = v98;
LABEL_251:
      ++*((void *)&v149 + 1);
LABEL_252:
      uint64_t v108 = (3 * *((_DWORD *)v98 + 5));
      uint64_t v109 = (3 * v94);
      *(_DWORD *)(v78 + 4 * v109) = *(_DWORD *)(v77 + 4 * v108);
      uint64_t v110 = (v108 + 1);
      uint64_t v111 = (v109 + 1);
      *(_DWORD *)(v78 + 4 * v111) = *(_DWORD *)(v77 + 4 * v110);
      uint64_t v112 = (v108 + 2);
      uint64_t v113 = (v109 + 2);
      *(_DWORD *)(v78 + 4 * v113) = *(_DWORD *)(v77 + 4 * v112);
      if (v9)
      {
        *(_DWORD *)(v79 + 4 * v109) = *(_DWORD *)(v145 + 4 * v108);
        *(_DWORD *)(v79 + 4 * v111) = *(_DWORD *)(v145 + 4 * v110);
        *(_DWORD *)(v79 + 4 * v113) = *(_DWORD *)(v145 + 4 * v112);
      }
      if ((v9 & 4) != 0)
      {
        *(_DWORD *)(v81 + 4 * v109) = *(_DWORD *)(v80 + 4 * v108);
        *(_DWORD *)(v81 + 4 * v111) = *(_DWORD *)(v80 + 4 * v110);
        *(_DWORD *)(v81 + 4 * v113) = *(_DWORD *)(v80 + 4 * v112);
      }
      if ((v9 & 2) != 0)
      {
        unint64_t v114 = *((unsigned __int8 *)v98 + 24);
        uint64_t v115 = v122[28];
        BOOL v116 = (v122[29] - v115) >> 4 <= v114 || v114 == 0;
        uint64_t v117 = (_OWORD *)(v115 + 16 * v114);
        if (v116) {
          uint64_t v117 = v139;
        }
        *(_OWORD *)(v143 + 4 * (4 * v94)) = *v117;
      }
      if (v9 >= 8)
      {
        unint64_t v118 = *((unsigned __int8 *)v98 + 25);
        uint64_t v119 = v122[18];
        BOOL v120 = (v122[19] - v119) >> 4 <= v118 || v118 == 0;
        float v121 = (_OWORD *)(v119 + 16 * v118);
        if (v120) {
          float v121 = v138;
        }
        *(_OWORD *)(v141 + 4 * (4 * v94)) = *v121;
      }
      ++v94;
    }
    while (v94 != v147);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v148);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&v151);
}

void sub_235AB8484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (*(char *)(v27 - 137) < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  rf::data_flow::consumer::MeshVisualizer::DebugVisMesh::~DebugVisMesh(a12);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::anonymous namespace'::AttributesNeededForTheseModes(int a1, int a2)
{
  if ((a1 - 2) >= 8) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = 0x200010101090304uLL >> (8 * (a1 - 2));
  }
  switch(a2)
  {
    case 2:
      v2 |= 4u;
      break;
    case 3:
      v2 |= 2u;
      break;
    case 4:
      v2 |= 8u;
      break;
    case 5:
      v2 |= 1u;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t std::optional<rf::data_flow::MeshBuffer>::operator=[abi:ne180100]<rf::data_flow::MeshBuffer const&,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  id v5 = *(id *)a2;
  if (v4)
  {
    BOOL v6 = *(void **)a1;
    *(void *)a1 = v5;

    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    *(void *)a1 = v5;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void rf::data_flow::consumer::MeshVisualizer::DebugVisMesh::~DebugVisMesh(id *this)
{
  if (*((unsigned char *)this + 168)) {

  }
  if (*((unsigned char *)this + 136)) {
  if (*((unsigned char *)this + 104))
  }

  if (*((unsigned char *)this + 72)) {
}
  }

uint64_t rf::data_flow::consumer::MeshVisualizer::setupMaterials(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 64);
  if (v2 == 1)
  {
    uint64_t result = REAssetHandleIsLoaded();
    if (!result) {
      return result;
    }
    uint64_t AssetHandle = REAssetManagerMaterialMemoryAssetCreate();
    uint64_t v5 = *(void *)(v1 + 48);
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = AssetHandle;
    if (v5) {
      RERelease();
    }
    uint64_t AssetHandle = 0;
    uint64_t result = (uint64_t)RESharedPtr<REAsset>::~RESharedPtr(&AssetHandle);
    int v4 = 2;
  }
  else
  {
    if (v2) {
      return result;
    }
    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    uint64_t v3 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = AssetHandle;
    if (v3) {
      RERelease();
    }
    uint64_t AssetHandle = 0;
    RESharedPtr<REAsset>::~RESharedPtr(&AssetHandle);
    uint64_t result = REAssetHandleLoadAsync();
    int v4 = 1;
  }
  *(_DWORD *)(v1 + 64) = v4;
  return result;
}

void sub_235AB87A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  RESharedPtr<REAsset>::~RESharedPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::MeshVisualizer::setMaterial(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(_DWORD *)(result + 64) == 2)
  {
    uint64_t v9 = result;
    uint64_t result = REPrimitiveRenderSetMeshMaterial();
    if (a4) {
      uint64_t result = REPrimitiveRenderSetMeshMaterialTechniqueMapping();
    }
    if (a5) {
      uint64_t result = REPrimitiveRenderSetMeshMaterialTechniqueMapping();
    }
    *(void *)(v9 + 72) = a3;
    *(void *)(v9 + 80) = a2;
    *(_DWORD *)(v9 + 56) = a4;
    *(_DWORD *)(v9 + 60) = a5;
  }
  return result;
}

void rf::data_flow::consumer::MeshVisualizer::updateDebugVisMesh(rf::data_flow::consumer::MeshVisualizer *this, const rf::data_flow::consumer::Mesh *a2)
{
  int v2 = *((_DWORD *)this + 14);
  int v3 = *((_DWORD *)this + 15);
  if (*((void *)this + 7)
  {
    rf::data_flow::consumer::MeshVisualizer::GenerateDebugMeshFromUpdateDataMesh((unint64_t)this, (uint64_t)a2, v2, v3, (uint64_t)v9);
    BOOL v6 = operator new(0xD0uLL);
    v6[1] = 0;
    v6[2] = 0;
    void *v6 = &unk_26E8F4D40;
    std::construct_at[abi:ne180100]<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh,rf::data_flow::consumer::MeshVisualizer::DebugVisMesh,rf::data_flow::consumer::MeshVisualizer::DebugVisMesh*>((uint64_t)(v6 + 3), (uint64_t *)v9);
    BOOL v17 = a2;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t *)this, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v17);
    float32x4_t v8 = (std::__shared_weak_count *)v7[7];
    _OWORD v7[6] = v6 + 3;
    v7[7] = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v16) {

    }
    if (v14) {
    if (v12)
    }

    if (v10) {
  }
    }
}

void sub_235AB89A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  rf::data_flow::consumer::MeshVisualizer::DebugVisMesh::~DebugVisMesh((id *)va);
  _Unwind_Resume(a1);
}

BOOL rf::data_flow::consumer::anonymous namespace'::HasNeededMeshAttributesForTheseModes(unsigned char *a1, int a2, int a3)
{
  if (a1[152]) {
    BOOL v3 = a1[216] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  if ((v5 & 1) != 0 && !a1[184]) {
    return 0;
  }
  if ((v5 & 2) != 0 && !a1[248] || (v5 & 4) != 0 && !a1[280]) {
    return 0;
  }
  return v5 < 8 || a1[312] != 0;
}

void rf::data_flow::consumer::MeshVisualizer::drawDebugVisMesh(rf::data_flow::consumer::MeshVisualizer *this, const rf::data_flow::consumer::Mesh *a2)
{
  if (*((void *)this + 7)
  {
    float32x4_t v8 = a2;
    int v4 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t *)this, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v8);
    uint64_t v6 = v4[6];
    unsigned int v5 = (std::__shared_weak_count *)v4[7];
    unint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)(v6 + 176))
    {
      REPrimitiveRenderAddStaticMesh();
      unsigned int v5 = v7;
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_235AB8B40(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2rf9data_flow8consumer14MeshVisualizer16drawDebugVisMeshERKNS1_4MeshE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  REPrimitiveRenderStaticMeshAddStandardAttribute();
  REPrimitiveRenderStaticMeshAddStandardAttribute();
  unsigned int v5 = **(unsigned char ***)(a1 + 40);
  if (v5[72])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    unsigned int v5 = **(unsigned char ***)(a1 + 40);
  }
  if (v5[136])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    unsigned int v5 = **(unsigned char ***)(a1 + 40);
  }
  if (v5[104])
  {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
    unsigned int v5 = **(unsigned char ***)(a1 + 40);
  }
  if (v5[168]) {
    REPrimitiveRenderStaticMeshAddStandardAttribute();
  }
  REMakeSRTFromMatrix();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3();
  int v6 = *(_DWORD *)(v4 + 56);
  if (v6 == 6 || *(_DWORD *)(v4 + 60) == 6)
  {
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat();
    int v6 = *(_DWORD *)(v4 + 56);
  }
  if (v6 == 7) {
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  }
  if (*(_DWORD *)(v4 + 60) == 7) {
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  }
  if (*(_DWORD *)(v4 + 56) == 8)
  {
    unint64_t v7 = (const float *)(v4 + 128);
    vld1q_dup_f32(v7);
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
    vld1q_dup_f32(v7);
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
    REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4();
  }
  REPrimitiveRenderStaticMeshSetVertexCount();
  REPrimitiveRenderStaticMeshSetIndexCount();
  __asm
  {
    FMOV            V0.4S, #-25.0
    FMOV            V1.4S, #25.0
  }
  REAABBInit();
  return MEMORY[0x270F1F568](a2);
}

__n128 __copy_helper_block_ea8_32c81_ZTSKZN2rf9data_flow8consumer14MeshVisualizer16drawDebugVisMeshERKNS1_4MeshEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = *(void *)(a2 + 24);
  if (!v8)
  {
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v39 = *(void **)a2;
    }
    else {
      unint64_t v39 = (void *)a2;
    }
    unint64_t v8 = ((*v39 >> 2) + (*v39 << 6) + v39[1] + 2654435769) ^ *v39;
    *(void *)(a2 + 24) = v8;
  }
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v12 = *(void ***)(*a1 + 8 * v4);
    if (v12)
    {
      id v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (rf::data_flow::RFUUID::Equality::operator()((uint64_t)(a1 + 4), (uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          id v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  id v15 = a1 + 2;
  id v13 = operator new(0x40uLL);
  *id v13 = 0;
  v13[1] = v8;
  long long v16 = (*a4)[1];
  *((_OWORD *)v13 + 1) = **a4;
  *((_OWORD *)v13 + 2) = v16;
  v13[6] = 0;
  v13[7] = 0;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v15;
          if (*v15)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v15;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_56;
                  }
                  *uint64_t v26 = *v32;
                  *unint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_56:
                uint64_t v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        long long v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *a1;
  uint8x8_t v35 = *(void **)(*a1 + 8 * v4);
  if (v35)
  {
    *id v13 = *v35;
LABEL_73:
    *uint8x8_t v35 = v13;
    goto LABEL_74;
  }
  *id v13 = *v15;
  *id v15 = v13;
  *(void *)(v34 + 8 * v4) = v15;
  if (*v13)
  {
    unint64_t v36 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    uint8x8_t v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_73;
  }
LABEL_74:
  ++a1[3];
  return v13;
}

void sub_235AB9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F4D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F4D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {

  }
  if (*(unsigned char *)(a1 + 160)) {
  if (*(unsigned char *)(a1 + 128))
  }

  if (*(unsigned char *)(a1 + 96)) {
  int v2 = *(void **)(a1 + 24);
  }
}

uint64_t std::construct_at[abi:ne180100]<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh,rf::data_flow::consumer::MeshVisualizer::DebugVisMesh,rf::data_flow::consumer::MeshVisualizer::DebugVisMesh*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 1);
  uint64_t v3 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v3;
  *(_OWORD *)(result + 32) = *((_OWORD *)a2 + 2);
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
  *(unsigned char *)(result + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v4 = a2[6];
    a2[6] = 0;
    *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
    *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 7);
    *(unsigned char *)(result + 72) = 1;
  }
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  if (*((unsigned char *)a2 + 104))
  {
    uint64_t v5 = a2[10];
    a2[10] = 0;
    *(void *)(result + 80) = v5;
    *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = *(_OWORD *)(a2 + 11);
    *(unsigned char *)(result + 104) = 1;
  }
  *(unsigned char *)(result + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(unsigned char *)(result + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    uint64_t v6 = a2[14];
    a2[14] = 0;
    *(void *)(result + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v6;
    *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 15);
    *(unsigned char *)(result + 136) = 1;
  }
  *(unsigned char *)(result + 144) = 0;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    uint64_t v7 = a2[18];
    a2[18] = 0;
    *(void *)(result + 144) = v7;
    *(_OWORD *)(result + 152) = *(_OWORD *)(a2 + 19);
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 1;
  }
  *(void *)(result + 176) = a2[22];
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(void *a1, uint64_t a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t RFIsRealityFusionFeatureFlagEnabled(int a1)
{
  BOOL v1 = 1;
  switch(a1)
  {
    case 0:
      MainBundle = CFBundleGetMainBundle();
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
      applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
      unint64_t v4 = v15;
      if ((v15 & 0x80u) != 0) {
        unint64_t v4 = (unint64_t)__p[1];
      }
      if (v4 != 25)
      {
        BOOL v1 = 1;
        if (((char)v15 & 0x80000000) == 0) {
          return v1;
        }
        goto LABEL_27;
      }
      uint64_t v5 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      unint64_t v8 = v5[2];
      int v9 = *((unsigned __int8 *)v5 + 24);
      BOOL v1 = v6 != (void *)0x6C7070612E6D6F63
        || v7 != (void *)0x74696C6165522E65
        || v8 != (void *)0x65736F706D6F4379
        || v9 != 114;
      if ((char)v15 < 0) {
LABEL_27:
      }
        operator delete(__p[0]);
      return v1;
    case 1:
    case 2:
      return v1;
    case 3:
    case 5:
      return 0;
    case 4:
    case 6:
      return _os_feature_enabled_impl();
    default:
      if (a1 != 255) {
        return 0;
      }
      return v1;
  }
}

BOOL RFIsRealityFusionSupported()
{
  MainBundle = CFBundleGetMainBundle();
  CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
  applesauce::CF::details::CFString_get_value<true>(Identifier, (uint64_t)__p);
  unint64_t v2 = v14;
  if ((v14 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2 == 25)
  {
    uint64_t v3 = (void **)__p[0];
    if ((v14 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    unint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    uint64_t v6 = v3[2];
    int v7 = *((unsigned __int8 *)v3 + 24);
    BOOL v11 = v4 != (void *)0x6C7070612E6D6F63
       || v5 != (void *)0x74696C6165522E65
       || v6 != (void *)0x65736F706D6F4379
       || v7 != 114;
    if ((char)v14 < 0) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v11 = 1;
    if ((char)v14 < 0) {
LABEL_21:
    }
      operator delete(__p[0]);
  }
  return v11;
}

void RFServiceManagerCreate(rf::AnchorDefinitionComponent *a1)
{
  BOOL v1 = (rf::HandMetadataComponent *)rf::AnchorDefinitionComponent::instance(a1);
  ++*((_DWORD *)v1 + 38);
  unint64_t v2 = rf::HandMetadataComponent::instance(v1);
  ++*((_DWORD *)v2 + 18);
  uint64_t v3 = rf::PlacementComponentTypeInfo::instance((rf::PlacementComponentTypeInfo *)v2);
  ++*((_DWORD *)v3 + 34);
  unint64_t v4 = rf::AnchorMetadataComponent::instance((rf::AnchorMetadataComponent *)v3);
  ++v4[36];
  int v5 = _os_feature_enabled_impl();
  int v6 = _os_feature_enabled_impl();
  int v7 = _os_feature_enabled_impl();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.re.UpdateMeshAssetSlowPath");
  unsigned __int16 v8 = rf::UserDefaults::BOOLValue((CFStringRef *)&v16, (const UInt8 *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  char v9 = v8;
  if (v8 <= 0x100u) {
    char v9 = 0;
  }
  BOOL v10 = v9 != 0;
  rf::UserDefaults::~UserDefaults(&v16);
  int v11 = 0x1000000;
  if (!v7) {
    int v11 = 0;
  }
  int v12 = 0x10000;
  if (!v6) {
    int v12 = 0;
  }
  int v13 = 257;
  if (!v5) {
    int v13 = 1;
  }
  LODWORD(__p[0]) = v12 | v13 | v11;
  BYTE4(__p[0]) = v10;
  if (qword_26AB58660 != -1) {
    dispatch_once(&qword_26AB58660, &__block_literal_global_5);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235AB98C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x237DEE2B0](v15, 0x10F2C40BEFC2129);
  _Unwind_Resume(a1);
}

rf::AnchorMetadataComponent *RFServiceManagerCleanUp(rf::AnchorDefinitionComponent *a1)
{
  BOOL v1 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::instance(a1);
  int v2 = *((_DWORD *)v1 + 38);
  BOOL v3 = __OFSUB__(v2--, 1);
  *((_DWORD *)v1 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v2;
  if ((v2 < 0) ^ v3 | (v2 == 0)) {
    BOOL v1 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::deinit(v1);
  }
  unint64_t v4 = rf::HandMetadataComponent::instance(v1);
  int v5 = *((_DWORD *)v4 + 18);
  BOOL v3 = __OFSUB__(v5--, 1);
  *((_DWORD *)v4 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v5;
  if ((v5 < 0) ^ v3 | (v5 == 0))
  {
    *((_DWORD *)v4 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *unint64_t v4 = 0;
  }
  int v6 = rf::PlacementComponentTypeInfo::instance((rf::PlacementComponentTypeInfo *)v4);
  int v7 = *((_DWORD *)v6 + 34);
  BOOL v3 = __OFSUB__(v7--, 1);
  *((_DWORD *)v6 + 34) = v7;
  if ((v7 < 0) ^ v3 | (v7 == 0))
  {
    *((_DWORD *)v6 + 34) = 0;
    uint64_t *v6 = 0;
  }
  __n128 result = (rf::AnchorMetadataComponent *)rf::AnchorMetadataComponent::instance((rf::AnchorMetadataComponent *)v6);
  int v9 = *((_DWORD *)result + 36);
  BOOL v3 = __OFSUB__(v9--, 1);
  *((_DWORD *)result + 36) = v9;
  if ((v9 < 0) ^ v3 | (v9 == 0))
  {
    return (rf::AnchorMetadataComponent *)rf::AnchorMetadataComponent::deinit(result);
  }
  return result;
}

uint64_t RFServiceManagerGenerateSnapshot(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v3 = *(void *)(v1 + 32);
  v9[0] = *(void *)(v1 + 48);
  v9[1] = ServiceLocator;
  void v9[2] = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)v9, (uint64_t)v6);
  uint64_t v4 = *(void *)(v1 + 3288);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  *(double *)(v1 + 3304) = (*(double (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (__p)
  {
    unsigned __int16 v8 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
  return v1 + 3304;
}

void sub_235AB9A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RFServiceManagerUpdate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v3 = *(void *)(v1 + 32);
  v9[0] = *(void *)(v1 + 48);
  v9[1] = ServiceLocator;
  void v9[2] = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)v9, (uint64_t)v6);
  uint64_t v4 = *(void *)(v1 + 3288);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  *(double *)(v1 + 3304) = (*(double (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (__p)
  {
    unsigned __int16 v8 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
  return v1 + 3304;
}

void sub_235AB9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RFServiceManagerUpdateServices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16) + 16;
  RESceneGetECSManagerNullable();
  LODWORD(v5) = 0;
  *((void *)&v5 + 1) = REECSManagerGetServiceLocator();
  char v6 = 1;
  uint64_t v7 = a2;
  char v8 = 1;
  uint64_t v9 = 0;
  return rf::Session::processConsumerRequest(v3, &v5);
}

void RFServiceManagerAddSystems()
{
  REECSManagerGetServiceLocator();
  rf::Session::addSystemToECSSystem();
}

rf::RealityFusionSystem *RFServiceManagerRemoveSystems(uint64_t a1)
{
  return std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100]((rf::RealityFusionSystem **)(*(void *)(a1 + 16) + 3248), 0);
}

void RFServiceManagerSetARKitDataProvider(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
  if (v3) {
    *(void *)(v3[3] + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
}

void sub_235AB9D34(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235AB9D48(void *a1)
{
}

void sub_235AB9D64(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *RFServiceManagerGetARKitDataProvider(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 128);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetSyntheticARDataProvider(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
  if (v3) {
    *(void *)(v3[3] + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
}

void sub_235AB9FC0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_235AB9FE0(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235AB9FF4(void *a1)
{
}

void *RFServiceManagerGetSyntheticARDataProvider(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 128);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetAnchorDataProvider(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
  if (v3) {
    *(void *)(v3[3] + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
}

void sub_235ABA250(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_235ABA270(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABA284(void *a1)
{
}

void *RFServiceManagerGetCameraMetadataProvider(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 128);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetCameraMetadataProvider(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
  if (v3) {
    *(void *)(v3[3] + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 128), (uint64_t *)&v4);
}

void sub_235ABA4DC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_235ABA4FC(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABA510(void *a1)
{
}

void *RFServiceManagerGetAnchorDataProvider(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 128);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetMeshReconstructionService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABA76C(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABA780(void *a1)
{
}

void sub_235ABA79C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetMeshReconstructionService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetAnchorManagementService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABA9E0(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABA9F4(void *a1)
{
}

void sub_235ABAA10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetAnchorManagementService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetLoggingService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABAC4C(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABAC60(void *a1)
{
}

void sub_235ABAC7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetLoggingService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetQueryService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABAE94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235ABAEA8(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABAEBC(void *a1)
{
}

void *RFServiceManagerGetQueryService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetDebugService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABB100(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABB114(void *a1)
{
}

void sub_235ABB130(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetDebugService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetEnvironmentProbePlacementService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABB36C(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABB380(void *a1)
{
}

void sub_235ABB39C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetEnvironmentProbePlacementService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetVFXCollisionService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABB5D8(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABB5EC(void *a1)
{
}

void sub_235ABB608(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetVFXCollisionService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetSyntheticEnvironmentService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABB844(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABB858(void *a1)
{
}

void sub_235ABB874(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetSyntheticEnvironmentService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetAtmospherePlacementService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABBA8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235ABBAA0(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABBAB4(void *a1)
{
}

void *RFServiceManagerGetAtmospherePlacementService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 2);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 2));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetRayCastingService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABBCD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235ABBCE8(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABBCFC(void *a1)
{
}

void *RFServiceManagerGetRayCastingService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void RFServiceManagerSetClientSharedDataService(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (cf)
  {
    CFRetain(cf);
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>((void *)(v2 + 88), (uint64_t *)&v3);
}

void sub_235ABBF40(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235ABBF54(void *a1)
{
}

void sub_235ABBF70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *RFServiceManagerGetClientSharedDataService(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 16) + 88);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(v1, (uint64_t *)&v8);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (const void *)v2[3];
    if (v4
    {
      char v6 = (std::__shared_weak_count *)v3[4];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = (void *)*(v5 - 1);
      if (v3)
      {
        CFRetain((CFTypeRef)*(v5 - 1));
        CFRetain(v3);
        CFRelease(v3);
        CFRelease(v3);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void *RFServiceManagerSetUpdateTimeSampler(uint64_t a1, uint64_t a2)
{
  v13[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  char v8 = &unk_26E8F5368;
  uint64_t v9 = MEMORY[0x237DEE740](a2);
  int v12 = v11;
  BOOL v10 = &v8;
  v11[0] = &unk_26E8F5368;
  uint64_t v4 = v2 + 3264;
  v11[1] = MEMORY[0x237DEE740](v9, v3);
  if (v11 != (void *)(v2 + 3264))
  {
    long long v5 = v12;
    uint64_t v6 = *(void *)(v2 + 3288);
    if (v12 == v11)
    {
      if (v6 == v4)
      {
        (*(void (**)(void *, void *))(v11[0] + 24))(v11, v13);
        (*(void (**)(void *))(*v12 + 32))(v12);
        int v12 = 0;
        (*(void (**)(void, void *))(**(void **)(v2 + 3288) + 24))(*(void *)(v2 + 3288), v11);
        (*(void (**)(void))(**(void **)(v2 + 3288) + 32))(*(void *)(v2 + 3288));
        *(void *)(v2 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 0;
        int v12 = v11;
        (*(void (**)(void *, uint64_t))(v13[0] + 24))(v13, v2 + 3264);
        (*(void (**)(void *))(v13[0] + 32))(v13);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, v2 + 3264);
        (*(void (**)(void *))(*v12 + 32))(v12);
        int v12 = *(void **)(v2 + 3288);
      }
      *(void *)(v2 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(v2 + 3264, v11);
      (*(void (**)(void))(**(void **)(v2 + 3288) + 32))(*(void *)(v2 + 3288));
      *(void *)(v2 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = v12;
      int v12 = v11;
    }
    else
    {
      int v12 = *(void **)(v2 + 3288);
      *(void *)(v2 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = v5;
    }
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](&v8);
}

void sub_235ABC360(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *RFServiceManagerSetAnchorCleanUpCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F53E8;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v4);
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((void *)(v2 + 3112), (uint64_t)v5);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v5);
  return std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v4);
}

void sub_235ABC414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RFServiceManagerSetExternalAnchorCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F5478;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v4);
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((void *)(v2 + 3144), (uint64_t)v5);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v5);
  return std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v4);
}

void sub_235ABC4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RFServiceManagerSetRelocalizedAnchorCallback(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  v4[0] = &unk_26E8F54F8;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v4);
  std::function<void ()(rf::data_flow::RFUUID const&)>::operator=((void *)(v2 + 3176), (uint64_t)v5);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v5);
  return std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v4);
}

void sub_235ABC5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t RFServiceManagerCopyAnchorMatchingIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  rf::ARState::getAnchorWithIdentifier((rf::ARState *)(*(void *)(a1 + 16) + 176), a2, v3);
  if (v3[272]) {
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>&>();
  }
  return 0;
}

void sub_235ABC668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

const void **rf::CFObjectRef<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~CFObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *RFServiceManagerGetAnchorPtrMatchingIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  return rf::ARState::getAnchorPtrWithIdentifier((rf::ARState *)(*(void *)(a1 + 16) + 176), a2);
}

CFMutableArrayRef RFServiceManagerCopyAnchors(uint64_t a1)
{
  rf::ARState::getAnchors((rf::ARState *)(*(void *)(a1 + 16) + 176), &v3);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 4), MEMORY[0x263EFFF70]);
  if (v3 != v4) {
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>();
  }
  value = &v3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&value);
  return Mutable;
}

void sub_235ABC798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>()
{
  if (rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag != -1) {
    dispatch_once(&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_dispatchOnceFlag, &__block_literal_global_32);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235ABC8AC(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10F2C40557DAE71);
  _Unwind_Resume(a1);
}

void *RFServiceManagerVisitAnchors(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16) + 16;
  v4[0] = &unk_26E8F5598;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  rf::Session::visitAnchors(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100](v4);
}

void sub_235ABC968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

CFMutableArrayRef RFServiceManagerCopyUpdatedAnchors(uint64_t a1)
{
  rf::ARState::getUpdatedAnchors((rf::ARState *)(*(void *)(a1 + 16) + 176), &v3);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 4), MEMORY[0x263EFFF70]);
  if (v3 != v4) {
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>();
  }
  value = &v3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&value);
  return Mutable;
}

void sub_235ABCA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *RFServiceManagerVisitUpdatedAnchors(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16) + 16;
  v4[0] = &unk_26E8F5628;
  v4[1] = MEMORY[0x237DEE740](a2);
  uint64_t v4[3] = v4;
  rf::Session::visitUpdatedAnchors(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100](v4);
}

void sub_235ABCB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

long long *RFServiceManagerGetCameraIdentifierPtr(rf::helpers *a1)
{
  __n128 result = rf::helpers::kCameraIdentifier(a1);
  if (*((unsigned char *)result + 16)) {
    return *(long long **)result;
  }
  return result;
}

long long *RFServiceManagerGetBodyIdentifierPtr(rf::helpers *a1)
{
  __n128 result = rf::helpers::kBodyIdentifier(a1);
  if (*((unsigned char *)result + 16)) {
    return *(long long **)result;
  }
  return result;
}

uint64_t RFServiceManagerCopyNearestPlane(uint64_t a1, char a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, double a11)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a1 + 16);
  v14[0] = a9;
  v14[1] = a10;
  char v15 = a2;
  uint64_t v16 = a3;
  double v17 = a11;
  rf::helpers::getNearestPlaneAnchor((unint64_t)v14, v12 + 320, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v19, a9);
  if (v21)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v14, (uint64_t)v19);
    int v18 = v20;
    *a4 = v20;
    rf::makeCustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>();
  }
  return 0;
}

void sub_235ABCC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (LOBYTE(STACK[0x250])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a47);
  }
  _Unwind_Resume(a1);
}

uint64_t *RFServiceManagerGetNearestPlanePtr(uint64_t a1, char a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, double a11)
{
  uint64_t v12 = *(void *)(a1 + 16);
  v15[0] = a9;
  v15[1] = a10;
  char v16 = a2;
  uint64_t v17 = a3;
  double v18 = a11;
  __n128 result = rf::helpers::getNearestPlaneAnchorConstPtr((unint64_t)v15, v12 + 320, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  *a4 = v14;
  return result;
}

uint64_t RFServiceManagerGetFloorPlaneForPlacement(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v1 + 944)) {
    return v1 + 672;
  }
  else {
    return 0;
  }
}

uint64_t RFServiceManagerSetServiceLocator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(v2 + 3296) = a2;
  for (char i = *(void **)(v2 + 144); i; char i = (void *)*i)
    *(void *)(i[3] + 16) = a2;
  return result;
}

void *std::function<void ()(rf::data_flow::RFUUID const&)>::operator=(void *a1, uint64_t a2)
{
  v8[3] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_235ABCF88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(rf::data_flow::RFUUID const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_7SessionEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_13[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::Session]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58668 = 0u;
  xmmword_26AB58678 = 0u;
  xmmword_26AB58688 = 0u;
  unk_26AB58698 = 0u;
  xmmword_26AB586A8 = 0u;
  unk_26AB586B8 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58668 + 1) = v7;
  *(void *)&xmmword_26AB58678 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::initCallback;
  *(void *)&xmmword_26AB58688 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::finalizeCallback;
  qword_26AB586A0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB586A8 = rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyDebugDescriptionCallback;
  _MergedGlobals_6 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235ABD1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::Session>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::Session>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::Session>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::Session>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::Session>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 3360));
    int v3 = *(void ***)(v2 + 3320);
    uint64_t v4 = *(void ***)(v2 + 3328);
    if (v4 == v3)
    {
      char v8 = (void *)(v2 + 3352);
      uint64_t v4 = *(void ***)(v2 + 3320);
    }
    else
    {
      unint64_t v5 = *(void *)(v2 + 3344);
      uint64_t v6 = &v3[v5 >> 4];
      uint64_t v7 = (void **)((char *)*v6 + 1104 * (v5 & 0xF));
      char v8 = (void *)(v2 + 3352);
      uint64_t v9 = *(uint64_t *)((char *)v3 + (((*(void *)(v2 + 3352) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 1104 * ((*(_DWORD *)(v2 + 3352) + (int)v5) & 0xF);
      if (v7 != (void **)v9)
      {
        do
        {
          rf::data_flow::provider::InputData::~InputData(v7);
          uint64_t v7 = (void **)(v10 + 1104);
          if ((char *)v7 - (unsigned char *)*v6 == 17664)
          {
            int v11 = (void **)v6[1];
            ++v6;
            uint64_t v7 = v11;
          }
        }
        while (v7 != (void **)v9);
        uint64_t v4 = *(void ***)(v2 + 3328);
        int v3 = *(void ***)(v2 + 3320);
      }
    }
    *char v8 = 0;
    unint64_t v12 = (char *)v4 - (char *)v3;
    if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
    {
      do
      {
        operator delete(*v3);
        int v3 = (void **)(*(void *)(v2 + 3320) + 8);
        *(void *)(v2 + 3320) = v3;
        uint64_t v4 = *(void ***)(v2 + 3328);
        unint64_t v12 = (char *)v4 - (char *)v3;
      }
      while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
    }
    unint64_t v13 = v12 >> 3;
    if (v13 == 1)
    {
      uint64_t v14 = 8;
    }
    else
    {
      if (v13 != 2)
      {
LABEL_17:
        if (v3 != v4)
        {
          do
          {
            char v15 = *v3++;
            operator delete(v15);
          }
          while (v3 != v4);
          uint64_t v16 = *(void *)(v2 + 3320);
          uint64_t v17 = *(void *)(v2 + 3328);
          if (v17 != v16) {
            *(void *)(v2 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = v17 + ((v16 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        double v18 = *(void **)(v2 + 3312);
        if (v18) {
          operator delete(v18);
        }
        std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100]((void *)(v2 + 3264));
        BOOL v19 = *(rf::CoordinateSpaceTracker **)(v2 + 3256);
        *(void *)(v2 + 3256) = 0;
        if (v19)
        {
          rf::CoordinateSpaceTracker::~CoordinateSpaceTracker(v19);
          MEMORY[0x237DEE2B0]();
        }
        std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100]((rf::RealityFusionSystem **)(v2 + 3248), 0);
        rf::ARState::~ARState((rf::ARState *)(v2 + 176));
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(v2 + 128);
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(v2 + 88);
        int v20 = *(std::__shared_weak_count **)(v2 + 64);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        char v21 = *(std::__shared_weak_count **)(v2 + 40);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        uint64_t v22 = *(std::__shared_weak_count **)(v2 + 24);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        JUMPOUT(0x237DEE2B0);
      }
      uint64_t v14 = 16;
    }
    *(void *)(v2 + 3344) = v14;
    goto LABEL_17;
  }
  return result;
}

rf::RealityFusionSystem *std::unique_ptr<rf::RealityFusionSystem>::reset[abi:ne180100](rf::RealityFusionSystem **a1, rf::RealityFusionSystem *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    rf::RealityFusionSystem::~RealityFusionSystem(result);
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::ARKitDataProvider *,rf::CustomCFObject<rf::data_flow::provider::ARKitDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::ARKitDataProvider *)#1},std::allocator<rf::data_flow::provider::ARKitDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(void *a1, uint64_t *a2)
{
  unint64_t v3 = *(void *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v3 >= *(void *)&v7) {
      unint64_t v10 = v3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v3;
  }
  int v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v13 == v3)
      {
        if (std::type_info::operator==[abi:ne180100](v12[2], *a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
        }
        else
        {
          v13 &= *(void *)&v7 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__erase_unique<std::type_index>(void *a1, uint64_t *a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::find<std::type_index>(a1, a2);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  int8x8_t v5 = (int8x8_t)a1[1];
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v5) {
      v7 %= *(void *)&v5;
    }
  }
  else
  {
    v7 &= *(void *)&v5 - 1;
  }
  unint64_t v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    unint64_t v10 = v9;
    unint64_t v9 = (uint64_t *)*v9;
  }
  while (v9 != v3);
  if (v10 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
  }
  else
  {
    v11 &= *(void *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_20:
    if (v6)
    {
      unint64_t v12 = *(void *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(v6 + 8);
        if (v12 >= *(void *)&v5) {
          unint64_t v13 = v12 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v13 = v12 & (*(void *)&v5 - 1);
      }
      if (v13 == v7) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v7) = 0;
    uint64_t v6 = *v3;
  }
  if (v6)
  {
    unint64_t v12 = *(void *)(v6 + 8);
LABEL_24:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(void *)(*a1 + 8 * vstd::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
      uint64_t v6 = *v3;
    }
  }
  *unint64_t v10 = v6;
  uint64_t *v3 = 0;
  --a1[3];
  uint64_t v14 = (std::__shared_weak_count *)v3[4];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  operator delete(v4);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v7 = *(void *)(*a2 + 8);
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint8x8_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  unint64_t v11 = a1[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v11) {
        unint64_t v3 = v7 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v7;
    }
    uint64_t v14 = *(void ***)(*a1 + 8 * v3);
    if (v14)
    {
      for (char i = *v14; i; char i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v7)
        {
          if (std::type_info::operator==[abi:ne180100](i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = a1 + 2;
  char i = operator new(0x28uLL);
  *char i = 0;
  i[1] = v7;
  uint64_t v18 = **a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v18;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = a1[1];
    if (*(void *)&prime > v11) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint8x8_t v28 = (void *)*v17;
          if (*v17)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v17;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *uint8x8_t v28 = *v34;
                  *uint64_t v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                uint8x8_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v7 >= v11) {
        unint64_t v3 = v7 % v11;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v7;
    }
  }
  uint64_t v36 = *a1;
  long long v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *char i = *v37;
LABEL_75:
    *long long v37 = i;
    goto LABEL_76;
  }
  *char i = *v17;
  *uint64_t v17 = i;
  *(void *)(v36 + 8 * v3) = v17;
  if (*i)
  {
    unint64_t v38 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11) {
        v38 %= v11;
      }
    }
    else
    {
      v38 &= v11 - 1;
    }
    long long v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return i;
}

void sub_235ABDC90(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::SyntheticARDataProvider *,rf::CustomCFObject<rf::data_flow::provider::SyntheticARDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::SyntheticARDataProvider *)#1},std::allocator<rf::data_flow::provider::SyntheticARDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::AnchorDataProvider *,rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::AnchorDataProvider *)#1},std::allocator<rf::data_flow::provider::AnchorDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::provider::CameraMetadataProvider *,rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>::makeSharedPtr(void)::{lambda(rf::data_flow::provider::CameraMetadataProvider *)#1},std::allocator<rf::data_flow::provider::CameraMetadataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::MeshReconstructionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::MeshReconstructionConsumer *)#1},std::allocator<rf::data_flow::consumer::MeshReconstructionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::consumer::Consumer>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v7 = *(void *)(*a2 + 8);
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint8x8_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  unint64_t v11 = a1[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v11) {
        unint64_t v3 = v7 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v7;
    }
    uint64_t v14 = *(void ***)(*a1 + 8 * v3);
    if (v14)
    {
      for (char i = *v14; i; char i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v7)
        {
          if (std::type_info::operator==[abi:ne180100](i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = a1 + 2;
  char i = operator new(0x28uLL);
  *char i = 0;
  i[1] = v7;
  uint64_t v18 = **a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v18;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = a1[1];
    if (*(void *)&prime > v11) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint8x8_t v28 = (void *)*v17;
          if (*v17)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v17;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *uint8x8_t v28 = *v34;
                  *uint64_t v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                uint8x8_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v7 >= v11) {
        unint64_t v3 = v7 % v11;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v7;
    }
  }
  uint64_t v36 = *a1;
  long long v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *char i = *v37;
LABEL_75:
    *long long v37 = i;
    goto LABEL_76;
  }
  *char i = *v17;
  *uint64_t v17 = i;
  *(void *)(v36 + 8 * v3) = v17;
  if (*i)
  {
    unint64_t v38 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11) {
        v38 %= v11;
      }
    }
    else
    {
      v38 &= v11 - 1;
    }
    long long v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return i;
}

void sub_235ABE350(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::AnchorManagementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AnchorManagementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AnchorManagementConsumer *)#1},std::allocator<rf::data_flow::consumer::AnchorManagementConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingConsumer *)#1},std::allocator<rf::data_flow::consumer::LoggingConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::QueryConsumer *,rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::QueryConsumer *)#1},std::allocator<rf::data_flow::consumer::QueryConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::DebugOptionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::DebugOptionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::DebugOptionConsumer *)#1},std::allocator<rf::data_flow::consumer::DebugOptionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::EnvironmentProbeConsumer *,rf::CustomCFObject<rf::data_flow::consumer::EnvironmentProbeConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::EnvironmentProbeConsumer *)#1},std::allocator<rf::data_flow::consumer::EnvironmentProbeConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::VFXCollisionConsumer *,rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::VFXCollisionConsumer *)#1},std::allocator<rf::data_flow::consumer::VFXCollisionConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::SyntheticEnvironmentConsumer *,rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::SyntheticEnvironmentConsumer *)#1},std::allocator<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::AtmospherePlacementConsumer *,rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::AtmospherePlacementConsumer *)#1},std::allocator<rf::data_flow::consumer::AtmospherePlacementConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::RayCastingConsumer *,rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::RayCastingConsumer *)#1},std::allocator<rf::data_flow::consumer::RayCastingConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::ClientSharedDataConsumer *,rf::CustomCFObject<rf::data_flow::consumer::ClientSharedDataConsumer>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::ClientSharedDataConsumer *)#1},std::allocator<rf::data_flow::consumer::ClientSharedDataConsumer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5368;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5368;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetUpdateTimeSampler::$_0,std::allocator<RFServiceManagerSetUpdateTimeSampler::$_0>,double ()(void)>::target_type()
{
}

void *std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F53E8;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F53E8;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetAnchorCleanUpCallback::$_0,std::allocator<RFServiceManagerSetAnchorCleanUpCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5478;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5478;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(rf *a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = rf::realityFusionLogObject(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if (v8 >= 0) {
      int8x8_t v5 = __p;
    }
    else {
      int8x8_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    unsigned int v10 = v5;
    _os_log_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEFAULT, "RFServiceManagerSetExternalAnchorCallback(): Anchor %s marked external", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return (*(uint64_t (**)(void))(*((void *)a1 + 1) + 16))();
}

void sub_235ABF034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetExternalAnchorCallback::$_0,std::allocator<RFServiceManagerSetExternalAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F54F8;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F54F8;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::operator()(rf *a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = rf::realityFusionLogObject(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if (v8 >= 0) {
      int8x8_t v5 = __p;
    }
    else {
      int8x8_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    unsigned int v10 = v5;
    _os_log_impl(&dword_235A7C000, v4, OS_LOG_TYPE_DEFAULT, "RFServiceManagerSetRelocalizedAnchorCallback(): Anchor %s relocalized", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return (*(uint64_t (**)(void))(*((void *)a1 + 1) + 16))();
}

void sub_235ABF2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerSetRelocalizedAnchorCallback::$_0,std::allocator<RFServiceManagerSetRelocalizedAnchorCallback::$_0>,void ()(rf::data_flow::RFUUID const&)>::target_type()
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINSt3__17variantIJNS_9data_flow12CustomAnchorENS4_11PlaneAnchorENS4_11ImageAnchorENS4_12ObjectAnchorENS4_10FaceAnchorENS4_10BodyAnchorEEEEEEE13registerClassEv_block_invoke_0()
{
  rf::getTypeName<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>(__p);
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass = 0u;
  xmmword_26882EE88 = 0u;
  xmmword_26882EE98 = 0u;
  unk_26882EEA8 = 0u;
  xmmword_26882EEB8 = 0u;
  unk_26882EEC8 = 0u;
  if (v2 >= 0) {
    size_t v0 = __p;
  }
  else {
    size_t v0 = (void **)__p[0];
  }
  *((void *)&rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfClass
  + 1) = v0;
  *(void *)&xmmword_26882EE88 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::initCallback;
  *(void *)&xmmword_26882EE98 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::finalizeCallback;
  qword_26882EEB0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26882EEB8 = rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::copyDebugDescriptionCallback;
  rf::ClassRegistration<rf::CustomCFObject<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>::_cfTypeID = _CFRuntimeRegisterClass();
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_235ABF414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5598;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5598;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerVisitAnchors::$_0,std::allocator<RFServiceManagerVisitAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5628;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5628;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFServiceManagerVisitUpdatedAnchors::$_0,std::allocator<RFServiceManagerVisitUpdatedAnchors::$_0>,void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::target_type()
{
}

uint64_t rf::update(uint64_t a1)
{
  rf::Session::update(*(rf::Session **)a1);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  *(void *)&long long v8 = *(void *)(*(void *)a1 + 32);
  *((void *)&v8 + 1) = v2;
  uint64_t v9 = 1;
  rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>(v3, (uint64_t)&v8, (uint64_t)v13);
  for (unint64_t i = 0; i < REECSManagerSceneCount(); ++i)
  {
    uint64_t Scene = REECSManagerGetScene();
    LODWORD(vstd::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
    uint64_t v6 = *(rf::Session **)a1;
    *((void *)&v8 + 1) = *(void *)(a1 + 8);
    LOBYTE(v9) = 1;
    uint64_t v10 = Scene;
    char v11 = 1;
    uint64_t v12 = 0;
    rf::Session::processConsumerRequest((uint64_t)v6, &v8);
  }
  if (__p)
  {
    char v15 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v13);
}

void sub_235ABF8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t *rf::RealityFusionSystem::RealityFusionSystem(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ECSService = REServiceLocatorGetECSService();
  a1[1] = a3;
  *a1 = ECSService;
  a1[2] = a2;
  a1[3] = REECSManagerAddCustomSystem();
  return a1;
}

void rf::RealityFusionSystem::~RealityFusionSystem(rf::RealityFusionSystem *this)
{
  if (*((void *)this + 3))
  {
    REECSManagerRemoveCustomSystem();
    *((void *)this + 3) = 0;
  }
}

void RFAnchorDataProviderCreate()
{
  char v0 = 0;
  if (qword_26AB586D0 != -1) {
    dispatch_once(&qword_26AB586D0, &__block_literal_global_6);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235ABFA9C(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10A0C407178166CLL);
  _Unwind_Resume(a1);
}

uint64_t RFAnchorDataProviderAddLocalAnchor(uint64_t a1, uint64_t a2)
{
  v4[35] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(void *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::addAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_235ABFB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *RFAnchorDataProviderAddAnchor(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)uuid_t uu = 0u;
  long long v31 = 0u;
  uuid_clear(uu);
  long long v32 = xmmword_235AF75E0;
  long long v33 = xmmword_235AF75F0;
  long long v34 = xmmword_235AF7600;
  long long v35 = xmmword_235AF7AA0;
  *(void *)&long long v36 = 16842752;
  BYTE8(v36) = 0;
  *(void *)&long long v37 = 0;
  int v38 = 0;
  LOBYTE(v29) = 0;
  *((void *)&v29 + 1) = 0;
  uuid_clear(out);
  if (a3) {
    *(_OWORD *)uuid_t out = *a3;
  }
  else {
    uuid_generate_random(out);
  }
  switch(a2)
  {
    case 0:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<0ul,rf::data_flow::CustomAnchor,rf::data_flow::CustomAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    case 1:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      *(_OWORD *)float v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)uint64_t v25 = 0u;
      long long v26 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (v25[1])
      {
        *(void **)&long long v26 = v25[1];
        operator delete(v25[1]);
      }
      goto LABEL_22;
    case 2:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      LOBYTE(v20[0]) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v20[1], "");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      long long v24 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (SBYTE7(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[1]);
      }
      goto LABEL_22;
    case 3:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      std::string::basic_string[abi:ne180100]<0>(v20, "");
      std::string::basic_string[abi:ne180100]<0>((void *)&v21 + 1, "");
      LOBYTE(v24) = 0;
      *((void *)&v24 + 1) = 0;
      uuid_clear((unsigned __int8 *)&v23);
      *(_OWORD *)uint64_t v25 = 0u;
      long long v26 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);
      if (SHIBYTE(__p[1]) < 0) {
        operator delete(*((void **)&v21 + 1));
      }
      if (SBYTE7(v21) < 0) {
        operator delete(v20[0]);
      }
LABEL_22:

      break;
    case 4:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      *(_OWORD *)float v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)uint64_t v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<4ul,rf::data_flow::FaceAnchor,rf::data_flow::FaceAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    case 5:
      *(_OWORD *)buf = *(_OWORD *)out;
      long long v11 = v29;
      long long v12 = xmmword_235AF75E0;
      long long v13 = xmmword_235AF75F0;
      long long v14 = xmmword_235AF7600;
      long long v15 = xmmword_235AF7AA0;
      int v16 = 16842752;
      int v17 = 0;
      char v18 = 0;
      id v19 = 0;
      LODWORD(v20[0]) = 1065353216;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<5ul,rf::data_flow::BodyAnchor,rf::data_flow::BodyAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)buf);

      break;
    default:
      unint64_t v7 = rf::realityFusionLogObject(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_235A7C000, v7, OS_LOG_TYPE_ERROR, "RFAnchorDataProvider: Unknown RFAnchorType %lu", buf, 0xCu);
      }

      break;
  }
  long long v8 = rf::data_flow::provider::AnchorDataProvider::addAnchor(*(void *)(a1 + 16) + 8, (uint64_t)uu);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
  return v8;
}

void sub_235ABFF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void RFAnchorDataProviderUpdateAnchor(uint64_t a1, uint64_t a2)
{
}

uint64_t RFAnchorDataProviderUpdateLocalAnchor(uint64_t a1, uint64_t a2)
{
  v4[35] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(void *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::updateAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_235AC00DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RFAnchorDataProviderRemoveAnchorByIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = (rf::data_flow::provider::AnchorDataProvider *)(*(void *)(a1 + 16) + 8);
  char v5 = 0;
  uint64_t v6 = 0;
  uuid_clear(uu);
  *(void *)uuid_t uu = a2;
  char v5 = 1;
  rf::data_flow::provider::AnchorDataProvider::removeAnchor(v3, (const rf::data_flow::RFUUID *)uu);
}

void RFAnchorDataProviderRemoveAnchor(uint64_t a1, uint64_t a2)
{
}

uint64_t RFAnchorDataProviderRemoveLocalAnchor(uint64_t a1, uint64_t a2)
{
  v4[35] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v4, *(void *)(a2 + 16) + 16);
  rf::data_flow::provider::AnchorDataProvider::removeAnchor(v2 + 8, (uint64_t)v4);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4);
}

void sub_235AC0200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RFAnchorDataProviderAddLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v8[35] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(void *)(*(void *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::addAnchors((rf *)(v5 + 8), v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_235AC02F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderUpdateLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v8[35] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(void *)(*(void *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::updateAnchors(v5 + 8, v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_235AC03FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void RFAnchorDataProviderRemoveLocalAnchors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v8[35] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::reserve(v7, a3);
  if (a3)
  {
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v8, *(void *)(*(void *)a2 + 16) + 16);
      std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v7, (uint64_t)v8);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
      a2 += 8;
      --v6;
    }
    while (v6);
  }
  rf::data_flow::provider::AnchorDataProvider::removeAnchors((rf *)(v5 + 8), v7);
  v8[0] = (void **)v7;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_235AC0504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider18AnchorDataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_14[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::provider::AnchorDataProvider]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB586D8 = 0u;
  xmmword_26AB586E8 = 0u;
  xmmword_26AB586F8 = 0u;
  unk_26AB58708 = 0u;
  xmmword_26AB58718 = 0u;
  unk_26AB58728 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB586D8 + 1) = v7;
  *(void *)&xmmword_26AB586E8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::initCallback;
  *(void *)&xmmword_26AB586F8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::finalizeCallback;
  qword_26AB58710 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58718 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals_7 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AC06C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

rf::data_flow::provider::AnchorDataProvider *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject>>::reset[abi:ne180100]((rf::data_flow::provider::AnchorDataProvider *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

rf::data_flow::provider::AnchorDataProvider *std::unique_ptr<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::provider::AnchorDataProvider>::BridgableObject>>::reset[abi:ne180100](rf::data_flow::provider::AnchorDataProvider *result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  *(void *)uint64_t result = a2;
  if (v2)
  {
    rf::data_flow::provider::AnchorDataProvider::unregisterCallbackFromComponent(result);
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

void rf::synthetic::getSceneUnderstandingTypeString(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  void v11[3] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "plane");
    std::string::basic_string[abi:ne180100]<0>(v8, "image");
    std::string::basic_string[abi:ne180100]<0>(v9, "object");
    std::string::basic_string[abi:ne180100]<0>(v10, "mesh");
    std::string::basic_string[abi:ne180100]<0>(v11, "parametricRepresentation");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getSceneUnderstandingTypeString(rf::synthetic::SceneUnderstandingType)::MAP_SUTYPE_STR, &v7, 5uLL);
    for (uint64_t i = 0; i != -15; i -= 3)
    {
      if (SHIBYTE(v11[i + 2]) < 0) {
        operator delete((void *)v11[i]);
      }
    }
  }
  uint64_t v4 = rf::synthetic::getSceneUnderstandingTypeString(rf::synthetic::SceneUnderstandingType)::MAP_SUTYPE_STR + 24 * a1;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_235AC08D0(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 119) < 0) {
      operator delete(*(void **)(v1 + v3 + 96));
    }
    v3 -= 24;
    if (v3 == -120)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_235AC09C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::getSceneUnderstandingTypeFromString(unsigned __int8 *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "plane");
    char v9 = 0;
    std::string::basic_string[abi:ne180100]<0>(v10, "image");
    char v11 = 1;
    std::string::basic_string[abi:ne180100]<0>(v12, "object");
    char v13 = 2;
    std::string::basic_string[abi:ne180100]<0>(v14, "mesh");
    char v15 = 3;
    std::string::basic_string[abi:ne180100]<0>(v16, "parametricRepresentation");
    char v17 = 4;
    std::unordered_map<std::string,rf::synthetic::SceneUnderstandingType>::unordered_map((uint64_t)&v7, 5);
    for (uint64_t i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v16[i + 2]) < 0) {
        operator delete((void *)v16[i]);
      }
    }
    __cxa_guard_release(&_MergedGlobals_8);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return v2[40];
  }
  else
  {
    uint64_t v4 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0) {
        long long v5 = (uint64_t *)a1;
      }
      else {
        long long v5 = *(uint64_t **)a1;
      }
      int v7 = 136315138;
      long long v8 = v5;
      _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "getSceneUnderstandingTypeFromString(): Invalid Scene Understanding Type: %s", (uint8_t *)&v7, 0xCu);
    }

    return 0;
  }
}

void sub_235AC0BCC(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 151) < 0) {
      operator delete(*(void **)(v1 + v3 + 128));
    }
    v3 -= 32;
    if (v3 == -160)
    {
      __cxa_guard_abort(&_MergedGlobals_8);
      _Unwind_Resume(a1);
    }
  }
}

BOOL rf::synthetic::isSceneUnderstandingAnchor(unsigned int a1)
{
  {
    unsigned int v7 = a1;
    a1 = v7;
    if (v8)
    {
      __int16 v9 = 256;
      char v10 = 2;
      std::set<rf::synthetic::SceneUnderstandingType>::set[abi:ne180100]((uint64_t)&rf::synthetic::isSceneUnderstandingAnchor(rf::synthetic::SceneUnderstandingType)::SU_ANCHOR_TYPES, (unsigned __int8 *)&v9, 3);
      a1 = v7;
    }
  }
  uint64_t v1 = qword_26882F1C8;
  if (!qword_26882F1C8) {
    return 0;
  }
  uint64_t v2 = &qword_26882F1C8;
  do
  {
    unsigned int v3 = *(unsigned __int8 *)(v1 + 25);
    BOOL v4 = v3 >= a1;
    if (v3 >= a1) {
      long long v5 = (uint64_t *)v1;
    }
    else {
      long long v5 = (uint64_t *)(v1 + 8);
    }
    if (v4) {
      uint64_t v2 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  return v2 != &qword_26882F1C8 && *((unsigned __int8 *)v2 + 25) <= a1;
}

void sub_235AC0D30(_Unwind_Exception *a1)
{
}

void rf::synthetic::getAlignmentString(unsigned __int8 a1@<W0>, std::string *a2@<X8>)
{
  void v8[3] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "horizontal");
    std::string::basic_string[abi:ne180100]<0>(v8, "vertical");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getAlignmentString(rf::data_flow::PlaneAnchor::Alignment)::MAP_ALIGNMENT_STR, &v7, 2uLL);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  uint64_t v4 = rf::synthetic::getAlignmentString(rf::data_flow::PlaneAnchor::Alignment)::MAP_ALIGNMENT_STR + 24 * a1;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_235AC0E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getAlignmentFromString(unsigned __int8 *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58740))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "horizontal");
    int v9 = 0;
    std::string::basic_string[abi:ne180100]<0>(v10, "vertical");
    int v11 = 1;
    std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Alignment>::unordered_map((uint64_t)&v7, 2);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      if (SHIBYTE(v10[i + 2]) < 0) {
        operator delete((void *)v10[i]);
      }
    }
    __cxa_guard_release(&qword_26AB58740);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return *((unsigned int *)v2 + 10);
  }
  else
  {
    uint64_t v4 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0) {
        long long v5 = (uint64_t *)a1;
      }
      else {
        long long v5 = *(uint64_t **)a1;
      }
      int v7 = 136315138;
      int v8 = v5;
      _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "getAlignmentFromString(): Invalid Alignment: %s", (uint8_t *)&v7, 0xCu);
    }

    return 0;
  }
}

void sub_235AC1060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = 0;
  while (1)
  {
    if (*(char *)(v14 + v16 + 55) < 0) {
      operator delete(*(void **)(v14 + v16 + 32));
    }
    v16 -= 32;
    if (v16 == -64)
    {
      __cxa_guard_abort(&qword_26AB58740);
      _Unwind_Resume(a1);
    }
  }
}

void rf::synthetic::getPlaneClassificationString(unsigned __int8 a1@<W0>, std::string *a2@<X8>)
{
  void v14[3] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "PlaneClassificationNone");
    std::string::basic_string[abi:ne180100]<0>(v8, "PlaneClassificationWall");
    std::string::basic_string[abi:ne180100]<0>(v9, "PlaneClassificationFloor");
    std::string::basic_string[abi:ne180100]<0>(v10, "PlaneClassificationCeiling");
    std::string::basic_string[abi:ne180100]<0>(v11, "PlaneClassificationTable");
    std::string::basic_string[abi:ne180100]<0>(v12, "PlaneClassificationSeat");
    std::string::basic_string[abi:ne180100]<0>(v13, "PlaneClassificationWindow");
    std::string::basic_string[abi:ne180100]<0>(v14, "PlaneClassificationDoor");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&rf::synthetic::getPlaneClassificationString(rf::data_flow::PlaneAnchor::Classification)::MAP_PLANE_CLASSIFICATION_STR, &v7, 8uLL);
    for (uint64_t i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v14[i + 2]) < 0) {
        operator delete((void *)v14[i]);
      }
    }
  }
  uint64_t v4 = rf::synthetic::getPlaneClassificationString(rf::data_flow::PlaneAnchor::Classification)::MAP_PLANE_CLASSIFICATION_STR
     + 24 * a1;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_235AC1280(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 191) < 0) {
      operator delete(*(void **)(v1 + v3 + 168));
    }
    v3 -= 24;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getPlaneClassificationFromString(unsigned __int8 *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58748))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "PlaneClassificationNone");
    int v9 = 0;
    std::string::basic_string[abi:ne180100]<0>(v10, "PlaneClassificationWall");
    int v11 = 1;
    std::string::basic_string[abi:ne180100]<0>(v12, "PlaneClassificationFloor");
    int v13 = 2;
    std::string::basic_string[abi:ne180100]<0>(v14, "PlaneClassificationCeiling");
    int v15 = 3;
    std::string::basic_string[abi:ne180100]<0>(v16, "PlaneClassificationTable");
    int v17 = 4;
    std::string::basic_string[abi:ne180100]<0>(v18, "PlaneClassificationSeat");
    int v19 = 5;
    std::string::basic_string[abi:ne180100]<0>(v20, "PlaneClassificationWindow");
    int v21 = 6;
    std::string::basic_string[abi:ne180100]<0>(v22, "PlaneClassificationDoor");
    int v23 = 7;
    std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Classification>::unordered_map((uint64_t)&v7, 8);
    for (uint64_t i = 0; i != -32; i -= 4)
    {
      if (SHIBYTE(v22[i + 2]) < 0) {
        operator delete((void *)v22[i]);
      }
    }
    __cxa_guard_release(&qword_26AB58748);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return *((unsigned int *)v2 + 10);
  }
  else
  {
    uint64_t v4 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0) {
        long long v5 = (uint64_t *)a1;
      }
      else {
        long long v5 = *(uint64_t **)a1;
      }
      int v7 = 136315138;
      int v8 = v5;
      _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "getPlaneClassificationFromString(): Invalid Plane Classification string: %s", (uint8_t *)&v7, 0xCu);
    }

    return 0;
  }
}

void sub_235AC1534(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 247) < 0) {
      operator delete(*(void **)(v1 + v3 + 224));
    }
    v3 -= 32;
    if (v3 == -256)
    {
      __cxa_guard_abort(&qword_26AB58748);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getClassificationFromString(unsigned __int8 *a1)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58750, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58750))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "ClassificationNone");
    char v9 = 0;
    std::string::basic_string[abi:ne180100]<0>(v10, "ClassificationFloor");
    char v11 = 1;
    std::string::basic_string[abi:ne180100]<0>(v12, "ClassificationWall");
    char v13 = 2;
    std::string::basic_string[abi:ne180100]<0>(v14, "ClassificationCeiling");
    char v15 = 3;
    std::string::basic_string[abi:ne180100]<0>(v16, "ClassificationDecoration");
    char v17 = 4;
    std::string::basic_string[abi:ne180100]<0>(v18, "ClassificationElectricalAppliance");
    char v19 = 5;
    std::string::basic_string[abi:ne180100]<0>(v20, "ClassificationDoor");
    char v21 = 6;
    std::string::basic_string[abi:ne180100]<0>(v22, "ClassificationWindow");
    char v23 = 7;
    std::string::basic_string[abi:ne180100]<0>(v24, "ClassificationBlind");
    char v25 = 8;
    std::string::basic_string[abi:ne180100]<0>(v26, "ClassificationFireplace");
    char v27 = 9;
    std::string::basic_string[abi:ne180100]<0>(v28, "ClassificationPerson");
    char v29 = 10;
    std::string::basic_string[abi:ne180100]<0>(v30, "ClassificationMirror");
    char v31 = 11;
    std::string::basic_string[abi:ne180100]<0>(v32, "ClassificationStairs");
    char v33 = 12;
    std::string::basic_string[abi:ne180100]<0>(v34, "ClassificationBed");
    char v35 = 13;
    std::string::basic_string[abi:ne180100]<0>(v36, "ClassificationCabinet");
    char v37 = 14;
    std::string::basic_string[abi:ne180100]<0>(v38, "ClassificationChair");
    char v39 = 15;
    std::string::basic_string[abi:ne180100]<0>(v40, "ClassificationCounter");
    char v41 = 16;
    std::string::basic_string[abi:ne180100]<0>(v42, "ClassificationShelf");
    char v43 = 17;
    std::string::basic_string[abi:ne180100]<0>(v44, "ClassificationSofa");
    char v45 = 18;
    std::string::basic_string[abi:ne180100]<0>(v46, "ClassificationTable");
    char v47 = 19;
    std::string::basic_string[abi:ne180100]<0>(v48, "ClassificationToilet");
    char v49 = 20;
    std::string::basic_string[abi:ne180100]<0>(v50, "ClassificationSink");
    char v51 = 21;
    std::string::basic_string[abi:ne180100]<0>(v52, "ClassificationBathtub");
    char v53 = 22;
    std::string::basic_string[abi:ne180100]<0>(v54, "ClassificationShower");
    char v55 = 23;
    std::string::basic_string[abi:ne180100]<0>(v56, "ClassificationRefrigerator");
    char v57 = 24;
    std::string::basic_string[abi:ne180100]<0>(v58, "ClassificationStove");
    char v59 = 25;
    std::string::basic_string[abi:ne180100]<0>(v60, "ClassificationWasherOrDryer");
    char v61 = 26;
    std::string::basic_string[abi:ne180100]<0>(v62, "ClassificationOven");
    char v63 = 27;
    std::string::basic_string[abi:ne180100]<0>(v64, "ClassificationDishwasher");
    char v65 = 28;
    std::string::basic_string[abi:ne180100]<0>(v66, "ClassificationFurniture");
    char v67 = 29;
    std::string::basic_string[abi:ne180100]<0>(v68, "ClassificationStorageBuiltin");
    char v69 = 30;
    std::string::basic_string[abi:ne180100]<0>(v70, "ClassificationDoorFrame");
    char v71 = 31;
    std::string::basic_string[abi:ne180100]<0>(v72, "ClassificationTVMonitor");
    char v73 = 32;
    std::unordered_map<std::string,rf::synthetic::Classification>::unordered_map((uint64_t)&v7, 33);
    uint64_t v6 = 1056;
    do
    {
      if (*((char *)&v7 + v6 - 9) < 0) {
        operator delete(*(void **)((char *)&v7 + v6 - 32));
      }
      v6 -= 32;
    }
    while (v6);
    __cxa_guard_release(&qword_26AB58750);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return v2[40];
  }
  else
  {
    uint64_t v4 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0) {
        long long v5 = (uint64_t *)a1;
      }
      else {
        long long v5 = *(uint64_t **)a1;
      }
      int v7 = 136315138;
      int v8 = v5;
      _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "getClassificationFromString(): Invalid Classification string: %s", (uint8_t *)&v7, 0xCu);
    }

    return 0;
  }
}

void sub_235AC1AF4(_Unwind_Exception *a1)
{
  uint64_t v3 = 1056;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26AB58750);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t rf::synthetic::getMaterialFromString(unsigned __int8 *a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB58758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB58758))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "MaterialBrickwork");
    char v9 = 1;
    std::string::basic_string[abi:ne180100]<0>(v10, "MaterialCarpet");
    char v11 = 2;
    std::string::basic_string[abi:ne180100]<0>(v12, "MaterialCeilingTile");
    char v13 = 3;
    std::string::basic_string[abi:ne180100]<0>(v14, "MaterialCeramic");
    char v15 = 4;
    std::string::basic_string[abi:ne180100]<0>(v16, "MaterialConcrete");
    char v17 = 5;
    std::string::basic_string[abi:ne180100]<0>(v18, "MaterialPolishedStone");
    char v19 = 6;
    std::string::basic_string[abi:ne180100]<0>(v20, "MaterialFabric");
    char v21 = 7;
    std::string::basic_string[abi:ne180100]<0>(v22, "MaterialFoliage");
    char v23 = 8;
    std::string::basic_string[abi:ne180100]<0>(v24, "MaterialFood");
    char v25 = 9;
    std::string::basic_string[abi:ne180100]<0>(v26, "MaterialGlass");
    char v27 = 10;
    std::string::basic_string[abi:ne180100]<0>(v28, "MaterialLeather");
    char v29 = 11;
    std::string::basic_string[abi:ne180100]<0>(v30, "MaterialMetal");
    char v31 = 12;
    std::string::basic_string[abi:ne180100]<0>(v32, "MaterialMirror");
    char v33 = 13;
    std::string::basic_string[abi:ne180100]<0>(v34, "MaterialPaint");
    char v35 = 14;
    std::string::basic_string[abi:ne180100]<0>(v36, "MaterialPaper");
    char v37 = 15;
    std::string::basic_string[abi:ne180100]<0>(v38, "MaterialClearPlastic");
    char v39 = 16;
    std::string::basic_string[abi:ne180100]<0>(v40, "MaterialNonClearPlastic");
    char v41 = 17;
    std::string::basic_string[abi:ne180100]<0>(v42, "MaterialRubber");
    char v43 = 18;
    std::string::basic_string[abi:ne180100]<0>(v44, "MaterialSky");
    char v45 = 19;
    std::string::basic_string[abi:ne180100]<0>(v46, "MaterialNaturalStone");
    char v47 = 20;
    std::string::basic_string[abi:ne180100]<0>(v48, "MaterialTile");
    char v49 = 21;
    std::string::basic_string[abi:ne180100]<0>(v50, "MaterialWater");
    char v51 = 22;
    std::string::basic_string[abi:ne180100]<0>(v52, "MaterialWood");
    char v53 = 23;
    std::string::basic_string[abi:ne180100]<0>(v54, "MaterialOther");
    char v55 = 24;
    std::unordered_map<std::string,rf::synthetic::Material>::unordered_map((uint64_t)&v7, 24);
    uint64_t v6 = 768;
    do
    {
      if (*((char *)&v7 + v6 - 9) < 0) {
        operator delete(*(void **)((char *)&v7 + v6 - 32));
      }
      v6 -= 32;
    }
    while (v6);
    __cxa_guard_release(&qword_26AB58758);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return v2[40];
  }
  else
  {
    uint64_t v4 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if ((a1[23] & 0x80u) == 0) {
        long long v5 = (uint64_t *)a1;
      }
      else {
        long long v5 = *(uint64_t **)a1;
      }
      int v7 = 136315138;
      int v8 = v5;
      _os_log_error_impl(&dword_235A7C000, v4, OS_LOG_TYPE_ERROR, "getMaterialFromString(): Invalid Material string: %s", (uint8_t *)&v7, 0xCu);
    }

    return 24;
  }
}

void sub_235AC2008(_Unwind_Exception *a1)
{
  uint64_t v3 = 768;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26AB58758);
      _Unwind_Resume(a1);
    }
  }
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  char v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_235AC21D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::unordered_map<std::string,rf::synthetic::SceneUnderstandingType>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_26AB58760 = 0u;
  *(_OWORD *)&qword_26AB58770 = 0u;
  dword_26AB58780 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB58778, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26AB58760 + 1);
      if (*((void *)&xmmword_26AB58760 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58760 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26AB58760 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26AB58760 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26AB58760 + 1) - 1) & v4;
        }
        char v9 = *(unsigned __int8 ***)(xmmword_26AB58760 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB58780, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      char v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(unsigned char *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26AB58778 + 1);
      if (!v6 || (float)(*(float *)&dword_26AB58780 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26AB58760;
      long long v32 = *(void **)(xmmword_26AB58760 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26AB58770;
        qword_26AB58770 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26AB58770;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        long long v32 = (void *)(xmmword_26AB58760 + 8 * v33);
      }
      *long long v32 = v12;
LABEL_77:
      ++qword_26AB58778;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26AB58780);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26AB58760 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26AB58760 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26AB58760 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26AB58778 / *(float *)&dword_26AB58780);
      if (*((void *)&xmmword_26AB58760 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58760 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26AB58760 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v20 = operator new(8 * *(void *)&prime);
          char v21 = (void *)xmmword_26AB58760;
          *(void *)&xmmword_26AB58760 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26AB58760 + 1) = prime;
          do
            *(void *)(xmmword_26AB58760 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          char v23 = (void **)qword_26AB58770;
          if (qword_26AB58770)
          {
            unint64_t v24 = *(void *)(qword_26AB58770 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26AB58760 + 8 * v24) = &qword_26AB58770;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26AB58760 + 8 * v30))
                {
                  *(void *)(xmmword_26AB58760 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *char v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26AB58760 + 8 * v30);
                **(void **)(xmmword_26AB58760 + 8 * v30) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              char v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v34 = (void *)xmmword_26AB58760;
        *(void *)&xmmword_26AB58760 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26AB58760 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_235AC26F4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::~__hash_table()
{
  size_t v0 = (void **)qword_26AB58770;
  if (qword_26AB58770)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      size_t v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_26AB58760;
  *(void *)&xmmword_26AB58760 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::SceneUnderstandingType>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB58778, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26AB58760 + 1);
  if (!*((void *)&xmmword_26AB58760 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58760 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26AB58760 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26AB58760 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26AB58760 + 1) - 1) & v2;
  }
  unint64_t v8 = *(unsigned __int8 ***)(xmmword_26AB58760 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB58780, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t std::set<rf::synthetic::SceneUnderstandingType>::set[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      std::__tree<rf::synthetic::SceneUnderstandingType>::__emplace_hint_unique_key_args<rf::synthetic::SceneUnderstandingType,rf::synthetic::SceneUnderstandingType const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_235AC2920(_Unwind_Exception *a1)
{
  std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__emplace_hint_unique_key_args<rf::synthetic::SceneUnderstandingType,rf::synthetic::SceneUnderstandingType const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, unsigned char *a4)
{
  unint64_t v6 = std::__tree<rf::synthetic::SceneUnderstandingType>::__find_equal<rf::synthetic::SceneUnderstandingType>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    std::__tree<rf::synthetic::SceneUnderstandingType>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__find_equal<rf::synthetic::SceneUnderstandingType>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      char v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        char v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<rf::synthetic::SceneUnderstandingType>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(a1, *a2);
    std::__tree<rf::synthetic::SceneUnderstandingType>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Alignment>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_26AB58788 = 0u;
  *(_OWORD *)&qword_26AB58798 = 0u;
  dword_26AB587A8 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587A0, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26AB58788 + 1);
      if (*((void *)&xmmword_26AB58788 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58788 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26AB58788 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26AB58788 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26AB58788 + 1) - 1) & v4;
        }
        char v9 = *(unsigned __int8 ***)(xmmword_26AB58788 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587A8, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      char v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((_DWORD *)v12 + 10) = *(_DWORD *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26AB587A0 + 1);
      if (!v6 || (float)(*(float *)&dword_26AB587A8 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26AB58788;
      long long v32 = *(void **)(xmmword_26AB58788 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26AB58798;
        qword_26AB58798 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26AB58798;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        long long v32 = (void *)(xmmword_26AB58788 + 8 * v33);
      }
      *long long v32 = v12;
LABEL_77:
      ++qword_26AB587A0;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26AB587A8);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26AB58788 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26AB58788 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26AB58788 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26AB587A0 / *(float *)&dword_26AB587A8);
      if (*((void *)&xmmword_26AB58788 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58788 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26AB58788 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          char v21 = (void *)xmmword_26AB58788;
          *(void *)&xmmword_26AB58788 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26AB58788 + 1) = prime;
          do
            *(void *)(xmmword_26AB58788 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          char v23 = (void **)qword_26AB58798;
          if (qword_26AB58798)
          {
            unint64_t v24 = *(void *)(qword_26AB58798 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26AB58788 + 8 * v24) = &qword_26AB58798;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26AB58788 + 8 * v30))
                {
                  *(void *)(xmmword_26AB58788 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *char v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26AB58788 + 8 * v30);
                **(void **)(xmmword_26AB58788 + 8 * v30) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              char v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v34 = (void *)xmmword_26AB58788;
        *(void *)&xmmword_26AB58788 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26AB58788 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_235AC30A4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::~__hash_table()
{
  size_t v0 = (void **)qword_26AB58798;
  if (qword_26AB58798)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      size_t v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_26AB58788;
  *(void *)&xmmword_26AB58788 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Alignment>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587A0, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26AB58788 + 1);
  if (!*((void *)&xmmword_26AB58788 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58788 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26AB58788 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26AB58788 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26AB58788 + 1) - 1) & v2;
  }
  unint64_t v8 = *(unsigned __int8 ***)(xmmword_26AB58788 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587A8, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::data_flow::PlaneAnchor::Classification>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_26AB587B0 = 0u;
  *(_OWORD *)&qword_26AB587C0 = 0u;
  dword_26AB587D0 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587C8, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26AB587B0 + 1);
      if (*((void *)&xmmword_26AB587B0 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587B0 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26AB587B0 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26AB587B0 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26AB587B0 + 1) - 1) & v4;
        }
        char v9 = *(unsigned __int8 ***)(xmmword_26AB587B0 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587D0, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      char v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((_DWORD *)v12 + 10) = *(_DWORD *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26AB587C8 + 1);
      if (!v6 || (float)(*(float *)&dword_26AB587D0 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26AB587B0;
      long long v32 = *(void **)(xmmword_26AB587B0 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26AB587C0;
        qword_26AB587C0 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26AB587C0;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        long long v32 = (void *)(xmmword_26AB587B0 + 8 * v33);
      }
      *long long v32 = v12;
LABEL_77:
      ++qword_26AB587C8;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26AB587D0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26AB587B0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26AB587B0 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26AB587B0 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26AB587C8 / *(float *)&dword_26AB587D0);
      if (*((void *)&xmmword_26AB587B0 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587B0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26AB587B0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          char v21 = (void *)xmmword_26AB587B0;
          *(void *)&xmmword_26AB587B0 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26AB587B0 + 1) = prime;
          do
            *(void *)(xmmword_26AB587B0 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          char v23 = (void **)qword_26AB587C0;
          if (qword_26AB587C0)
          {
            unint64_t v24 = *(void *)(qword_26AB587C0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26AB587B0 + 8 * v24) = &qword_26AB587C0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26AB587B0 + 8 * v30))
                {
                  *(void *)(xmmword_26AB587B0 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *char v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26AB587B0 + 8 * v30);
                **(void **)(xmmword_26AB587B0 + 8 * v30) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              char v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v34 = (void *)xmmword_26AB587B0;
        *(void *)&xmmword_26AB587B0 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26AB587B0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_235AC36F8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::~__hash_table()
{
  size_t v0 = (void **)qword_26AB587C0;
  if (qword_26AB587C0)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      size_t v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_26AB587B0;
  *(void *)&xmmword_26AB587B0 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::PlaneAnchor::Classification>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587C8, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26AB587B0 + 1);
  if (!*((void *)&xmmword_26AB587B0 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587B0 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26AB587B0 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26AB587B0 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26AB587B0 + 1) - 1) & v2;
  }
  unint64_t v8 = *(unsigned __int8 ***)(xmmword_26AB587B0 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587D0, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::synthetic::Classification>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_26AB587D8 = 0u;
  *(_OWORD *)&qword_26AB587E8 = 0u;
  dword_26AB587F8 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587F0, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26AB587D8 + 1);
      if (*((void *)&xmmword_26AB587D8 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587D8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26AB587D8 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26AB587D8 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26AB587D8 + 1) - 1) & v4;
        }
        char v9 = *(unsigned __int8 ***)(xmmword_26AB587D8 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587F8, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      char v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(unsigned char *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26AB587F0 + 1);
      if (!v6 || (float)(*(float *)&dword_26AB587F8 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26AB587D8;
      long long v32 = *(void **)(xmmword_26AB587D8 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26AB587E8;
        qword_26AB587E8 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26AB587E8;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        long long v32 = (void *)(xmmword_26AB587D8 + 8 * v33);
      }
      *long long v32 = v12;
LABEL_77:
      ++qword_26AB587F0;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26AB587F8);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26AB587D8 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26AB587D8 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26AB587D8 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26AB587F0 / *(float *)&dword_26AB587F8);
      if (*((void *)&xmmword_26AB587D8 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587D8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26AB587D8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          char v21 = (void *)xmmword_26AB587D8;
          *(void *)&xmmword_26AB587D8 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26AB587D8 + 1) = prime;
          do
            *(void *)(xmmword_26AB587D8 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          char v23 = (void **)qword_26AB587E8;
          if (qword_26AB587E8)
          {
            unint64_t v24 = *(void *)(qword_26AB587E8 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26AB587D8 + 8 * v24) = &qword_26AB587E8;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26AB587D8 + 8 * v30))
                {
                  *(void *)(xmmword_26AB587D8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *char v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26AB587D8 + 8 * v30);
                **(void **)(xmmword_26AB587D8 + 8 * v30) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              char v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v34 = (void *)xmmword_26AB587D8;
        *(void *)&xmmword_26AB587D8 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26AB587D8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_235AC3D4C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::~__hash_table()
{
  size_t v0 = (void **)qword_26AB587E8;
  if (qword_26AB587E8)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      size_t v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_26AB587D8;
  *(void *)&xmmword_26AB587D8 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Classification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Classification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Classification>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB587F0, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26AB587D8 + 1);
  if (!*((void *)&xmmword_26AB587D8 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB587D8 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26AB587D8 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26AB587D8 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26AB587D8 + 1) - 1) & v2;
  }
  unint64_t v8 = *(unsigned __int8 ***)(xmmword_26AB587D8 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB587F8, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

void std::unordered_map<std::string,rf::synthetic::Material>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_26AB58800 = 0u;
  *(_OWORD *)&qword_26AB58810 = 0u;
  dword_26AB58820 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB58818, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26AB58800 + 1);
      if (*((void *)&xmmword_26AB58800 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58800 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26AB58800 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26AB58800 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26AB58800 + 1) - 1) & v4;
        }
        char v9 = *(unsigned __int8 ***)(xmmword_26AB58800 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB58820, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      char v13 = (std::string *)(v12 + 16);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[40] = *(unsigned char *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26AB58818 + 1);
      if (!v6 || (float)(*(float *)&dword_26AB58820 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26AB58800;
      long long v32 = *(void **)(xmmword_26AB58800 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26AB58810;
        qword_26AB58810 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26AB58810;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        long long v32 = (void *)(xmmword_26AB58800 + 8 * v33);
      }
      *long long v32 = v12;
LABEL_77:
      ++qword_26AB58818;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26AB58820);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26AB58800 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26AB58800 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26AB58800 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26AB58818 / *(float *)&dword_26AB58820);
      if (*((void *)&xmmword_26AB58800 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58800 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26AB58800 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          char v21 = (void *)xmmword_26AB58800;
          *(void *)&xmmword_26AB58800 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26AB58800 + 1) = prime;
          do
            *(void *)(xmmword_26AB58800 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          char v23 = (void **)qword_26AB58810;
          if (qword_26AB58810)
          {
            unint64_t v24 = *(void *)(qword_26AB58810 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26AB58800 + 8 * v24) = &qword_26AB58810;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26AB58800 + 8 * v30))
                {
                  *(void *)(xmmword_26AB58800 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *char v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26AB58800 + 8 * v30);
                **(void **)(xmmword_26AB58800 + 8 * v30) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              char v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v34 = (void *)xmmword_26AB58800;
        *(void *)&xmmword_26AB58800 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26AB58800 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_235AC43A0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,re::Matrix4x4<float>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::~__hash_table()
{
  size_t v0 = (void **)qword_26AB58810;
  if (qword_26AB58810)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      size_t v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_26AB58800;
  *(void *)&xmmword_26AB58800 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,rf::synthetic::Material>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::synthetic::Material>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::synthetic::Material>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_26AB58818, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26AB58800 + 1);
  if (!*((void *)&xmmword_26AB58800 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AB58800 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26AB58800 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26AB58800 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26AB58800 + 1) - 1) & v2;
  }
  unint64_t v8 = *(unsigned __int8 ***)(xmmword_26AB58800 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_26AB58820, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t rf::data_flow::details::Context::Context(uint64_t a1, void *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v6 = 0;
  std::vector<unsigned long>::vector((void *)(a1 + 40), v4, &v6);
  *(void *)(a1 + 64) = a2;
  return a1;
}

void sub_235AC45D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *rf::data_flow::details::Context::markOutputReady(rf::data_flow::details::Context *this, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__equal_range_multi<unsigned long>((void *)(*((void *)this + 8) + 24), a2);
  if (result != v4)
  {
    uint8x8_t v5 = result;
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = v5[3];
      unint64_t v8 = (uint64_t *)*((void *)this + 8);
      uint64_t v9 = *((void *)this + 5);
      uint64_t v10 = *(void *)(v9 + 8 * v7) + 1;
      *(void *)(v9 + 8 * v7) = v10;
      uint64_t v11 = *v8;
      if (v10 == (uint64_t)(*(void *)(v11 + 88 * v7 + 64) - *(void *)(v11 + 88 * v7 + 56)) >> 3)
      {
        uint64_t v12 = *(void *)(v11 + 88 * v7 + 24);
        if (!v12) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, rf::data_flow::details::Context *))(*(void *)v12 + 48))(v12, this);
      }
      uint8x8_t v5 = (void *)*v5;
    }
    while (v5 != v6);
  }
  return result;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_235AC4710(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__equal_range_multi<unsigned long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    do
      uint64_t v4 = (void *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

void RFAtmospherePlacementServiceCreate()
{
}

void rf::makeCustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer,rf::data_flow::consumer::AtmospherePlacementConfig &>()
{
  if (qword_26AB58830 != -1) {
    dispatch_once(&qword_26AB58830, &__block_literal_global_7);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235AC4930(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10A0C40F6950127);
  _Unwind_Resume(a1);
}

void RFAtmospherePlacementServiceCreateForReplay()
{
}

uint64_t RFAtmospherePlacementServiceUpdateByDeltaTime()
{
  uint64_t result = RESceneGetECSManagerNullable();
  if (result)
  {
    return REECSManagerGetServiceLocator();
  }
  return result;
}

void RFAtmospherePlacementServiceRequestCalibrationAt(uint64_t a1, uint64_t a2, int a3)
{
}

void RFAtmospherePlacementServiceRequestCalibration(uint64_t a1, uint64_t a2, int a3)
{
}

void RFAtmospherePlacementServiceRequestCalibrationAtEx(uint64_t a1, uint64_t a2, int a3)
{
}

void RFAtmospherePlacementServiceRequestCalibrationEx(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t RFAtmospherePlacementServiceGetOpenSkyState()
{
  return 0;
}

uint64_t RFAtmospherePlacementServiceGetOpenSkyUnsupportedReason()
{
  return 0;
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer27AtmospherePlacementConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_15[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::AtmospherePlacementConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58838 = 0u;
  xmmword_26AB58848 = 0u;
  xmmword_26AB58858 = 0u;
  unk_26AB58868 = 0u;
  xmmword_26AB58878 = 0u;
  unk_26AB58888 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58838 + 1) = v7;
  *(void *)&xmmword_26AB58848 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::initCallback;
  *(void *)&xmmword_26AB58858 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::finalizeCallback;
  qword_26AB58870 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58878 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_9 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AC4C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::AtmospherePlacementConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    rf::data_flow::consumer::AtmospherePlacementConsumer::~AtmospherePlacementConsumer((rf::data_flow::consumer::AtmospherePlacementConsumer *)(v2 + 16));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

void rf::Session::addSystemToECSSystem()
{
}

void sub_235AC4D40(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

void *rf::Session::visitAnchors(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  rf::ARState::visitAnchors(a1 + 160, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100](v4);
}

void sub_235AC4DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *rf::Session::visitUpdatedAnchors(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  for (char i = *(void **)(a1 + 2496); i; char i = (void *)*i)
    std::function<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::operator()((uint64_t)v5, i[6]);
  return std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::~__value_func[abi:ne180100](v5);
}

void sub_235AC4E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t rf::Session::processConsumerRequest(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v9 = *a2;
  long long v10 = v2;
  long long v11 = a2[2];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  rf::data_flow::DataGraph::evaluate<rf::ConsumerRequest>(v3, (uint64_t)&v8, (uint64_t)v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v5);
}

void rf::Session::consumeInputFromProvider(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1024))
  {
    unint64_t v4 = a1 + 160;
    rf::ARState::consume(v4, a2);
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 3344));
    std::deque<rf::data_flow::provider::InputData>::push_back((void *)(a1 + 3296), a2);
    std::mutex::unlock((std::mutex *)(a1 + 3344));
  }
}

void sub_235AC4F74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void rf::Session::createSessionState()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_235AC56A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::Session::Session(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  if (v7)
  {
    unint64_t v8 = *(void *)(v6 + 8);
    unint64_t v9 = *(void *)(a1 + 80);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(void *)(v4 + 8 * vstd::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a1 + 88;
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 0;
    *(void *)(a2 + 96) = 0;
  }
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v10;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v11 = a2 + 128;
  uint64_t v12 = v13;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v13;
  uint64_t v14 = *(void *)(v11 + 8);
  *(void *)(a1 + 136) = v14;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(v11 + 16);
  if (v14)
  {
    unint64_t v15 = *(void *)(v12 + 8);
    unint64_t v16 = *(void *)(a1 + 120);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(v10 + 8 * v15) = a1 + 128;
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  rf::ARState::ARState(a1 + 160, a3);
  *(_OWORD *)(a1 + 3232) = 0u;
  *(void *)(a1 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = &unk_26E8F5818;
  *(void *)(a1 + 3256) = MEMORY[0x263F15728];
  *(void *)(a1 + 3272) = a1 + 3248;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 33std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0u;
  *(_OWORD *)(a1 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 0u;
  *(void *)(a1 + 3344) = 850045863;
  *(void *)(a1 + 3400) = 0;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  return a1;
}

void sub_235AC596C(_Unwind_Exception *a1)
{
  rf::Session::SessionState::~SessionState(v1);
  _Unwind_Resume(a1);
}

void rf::Session::SessionState::~SessionState(rf::Session::SessionState *this)
{
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<rf::data_flow::provider::Provider>>>>::~__hash_table((uint64_t)this + 72);
  long long v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void rf::Session::Session()
{
}

void sub_235AC5A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  rf::Session::SessionState::~SessionState((rf::Session::SessionState *)va);
  _Unwind_Resume(a1);
}

void rf::Session::update(rf::Session *this)
{
  uint64_t v2 = *((void *)this + 409);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    double v5 = v3;
    do
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = (std::__shared_weak_count *)v4[4];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, double))(*(void *)v6 + 16))(v6, v5);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  std::mutex::lock((std::mutex *)((char *)this + 3344));
  while (*((void *)this + 417))
  {
    rf::ARState::consume((unint64_t)this + 160, *(void *)(*((void *)this + 413) + ((*((void *)this + 416) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1104 * (*((void *)this + 416) & 0xFLL));
    std::deque<rf::data_flow::provider::InputData>::pop_front((int64x2_t *)this + 206);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 3344));
}

void sub_235AC5B9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::UpdateRequest>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  rf::data_flow::details::Context::Context((uint64_t)v8, (void *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::UpdateRequest>((uint64_t)v8, (void *)a2, (long long *)(a2 + 8));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  *(void *)(a3 + 56) = v5;
  *(void *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_235AC5CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::UpdateRequest>(uint64_t a1, void *a2, long long *a3))(void, void, void, void, void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v7 = *a3;
  uint64_t v5 = a2;
  uint64_t v6 = (void (*)(uint64_t))std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v5);
  std::any::operator=[abi:ne180100](v3 + 3, &v6);
  return std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v6);
}

void sub_235AC5D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

void *std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100](unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 1);
      *(void *)a3 = std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100];
      break;
    case 2:
      uint64_t result = 0;
      *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 1);
      *(void *)a3 = std::__any_imp::_SmallHandler<rf::UpdateRequest>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<rf::UpdateRequest>::__id;
      if (v8) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t rf::data_flow::DataGraph::evaluate<rf::ConsumerRequest>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  rf::data_flow::details::Context::Context((uint64_t)v8, (void *)(a1 + 64));
  rf::data_flow::details::Context::setValue<rf::ConsumerRequest>((uint64_t)v8, (void *)a2, (_OWORD *)(a2 + 8));
  rf::data_flow::details::Context::markOutputReady((rf::data_flow::details::Context *)v8, (unint64_t *)a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__hash_table(a3, v8);
  *(_OWORD *)(a3 + 40) = v9;
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  *(void *)(a3 + 56) = v5;
  *(void *)(a3 + 64) = v6;
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v8);
}

void sub_235AC5EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  rf::data_flow::details::Context::~Context((rf::data_flow::details::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::details::Context::setValue<rf::ConsumerRequest>(uint64_t a1, void *a2, _OWORD *a3))(void, void, void, void, void)
{
  void v11[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  uint64_t v6 = (void (*)(uint64_t))operator new(0x30uLL);
  long long v7 = a3[1];
  *(_OWORD *)uint64_t v6 = *a3;
  *((_OWORD *)v6 + 1) = v7;
  *((_OWORD *)v6 + 2) = a3[2];
  v11[0] = (void (*)(uint64_t))std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100];
  v11[1] = v6;
  uint64_t v10 = a2;
  BOOL v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v10);
  std::any::operator=[abi:ne180100](v8 + 3, v11);
  return std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v11);
}

void sub_235AC5FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

void *std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      long long v9 = *(_OWORD **)(a2 + 8);
      uint64_t v10 = operator new(0x30uLL);
      uint64_t result = 0;
      long long v12 = v9[1];
      long long v11 = v9[2];
      *uint64_t v10 = *v9;
      v10[1] = v12;
      _OWORD v10[2] = v11;
      *a3 = std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100];
      a3[1] = v10;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v13 = *(void *)(a2 + 8);
      *a3 = std::__any_imp::_LargeHandler<rf::ConsumerRequest>::__handle[abi:ne180100];
      a3[1] = v13;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v14 = a5 == &std::__any_imp::__unique_typeinfo<rf::ConsumerRequest>::__id;
      if (v14) {
        uint64_t result = *(void **)(a2 + 8);
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      operator delete(*(void **)(a2 + 8));
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t std::deque<rf::data_flow::provider::InputData>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<rf::data_flow::provider::InputData>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1104 * (v7 & 0xF);
  }
  uint64_t result = rf::data_flow::provider::InputData::InputData(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<rf::data_flow::provider::InputData>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      unint64_t v42 = &v39[8 * v41];
      char v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  char v19 = (char *)a1[3];
  char v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint8x8_t v25 = operator new(0x4500uLL);
    unint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      char v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      char v53 = (uint64_t *)a1[1];
      char v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        char v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        char v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)char v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      char v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      unint64_t v42 = &v39[8 * v83];
      id v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        id v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)id v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      size_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  char v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v28);
  uint64_t v31 = v30;
  long long v32 = operator new(0x4500uLL);
  unint64_t v33 = &v29[8 * v23];
  long long v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      size_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v61);
      unint64_t v33 = &v62[8 * (v61 >> 2)];
      long long v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      char v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)unint64_t v33 = v32;
  char v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        char v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(v70);
        char v73 = v71;
        unint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        char v64 = v33;
        if (!v74)
        {
          char v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          uint64_t v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)uint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        long long v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        char v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        unint64_t v33 = &v29[8 * (v67 >> 1)];
        char v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          char v69 = v64;
        }
        char v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_235AC65AC(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputData *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t rf::data_flow::provider::InputData::InputData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  uint64_t v4 = a1 + 176;
  *(unsigned char *)(v4 + 272) = 0;
  if (*(unsigned char *)(a2 + 448))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a2 + 176);
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 448) = 1;
  }
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  uint64_t v5 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v5;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 488) = *(void *)(a2 + 488);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(void *)(a1 + 5std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(void *)(a1 + 5std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(void *)(a2 + 512);
  *(void *)(a2 + 5std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a2 + 536) = 0;
  *(_OWORD *)(a2 + 520) = 0u;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a2 + 560) = 0;
  *(_OWORD *)(a2 + 544) = 0u;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 568) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table((uint64_t)this + 568) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 608) = *(void *)(a2 + 608);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 608) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a2 + 680) = 0;
  *(_OWORD *)(a2 + 664) = 0u;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 688) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 688) = *(_OWORD *)(a2 + 688);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a2 + 704) = 0;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 688) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 728) = 0;
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0u;
  *(void *)(a1 + 7std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(void *)(a2 + 712);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 728) = *(void *)(a2 + 728);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 728) = 0;
  *(_OWORD *)(a2 + 7std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0u;
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a2 + 752) = 0;
  *(_OWORD *)(a2 + 736) = 0u;
  long long v6 = *(_OWORD *)(a2 + 760);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = v6;
  *(void *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 768) = 0u;
  long long v7 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v7;
  *(_OWORD *)(a2 + 792) = 0u;
  *(void *)(a2 + 784) = 0;
  long long v8 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(_OWORD *)(a1 + 816) = v8;
  *(void *)(a2 + 832) = 0;
  *(_OWORD *)(a2 + 816) = 0u;
  long long v9 = *(_OWORD *)(a2 + 848);
  long long v10 = *(_OWORD *)(a2 + 864);
  long long v11 = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 896) = v11;
  *(_OWORD *)(a1 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 848) = v9;
  *(_OWORD *)(a1 + 864) = v10;
  long long v12 = *(_OWORD *)(a2 + 912);
  long long v13 = *(_OWORD *)(a2 + 928);
  long long v14 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v14;
  *(_OWORD *)(a1 + 9std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v12;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,re::Matrix4x4<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,re::Matrix4x4<float>>>>::~__hash_table((uint64_t)this + 928) = v13;
  long long v15 = *(_OWORD *)(a2 + 976);
  long long v16 = *(_OWORD *)(a2 + 992);
  long long v17 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v17;
  *(_OWORD *)(a1 + 976) = v15;
  *(_OWORD *)(a1 + 992) = v16;
  long long v18 = *(_OWORD *)(a2 + 1040);
  long long v19 = *(_OWORD *)(a2 + 1056);
  long long v20 = *(_OWORD *)(a2 + 1072);
  *(unsigned char *)(a1 + 10std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = *(unsigned char *)(a2 + 1088);
  *(_OWORD *)(a1 + 1072) = v20;
  *(_OWORD *)(a1 + 1056) = v19;
  *(_OWORD *)(a1 + 1040) = v18;
  return a1;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26E8F5718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E8F5718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
  return result;
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(uint64_t a1, rf::data_flow::details::Context *a2)
{
  v12[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, (unint64_t *)(a1 + 8));
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, void, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  rf::Session::update(*(rf::Session **)(a1 + 24));
  rf::ARState::consumeChangesSinceLast(*(void *)(a1 + 24) + 160, v6);
  long long v7 = *(void (**)(uint64_t))(*(void *)(a1 + 24) + 1952);
  long long v8 = (void *)(a1 + 16);
  v12[0] = (void (*)(uint64_t))std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100];
  v12[1] = v7;
  long long v11 = v8;
  long long v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2, v8, (uint64_t)&std::piecewise_construct, &v11);
  std::any::operator=[abi:ne180100](v9 + 3, v12);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v12);
  return rf::data_flow::details::Context::markOutputReady(a2, v8);
}

void sub_235AC6B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_0 &,rf::UpdateRequest,unsigned long>(rf::Session::createSessionState(rf::Session&)::$_0 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<unsigned long> const&,rf::data_flow::NodeHandle<rf::UpdateRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void *std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = (void *)MEMORY[0x263F8C270];
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100];
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<unsigned long>::__handle[abi:ne180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = std::type_info::operator==[abi:ne180100](a4, MEMORY[0x263F8C270]);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<unsigned long>::__id;
      }
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::~__func()
{
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26E8F5798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E8F5798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
  return result;
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::operator()(unint64_t *a1, rf::data_flow::details::Context *a2)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::find<unsigned long>(a2, a1 + 1);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, void, void *, void *))v4[3];
  if (!v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  for (uint64_t i = *(uint64_t ***)(a1[3] + 88); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[3] + 16))(i[3], v6);
  return rf::data_flow::details::Context::markOutputReady(a2, a1 + 2);
}

uint64_t std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1},std::allocator<char><void rf::data_flow::details::FunctionStore::addFunction<rf::Session::createSessionState(rf::Session&)::$_1 &,rf::ConsumerRequest,void>(rf::Session::createSessionState(rf::Session&)::$_1 &,std::optional<std::string> &&,rf::data_flow::NodeHandle<void> const&,rf::data_flow::NodeHandle<rf::ConsumerRequest> const&)::{lambda(rf::data_flow::details::Context &)#1}>,void ()(rf::data_flow::details::Context &)>::target_type()
{
}

void std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::~__func()
{
}

void *std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E8F5818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E8F5818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<double (*)(void),std::allocator<double (*)(void)>,double ()(void)>::target_type()
{
}

uint64_t std::deque<rf::data_flow::provider::InputData>::pop_front(int64x2_t *a1)
{
  rf::data_flow::provider::InputData::~InputData((void **)(*(void *)(a1->i64[1]
                                                                     + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))
                                                         + 1104 * (a1[2].i64[0] & 0xF)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_235AFA6C0);
  return std::deque<rf::data_flow::provider::InputData>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<rf::data_flow::provider::InputData>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x10) {
    a2 = 1;
  }
  if (v2 < 0x20) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t RFPredicatePositionCompareCreate(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    default:
      return result;
  }
}

uint64_t RFPredicatePositionRangeCreate(uint64_t result)
{
  if (result == 1) {
    operator new();
  }
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t RFPredicateDestroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vcgtq_f32(a1[1], a2[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vcgeq_f32(a1[1], a2[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::less_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vcgtq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vcgeq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::greater_equal<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vceqq_f32(a2[1], a1[1]);
  v2.i32[3] = v2.i32[2];
  return vminvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::not_equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint32x4_t v2 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[1], a1[1]));
  v2.i32[3] = v2.i32[2];
  return vmaxvq_u32(v2) >> 31;
}

void csq::Predicate<csq::ValueBasedPredicate<re::Vector3<float>,std::not_equal_to<re::Vector3<float>>>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)0>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  float32x4_t v2 = a2[1];
  uint32x4_t v3 = (uint32x4_t)vcgeq_f32(v2, a1[1]);
  v3.i32[3] = v3.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) == 0) {
    return 0;
  }
  uint32x4_t v5 = (uint32x4_t)vcgeq_f32(a1[2], v2);
  v5.i32[3] = v5.i32[2];
  return vminvq_u32(v5) >> 31;
}

void csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)0>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

BOOL csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)1>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::evaluate(float32x4_t *a1, float32x4_t *a2)
{
  if (a2[2].i32[0] == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  float32x4_t v2 = a2[1];
  uint32x4_t v3 = (uint32x4_t)vcgeq_f32(v2, a1[1]);
  v3.i32[3] = v3.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) == 0) {
    return 1;
  }
  uint32x4_t v5 = (uint32x4_t)vcgeq_f32(a1[2], v2);
  v5.i32[3] = v5.i32[2];
  return (vminvq_u32(v5) & 0x80000000) == 0;
}

void csq::Predicate<csq::RangeBasedPredicate<re::Vector3<float>,(csq::RangeType)1>,rf::query::PositionProperty,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>::~Predicate()
{
}

uint64_t rf::data_flow::provider::InputFrameProvider::provideData(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v10 = *a2;
  long long v11 = v2;
  long long v3 = a2[3];
  long long v12 = a2[2];
  long long v13 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 24);
  rf::data_flow::DataGraph::evaluate<rf::data_flow::provider::InputFrame>(v4, (uint64_t)&v9, (uint64_t)v6);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)v6);
}

void rf::data_flow::provider::InputFrameProvider::~InputFrameProvider(rf::data_flow::provider::InputFrameProvider *this)
{
  *(void *)this = &unk_26E8F5AC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E8F5AC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x237DEE2B0);
}

void *rf::AnchorMetadataComponent::instance(rf::AnchorMetadataComponent *this)
{
  {
    rf::AnchorMetadataComponent::AnchorMetadataComponent((rf::AnchorMetadataComponent *)&rf::AnchorMetadataComponent::instance(void)::instance);
  }
  return &rf::AnchorMetadataComponent::instance(void)::instance;
}

void sub_235AC774C(_Unwind_Exception *a1)
{
}

rf::AnchorMetadataComponent *rf::AnchorMetadataComponent::AnchorMetadataComponent(rf::AnchorMetadataComponent *this)
{
  *(void *)this = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  rf::AnchorMetadataComponent::buildIntrospectionInfo((uint64_t)this);
  rf::AnchorMetadataComponent::registerAnchorMetadataComponent(this);
  return this;
}

void sub_235AC77B4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 13);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 9);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 5);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t rf::AnchorMetadataComponent::deinit(rf::AnchorMetadataComponent *this)
{
  *((_DWORD *)this + 36) = 0;
  if (*(void *)this)
  {
    RECustomComponentTypeDestroy();
    *(void *)this = 0;
  }
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    uint64_t result = RECIntrospectionStructUnregister();
    *((void *)this + 17) = 0;
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::buildIntrospectionInfo(uint64_t this)
{
  if (!*(void *)(this + 136))
  {
    uint64_t v1 = this;
    this = REStructBuilderCreate();
    if (this)
    {
      uint64_t v2 = this;
      if (REStructBuilderInit())
      {
        REStructBuilderAddMemberDataTypeWithTag();
        *(void *)(v1 + 136) = RECIntrospectionStructRegister();
      }
      return MEMORY[0x270F205A0](v2);
    }
  }
  return this;
}

void *rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void *this)
{
  if (!*this)
  {
    uint64_t v1 = this;
    this = (void *)RECustomComponentTypeCreate();
    void *v1 = this;
  }
  return this;
}

void rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_0::__invoke()
{
}

void rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_1::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x237DEE2B0);
  }
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_2::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result + 8;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t std::function<void ()(REComponent *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_3::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 64))
  {
    uint64_t v3 = result + 40;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_4::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 96))
  {
    uint64_t v3 = result + 72;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t rf::AnchorMetadataComponent::registerAnchorMetadataComponent(void)::$_5::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 128))
  {
    uint64_t v3 = result + 104;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

void rf::detail::createGeomModelDescriptorFromInputMesh(unsigned char *a1, uint64_t a2, unsigned char *a3)
{
  if (!a3[4] || (*(unsigned char *)(a2 + 136) ? (BOOL v5 = *(unsigned char *)(a2 + 200) == 0) : (BOOL v5 = 1), v5))
  {
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 128);
    unsigned int v8 = *(_DWORD *)(a2 + 192);
    unsigned int v9 = v8 / 3;
    [*(id *)(a2 + 176) contents];
    LOBYTE(__p[0]) = 3;
    std::vector<unsigned char>::vector(v52, v8 / 3uLL, __p);
    uint64_t v51 = REGeomModelDescriptorCreate();
    if (!*(unsigned char *)(a2 + 136)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v10 = [*(id *)(a2 + 112) contents];
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(__p, v7);
    uint64_t v12 = 16 * v7;
    if (v7)
    {
      uint64_t v13 = 0;
      long long v14 = (_DWORD *)(v10 + 8);
      do
      {
        *(void *)&long long v11 = *((void *)v14 - 1);
        DWORD2(v11) = *v14;
        *(_OWORD *)((char *)__p[0] + v13) = v11;
        v13 += 16;
        v14 += 3;
      }
      while (v12 != v13);
    }
    MEMORY[0x237DED7C0](v51, "vertexPosition", 1, v7, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(unsigned char *)(a2 + 168))
    {
      uint64_t v15 = [*(id *)(a2 + 144) contents];
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(__p, v7);
      if (v7)
      {
        uint64_t v17 = 0;
        long long v18 = (_DWORD *)(v15 + 8);
        do
        {
          *(void *)&long long v16 = *((void *)v18 - 1);
          DWORD2(v16) = *v18;
          *(_OWORD *)((char *)__p[0] + v17) = v16;
          v17 += 16;
          v18 += 3;
        }
        while (v12 != v17);
      }
      MEMORY[0x237DED7C0](v51, "vertexNormal", 1, v7, __p[0]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (a3[1] && *(unsigned char *)(a2 + 232) && [*(id *)(a2 + 208) length])
    {
      if (!*(unsigned char *)(a2 + 232)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v19 = [*(id *)(a2 + 208) contents];
      if (v8 >= 3)
      {
        char v21 = (unsigned __int8 *)v19;
        long long v20 = (char *)operator new(12 * v9);
        bzero(v20, 12 * v9);
        uint64_t v22 = 0;
        if (v9 <= 1) {
          unsigned int v23 = 1;
        }
        else {
          unsigned int v23 = v8 / 3;
        }
        uint64_t v24 = 12 * v23;
        do
        {
          int v25 = *v21++;
          unint64_t v26 = &v20[v22];
          *(_DWORD *)unint64_t v26 = v25;
          *((_DWORD *)v26 + 1) = v25;
          *((_DWORD *)v26 + 2) = v25;
          v22 += 12;
        }
        while (v24 != v22);
      }
      else
      {
        long long v20 = 0;
      }
      memcpy(__p, &unk_235AFB240, sizeof(__p));
      REGeomModelDescriptorAddIndexedAttributeUInt32();
      if (v20) {
        operator delete(v20);
      }
    }
    if (a3[2] && *(unsigned char *)(a2 + 264) && [*(id *)(a2 + 240) length])
    {
      if (!*(unsigned char *)(a2 + 264)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v27 = [*(id *)(a2 + 240) contents];
      memset(__p, 0, 24);
      if (v7)
      {
        _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(__p, v7);
        unint64_t v28 = (char *)__p[1];
        bzero(__p[1], 16 * v7);
        __p[1] = &v28[16 * v7];
        uint64_t v29 = 0;
        uint64_t v30 = (_DWORD *)(v27 + 8);
        do
        {
          *(void *)&long long v31 = *((void *)v30 - 1);
          DWORD2(v31) = *v30;
          HIDWORD(v31) = 1.0;
          *(_OWORD *)((char *)__p[0] + v29) = v31;
          v29 += 16;
          v30 += 3;
        }
        while (v12 != v29);
      }
      MEMORY[0x237DED7D0](v51, "vertexColor", 1, v7, __p[0]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (a3[3] && *(unsigned char *)(a2 + 296) && [*(id *)(a2 + 272) length])
    {
      if (!*(unsigned char *)(a2 + 296)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      long long v32 = (unsigned __int8 *)[*(id *)(a2 + 272) contents];
      uint64_t v33 = 3 * v9;
      if (v8 >= 3)
      {
        long long v34 = (char *)operator new(4 * v33);
        bzero(v34, 4 * v33);
        uint64_t v35 = 0;
        if (v9 <= 1) {
          unsigned int v36 = 1;
        }
        else {
          unsigned int v36 = v8 / 3;
        }
        uint64_t v37 = 12 * v36;
        unint64_t v38 = v32;
        do
        {
          int v39 = *v38++;
          uint64_t v40 = &v34[v35];
          *(_DWORD *)uint64_t v40 = v39;
          *((_DWORD *)v40 + 1) = v39;
          *((_DWORD *)v40 + 2) = v39;
          v35 += 12;
        }
        while (v37 != v35);
      }
      else
      {
        long long v34 = 0;
      }
      memcpy(__p, &unk_235AFB240, sizeof(__p));
      REGeomModelDescriptorAddIndexedAttributeUInt32();
      memcpy(__dst, &unk_235AFB640, sizeof(__dst));
      if (v8 >= 3)
      {
        size_t v42 = 4 * v33;
        uint64_t v41 = (char *)operator new(v42);
        bzero(v41, v42);
        uint64_t v43 = 0;
        if (v9 <= 1) {
          unsigned int v44 = 1;
        }
        else {
          unsigned int v44 = v8 / 3;
        }
        uint64_t v45 = 12 * v44;
        do
        {
          unsigned int v47 = *v32++;
          int v46 = v47;
          if (v47 >= 0x18) {
            int v46 = 24;
          }
          size_t v48 = (int *)&v41[v43];
          *size_t v48 = v46;
          v48[1] = v46;
          v48[2] = v46;
          v43 += 12;
        }
        while (v45 != v43);
      }
      else
      {
        uint64_t v41 = 0;
      }
      REGeomModelDescriptorAddIndexedAttributeVector3F();
      if (v41) {
        operator delete(v41);
      }
      if (v34) {
        operator delete(v34);
      }
    }
    *(void *)a1 = v51;
    uint64_t v51 = 0;
    a1[8] = 1;
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v51);
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
  }
}

void sub_235AC80A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (v63) {
    operator delete(v63);
  }
  RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((void *)(v64 - 120));
  uint64_t v66 = *(void **)(v64 - 112);
  if (v66)
  {
    *(void *)(v64 - 104) = v66;
    operator delete(v66);
  }
  _Unwind_Resume(a1);
}

void rf::detail::removeMeshesFrom(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unsigned int v8 = (void **)a1;
    do
    {
      unsigned int v9 = rf::realityFusionLogObject((rf *)a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        uint64_t v10 = (SBYTE7(v19) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl(&dword_235A7C000, v9, OS_LOG_TYPE_DEFAULT, "ARState: Removing mesh %s", buf, 0xCu);
        if (SBYTE7(v19) < 0) {
          operator delete(__p[0]);
        }
      }

      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8 + 90, v5);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8 + 95, v5);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(*v8, v5))
      {
        goto LABEL_12;
      }
      long long v11 = rf::realityFusionLogObject(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        long long v14 = (SBYTE7(v19) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_error_impl(&dword_235A7C000, v11, OS_LOG_TYPE_ERROR, "removeMeshesFrom(): Mesh %s to be removed but doesn't exist in meshDictionary!", buf, 0xCu);
        if (SBYTE7(v19) < 0) {
          operator delete(__p[0]);
        }
      }

      if ((a3 & 1) == 0)
      {
LABEL_12:
        *(_OWORD *)buf = *(_OWORD *)v5;
        long long v17 = *(_OWORD *)(v5 + 16);
        uint64_t v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(*v8, v5);
        if (!v12) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        *(_OWORD *)std::string __p = *(_OWORD *)buf;
        long long v19 = v17;
        uint64_t v13 = (std::__shared_weak_count *)v12[7];
        uint64_t v20 = v12[6];
        char v21 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(a4, (uint64_t)__p, (uint64_t)__p);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>(*v8, v5);
        a1 = re::internal::enableSignposts(0, 0);
        if (a1)
        {
          if (!*(void *)(v5 + 24))
          {
            if (*(unsigned char *)(v5 + 16)) {
              uint64_t v15 = *(void **)v5;
            }
            else {
              uint64_t v15 = (void *)v5;
            }
            *(void *)(v5 + 24) = ((*v15 >> 2) + (*v15 << 6) + v15[1] + 2654435769) ^ *v15;
          }
          a1 = kdebug_trace();
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
  }
}

void sub_235AC8410(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updateMeshAt(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v7 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)*a1, v4);
      unsigned int v8 = v7;
      if (v7)
      {
        unsigned int v9 = (void *)v7[6];
        uint64_t v10 = v9[4];
        rf::detail::createGeomModelDescriptorFromInputMesh(&v38, v4, a3);
        long long v11 = *(_OWORD *)(v4 + 16);
        v41[0] = *(_OWORD *)v4;
        v41[1] = v11;
        uint64_t v42 = v10 + 1;
        long long v12 = *(_OWORD *)(v4 + 32);
        long long v13 = *(_OWORD *)(v4 + 48);
        long long v14 = *(_OWORD *)(v4 + 80);
        long long v45 = *(_OWORD *)(v4 + 64);
        long long v46 = v14;
        long long v43 = v12;
        long long v44 = v13;
        char v47 = *(unsigned char *)(v4 + 96);
        int v48 = *(_DWORD *)(v4 + 100);
        uint64_t v49 = 0;
        LOBYTE(v50) = 0;
        char v52 = 0;
        if (*(unsigned char *)(v4 + 136))
        {
          uint64_t v15 = *(void *)(v4 + 112);
          *(void *)(v4 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
          uint64_t v50 = v15;
          long long v51 = *(_OWORD *)(v4 + 120);
          char v52 = 1;
        }
        LOBYTE(v53) = 0;
        char v55 = 0;
        if (*(unsigned char *)(v4 + 168))
        {
          uint64_t v16 = *(void *)(v4 + 144);
          *(void *)(v4 + 144) = 0;
          uint64_t v53 = v16;
          long long v54 = *(_OWORD *)(v4 + 152);
          char v55 = 1;
        }
        LOBYTE(v56) = 0;
        char v58 = 0;
        if (*(unsigned char *)(v4 + 200))
        {
          uint64_t v17 = *(void *)(v4 + 176);
          *(void *)(v4 + 176) = 0;
          uint64_t v56 = v17;
          long long v57 = *(_OWORD *)(v4 + 184);
          char v58 = 1;
        }
        LOBYTE(v59) = 0;
        char v61 = 0;
        if (*(unsigned char *)(v4 + 232))
        {
          uint64_t v18 = *(void *)(v4 + 208);
          *(void *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
          uint64_t v59 = v18;
          long long v60 = *(_OWORD *)(v4 + 216);
          char v61 = 1;
        }
        LOBYTE(v62) = 0;
        char v64 = 0;
        if (*(unsigned char *)(v4 + 264))
        {
          uint64_t v19 = *(void *)(v4 + 240);
          *(void *)(v4 + 240) = 0;
          uint64_t v62 = v19;
          long long v63 = *(_OWORD *)(v4 + 248);
          char v64 = 1;
        }
        LOBYTE(v65) = 0;
        char v67 = 0;
        if (*(unsigned char *)(v4 + 296))
        {
          uint64_t v20 = *(void *)(v4 + 272);
          *(void *)(v4 + 272) = 0;
          uint64_t v65 = v20;
          long long v66 = *(_OWORD *)(v4 + 280);
          char v67 = 1;
        }
        char v68 = 0;
        char v69 = 0;
        LOBYTE(v70) = 0;
        char v71 = 0;
        if (v39)
        {
          uint64_t v70 = v38;
          uint64_t v38 = 0;
          char v71 = 1;
        }
        std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](v72, v9 + 46);
        std::__optional_copy_base<RESharedPtr<REAsset>,false>::__optional_copy_base[abi:ne180100](v73, v9 + 48);
        v73[16] = 0;
        v73[24] = 0;
        std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v41, &v36);
        uint64_t v22 = v36;
        char v21 = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v23 = (std::__shared_weak_count *)v8[7];
        v8[6] = v22;
        v8[7] = v21;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        uint64_t v40 = (_OWORD *)v4;
        uint64_t v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a4, v4, (uint64_t)&std::piecewise_construct, &v40);
        uint64_t v26 = v36;
        int v25 = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v27 = (std::__shared_weak_count *)v24[7];
        v24[6] = v26;
        v24[7] = v25;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(void *)(v4 + 24))
          {
            if (*(unsigned char *)(v4 + 16)) {
              long long v31 = *(void **)v4;
            }
            else {
              long long v31 = (void *)v4;
            }
            *(void *)(v4 + 24) = ((*v31 >> 2) + (*v31 << 6) + v31[1] + 2654435769) ^ *v31;
          }
          uint64_t v28 = *a1;
          uint64_t v40 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v28, v4, (uint64_t)&std::piecewise_construct, &v40);
          kdebug_trace();
        }
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(void *)(v4 + 24))
          {
            if (*(unsigned char *)(v4 + 16)) {
              long long v32 = *(void **)v4;
            }
            else {
              long long v32 = (void *)v4;
            }
            *(void *)(v4 + 24) = ((*v32 >> 2) + (*v32 << 6) + v32[1] + 2654435769) ^ *v32;
          }
          uint64_t v29 = *a1;
          uint64_t v40 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v29, v4, (uint64_t)&std::piecewise_construct, &v40);
          kdebug_trace();
        }
        if (re::internal::enableSignposts(0, 0))
        {
          if (!*(void *)(v4 + 24))
          {
            if (*(unsigned char *)(v4 + 16)) {
              uint64_t v33 = *(void **)v4;
            }
            else {
              uint64_t v33 = (void *)v4;
            }
            *(void *)(v4 + 24) = ((*v33 >> 2) + (*v33 << 6) + v33[1] + 2654435769) ^ *v33;
          }
          uint64_t v30 = *a1;
          uint64_t v40 = (_OWORD *)v4;
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v30, v4, (uint64_t)&std::piecewise_construct, &v40);
          kdebug_trace();
        }
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        rf::data_flow::consumer::Mesh::~Mesh((id *)v41);
        if (v39) {
          RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v38);
        }
      }
      v4 += 336;
    }
    while (v4 != v5);
  }
}

void sub_235AC8940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  rf::data_flow::consumer::Mesh::~Mesh((id *)va1);
  if ((_BYTE)v16) {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr((uint64_t *)va);
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

void sub_235AC8A38()
{
}

void rf::detail::insertMeshesInto(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      rf::detail::createGeomModelDescriptorFromInputMesh(&v34, v5, a3);
      long long v10 = *(_OWORD *)(v5 + 16);
      v40[0] = *(_OWORD *)v5;
      v40[1] = v10;
      uint64_t v41 = 1;
      long long v11 = *(_OWORD *)(v5 + 32);
      long long v12 = *(_OWORD *)(v5 + 48);
      long long v13 = *(_OWORD *)(v5 + 80);
      long long v44 = *(_OWORD *)(v5 + 64);
      long long v45 = v13;
      long long v42 = v11;
      long long v43 = v12;
      char v46 = *(unsigned char *)(v5 + 96);
      int v47 = *(_DWORD *)(v5 + 100);
      uint64_t v48 = 0;
      LOBYTE(v49) = 0;
      char v51 = 0;
      if (*(unsigned char *)(v5 + 136))
      {
        uint64_t v14 = *(void *)(v5 + 112);
        *(void *)(v5 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
        uint64_t v49 = v14;
        long long v50 = *(_OWORD *)(v5 + 120);
        char v51 = 1;
      }
      LOBYTE(v52) = 0;
      char v54 = 0;
      if (*(unsigned char *)(v5 + 168))
      {
        uint64_t v15 = *(void *)(v5 + 144);
        *(void *)(v5 + 144) = 0;
        uint64_t v52 = v15;
        long long v53 = *(_OWORD *)(v5 + 152);
        char v54 = 1;
      }
      LOBYTE(v55) = 0;
      char v57 = 0;
      if (*(unsigned char *)(v5 + 200))
      {
        uint64_t v16 = *(void *)(v5 + 176);
        *(void *)(v5 + 176) = 0;
        uint64_t v55 = v16;
        long long v56 = *(_OWORD *)(v5 + 184);
        char v57 = 1;
      }
      LOBYTE(v5std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      char v60 = 0;
      if (*(unsigned char *)(v5 + 232))
      {
        uint64_t v17 = *(void *)(v5 + 208);
        *(void *)(v5 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
        uint64_t v58 = v17;
        long long v59 = *(_OWORD *)(v5 + 216);
        char v60 = 1;
      }
      LOBYTE(v61) = 0;
      char v63 = 0;
      if (*(unsigned char *)(v5 + 264))
      {
        uint64_t v18 = *(void *)(v5 + 240);
        *(void *)(v5 + 240) = 0;
        uint64_t v61 = v18;
        long long v62 = *(_OWORD *)(v5 + 248);
        char v63 = 1;
      }
      LOBYTE(v64) = 0;
      char v66 = 0;
      if (*(unsigned char *)(v5 + 296))
      {
        uint64_t v19 = *(void *)(v5 + 272);
        *(void *)(v5 + 272) = 0;
        uint64_t v64 = v19;
        long long v65 = *(_OWORD *)(v5 + 280);
        char v66 = 1;
      }
      char v67 = 0;
      char v68 = 0;
      LOBYTE(v69) = 0;
      char v70 = 0;
      if (v35)
      {
        uint64_t v69 = v34;
        uint64_t v34 = 0;
        char v70 = 1;
      }
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      char v75 = 0;
      char v76 = 0;
      uint64_t v20 = rf::realityFusionLogObject(v9);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v40, __p);
        char v21 = (SBYTE7(v38) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_235A7C000, v20, OS_LOG_TYPE_DEFAULT, "ARState: Adding mesh %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v38) < 0) {
          operator delete(__p[0]);
        }
      }

      std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v40, &buf);
      uint64_t v22 = *a1;
      long long v23 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v5;
      long long v38 = v23;
      uint64_t v36 = __p;
      uint64_t v24 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v22, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
      long long v25 = buf;
      if (*((void *)&buf + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = (std::__shared_weak_count *)v24[7];
      *((_OWORD *)v24 + 3) = v25;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      __p[0] = (void *)v5;
      uint64_t v27 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a4, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v28 = buf;
      if (*((void *)&buf + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = (std::__shared_weak_count *)v27[7];
      *((_OWORD *)v27 + 3) = v28;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(void *)(v5 + 24))
        {
          if (*(unsigned char *)(v5 + 16)) {
            long long v32 = *(void **)v5;
          }
          else {
            long long v32 = (void *)v5;
          }
          *(void *)(v5 + 24) = ((*v32 >> 2) + (*v32 << 6) + v32[1] + 2654435769) ^ *v32;
        }
        uint64_t v30 = *a1;
        __p[0] = (void *)v5;
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v30, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0))
      {
        if (!*(void *)(v5 + 24))
        {
          if (*(unsigned char *)(v5 + 16)) {
            uint64_t v33 = *(void **)v5;
          }
          else {
            uint64_t v33 = (void *)v5;
          }
          *(void *)(v5 + 24) = ((*v33 >> 2) + (*v33 << 6) + v33[1] + 2654435769) ^ *v33;
        }
        uint64_t v31 = *a1;
        __p[0] = (void *)v5;
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v31, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        kdebug_trace();
      }
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      rf::data_flow::consumer::Mesh::~Mesh((id *)v40);
      if (v35) {
        RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&v34);
      }
      v5 += 336;
    }
    while (v5 != v6);
  }
}

void sub_235AC8F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  rf::data_flow::consumer::Mesh::~Mesh(&a27);
  if (a18) {
    RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(&a17);
  }
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

void sub_235AC8F68()
{
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_235AC8FCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1C0uLL);
  uint64_t result = std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__shared_ptr_emplace[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,0>(v4, a1);
  *a2 = v4 + 4;
  a2[1] = v4;
  return result;
}

void sub_235AC9074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__shared_ptr_emplace[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E8F5AF8;
  rf::data_flow::consumer::Mesh::Mesh((uint64_t)(a1 + 4), a2);
  return a1;
}

void sub_235AC90D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_emplace<rf::data_flow::consumer::Mesh>::__on_zero_shared(uint64_t a1)
{
}

uint64_t rf::data_flow::consumer::Mesh::Mesh(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(result + 32) = a2[2];
  *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  *(_OWORD *)uint64_t result = v2;
  *(_OWORD *)(result + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(result + 96) = a2[6];
  *(_OWORD *)(result + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v7;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 80) = v6;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(unsigned char *)(result + 152) = 0;
  if (*((unsigned char *)a2 + 152))
  {
    uint64_t v8 = *((void *)a2 + 16);
    *((void *)a2 + 16) = 0;
    *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v8;
    *(_OWORD *)(result + 136) = *(long long *)((char *)a2 + 136);
    *(unsigned char *)(result + 152) = 1;
  }
  *(unsigned char *)(result + 160) = 0;
  *(unsigned char *)(result + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    uint64_t v9 = *((void *)a2 + 20);
    *((void *)a2 + 20) = 0;
    *(void *)(result + 160) = v9;
    *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = *(long long *)((char *)a2 + 168);
    *(unsigned char *)(result + 184) = 1;
  }
  *(unsigned char *)(result + 192) = 0;
  *(unsigned char *)(result + 216) = 0;
  if (*((unsigned char *)a2 + 216))
  {
    uint64_t v10 = *((void *)a2 + 24);
    *((void *)a2 + 24) = 0;
    *(void *)(result + 192) = v10;
    *(_OWORD *)(result + 200) = *(long long *)((char *)a2 + 200);
    *(unsigned char *)(result + 216) = 1;
  }
  *(unsigned char *)(result + 224) = 0;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 0;
  if (*((unsigned char *)a2 + 248))
  {
    uint64_t v11 = *((void *)a2 + 28);
    *((void *)a2 + 2std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *(void *)(result + 224) = v11;
    *(_OWORD *)(result + 232) = *(long long *)((char *)a2 + 232);
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 1;
  }
  *(unsigned char *)(result + 256) = 0;
  *(unsigned char *)(result + 280) = 0;
  if (*((unsigned char *)a2 + 280))
  {
    uint64_t v12 = *((void *)a2 + 32);
    *((void *)a2 + 32) = 0;
    *(void *)(result + 256) = v12;
    *(_OWORD *)(result + 264) = *(long long *)((char *)a2 + 264);
    *(unsigned char *)(result + 280) = 1;
  }
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 0;
  *(unsigned char *)(result + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  if (*((unsigned char *)a2 + 312))
  {
    uint64_t v13 = *((void *)a2 + 36);
    *((void *)a2 + 36) = 0;
    *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = v13;
    *(_OWORD *)(result + 296) = *(long long *)((char *)a2 + 296);
    *(unsigned char *)(result + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1;
  }
  *(unsigned char *)(result + 320) = 0;
  *(unsigned char *)(result + 344) = 0;
  if (*((unsigned char *)a2 + 344))
  {
    uint64_t v14 = *((void *)a2 + 40);
    *((void *)a2 + 40) = 0;
    *(void *)(result + 320) = v14;
    *(_OWORD *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = *(long long *)((char *)a2 + 328);
    *(unsigned char *)(result + 344) = 1;
  }
  *(unsigned char *)(result + 352) = 0;
  *(unsigned char *)(result + 360) = 0;
  if (*((unsigned char *)a2 + 360))
  {
    *(void *)(result + 352) = *((void *)a2 + 44);
    *((void *)a2 + 44) = 0;
    *(unsigned char *)(result + 360) = 1;
  }
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = 0;
  *(unsigned char *)(result + 376) = 0;
  if (*((unsigned char *)a2 + 376))
  {
    *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = *((void *)a2 + 46);
    *((void *)a2 + 46) = 0;
    *(unsigned char *)(result + 376) = 1;
  }
  *(unsigned char *)(result + 384) = 0;
  *(unsigned char *)(result + 392) = 0;
  if (*((unsigned char *)a2 + 392))
  {
    *(void *)(result + 384) = *((void *)a2 + 48);
    *((void *)a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
    *(unsigned char *)(result + 392) = 1;
  }
  *(unsigned char *)(result + 400) = 0;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 0;
  if (*((unsigned char *)a2 + 408))
  {
    uint64_t v15 = *((void *)a2 + 50);
    *((void *)a2 + 50) = 0;
    *(void *)(result + 400) = v15;
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 1;
  }
  return result;
}

uint64_t RFAnchorDefinitionComponentGetCustomComponentType(rf::AnchorDefinitionComponent *a1)
{
  return *(void *)rf::AnchorDefinitionComponent::instance(a1);
}

__n128 RFAnchorDefinitionComponentInit(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t Object = RECustomComponentGetObject();
  __n128 result = *a2;
  *(__n128 *)uint64_t Object = *a2;
  *(_DWORD *)(Object + 16) = a3;
  return result;
}

__n128 RFAnchorDefinitionComponentInitWithCustomAnchor()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t Object = RECustomComponentGetObject();
  char v4 = 0;
  uint64_t v5 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  if (v4) {
    uint64_t v1 = *(__n128 **)uu;
  }
  else {
    uint64_t v1 = (__n128 *)uu;
  }
  __n128 result = *v1;
  *(__n128 *)uint64_t Object = *v1;
  *(_DWORD *)(Object + 16) = 0;
  return result;
}

__n128 RFAnchorDefinitionComponentInitWithPlane(__n128 a1, __n128 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t Object = RECustomComponentGetObject();
  char v11 = 0;
  uint64_t v12 = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  if (v11) {
    uint64_t v6 = *(unsigned __int8 **)uu;
  }
  else {
    uint64_t v6 = uu;
  }
  *(_OWORD *)uint64_t Object = *(_OWORD *)v6;
  *(_DWORD *)(Object + 16) = 1;
  *(void *)(Object + 64) = a4;
  __n128 result = a2;
  *(__n128 *)(Object + 32) = a1;
  *(__n128 *)(Object + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = a2;
  return result;
}

__n128 RFAnchorDefinitionComponentGetIdentifier(uint64_t a1, __n128 *a2)
{
  uint64_t Object = (__n128 *)RECustomComponentGetObject();
  __n128 result = *Object;
  *a2 = *Object;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetAnchorType()
{
  return *(unsigned int *)(RECustomComponentGetObject() + 16);
}

__n128 RFAnchorDefinitionComponentGetCenter()
{
  return *(__n128 *)(RECustomComponentGetObject() + 32);
}

__n128 RFAnchorDefinitionComponentSetCenter(__n128 a1)
{
  uint64_t Object = (__n128 *)RECustomComponentGetObject();
  __n128 result = a1;
  Object[2] = a1;
  return result;
}

__n128 RFAnchorDefinitionComponentGetExtent()
{
  return *(__n128 *)(RECustomComponentGetObject() + 48);
}

__n128 RFAnchorDefinitionComponentSetExtent(__n128 a1)
{
  uint64_t Object = (__n128 *)RECustomComponentGetObject();
  __n128 result = a1;
  Object[3] = a1;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetRemoteOnly()
{
  return *(unsigned __int8 *)(RECustomComponentGetObject() + 20);
}

uint64_t RFAnchorDefinitionComponentSetRemoteOnly(uint64_t a1, char a2)
{
  uint64_t result = RECustomComponentGetObject();
  *(unsigned char *)(result + 20) = a2;
  return result;
}

uint64_t RFAnchorDefinitionComponentGetRedefinesExistingAnchor()
{
  return *(unsigned __int8 *)(RECustomComponentGetObject() + 21);
}

uint64_t RFAnchorDefinitionComponentSetRedefinesExistingAnchor(uint64_t a1, char a2)
{
  uint64_t result = RECustomComponentGetObject();
  *(unsigned char *)(result + 21) = a2;
  return result;
}

double rf::helpers::createAnchorFromAnchorDefinitionComponent@<D0>(uint64_t a1@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t Object = RECustomComponentGetObject();
  REComponentGetEntity();
  REEntityCalculateWorldMatrix4x4F();
  long long v18 = v3;
  long long v19 = v4;
  long long v20 = v5;
  long long v21 = v6;
  if (*(_DWORD *)(Object + 16) == 1)
  {
    LOBYTE(v25) = 0;
    *((void *)&v25 + 1) = 0;
    uuid_clear(uu);
    long long v26 = xmmword_235AF75E0;
    long long v27 = xmmword_235AF75F0;
    long long v28 = xmmword_235AF7600;
    *(_OWORD *)uint64_t v29 = xmmword_235AF7AA0;
    *(_DWORD *)&v29[16] = 16842752;
    *(_DWORD *)&v29[20] = 0;
    v29[24] = 0;
    uint64_t v30 = 0;
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    LOBYTE(v23) = 0;
    *((void *)&v23 + 1) = 0;
    uuid_clear(v22);
    *(_OWORD *)uuid_t uu = *(_OWORD *)Object;
    long long v25 = v23;
    long long v26 = v18;
    long long v27 = v19;
    long long v28 = v20;
    *(_OWORD *)uint64_t v29 = v21;
    *(_WORD *)&v29[16] = *(_WORD *)(Object + 20);
    v29[18] = *(unsigned char *)(Object + 72);
    *(_OWORD *)uuid_t v22 = *(_OWORD *)(Object + 32);
    rf::helpers::planeCenterAndRotationToCenterTransform((long long *)v22, &v31, *(float *)(Object + 52));
    long long v35 = *(_OWORD *)(Object + 48);
    DWORD1(v35) = 0;
    HIDWORD(v36) = *(void *)(Object + 64);
    long long v7 = *(_OWORD *)v29;
    *(_OWORD *)(a1 + 64) = v28;
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v29[9];
    long long v8 = v25;
    *(_OWORD *)a1 = *(_OWORD *)uu;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = v27;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v9;
    *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v30;
    long long v10 = v32;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v31;
    *(_OWORD *)(a1 + 144) = v10;
    long long v11 = v33;
    long long v12 = v34;
    long long v13 = v35;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v36;
    *(_OWORD *)(a1 + 176) = v12;
    *(_OWORD *)(a1 + 192) = v13;
    *(_OWORD *)(a1 + 160) = v11;
    double result = *(double *)&v37;
    *(_OWORD *)(a1 + 216) = v37;
    *(void *)(a1 + 232) = v38;
    *(_DWORD *)(a1 + 256) = 1;
  }
  else
  {
    LOBYTE(v25) = 0;
    *((void *)&v25 + 1) = 0;
    uuid_clear(uu);
    long long v26 = xmmword_235AF75E0;
    long long v27 = xmmword_235AF75F0;
    long long v28 = xmmword_235AF7600;
    *(_OWORD *)uint64_t v29 = xmmword_235AF7AA0;
    *(_DWORD *)&v29[16] = 16842752;
    *(_DWORD *)&v29[20] = 0;
    v29[24] = 0;
    uint64_t v30 = 0;
    LOBYTE(v23) = 0;
    *((void *)&v23 + 1) = 0;
    uuid_clear(v22);
    long long v16 = v23;
    *(_OWORD *)uuid_t uu = *(_OWORD *)Object;
    long long v15 = *(_OWORD *)uu;
    long long v25 = v23;
    long long v26 = v18;
    long long v27 = v19;
    long long v28 = v20;
    *(_OWORD *)uint64_t v29 = v21;
    *(_WORD *)&v29[16] = *(_WORD *)(Object + 20);
    v29[18] = *(unsigned char *)(Object + 72);
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    long long v17 = v27;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v17;
    double result = *(double *)&v29[9];
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v29[9];
    *(void *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v30;
    *(_DWORD *)(a1 + 256) = 0;
  }
  return result;
}

void sub_235AC98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Unwind_Resume(a1);
}

void rf::helpers::printAnchorDefinitionComponentInfo()
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t Object = (_OWORD *)RECustomComponentGetObject();
  uint64_t Entity = REComponentGetEntity();
  REEntityCalculateWorldMatrix4x4F();
  v17[0] = v2;
  v17[1] = v3;
  v17[2] = v4;
  void v17[3] = v5;
  long long v13 = v5;
  char v31 = 0;
  uint64_t v32 = 0;
  uuid_clear(uu);
  *(_OWORD *)uuid_t uu = *Object;
  if (Entity)
  {
    while (1)
    {
      RETransformComponentGetComponentType();
      uint64_t ComponentByClass = (rf *)REEntityGetComponentByClass();
      if (ComponentByClass) {
        break;
      }
      REAnchorComponentGetComponentType();
      uint64_t ComponentByClass = (rf *)REEntityGetComponentByClass();
      if (ComponentByClass) {
        break;
      }
      uint64_t ComponentByClass = (rf *)REEntityGetParent();
      if (!ComponentByClass) {
        goto LABEL_5;
      }
    }
    int v7 = 1;
  }
  else
  {
LABEL_5:
    int v7 = 0;
  }
  long long v8 = rf::realityFusionLogObject(ComponentByClass);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)uu, __p);
    int v9 = v16;
    long long v10 = (void **)__p[0];
    v14[0] = xmmword_235AF75E0;
    v14[1] = xmmword_235AF75F0;
    _OWORD v14[2] = xmmword_235AF7600;
    void v14[3] = xmmword_235AF7AA0;
    BOOL v11 = re::areAlmostEqual<float>((float *)v17, (float *)v14);
    *(_DWORD *)long long buf = 136316418;
    long long v12 = __p;
    if (v9 < 0) {
      long long v12 = v10;
    }
    long long v19 = v12;
    __int16 v20 = 2048;
    double v21 = *(float *)&v13;
    __int16 v22 = 2048;
    double v23 = *((float *)&v13 + 1);
    __int16 v24 = 2048;
    double v25 = *((float *)&v13 + 2);
    __int16 v26 = 1024;
    BOOL v27 = v11;
    __int16 v28 = 1024;
    int v29 = v7;
    _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "AnchorDefinitionDebug: AnchorDefinitionComponent id=%s, translation=[%f, %f, %f] (isIdentity=%d) (hasTransformOrAnchor=%d)", buf, 0x36u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_235AC9AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void RFMeshReconstructionServiceCreate()
{
  uint64_t v0 = 0;
  char v1 = 1;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  char v4 = _os_feature_enabled_impl();
  char v5 = 1;
  if (qword_26AB588A0 != -1) {
    dispatch_once(&qword_26AB588A0, &__block_literal_global_8);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void sub_235AC9C08(_Unwind_Exception *a1)
{
  MEMORY[0x237DEE2B0](v1, 0x10A0C40F791489ALL);
  _Unwind_Resume(a1);
}

unsigned char *RFMeshReconstructionServiceSetOcclusionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setOcclusionEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 24);
}

unsigned char *RFMeshReconstructionServiceSetLightingEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setLightingEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsLightingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 28);
}

unsigned char *RFMeshReconstructionServiceSetDynamicLightingEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setDynamicLightingEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsDynamicLightingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 30);
}

unsigned char *RFMeshReconstructionServiceSetCollisionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsCollisionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 25);
}

unsigned char *RFMeshReconstructionServiceSetPhysicsEnabled(uint64_t a1, int a2)
{
  uint64_t v3 = (unsigned char *)(*(void *)(a1 + 16) + 8);
  rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled(v3, a2);
  return rf::data_flow::consumer::MeshReconstructionConsumer::setRigidbodyEnabled(v3, a2);
}

uint64_t RFMeshReconstructionServiceIsPhysicsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 26);
}

void RFMeshReconstructionServiceExportAcousticMeshComponents(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16) + 8;
  uint64_t v4 = 0;
  rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(v3, a2, a3);
}

void sub_235AC9D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(NSError *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void RFMeshReconstructionServiceExportAcousticMeshComponentsWithCompletion(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = 0;
  if (a4)
  {
    v7[0] = &unk_26E8F5B68;
    v7[1] = MEMORY[0x237DEE740](a4);
    long long v8 = v7;
  }
  rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(v6 + 8, a2, a3);
}

void sub_235AC9E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t (**RFMeshReconstructionServiceSetMeshMaterial(uint64_t a1, uint64_t (*a2)(void, void, void, void, void)))(void, void, void, void, void)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setMeshMaterial((uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceMeshMaterial(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 40);
}

uint64_t (**RFMeshReconstructionServiceSetSyntheticMeshMaterial(uint64_t a1, uint64_t (*a2)(void, void, void, void, void)))(void, void, void, void, void)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setSyntheticMeshMaterial((uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceSyntheticMeshMaterial(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 48);
}

unsigned char *RFMeshReconstructionServiceSetWireframeEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setWireframeEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsWireframeEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 27);
}

uint64_t RFMeshReconstructionServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFMeshReconstructionServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFMeshReconstructionServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  float v9 = a3;
  uint64_t v10 = ECSManagerNullable;
  char v11 = v7;
  uint64_t v12 = a2;
  char v13 = 1;
  uint64_t v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 8) + 16))(v5 + 8, &v9);
}

double RFMeshReconstructionServiceGetBoundingBox(uint64_t a1, uint64_t a2, int a3)
{
  rf::data_flow::consumer::MeshReconstructionConsumer::getBoundingBox(a3, (uint64_t)&v4);
  return *(double *)&v4;
}

unsigned char *RFMeshReconstructionServiceSetAtmosphereOcclusionEnabled(uint64_t a1, int a2)
{
  return rf::data_flow::consumer::MeshReconstructionConsumer::setAtmosphereOcclusionEnabled((unsigned char *)(*(void *)(a1 + 16) + 8), a2);
}

uint64_t RFMeshReconstructionServiceIsAtmosphereOcclusionEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 32);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer26MeshReconstructionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_19[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      long long v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  long long v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::MeshReconstructionConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB588A8 = 0u;
  xmmword_26AB588B8 = 0u;
  xmmword_26AB588C8 = 0u;
  unk_26AB588D8 = 0u;
  xmmword_26AB588E8 = 0u;
  unk_26AB588F8 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB588A8 + 1) = v7;
  *(void *)&xmmword_26AB588B8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::initCallback;
  *(void *)&xmmword_26AB588C8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::finalizeCallback;
  qword_26AB588E0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB588E8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_10 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235ACA0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::finalizeCallback(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::BridgableObject>::operator()[abi:ne180100](v2);
  }
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::MeshReconstructionConsumer>::BridgableObject>::operator()[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = &unk_26E8F62F8;

  RESharedPtr<REAsset>::~RESharedPtr((void *)(a1 + 112));
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table(a1 + 64);
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__value_func<void ()(NSError *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5B68;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::destroy(uint64_t a1)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(NSError *),std::allocator<void({block_pointer} {__strong})(NSError *)>,void ()(NSError *)>::target_type()
{
}

void RFCameraMetadataProviderCreate()
{
  if (qword_26AB58910 != -1) {
    dispatch_once(&qword_26AB58910, &__block_literal_global_9);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void RFCameraMetadataProviderSetCameraExposure(uint64_t a1, float a2)
{
}

void RFCameraMetadataProviderSetClippingPointLux(uint64_t a1, float a2)
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8provider22CameraMetadataProviderEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_20[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      long long v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  long long v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::provider::CameraMetadataProvider]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58918 = 0u;
  xmmword_26AB58928 = 0u;
  xmmword_26AB58938 = 0u;
  unk_26AB58948 = 0u;
  xmmword_26AB58958 = 0u;
  unk_26AB58968 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58918 + 1) = v7;
  *(void *)&xmmword_26AB58928 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::initCallback;
  *(void *)&xmmword_26AB58938 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::finalizeCallback;
  qword_26AB58950 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58958 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyDebugDescriptionCallback;
  _MergedGlobals_11 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235ACA618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::finalizeCallback(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::provider::CameraMetadataProvider>>::copyDebugDescriptionCallback()
{
  return 0;
}

id rf::realityFusionLogObject(rf *this)
{
  if (rf::realityFusionLogObject(void)::once != -1) {
    dispatch_once(&rf::realityFusionLogObject(void)::once, &__block_literal_global_10);
  }
  int v1 = (void *)rf::realityFusionLogObject(void)::_realityFusionLogObject;
  return v1;
}

uint64_t ___ZN2rf22realityFusionLogObjectEv_block_invoke()
{
  rf::realityFusionLogObject(void)::_realityFusionLoguint64_t Object = (uint64_t)os_log_create("com.apple.re", "RealityFusion");
  return MEMORY[0x270F9A758]();
}

void ___ZN2rf36isRealityFusionVerboseLoggingEnabledEv_block_invoke()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v5, (const UInt8 *)v3);
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.rf.verboseLogging");
  unsigned int v0 = (unsigned __int16)rf::UserDefaults::BOOLValue((CFStringRef *)&v5, (const UInt8 *)__p);
  if (v0 <= 0x100) {
    LOBYTE(v0) = 0;
  }
  rf::isRealityFusionVerboseLoggingEnabled(void)::_realityFusionVerboseLoggingEnabled = v0 != 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v5);
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_235ACA7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  rf::UserDefaults::~UserDefaults((const void **)(v21 - 24));
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t convert(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!result)
  {
    rf::getMessage((rf *)"Service should not be null!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v1);
    uint64_t v4 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    convert(RFSceneUnderstandingService *)::$_0::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v2 = &v3;
    }
    else {
      char v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    }
    int v7 = 136315138;
    long long v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_235ACA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RFGetSceneUnderstandingServiceFromRE()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = MEMORY[0x237DEDEA0]();
  if (!result)
  {
    rf::getMessage((rf *)"Service should not be null!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v1);
    uint64_t v4 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    convert(RFSceneUnderstandingService *)::$_0::operator()(&v3);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v2 = &v3;
    }
    else {
      char v2 = (std::string *)v3.__r_.__value_.__r.__words[0];
    }
    int v7 = 136315138;
    long long v8 = v2;
    _os_log_send_and_compose_impl();
    std::string::~string(&v3);
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void sub_235ACAA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RFSceneUnderstandingServiceSetDepthFeatheringEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = convert(a1);
  return MEMORY[0x270F1FEA8](v3, a2);
}

uint64_t RFSceneUnderstandingServiceIsDepthFeatheringEnabled(uint64_t a1)
{
  uint64_t v1 = convert(a1);
  return MEMORY[0x270F1FEA0](v1);
}

void convert(RFSceneUnderstandingService *)::$_0::operator()(void *a1)
{
}

void *rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = &unk_26E8F5C58;
  a1[1] = v3;
  a1[3] = 0;
  uint64_t v4 = (objc_class *)MEMORY[0x263F83F00];
  id v5 = v3;
  id v6 = objc_alloc_init(v4);
  int v7 = (void *)a1[3];
  a1[3] = v6;

  return a1;
}

void sub_235ACAB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v7 = a2;
  *a1 = &unk_26E8F5C58;
  id v8 = v7;
  a1[1] = v8;
  a1[2] = a3;
  a1[3] = 0;
  rf::synthetic::SyntheticUsdKitParser::open((uint64_t)a1, a4);

  return a1;
}

void sub_235ACAC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::open(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    id v3 = a2;
  }
  else {
    id v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = [NSString stringWithCString:v3 encoding:4];
  id v5 = objc_alloc(MEMORY[0x263F83F00]);
  id v6 = [NSURL fileURLWithPath:v4];
  id v10 = 0;
  uint64_t v7 = [v5 initSceneFromURL:v6 error:&v10];
  id v8 = v10;
  long long v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
}

void sub_235ACAD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::setMetersPerUnitScale(rf::synthetic::SyntheticUsdKitParser *this, float a2)
{
  char v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    id v4 = v2;
    id v5 = objc_alloc(MEMORY[0x263F83ED8]);
    *(float *)&double v6 = a2;
    uint64_t v7 = (void *)[v5 initWithFloat:v6];
    std::string::basic_string[abi:ne180100]<0>(__p, "metersPerUnit");
    id v8 = NSString;
    int v9 = v15;
    id v10 = (void **)__p[0];
    uint64_t v11 = [NSString defaultCStringEncoding];
    if (v9 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = v10;
    }
    long long v13 = [v8 stringWithCString:v12 encoding:v11];
    [v4 setMetadataWithKey:v13 value:v7];

    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_235ACAE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  long long v18 = v17;

  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::save(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    id v3 = a2;
  }
  else {
    id v3 = (uint64_t *)*a2;
  }
  id v4 = [NSString stringWithCString:v3 encoding:4];
  id v5 = *(void **)(a1 + 24);
  double v6 = [NSURL fileURLWithPath:v4];
  uint64_t v7 = [v5 exportToURL:v6];

  return v7;
}

void sub_235ACAED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputMeshes(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  id v5 = *(void **)(a1 + 24);
  if (v5)
  {
    uint64_t v7 = [v5 nodeIterator];
    id v8 = [v7 nextObject];
    if (v8)
    {
      uint64_t v9 = 0;
      id v10 = (void *)*MEMORY[0x263F83FF8];
      do
      {
        uint64_t v11 = [v8 type];
        {

          if (v12)
          {
            char v16 = 0;
            uint64_t v17 = 0;
            uuid_clear(uu);
            *(void *)uuid_t uu = v9;
            rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(a1, v8, (long long *)uu, &v14);
            if ((void)v14) {
              std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100](a3, &v14);
            }
            if (*((void *)&v14 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
            }
            ++v9;
          }
        }
        else
        {
        }
        uint64_t v13 = [v7 nextObject];

        id v8 = (void *)v13;
      }
      while (v13);
    }
  }
}

void sub_235ACB058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::isSceneUnderstandingType(void *a1)
{
  id v1 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  char v2 = NSString;
  int v3 = v11;
  id v4 = (void **)__p[0];
  uint64_t v5 = [NSString defaultCStringEncoding];
  if (v3 >= 0) {
    double v6 = __p;
  }
  else {
    double v6 = v4;
  }
  uint64_t v7 = [v2 stringWithCString:v6 encoding:v5];
  id v8 = [v1 property:v7];

  if (v11 < 0) {
    operator delete(__p[0]);
  }

  return v8 != 0;
}

void sub_235ACB16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v16;

  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getSceneUnderstandingTypeProperty(void *a1)
{
  id v1 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  char v2 = NSString;
  int v3 = v16;
  id v4 = (void **)__p[0];
  uint64_t v5 = [NSString defaultCStringEncoding];
  if (v3 >= 0) {
    double v6 = __p;
  }
  else {
    double v6 = v4;
  }
  uint64_t v7 = [v2 stringWithCString:v6 encoding:v5];
  id v8 = [v1 property:v7];

  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = [v8 tokenValue];
  id v10 = [v9 stringValue];
  std::string::basic_string[abi:ne180100]<0>(v13, (char *)[v10 UTF8String]);

  uint64_t SceneUnderstandingTypeFromString = rf::synthetic::getSceneUnderstandingTypeFromString((unsigned __int8 *)v13);
  if (v14 < 0) {
    operator delete(v13[0]);
  }

  return SceneUnderstandingTypeFromString;
}

void sub_235ACB2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = v7;
  if (!*(void *)(a1 + 8))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_78;
  }
  long long v9 = a3[1];
  v84[0] = *a3;
  v84[1] = v9;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  char v89 = 1;
  int v90 = 0;
  uint64_t v91 = 0;
  LOBYTE(v92) = 0;
  char v95 = 0;
  LOBYTE(v96) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v103 = 0;
  LOBYTE(v104) = 0;
  char v107 = 0;
  LOBYTE(v10std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v113 = 0;
  LOBYTE(v114) = 0;
  char v115 = 0;
  uint64_t v69 = [v7 property:@"points"];
  char v70 = [v69 data];
  unsigned int v10 = [v70 arraySize];
  char v11 = [v70 dataNoCopy];
  BOOL v12 = (void *)[v11 copy];

  uint64_t v13 = *(void **)(a1 + 8);
  id v68 = v12;
  uint64_t v14 = v10;
  uint64_t v15 = 12 * v10;
  char v95 = 1;
  id v92 = (id)objc_msgSend(v13, "newBufferWithBytes:length:options:", objc_msgSend(v68, "bytes"), v15, 0);
  uint64_t v93 = 30;
  uint64_t v94 = v10;
  char v66 = [v8 property:@"faceVertexIndices"];
  char v67 = [v66 data];
  unsigned int v16 = [v67 arraySize];
  uint64_t v17 = [v67 dataNoCopy];
  uint64_t v18 = (void *)[v17 copy];

  long long v19 = *(void **)(a1 + 8);
  id v65 = v18;
  char v103 = 1;
  id v100 = (id)objc_msgSend(v19, "newBufferWithBytes:length:options:", objc_msgSend(v65, "bytes"), 4 * v16, 0);
  uint64_t v101 = 36;
  uint64_t v102 = v16;
  uint64_t v64 = [v8 property:@"normals"];
  char v71 = [v64 data];
  if (v71)
  {
    __int16 v20 = [v71 dataNoCopy];
    uint64_t v21 = (void *)[v20 copy];

    __int16 v22 = *(void **)(a1 + 8);
    id v23 = v21;
    char v99 = 1;
    id v96 = (id)objc_msgSend(v22, "newBufferWithBytes:length:options:", objc_msgSend(v23, "bytes"), v15, 0);
    uint64_t v97 = 30;
    uint64_t v98 = v14;
  }
  __int16 v24 = [v8 property:@"classifications"];
  unsigned int v25 = v16 / 3;
  if (v24)
  {
    std::vector<int>::vector((std::vector<int> *)v81, v25);
    [v24 intArray:*(void *)v81 maxCount:v25];
    std::vector<unsigned char>::vector(__p, v25);
    if (v16 >= 3)
    {
      uint64_t v26 = 0;
      if (v25 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v25;
      }
      do
      {
        *((unsigned char *)__p[0] + v26) = *(_DWORD *)(*(void *)v81 + 4 * v26);
        ++v26;
      }
      while (v27 != v26);
    }
    __int16 v28 = (void *)[*(id *)(a1 + 8) newBufferWithBytes:__p[0] length:v25 options:0];
    if (v107)
    {
      id v29 = v104;
      id v104 = v28;
    }
    else
    {
      id v104 = v28;
      char v107 = 1;
    }
    uint64_t v105 = 45;
    uint64_t v106 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)v81)
    {
      *(void *)&v81[8] = *(void *)v81;
      operator delete(*(void **)v81);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v75, "preliminary:sceneUnderstanding:classification");
  uint64_t v30 = NSString;
  int v31 = v76;
  uint64_t v32 = (void **)v75[0];
  uint64_t v33 = [NSString defaultCStringEncoding];
  if (v31 >= 0) {
    long long v34 = v75;
  }
  else {
    long long v34 = v32;
  }
  long long v35 = [v30 stringWithCString:v34 encoding:v33];
  uint64_t v36 = [v8 property:v35];

  if (v76 < 0)
  {
    operator delete(v75[0]);
    if (!v36) {
      goto LABEL_34;
    }
  }
  else if (!v36)
  {
    goto LABEL_34;
  }
  long long v37 = [v36 tokenValue];
  id v38 = [v37 stringValue];
  std::string::basic_string[abi:ne180100]<0>(v81, (char *)[v38 UTF8String]);

  LOBYTE(v72[0]) = rf::synthetic::getClassificationFromString(v81);
  std::vector<unsigned char>::vector(__p, v25, v72);
  uint64_t v39 = (void *)[*(id *)(a1 + 8) newBufferWithBytes:__p[0] length:v25 options:0];
  if (v107)
  {
    id v40 = v104;
    id v104 = v39;
  }
  else
  {
    id v104 = v39;
    char v107 = 1;
  }
  uint64_t v105 = 45;
  uint64_t v106 = v25;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }

LABEL_34:
  uint64_t v41 = [v8 property:@"materials"];
  if (v41)
  {
    std::vector<int>::vector((std::vector<int> *)v81, v25);
    [v41 intArray:*(void *)v81 maxCount:v25];
    std::vector<unsigned char>::vector(__p, v25);
    if (v16 >= 3)
    {
      uint64_t v42 = 0;
      if (v25 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v25;
      }
      do
      {
        *((unsigned char *)__p[0] + v42) = *(_DWORD *)(*(void *)v81 + 4 * v42);
        ++v42;
      }
      while (v43 != v42);
    }
    long long v44 = (void *)[*(id *)(a1 + 8) newBufferWithBytes:__p[0] length:v25 options:0];
    if (v113)
    {
      id v45 = v110;
      id v110 = v44;
    }
    else
    {
      id v110 = v44;
      char v113 = 1;
    }
    uint64_t v111 = 45;
    uint64_t v112 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)v81)
    {
      *(void *)&v81[8] = *(void *)v81;
      operator delete(*(void **)v81);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "preliminary:sceneUnderstanding:material");
  char v46 = NSString;
  int v47 = v74;
  uint64_t v48 = (void **)v73[0];
  uint64_t v49 = [NSString defaultCStringEncoding];
  if (v47 >= 0) {
    long long v50 = v73;
  }
  else {
    long long v50 = v48;
  }
  char v51 = [v46 stringWithCString:v50 encoding:v49];
  uint64_t v52 = [v8 property:v51];

  if (v74 < 0)
  {
    operator delete(v73[0]);
    if (!v52) {
      goto LABEL_62;
    }
LABEL_54:
    long long v53 = [v52 tokenValue];
    id v54 = [v53 stringValue];
    std::string::basic_string[abi:ne180100]<0>(v81, (char *)[v54 UTF8String]);

    LOBYTE(v72[0]) = 0;
    LOBYTE(v72[0]) = rf::synthetic::getMaterialFromString(v81);
    std::vector<unsigned char>::vector(__p, v25, v72);
    uint64_t v55 = (void *)[*(id *)(a1 + 8) newBufferWithBytes:__p[0] length:v25 options:0];
    if (v113)
    {
      id v56 = v110;
      id v110 = v55;
    }
    else
    {
      id v110 = v55;
      char v113 = 1;
    }
    uint64_t v111 = 45;
    uint64_t v112 = v25;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v81[23] & 0x80000000) != 0) {
      operator delete(*(void **)v81);
    }

    goto LABEL_62;
  }
  if (v52) {
    goto LABEL_54;
  }
LABEL_62:
  unsigned int v59 = v58;
  uint64_t v60 = 0;
  v62.i64[0] = 0;
  v61.i32[0] = 0;
  v61.i64[1] = 0;
  v61.i32[1] = HIDWORD(SceneUnitScale);
  v62.i64[1] = v59;
  *(_OWORD *)std::string __p = v72[0];
  long long v78 = v72[1];
  long long v79 = v72[2];
  long long v80 = v72[3];
  do
  {
    *(float32x4_t *)&v81[v60 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, COERCE_FLOAT(*(_OWORD *)&__p[v60])), v61, (float32x2_t)__p[v60], 1), v62, *(float32x4_t *)&__p[v60], 2), (float32x4_t)xmmword_235AF7AA0, *(float32x4_t *)&__p[v60], 3);
    v60 += 2;
  }
  while (v60 != 8);
  long long v85 = *(_OWORD *)v81;
  long long v86 = *(_OWORD *)&v81[16];
  long long v87 = v82;
  long long v88 = v83;
  char v63 = operator new(0x170uLL);
  v63[1] = 0;
  v63[2] = 0;
  *char v63 = &unk_26E8F5D30;
  std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>((uint64_t)(v63 + 4), v84);
  *a4 = v63 + 4;
  a4[1] = v63;

  if (v115) {
  if (v113)
  }

  if (v109) {
  if (v107)
  }

  if (v103) {
  if (v99)
  }

  if (v95) {
LABEL_78:
  }
}

void sub_235ACBBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id a56)
{
  if (__p) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }

  rf::data_flow::provider::InputMesh::~InputMesh(&a56);
  _Unwind_Resume(a1);
}

unint64_t *std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100](unint64_t *result, long long *a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  uint64_t v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *result;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    __int16 v22 = result + 2;
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *v3;
      uint64_t v5 = (void *)v3[1];
    }
    id v7 = v14 + 16;
    if (v5 == (void *)v8)
    {
      int64x2_t v17 = vdupq_n_s64(v8);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v16;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (void *)v8);
      int64x2_t v17 = *(int64x2_t *)v3;
    }
    unint64_t *v3 = (unint64_t)v14;
    v3[1] = (unint64_t)v7;
    int64x2_t v20 = v17;
    unint64_t v18 = v3[2];
    v3[2] = (unint64_t)&v13[16 * v12];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = (unint64_t *)std::__split_buffer<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    void *v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    id v7 = v5 + 2;
  }
  v3[1] = (unint64_t)v7;
  return result;
}

void rf::synthetic::SyntheticUsdKitParser::getInputAnchors(rf::synthetic::SyntheticUsdKitParser *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = [v4 nodeIterator];
    uint64_t v6 = [v5 nextObject];
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (void *)*MEMORY[0x263F83FF8];
      do
      {
        uint64_t v9 = [v6 type];
        if (v9 == v8)
        {

          if (isSceneUnderstandingType)
          {
            if (rf::synthetic::isSceneUnderstandingAnchor(SceneUnderstandingTypeProperty))
            {
              char v15 = 0;
              uint64_t v16 = 0;
              uuid_clear(uu);
              *(void *)uuid_t uu = v7;
              rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode((uint64_t)this, v6, (long long *)uu, (uint64_t *)&v13);
              if ((void)v13) {
                std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::push_back[abi:ne180100](a2, &v13);
              }
              if (*((void *)&v13 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
              }
              ++v7;
            }
          }
        }
        else
        {
        }
        uint64_t v12 = [v5 nextObject];

        uint64_t v6 = (void *)v12;
      }
      while (v12);
    }
  }
}

void sub_235ACC0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  id v7 = a2;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  *(_OWORD *)uuid_t uu = 0u;
  long long v111 = 0u;
  uuid_clear(uu);
  long long v112 = xmmword_235AF75E0;
  long long v113 = xmmword_235AF75F0;
  long long v114 = xmmword_235AF7600;
  long long v115 = xmmword_235AF7AA0;
  *(void *)&long long v116 = 16842752;
  BYTE8(v116) = 0;
  *(void *)&long long v117 = 0;
  int v118 = 0;
  float32x4_t v80 = v86;
  LODWORD(v10) = 0;
  HIDWORD(v10) = HIDWORD(SceneUnitScale);
  v11.i64[0] = 0;
  v11.i64[1] = v12;
  float32x4_t v13 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, v80.f32[0]), (float32x4_t)v10, *(float32x2_t *)v80.f32, 1), v11, v80, 2), (float32x4_t)0);
  v13.i32[3] = v80.i32[3];
  float32x4_t v86 = v13;
  int32x4_t v14 = (int32x4_t)vmulq_f32(v83, v83);
  v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)));
  v14.i32[0] = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).u32[0];
  int32x4_t v15 = (int32x4_t)vmulq_f32(v84, v84);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  float32x4_t v16 = vmulq_n_f32(v83, *(float *)v14.i32);
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  float32x4_t v17 = vmulq_n_f32(v84, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]);
  int32x4_t v18 = (int32x4_t)vmulq_f32(v85, v85);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  *(float32x2_t *)v15.i8 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  *(float32x2_t *)v15.i8 = vmul_f32(*(float32x2_t *)v15.i8, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)));
  v83.i32[2] = v16.i32[2];
  v84.i32[2] = v17.i32[2];
  v83.i64[0] = v16.i64[0];
  v84.i64[0] = v17.i64[0];
  float32x4_t v19 = vmulq_n_f32(v85, vmul_f32(*(float32x2_t *)v15.i8, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8))).f32[0]);
  v85.i64[0] = v19.i64[0];
  v85.i32[2] = v19.i32[2];
  if (SceneUnderstandingTypeProperty == 2)
  {
    long long v31 = a3[1];
    long long v91 = *a3;
    long long v92 = v31;
    float32x4_t v93 = v83;
    float32x4_t v94 = v84;
    float32x4_t v95 = v85;
    float32x4_t v96 = v86;
    int v97 = 16842752;
    int v98 = 0;
    char v99 = 0;
    id v100 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v107.i8[0] = 0;
    v107.i64[1] = 0;
    uuid_clear(v106);
    *(_OWORD *)id v108 = 0u;
    long long v109 = 0u;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<3ul,rf::data_flow::ObjectAnchor,rf::data_flow::ObjectAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
    if (v105 < 0) {
      operator delete(__p);
    }
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    goto LABEL_14;
  }
  if (SceneUnderstandingTypeProperty == 1)
  {
    long long v32 = a3[1];
    long long v91 = *a3;
    long long v92 = v32;
    float32x4_t v93 = v83;
    float32x4_t v94 = v84;
    float32x4_t v95 = v85;
    float32x4_t v96 = v86;
    LOWORD(v97) = 0;
    BYTE2(v97) = 1;
    id v33 = v7;
    std::string::basic_string[abi:ne180100]<0>(v89, "isTracked");
    long long v34 = NSString;
    int v35 = v90;
    uint64_t v36 = (void **)v89[0];
    uint64_t v37 = [NSString defaultCStringEncoding];
    if (v35 >= 0) {
      id v38 = v89;
    }
    else {
      id v38 = v36;
    }
    uint64_t v39 = objc_msgSend(v34, "stringWithCString:encoding:", v38, v37, 16842752);
    id v40 = [v33 property:v39];

    if (v90 < 0)
    {
      operator delete(v89[0]);
      if (v40) {
        goto LABEL_20;
      }
    }
    else if (v40)
    {
LABEL_20:
      char v41 = [v40 BOOLValue];
      goto LABEL_23;
    }
    char v41 = 0;
LABEL_23:

    HIBYTE(v97) = v41;
    int v98 = 0;
    char v99 = 0;
    id v100 = 0;
    id v42 = v33;
    std::string::basic_string[abi:ne180100]<0>(v89, "isDetectionOnly");
    uint64_t v43 = NSString;
    int v44 = v90;
    id v45 = (void **)v89[0];
    uint64_t v46 = [NSString defaultCStringEncoding];
    if (v44 >= 0) {
      int v47 = v89;
    }
    else {
      int v47 = v45;
    }
    uint64_t v48 = [v43 stringWithCString:v47 encoding:v46];
    uint64_t v49 = [v42 property:v48];

    if (v90 < 0)
    {
      operator delete(v89[0]);
      if (v49) {
        goto LABEL_28;
      }
    }
    else if (v49)
    {
LABEL_28:
      char v50 = [v49 BOOLValue];
LABEL_41:

      LOBYTE(v101[0]) = v50;
      std::string::basic_string[abi:ne180100]<0>(&v104, "");
      float32x4_t v107 = 0u;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<2ul,rf::data_flow::ImageAnchor,rf::data_flow::ImageAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
      if ((char)v106[7] < 0) {
        operator delete(v104);
      }
      if (SHIBYTE(__p) < 0) {
        operator delete(v101[1]);
      }
LABEL_14:

      goto LABEL_61;
    }
    char v50 = 1;
    goto LABEL_41;
  }
  if (SceneUnderstandingTypeProperty) {
    goto LABEL_61;
  }
  long long v21 = a3[1];
  long long v91 = *a3;
  long long v92 = v21;
  float32x4_t v93 = v83;
  float32x4_t v94 = v84;
  float32x4_t v95 = v85;
  float32x4_t v96 = v86;
  int v97 = 16842752;
  int v98 = 0;
  char v99 = 0;
  id v100 = 0;
  id v22 = v7;
  std::string::basic_string[abi:ne180100]<0>(v89, "center");
  id v23 = NSString;
  int v24 = v90;
  unsigned int v25 = (void **)v89[0];
  uint64_t v26 = [NSString defaultCStringEncoding];
  if (v24 >= 0) {
    uint64_t v27 = v89;
  }
  else {
    uint64_t v27 = v25;
  }
  __int16 v28 = objc_msgSend(v23, "stringWithCString:encoding:", v27, v26, 16842752);
  id v29 = [v22 property:v28];

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v29) {
      goto LABEL_9;
    }
  }
  else if (v29)
  {
LABEL_9:
    [v29 float3Value];
    float32x4_t v81 = v30;
    goto LABEL_31;
  }
  float32x4_t v81 = 0u;
LABEL_31:

  v51.i64[1] = v52;
  float32x4_t v82 = vmulq_f32(v81, v51);
  rf::helpers::planeCenterAndRotationToCenterTransform((long long *)&v82, v101, v20);
  uint64_t v55 = v54;
  v57.i64[0] = PlaneExtentProperty;
  v57.i64[1] = v55;
  v58.i64[0] = v56;
  v58.i64[1] = v59;
  float32x4_t v107 = vmulq_f32(v57, v58);
  id v60 = v22;
  std::string::basic_string[abi:ne180100]<0>(v89, "preliminary:sceneUnderstanding:plane:alignment");
  float32x4_t v61 = NSString;
  LODWORD(PlaneExtentProperty) = v90;
  float32x4_t v62 = (void **)v89[0];
  uint64_t v63 = [NSString defaultCStringEncoding];
  if ((PlaneExtentProperty & 0x80000000) == 0) {
    uint64_t v64 = v89;
  }
  else {
    uint64_t v64 = v62;
  }
  id v65 = [v61 stringWithCString:v64 encoding:v63];
  char v66 = [v60 property:v65];

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v66) {
      goto LABEL_36;
    }
LABEL_47:
    int AlignmentFromString = 0;
    goto LABEL_48;
  }
  if (!v66) {
    goto LABEL_47;
  }
LABEL_36:
  id v67 = [v66 stringValue];
  std::string::basic_string[abi:ne180100]<0>(v87, (char *)[v67 UTF8String]);
  int AlignmentFromString = rf::synthetic::getAlignmentFromString((unsigned __int8 *)v87);
  if (v88 < 0) {
    operator delete(v87[0]);
  }

LABEL_48:
  LODWORD(v108[0]) = AlignmentFromString;
  id v69 = v60;
  std::string::basic_string[abi:ne180100]<0>(v89, "preliminary:sceneUnderstanding:planeClassification");
  char v70 = NSString;
  int v71 = v90;
  char v72 = (void **)v89[0];
  uint64_t v73 = [NSString defaultCStringEncoding];
  if (v71 >= 0) {
    char v74 = v89;
  }
  else {
    char v74 = v72;
  }
  char v75 = [v70 stringWithCString:v74 encoding:v73];
  char v76 = [v69 property:v75];

  if (v90 < 0)
  {
    operator delete(v89[0]);
    if (v76) {
      goto LABEL_53;
    }
  }
  else if (v76)
  {
LABEL_53:
    id v77 = [v76 stringValue];
    std::string::basic_string[abi:ne180100]<0>(v87, (char *)[v77 UTF8String]);
    int PlaneClassificationFromString = rf::synthetic::getPlaneClassificationFromString((unsigned __int8 *)v87);
    if (v88 < 0) {
      operator delete(v87[0]);
    }

    goto LABEL_58;
  }
  int PlaneClassificationFromString = 0;
LABEL_58:

  HIDWORD(v108[0]) = PlaneClassificationFromString;
  long long v109 = 0uLL;
  v108[1] = 0;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__assign_alt[abi:ne180100]<1ul,rf::data_flow::PlaneAnchor,rf::data_flow::PlaneAnchor>((uint64_t)uu, (uint64_t)uu, (uint64_t)&v91);
  if (v108[1])
  {
    *(void **)&long long v109 = v108[1];
    operator delete(v108[1]);
  }

LABEL_61:
  long long v79 = operator new(0x130uLL);
  v79[1] = 0;
  v79[2] = 0;
  *long long v79 = &unk_26E8F5D80;
  *a4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v79 + 4), (uint64_t)uu);
  a4[1] = (uint64_t)v79;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ACC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a28 < 0) {
    operator delete(__p);
  }

  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputObjects(rf::synthetic::SyntheticUsdKitParser *this@<X0>, void **a2@<X8>)
{
  char v2 = this;
  uint64_t v39 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = [v4 nodeIterator];
    uint64_t v6 = [v5 nextObject];
    if (v6)
    {
      id v7 = 0;
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = [v6 metadataWithKey:@"typeName"];
        id v10 = [v9 stringValue];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v10 UTF8String]);

        unint64_t v11 = v35;
        if ((v35 & 0x80u) != 0) {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if (v11 == 14)
        {
          unsigned int v12 = (void **)__p[0];
          if ((v35 & 0x80u) == 0) {
            unsigned int v12 = __p;
          }
          float32x4_t v13 = *v12;
          uint64_t v14 = *(uint64_t *)((char *)v12 + 6);
          if (v13 == (void *)0x656E6563535F5241 && v14 == 0x7463656A624F656ELL) {
            break;
          }
        }
        if ((v35 & 0x80) != 0) {
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v16 = objc_msgSend(v5, "nextObject", v32);

        uint64_t v6 = (void *)v16;
        if (!v16) {
          goto LABEL_47;
        }
      }
      char v37 = 0;
      uint64_t v38 = 0;
      uuid_clear(uu);
      *(void *)uuid_t uu = v8;
      rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(&v33, (uint64_t)v2, v6, (long long *)uu);
      float32x4_t v17 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (!(void)v33)
      {
LABEL_41:
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        ++v8;
        if ((v35 & 0x80) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        operator delete(__p[0]);
        goto LABEL_15;
      }
      unint64_t v18 = (unint64_t)a2[2];
      if ((unint64_t)v7 < v18)
      {
        *(_OWORD *)id v7 = v33;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float32x4_t v19 = v7 + 16;
        goto LABEL_40;
      }
      float v20 = (char *)*a2;
      uint64_t v21 = (v7 - (unsigned char *)*a2) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      id v23 = v2;
      long long v32 = v33;
      uint64_t v24 = v18 - (void)v20;
      if (v24 >> 3 > v22) {
        unint64_t v22 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v22;
      }
      if (v25 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v26 = (char *)operator new(16 * v25);
      uint64_t v27 = &v26[16 * v21];
      *(_OWORD *)uint64_t v27 = v32;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __int16 v28 = &v26[16 * v25];
      float32x4_t v19 = v27 + 16;
      if (v7 == v20)
      {
        *a2 = v27;
        a2[1] = v19;
        a2[2] = v28;
        char v2 = v23;
        if (!v7) {
          goto LABEL_40;
        }
      }
      else
      {
        char v2 = v23;
        do
        {
          long long v29 = *((_OWORD *)v7 - 1);
          v7 -= 16;
          *((_OWORD *)v27 - 1) = v29;
          v27 -= 16;
          *(void *)id v7 = 0;
          *((void *)v7 + 1) = 0;
        }
        while (v7 != v20);
        id v7 = (char *)*a2;
        float32x4_t v30 = (char *)a2[1];
        *a2 = v27;
        a2[1] = v19;
        for (a2[2] = v28; v30 != v7; v30 -= 16)
        {
          long long v31 = (std::__shared_weak_count *)*((void *)v30 - 1);
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        if (!v7) {
          goto LABEL_40;
        }
      }
      operator delete(v7);
LABEL_40:
      a2[1] = v19;
      float32x4_t v17 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      id v7 = (char *)v19;
      goto LABEL_41;
    }
LABEL_47:
  }
}

void sub_235ACCEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(void *a1, uint64_t a2, void *a3, long long *a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  id v7 = a3;
  v63.i8[0] = 0;
  v63.i64[1] = 0;
  uuid_clear(uu);
  float32x4_t v67 = 0u;
  float32x4_t v68 = 0u;
  float32x4_t v65 = 0u;
  float32x4_t v66 = 0u;
  float32x4_t v64 = 0u;
  uint64_t v8 = [v7 metadataWithKey:@"typeName"];
  id v9 = [v8 stringValue];
  std::string::basic_string[abi:ne180100]<0>(v53, (char *)[v9 UTF8String]);

  unint64_t v10 = v54;
  if ((v54 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v53[1];
  }
  if (v10 == 14)
  {
    unint64_t v11 = v53;
    if ((v54 & 0x80u) != 0) {
      unint64_t v11 = (void **)v53[0];
    }
    unsigned int v12 = *v11;
    uint64_t v13 = *(uint64_t *)((char *)v11 + 6);
    if (v12 == (void *)0x656E6563535F5241 && v13 == 0x7463656A624F656ELL)
    {
      float32x4_t v15 = (float32x4_t)a4[1];
      long long v60 = *a4;
      float32x4_t v61 = v15;
      unsigned int v18 = v17;
      unint64_t v19 = 0;
      v21.i64[0] = 0;
      v20.i32[0] = 0;
      v20.i64[1] = 0;
      v20.i32[1] = HIDWORD(SceneUnitScale);
      v21.i64[1] = v18;
      v55[0] = v52[0];
      v55[1] = v52[1];
      v55[2] = v52[2];
      v55[3] = v52[3];
      do
      {
        *(float32x4_t *)&__p[v19 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)SceneUnitScale, COERCE_FLOAT(v55[v19 / 0x10])), v20, *(float32x2_t *)&v55[v19 / 0x10], 1), v21, (float32x4_t)v55[v19 / 0x10], 2), (float32x4_t)xmmword_235AF7AA0, (float32x4_t)v55[v19 / 0x10], 3);
        v19 += 16;
      }
      while (v19 != 64);
      long long v48 = v57;
      long long v50 = *(_OWORD *)__p;
      long long v44 = v59;
      long long v46 = v58;
      uint64_t v24 = v23;
      uint64_t v27 = v26;
      id v28 = v7;
      std::string::basic_string[abi:ne180100]<0>(__p, "classification");
      long long v29 = NSString;
      int v30 = SBYTE7(v57);
      long long v31 = (void **)__p[0];
      uint64_t v32 = [NSString defaultCStringEncoding];
      if (v30 >= 0) {
        long long v33 = __p;
      }
      else {
        long long v33 = v31;
      }
      long long v34 = objc_msgSend(v29, "stringWithCString:encoding:", v33, v32, v44, v46, v48, v50);
      unsigned __int8 v35 = [v28 property:v34];

      if (SBYTE7(v57) < 0) {
        operator delete(__p[0]);
      }
      int v36 = [v35 intValue];

      v37.i64[0] = PlaneExtentProperty;
      v38.i64[0] = v25;
      v37.i64[1] = v24;
      v38.i64[1] = v27;
      *(_OWORD *)uuid_t uu = v60;
      float32x4_t v63 = v61;
      float32x4_t v64 = v51;
      float32x4_t v65 = v49;
      float32x4_t v66 = v47;
      float32x4_t v67 = v45;
      float32x4_t v68 = vmulq_f32(v37, v38);
      v69.i64[0] = v36;
    }
  }
  uint64_t v39 = (float32x4_t *)operator new(0xA0uLL);
  v39->i64[1] = 0;
  v39[1].i64[0] = 0;
  v39->i64[0] = (uint64_t)&unk_26E8F5DD0;
  float32x4_t v40 = v67;
  v39[6] = v66;
  v39[7] = v40;
  float32x4_t v41 = v69;
  v39[8] = v68;
  v39[9] = v41;
  float32x4_t v42 = v63;
  void v39[2] = *(float32x4_t *)uu;
  v39[3] = v42;
  float32x4_t v43 = v65;
  v39[4] = v64;
  v39[5] = v43;
  *a1 = v39 + 2;
  a1[1] = v39;
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
}

void sub_235ACD258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbes(rf::synthetic::SyntheticUsdKitParser *this@<X0>, void **a2@<X8>)
{
  char v2 = this;
  uint64_t v39 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = [v4 nodeIterator];
    uint64_t v6 = [v5 nextObject];
    if (v6)
    {
      id v7 = 0;
      uint64_t v8 = 0;
      while (1)
      {
        id v9 = [v6 metadataWithKey:@"typeName"];
        id v10 = [v9 stringValue];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v10 UTF8String]);

        unint64_t v11 = v35;
        if ((v35 & 0x80u) != 0) {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if (v11 == 9)
        {
          unsigned int v12 = (void **)__p[0];
          if ((v35 & 0x80u) == 0) {
            unsigned int v12 = __p;
          }
          uint64_t v13 = *v12;
          int v14 = *((unsigned __int8 *)v12 + 8);
          if (v13 == (void *)0x6867694C656D6F44 && v14 == 116) {
            break;
          }
        }
        if ((v35 & 0x80) != 0) {
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v16 = objc_msgSend(v5, "nextObject", v32);

        uint64_t v6 = (void *)v16;
        if (!v16) {
          goto LABEL_47;
        }
      }
      char v37 = 0;
      uint64_t v38 = 0;
      uuid_clear(uu);
      *(void *)uuid_t uu = v8;
      rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(&v33, (uint64_t)v2, v6, uu);
      unsigned int v17 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (!(void)v33)
      {
LABEL_41:
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        ++v8;
        if ((v35 & 0x80) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        operator delete(__p[0]);
        goto LABEL_15;
      }
      unint64_t v18 = (unint64_t)a2[2];
      if ((unint64_t)v7 < v18)
      {
        *(_OWORD *)id v7 = v33;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = v7 + 16;
        goto LABEL_40;
      }
      float32x4_t v20 = (char *)*a2;
      uint64_t v21 = (v7 - (unsigned char *)*a2) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v2;
      long long v32 = v33;
      uint64_t v24 = v18 - (void)v20;
      if (v24 >> 3 > v22) {
        unint64_t v22 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v22;
      }
      if (v25 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v26 = (char *)operator new(16 * v25);
      uint64_t v27 = &v26[16 * v21];
      *(_OWORD *)uint64_t v27 = v32;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v28 = &v26[16 * v25];
      unint64_t v19 = v27 + 16;
      if (v7 == v20)
      {
        *a2 = v27;
        a2[1] = v19;
        a2[2] = v28;
        char v2 = v23;
        if (!v7) {
          goto LABEL_40;
        }
      }
      else
      {
        char v2 = v23;
        do
        {
          long long v29 = *((_OWORD *)v7 - 1);
          v7 -= 16;
          *((_OWORD *)v27 - 1) = v29;
          v27 -= 16;
          *(void *)id v7 = 0;
          *((void *)v7 + 1) = 0;
        }
        while (v7 != v20);
        id v7 = (char *)*a2;
        int v30 = (char *)a2[1];
        *a2 = v27;
        a2[1] = v19;
        for (a2[2] = v28; v30 != v7; v30 -= 16)
        {
          long long v31 = (std::__shared_weak_count *)*((void *)v30 - 1);
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        if (!v7) {
          goto LABEL_40;
        }
      }
      operator delete(v7);
LABEL_40:
      a2[1] = v19;
      unsigned int v17 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      id v7 = (char *)v19;
      goto LABEL_41;
    }
LABEL_47:
  }
}

void sub_235ACD600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(void *a1, uint64_t a2, void *a3, _OWORD *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v7 = a3;
  if (!*(void *)(a2 + 16))
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_19;
  }
  LOBYTE(v67) = 0;
  *((void *)&v67 + 1) = 0;
  uuid_clear(uu);
  char v74 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  int32x4_t v72 = 0u;
  LOBYTE(v73) = 0;
  uint64_t v75 = 1065353216;
  uint64_t v8 = [v7 metadataWithKey:@"typeName"];
  id v9 = [v8 stringValue];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v9 UTF8String]);

  unint64_t v10 = v56;
  if ((v56 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10 != 9) {
    goto LABEL_11;
  }
  unint64_t v11 = __p;
  if ((v56 & 0x80u) != 0) {
    unint64_t v11 = (void **)__p[0];
  }
  unsigned int v12 = *v11;
  int v13 = *((unsigned __int8 *)v11 + 8);
  if (v12 != (void *)0x6867694C656D6F44 || v13 != 116) {
    goto LABEL_11;
  }
  float32x4_t v20 = [v7 property:@"inputs:texture:file"];
  uint64_t v21 = [v20 resourcePath];
  long long v50 = [MEMORY[0x263F83EF8] resourceWithResourcePath:v21];
  float32x4_t v51 = [v50 dataNoCopy];
  RETextureImportOperationCreateWithData();
  RETextureImportOperationSetMipmapMode();
  uint64_t v52 = RETextureImportOperationCopyTextureDescriptor();
  [v52 setStorageMode:0];
  [v52 setCompressionType:0];
  unint64_t v22 = (rf *)[v52 pixelFormat];
  if (v22 != (rf *)115)
  {
    uint64_t v27 = rf::realityFusionLogObject(v22);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_235A7C000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Expected a texture in RGBA16Float format.", buf, 2u);
    }
    goto LABEL_41;
  }
  uint64_t v23 = (rf *)[v52 width];
  if (v23 != (rf *)256)
  {
    uint64_t v27 = rf::realityFusionLogObject(v23);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = [v52 width];
      uint64_t v43 = [v52 height];
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v43;
      _os_log_error_impl(&dword_235A7C000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Expected a texture with width 256. Loaded texture is %lux%lu.", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if ([v52 textureType] == 5)
  {
    uint64_t v24 = [v21 path];
    char v25 = [v24 hasSuffix:@"_envProbeMap.ktx"];

    if (v25)
    {
      long long v46 = v21;
      char v26 = 0;
      goto LABEL_34;
    }
  }
  unint64_t v28 = [v52 textureType];
  if (v28 != 2 || (v29 = [v52 width], unint64_t v28 = objc_msgSend(v52, "height"), v29 != v28 / 6))
  {
    uint64_t v27 = rf::realityFusionLogObject((rf *)v28);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_235A7C000, v27, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to create cube map texture. Provided texture asset must be one of the following types: 1. A 2D texture with a 1x6 layout(height=6*width). 2. A cube map texture in .ktx format with '_envProbeMap.ktx' suffix.", buf, 2u);
    }
LABEL_41:

    RERelease();
    *a1 = 0;
    a1[1] = 0;
    int v35 = 1;
    goto LABEL_42;
  }
  long long v46 = v21;
  char v26 = 1;
LABEL_34:
  v54[6] = 0;
  if (RETextureImportOperationCreateAsset())
  {
    MEMORY[0x237DEDE90](*(void *)(a2 + 16));
    float32x4_t v45 = objc_msgSend(MEMORY[0x263F12A50], "textureCubeDescriptorWithPixelFormat:size:mipmapped:", objc_msgSend(v52, "pixelFormat"), objc_msgSend(v52, "width"), 1);
    [v45 setStorageMode:0];
    float32x4_t v49 = (void *)[*(id *)(a2 + 8) newTextureWithDescriptor:v45];
    if (v26)
    {
      long long v44 = v20;
      long long v48 = (void *)[*(id *)(a2 + 8) newTextureWithDescriptor:v52];
      RETextureAssetCopyToDestination();
      uint64_t v30 = [v48 width];
      uint64_t v31 = 8 * v30;
      size_t v47 = 8 * v30 * v30;
      long long v32 = malloc_type_malloc(v47, 0x15DA478AuLL);
      uint64_t v33 = 0;
      for (uint64_t i = 0; i != 6; ++i)
      {
        v54[0] = 0;
        v54[1] = v33;
        v54[2] = 0;
        void v54[3] = v30;
        void v54[4] = v30;
        v54[5] = 1;
        [v48 getBytes:v32 bytesPerRow:v31 fromRegion:v54 mipmapLevel:0];
        memset(v53, 0, 24);
        v53[3] = v30;
        v53[4] = v30;
        v53[5] = 1;
        [v49 replaceRegion:v53 mipmapLevel:0 slice:i withBytes:v32 bytesPerRow:v31 bytesPerImage:v47];
        v33 += v30;
      }
      free(v32);

      float32x4_t v20 = v44;
      uint64_t v21 = v46;
    }
    else
    {
      uint64_t v21 = v46;
      RETextureAssetCopyToDestination();
    }
    RERelease();
    RERelease();
    char v37 = (void *)[*(id *)(a2 + 8) newCommandQueue];
    uint64_t v38 = [v37 commandBuffer];
    uint64_t v39 = [v38 blitCommandEncoder];
    [v39 generateMipmapsForTexture:v49];
    [v39 endEncoding];
    [v38 commit];
    [v38 waitUntilCompleted];
    long long v40 = a4[1];
    *(_OWORD *)long long buf = *a4;
    *(_OWORD *)&uint8_t buf[16] = v40;
    long long v58 = xmmword_235AF75E0;
    long long v59 = xmmword_235AF75F0;
    long long v60 = xmmword_235AF7600;
    long long v61 = xmmword_235AF7AA0;
    int32x4_t v62 = vdupq_n_s32(0x7F800000u);
    id v41 = v49;
    id v63 = v41;
    char v64 = 1;
    uint64_t v65 = 1065353216;
    long long v70 = v60;
    long long v71 = v61;
    int32x4_t v72 = v62;
    *(_OWORD *)uuid_t uu = *(_OWORD *)buf;
    long long v67 = *(_OWORD *)&buf[16];
    long long v68 = v58;
    long long v69 = v59;
    std::__optional_storage_base<objc_object  {objcproto10MTLTexture}* {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<objc_object  {objcproto10MTLTexture}*,false>>((uint64_t)&v73, (uint64_t *)&v63);
    uint64_t v75 = v65;
    if (v64) {

    }
    int v35 = 0;
  }
  else
  {
    int v36 = rf::realityFusionLogObject(0);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_235A7C000, v36, OS_LOG_TYPE_ERROR, "SyntheticIO: Failed to import environment probe texture", buf, 2u);
    }

    RERelease();
    *a1 = 0;
    a1[1] = 0;
    int v35 = 1;
    uint64_t v21 = v46;
  }
LABEL_42:

  if (!v35)
  {
LABEL_11:
    float32x4_t v15 = operator new(0xB0uLL);
    v15[1] = 0;
    _OWORD v15[2] = 0;
    *float32x4_t v15 = &unk_26E8F5E20;
    long long v16 = v71;
    *((_OWORD *)v15 + 6) = v70;
    *((_OWORD *)v15 + 7) = v16;
    *((int32x4_t *)v15 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v72;
    long long v17 = v67;
    *((_OWORD *)v15 + 2) = *(_OWORD *)uu;
    *((_OWORD *)v15 + 3) = v17;
    long long v18 = v69;
    *((_OWORD *)v15 + 4) = v68;
    *((_OWORD *)v15 + 5) = v18;
    *((unsigned char *)v15 + 144) = 0;
    *((unsigned char *)v15 + 152) = 0;
    if (v74)
    {
      id v19 = v73;
      id v73 = 0;
      v15[18] = v19;
      *((unsigned char *)v15 + 152) = 1;
    }
    v15[20] = v75;
    *a1 = v15 + 4;
    a1[1] = v15;
  }
  if ((char)v56 < 0) {
    operator delete(__p[0]);
  }
  if (v74) {

  }
LABEL_19:
}

void sub_235ACDE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a73) {

  }
  _Unwind_Resume(a1);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::getSpatialSceneClassification(rf::synthetic::SyntheticUsdKitParser *this)
{
  return 1;
}

void rf::synthetic::SyntheticUsdKitParser::addMeshFromUpdateMesh(uint64_t a1, _OWORD **a2, float32x4_t *a3, unsigned __int8 *a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (*a2) {
    goto LABEL_2;
  }
  rf::getMessage((rf *)"Mesh should not be null.", &__p);
  rf::internal::logAssert((const char *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  rf::internal::debugBreakHandler(v54);
  if (*a2)
  {
LABEL_2:
    id v8 = objc_alloc(MEMORY[0x263F83EE8]);
    id v9 = NSString;
    long long v10 = (*a2)[1];
    v66[0] = **a2;
    v66[1] = v10;
    rf::synthetic::getMeshPathFromIdentifier((rf::data_flow::RFUUID *)v66);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
      std::vector<int>::pointer p_p = (std::vector<int>::pointer)&__p;
    }
    else {
      std::vector<int>::pointer p_p = __p.__begin_;
    }
    unsigned int v12 = [v9 stringWithUTF8String:p_p];
    int v13 = (void *)[v8 initWithString:v12];

    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    int v14 = (void *)[*(id *)(a1 + 24) newNodeAtPath:v13 type:*MEMORY[0x263F83FF8]];
    if (*a4 == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "guide");
      if (v58 < 0) {
        operator delete(v57[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v55, "none");
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    float32x4_t v15 = *a2;
    long long v16 = (void *)MEMORY[0x263F83F58];
    if (*((unsigned char *)*a2 + 152))
    {
      unint64_t v17 = *((void *)v15 + 18);
      uint64_t v18 = [*((id *)v15 + 16) contents];
      std::vector<re::Vector3<float>>::vector(&__p, v17);
      if (v17)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_DWORD *)(v18 + 8);
        do
        {
          *(void *)&long long v19 = *((void *)v21 - 1);
          DWORD2(v19) = *v21;
          *(_OWORD *)&__p.__begin_[4 * v20++] = v19;
          v21 += 3;
        }
        while (v17 != v20);
      }
      unint64_t v22 = (void *)[v14 newPropertyWithName:@"points" type:*v16 role:0];
      [v22 setFloat3Array:__p.__begin_ count:v17];

      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      float32x4_t v15 = *a2;
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v23 = (void *)MEMORY[0x263F83F80];
    if (*((unsigned char *)v15 + 216))
    {
      uint64_t v24 = [*((id *)v15 + 24) contents];
      if (!*((unsigned char *)*a2 + 216)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v25 = v24;
      unint64_t v26 = *((void *)*a2 + 26);
      uint64_t v27 = (void *)[v14 newPropertyWithName:@"faceVertexIndices" type:*MEMORY[0x263F83F78] role:0];
      [v27 setIntArray:v25 count:v26];
      std::vector<int>::size_type v28 = v26 / 3;
      __x[0] = 3;
      std::vector<int>::vector(&__p, v26 / 3, __x);
      uint64_t v29 = (void *)[v14 newPropertyWithName:@"faceVertexCounts" type:*v23 role:0];
      [v29 setIntArray:__p.__begin_ count:v28];

      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }

      float32x4_t v15 = *a2;
    }
    else
    {
      std::vector<int>::size_type v28 = 0;
    }
    if (*((unsigned char *)v15 + 184))
    {
      uint64_t v30 = [*((id *)v15 + 20) length];
      float32x4_t v15 = *a2;
      if (v30)
      {
        if (!*((unsigned char *)v15 + 184)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v31 = [*((id *)v15 + 20) contents];
        std::vector<re::Vector3<float>>::vector(&__p, v17);
        if (v17)
        {
          uint64_t v33 = 0;
          long long v34 = (_DWORD *)(v31 + 8);
          do
          {
            *(void *)&long long v32 = *((void *)v34 - 1);
            DWORD2(v32) = *v34;
            *(_OWORD *)&__p.__begin_[4 * v33++] = v32;
            v34 += 3;
          }
          while (v17 != v33);
        }
        int v35 = (void *)[v14 newPropertyWithName:@"normals" type:*v16 role:*MEMORY[0x263F84048]];
        [v35 setFloat3Array:__p.__begin_ count:v17];

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        float32x4_t v15 = *a2;
      }
    }
    if (*((unsigned char *)v15 + 248))
    {
      uint64_t v36 = [*((id *)v15 + 28) length];
      float32x4_t v15 = *a2;
      if (v36)
      {
        if (!*((unsigned char *)v15 + 248)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v37 = [*((id *)v15 + 28) contents];
        std::vector<int>::vector(&__p, v28);
        if (v28)
        {
          uint64_t v38 = 0;
          std::vector<int>::pointer begin = __p.__begin_;
          do
          {
            begin[v38] = *(unsigned __int8 *)(v37 + v38);
            ++v38;
          }
          while (v28 > v38);
        }
        long long v40 = (void *)[v14 newPropertyWithName:@"classifications" type:*v23 role:0];
        [v40 setIntArray:__p.__begin_ count:v28];

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        float32x4_t v15 = *a2;
      }
    }
    if (*((unsigned char *)v15 + 312))
    {
      uint64_t v41 = [*((id *)v15 + 36) length];
      float32x4_t v15 = *a2;
      if (v41)
      {
        if (!*((unsigned char *)v15 + 312)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v42 = [*((id *)v15 + 36) contents];
        std::vector<int>::vector(&__p, v28);
        if (v28)
        {
          uint64_t v43 = 0;
          std::vector<int>::pointer v44 = __p.__begin_;
          do
          {
            v44[v43] = *(unsigned __int8 *)(v42 + v43);
            ++v43;
          }
          while (v28 > v43);
        }
        float32x4_t v45 = (void *)[v14 newPropertyWithName:@"materials" type:*v23 role:0];
        [v45 setIntArray:__p.__begin_ count:v28];

        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        float32x4_t v15 = *a2;
      }
    }
    uint64_t v46 = 0;
    float32x4_t v47 = *a3;
    float32x4_t v48 = a3[1];
    float32x4_t v49 = a3[2];
    float32x4_t v50 = a3[3];
    long long v51 = v15[4];
    long long v52 = v15[5];
    long long v53 = v15[6];
    *(_OWORD *)__x = v15[3];
    long long v60 = v51;
    long long v61 = v52;
    long long v62 = v53;
    do
    {
      *(float32x4_t *)((char *)&__p.__begin_ + v46 * 4) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)&__x[v46])), v48, *(float32x2_t *)&__x[v46], 1), v49, *(float32x4_t *)&__x[v46], 2), v50, *(float32x4_t *)&__x[v46], 3);
      v46 += 4;
    }
    while (v46 != 16);
    objc_msgSend(MEMORY[0x263F83F10], "setLocalTransformWithNode:transform:time:", v14, *(double *)&__p.__begin_, *(double *)&__p.__end_cap_.__value_, *(double *)&v64, *(double *)&v65, 0.0);
  }
}

void sub_235ACE574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::createSceneUnderstandingTypeProperty(void *a1, unsigned __int8 *a2)
{
  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:type");
  unint64_t v4 = NSString;
  int v5 = v19;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = v6;
  }
  id v9 = [v4 stringWithCString:v8 encoding:v7];
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  long long v10 = (void *)[v3 newPropertyWithName:v9 type:*MEMORY[0x263F83FB0] role:0];
  rf::synthetic::getSceneUnderstandingTypeString(*a2, &v17);
  unint64_t v11 = NSString;
  int v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type v13 = v17.__r_.__value_.__r.__words[0];
  uint64_t v14 = [NSString defaultCStringEncoding];
  if (v12 >= 0) {
    float32x4_t v15 = &v17;
  }
  else {
    float32x4_t v15 = (std::string *)v13;
  }
  long long v16 = [v11 stringWithCString:v15 encoding:v14];
  [v10 setStringValue:v16];

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_235ACE7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v18 = v17;

  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_235ACE814(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235ACE808);
}

void anonymous namespace'::createPurposeProperty(void *a1, uint64_t a2)
{
  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "purpose");
  unint64_t v4 = NSString;
  int v5 = v19;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = v6;
  }
  id v9 = [v4 stringWithCString:v8 encoding:v7];
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  long long v10 = (void *)[v3 newPropertyWithName:v9 type:*MEMORY[0x263F83FB0] role:0];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  unint64_t v11 = NSString;
  int v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type v13 = v17.__r_.__value_.__r.__words[0];
  uint64_t v14 = objc_msgSend(NSString, "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0) {
    float32x4_t v15 = &v17;
  }
  else {
    float32x4_t v15 = (std::string *)v13;
  }
  long long v16 = [v11 stringWithCString:v15 encoding:v14];
  [v10 setStringValue:v16];

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_235ACE96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_235ACE9BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235ACE9B0);
}

void anonymous namespace'::createSubdivisionSchemeProperty(void *a1, uint64_t a2)
{
  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "subdivisionScheme");
  unint64_t v4 = NSString;
  int v5 = v19;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = v6;
  }
  id v9 = [v4 stringWithCString:v8 encoding:v7];
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  long long v10 = (void *)[v3 newPropertyWithName:v9 type:*MEMORY[0x263F83FB0] role:0];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  unint64_t v11 = NSString;
  int v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type v13 = v17.__r_.__value_.__r.__words[0];
  uint64_t v14 = objc_msgSend(NSString, "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0) {
    float32x4_t v15 = &v17;
  }
  else {
    float32x4_t v15 = (std::string *)v13;
  }
  long long v16 = [v11 stringWithCString:v15 encoding:v14];
  [v10 setStringValue:v16];

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_235ACEB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_235ACEB64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235ACEB58);
}

uint64_t rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v3 = *a3;
  *(_OWORD *)&v54[24] = a3[1];
  long long v4 = a3[1];
  *(_OWORD *)&v54[8] = *a3;
  *(_OWORD *)&v54[40] = a3[2];
  long long v5 = a3[2];
  *(_OWORD *)&v54[56] = a3[3];
  uint64_t v12 = a1;
  long long v14 = *(_OWORD *)&v54[16];
  long long v15 = *(_OWORD *)&v54[32];
  long long v16 = *(_OWORD *)&v54[48];
  long long v13 = *(_OWORD *)v54;
  long long v6 = a3[3];
  *(_OWORD *)&v53[40] = a3[2];
  *(_OWORD *)&v53[56] = v6;
  long long v7 = a3[1];
  *(_OWORD *)&v53[8] = *a3;
  *(_OWORD *)&v53[24] = v7;
  uint64_t v17 = *(void *)&v54[64];
  uint64_t v18 = a1;
  long long v19 = *(_OWORD *)v53;
  long long v22 = *(_OWORD *)&v53[48];
  long long v21 = *(_OWORD *)&v53[32];
  long long v20 = *(_OWORD *)&v53[16];
  *(_OWORD *)&v52[56] = a3[3];
  *(_OWORD *)&v52[8] = *a3;
  *(_OWORD *)&v52[40] = a3[2];
  *(_OWORD *)&v52[24] = a3[1];
  uint64_t v23 = *(void *)&v53[64];
  uint64_t v24 = a1;
  long long v25 = *(_OWORD *)v52;
  long long v28 = *(_OWORD *)&v52[48];
  long long v27 = *(_OWORD *)&v52[32];
  long long v26 = *(_OWORD *)&v52[16];
  *(_OWORD *)&v51[56] = a3[3];
  *(_OWORD *)&v51[8] = *a3;
  *(_OWORD *)&v51[40] = a3[2];
  *(_OWORD *)&v51[24] = a3[1];
  uint64_t v29 = *(void *)&v52[64];
  uint64_t v30 = a1;
  long long v33 = *(_OWORD *)&v51[32];
  long long v34 = *(_OWORD *)&v51[48];
  long long v32 = *(_OWORD *)&v51[16];
  long long v31 = *(_OWORD *)v51;
  long long v8 = a3[3];
  *(_OWORD *)&v50[40] = a3[2];
  *(_OWORD *)&v50[56] = v8;
  long long v9 = a3[1];
  *(_OWORD *)&v50[8] = *a3;
  *(_OWORD *)&v50[24] = v9;
  uint64_t v35 = *(void *)&v51[64];
  uint64_t v36 = a1;
  long long v39 = *(_OWORD *)&v50[32];
  long long v40 = *(_OWORD *)&v50[48];
  long long v37 = *(_OWORD *)v50;
  long long v38 = *(_OWORD *)&v50[16];
  *(_OWORD *)&v49[56] = a3[3];
  *(_OWORD *)&v49[8] = v3;
  *(_OWORD *)&v49[40] = v5;
  *(_OWORD *)&v49[24] = v4;
  uint64_t v41 = *(void *)&v50[64];
  uint64_t v42 = a1;
  long long v45 = *(_OWORD *)&v49[32];
  long long v46 = *(_OWORD *)&v49[48];
  long long v43 = *(_OWORD *)v49;
  long long v44 = *(_OWORD *)&v49[16];
  uint64_t v47 = *(void *)&v49[64];
  uint64_t v10 = *(unsigned int *)(a2 + 256);
  if (v10 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  float32x4_t v48 = &v12;
  return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2rf10overloadedIJZNS6_9synthetic21SyntheticUsdKitParser24addAnchorFromInputAnchorERKNS_7variantIJNS6_9data_flow12CustomAnchorENSB_11PlaneAnchorENSB_11ImageAnchorENSB_12ObjectAnchorENSB_10FaceAnchorENSB_10BodyAnchorEEEERKN2re9Matrix4x4IfEEE3__0ZNS9_24addAnchorFromInputAnchorESK_SP_E3__1ZNS9_24addAnchorFromInputAnchorESK_SP_E3__2ZNS9_24addAnchorFromInputAnchorESK_SP_E3__3ZNS9_24addAnchorFromInputAnchorESK_SP_E3__4ZNS9_24addAnchorFromInputAnchorESK_SP_E3__5EEEEEJRKNS0_6__implIJSC_SD_SE_SF_SG_SH_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v48);
}

void rf::synthetic::SyntheticUsdKitParser::addObjectFromInputObject(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v6 = objc_alloc(MEMORY[0x263F83EE8]);
  long long v7 = NSString;
  long long v8 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v8;
  rf::synthetic::getObjectPathFromIdentifier((rf::data_flow::RFUUID *)v43);
  if (v40 >= 0.0) {
    long long v9 = __p;
  }
  else {
    long long v9 = (void **)__p[0];
  }
  uint64_t v10 = [v7 stringWithUTF8String:v9];
  unint64_t v11 = (void *)[v6 initWithString:v10];

  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "AR_SceneObject");
  uint64_t v12 = NSString;
  int v13 = v37;
  long long v14 = (void **)v36[0];
  uint64_t v15 = [NSString defaultCStringEncoding];
  if (v13 >= 0) {
    long long v16 = v36;
  }
  else {
    long long v16 = v14;
  }
  uint64_t v17 = [v12 stringWithCString:v16 encoding:v15];
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  uint64_t v18 = (void *)[*(id *)(a1 + 24) newNodeAtPath:v11 type:v17];
  uint64_t v19 = *(unsigned int *)(a2 + 112);
  id v20 = v18;
  std::string::basic_string[abi:ne180100]<0>(__p, "classification");
  long long v21 = NSString;
  int v22 = SHIBYTE(v40);
  uint64_t v23 = (void **)__p[0];
  uint64_t v24 = [NSString defaultCStringEncoding];
  if (v22 >= 0) {
    long long v25 = __p;
  }
  else {
    long long v25 = v23;
  }
  long long v26 = [v21 stringWithCString:v25 encoding:v24];
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v27 = (void *)[v20 newPropertyWithName:v26 type:*MEMORY[0x263F83F78] role:0];
  [v27 setIntValue:v19];

  unint64_t v28 = 0;
  float32x4_t v29 = *a3;
  float32x4_t v30 = a3[1];
  float32x4_t v31 = a3[2];
  float32x4_t v32 = a3[3];
  long long v33 = *(_OWORD *)(a2 + 48);
  long long v34 = *(_OWORD *)(a2 + 64);
  long long v35 = *(_OWORD *)(a2 + 80);
  v38[0] = *(_OWORD *)(a2 + 32);
  v38[1] = v33;
  v38[2] = v34;
  void v38[3] = v35;
  do
  {
    *(float32x4_t *)&__p[v28 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v38[v28 / 0x10])), v30, *(float32x2_t *)&v38[v28 / 0x10], 1), v31, (float32x4_t)v38[v28 / 0x10], 2), v32, (float32x4_t)v38[v28 / 0x10], 3);
    v28 += 16;
  }
  while (v28 != 64);
  objc_msgSend(MEMORY[0x263F83F10], "setLocalTransformWithNode:transform:time:", v20, *(double *)__p, v40, *(double *)&v41, v42, 0.0);
}

void sub_235ACEFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::createPlaneExtentProperty(void *a1, __n128 a2)
{
  id v2 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "extent");
  long long v3 = NSString;
  int v4 = v14;
  long long v5 = (void **)__p[0];
  uint64_t v6 = [NSString defaultCStringEncoding];
  if (v4 >= 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = v5;
  }
  long long v8 = objc_msgSend(v3, "stringWithCString:encoding:", v7, v6, *(_OWORD *)&a2);
  long long v9 = [v2 property:v8];

  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = operator new(0x10uLL);
  *uint64_t v10 = v12;
  [v9 setFloat3Array:v10 count:1];
  operator delete(v10);
}

void sub_235ACF14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  id v20 = v19;
  operator delete(v20);

  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputMeshAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24)) {
    goto LABEL_13;
  }
  id v8 = objc_alloc(MEMORY[0x263F83EE8]);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  long long v9 = [NSString stringWithUTF8String:a2];
  id v15 = (id)[v8 initWithString:v9];

  uint64_t v10 = [*(id *)(a1 + 24) nodeAtPath:v15];
  unint64_t v11 = v10;
  if (!v10 {
    || ([v10 type],
  }
        long long v12 = objc_claimAutoreleasedReturnValue(),
        int v13 = (void *)*MEMORY[0x263F83FF8],
        v12,
        v12 != v13)
  {

LABEL_13:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  long long v14 = a3[1];
  v16[0] = *a3;
  v16[1] = v14;
  rf::synthetic::SyntheticUsdKitParser::createInputMeshFromMeshNode(a1, v11, v16, a4);
}

void sub_235ACF344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputAnchorAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24)) {
    goto LABEL_13;
  }
  id v8 = objc_alloc(MEMORY[0x263F83EE8]);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  long long v9 = [NSString stringWithUTF8String:a2];
  id v17 = (id)[v8 initWithString:v9];

  uint64_t v10 = [*(id *)(a1 + 24) nodeAtPath:v17];
  unint64_t v11 = v10;
  if (!v10)
  {
LABEL_12:

LABEL_13:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  long long v12 = [v10 type];
  int v13 = v12;
  if (v12 != (void *)*MEMORY[0x263F83FF8])
  {

    goto LABEL_12;
  }

  if (!isSceneUnderstandingType) {
    goto LABEL_12;
  }
  if (!rf::synthetic::isSceneUnderstandingAnchor(SceneUnderstandingTypeProperty)) {
    goto LABEL_12;
  }
  long long v16 = a3[1];
  v18[0] = *a3;
  v18[1] = v16;
  rf::synthetic::SyntheticUsdKitParser::createInputAnchorFromAnchorNode(a1, v11, v18, a4);
}

void sub_235ACF514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getInputObjectAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24)) {
    goto LABEL_9;
  }
  id v8 = objc_alloc(MEMORY[0x263F83EE8]);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  long long v9 = [NSString stringWithUTF8String:a2];
  id v12 = (id)[v8 initWithString:v9];

  uint64_t v10 = [*(id *)(a1 + 24) nodeAtPath:v12];
  if (!v10)
  {

LABEL_9:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  long long v11 = a3[1];
  v13[0] = *a3;
  v13[1] = v11;
  rf::synthetic::SyntheticUsdKitParser::createInputObjectFromObjectNode(a4, a1, v10, v13);
}

void sub_235ACF69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbeAtPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24)) {
    goto LABEL_9;
  }
  id v8 = objc_alloc(MEMORY[0x263F83EE8]);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  long long v9 = [NSString stringWithUTF8String:a2];
  id v12 = (id)[v8 initWithString:v9];

  uint64_t v10 = [*(id *)(a1 + 24) nodeAtPath:v12];
  if (!v10)
  {

LABEL_9:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  long long v11 = a3[1];
  v13[0] = *a3;
  v13[1] = v11;
  rf::synthetic::SyntheticUsdKitParser::createEnvironmentProbeFromDomeLightNode(a4, a1, v10, v13);
}

void sub_235ACF814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::getNodeWorldTransform(_OWORD *a1, void *a2)
{
  id v17 = a2;
  objc_msgSend(MEMORY[0x263F83F10], "localTransformWithNode:time:", 0.0);
  long long v20 = v4;
  long long v21 = v3;
  *a1 = v3;
  a1[1] = v4;
  long long v18 = v6;
  long long v19 = v5;
  a1[2] = v5;
  a1[3] = v6;
  long long v7 = [v17 parent];
  if (v7)
  {
    do
    {
      [MEMORY[0x263F83F10] localTransformWithNode:v7 time:0.0];
      uint64_t v12 = 0;
      v22[0] = v21;
      v22[1] = v20;
      v22[2] = v19;
      void v22[3] = v18;
      do
      {
        *(long long *)((char *)&v23 + v12 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(v22[v12])), v9, *(float32x2_t *)&v22[v12], 1), v10, (float32x4_t)v22[v12], 2), v11, (float32x4_t)v22[v12], 3);
        ++v12;
      }
      while (v12 != 4);
      long long v14 = v25;
      long long v15 = v26;
      long long v20 = v24;
      long long v13 = v24;
      long long v21 = v23;
      *a1 = v23;
      a1[1] = v13;
      long long v18 = v15;
      long long v19 = v14;
      a1[2] = v14;
      a1[3] = v15;
      uint64_t v16 = [v7 parent];

      long long v7 = (void *)v16;
    }
    while (v16);
  }
}

void sub_235ACF95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::getPlaneExtentProperty(void *a1)
{
  id v1 = a1;
  int32x4_t v18 = v29;
  float32x4_t v20 = v28;
  float32x4_t v2 = vmulq_f32(v28, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v30, v30, 0xCuLL), v30, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), (int8x16_t)v29, 8uLL)));
  BOOL v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] <= 0.0;
  float v4 = -1.0;
  if (!v3) {
    float v4 = 1.0;
  }
  float32x4_t v22 = (float32x4_t)v30;
  float v23 = v4;
  std::string::basic_string[abi:ne180100]<0>(v26, "extent");
  long long v5 = NSString;
  int v6 = v27;
  long long v7 = (void **)v26[0];
  uint64_t v8 = [NSString defaultCStringEncoding];
  if (v6 >= 0) {
    float32x4_t v9 = v26;
  }
  else {
    float32x4_t v9 = v7;
  }
  float32x4_t v10 = objc_msgSend(v5, "stringWithCString:encoding:", v9, v8, *(_OWORD *)&v18, *(_OWORD *)&v20);
  float32x4_t v11 = [v1 property:v10];

  if (v27 < 0)
  {
    operator delete(v26[0]);
    if (v11) {
      goto LABEL_8;
    }
LABEL_10:
    unint64_t v16 = 0;
    goto LABEL_11;
  }
  if (!v11) {
    goto LABEL_10;
  }
LABEL_8:
  std::vector<re::Vector3<float>>::vector(__p, 1uLL);
  [v11 float3Array:__p[0] maxCount:1];
  float32x4_t v12 = vmulq_f32(v21, v21);
  float32x4_t v13 = vmulq_f32(v19, v19);
  float32x4_t v14 = vmulq_f32(v22, v22);
  float32x4_t v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)));
  v15.f32[0] = sqrtf(v15.f32[0]);
  v15.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v15.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
  unint64_t v24 = vmulq_f32(vmulq_n_f32(v15, v23), *(float32x4_t *)__p[0]).u64[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  unint64_t v16 = v24;
LABEL_11:

  return v16;
}

void sub_235ACFB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getSceneUnitScale(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "metersPerUnit");
    float32x4_t v2 = NSString;
    int v3 = v18;
    float v4 = (void **)__p[0];
    uint64_t v5 = [NSString defaultCStringEncoding];
    if (v3 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = v4;
    }
    long long v7 = [v2 stringWithCString:v6 encoding:v5];
    uint64_t v8 = [v1 metadataWithKey:v7];

    if (v18 < 0)
    {
      operator delete(__p[0]);
      if (v8) {
        goto LABEL_7;
      }
    }
    else if (v8)
    {
LABEL_7:
      [v8 floatValue];
      *(void *)&_Q0 = vdupq_lane_s32(*(int32x2_t *)&_Q0, 0).u64[0];
LABEL_11:
      uint64_t v16 = _Q0;

      goto LABEL_12;
    }
    __asm { FMOV            V0.4S, #1.0 }
    goto LABEL_11;
  }
  __asm { FMOV            V0.4S, #1.0 }
  uint64_t v16 = _Q0;
LABEL_12:

  return v16;
}

void sub_235ACFCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::getSceneUnderstandingNameProperty(void *a1, void *a2)
{
  id v3 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:name");
  float v4 = NSString;
  int v5 = v13;
  int v6 = (void **)__p[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  float32x4_t v9 = [v4 stringWithCString:v8 encoding:v7];
  float32x4_t v10 = [v3 property:v9];

  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_6;
    }
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    goto LABEL_9;
  }
  if (!v10) {
    goto LABEL_8;
  }
LABEL_6:
  id v11 = [v10 stringValue];
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v11 UTF8String]);

LABEL_9:
}

void sub_235ACFDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void *std::vector<re::Vector3<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<re::Vector3<float>>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_235ACFE88(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<re::Vector3<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_235ACFF44(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  uint64_t v4 = (*a1)[5].i64[0];
  id v5 = objc_alloc(MEMORY[0x263F83EE8]);
  int v6 = NSString;
  long long v7 = *(_OWORD *)(a2 + 16);
  v73[0] = *(_OWORD *)a2;
  v73[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v73);
  if (v70 >= 0.0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  float32x4_t v9 = [v6 stringWithUTF8String:v8];
  long long v60 = (void *)[v5 initWithString:v9];

  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  float32x4_t v10 = (void *)[*(id *)(v4 + 24) newNodeAtPath:v60 type:*MEMORY[0x263F83FF8]];
  LOBYTE(__p[0]) = 0;
  int v11 = *(_DWORD *)(a2 + 208);
  id v12 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:plane:alignment");
  char v13 = NSString;
  LODWORD(v10) = SHIBYTE(v70);
  float32x4_t v14 = (void **)__p[0];
  uint64_t v15 = [NSString defaultCStringEncoding];
  if ((int)v10 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = v14;
  }
  id v17 = [v13 stringWithCString:v16 encoding:v15];
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = *MEMORY[0x263F83FB0];
  float32x4_t v19 = (void *)[v12 newPropertyWithName:v17 type:*MEMORY[0x263F83FB0] role:0];
  rf::synthetic::getAlignmentString(v11, (std::string *)v65);
  float32x4_t v20 = NSString;
  int v21 = SBYTE7(v66);
  float32x4_t v22 = (void **)v65[0];
  uint64_t v23 = [NSString defaultCStringEncoding];
  if (v21 >= 0) {
    unint64_t v24 = v65;
  }
  else {
    unint64_t v24 = v22;
  }
  long long v25 = [v20 stringWithCString:v24 encoding:v23];
  [v19 setStringValue:v25];

  if (SBYTE7(v66) < 0) {
    operator delete(v65[0]);
  }

  int v26 = *(_DWORD *)(a2 + 212);
  id v27 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:planeClassification");
  float32x4_t v28 = NSString;
  int v29 = SHIBYTE(v70);
  int8x16_t v30 = (void **)__p[0];
  uint64_t v31 = [NSString defaultCStringEncoding];
  if (v29 >= 0) {
    float32x4_t v32 = __p;
  }
  else {
    float32x4_t v32 = v30;
  }
  long long v33 = [v28 stringWithCString:v32 encoding:v31];
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  long long v34 = (void *)[v27 newPropertyWithName:v33 type:v18 role:0];
  rf::synthetic::getPlaneClassificationString(v26, (std::string *)v65);
  long long v35 = NSString;
  int v36 = SBYTE7(v66);
  char v37 = (void **)v65[0];
  uint64_t v38 = [NSString defaultCStringEncoding];
  if (v36 >= 0) {
    long long v39 = v65;
  }
  else {
    long long v39 = v37;
  }
  double v40 = [v35 stringWithCString:v39 encoding:v38];
  [v34 setStringValue:v40];

  if (SBYTE7(v66) < 0) {
    operator delete(v65[0]);
  }

  __n128 v59 = *(__n128 *)(a2 + 192);
  *(_OWORD *)std::vector<int> __p = 0u;
  long long v58 = *(_OWORD *)(a2 + 176);
  __n128 v41 = v59;
  v41.n128_u32[1] = HIDWORD(__p[0]);
  id v42 = v27;
  std::string::basic_string[abi:ne180100]<0>(__p, "center");
  long long v43 = NSString;
  int v44 = SHIBYTE(v70);
  long long v45 = (void **)__p[0];
  uint64_t v46 = [NSString defaultCStringEncoding];
  if (v44 >= 0) {
    uint64_t v47 = __p;
  }
  else {
    uint64_t v47 = v45;
  }
  float32x4_t v48 = [v43 stringWithCString:v47 encoding:v46];
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  float32x4_t v49 = (void *)[v42 newPropertyWithName:v48 type:*MEMORY[0x263F83F50] role:0];
  [v49 setFloat3Value:*(double *)&v58];

  std::string::basic_string[abi:ne180100]<0>(v63, "guide");
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "none");
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  uint64_t v50 = 0;
  float32x4_t v51 = v3[6];
  float32x4_t v52 = v3[7];
  float32x4_t v53 = v3[8];
  float32x4_t v54 = v3[9];
  long long v55 = *(_OWORD *)(a2 + 48);
  long long v56 = *(_OWORD *)(a2 + 64);
  long long v57 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)long long v65 = *(_OWORD *)(a2 + 32);
  long long v66 = v55;
  long long v67 = v56;
  long long v68 = v57;
  do
  {
    *(float32x4_t *)&__p[v50] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)&v65[v50])), v52, (float32x2_t)v65[v50], 1), v53, *(float32x4_t *)&v65[v50], 2), v54, *(float32x4_t *)&v65[v50], 3);
    v50 += 2;
  }
  while (v50 != 8);
  objc_msgSend(MEMORY[0x263F83F10], "setLocalTransformWithNode:transform:time:", v42, *(double *)__p, v70, *(double *)&v71, *(double *)&v72, 0.0);
}

void sub_235AD03E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  uint64_t v4 = (*a1)[10].i64[0];
  id v5 = objc_alloc(MEMORY[0x263F83EE8]);
  int v6 = NSString;
  long long v7 = *(_OWORD *)(a2 + 16);
  v47[0] = *(_OWORD *)a2;
  v47[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v47);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<int>::pointer p_p = &__p;
  }
  else {
    std::vector<int>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  float32x4_t v9 = [v6 stringWithUTF8String:p_p];
  float32x4_t v10 = (void *)[v5 initWithString:v9];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v11 = (void *)[*(id *)(v4 + 24) newNodeAtPath:v10 type:*MEMORY[0x263F83FF8]];
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (*(char *)(a2 + 159) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 136), *(void *)(a2 + 144));
  }
  else {
    std::string __p = *(std::string *)(a2 + 136);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v12 = *(unsigned __int8 *)(a2 + 99);
  id v13 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isTracked");
  float32x4_t v14 = NSString;
  int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  uint64_t v17 = [NSString defaultCStringEncoding];
  if (v15 >= 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = (std::string *)v16;
  }
  float32x4_t v19 = [v14 stringWithCString:v18 encoding:v17];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = *MEMORY[0x263F83F18];
  int v21 = (void *)[v13 newPropertyWithName:v19 type:*MEMORY[0x263F83F18] role:0];
  [v21 setBoolValue:v12 != 0];

  int v22 = *(unsigned __int8 *)(a2 + 128);
  id v23 = v13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isDetectionOnly");
  unint64_t v24 = NSString;
  int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
  uint64_t v27 = [NSString defaultCStringEncoding];
  if (v25 >= 0) {
    float32x4_t v28 = &__p;
  }
  else {
    float32x4_t v28 = (std::string *)v26;
  }
  int v29 = [v24 stringWithCString:v28 encoding:v27];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int8x16_t v30 = (void *)[v23 newPropertyWithName:v29 type:v20 role:0];
  [v30 setBoolValue:v22 != 0];

  std::string::basic_string[abi:ne180100]<0>(v41, "guide");
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "none");
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  uint64_t v31 = 0;
  float32x4_t v32 = v3[11];
  float32x4_t v33 = v3[12];
  float32x4_t v34 = v3[13];
  float32x4_t v35 = v3[14];
  long long v36 = *(_OWORD *)(a2 + 48);
  long long v37 = *(_OWORD *)(a2 + 64);
  long long v38 = *(_OWORD *)(a2 + 80);
  v43[0] = *(_OWORD *)(a2 + 32);
  v43[1] = v36;
  _OWORD v43[2] = v37;
  void v43[3] = v38;
  do
  {
    *(float32x4_t *)((char *)&__p.__r_.__value_.__l.__data_ + v31 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(v43[v31])), v33, *(float32x2_t *)&v43[v31], 1), v34, (float32x4_t)v43[v31], 2), v35, (float32x4_t)v43[v31], 3);
    ++v31;
  }
  while (v31 != 4);
  objc_msgSend(MEMORY[0x263F83F10], "setLocalTransformWithNode:transform:time:", v23, *(double *)&__p.__r_.__value_.__l.__data_, *(double *)&__p.__r_.__value_.__r.__words[2], *(double *)&v45, *(double *)&v46, 0.0);
}

void sub_235AD08B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::overloaded<rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_0,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_1,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_2,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_3,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_4,rf::synthetic::SyntheticUsdKitParser::addAnchorFromInputAnchor(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&,re::Matrix4x4<float> const&)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> const&>(float32x4_t **a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v3 = *a1;
  uint64_t v4 = (*a1)[15].i64[0];
  id v5 = objc_alloc(MEMORY[0x263F83EE8]);
  int v6 = NSString;
  long long v7 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v7;
  rf::synthetic::getAnchorPathFromIdentifier((rf::data_flow::RFUUID *)v28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<int>::pointer p_p = &__p;
  }
  else {
    std::vector<int>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  float32x4_t v9 = [v6 stringWithUTF8String:p_p];
  float32x4_t v10 = (void *)[v5 initWithString:v9];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v11 = (void *)[*(id *)(v4 + 24) newNodeAtPath:v10 type:*MEMORY[0x263F83FF8]];
  __p.__r_.__value_.__s.__data_[0] = 2;
  if (*(char *)(a2 + 151) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else {
    std::string __p = *(std::string *)(a2 + 128);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "guide");
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "none");
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v12 = 0;
  float32x4_t v13 = v3[16];
  float32x4_t v14 = v3[17];
  float32x4_t v15 = v3[18];
  float32x4_t v16 = v3[19];
  long long v17 = *(_OWORD *)(a2 + 48);
  long long v18 = *(_OWORD *)(a2 + 64);
  long long v19 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v17;
  void v24[2] = v18;
  void v24[3] = v19;
  do
  {
    *(float32x4_t *)((char *)&__p.__r_.__value_.__l.__data_ + v12 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(v24[v12])), v14, *(float32x2_t *)&v24[v12], 1), v15, (float32x4_t)v24[v12], 2), v16, (float32x4_t)v24[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  objc_msgSend(MEMORY[0x263F83F10], "setLocalTransformWithNode:transform:time:", v11, *(double *)&__p.__r_.__value_.__l.__data_, *(double *)&__p.__r_.__value_.__r.__words[2], *(double *)&v26, *(double *)&v27, 0.0);
}

void sub_235AD0BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::createSceneUnderstandingNameProperty(void *a1, uint64_t a2)
{
  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "preliminary:sceneUnderstanding:name");
  uint64_t v4 = NSString;
  int v5 = v19;
  int v6 = (void **)__p[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  float32x4_t v9 = [v4 stringWithCString:v8 encoding:v7];
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  float32x4_t v10 = (void *)[v3 newPropertyWithName:v9 type:*MEMORY[0x263F83FA8] role:0];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  int v11 = NSString;
  int v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type v13 = v17.__r_.__value_.__r.__words[0];
  uint64_t v14 = objc_msgSend(NSString, "defaultCStringEncoding", v17.__r_.__value_.__r.__words[0], v17.__r_.__value_.__l.__size_, v17.__r_.__value_.__r.__words[2]);
  if (v12 >= 0) {
    float32x4_t v15 = &v17;
  }
  else {
    float32x4_t v15 = (std::string *)v13;
  }
  float32x4_t v16 = [v11 stringWithCString:v15 encoding:v14];
  [v10 setStringValue:v16];

  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_235AD0DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_235AD0E08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235AD0DFCLL);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_235AD0E78(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_emplace<rf::data_flow::provider::InputMesh>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__shared_ptr_emplace<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__on_zero_shared(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 32);
}

void std::__shared_ptr_emplace<rf::data_flow::SceneObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::SceneObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E8F5E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_emplace<rf::data_flow::EnvironmentProbe>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152)) {
}
  }

BOOL rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2 = vsubq_f32(a1[2], a2[2]);
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) < 1.0e-10
    && (float32x4_t v4 = vsubq_f32(a1[3], a2[3]),
        int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) < 1.0e-10)
    && (float32x4_t v6 = vsubq_f32(a1[4], a2[4]),
        int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) < 1.0e-10)
    && (float32x4_t v8 = vsubq_f32(a1[5], a2[5]),
        int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8),
        fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) < 1.0e-10)
    && a1[6].u8[0] == a2[6].u8[0]
    && a1[6].u8[1] == a2[6].u8[1]
    && a1[6].u8[2] == a2[6].u8[2])
  {
    return a1[6].u8[3] != a2[6].u8[3];
  }
  else
  {
    return 1;
  }
}

uint64_t rf::detail::removeAnchorsFrom@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v8 = result;
    do
    {
      v10[0] = v8;
      v10[1] = a3;
      _OWORD v10[2] = a4;
      uint64_t v9 = *(unsigned int *)(v5 + 256);
      if (v9 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      int v11 = v10;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS6_17LockedARStateDataEONS_6vectorINS_7variantIJNS6_9data_flow12CustomAnchorENSC_11PlaneAnchorENSC_11ImageAnchorENSC_12ObjectAnchorENSC_10FaceAnchorENSC_10BodyAnchorEEEENS_9allocatorISJ_EEEERKNS_8functionIFvvEEEENK3__0clERKSJ_EUlRT_E_EEJRKNS0_6__implIJSD_SE_SF_SG_SH_SI_EEEEEEDcOSW_DpOT0____fmatrix[v9])(&v11, v5);
      v5 += 272;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_235AD123C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updateAnchorsAt(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v4, (uint64_t)&v38);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 80), (uint64_t)&v38))
      {
        uint64_t v7 = *(void *)a1 + 80;
        v40[0] = &v38;
        uint64_t v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v7, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, v40);
        int v9 = *((_DWORD *)v8 + 76);
        int v10 = *(_DWORD *)(v4 + 256);
        BOOL v11 = v10 == v9;
        BOOL v12 = v10 == -1;
        BOOL v13 = v10 == -1;
        if (v12) {
          BOOL v11 = 0;
        }
        if (v9 == -1) {
          BOOL v14 = v13;
        }
        else {
          BOOL v14 = v11;
        }
        if (!v14) {
          goto LABEL_14;
        }
        rf::helpers::getBaseAnchorProperties(v4);
        if (v41)
        {
          long long v36 = v8 + 6;
          uint64_t v15 = *(unsigned int *)(v4 + 256);
          if (v15 == -1) {
            std::__throw_bad_variant_access[abi:ne180100]();
          }
          long long v37 = &v36;
          char v16 = ((uint64_t (*)(void **, uint64_t))off_26E8F5E60[v15])(&v37, v4);

          if ((v16 & 1) == 0) {
            goto LABEL_34;
          }
LABEL_14:
          uint64_t v18 = *(unsigned int *)(v4 + 256);
          if (v18 == -1) {
            std::__throw_bad_variant_access[abi:ne180100]();
          }
          v40[0] = &v37;
          ((void (*)(_OWORD **, uint64_t))off_26E8F5E90[v18])(v40, v4);
          uint64_t v20 = a3[1];
          unint64_t v19 = (unint64_t)a3[2];
          if ((unint64_t)v20 >= v19)
          {
            char v23 = *a3;
            uint64_t v24 = (v20 - *a3) >> 5;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v19 - (void)v23;
            if (v26 >> 4 > v25) {
              unint64_t v25 = v26 >> 4;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              float32x4_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v27);
              char v23 = *a3;
              uint64_t v20 = a3[1];
            }
            else
            {
              float32x4_t v28 = 0;
            }
            long long v29 = v39;
            int8x16_t v30 = &v28[32 * v24];
            *(_OWORD *)int8x16_t v30 = v38;
            *((_OWORD *)v30 + 1) = v29;
            if (v20 == v23)
            {
              float32x4_t v33 = &v28[32 * v24];
            }
            else
            {
              uint64_t v31 = &v28[32 * v24];
              do
              {
                long long v32 = *((_OWORD *)v20 - 1);
                float32x4_t v33 = v31 - 32;
                *((_OWORD *)v31 - 2) = *((_OWORD *)v20 - 2);
                *((_OWORD *)v31 - 1) = v32;
                v20 -= 32;
                v31 -= 32;
              }
              while (v20 != v23);
            }
            int v22 = v30 + 32;
            *a3 = v33;
            a3[1] = v30 + 32;
            a3[2] = &v28[32 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            long long v21 = v39;
            *(_OWORD *)uint64_t v20 = v38;
            *((_OWORD *)v20 + 1) = v21;
            int v22 = v20 + 32;
          }
          a3[1] = v22;
          uint64_t v34 = *(void *)a1 + 80;
          v40[0] = &v38;
          float32x4_t v35 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v34, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, v40);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v35 + 6), v4);
          goto LABEL_34;
        }
        BOOL v17 = v42 == 0;

        if (!v17) {
          goto LABEL_14;
        }
      }
LABEL_34:
      v4 += 272;
    }
    while (v4 != v5);
  }
}

void sub_235AD1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v31 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

unsigned int *rf::detail::updateExternalAnchorsAt(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v7 = result;
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v4, (uint64_t)v18);
      uint64_t result = (unsigned int *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)v7 + 80), (uint64_t)v18);
      uint64_t v8 = result;
      if (result)
      {
        uint64_t v9 = result[76];
        if (v9 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        __p[0] = buf;
        ((void (*)(void **, unsigned int *))off_26E8F5EC0[v9])(__p, result + 12);
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(void *)v7 + 120, (uint64_t)(v8 + 4), (_OWORD *)v8 + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(*(void *)v7 + 80), v8, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        BOOL v11 = rf::realityFusionLogObject(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v18, __p);
          BOOL v12 = __p;
          if (v15 < 0) {
            BOOL v12 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          BOOL v17 = v12;
          _os_log_impl(&dword_235A7C000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Externalizing anchor %s", buf, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t result = *(unsigned int **)(a3 + 24);
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned char *))(*(void *)result + 48))(result, v18);
        }
      }
      v4 += 272;
    }
    while (v4 != v5);
    uint64_t v13 = *a2;
    uint64_t v4 = a2[1];
    if (v4 != *a2)
    {
      do
      {
        v4 -= 272;
        uint64_t result = (unsigned int *)std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v4);
      }
      while (v4 != v13);
      uint64_t v4 = v13;
    }
  }
  a2[1] = v4;
  return result;
}

void sub_235AD1784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *rf::detail::relocalizeExternalAnchors(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v7, (uint64_t)v23);
      uint64_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)v6 + 120), (uint64_t)v23);
      uint64_t v9 = result;
      if (result)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(void *)v6 + 80, (uint64_t)(result + 1), result + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(*(void *)v6 + 120), v9, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        BOOL v11 = rf::realityFusionLogObject(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v23, __p);
          BOOL v12 = v20 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136315138;
          int v22 = v12;
          _os_log_impl(&dword_235A7C000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Relocalizing updated anchor %s", buf, 0xCu);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t result = *(_OWORD **)(a4 + 24);
        if (result) {
          uint64_t result = (_OWORD *)(*(uint64_t (**)(_OWORD *, unsigned char *))(*(void *)result + 48))(result, v23);
        }
      }
      v7 += 272;
    }
    while (v7 != v8);
  }
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v13, (uint64_t)v23);
      uint64_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)v6 + 120), (uint64_t)v23);
      char v15 = result;
      if (result)
      {
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(*(void *)v6 + 80, (uint64_t)(result + 1), result + 1);
        std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove((void *)(*(void *)v6 + 120), v15, (uint64_t)__p);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
        BOOL v17 = rf::realityFusionLogObject(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v23, __p);
          if (v20 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          int v22 = v18;
          _os_log_impl(&dword_235A7C000, v17, OS_LOG_TYPE_DEFAULT, "ARState: Relocalizing added anchor %s", buf, 0xCu);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t result = *(_OWORD **)(a4 + 24);
        if (result) {
          uint64_t result = (_OWORD *)(*(uint64_t (**)(_OWORD *, unsigned char *))(*(void *)result + 48))(result, v23);
        }
      }
      v13 += 272;
    }
    while (v13 != v14);
  }
  return result;
}

void sub_235AD1A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rf::detail::insertAnchorsInto@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v8 = result;
    do
    {
      rf::helpers::getRFUUIDFromAnchor(v5, (uint64_t)&v38);
      if (*(_DWORD *)(v5 + 256)
        || *(_DWORD *)(v5 + 100) != 1
        || ((uint64_t v9 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)v8 + 80), (uint64_t)&v38)) == 0? (v10 = *(void *)(a3 + 24) == 0): (v10 = 1), v10))
      {
        if (!std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)v8 + 80), (uint64_t)&v38))
        {
          BOOL v11 = rf::realityFusionLogObject(0);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v38, __p);
            BOOL v12 = __p;
            if (v35 < 0) {
              BOOL v12 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315138;
            long long v37 = v12;
            _os_log_impl(&dword_235A7C000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Adding anchor %s", buf, 0xCu);
            if (v35 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        uint64_t v14 = a4[1];
        unint64_t v13 = (unint64_t)a4[2];
        if ((unint64_t)v14 >= v13)
        {
          BOOL v17 = *a4;
          uint64_t v18 = (v14 - *a4) >> 5;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v13 - (void)v17;
          if (v20 >> 4 > v19) {
            unint64_t v19 = v20 >> 4;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a4 + 2), v21);
            BOOL v17 = *a4;
            uint64_t v14 = a4[1];
          }
          else
          {
            int v22 = 0;
          }
          long long v23 = v39;
          uint64_t v24 = &v22[32 * v18];
          *(_OWORD *)uint64_t v24 = v38;
          *((_OWORD *)v24 + 1) = v23;
          if (v14 == v17)
          {
            unint64_t v27 = &v22[32 * v18];
          }
          else
          {
            unint64_t v25 = &v22[32 * v18];
            do
            {
              long long v26 = *((_OWORD *)v14 - 1);
              unint64_t v27 = v25 - 32;
              *((_OWORD *)v25 - 2) = *((_OWORD *)v14 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v14 -= 32;
              v25 -= 32;
            }
            while (v14 != v17);
          }
          char v16 = v24 + 32;
          *a4 = v27;
          a4[1] = v24 + 32;
          a4[2] = &v22[32 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          long long v15 = v39;
          *(_OWORD *)uint64_t v14 = v38;
          *((_OWORD *)v14 + 1) = v15;
          char v16 = v14 + 32;
        }
        a4[1] = v16;
        uint64_t v28 = *(void *)v8 + 80;
        __p[0] = &v38;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v28, (uint64_t)&v38, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>>((uint64_t)(v29 + 6), v5);
      }
      else
      {
        int8x16_t v30 = rf::realityFusionLogObject(v9);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)&v38, __p);
          long long v32 = __p;
          if (v35 < 0) {
            long long v32 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          long long v37 = v32;
          _os_log_impl(&dword_235A7C000, v30, OS_LOG_TYPE_DEFAULT, "ARState: Cleaning up anchor %s", buf, 0xCu);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v33 = *(void *)(a3 + 24);
        if (!v33) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v33 + 48))(v33, &v38);
      }
      v5 += 272;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_235AD1DEC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t rf::detail::requestFloorPlaneForPlacementIfNeeded(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = *(void *)(a4 + 24);
  if (result)
  {
    uint64_t v7 = *a1;
    uint64_t v6 = a1[1];
    while (v7 != v6)
    {
      if (*(_DWORD *)(v7 + 256) == 1 && *(_DWORD *)(v7 + 212) == 2) {
        return (*(uint64_t (**)(void))(*(void *)result + 48))();
      }
      v7 += 272;
    }
    for (uint64_t i = *a2; i != a2[1]; i += 272)
    {
      if (*(_DWORD *)(i + 256) == 1 && *(_DWORD *)(i + 212) == 2) {
        return (*(uint64_t (**)(void))(*(void *)result + 48))();
      }
    }
    for (uint64_t j = *a3; j != a3[1]; j += 272)
    {
      if (*(_DWORD *)(j + 256) == 1 && *(_DWORD *)(j + 212) == 2) {
        return (*(uint64_t (**)(void))(*(void *)result + 48))();
      }
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0]) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(v2, a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0] != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2)) {
    return 1;
  }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[9], a2[9]), (int8x16_t)vceqq_f32(v2[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(v2[10], a2[10]), (int8x16_t)vceqq_f32(v2[11], a2[11])))) & 0x80000000) == 0)return 1; {
  uint32x4_t v5 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[12], a2[12]));
  }
  v5.i32[3] = v5.i32[2];
  return (vmaxvq_u32(v5) & 0x80000000) != 0 || v2[13].i32[0] != a2[13].i32[0] || v2[13].i32[1] != a2[13].i32[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0] != 2) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2)) {
    return 1;
  }
  uint32x4_t v4 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[12], a2[12]));
  v4.i32[3] = v4.i32[2];
  if ((vmaxvq_u32(v4) & 0x80000000) != 0 || v2[8].u8[0] != a2[8].u8[0]) {
    return 1;
  }
  uint64_t v5 = v2[9].u8[15];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v2[9].u8[15];
  }
  else {
    uint64_t v6 = v2[9].i64[0];
  }
  uint64_t v7 = a2[9].u8[15];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = a2[9].i64[0];
  }
  if (v6 != v7) {
    return 1;
  }
  uint64_t v9 = (const void **)&v2[8].i64[1];
  if (v8 >= 0) {
    BOOL v10 = &a2[8].u8[8];
  }
  else {
    BOOL v10 = (unsigned __int8 *)a2[8].i64[1];
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, v2[9].u64[0])) {
      return 1;
    }
  }
  else if (v2[9].i8[15])
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      uint64_t v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v5) {
        goto LABEL_20;
      }
    }
    return 1;
  }
LABEL_20:
  uint64_t v11 = v2[11].u8[7];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v2[11].u8[7];
  }
  else {
    uint64_t v12 = v2[10].i64[1];
  }
  uint64_t v13 = a2[11].u8[7];
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = a2[10].i64[1];
  }
  if (v12 != v13) {
    return 1;
  }
  long long v15 = (const void **)&v2[10];
  uint64_t v18 = a2[10].i64[0];
  BOOL v17 = a2 + 10;
  char v16 = (float32x4_t *)v18;
  if (v14 >= 0) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = v16;
  }
  if ((v11 & 0x80) != 0) {
    return memcmp(*v15, v19, v2[10].u64[1]) != 0;
  }
  if (!v2[11].i8[7]) {
    return 0;
  }
  uint64_t v20 = v11 - 1;
  do
  {
    int v22 = *(unsigned __int8 *)v15;
    long long v15 = (const void **)((char *)v15 + 1);
    int v21 = v22;
    int v23 = v19->u8[0];
    unint64_t v19 = (float32x4_t *)((char *)v19 + 1);
    BOOL result = v21 != v23;
  }
  while (v21 == v23 && v20-- != 0);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0] != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2)) {
    return 1;
  }
  uint64_t v4 = v2[9].u8[7];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v2[9].u8[7];
  }
  else {
    uint64_t v5 = v2[8].i64[1];
  }
  uint64_t v6 = a2[9].u8[7];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[8].i64[1];
  }
  if (v5 != v6) {
    return 1;
  }
  int v8 = (const void **)&v2[8];
  if (v7 >= 0) {
    uint64_t v9 = a2 + 8;
  }
  else {
    uint64_t v9 = (float32x4_t *)a2[8].i64[0];
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, v2[8].u64[1])) {
      return 1;
    }
  }
  else if (v2[9].i8[7])
  {
    while (*(unsigned __int8 *)v8 == v9->u8[0])
    {
      int v8 = (const void **)((char *)v8 + 1);
      uint64_t v9 = (float32x4_t *)((char *)v9 + 1);
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 1;
  }
LABEL_18:
  uint64_t v10 = v2[10].u8[15];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v2[10].u8[15];
  }
  else {
    uint64_t v11 = v2[10].i64[0];
  }
  uint64_t v12 = a2[10].u8[15];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = a2[10].i64[0];
  }
  if (v11 != v12) {
    return 1;
  }
  int v14 = (const void **)&v2[9].i64[1];
  if (v13 >= 0) {
    long long v15 = &a2[9].u8[8];
  }
  else {
    long long v15 = (unsigned __int8 *)a2[9].i64[1];
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, v2[10].u64[0])) {
      return 1;
    }
  }
  else if (v2[10].i8[15])
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      int v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_33;
      }
    }
    return 1;
  }
LABEL_33:
  uint32x4_t v16 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[13], a2[13]));
  v16.i32[3] = v16.i32[2];
  if ((vmaxvq_u32(v16) & 0x80000000) == 0)
  {
    uint32x4_t v17 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v2[14], a2[14]));
    v17.i32[3] = v17.i32[2];
    return vmaxvq_u32(v17) >> 31;
  }
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0] != 4) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2)
      || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[9], a2[9]), (int8x16_t)vceqq_f32(v2[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(v2[10], a2[10]), (int8x16_t)vceqq_f32(v2[11], a2[11])))) & 0x80000000) == 0|| (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[13], a2[13]), (int8x16_t)vceqq_f32(v2[12], a2[12])), vandq_s8((int8x16_t)vceqq_f32(v2[14], a2[14]), (int8x16_t)vceqq_f32(v2[15], a2[15])))) & 0x80000000) == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::AnchorUpdateQualifier> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,std::__variant_detail::_Trait::PlaneAnchor,std::__variant_detail::_Trait::ImageAnchor,std::__variant_detail::_Trait::ObjectAnchor,std::__variant_detail::_Trait::FaceAnchor,std::__variant_detail::_Trait::BodyAnchor> const&>(float32x4_t ***a1, float32x4_t *a2)
{
  float32x4_t v2 = **a1;
  if (v2[16].i32[0] != 5) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  LODWORD(result) = rf::detail::AnchorUpdateQualifier::isBasePropertiesUpdated(**a1, a2);
  if (v2[8].f32[0] == a2[8].f32[0]) {
    return result;
  }
  else {
    return 1;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 104) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::detail::updateExternalAnchorsAt(rf::LockedARStateData &,std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>> &,std::function<void ()(rf::data_flow::RFUUID const&)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 99) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD25E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD2778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD290C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD2AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD2C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2rf6detail17removeAnchorsFromERNS8_17LockedARStateDataEONS_6vectorINS_7variantIJNS8_9data_flow12CustomAnchorENSE_11PlaneAnchorENSE_11ImageAnchorENSE_12ObjectAnchorENSE_10FaceAnchorENSE_10BodyAnchorEEEENS_9allocatorISL_EEEERKNS_8functionIFvvEEEENK3__0clERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_SI_SJ_SK_EEEEEEDcSY_DpT0_(rf ***a1, rf::data_flow::RFUUID *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int8x16_t v3 = *a1;
  uint64_t v4 = *(void *)**a1;
  if (*(unsigned char *)(v4 + 704))
  {
    rf::helpers::getRFUUIDFromAnchor(v4 + 432, (uint64_t)__p);
    uint64_t v5 = (const unsigned __int8 *)(v14 ? __p[0] : __p);
    uint64_t v6 = *((unsigned char *)a2 + 16) ? *(const unsigned __int8 **)a2 : (const unsigned __int8 *)a2;
    int v7 = (rf *)uuid_compare(v5, v6);
    if (!v7)
    {
      if (*((void *)v3[1] + 3))
      {
        int v8 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(a2, __p);
          uint64_t v9 = v15 >= 0 ? __p : (void **)__p[0];
          int v11 = 136315138;
          uint64_t v12 = v9;
          _os_log_impl(&dword_235A7C000, v8, OS_LOG_TYPE_DEFAULT, "ARState: Floor anchor %s is removed. Dispatch a new request to ARKit for new floor", (uint8_t *)&v11, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v10 = *((void *)v3[1] + 3);
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      }
    }
  }
}

void sub_235AD2DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::removeAnchor(rf *a1, rf::data_flow::RFUUID *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = rf::realityFusionLogObject(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string(a2, __p);
    if ((SBYTE7(v15) & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v18 = v7;
    _os_log_impl(&dword_235A7C000, v6, OS_LOG_TYPE_DEFAULT, "ARState: Removing anchor %s", buf, 0xCu);
    if (SBYTE7(v15) < 0) {
      operator delete(__p[0]);
    }
  }

  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 1080), (uint64_t)a2);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 1120), (uint64_t)a2);
  int v8 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 80), (uint64_t)a2);
  uint64_t v9 = v8;
  if (v8)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    long long v15 = v10;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)(v8 + 6));
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(a3, (uint64_t)__p, __p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    int v11 = (void *)(*(void *)a1 + 80);
  }
  else
  {
    uint64_t v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 120), (uint64_t)a2);
    uint64_t v9 = v12;
    if (!v12) {
      return;
    }
    long long v13 = *((_OWORD *)a2 + 1);
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    long long v15 = v13;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)(v12 + 6));
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>(a3, (uint64_t)__p, __p);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    int v11 = (void *)(*(void *)a1 + 120);
  }
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::remove(v11, v9, (uint64_t)__p);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
}

void sub_235AD2FB0(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void RFLoggingServiceCreate()
{
  if (qword_26AB58980 != -1) {
    dispatch_once(&qword_26AB58980, &__block_literal_global_11);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void RFLoggingServiceSaveFullSnapshotToFile(uint64_t a1, const __CFURL *a2, long long *a3, void *a4)
{
  v26[4] = *MEMORY[0x263EF8340];
  id v7 = a4;
  CFStringRef v8 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  applesauce::CF::details::CFString_get_value<true>(v8, (uint64_t)v16);
  CFRelease(v8);
  if (v17 >= 0) {
    uint64_t v9 = (char *)v16;
  }
  else {
    uint64_t v9 = (char *)v16[0];
  }
  if (a3)
  {
    long long v12 = *a3;
    long long v13 = a3[1];
    long long v14 = a3[2];
    long long v15 = a3[3];
  }
  else
  {
    long long v15 = xmmword_235AF7AA0;
    long long v14 = xmmword_235AF7600;
    long long v13 = xmmword_235AF75F0;
    long long v12 = xmmword_235AF75E0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x237DEE740](v7);
  v26[0] = &unk_26E8F5F50;
  v26[1] = v11;
  void v26[3] = v26;
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  long long v19 = v12;
  long long v20 = v13;
  long long v21 = v14;
  long long v22 = v15;
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v26);
  int v24 = 65793;
  __int16 v25 = 256;
  rf::data_flow::consumer::LoggingConsumer::requestSaveFullSnapshot((std::string *)(v10 + 16), &__p);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v26);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_235AD323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest((rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *)&a24);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v30 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void RFLoggingServiceStartSavingSnapshotsToFiles(uint64_t a1, const __CFURL *a2, long long *a3, void *a4, unsigned int a5)
{
  v30[4] = *MEMORY[0x263EF8340];
  id v9 = a4;
  CFStringRef v10 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  applesauce::CF::details::CFString_get_value<true>(v10, (uint64_t)v19);
  CFRelease(v10);
  if (v20 >= 0) {
    uint64_t v11 = (char *)v19;
  }
  else {
    uint64_t v11 = (char *)v19[0];
  }
  if (a3)
  {
    long long v15 = *a3;
    long long v16 = a3[1];
    long long v17 = a3[2];
    long long v18 = a3[3];
  }
  else
  {
    long long v18 = xmmword_235AF7AA0;
    long long v17 = xmmword_235AF7600;
    long long v16 = xmmword_235AF75F0;
    long long v15 = xmmword_235AF75E0;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = MEMORY[0x237DEE740](v9);
  v30[0] = &unk_26E8F5FE0;
  v30[1] = v13;
  void v30[3] = v30;
  std::string::basic_string[abi:ne180100]<0>(&__p, v11);
  long long v22 = v15;
  long long v23 = v16;
  long long v24 = v17;
  long long v25 = v18;
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v30);
  v14.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(a5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFBFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  unsigned __int32 v27 = vmovn_s16(v14).u32[0];
  BOOL v28 = (a5 & 0x10) != 0;
  BOOL v29 = (a5 & 0x40) != 0;
  rf::data_flow::consumer::LoggingConsumer::startSavingSnapshots((rf::data_flow::consumer::LoggingConsumer *)(v12 + 16), &__p);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v30);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_235AD346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest::~SaveSnapshotRequest((rf::data_flow::consumer::LoggingConsumer::SaveSnapshotRequest *)&a24);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v30 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void RFLoggingServiceStopSavingSnapshots(uint64_t a1)
{
}

uint64_t RFLoggingServiceUpdate(uint64_t a1, uint64_t a2)
{
  return RFLoggingServiceUpdateByDeltaTime(a1, a2, 0.0);
}

uint64_t RFLoggingServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  float v9 = a3;
  uint64_t v10 = ECSManagerNullable;
  char v11 = v7;
  uint64_t v12 = a2;
  char v13 = 1;
  uint64_t v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 16) + 16))(v5 + 16, &v9);
}

void RFLoggingObserverCreate()
{
  if (qword_26AB58990 != -1) {
    dispatch_once(&qword_26AB58990, &__block_literal_global_11);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void RFLoggingServiceRegisterObserver(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2) {
    rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(&v4, a2);
  }
  long long v3 = 0uLL;
  std::vector<std::shared_ptr<rf::data_flow::consumer::LoggingCallbacks>>::push_back[abi:ne180100]((unint64_t *)(v2 + 384), &v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_235AD36D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void RFLoggingServiceRemoveObserver(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + 16;
  if (a2) {
    rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(&v5, a2);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  rf::data_flow::consumer::LoggingConsumer::removeCallbacks(v2, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_235AD3790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void RFLoggingObserverSetDidSaveFullSnapshotCallback(uint64_t a1, void *a2)
{
  id v3 = a2;
  std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>((void *)(*(void *)(a1 + 16) + 40), (uint64_t)v3);
}

void sub_235AD3808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x263EF8340];
  char v7 = 0;
  if (a2)
  {
    id v3 = v6;
    v6[0] = &unk_26E8F60E0;
    v6[1] = MEMORY[0x237DEE740](a2);
    char v7 = v6;
  }
  else
  {
    id v3 = 0;
  }
  if (v6 != a1)
  {
    uint64_t v4 = (void *)a1[3];
    if (v3 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        char v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        char v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        char v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      char v7 = v6;
    }
    else
    {
      char v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_235AD3AD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void RFLoggingObserverSetDidSaveSnapshotCallback(uint64_t a1, void *a2)
{
  id v3 = a2;
  std::function<void ()(unsigned long)>::operator=<void({block_pointer} {__strong}&)(unsigned long),void>((void *)(*(void *)(a1 + 16) + 8), (uint64_t)v3);
}

void sub_235AD3B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *RFLoggingObserverSetDidUpdateMeshAssetsCallback(uint64_t a1, uint64_t a2)
{
  void v13[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  CFStringRef v8 = &unk_26E8F6170;
  uint64_t v9 = MEMORY[0x237DEE740](a2);
  uint64_t v12 = v11;
  uint64_t v10 = &v8;
  v11[0] = &unk_26E8F6170;
  uint64_t v4 = v2 + 72;
  v11[1] = MEMORY[0x237DEE740](v9, v3);
  if (v11 != (void *)(v2 + 72))
  {
    uint64_t v5 = v12;
    uint64_t v6 = *(void *)(v2 + 96);
    if (v12 == v11)
    {
      if (v6 == v4)
      {
        (*(void (**)(void *, void *))(v11[0] + 24))(v11, v13);
        (*(void (**)(void *))(*v12 + 32))(v12);
        uint64_t v12 = 0;
        (*(void (**)(void, void *))(**(void **)(v2 + 96) + 24))(*(void *)(v2 + 96), v11);
        (*(void (**)(void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96));
        *(void *)(v2 + 96) = 0;
        uint64_t v12 = v11;
        (*(void (**)(void *, uint64_t))(v13[0] + 24))(v13, v2 + 72);
        (*(void (**)(void *))(v13[0] + 32))(v13);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, v2 + 72);
        (*(void (**)(void *))(*v12 + 32))(v12);
        uint64_t v12 = *(void **)(v2 + 96);
      }
      *(void *)(v2 + 96) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(v2 + 72, v11);
      (*(void (**)(void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96));
      *(void *)(v2 + 96) = v12;
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = *(void **)(v2 + 96);
      *(void *)(v2 + 96) = v5;
    }
  }
  std::__function::__value_func<void ()(unsigned long,std::vector<std::string> const&)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<void ()(unsigned long,std::vector<std::string> const&)>::~__value_func[abi:ne180100](&v8);
}

void sub_235AD3E30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer15LoggingConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_21[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::LoggingConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58998 = 0u;
  xmmword_26AB589A8 = 0u;
  xmmword_26AB589B8 = 0u;
  unk_26AB589C8 = 0u;
  xmmword_26AB589D8 = 0u;
  unk_26AB589E8 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58998 + 1) = v7;
  *(void *)&xmmword_26AB589A8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::initCallback;
  *(void *)&xmmword_26AB589B8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::finalizeCallback;
  qword_26AB589D0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB589D8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_12 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AD3FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    rf::data_flow::consumer::LoggingConsumer::~LoggingConsumer((rf::data_flow::consumer::LoggingConsumer *)(v2 + 16));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5F50;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5F50;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v3 = (const char *)a2;
    }
    else {
      int v3 = *(const char **)a2;
    }
    size_t v4 = strlen(v3);
    CFURLRef v5 = CFURLCreateWithBytes(0, (const UInt8 *)v3, v4, 0, 0);
    if (!v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    CFURLRef v6 = v5;
    (*(void (**)(uint64_t, CFURLRef))(v2 + 16))(v2, v5);
    CFRelease(v6);
  }
}

void sub_235AD427C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFLoggingServiceSaveFullSnapshotToFile::$_0,std::allocator<RFLoggingServiceSaveFullSnapshotToFile::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F5FE0;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F5FE0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v3 = (const char *)a2;
    }
    else {
      int v3 = *(const char **)a2;
    }
    size_t v4 = strlen(v3);
    CFURLRef v5 = CFURLCreateWithBytes(0, (const UInt8 *)v3, v4, 0, 0);
    if (!v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237DEE130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    CFURLRef v6 = v5;
    (*(void (**)(uint64_t, CFURLRef))(v2 + 16))(v2, v5);
    CFRelease(v6);
  }
}

void sub_235AD4508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFLoggingServiceStartSavingSnapshotsToFiles::$_0,std::allocator<RFLoggingServiceStartSavingSnapshotsToFiles::$_0>,void ()(std::string const&)>::target_type()
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer16LoggingCallbacksEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_22[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      size_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    size_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  size_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::LoggingCallbacks]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB589F8 = 0u;
  xmmword_26AB58A08 = 0u;
  xmmword_26AB58A18 = 0u;
  unk_26AB58A28 = 0u;
  xmmword_26AB58A38 = 0u;
  unk_26AB58A48 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB589F8 + 1) = v7;
  *(void *)&xmmword_26AB58A08 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::initCallback;
  *(void *)&xmmword_26AB58A18 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::finalizeCallback;
  qword_26AB58A30 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58A38 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyDebugDescriptionCallback;
  qword_26AB58988 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AD470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::finalizeCallback(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::BridgableObject>::operator()[abi:ne180100](v2);
  }
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>>::copyDebugDescriptionCallback()
{
  return 0;
}

void std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::BridgableObject>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<void ()(unsigned long,std::vector<std::string> const&)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](v2);
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void *a1, CFTypeRef cf)
{
  *a1 = *((void *)cf + 2) + 8;
  operator new();
}

void sub_235AD48B8(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(*v1);
  __cxa_rethrow();
}

void sub_235AD48CC(void *a1)
{
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DEE2B0);
}

void std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<rf::data_flow::consumer::LoggingCallbacks *,rf::CustomCFObject<rf::data_flow::consumer::LoggingCallbacks>::makeSharedPtr(void)::{lambda(rf::data_flow::consumer::LoggingCallbacks *)#1},std::allocator<rf::data_flow::consumer::LoggingCallbacks>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F60E0;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::destroy(uint64_t a1)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(unsigned long),std::allocator<void({block_pointer} {__strong})(unsigned long)>,void ()(unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F6170;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F6170;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(a1 + 8))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    while (v6 != v7)
    {
      CFStringRef v8 = (const char *)v6;
      if (*(char *)(v6 + 23) < 0) {
        CFStringRef v8 = *(const char **)v6;
      }
      CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      v6 += 24;
    }
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
    CFRelease(Mutable);
  }
}

uint64_t std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0,std::allocator<RFLoggingObserverSetDidUpdateMeshAssetsCallback::$_0>,void ()(unsigned long,std::vector<std::string> const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned long,std::vector<std::string> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void rf::detail::removePRRMeshesFrom(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    CFStringRef v8 = a1;
    do
    {
      CFStringRef v9 = rf::realityFusionLogObject((rf *)a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        uint64_t v10 = (SBYTE7(v20) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl(&dword_235A7C000, v9, OS_LOG_TYPE_DEFAULT, "ARState: Removing prr mesh %s", buf, 0xCu);
        if (SBYTE7(v20) < 0) {
          operator delete(__p[0]);
        }
      }

      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v8 + 960), v5);
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v8 + 1000), v5);
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(*v8 + 40), v5))
      {
        goto LABEL_12;
      }
      char v11 = rf::realityFusionLogObject(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v5, __p);
        long long v16 = (SBYTE7(v20) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_error_impl(&dword_235A7C000, v11, OS_LOG_TYPE_ERROR, "removePRRMeshesFrom(): Mesh %s to be removed but doesn't exist in prrMeshDictionary!", buf, 0xCu);
        if (SBYTE7(v20) < 0) {
          operator delete(__p[0]);
        }
      }

      if ((a3 & 1) == 0)
      {
LABEL_12:
        *(_OWORD *)long long buf = *(_OWORD *)v5;
        long long v18 = *(_OWORD *)(v5 + 16);
        uint64_t v12 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*v8 + 40), v5);
        if (!v12) {
          goto LABEL_27;
        }
        *(_OWORD *)std::string __p = *(_OWORD *)buf;
        long long v20 = v18;
        char v13 = (std::__shared_weak_count *)v12[7];
        uint64_t v21 = v12[6];
        long long v22 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>(a4, (uint64_t)__p, (uint64_t)__p);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        uint64_t v14 = *(void *)(v5 + 32);
        long long v15 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)a4, v5);
        if (!v15) {
LABEL_27:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        *(void *)(v15[6] + 120) = v14;
        a1 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::__erase_unique<rf::data_flow::RFUUID>((void *)(*v8 + 40), v5);
      }
      v5 += 40;
    }
    while (v5 != v6);
  }
}

void sub_235AD5060(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void rf::detail::updatePRRMeshesAt(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>((void *)(*(void *)a1 + 40), v4))
      {
        uint64_t v7 = *(void *)a1 + 40;
        long long v8 = *(_OWORD *)(v4 + 16);
        long long v35 = *(_OWORD *)v4;
        long long v36 = v8;
        *(void *)&v34[0] = &v35;
        uint64_t v9 = *(void *)(std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v7, (uint64_t)&v35, (uint64_t)&std::piecewise_construct, (_OWORD **)v34)[6]+ 32);
        long long v10 = *(_OWORD *)(v4 + 16);
        long long v35 = *(_OWORD *)v4;
        long long v36 = v10;
        uint64_t v37 = v9 + 1;
        long long v11 = *(_OWORD *)(v4 + 32);
        long long v12 = *(_OWORD *)(v4 + 48);
        long long v13 = *(_OWORD *)(v4 + 80);
        long long v40 = *(_OWORD *)(v4 + 64);
        long long v41 = v13;
        long long v38 = v11;
        long long v39 = v12;
        char v42 = *(unsigned char *)(v4 + 96);
        int v43 = 1;
        uint64_t v44 = *(void *)(v4 + 104);
        LOBYTE(v45) = 0;
        char v47 = 0;
        if (*(unsigned char *)(v4 + 136))
        {
          uint64_t v14 = *(void *)(v4 + 112);
          *(void *)(v4 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
          uint64_t v45 = v14;
          long long v46 = *(_OWORD *)(v4 + 120);
          char v47 = 1;
        }
        LOBYTE(vstd::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
        char v50 = 0;
        if (*(unsigned char *)(v4 + 168))
        {
          uint64_t v15 = *(void *)(v4 + 144);
          *(void *)(v4 + 144) = 0;
          uint64_t v48 = v15;
          long long v49 = *(_OWORD *)(v4 + 152);
          char v50 = 1;
        }
        LOBYTE(v51) = 0;
        char v53 = 0;
        if (*(unsigned char *)(v4 + 200))
        {
          uint64_t v16 = *(void *)(v4 + 176);
          *(void *)(v4 + 176) = 0;
          uint64_t v51 = v16;
          long long v52 = *(_OWORD *)(v4 + 184);
          char v53 = 1;
        }
        LOBYTE(v54) = 0;
        char v56 = 0;
        if (*(unsigned char *)(v4 + 232))
        {
          uint64_t v17 = *(void *)(v4 + 208);
          *(void *)(v4 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
          uint64_t v54 = v17;
          long long v55 = *(_OWORD *)(v4 + 216);
          char v56 = 1;
        }
        LOBYTE(v57) = 0;
        char v59 = 0;
        if (*(unsigned char *)(v4 + 264))
        {
          uint64_t v18 = *(void *)(v4 + 240);
          *(void *)(v4 + 240) = 0;
          uint64_t v57 = v18;
          long long v58 = *(_OWORD *)(v4 + 248);
          char v59 = 1;
        }
        LOBYTE(v60) = 0;
        char v62 = 0;
        if (*(unsigned char *)(v4 + 296))
        {
          uint64_t v19 = *(void *)(v4 + 272);
          *(void *)(v4 + 272) = 0;
          uint64_t v60 = v19;
          long long v61 = *(_OWORD *)(v4 + 280);
          char v62 = 1;
        }
        LOBYTE(v63) = 0;
        char v65 = 0;
        if (*(unsigned char *)(v4 + 328))
        {
          uint64_t v20 = *(void *)(v4 + 304);
          *(void *)(v4 + 304) = 0;
          uint64_t v63 = v20;
          long long v64 = *(_OWORD *)(v4 + 312);
          char v65 = 1;
        }
        char v66 = 0;
        char v67 = 0;
        char v68 = 0;
        char v69 = 0;
        char v70 = 0;
        char v71 = 0;
        char v72 = 0;
        char v73 = 0;
        std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(&v35, &v31);
        uint64_t v21 = *(void *)a1 + 40;
        long long v22 = *(_OWORD *)(v4 + 16);
        v34[0] = *(_OWORD *)v4;
        v34[1] = v22;
        uint64_t v33 = v34;
        uint64_t v23 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v21, (uint64_t)v34, (uint64_t)&std::piecewise_construct, &v33);
        uint64_t v25 = v31;
        long long v24 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v26 = (std::__shared_weak_count *)v23[7];
        v23[6] = v25;
        v23[7] = v24;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        *(void *)&v34[0] = v4;
        unsigned __int32 v27 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a3, v4, (uint64_t)&std::piecewise_construct, (_OWORD **)v34);
        uint64_t v29 = v31;
        BOOL v28 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = (std::__shared_weak_count *)v27[7];
        v27[6] = v29;
        v27[7] = v28;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        rf::data_flow::consumer::Mesh::~Mesh((id *)&v35);
      }
      v4 += 336;
    }
    while (v4 != v5);
  }
}

void sub_235AD5408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  rf::data_flow::consumer::Mesh::~Mesh((id *)va);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void rf::detail::insertPRRMeshesInto(rf *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = (_OWORD *)a2[1];
  if ((_OWORD *)*a2 != v4)
  {
    uint64_t v6 = *a2 + 176;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 160);
      v33[0] = *(_OWORD *)(v6 - 176);
      v33[1] = v7;
      uint64_t v34 = 1;
      long long v8 = *(_OWORD *)(v6 - 144);
      long long v9 = *(_OWORD *)(v6 - 128);
      long long v10 = *(_OWORD *)(v6 - 96);
      long long v37 = *(_OWORD *)(v6 - 112);
      long long v38 = v10;
      long long v35 = v8;
      long long v36 = v9;
      char v39 = *(unsigned char *)(v6 - 80);
      int v40 = 1;
      uint64_t v41 = *(void *)(v6 - 72);
      LOBYTE(v42) = 0;
      char v44 = 0;
      if (*(unsigned char *)(v6 - 40))
      {
        uint64_t v11 = *(void *)(v6 - 64);
        *(void *)(v6 - 64) = 0;
        uint64_t v42 = v11;
        long long v43 = *(_OWORD *)(v6 - 56);
        char v44 = 1;
      }
      long long v12 = (_OWORD *)(v6 - 176);
      LOBYTE(v45) = 0;
      char v47 = 0;
      if (*(unsigned char *)(v6 - 8))
      {
        uint64_t v13 = *(void *)(v6 - 32);
        *(void *)(v6 - 32) = 0;
        uint64_t v45 = v13;
        long long v46 = *(_OWORD *)(v6 - 24);
        char v47 = 1;
      }
      LOBYTE(vstd::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
      char v50 = 0;
      if (*(unsigned char *)(v6 + 24))
      {
        uint64_t v14 = *(void *)v6;
        *(void *)uint64_t v6 = 0;
        uint64_t v48 = v14;
        long long v49 = *(_OWORD *)(v6 + 8);
        char v50 = 1;
      }
      LOBYTE(v51) = 0;
      char v53 = 0;
      if (*(unsigned char *)(v6 + 56))
      {
        uint64_t v15 = *(void *)(v6 + 32);
        *(void *)(v6 + 32) = 0;
        uint64_t v51 = v15;
        long long v52 = *(_OWORD *)(v6 + 40);
        char v53 = 1;
      }
      LOBYTE(v54) = 0;
      char v56 = 0;
      if (*(unsigned char *)(v6 + 88))
      {
        uint64_t v16 = *(void *)(v6 + 64);
        *(void *)(v6 + 64) = 0;
        uint64_t v54 = v16;
        long long v55 = *(_OWORD *)(v6 + 72);
        char v56 = 1;
      }
      LOBYTE(v57) = 0;
      char v59 = 0;
      if (*(unsigned char *)(v6 + 120))
      {
        uint64_t v17 = *(void *)(v6 + 96);
        *(void *)(v6 + 96) = 0;
        uint64_t v57 = v17;
        long long v58 = *(_OWORD *)(v6 + 104);
        char v59 = 1;
      }
      LOBYTE(v60) = 0;
      char v62 = 0;
      if (*(unsigned char *)(v6 + 152))
      {
        uint64_t v18 = *(void *)(v6 + 128);
        *(void *)(v6 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
        uint64_t v60 = v18;
        long long v61 = *(_OWORD *)(v6 + 136);
        char v62 = 1;
      }
      char v63 = 0;
      char v64 = 0;
      char v65 = 0;
      char v66 = 0;
      char v67 = 0;
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      uint64_t v19 = rf::realityFusionLogObject(a1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v33, __p);
        uint64_t v20 = __p;
        if (SBYTE7(v31) < 0) {
          uint64_t v20 = (void **)__p[0];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_235A7C000, v19, OS_LOG_TYPE_DEFAULT, "ARState: Adding prr mesh %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v31) < 0) {
          operator delete(__p[0]);
        }
      }

      std::allocate_shared[abi:ne180100]<rf::data_flow::consumer::Mesh,std::allocator<rf::data_flow::consumer::Mesh>,rf::data_flow::consumer::Mesh,void>(v33, &buf);
      uint64_t v21 = *(void *)a1 + 40;
      long long v22 = *(_OWORD *)(v6 - 160);
      *(_OWORD *)std::string __p = *v12;
      long long v31 = v22;
      uint64_t v29 = __p;
      uint64_t v23 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v21, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v29);
      long long v24 = buf;
      if (*((void *)&buf + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = (std::__shared_weak_count *)v23[7];
      *((_OWORD *)v23 + 3) = v24;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      __p[0] = (void *)(v6 - 176);
      long long v26 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(a3, v6 - 176, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      long long v27 = buf;
      if (*((void *)&buf + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v28 = (std::__shared_weak_count *)v26[7];
      *((_OWORD *)v26 + 3) = v27;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      rf::data_flow::consumer::Mesh::~Mesh((id *)v33);
      v6 += 336;
    }
    while (v12 + 21 != v4);
  }
}

void sub_235AD57F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  rf::data_flow::consumer::Mesh::~Mesh(&a27);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

uint64_t *rf::PlacementComponentTypeInfo::instance(rf::PlacementComponentTypeInfo *this)
{
  {
    rf::PlacementComponentTypeInfo::instance(void)::instance = 0;
    qword_26882F300 = 0;
    qword_26882F320 = 0;
    qword_26882F340 = 0;
    qword_26882F360 = 0;
    dword_26882F368 = 0;
  }
  return &rf::PlacementComponentTypeInfo::instance(void)::instance;
}

void *rf::PlacementComponentTypeInfo::initWithType(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a2;
  long long v10 = a1 + 13;
  std::function<unsigned char const* ()(REComponent *)>::operator=(a1 + 1, a3);
  std::function<BOOL ()(REComponent *)>::operator=(a1 + 5, a4);
  std::function<void ()(REComponent *)>::operator=(a1 + 9, a5);
  return std::function<RESRT ()(REComponent *)>::operator=(v10, a6);
}

void *std::function<unsigned char const* ()(REComponent *)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<BOOL ()(REComponent *)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(REComponent *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(REComponent *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(REComponent *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(REComponent *)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(REComponent *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(REComponent *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<RESRT ()(REComponent *)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<RESRT ()(REComponent *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<RESRT ()(REComponent *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<RESRT ()(REComponent *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::function<unsigned char const* ()(REComponent *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::function<BOOL ()(REComponent *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<unsigned char const* ()(REComponent *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned char const* ()(REComponent *)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235AD5E98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<unsigned char const* ()(REComponent *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(REComponent *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(REComponent *)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235AD6220(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<BOOL ()(REComponent *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(REComponent *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<RESRT ()(REComponent *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<RESRT ()(REComponent *)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_235AD6640(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<RESRT ()(REComponent *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void RFQueryServiceCreate()
{
  if (qword_26AB58A60 != -1) {
    dispatch_once(&qword_26AB58A60, &__block_literal_global_12);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

void RFQueryServiceEvaluateEntityQuery(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v10 = a4;
  uint64_t v11 = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a1 + 16) + 32;
  long long v12 = &v11;
  for (char i = (uint64_t *)std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__emplace_unique_key_args<REScene const*,std::piecewise_construct_t const&,std::tuple<REScene const*&&>,std::tuple<>>(v8, &v11, (uint64_t)&std::piecewise_construct, &v12)[5]; i; char i = (uint64_t *)*i)
  {
    if ((***(unsigned int (****)(void, uint64_t))(v7 + 8))(*(void *)(v7 + 8), (uint64_t)(i + 6))
      && !*((_DWORD *)i + 20))
    {
      v10[2](v10, i[6]);
    }
  }
}

void sub_235AD6898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer13QueryConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_23[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      uint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  uint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::QueryConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58A68 = 0u;
  xmmword_26AB58A78 = 0u;
  xmmword_26AB58A88 = 0u;
  unk_26AB58A98 = 0u;
  xmmword_26AB58AA8 = 0u;
  unk_26AB58AB8 = 0u;
  uint64_t v7 = __dst;
  if (v9 < 0) {
    uint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58A68 + 1) = v7;
  *(void *)&xmmword_26AB58A78 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::initCallback;
  *(void *)&xmmword_26AB58A88 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::finalizeCallback;
  qword_26AB58AA0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58AA8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_13 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AD6A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::QueryConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table(v2 + 32);
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unint64_t rf::data_flow::details::NodeStore::createNode(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v6 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v6;
  unint64_t v41 = v6;
  std::to_string(&v39, v6);
  uint64_t v7 = std::string::insert(&v39, 0, "Node ", 5uLL);
  std::string __p = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::pointer p_p = &__p;
  if (a3[1].__r_.__value_.__s.__data_[0]) {
    std::vector<int>::pointer p_p = a3;
  }
  std::string::size_type v43 = p_p->__r_.__value_.__r.__words[2];
  long long v42 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
  p_p->__r_.__value_.__l.__size_ = 0;
  p_p->__r_.__value_.__r.__words[2] = 0;
  p_p->__r_.__value_.__r.__words[0] = 0;
  uint64_t v45 = *(void **)(a2 + 16);
  long long v44 = *(_OWORD *)a2;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      a2 = v6;
      if (v9 <= v6) {
        a2 = v6 % v9;
      }
    }
    else
    {
      a2 = (v9 - 1) & v6;
    }
    uint64_t v11 = *(void ****)(*(void *)a1 + 8 * a2);
    if (v11)
    {
      for (char i = *v11; i; char i = (void **)*i)
      {
        unint64_t v13 = (unint64_t)i[1];
        if (v13 == v6)
        {
          if (i[2] == (void *)v6) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != a2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (char *)operator new(0x50uLL);
  uint64_t v15 = (void *)(a1 + 16);
  v46[0] = v14;
  v46[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v6;
  *((void *)v14 + 2) = v6;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *((void *)v14 + 9) = 0;
  char v47 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void *)*v15;
          if (*v15)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v15;
            long long v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_57;
                  }
                  *uint64_t v25 = *v31;
                  *long long v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  long long v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_57:
                uint64_t v25 = v31;
                long long v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        long long v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v6) {
        a2 = v6 % v9;
      }
      else {
        a2 = v6;
      }
    }
    else
    {
      a2 = (v9 - 1) & v6;
    }
  }
  uint64_t v33 = *(void ****)(*(void *)a1 + 8 * a2);
  char i = (void **)v46[0];
  if (v33)
  {
    *(void *)v46[0] = *v33;
LABEL_74:
    *uint64_t v33 = i;
    goto LABEL_75;
  }
  *(void *)v46[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * a2) = v15;
  if (*i)
  {
    unint64_t v34 = *((void *)*i + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void ***)(*(void *)a1 + 8 * v34);
    goto LABEL_74;
  }
LABEL_75:
  v46[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100]((uint64_t)v46);
LABEL_76:
  i[3] = (void *)v6;
  long long v35 = i + 4;
  if (*((char *)i + 55) < 0) {
    operator delete(*v35);
  }
  *(_OWORD *)long long v35 = v42;
  i[6] = (void *)v43;
  long long v36 = i + 7;
  if (*((char *)i + 79) < 0) {
    operator delete(*v36);
  }
  *(_OWORD *)long long v36 = v44;
  i[9] = v45;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_235AD7068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100](v23 - 72);
  rf::data_flow::details::NodeStore::Node::~Node(&a23);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void rf::data_flow::details::NodeStore::Node::~Node(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,rf::data_flow::details::NodeStore::Node>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,rf::data_flow::details::NodeStore::Node>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t rf::data_flow::consumer::QueryConsumer::consumeLatestUpdate(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    return rf::query::QueryDatabasePerScene::updateUsingScene(result + 24, *(void *)(a2 + 24));
  }
  return result;
}

void rf::data_flow::consumer::QueryConsumer::~QueryConsumer(rf::data_flow::consumer::QueryConsumer *this)
{
}

{
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x237DEE2B0);
}

uint64_t rf::data_flow::provider::SyntheticARData::SyntheticARData(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  id v22 = a2;
  *(void *)a1 = v22;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    *(void *)(a1 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = xmmword_235AF75E0;
  *(_OWORD *)(a1 + 64) = xmmword_235AF75F0;
  *(_OWORD *)(a1 + 80) = xmmword_235AF7600;
  *(_OWORD *)(a1 + 96) = xmmword_235AF7AA0;
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 112));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v8 = (void **)(a1 + 192);
  *(_OWORD *)(a1 + 240) = 0u;
  unint64_t v9 = (void **)(a1 + 240);
  *(unsigned char *)(a1 + 384) = 0;
  uint8x8_t v10 = (void **)(a1 + 264);
  uint64_t v11 = (void **)(a1 + 216);
  long long v12 = (void **)(a1 + 288);
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = 0u;
  unint64_t v13 = (void **)(a1 + 312);
  uint64_t v14 = (void **)(a1 + 336);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0u;
  *(_OWORD *)(a1 + 2std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  rf::synthetic::SyntheticUsdKitParser::SyntheticUsdKitParser(v26, *(void **)a1, *(void *)(a1 + 8), (uint64_t *)a4);
  unsigned __int8 v23 = 3;
  rf::synthetic::SyntheticUsdKitParser::getInputMeshes((uint64_t)v26, &v23, (unint64_t *)&v24);
  std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate((uint64_t *)(a1 + 144));
  *(_OWORD *)(a1 + 144) = v24;
  *(void *)(a1 + 160) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint8x8_t v27 = (void **)&v24;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v27);
  unsigned __int8 v23 = 4;
  rf::synthetic::SyntheticUsdKitParser::getInputMeshes((uint64_t)v26, &v23, (unint64_t *)&v24);
  std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate((uint64_t *)(a1 + 168));
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = v24;
  *(void *)(a1 + 184) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint8x8_t v27 = (void **)&v24;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v27);
  rf::synthetic::SyntheticUsdKitParser::getInputAnchors((rf::synthetic::SyntheticUsdKitParser *)v26, (unint64_t *)&v24);
  if (*(void *)(a1 + 192))
  {
    std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100]((uint64_t *)(a1 + 192));
    operator delete(*v8);
    *uint64_t v8 = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = v24;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint8x8_t v27 = (void **)&v24;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v27);
  rf::synthetic::SyntheticUsdKitParser::getInputObjects((rf::synthetic::SyntheticUsdKitParser *)v26, (void **)&v24);
  if (*v11)
  {
    std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100]((uint64_t *)(a1 + 216));
    operator delete(*v11);
    *uint64_t v11 = 0;
    *(void *)(a1 + 2std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
    *(void *)(a1 + 232) = 0;
  }
  *(_OWORD *)(a1 + 216) = v24;
  *(void *)(a1 + 232) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint8x8_t v27 = (void **)&v24;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v27);
  rf::synthetic::SyntheticUsdKitParser::getEnvironmentProbes((rf::synthetic::SyntheticUsdKitParser *)v26, (void **)&v24);
  if (*v9)
  {
    std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100]((uint64_t *)(a1 + 240));
    operator delete(*v9);
    NSObject *v9 = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = 0;
    *(void *)(a1 + 256) = 0;
  }
  *(_OWORD *)(a1 + 240) = v24;
  *(void *)(a1 + 256) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint8x8_t v27 = (void **)&v24;
  std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__destroy_vector::operator()[abi:ne180100](&v27);
  *(_DWORD *)(a1 + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 1;
  std::vector<rf::data_flow::RFUUID>::vector(&v24, (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 4);
  uint64_t v15 = *v10;
  if (*v10)
  {
    *(void *)(a1 + 272) = v15;
    operator delete(v15);
    *uint8x8_t v10 = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  *(_OWORD *)uint8x8_t v10 = v24;
  *(void *)(a1 + 280) = v25;
  std::vector<rf::data_flow::RFUUID>::vector(&v24, (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
  float v16 = *v12;
  if (*v12)
  {
    *(void *)(a1 + 296) = v16;
    operator delete(v16);
    *long long v12 = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
  }
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 288) = v24;
  *(void *)(a1 + 304) = v25;
  std::vector<rf::data_flow::RFUUID>::vector(&v24, (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 4);
  float v17 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 320) = v17;
    operator delete(v17);
    *unint64_t v13 = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 0;
  }
  *(_OWORD *)unint64_t v13 = v24;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = v25;
  std::vector<rf::data_flow::RFUUID>::vector(&v24, (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 4);
  BOOL v18 = *v14;
  if (*v14)
  {
    *(void *)(a1 + 344) = v18;
    operator delete(v18);
    *uint64_t v14 = 0;
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 336) = v24;
  *(void *)(a1 + 352) = v25;
  std::vector<rf::data_flow::RFUUID>::vector(&v24, (uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 4);
  unint64_t v20 = (void *)(a1 + 360);
  unint64_t v19 = *(void **)(a1 + 360);
  if (v19)
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = v19;
    operator delete(v19);
    *unint64_t v20 = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 368) = 0;
    *(void *)(a1 + 376) = 0;
  }
  *(_OWORD *)unint64_t v20 = v24;
  *(void *)(a1 + 376) = v25;

  return a1;
}

void sub_235AD75E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_235AD76E4()
{
}

void sub_235AD76EC()
{
}

double rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::SyntheticARData *this, rf::data_flow::provider::InputData *a2)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19) != *((void *)this + 18))
  {
    unint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = *((void *)this + 33);
      if (v4 >= (*((void *)this + 34) - v6) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      long long v7 = (uint64_t *)(v6 + 32 * v4);
      if (*((unsigned char *)v7 + 16)) {
        long long v7 = (uint64_t *)*v7;
      }
      if (!uuid_is_null((const unsigned __int8 *)v7))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)v107, *(const rf::data_flow::provider::InputMesh **)(*((void *)this + 18) + 16 * v4));
        uint64_t v8 = *((void *)this + 33);
        if (v4 >= (*((void *)this + 34) - v8) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v9 = 0;
        uint8x8_t v10 = (_OWORD *)(v8 + 32 * v4);
        long long v11 = v10[1];
        *(_OWORD *)float32x4_t v107 = *v10;
        *(_OWORD *)&v107[16] = v11;
        float32x4_t v12 = *((float32x4_t *)this + 3);
        float32x4_t v13 = *((float32x4_t *)this + 4);
        float32x4_t v14 = *((float32x4_t *)this + 5);
        float32x4_t v15 = *((float32x4_t *)this + 6);
        long long v130 = v108;
        long long v131 = v109;
        long long v132 = v110;
        long long v133 = v111;
        do
        {
          *(long long *)((char *)&v101 + v9) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(long long *)((char *)&v130 + v9))), v13, *(float32x2_t *)((char *)&v130 + v9), 1), v14, *(float32x4_t *)((char *)&v130 + v9), 2), v15, *(float32x4_t *)((char *)&v130 + v9), 3);
          v9 += 16;
        }
        while (v9 != 64);
        long long v108 = v101;
        long long v109 = v102;
        long long v110 = v103;
        long long v111 = v104;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a2 + 3, (long long *)v107);
        if (v129) {

        }
        if (v127) {
        if (v125)
        }

        if (v122) {
        if (v120)
        }

        if (v118) {
        if (v116)
        }
      }
      unint64_t v4 = ++v5;
    }
    while (v5 < (unint64_t)((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4));
  }
  if (*((void *)this + 22) != *((void *)this + 21))
  {
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    do
    {
      uint64_t v18 = *((void *)this + 36);
      if (v16 >= (*((void *)this + 37) - v18) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v19 = (uint64_t *)(v18 + 32 * v16);
      if (*((unsigned char *)v19 + 16)) {
        unint64_t v19 = (uint64_t *)*v19;
      }
      if (!uuid_is_null((const unsigned __int8 *)v19))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)v107, *(const rf::data_flow::provider::InputMesh **)(*((void *)this + 21) + 16 * v16));
        uint64_t v20 = *((void *)this + 36);
        if (v16 >= (*((void *)this + 37) - v20) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v21 = 0;
        id v22 = (_OWORD *)(v20 + 32 * v16);
        long long v23 = v22[1];
        *(_OWORD *)float32x4_t v107 = *v22;
        *(_OWORD *)&v107[16] = v23;
        float32x4_t v24 = *((float32x4_t *)this + 3);
        float32x4_t v25 = *((float32x4_t *)this + 4);
        float32x4_t v26 = *((float32x4_t *)this + 5);
        float32x4_t v27 = *((float32x4_t *)this + 6);
        long long v130 = v108;
        long long v131 = v109;
        long long v132 = v110;
        long long v133 = v111;
        do
        {
          *(long long *)((char *)&v101 + v21) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(long long *)((char *)&v130 + v21))), v25, *(float32x2_t *)((char *)&v130 + v21), 1), v26, *(float32x4_t *)((char *)&v130 + v21), 2), v27, *(float32x4_t *)((char *)&v130 + v21), 3);
          v21 += 16;
        }
        while (v21 != 64);
        long long v108 = v101;
        long long v109 = v102;
        long long v110 = v103;
        long long v111 = v104;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a2 + 80, (long long *)v107);
        if (v129) {

        }
        if (v127) {
        if (v125)
        }

        if (v122) {
        if (v120)
        }

        if (v118) {
        if (v116)
        }
      }
      unint64_t v16 = ++v17;
    }
    while (v17 < (unint64_t)((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 4));
  }
  LODWORD(v105) = 0;
  if (*((void *)this + 25) != *((void *)this + 24))
  {
    unint64_t v28 = 0;
    do
    {
      uint64_t v29 = *((void *)this + 39);
      if (v28 >= (*((void *)this + 40) - v29) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v30 = (uint64_t *)(v29 + 32 * v28);
      if (*((unsigned char *)v30 + 16)) {
        uint64_t v30 = (uint64_t *)*v30;
      }
      if (!uuid_is_null((const unsigned __int8 *)v30))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v107, *(void *)(*((void *)this + 24) + 16 * v105));
        *(void *)&long long v101 = this;
        *((void *)&v101 + 1) = &v105;
        *(void *)&long long v102 = a2;
        if (v124 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        *(void *)&long long v130 = &v101;
        ((void (*)(long long *, unsigned char *))off_26E8F6258[v124])(&v130, v107);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v107);
      }
      LODWORD(v105) = v105 + 1;
      unint64_t v28 = v105;
    }
    while (v105 < (unint64_t)((uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 4));
  }
  if (*((void *)this + 28) != *((void *)this + 27))
  {
    unint64_t v31 = 0;
    unsigned int v32 = 0;
    do
    {
      uint64_t v33 = *((void *)this + 42);
      if (v31 >= (*((void *)this + 43) - v33) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v34 = (uint64_t *)(v33 + 32 * v31);
      if (*((unsigned char *)v34 + 16)) {
        unint64_t v34 = (uint64_t *)*v34;
      }
      if (!uuid_is_null((const unsigned __int8 *)v34))
      {
        long long v35 = *(_OWORD **)(*((void *)this + 27) + 16 * v31);
        long long v36 = v35[2];
        long long v37 = v35[3];
        long long v38 = v35[4];
        long long v39 = v35[5];
        long long v40 = v35[7];
        long long v105 = v35[6];
        long long v106 = v40;
        uint64_t v41 = *((void *)this + 42);
        if (v31 >= (*((void *)this + 43) - v41) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v42 = 0;
        std::string::size_type v43 = (long long *)(v41 + 32 * v31);
        long long v130 = *v43;
        long long v131 = v43[1];
        float32x4_t v44 = *((float32x4_t *)this + 3);
        float32x4_t v45 = *((float32x4_t *)this + 4);
        float32x4_t v46 = *((float32x4_t *)this + 5);
        float32x4_t v47 = *((float32x4_t *)this + 6);
        long long v101 = v36;
        long long v102 = v37;
        long long v103 = v38;
        long long v104 = v39;
        do
        {
          *(float32x4_t *)&v107[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(long long *)((char *)&v101 + v42))), v45, *(float32x2_t *)((char *)&v101 + v42), 1), v46, *(float32x4_t *)((char *)&v101 + v42), 2), v47, *(float32x4_t *)((char *)&v101 + v42), 3);
          v42 += 16;
        }
        while (v42 != 64);
        long long v49 = *(_OWORD *)v107;
        long long v48 = *(_OWORD *)&v107[16];
        long long v51 = v108;
        long long v50 = v109;
        long long v52 = (long long *)*((void *)a2 + 72);
        unint64_t v53 = *((void *)a2 + 73);
        if ((unint64_t)v52 >= v53)
        {
          long long v97 = *(_OWORD *)v107;
          long long v98 = *(_OWORD *)&v107[16];
          long long v99 = v108;
          long long v100 = v109;
          uint64_t v57 = *((void *)a2 + 71);
          uint64_t v58 = ((uint64_t)v52 - v57) >> 7;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 57) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = v53 - v57;
          if (v60 >> 6 > v59) {
            unint64_t v59 = v60 >> 6;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61) {
            unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(v61);
          }
          else {
            uint64_t v62 = 0;
          }
          char v63 = (_OWORD *)(v61 + (v58 << 7));
          *char v63 = v130;
          v63[1] = v131;
          v63[2] = v97;
          v63[3] = v98;
          void v63[4] = v99;
          v63[5] = v100;
          v63[6] = v105;
          v63[7] = v106;
          char v64 = (char *)*((void *)a2 + 72);
          char v65 = (char *)*((void *)a2 + 71);
          char v66 = v63;
          if (v64 != v65)
          {
            do
            {
              long long v67 = *((_OWORD *)v64 - 8);
              long long v68 = *((_OWORD *)v64 - 7);
              long long v69 = *((_OWORD *)v64 - 5);
              *(v66 - 6) = *((_OWORD *)v64 - 6);
              *(v66 - 5) = v69;
              *(v66 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v67;
              *(v66 - 7) = v68;
              long long v70 = *((_OWORD *)v64 - 4);
              long long v71 = *((_OWORD *)v64 - 3);
              long long v72 = *((_OWORD *)v64 - 2);
              *((void *)v66 - 2) = *((void *)v64 - 2);
              *(v66 - 3) = v71;
              *(v66 - 2) = v72;
              *(v66 - 4) = v70;
              v66 -= 8;
              v64 -= 128;
            }
            while (v64 != v65);
            char v64 = (char *)*((void *)a2 + 71);
          }
          *((void *)a2 + 71) = v66;
          char v56 = v63 + 8;
          *((void *)a2 + 72) = v63 + 8;
          *((void *)a2 + 73) = v61 + (v62 << 7);
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          long long v54 = v43[1];
          *long long v52 = *v43;
          v52[1] = v54;
          v52[2] = v49;
          void v52[3] = v48;
          _OWORD v52[4] = v51;
          v52[5] = v50;
          long long v55 = v106;
          v52[6] = v105;
          v52[7] = v55;
          char v56 = v52 + 8;
        }
        *((void *)a2 + 72) = v56;
      }
      unint64_t v31 = ++v32;
    }
    while (v32 < (unint64_t)((uint64_t)(*((void *)this + 28) - *((void *)this + 27)) >> 4));
  }
  if (*((void *)this + 31) != *((void *)this + 30))
  {
    unint64_t v73 = 0;
    unsigned int v74 = 0;
    do
    {
      uint64_t v75 = *((void *)this + 45);
      if (v73 >= (*((void *)this + 46) - v75) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v76 = (uint64_t *)(v75 + 32 * v73);
      if (*((unsigned char *)v76 + 16)) {
        uint64_t v76 = (uint64_t *)*v76;
      }
      if (!uuid_is_null((const unsigned __int8 *)v76))
      {
        uint64_t v77 = *(void *)(*((void *)this + 30) + 16 * v73);
        long long v109 = *(_OWORD *)(v77 + 48);
        long long v110 = *(_OWORD *)(v77 + 64);
        long long v111 = *(_OWORD *)(v77 + 80);
        long long v112 = *(_OWORD *)(v77 + 96);
        *(_OWORD *)float32x4_t v107 = *(_OWORD *)v77;
        *(_OWORD *)&v107[16] = *(_OWORD *)(v77 + 16);
        long long v108 = *(_OWORD *)(v77 + 32);
        LOBYTE(v113) = 0;
        unsigned __int8 v114 = 0;
        int v78 = *(unsigned __int8 *)(v77 + 120);
        if (*(unsigned char *)(v77 + 120))
        {
          id v113 = *(id *)(v77 + 112);
          int v79 = 1;
          unsigned __int8 v114 = 1;
        }
        else
        {
          int v79 = 0;
        }
        uint64_t v80 = *(void *)(v77 + 128);
        uint64_t v115 = v80;
        uint64_t v81 = *((void *)this + 45);
        if (v73 >= (*((void *)this + 46) - v81) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v82 = 0;
        float32x4_t v83 = (_OWORD *)(v81 + 32 * v73);
        *(_OWORD *)float32x4_t v107 = *v83;
        *(_OWORD *)&v107[16] = v83[1];
        float32x4_t v84 = *((float32x4_t *)this + 3);
        float32x4_t v85 = *((float32x4_t *)this + 4);
        float32x4_t v86 = *((float32x4_t *)this + 5);
        float32x4_t v87 = *((float32x4_t *)this + 6);
        long long v130 = v108;
        long long v131 = v109;
        long long v132 = v110;
        long long v133 = v111;
        do
        {
          *(long long *)((char *)&v101 + v82) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, COERCE_FLOAT(*(long long *)((char *)&v130 + v82))), v85, *(float32x2_t *)((char *)&v130 + v82), 1), v86, *(float32x4_t *)((char *)&v130 + v82), 2), v87, *(float32x4_t *)((char *)&v130 + v82), 3);
          v82 += 16;
        }
        while (v82 != 64);
        long long v108 = v101;
        long long v109 = v102;
        long long v110 = v103;
        long long v111 = v104;
        unint64_t v88 = *((void *)a2 + 63);
        if (v88 >= *((void *)a2 + 64))
        {
          uint64_t v90 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>((uint64_t *)a2 + 62, (long long *)v107);
          int v79 = v114;
        }
        else
        {
          *(_OWORD *)(v88 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v109;
          *(_OWORD *)(v88 + 64) = v110;
          *(_OWORD *)(v88 + 80) = v111;
          *(_OWORD *)(v88 + 96) = v112;
          *(_OWORD *)unint64_t v88 = *(_OWORD *)v107;
          *(_OWORD *)(v88 + 16) = *(_OWORD *)&v107[16];
          *(_OWORD *)(v88 + 32) = v108;
          *(unsigned char *)(v88 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
          *(unsigned char *)(v88 + 120) = 0;
          if (v78)
          {
            id v89 = v113;
            id v113 = 0;
            *(void *)(v88 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v89;
            *(unsigned char *)(v88 + 120) = 1;
          }
          *(void *)(v88 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v80;
          uint64_t v90 = v88 + 144;
        }
        *((void *)a2 + 63) = v90;
        if (v79) {
      }
        }
      unint64_t v73 = ++v74;
    }
    while (v74 < (unint64_t)((uint64_t)(*((void *)this + 31) - *((void *)this + 30)) >> 4));
  }
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v107, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)float32x4_t v107 = *((_OWORD *)this + 1);
    *(void *)&v107[16] = *((void *)this + 4);
  }
  long long v91 = *((_OWORD *)this + 4);
  long long v108 = *((_OWORD *)this + 3);
  long long v109 = v91;
  long long v92 = *((_OWORD *)this + 6);
  long long v110 = *((_OWORD *)this + 5);
  long long v111 = v92;
  float32x4_t v93 = (void **)((char *)a2 + 816);
  if (*((char *)a2 + 839) < 0) {
    operator delete(*v93);
  }
  *(_OWORD *)float32x4_t v93 = *(_OWORD *)v107;
  *((void *)a2 + 104) = *(void *)&v107[16];
  long long v94 = v109;
  *((_OWORD *)a2 + 53) = v108;
  *((_OWORD *)a2 + 54) = v94;
  double result = *(double *)&v110;
  long long v96 = v111;
  *((_OWORD *)a2 + 55) = v110;
  *((_OWORD *)a2 + 56) = v96;
  *((_DWORD *)a2 + 254) = *((_DWORD *)this + 97);
  *((unsigned char *)a2 + 1020) = 1;
  return result;
}

void sub_235AD7FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,char a44)
{
  if (a44) {

  }
  _Unwind_Resume(exception_object);
}

void std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0xC30C30C30C30C3) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x61861861861861) {
      unint64_t v12 = 0xC30C30C30C30C3;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v23 = v4;
    if (v12) {
      float32x4_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::provider::InputMesh>>(v4, v12);
    }
    else {
      float32x4_t v13 = 0;
    }
    uint64_t v14 = (uint64_t)&v13[336 * v9];
    float32x4_t v15 = &v13[336 * v12];
    std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v14, a2);
    uint64_t v8 = v14 + 336;
    unsigned int v17 = (long long *)*a1;
    unint64_t v16 = (long long *)a1[1];
    if (v16 == (long long *)*a1)
    {
      int64x2_t v18 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v14 -= 336;
        v16 -= 21;
        std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(v14, v16);
      }
      while (v16 != v17);
      int64x2_t v18 = *(int64x2_t *)a1;
    }
    *a1 = v14;
    a1[1] = v8;
    int64x2_t v21 = v18;
    uint64_t v19 = a1[2];
    a1[2] = (uint64_t)v15;
    uint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    std::__split_buffer<rf::data_flow::provider::InputMesh>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    std::construct_at[abi:ne180100]<rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh,rf::data_flow::provider::InputMesh*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 336;
  }
  a1[1] = v8;
}

std::string *rf::data_flow::provider::SyntheticARData::appendRemovedData(uint64_t a1, uint64_t a2)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 152) != *(void *)(a1 + 144))
  {
    unint64_t v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = (char **)(a2 + 48);
    do
    {
      uint64_t v7 = *(void *)(a1 + 264);
      if (v4 >= (*(void *)(a1 + 272) - v7) >> 5) {
LABEL_112:
      }
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      uint64_t v8 = (uint64_t *)(v7 + 32 * v4);
      if (*((unsigned char *)v8 + 16)) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      if (!uuid_is_null((const unsigned __int8 *)v8))
      {
        uint64_t v9 = *(void *)(a1 + 264);
        if (v4 >= (*(void *)(a1 + 272) - v9) >> 5) {
          goto LABEL_112;
        }
        unint64_t v10 = (_OWORD *)(v9 + 32 * v4);
        uint64_t v11 = *(_OWORD **)(a2 + 56);
        unint64_t v12 = *(void *)(a2 + 64);
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v15 = ((char *)v11 - *v6) >> 5;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v12 - (void)*v6;
          if (v17 >> 4 > v16) {
            unint64_t v16 = v17 >> 4;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 64, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = &v19[32 * v15];
          long long v21 = v10[1];
          *(_OWORD *)uint64_t v20 = *v10;
          *((_OWORD *)v20 + 1) = v21;
          uint64_t v23 = *(char **)(a2 + 48);
          uint64_t v22 = *(char **)(a2 + 56);
          float32x4_t v24 = v20;
          if (v22 != v23)
          {
            do
            {
              long long v25 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v25;
              v24 -= 32;
              v22 -= 32;
            }
            while (v22 != v23);
            uint64_t v22 = *v6;
          }
          uint64_t v14 = v20 + 32;
          *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v24;
          *(void *)(a2 + 56) = v20 + 32;
          *(void *)(a2 + 64) = &v19[32 * v18];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          long long v13 = v10[1];
          *uint64_t v11 = *v10;
          v11[1] = v13;
          uint64_t v14 = v11 + 2;
        }
        *(void *)(a2 + 56) = v14;
      }
      unint64_t v4 = ++v5;
    }
    while (v5 < (unint64_t)((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 4));
  }
  long long v97 = [MEMORY[0x263EFF910] date];
  [v97 timeIntervalSince1970];
  if (*(void *)(a1 + 176) != *(void *)(a1 + 168))
  {
    uint64_t v27 = v26;
    unint64_t v28 = 0;
    unsigned int v29 = 0;
    do
    {
      uint64_t v30 = *(void *)(a1 + 288);
      if (v28 >= (*(void *)(a1 + 296) - v30) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v31 = (uint64_t *)(v30 + 32 * v28);
      if (*((unsigned char *)v31 + 16)) {
        unint64_t v31 = (uint64_t *)*v31;
      }
      if (!uuid_is_null((const unsigned __int8 *)v31))
      {
        uint64_t v32 = *(void *)(a1 + 288);
        if (v28 >= (*(void *)(a1 + 296) - v32) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v33 = (long long *)(v32 + 32 * v28);
        long long v101 = *v33;
        long long v102 = v33[1];
        unint64_t v34 = *(char **)(a2 + 672);
        unint64_t v35 = *(void *)(a2 + 680);
        if ((unint64_t)v34 >= v35)
        {
          long long v38 = *(char **)(a2 + 664);
          unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((v34 - v38) >> 3) + 1;
          if (v39 > 0x666666666666666) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v35 - (void)v38) >> 3);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x333333333333333) {
            unint64_t v41 = 0x666666666666666;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            if (v41 > 0x666666666666666) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v42 = (char *)operator new(40 * v41);
          }
          else
          {
            uint64_t v42 = 0;
          }
          long long v43 = v102;
          float32x4_t v44 = &v42[8 * ((v34 - v38) >> 3)];
          *(_OWORD *)float32x4_t v44 = v101;
          *((_OWORD *)v44 + 1) = v43;
          *((void *)v44 + 4) = v27;
          float32x4_t v45 = v44;
          if (v34 != v38)
          {
            do
            {
              long long v46 = *(_OWORD *)(v34 - 40);
              long long v47 = *(_OWORD *)(v34 - 24);
              *((void *)v45 - 1) = *((void *)v34 - 1);
              *(_OWORD *)(v45 - std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = v47;
              *(_OWORD *)(v45 - 40) = v46;
              v45 -= 40;
              v34 -= 40;
            }
            while (v34 != v38);
            unint64_t v34 = *(char **)(a2 + 664);
          }
          long long v48 = &v42[40 * v41];
          *(void *)(a2 + 664) = v45;
          long long v37 = v44 + 40;
          *(void *)(a2 + 672) = v44 + 40;
          *(void *)(a2 + 680) = v48;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          long long v36 = v33[1];
          *(_OWORD *)unint64_t v34 = *v33;
          *((_OWORD *)v34 + 1) = v36;
          *((void *)v34 + 4) = v27;
          long long v37 = v34 + 40;
        }
        *(void *)(a2 + 672) = v37;
      }
      unint64_t v28 = ++v29;
    }
    while (v29 < (unint64_t)((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4));
  }

  unsigned int v99 = 0;
  if (*(void *)(a1 + 200) != *(void *)(a1 + 192))
  {
    unint64_t v49 = 0;
    do
    {
      uint64_t v50 = *(void *)(a1 + 312);
      if (v49 >= (*(void *)(a1 + 320) - v50) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      long long v51 = (uint64_t *)(v50 + 32 * v49);
      if (*((unsigned char *)v51 + 16)) {
        long long v51 = (uint64_t *)*v51;
      }
      if (!uuid_is_null((const unsigned __int8 *)v51))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v101, *(void *)(*(void *)(a1 + 192) + 16 * v99));
        v98[0] = a1;
        v98[1] = &v99;
        v98[2] = a2;
        if (v103 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        long long v100 = v98;
        ((void (*)(void **, long long *))off_26E8F6288[v103])(&v100, &v101);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v101);
      }
      unint64_t v49 = ++v99;
    }
    while (v99 < (unint64_t)((uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 4));
  }
  if (*(void *)(a1 + 224) != *(void *)(a1 + 216))
  {
    unint64_t v52 = 0;
    unsigned int v53 = 0;
    long long v54 = (char **)(a2 + 592);
    do
    {
      uint64_t v55 = *(void *)(a1 + 336);
      if (v52 >= (*(void *)(a1 + 344) - v55) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      char v56 = (uint64_t *)(v55 + 32 * v52);
      if (*((unsigned char *)v56 + 16)) {
        char v56 = (uint64_t *)*v56;
      }
      if (!uuid_is_null((const unsigned __int8 *)v56))
      {
        uint64_t v57 = *(void *)(a1 + 336);
        if (v52 >= (*(void *)(a1 + 344) - v57) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v58 = (_OWORD *)(v57 + 32 * v52);
        unint64_t v59 = *(_OWORD **)(a2 + 600);
        unint64_t v60 = *(void *)(a2 + 608);
        if ((unint64_t)v59 >= v60)
        {
          uint64_t v63 = ((char *)v59 - *v54) >> 5;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v65 = v60 - (void)*v54;
          if (v65 >> 4 > v64) {
            unint64_t v64 = v65 >> 4;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v66 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66) {
            long long v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 608, v66);
          }
          else {
            long long v67 = 0;
          }
          long long v68 = &v67[32 * v63];
          long long v69 = v58[1];
          *(_OWORD *)long long v68 = *v58;
          *((_OWORD *)v68 + 1) = v69;
          long long v70 = *(char **)(a2 + 600);
          long long v71 = *(char **)(a2 + 592);
          long long v72 = v68;
          if (v70 != v71)
          {
            do
            {
              long long v73 = *((_OWORD *)v70 - 1);
              *((_OWORD *)v72 - 2) = *((_OWORD *)v70 - 2);
              *((_OWORD *)v72 - 1) = v73;
              v72 -= 32;
              v70 -= 32;
            }
            while (v70 != v71);
            long long v70 = *v54;
          }
          *(void *)(a2 + 592) = v72;
          uint64_t v62 = v68 + 32;
          *(void *)(a2 + 600) = v68 + 32;
          *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 608) = &v67[32 * v66];
          if (v70) {
            operator delete(v70);
          }
        }
        else
        {
          long long v61 = v58[1];
          *unint64_t v59 = *v58;
          v59[1] = v61;
          uint64_t v62 = v59 + 2;
        }
        *(void *)(a2 + 600) = v62;
      }
      unint64_t v52 = ++v53;
    }
    while (v53 < (unint64_t)((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 4));
  }
  if (*(void *)(a1 + 248) != *(void *)(a1 + 240))
  {
    unint64_t v74 = 0;
    unsigned int v75 = 0;
    uint64_t v76 = (char **)(a2 + 520);
    do
    {
      uint64_t v77 = *(void *)(a1 + 360);
      if (v74 >= (*(void *)(a1 + 368) - v77) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      int v78 = (uint64_t *)(v77 + 32 * v74);
      if (*((unsigned char *)v78 + 16)) {
        int v78 = (uint64_t *)*v78;
      }
      if (!uuid_is_null((const unsigned __int8 *)v78))
      {
        uint64_t v79 = *(void *)(a1 + 360);
        if (v74 >= (*(void *)(a1 + 368) - v79) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v80 = (_OWORD *)(v79 + 32 * v74);
        uint64_t v81 = *(_OWORD **)(a2 + 528);
        unint64_t v82 = *(void *)(a2 + 536);
        if ((unint64_t)v81 >= v82)
        {
          uint64_t v85 = ((char *)v81 - *v76) >> 5;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v87 = v82 - (void)*v76;
          if (v87 >> 4 > v86) {
            unint64_t v86 = v87 >> 4;
          }
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v88 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v86;
          }
          if (v88) {
            id v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>(a2 + 536, v88);
          }
          else {
            id v89 = 0;
          }
          uint64_t v90 = &v89[32 * v85];
          long long v91 = v80[1];
          *(_OWORD *)uint64_t v90 = *v80;
          *((_OWORD *)v90 + 1) = v91;
          long long v92 = *(char **)(a2 + 528);
          float32x4_t v93 = *(char **)(a2 + 520);
          long long v94 = v90;
          if (v92 != v93)
          {
            do
            {
              long long v95 = *((_OWORD *)v92 - 1);
              *((_OWORD *)v94 - 2) = *((_OWORD *)v92 - 2);
              *((_OWORD *)v94 - 1) = v95;
              v94 -= 32;
              v92 -= 32;
            }
            while (v92 != v93);
            long long v92 = *v76;
          }
          *(void *)(a2 + 520) = v94;
          float32x4_t v84 = v90 + 32;
          *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 528) = v90 + 32;
          *(void *)(a2 + 536) = &v89[32 * v88];
          if (v92) {
            operator delete(v92);
          }
        }
        else
        {
          long long v83 = v80[1];
          *uint64_t v81 = *v80;
          v81[1] = v83;
          float32x4_t v84 = v81 + 2;
        }
        *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 528) = v84;
      }
      unint64_t v74 = ++v75;
    }
    while (v75 < (unint64_t)((uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 4));
  }
  double result = std::string::operator=((std::string *)(a2 + 784), (const std::string *)(a1 + 16));
  *(_DWORD *)(a2 + 1016) = 0;
  *(unsigned char *)(a2 + 1020) = 1;
  return result;
}

void sub_235AD8864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void rf::data_flow::provider::SyntheticARData::appendUpdateProbe(float32x4_t *this, rf::data_flow::provider::InputData *a2, const unsigned __int8 *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (this[15].i64[1] != this[15].i64[0])
  {
    unint64_t v6 = 0;
    unsigned int v7 = 0;
    uint64_t v8 = (uint64_t *)((char *)a2 + 472);
    f32 = (_OWORD *)this[7].f32;
    do
    {
      uint64_t v10 = this[22].i64[1];
      if (v6 >= (this[23].i64[0] - v10) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v11 = (uint64_t *)(v10 + 32 * v6);
      if (*((unsigned char *)v11 + 16)) {
        uint64_t v11 = (uint64_t *)*v11;
      }
      if (!uuid_is_null((const unsigned __int8 *)v11))
      {
        uint64_t v12 = *(void *)(this[15].i64[0] + 16 * v6);
        long long v13 = *(_OWORD *)(v12 + 80);
        long long v35 = *(_OWORD *)(v12 + 64);
        long long v36 = v13;
        long long v37 = *(_OWORD *)(v12 + 96);
        long long v14 = *(_OWORD *)(v12 + 16);
        long long v31 = *(_OWORD *)v12;
        long long v32 = v14;
        long long v15 = *(_OWORD *)(v12 + 48);
        long long v33 = *(_OWORD *)(v12 + 32);
        long long v34 = v15;
        LOBYTE(v3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
        char v39 = 0;
        int v16 = *(unsigned __int8 *)(v12 + 120);
        if (*(unsigned char *)(v12 + 120))
        {
          id v38 = *(id *)(v12 + 112);
          char v39 = 1;
        }
        uint64_t v17 = *(void *)(v12 + 128);
        uint64_t v40 = v17;
        LOBYTE(v42) = 0;
        *((void *)&v42 + 1) = 0;
        uuid_clear(uu);
        uint64_t v18 = 0;
        long long v31 = *(_OWORD *)a3;
        long long v32 = v42;
        float32x4_t v19 = this[3];
        float32x4_t v20 = this[4];
        float32x4_t v21 = this[5];
        float32x4_t v22 = this[6];
        v30[0] = v33;
        v30[1] = v34;
        v30[2] = v35;
        void v30[3] = v36;
        do
        {
          *(float32x4_t *)&uu[v18 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(v30[v18])), v20, *(float32x2_t *)&v30[v18], 1), v21, (float32x4_t)v30[v18], 2), v22, (float32x4_t)v30[v18], 3);
          ++v18;
        }
        while (v18 != 4);
        long long v33 = *(_OWORD *)uu;
        long long v34 = v42;
        long long v35 = v43;
        long long v36 = v44;
        unint64_t v23 = *((void *)a2 + 60);
        if (v23 >= *((void *)a2 + 61))
        {
          uint64_t v28 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>(v8, &v31);
        }
        else
        {
          long long v24 = v36;
          *(_OWORD *)(v23 + 64) = v35;
          *(_OWORD *)(v23 + 80) = v24;
          *(_OWORD *)(v23 + 96) = v37;
          long long v25 = v32;
          *(_OWORD *)unint64_t v23 = v31;
          *(_OWORD *)(v23 + 16) = v25;
          long long v26 = v34;
          *(_OWORD *)(v23 + 32) = v33;
          *(_OWORD *)(v23 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v26;
          *(unsigned char *)(v23 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
          *(unsigned char *)(v23 + 120) = 0;
          if (v16)
          {
            id v27 = v38;
            id v38 = 0;
            *(void *)(v23 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v27;
            *(unsigned char *)(v23 + 120) = 1;
          }
          *(void *)(v23 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v17;
          uint64_t v28 = v23 + 144;
        }
        *((void *)a2 + 60) = v28;
        LOBYTE(v42) = 0;
        *((void *)&v42 + 1) = 0;
        uuid_clear(uu);
        long long v29 = v42;
        _OWORD *f32 = *(_OWORD *)a3;
        f32[1] = v29;
        if (v39) {
      }
        }
      unint64_t v6 = ++v7;
    }
    while (v7 < (unint64_t)((this[15].i64[1] - this[15].i64[0]) >> 4));
  }
}

void sub_235AD8AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,char a32)
{
  if (a32) {

  }
  _Unwind_Resume(exception_object);
}

void rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  if (a2[9].i64[1] != a2[9].i64[0])
  {
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = a2[16].i64[1];
      if (v5 >= (a2[17].i64[0] - v7) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v8 = (uint64_t *)(v7 + 32 * v5);
      if (*((unsigned char *)v8 + 16)) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      if (uuid_is_null((const unsigned __int8 *)v8))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)out, *(const rf::data_flow::provider::InputMesh **)(a2[9].i64[0] + 16 * v5));
        LOBYTE(v127) = 0;
        *((void *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        uint64_t v9 = 0;
        *(_OWORD *)uuid_t out = *(_OWORD *)uu;
        long long v99 = v127;
        float32x4_t v10 = a2[3];
        float32x4_t v11 = a2[4];
        float32x4_t v12 = a2[5];
        float32x4_t v13 = a2[6];
        long long v122 = v100;
        long long v123 = v101;
        long long v124 = v102;
        long long v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(long long *)((char *)&v122 + v9))), v11, *(float32x2_t *)((char *)&v122 + v9), 1), v12, *(float32x4_t *)((char *)&v122 + v9), 2), v13, *(float32x4_t *)((char *)&v122 + v9), 3);
          v9 += 16;
        }
        while (v9 != 64);
        long long v100 = *(_OWORD *)uu;
        long long v101 = v127;
        long long v102 = v128;
        long long v103 = v129;
        uint64_t v14 = a2[16].i64[1];
        if (v5 >= (a2[17].i64[0] - v14) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        long long v15 = v99;
        int v16 = (_OWORD *)(v14 + 32 * v5);
        *int v16 = *(_OWORD *)out;
        v16[1] = v15;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)a3, (long long *)out);
        if (v121) {

        }
        if (v119) {
        if (v117)
        }

        if (v114) {
        if (v112)
        }

        if (v110) {
        if (v108)
        }
      }
      unint64_t v5 = ++v6;
    }
    while (v6 < (unint64_t)((a2[9].i64[1] - a2[9].i64[0]) >> 4));
  }
  if (a2[11].i64[0] != a2[10].i64[1])
  {
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      uint64_t v19 = a2[18].i64[0];
      if (v17 >= (a2[18].i64[1] - v19) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      float32x4_t v20 = (uint64_t *)(v19 + 32 * v17);
      if (*((unsigned char *)v20 + 16)) {
        float32x4_t v20 = (uint64_t *)*v20;
      }
      if (uuid_is_null((const unsigned __int8 *)v20))
      {
        rf::data_flow::provider::InputMesh::InputMesh((rf::data_flow::provider::InputMesh *)out, *(const rf::data_flow::provider::InputMesh **)(a2[10].i64[1] + 16 * v17));
        LOBYTE(v127) = 0;
        *((void *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        uint64_t v21 = 0;
        *(_OWORD *)uuid_t out = *(_OWORD *)uu;
        long long v99 = v127;
        float32x4_t v22 = a2[3];
        float32x4_t v23 = a2[4];
        float32x4_t v24 = a2[5];
        float32x4_t v25 = a2[6];
        long long v122 = v100;
        long long v123 = v101;
        long long v124 = v102;
        long long v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v21] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(long long *)((char *)&v122 + v21))), v23, *(float32x2_t *)((char *)&v122 + v21), 1), v24, *(float32x4_t *)((char *)&v122 + v21), 2), v25, *(float32x4_t *)((char *)&v122 + v21), 3);
          v21 += 16;
        }
        while (v21 != 64);
        long long v100 = *(_OWORD *)uu;
        long long v101 = v127;
        long long v102 = v128;
        long long v103 = v129;
        uint64_t v26 = a2[18].i64[0];
        if (v17 >= (a2[18].i64[1] - v26) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        long long v27 = v99;
        uint64_t v28 = (_OWORD *)(v26 + 32 * v17);
        *uint64_t v28 = *(_OWORD *)out;
        v28[1] = v27;
        std::vector<rf::data_flow::provider::InputMesh>::push_back[abi:ne180100]((uint64_t *)(a3 + 616), (long long *)out);
        if (v121) {

        }
        if (v119) {
        if (v117)
        }

        if (v114) {
        if (v112)
        }

        if (v110) {
        if (v108)
        }
      }
      unint64_t v17 = ++v18;
    }
    while (v18 < (unint64_t)((a2[11].i64[0] - a2[10].i64[1]) >> 4));
  }
  LODWORD(v96) = 0;
  if (a2[12].i64[1] != a2[12].i64[0])
  {
    unint64_t v29 = 0;
    do
    {
      uint64_t v30 = a2[19].i64[1];
      if (v29 >= (a2[20].i64[0] - v30) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      long long v31 = (uint64_t *)(v30 + 32 * v29);
      if (*((unsigned char *)v31 + 16)) {
        long long v31 = (uint64_t *)*v31;
      }
      if (uuid_is_null((const unsigned __int8 *)v31))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)out, *(void *)(a2[12].i64[0] + 16 * v96));
        *(void *)uuid_t uu = a2;
        *(void *)&uu[8] = &v96;
        *(void *)&long long v127 = a3;
        if (v116 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        *(void *)&long long v122 = uu;
        ((void (*)(long long *, unsigned __int8 *))off_26E8F62B8[v116])(&v122, out);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)out);
      }
      LODWORD(v96) = v96 + 1;
      unint64_t v29 = v96;
    }
    while (v96 < (unint64_t)((a2[12].i64[1] - a2[12].i64[0]) >> 4));
  }
  if (a2[14].i64[0] != a2[13].i64[1])
  {
    unint64_t v32 = 0;
    unsigned int v33 = 0;
    do
    {
      uint64_t v34 = a2[21].i64[0];
      if (v32 >= (a2[21].i64[1] - v34) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      long long v35 = (uint64_t *)(v34 + 32 * v32);
      if (*((unsigned char *)v35 + 16)) {
        long long v35 = (uint64_t *)*v35;
      }
      if (uuid_is_null((const unsigned __int8 *)v35))
      {
        long long v36 = *(_OWORD **)(a2[13].i64[1] + 16 * v32);
        long long v92 = v36[3];
        long long v94 = v36[2];
        long long v88 = v36[5];
        long long v90 = v36[4];
        long long v37 = v36[7];
        long long v96 = v36[6];
        long long v97 = v37;
        LOBYTE(v99) = 0;
        *((void *)&v99 + 1) = 0;
        uuid_clear(out);
        uuid_generate_random(out);
        uint64_t v38 = 0;
        long long v122 = *(_OWORD *)out;
        long long v123 = v99;
        float32x4_t v39 = a2[3];
        float32x4_t v40 = a2[4];
        float32x4_t v41 = a2[5];
        float32x4_t v42 = a2[6];
        *(_OWORD *)uuid_t uu = v94;
        long long v127 = v92;
        long long v128 = v90;
        long long v129 = v88;
        do
        {
          *(float32x4_t *)&out[v38] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&uu[v38])), v40, *(float32x2_t *)&uu[v38], 1), v41, *(float32x4_t *)&uu[v38], 2), v42, *(float32x4_t *)&uu[v38], 3);
          v38 += 16;
        }
        while (v38 != 64);
        uint64_t v43 = a2[21].i64[0];
        if (v32 >= (a2[21].i64[1] - v43) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        long long v45 = *(_OWORD *)out;
        long long v44 = v99;
        long long v46 = v100;
        long long v47 = v101;
        long long v48 = (_OWORD *)(v43 + 32 * v32);
        *long long v48 = v122;
        v48[1] = v123;
        unint64_t v49 = *(_OWORD **)(a3 + 552);
        unint64_t v50 = *(void *)(a3 + 560);
        if ((unint64_t)v49 >= v50)
        {
          long long v89 = v45;
          long long v91 = v44;
          long long v93 = v46;
          long long v95 = v47;
          uint64_t v54 = *(void *)(a3 + 544);
          uint64_t v55 = ((uint64_t)v49 - v54) >> 7;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 57) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v57 = v50 - v54;
          if (v57 >> 6 > v56) {
            unint64_t v56 = v57 >> 6;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58) {
            unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(v58);
          }
          else {
            uint64_t v59 = 0;
          }
          unint64_t v60 = (_OWORD *)(v58 + (v55 << 7));
          *unint64_t v60 = v122;
          v60[1] = v123;
          v60[2] = v89;
          void v60[3] = v91;
          v60[4] = v93;
          v60[5] = v95;
          v60[6] = v96;
          v60[7] = v97;
          long long v61 = *(char **)(a3 + 552);
          uint64_t v62 = *(char **)(a3 + 544);
          uint64_t v63 = v60;
          if (v61 != v62)
          {
            do
            {
              long long v64 = *((_OWORD *)v61 - 8);
              long long v65 = *((_OWORD *)v61 - 7);
              long long v66 = *((_OWORD *)v61 - 5);
              *(v63 - 6) = *((_OWORD *)v61 - 6);
              *(v63 - 5) = v66;
              *(v63 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v64;
              *(v63 - 7) = v65;
              long long v67 = *((_OWORD *)v61 - 4);
              long long v68 = *((_OWORD *)v61 - 3);
              long long v69 = *((_OWORD *)v61 - 2);
              *((void *)v63 - 2) = *((void *)v61 - 2);
              *(v63 - 3) = v68;
              *(v63 - 2) = v69;
              *(v63 - 4) = v67;
              v63 -= 8;
              v61 -= 128;
            }
            while (v61 != v62);
            long long v61 = *(char **)(a3 + 544);
          }
          *(void *)(a3 + 544) = v63;
          unsigned int v53 = v60 + 8;
          *(void *)(a3 + 552) = v60 + 8;
          *(void *)(a3 + 560) = v58 + (v59 << 7);
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *unint64_t v49 = v122;
          v49[1] = v123;
          v49[2] = v45;
          v49[3] = v44;
          void v49[4] = v46;
          long long v51 = v96;
          long long v52 = v97;
          v49[5] = v47;
          v49[6] = v51;
          v49[7] = v52;
          unsigned int v53 = v49 + 8;
        }
        *(void *)(a3 + 552) = v53;
      }
      unint64_t v32 = ++v33;
    }
    while (v33 < (unint64_t)((a2[14].i64[0] - a2[13].i64[1]) >> 4));
  }
  if (a2[15].i64[1] != a2[15].i64[0])
  {
    unint64_t v70 = 0;
    unsigned int v71 = 0;
    do
    {
      uint64_t v72 = a2[22].i64[1];
      if (v70 >= (a2[23].i64[0] - v72) >> 5) {
        std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
      }
      long long v73 = (uint64_t *)(v72 + 32 * v70);
      if (*((unsigned char *)v73 + 16)) {
        long long v73 = (uint64_t *)*v73;
      }
      if (uuid_is_null((const unsigned __int8 *)v73))
      {
        uint64_t v74 = *(void *)(a2[15].i64[0] + 16 * v70);
        long long v101 = *(_OWORD *)(v74 + 48);
        long long v102 = *(_OWORD *)(v74 + 64);
        long long v103 = *(_OWORD *)(v74 + 80);
        long long v104 = *(_OWORD *)(v74 + 96);
        *(_OWORD *)uuid_t out = *(_OWORD *)v74;
        long long v99 = *(_OWORD *)(v74 + 16);
        long long v100 = *(_OWORD *)(v74 + 32);
        LOBYTE(v105) = 0;
        unsigned __int8 v106 = 0;
        int v75 = *(unsigned __int8 *)(v74 + 120);
        if (*(unsigned char *)(v74 + 120))
        {
          id v105 = *(id *)(v74 + 112);
          int v76 = 1;
          unsigned __int8 v106 = 1;
        }
        else
        {
          int v76 = 0;
        }
        uint64_t v77 = *(void *)(v74 + 128);
        uint64_t v107 = v77;
        LOBYTE(v127) = 0;
        *((void *)&v127 + 1) = 0;
        uuid_clear(uu);
        uuid_generate_random(uu);
        uint64_t v78 = 0;
        *(_OWORD *)uuid_t out = *(_OWORD *)uu;
        long long v99 = v127;
        float32x4_t v79 = a2[3];
        float32x4_t v80 = a2[4];
        float32x4_t v81 = a2[5];
        float32x4_t v82 = a2[6];
        long long v122 = v100;
        long long v123 = v101;
        long long v124 = v102;
        long long v125 = v103;
        do
        {
          *(float32x4_t *)&uu[v78] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v79, COERCE_FLOAT(*(long long *)((char *)&v122 + v78))), v80, *(float32x2_t *)((char *)&v122 + v78), 1), v81, *(float32x4_t *)((char *)&v122 + v78), 2), v82, *(float32x4_t *)((char *)&v122 + v78), 3);
          v78 += 16;
        }
        while (v78 != 64);
        long long v100 = *(_OWORD *)uu;
        long long v101 = v127;
        long long v102 = v128;
        long long v103 = v129;
        uint64_t v83 = a2[22].i64[1];
        if (v70 >= (a2[23].i64[0] - v83) >> 5) {
          std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
        }
        float32x4_t v84 = (_OWORD *)(v83 + 32 * v70);
        *float32x4_t v84 = *(_OWORD *)out;
        v84[1] = v99;
        unint64_t v85 = *(void *)(a3 + 480);
        if (v85 >= *(void *)(a3 + 488))
        {
          uint64_t v87 = std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>((uint64_t *)(a3 + 472), (long long *)out);
          int v76 = v106;
        }
        else
        {
          *(_OWORD *)(v85 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v101;
          *(_OWORD *)(v85 + 64) = v102;
          *(_OWORD *)(v85 + 80) = v103;
          *(_OWORD *)(v85 + 96) = v104;
          *(_OWORD *)unint64_t v85 = *(_OWORD *)out;
          *(_OWORD *)(v85 + 16) = v99;
          *(_OWORD *)(v85 + 32) = v100;
          *(unsigned char *)(v85 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
          *(unsigned char *)(v85 + 120) = 0;
          if (v75)
          {
            id v86 = v105;
            id v105 = 0;
            *(void *)(v85 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v86;
            *(unsigned char *)(v85 + 120) = 1;
          }
          *(void *)(v85 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v77;
          uint64_t v87 = v85 + 144;
        }
        *(void *)(a3 + 480) = v87;
        if (v76) {
      }
        }
      unint64_t v70 = ++v71;
    }
    while (v71 < (unint64_t)((a2[15].i64[1] - a2[15].i64[0]) >> 4));
  }
  *(_DWORD *)(a3 + 1016) = a2[24].i32[1];
  *(unsigned char *)(a3 + 1020) = 1;
}

void sub_235AD93D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,char a36)
{
  if (a36) {

  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<rf::data_flow::provider::InputMesh>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<rf::data_flow::EnvironmentProbe>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<rf::data_flow::RFUUID>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<rf::data_flow::RFUUID>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    uint64_t v6 = 32 * a2;
    do
    {
      *(unsigned char *)(v4 + 16) = 0;
      *(void *)(v4 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
      uuid_clear((unsigned __int8 *)v4);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_235AD94EC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]()
{
}

rf::data_flow::provider::InputMesh *rf::data_flow::provider::InputMesh::InputMesh(rf::data_flow::provider::InputMesh *this, const rf::data_flow::provider::InputMesh *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v8;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((unsigned char *)this + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *((unsigned char *)this + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    *((void *)this + 14) = *((id *)a2 + 14);
    *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
    *((unsigned char *)this + 136) = 1;
  }
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    *((void *)this + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *((id *)a2 + 18);
    *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
    *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 1;
  }
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 200) = 0;
  if (*((unsigned char *)a2 + 200))
  {
    *((void *)this + 22) = *((id *)a2 + 22);
    *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)a2 + 184);
    *((unsigned char *)this + 200) = 1;
  }
  *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
  *((unsigned char *)this + 232) = 0;
  if (*((unsigned char *)a2 + 232))
  {
    *((void *)this + 26) = *((id *)a2 + 26);
    *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
    *((unsigned char *)this + 232) = 1;
  }
  *((unsigned char *)this + 240) = 0;
  *((unsigned char *)this + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    *((void *)this + 30) = *((id *)a2 + 30);
    *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 248) = *(_OWORD *)((char *)a2 + 248);
    *((unsigned char *)this + 264) = 1;
  }
  *((unsigned char *)this + 272) = 0;
  *((unsigned char *)this + 296) = 0;
  if (*((unsigned char *)a2 + 296))
  {
    *((void *)this + 34) = *((id *)a2 + 34);
    *(_OWORD *)((char *)this + 280) = *(_OWORD *)((char *)a2 + 280);
    *((unsigned char *)this + 296) = 1;
  }
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    *((void *)this + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *((id *)a2 + 38);
    *(_OWORD *)((char *)this + 3std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = *(_OWORD *)((char *)a2 + 312);
    *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 1;
  }
  return this;
}

uint64_t std::__split_buffer<rf::data_flow::provider::InputMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 336;
    rf::data_flow::provider::InputMesh::~InputMesh((id *)(i - 336));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  long long v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v24[0] = a2[2];
  v24[1] = v13;
  void v24[2] = v14;
  void v24[3] = v15;
  do
  {
    *(long long *)((char *)&v25 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v24[v6])), v10, *(float32x2_t *)&v24[v6], 1), v11, (float32x4_t)v24[v6], 2), v12, (float32x4_t)v24[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v26;
  long long v17 = v27;
  long long v18 = v28;
  a2[2] = v25;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  *((_DWORD *)a2 + 25) = 2;
  uint64_t v19 = (uint64_t *)&v2[2][6];
  long long v20 = a2[5];
  long long v29 = a2[4];
  v30[0] = v20;
  *(_OWORD *)((char *)v30 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v25 = *a2;
  long long v26 = v21;
  long long v22 = a2[3];
  long long v27 = a2[2];
  long long v28 = v22;
  id v31 = *((id *)a2 + 14);
  int v32 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v25);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v25);
}

void sub_235AD9838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  long long v7 = (_OWORD *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  void v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v22[1];
  long long v17 = v22[2];
  long long v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  uint64_t v19 = v2[2];
  std::__variant_detail::__alt<1ul,rf::data_flow::PlaneAnchor>::__alt[abi:ne180100]<rf::data_flow::PlaneAnchor&>((uint64_t)v22, (long long *)a2);
  int v23 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_235AD9950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  long long v7 = (_OWORD *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  void v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v22[1];
  long long v17 = v22[2];
  long long v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  uint64_t v19 = v2[2];
  std::__variant_detail::__alt<2ul,rf::data_flow::ImageAnchor>::__alt[abi:ne180100]<rf::data_flow::ImageAnchor&>((uint64_t)v22, (long long *)a2);
  int v23 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_235AD9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  long long v7 = (_OWORD *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *(_OWORD *)a2 = *v7;
  *(_OWORD *)(a2 + 16) = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 80);
  v21[0] = *(_OWORD *)(a2 + 32);
  v21[1] = v13;
  void v21[2] = v14;
  v21[3] = v15;
  do
  {
    v22[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v21[v6])), v10, *(float32x2_t *)&v21[v6], 1), v11, (float32x4_t)v21[v6], 2), v12, (float32x4_t)v21[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v22[1];
  long long v17 = v22[2];
  long long v18 = v22[3];
  *(_OWORD *)(a2 + 32) = v22[0];
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = v18;
  *(_DWORD *)(a2 + 100) = 2;
  uint64_t v19 = v2[2];
  std::__variant_detail::__alt<3ul,rf::data_flow::ObjectAnchor>::__alt[abi:ne180100]<rf::data_flow::ObjectAnchor&>((uint64_t)v22, (long long *)a2);
  int v23 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100]((uint64_t *)&v19[6], (uint64_t)v22);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v22);
}

void sub_235AD9B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = 0;
  long long v8 = (long long *)(v5 + 32 * v4);
  long long v9 = v8[1];
  *a2 = *v8;
  a2[1] = v9;
  float32x4_t v10 = v3[3];
  float32x4_t v11 = v3[4];
  float32x4_t v12 = v3[5];
  float32x4_t v13 = v3[6];
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[5];
  v29[0] = a2[2];
  v29[1] = v14;
  v29[2] = v15;
  v29[3] = v16;
  do
  {
    *(long long *)((char *)&v30 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(v29[v7])), v11, *(float32x2_t *)&v29[v7], 1), v12, (float32x4_t)v29[v7], 2), v13, (float32x4_t)v29[v7], 3);
    ++v7;
  }
  while (v7 != 4);
  long long v17 = v31;
  long long v18 = v32;
  long long v19 = v33;
  a2[2] = v30;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  *((_DWORD *)a2 + 25) = 2;
  long long v20 = (uint64_t *)&v2[2][6];
  long long v21 = a2[5];
  long long v34 = a2[4];
  v35[0] = v21;
  *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)a2 + 89);
  long long v22 = a2[1];
  long long v30 = *a2;
  long long v31 = v22;
  long long v23 = a2[3];
  long long v32 = a2[2];
  long long v33 = v23;
  id v36 = *((id *)a2 + 14);
  long long v24 = a2[13];
  long long v41 = a2[12];
  long long v42 = v24;
  long long v25 = a2[15];
  long long v43 = a2[14];
  long long v44 = v25;
  long long v26 = a2[9];
  long long v37 = a2[8];
  long long v38 = v26;
  long long v27 = a2[11];
  long long v39 = a2[10];
  long long v40 = v27;
  int v45 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v20, (uint64_t)&v30);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
}

void sub_235AD9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendUpdatedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = 0;
  long long v8 = (long long *)(v5 + 32 * v4);
  long long v9 = v8[1];
  *a2 = *v8;
  a2[1] = v9;
  float32x4_t v10 = v3[3];
  float32x4_t v11 = v3[4];
  float32x4_t v12 = v3[5];
  float32x4_t v13 = v3[6];
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[5];
  v25[0] = a2[2];
  v25[1] = v14;
  void v25[2] = v15;
  void v25[3] = v16;
  do
  {
    *(long long *)((char *)&v26 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(v25[v7])), v11, *(float32x2_t *)&v25[v7], 1), v12, (float32x4_t)v25[v7], 2), v13, (float32x4_t)v25[v7], 3);
    ++v7;
  }
  while (v7 != 4);
  long long v17 = v27;
  long long v18 = v28;
  long long v19 = v29;
  a2[2] = v26;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  *((_DWORD *)a2 + 25) = 2;
  long long v20 = (uint64_t *)&v2[2][6];
  long long v21 = a2[5];
  long long v30 = a2[4];
  v31[0] = v21;
  *(_OWORD *)((char *)v31 + 9) = *(long long *)((char *)a2 + 89);
  long long v22 = a2[1];
  long long v26 = *a2;
  long long v27 = v22;
  long long v23 = a2[3];
  long long v28 = a2[2];
  long long v29 = v23;
  id v32 = *((id *)a2 + 14);
  int v33 = *((_DWORD *)a2 + 32);
  int v34 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v20, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_235AD9E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::SceneObject>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 7);
}

uint64_t std::vector<rf::data_flow::EnvironmentProbe>::__push_back_slow_path<rf::data_flow::EnvironmentProbe>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  v20[4] = a1 + 2;
  if (v9) {
    float32x4_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>(v7, v9);
  }
  else {
    float32x4_t v10 = 0;
  }
  float32x4_t v11 = (char *)&v10[18 * v4];
  v20[0] = v10;
  v20[1] = v11;
  void v20[3] = &v10[18 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[6];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = v16;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *(_OWORD *)float32x4_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  v11[112] = 0;
  v11[120] = 0;
  if (*((unsigned char *)a2 + 120))
  {
    uint64_t v17 = *((void *)a2 + 14);
    *((void *)a2 + 14) = 0;
    *((void *)v11 + 14) = v17;
    v11[120] = 1;
  }
  v10[18 * v4 + 16] = *((void *)a2 + 16);
  _OWORD v20[2] = v11 + 144;
  std::vector<rf::data_flow::EnvironmentProbe>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_235ADA000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<rf::data_flow::EnvironmentProbe>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  void v25[2] = v14;
  void v25[3] = v15;
  do
  {
    *(long long *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v27;
  long long v17 = v28;
  long long v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v26 = *a2;
  long long v27 = v21;
  long long v22 = a2[3];
  long long v28 = a2[2];
  long long v29 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v32 = v23;
  int v33 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_235ADA130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v30[0] = a2[2];
  v30[1] = v13;
  _OWORD v30[2] = v14;
  void v30[3] = v15;
  do
  {
    *(long long *)((char *)&v31 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v30[v6])), v10, *(float32x2_t *)&v30[v6], 1), v11, (float32x4_t)v30[v6], 2), v12, (float32x4_t)v30[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v32;
  long long v17 = v33;
  long long v18 = v34;
  a2[2] = v31;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v35 = a2[4];
  v36[0] = v20;
  *(_OWORD *)((char *)v36 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v31 = *a2;
  long long v32 = v21;
  long long v22 = a2[3];
  long long v33 = a2[2];
  long long v34 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v37 = v23;
  long long v24 = a2[9];
  long long v38 = a2[8];
  long long v39 = v24;
  long long v25 = a2[10];
  long long v26 = a2[12];
  uint64_t v27 = *((void *)a2 + 26);
  long long v41 = a2[11];
  long long v42 = v26;
  long long v40 = v25;
  long long v44 = *(long long *)((char *)a2 + 216);
  uint64_t v28 = *((void *)a2 + 29);
  uint64_t v43 = v27;
  uint64_t v45 = v28;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 2std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)a2 + 29) = 0;
  int v46 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v31);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v31);
}

void sub_235ADA29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  void v25[2] = v14;
  void v25[3] = v15;
  do
  {
    *(long long *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v27;
  long long v17 = v28;
  long long v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v26 = *a2;
  long long v27 = v21;
  long long v22 = a2[3];
  long long v28 = a2[2];
  long long v29 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v32 = v23;
  char v33 = *((unsigned char *)a2 + 128);
  long long v34 = *(long long *)((char *)a2 + 136);
  uint64_t v35 = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  long long v36 = a2[10];
  uint64_t v37 = *((void *)a2 + 22);
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  long long v38 = a2[12];
  int v39 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_235ADA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v29[0] = a2[2];
  v29[1] = v13;
  v29[2] = v14;
  v29[3] = v15;
  do
  {
    *(long long *)((char *)&v30 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v29[v6])), v10, *(float32x2_t *)&v29[v6], 1), v11, (float32x4_t)v29[v6], 2), v12, (float32x4_t)v29[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v31;
  long long v17 = v32;
  long long v18 = v33;
  a2[2] = v30;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v34 = a2[4];
  v35[0] = v20;
  *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v30 = *a2;
  long long v31 = v21;
  long long v22 = a2[3];
  long long v32 = a2[2];
  long long v33 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v36 = v23;
  uint64_t v24 = *((void *)a2 + 18);
  long long v37 = a2[8];
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v25 = *((void *)a2 + 21);
  uint64_t v38 = v24;
  uint64_t v40 = v25;
  long long v39 = *(long long *)((char *)a2 + 152);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)a2 + 19) = 0;
  long long v26 = a2[12];
  long long v41 = a2[11];
  long long v42 = v26;
  long long v27 = a2[14];
  long long v43 = a2[13];
  long long v44 = v27;
  int v45 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v30);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
}

void sub_235ADA57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v31[0] = a2[2];
  v31[1] = v13;
  _OWORD v31[2] = v14;
  v31[3] = v15;
  do
  {
    *(long long *)((char *)&v32 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v31[v6])), v10, *(float32x2_t *)&v31[v6], 1), v11, (float32x4_t)v31[v6], 2), v12, (float32x4_t)v31[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v33;
  long long v17 = v34;
  long long v18 = v35;
  a2[2] = v32;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v36 = a2[4];
  v37[0] = v20;
  *(_OWORD *)((char *)v37 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v32 = *a2;
  long long v33 = v21;
  long long v22 = a2[3];
  long long v34 = a2[2];
  long long v35 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v38 = v23;
  long long v24 = a2[8];
  long long v25 = a2[9];
  long long v26 = a2[11];
  long long v41 = a2[10];
  long long v42 = v26;
  long long v39 = v24;
  long long v40 = v25;
  long long v27 = a2[12];
  long long v28 = a2[13];
  long long v29 = a2[15];
  long long v45 = a2[14];
  long long v46 = v29;
  long long v43 = v27;
  long long v44 = v28;
  int v47 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v32);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v32);
}

void sub_235ADA6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::appendRemovedData(rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, long long *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1]->u32[0];
  uint64_t v5 = v3[19].i64[1];
  if (v4 >= (v3[20].i64[0] - v5) >> 5) {
    std::vector<rf::data_flow::RFUUID>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (long long *)(v5 + 32 * v4);
  long long v8 = v7[1];
  *a2 = *v7;
  a2[1] = v8;
  float32x4_t v9 = v3[3];
  float32x4_t v10 = v3[4];
  float32x4_t v11 = v3[5];
  float32x4_t v12 = v3[6];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  v25[0] = a2[2];
  v25[1] = v13;
  void v25[2] = v14;
  void v25[3] = v15;
  do
  {
    *(long long *)((char *)&v26 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v25[v6])), v10, *(float32x2_t *)&v25[v6], 1), v11, (float32x4_t)v25[v6], 2), v12, (float32x4_t)v25[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  long long v16 = v27;
  long long v17 = v28;
  long long v18 = v29;
  a2[2] = v26;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v18;
  long long v19 = &v2[2][7].i64[1];
  long long v20 = a2[5];
  long long v30 = a2[4];
  v31[0] = v20;
  *(_OWORD *)((char *)v31 + 9) = *(long long *)((char *)a2 + 89);
  long long v21 = a2[1];
  long long v26 = *a2;
  long long v27 = v21;
  long long v22 = a2[3];
  long long v28 = a2[2];
  long long v29 = v22;
  uint64_t v23 = *((void *)a2 + 14);
  *((void *)a2 + 14) = 0;
  uint64_t v32 = v23;
  int v33 = *((_DWORD *)a2 + 32);
  int v34 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v19, (uint64_t)&v26);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26);
}

void sub_235ADA80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v26) = 0;
  *((void *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  void v24[2] = v11;
  void v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v26;
  long long v14 = v27;
  long long v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v26 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 32);
  long long v28 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v31 = v22;
  int v32 = 0;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADA95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v31) = 0;
  *((void *)&v31 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v31;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v29[0] = *(_OWORD *)(a2 + 32);
  v29[1] = v10;
  v29[2] = v11;
  v29[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v29[v4])), v7, *(float32x2_t *)&v29[v4], 1), v8, (float32x4_t)v29[v4], 2), v9, (float32x4_t)v29[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v31;
  long long v14 = v32;
  long long v15 = v33;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v34 = *(_OWORD *)(a2 + 64);
  v35[0] = v19;
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v31 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v32 = *(_OWORD *)(a2 + 32);
  long long v33 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v36 = v22;
  long long v23 = *(_OWORD *)(a2 + 144);
  long long v37 = *(_OWORD *)(a2 + 128);
  long long v38 = v23;
  long long v24 = *(_OWORD *)(a2 + 160);
  long long v25 = *(_OWORD *)(a2 + 192);
  uint64_t v26 = *(void *)(a2 + 208);
  long long v40 = *(_OWORD *)(a2 + 176);
  long long v41 = v25;
  long long v39 = v24;
  long long v43 = *(_OWORD *)(a2 + 216);
  uint64_t v27 = *(void *)(a2 + 232);
  uint64_t v42 = v26;
  uint64_t v44 = v27;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 2std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  *(void *)(a2 + 232) = 0;
  int v45 = 1;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADAAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v26) = 0;
  *((void *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  void v24[2] = v11;
  void v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v26;
  long long v14 = v27;
  long long v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v26 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 32);
  long long v28 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v31 = v22;
  char v32 = *(unsigned char *)(a2 + 128);
  long long v33 = *(_OWORD *)(a2 + 136);
  uint64_t v34 = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  long long v35 = *(_OWORD *)(a2 + 160);
  uint64_t v36 = *(void *)(a2 + 176);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0;
  *(void *)(a2 + 176) = 0;
  long long v37 = *(_OWORD *)(a2 + 192);
  int v38 = 2;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADAC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v30) = 0;
  *((void *)&v30 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v30;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v28[0] = *(_OWORD *)(a2 + 32);
  v28[1] = v10;
  _OWORD v28[2] = v11;
  void v28[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v28[v4])), v7, *(float32x2_t *)&v28[v4], 1), v8, (float32x4_t)v28[v4], 2), v9, (float32x4_t)v28[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v30;
  long long v14 = v31;
  long long v15 = v32;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v33 = *(_OWORD *)(a2 + 64);
  v34[0] = v19;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v30 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v31 = *(_OWORD *)(a2 + 32);
  long long v32 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v35 = v22;
  uint64_t v23 = *(void *)(a2 + 144);
  long long v36 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v24 = *(void *)(a2 + 168);
  uint64_t v37 = v23;
  uint64_t v39 = v24;
  long long v38 = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  long long v25 = *(_OWORD *)(a2 + 192);
  long long v40 = *(_OWORD *)(a2 + 176);
  long long v41 = v25;
  long long v26 = *(_OWORD *)(a2 + 224);
  long long v42 = *(_OWORD *)(a2 + 208);
  long long v43 = v26;
  int v44 = 3;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADAE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v32) = 0;
  *((void *)&v32 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v32;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v30[0] = *(_OWORD *)(a2 + 32);
  v30[1] = v10;
  _OWORD v30[2] = v11;
  void v30[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v30[v4])), v7, *(float32x2_t *)&v30[v4], 1), v8, (float32x4_t)v30[v4], 2), v9, (float32x4_t)v30[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v32;
  long long v14 = v33;
  long long v15 = v34;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v35 = *(_OWORD *)(a2 + 64);
  v36[0] = v19;
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v32 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v33 = *(_OWORD *)(a2 + 32);
  long long v34 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v37 = v22;
  long long v23 = *(_OWORD *)(a2 + 128);
  long long v24 = *(_OWORD *)(a2 + 144);
  long long v25 = *(_OWORD *)(a2 + 176);
  long long v40 = *(_OWORD *)(a2 + 160);
  long long v41 = v25;
  long long v38 = v23;
  long long v39 = v24;
  long long v26 = *(_OWORD *)(a2 + 192);
  long long v27 = *(_OWORD *)(a2 + 208);
  long long v28 = *(_OWORD *)(a2 + 240);
  long long v44 = *(_OWORD *)(a2 + 224);
  long long v45 = v28;
  long long v42 = v26;
  long long v43 = v27;
  int v46 = 4;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADAFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<rf::data_flow::provider::SyntheticARData::sampleDataAllAtOnce(rf::data_flow::provider::InputFrame const&,rf::data_flow::provider::SyntheticARData&,rf::data_flow::provider::InputData &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> &>(float32x4_t ***a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LOBYTE(v26) = 0;
  *((void *)&v26 + 1) = 0;
  uuid_clear(uu);
  uuid_generate_random(uu);
  uint64_t v4 = 0;
  long long v5 = v26;
  *(_OWORD *)a2 = *(_OWORD *)uu;
  *(_OWORD *)(a2 + 16) = v5;
  float32x4_t v6 = (*v3)[3];
  float32x4_t v7 = (*v3)[4];
  float32x4_t v8 = (*v3)[5];
  float32x4_t v9 = (*v3)[6];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 32);
  v24[1] = v10;
  void v24[2] = v11;
  void v24[3] = v12;
  do
  {
    *(float32x4_t *)&uu[v4 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v24[v4])), v7, *(float32x2_t *)&v24[v4], 1), v8, (float32x4_t)v24[v4], 2), v9, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  long long v13 = v26;
  long long v14 = v27;
  long long v15 = v28;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)uu;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  long long v16 = (_OWORD *)((*v3)[19].i64[1] + 32 * v3[1]->u32[0]);
  long long v17 = *(_OWORD *)(a2 + 16);
  *long long v16 = *(_OWORD *)a2;
  v16[1] = v17;
  long long v18 = &v3[2][4].i64[1];
  long long v19 = *(_OWORD *)(a2 + 80);
  long long v29 = *(_OWORD *)(a2 + 64);
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 89);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uuid_t uu = *(_OWORD *)a2;
  long long v26 = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 32);
  long long v28 = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  uint64_t v31 = v22;
  int v32 = *(_DWORD *)(a2 + 128);
  int v33 = 5;
  std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::push_back[abi:ne180100](v18, (uint64_t)uu);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)uu);
}

void sub_235ADB10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void rf::helpers::createInputMeshFromARMeshAnchor(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v50 = a1;
  long long v5 = [v50 geometry];
  float32x4_t v6 = [v5 normals];
  if ([v6 count] <= 0)
  {
    rf::getMessage((rf *)"ARMeshAnchor must always provide normals!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v32);
    uint64_t v53 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    rf::getMessage((rf *)"ARMeshAnchor must always provide normals!", v51);
    if (v52 >= 0) {
      int v33 = v51;
    }
    else {
      int v33 = (void **)v51[0];
    }
    int v56 = 136315138;
    uint64_t v57 = v33;
    _os_log_send_and_compose_impl();
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    _os_crash_msg();
    __break(1u);
  }

  [v50 transform];
  long long v46 = v8;
  long long v48 = v7;
  long long v42 = v10;
  long long v44 = v9;
  long long v41 = [v50 identifier];
  rf::data_flow::RFUUID::copy(v41, a3);
  *(_OWORD *)(a3 + 32) = v48;
  *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v46;
  *(_OWORD *)(a3 + 64) = v44;
  *(_OWORD *)(a3 + 80) = v42;
  *(unsigned char *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 100) = a2;
  [v50 lastUpdateTimestamp];
  *(void *)(a3 + 104) = v11;
  unint64_t v49 = [v50 geometry];
  uint64_t v47 = [v49 vertices];
  uint64_t v12 = [v47 buffer];
  long long v45 = [v50 geometry];
  long long v43 = [v45 vertices];
  uint64_t v13 = [v43 format];
  long long v40 = [v50 geometry];
  long long v39 = [v40 vertices];
  uint64_t v14 = [v39 count];
  *(void *)(a3 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v12;
  *(void *)(a3 + 120) = v13;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v14;
  *(unsigned char *)(a3 + 136) = 1;
  long long v38 = [v50 geometry];
  uint64_t v37 = [v38 normals];
  uint64_t v15 = [v37 buffer];
  long long v36 = [v50 geometry];
  long long v35 = [v36 normals];
  uint64_t v16 = [v35 format];
  uint64_t v34 = [v50 geometry];
  long long v17 = [v34 normals];
  uint64_t v18 = [v17 count];
  *(void *)(a3 + 144) = v15;
  *(void *)(a3 + 152) = v16;
  *(void *)(a3 + 160) = v18;
  *(unsigned char *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = 1;
  long long v19 = [v50 geometry];
  long long v20 = [v19 faces];
  uint64_t v21 = [v20 buffer];
  uint64_t v22 = [v50 geometry];
  long long v23 = [v22 faces];
  uint64_t v24 = [v23 count];
  *(void *)(a3 + 176) = v21;
  *(void *)(a3 + 184) = 36;
  *(void *)(a3 + 192) = 3 * v24;
  *(unsigned char *)(a3 + 200) = 1;
  long long v25 = [v50 geometry];
  id v26 = [v25 classification];
  long long v27 = [v26 buffer];

  if (v27)
  {
    uint64_t v28 = [v26 buffer];
    uint64_t v29 = [v26 format];
    uint64_t v30 = [v26 count];
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = v28;
    *(void *)(a3 + 216) = v29;
    char v31 = 1;
    *(void *)(a3 + 2std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = v30;
  }
  else
  {
    char v31 = 0;
    *(unsigned char *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
  }
  *(unsigned char *)(a3 + 232) = v31;

  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 304) = 0;
  *(unsigned char *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,MDLMesh * {__strong}>>>::~__hash_table((uint64_t)this + 328) = 0;
}

void sub_235ADB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(unsigned char *)(v38 + 200)) {
  if (*(unsigned char *)(v38 + 168))
  }

  if (*(unsigned char *)(v38 + 136)) {
  _Unwind_Resume(a1);
  }
}

void rf::helpers::getBaseAnchorPropertiesFromARAnchor(rf::helpers *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  uuid_clear((unsigned __int8 *)a2);
  *(_OWORD *)(a2 + 32) = xmmword_235AF75E0;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = xmmword_235AF75F0;
  *(_OWORD *)(a2 + 64) = xmmword_235AF7600;
  *(_OWORD *)(a2 + 80) = xmmword_235AF7AA0;
  *(void *)(a2 + 96) = 16842752;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  long long v5 = [(rf::helpers *)v4 identifier];
  rf::data_flow::RFUUID::copy(v5, (uint64_t)v12);
  long long v6 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v6;

  [(rf::helpers *)v4 transform];
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v10;
  if ([(rf::helpers *)v4 conformsToProtocol:&unk_26E8F9A28]) {
    *(unsigned char *)(a2 + 99) = [(rf::helpers *)v4 isTracked];
  }
  *(_DWORD *)(a2 + 100) = 1;
  uint64_t v11 = *(void **)(a2 + 112);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v4;
}

void sub_235ADB8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rf::internal::logAssert(const char *a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v2 = backtrace((void **)buf, 48);
  uint64_t v3 = backtrace_symbols((void *const *)buf, v2);
  int64x2_t v45 = 0uLL;
  long long v46 = 0;
  unint64_t v4 = v2 - 3;
  if (v4 >= 5)
  {
    for (uint64_t i = 4; i != v4; ++i)
    {
      long long v6 = v3[i];
      std::string::basic_string[abi:ne180100]<0>(&v54, v6);
      int v7 = *v6;
      long long v8 = v6;
      while ((v7 & 0xFFFFFFDF) != 0)
      {
        int v9 = *++v8;
        int v7 = v9;
      }
      while (v7 == 32)
      {
        int v10 = *++v8;
        int v7 = v10;
      }
      if ((v7 & 0xFFFFFFDF) != 0)
      {
        do
        {
          int v11 = *++v8;
          int v7 = v11;
        }
        while ((v11 & 0xFFFFFFDF) != 0);
        while (v7 == 32)
        {
          int v12 = *++v8;
          int v7 = v12;
        }
      }
      if (v7) {
        *v8++ = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v53, v6);
      for (int j = *v8; (j & 0xFFFFFFDF) != 0; int j = v14)
        int v14 = *++v8;
      while (j == 32)
      {
        int v15 = *++v8;
        int j = v15;
      }
      uint64_t v16 = v8;
      if (j)
      {
        int v17 = 0;
        uint64_t v16 = v8;
        while (j != 32 || v17)
        {
          int v18 = v17 - 1;
          if (j == 91) {
            ++v17;
          }
          if (j == 93) {
            int v17 = v18;
          }
          int v19 = *++v16;
          int j = v19;
          if (!v19) {
            goto LABEL_31;
          }
        }
        *uint64_t v16 = 0;
      }
LABEL_31:
      std::string::basic_string[abi:ne180100]<0>(&v52, v8);
      std::string::basic_string[abi:ne180100]<0>(&__p, v16 + 1);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v20 = &v52;
      }
      else {
        long long v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = __cxa_demangle((const char *)v20, 0, 0, 0);
      if (v21)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, v21);
        free(v21);
        uint64_t v22 = v56;
        std::string::size_type size = v57.i64[0];
        v50[0] = v57.i32[2];
        *(_DWORD *)((char *)v50 + 3) = *(__int32 *)((char *)&v57.i32[2] + 3);
        LOBYTE(v16) = v57.i8[15];
      }
      else
      {
        uint64_t v22 = 0;
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v47, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      }
      else {
        std::string v47 = v53;
      }
      if (v21)
      {
        if ((v16 & 0x80) != 0)
        {
          long long v23 = v22;
LABEL_47:
          std::string::__init_copy_ctor_external(&v48, v23, size);
          goto LABEL_48;
        }
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v48.__r_.__value_.__l.__size_ = size;
        LODWORD(v48.__r_.__value_.__r.__words[2]) = v50[0];
        *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v50 + 3);
        *((unsigned char *)&v48.__r_.__value_.__s + 23) = (_BYTE)v16;
      }
      else
      {
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = v52.__r_.__value_.__l.__size_;
          long long v23 = (const std::string::value_type *)v52.__r_.__value_.__r.__words[0];
          goto LABEL_47;
        }
        std::string v48 = v52;
      }
LABEL_48:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v49 = __p;
      }
      if (v21 && (v16 & 0x80) != 0) {
        operator delete(v22);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      if (v45.i64[1] >= (unint64_t)v46)
      {
        unint64_t v25 = 0x8E38E38E38E38E39 * ((v45.i64[1] - v45.i64[0]) >> 3) + 1;
        if (v25 > 0x38E38E38E38E38ELL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)&v46[-v45.i64[0]] >> 3) > v25) {
          unint64_t v25 = 0x1C71C71C71C71C72 * ((uint64_t)&v46[-v45.i64[0]] >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)&v46[-v45.i64[0]] >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v26 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v26 = v25;
        }
        long long v59 = &v46;
        if (v26)
        {
          if (v26 > 0x38E38E38E38E38ELL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v27 = (char *)operator new(72 * v26);
        }
        else
        {
          long long v27 = 0;
        }
        int v56 = v27;
        v57.i64[0] = (uint64_t)&v27[8 * ((v45.i64[1] - v45.i64[0]) >> 3)];
        v57.i64[1] = v57.i64[0];
        long long v58 = &v27[72 * v26];
        std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>((std::string *)v57.i64[0], (long long *)&v47);
        uint64_t v28 = v45.i64[1];
        uint64_t v29 = v45.i64[0];
        uint64_t v30 = v57.i64[1];
        uint64_t v31 = v57.i64[0];
        if (v45.i64[1] == v45.i64[0])
        {
          int64x2_t v35 = vdupq_n_s64(v45.u64[1]);
        }
        else
        {
          do
          {
            long long v32 = *(_OWORD *)(v28 - 72);
            *(void *)(v31 - 56) = *(void *)(v28 - 56);
            *(_OWORD *)(v31 - 72) = v32;
            *(void *)(v28 - 64) = 0;
            *(void *)(v28 - 56) = 0;
            *(void *)(v28 - 72) = 0;
            long long v33 = *(_OWORD *)(v28 - 48);
            *(void *)(v31 - 32) = *(void *)(v28 - 32);
            *(_OWORD *)(v31 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v33;
            *(void *)(v28 - 40) = 0;
            *(void *)(v28 - 32) = 0;
            *(void *)(v28 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = 0;
            long long v34 = *(_OWORD *)(v28 - 24);
            *(void *)(v31 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(v28 - 8);
            *(_OWORD *)(v31 - std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = v34;
            v31 -= 72;
            *(void *)(v28 - 16) = 0;
            *(void *)(v28 - std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
            *(void *)(v28 - std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
            v28 -= 72;
          }
          while (v28 != v29);
          int64x2_t v35 = v45;
        }
        uint64_t v24 = v30 + 72;
        v45.i64[0] = v31;
        v45.i64[1] = v30 + 72;
        int64x2_t v57 = v35;
        long long v36 = v46;
        long long v46 = v58;
        long long v58 = v36;
        int v56 = (std::string::value_type *)v35.i64[0];
        std::__split_buffer<re::StackFrame>::~__split_buffer((uint64_t)&v56);
      }
      else
      {
        std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>((std::string *)v45.i64[1], (long long *)&v47);
        uint64_t v24 = v45.i64[1] + 72;
      }
      v45.i64[1] = v24;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
    }
  }
  free(v3);
  uint64_t v37 = a1;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v38 = a1;
    if (a1[23] < 0) {
      uint64_t v38 = *(const char **)a1;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v38;
    _os_log_impl(&dword_235A7C000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Assertion failed: %s", buf, 0xCu);
  }
  uint64_t v39 = v45.i64[0];
  if (v45.i64[0] != v45.i64[1])
  {
    long long v40 = &_os_log_internal;
    do
    {
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = v39;
        if (*(char *)(v39 + 23) < 0) {
          uint64_t v41 = *(void *)v39;
        }
        long long v42 = (void *)(v39 + 24);
        if (*(char *)(v39 + 47) < 0) {
          long long v42 = (void *)*v42;
        }
        long long v43 = (void *)(v39 + 48);
        if (*(char *)(v39 + 71) < 0) {
          long long v43 = (void *)*v43;
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v41;
        __int16 v61 = 2080;
        long long v62 = v42;
        __int16 v63 = 2080;
        long long v64 = v43;
        _os_log_impl(&dword_235A7C000, v40, OS_LOG_TYPE_ERROR, "%s %s %s", buf, 0x20u);
      }
      v39 += 72;
    }
    while (v39 != v45.i64[1]);
  }
  if (a1[23] < 0) {
    uint64_t v37 = *(const char **)a1;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "Assertion failed: %s\nCheck os_log for additional details!\n", v37);
  *(void *)long long buf = &v45;
  std::vector<re::StackFrame>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_235ADBF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
}

uint64_t rf::internal::debugBreakHandler(rf::internal *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v7 = 0;
  *(void *)uint64_t v3 = 0xE00000001;
  int v4 = 1;
  pid_t v5 = getpid();
  size_t v2 = 648;
  uint64_t result = sysctl(v3, 4u, v6, &v2, 0, 0);
  if ((v7 & 0x800) != 0) {
    return raise(5);
  }
  return result;
}

std::string *std::construct_at[abi:ne180100]<re::StackFrame,re::StackFrame const&,re::StackFrame*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_235ADC1EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<re::StackFrame,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<re::StackFrame>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<re::StackFrame,0>(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<re::StackFrame>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  size_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<re::StackFrame,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t rf::data_flow::consumer::findInDirtyOptions<BOOL>(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(a2, a3, a1);
  if (v3)
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t *, void, void, void *))v3[3];
    if (!v4
      || (long long v5 = (unsigned __int8 *)v4(3, v3 + 3, 0, MEMORY[0x263F8C230], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
    {
      std::__throw_bad_any_cast[abi:ne180100]();
    }
    int v6 = *v5;
    int v7 = 1;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  return v6 | (v7 << 8);
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::MeshReconstructionConsumer(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26E8F62F8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 1065353216;
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1;
  char v5 = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 120) = &unk_26E8F46F8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = 0;
  *(unsigned char *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = 0;
  int v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v7 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 152) = dispatch_queue_create("AcousticMeshExportQueue", v7);

  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v9 = dispatch_queue_attr_make_with_qos_class(v8, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 160) = dispatch_queue_create("AcousticMeshExportCompletionQueue", v9);

  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 168) = dispatch_group_create();
  return a1;
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::setARStateData(uint64_t result, uint64_t a2)
{
  *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = a2;
  *(void *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
  return result;
}

void rf::data_flow::consumer::MeshReconstructionConsumer::consumeLatestUpdate(long long *a1, uint64_t a2)
{
  p_long long buf = a1;
  uint64_t v126 = *MEMORY[0x263EF8340];
  rf::data_flow::consumer::EntitiesProcessor::consumeLatestUpdate((uint64_t)a1 + 120, a2);
  if (!*(unsigned char *)(a2 + 32) || !*(unsigned char *)(a2 + 16)) {
    return;
  }
  id v111 = (std::mutex *)*((void *)p_buf + 1);
  std::mutex::lock(v111);
  if (!*(unsigned char *)(a2 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v7 = MEMORY[0x237DEDE50](*(void *)(a2 + 8));
  if (v7)
  {
    uint64_t v8 = (void *)p_buf + 13;
    if (REAssetGetAssetManager() != v7)
    {
      *(void *)uuid_t uu = REAssetManagerCreateAssetHandle();
      REAssetHandleLoadAsync();
      uint64_t v9 = *((void *)p_buf + 4);
      if (!v9 || v9 == *v8) {
        *((void *)p_buf + 4) = *(void *)uu;
      }
      uint64_t v10 = *((void *)p_buf + 5);
      if (!v10 || v10 == *v8) {
        *((void *)p_buf + 5) = *(void *)uu;
      }
      RESharedPtr<REAsset>::operator=((uint64_t *)p_buf + 13, (uint64_t *)uu);
      RESharedPtr<REAsset>::~RESharedPtr(uu);
    }
  }
  if (!*(unsigned char *)(a2 + 32)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  RESceneUnderstandingRootComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v11 == 1)
  {
    REComponentGetEntity();
    RESceneUnderstandingRenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneUnderstandingRenderOptionsComponentSetOcclusionEnabled();
    RESceneUnderstandingRenderOptionsComponentSetWireframeEnabled();
    RESceneUnderstandingRenderOptionsComponentSetDepthFeatheringEnabled();
    RESceneUnderstandingRenderOptionsComponentSetShadowEnabled();
    RESceneUnderstandingRenderOptionsComponentSetPhysicsEnabled();
    RESceneUnderstandingComponentGetComponentType();
    uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
    uint64_t v4 = v12;
    id v109 = (void *)p_buf + 7;
    if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(0, *((void *)p_buf + 7), *((void *)p_buf + 8)) < 0x100u|| *((unsigned char *)p_buf + 16)|| *((unsigned char *)p_buf + 20)|| *((unsigned char *)p_buf + 19)|| *((unsigned char *)p_buf + 22)|| *((unsigned char *)p_buf + 24))
    {
      uint64_t v2 = 0;
      int v13 = 0;
      LODWORD(v14) = 1;
    }
    else
    {
      uint64_t v2 = ComponentsOfClass + 8 * v4;
      if (v4)
      {
        uint64_t v14 = 8 * v4;
        uint64_t v100 = ComponentsOfClass;
        int v13 = 1;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v100 += 8;
          v14 -= 8;
          if (!v14) {
            goto LABEL_22;
          }
        }
      }
      else
      {
        uint64_t v100 = ComponentsOfClass;
      }
      if (v100 == v2)
      {
        LODWORD(v14) = 0;
        int v13 = 1;
      }
      else
      {
        uint64_t v103 = v100;
        while (2)
        {
          REComponentGetEntity();
          REMeshComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMeshComponentGetComponentType();
            REEntityRemoveComponentByClass();
          }
          REMaterialParameterBlockArrayComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMaterialParameterBlockArrayComponentGetComponentType();
            REEntityRemoveComponentByClass();
          }
          v103 += 8;
          if (v103 == v2)
          {
            LODWORD(v14) = 0;
            int v13 = 1;
          }
          else
          {
            while (RESceneUnderstandingComponentGetSourceType() != 1)
            {
              v103 += 8;
              int v13 = 1;
              if (v103 == v2) {
                goto LABEL_332;
              }
            }
            int v13 = 1;
            if (v103 != v2) {
              continue;
            }
LABEL_332:
            LODWORD(v14) = 0;
          }
          break;
        }
        uint64_t v2 = v100;
      }
    }
LABEL_22:
    if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(4, *((void *)p_buf + 7), *((void *)p_buf + 8)) < 0x100u|| *((unsigned char *)p_buf + 16)|| *((unsigned char *)p_buf + 20)|| *((unsigned char *)p_buf + 19)|| *((unsigned char *)p_buf + 22)|| *((unsigned char *)p_buf + 24))
    {
      goto LABEL_28;
    }
    if (v14)
    {
      if (v4)
      {
        uint64_t v101 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v101 -= 8;
          if (!v101)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v105 = ComponentsOfClass + 8 * v4;
    if (v2 == v105)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
      goto LABEL_28;
    }
    uint64_t v106 = v2;
    while (1)
    {
      REComponentGetEntity();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMaterialParameterBlockArrayComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMaterialParameterBlockArrayComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      v106 += 8;
      if (v106 == v105) {
        break;
      }
      while (RESceneUnderstandingComponentGetSourceType() != 1)
      {
        v106 += 8;
        int v13 = 1;
        if (v106 == v105) {
          goto LABEL_28;
        }
      }
      int v13 = 1;
      if (v106 == v105) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    rf::getMessage((rf *)"We should have a root entity!", __p);
    rf::internal::logAssert((const char *)__p);
    if (v115 < 0) {
      operator delete(__p[0]);
    }
    rf::internal::debugBreakHandler(v107);
    id v113 = 0;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v118 = 0u;
    memset(uu, 0, sizeof(uu));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    p_long long buf = &buf;
    rf::getMessage((rf *)"We should have a root entity!", &buf);
    if (v124 >= 0) {
      char v108 = &buf;
    }
    else {
      char v108 = (long long *)buf;
    }
    LODWORD(v121) = 136315138;
    *(void *)((char *)&v121 + 4) = v108;
    _os_log_send_and_compose_impl();
    if (v124 < 0) {
      operator delete((void *)buf);
    }
    _os_crash_msg();
    __break(1u);
  }
  int v13 = 1;
LABEL_28:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(5, *((void *)p_buf + 7), *((void *)p_buf + 8)) >= 0x100u&& (*((unsigned char *)p_buf + 16)|| *((unsigned char *)p_buf + 20)|| *((unsigned char *)p_buf + 19)|| *((unsigned char *)p_buf + 22)|| *((unsigned char *)p_buf + 24)))
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v17 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v17 -= 8;
          if (!v17)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v15 = ComponentsOfClass + 8 * v4;
    if (v2 == v15)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      uint64_t v16 = v2;
      while (2)
      {
        REComponentGetEntity();
        REMaterialParameterBlockArrayComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REMaterialParameterBlockArrayComponentGetBlockAtIndex();
          REMaterialParameterBlockSetBool();
          if (*((unsigned char *)p_buf + 48)) {
            RENetworkMarkComponentDirty();
          }
        }
        do
        {
          v16 += 8;
          if (v16 == v15)
          {
            int v13 = 1;
            goto LABEL_51;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        int v13 = 1;
        if (v16 != v15) {
          continue;
        }
        break;
      }
    }
  }
LABEL_51:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(6, *((void *)p_buf + 7), *((void *)p_buf + 8)) >= 0x100u&& (*((unsigned char *)p_buf + 16)|| *((unsigned char *)p_buf + 20)|| *((unsigned char *)p_buf + 19)|| *((unsigned char *)p_buf + 22)|| *((unsigned char *)p_buf + 24)))
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v20 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v20 -= 8;
          if (!v20)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v18 = ComponentsOfClass + 8 * v4;
    if (v2 == v18)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      uint64_t v19 = v2;
      while (2)
      {
        REComponentGetEntity();
        REMaterialParameterBlockArrayComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REMaterialParameterBlockArrayComponentGetBlockAtIndex();
          REMaterialParameterBlockSetBool();
          if (*((unsigned char *)p_buf + 48)) {
            RENetworkMarkComponentDirty();
          }
        }
        do
        {
          v19 += 8;
          if (v19 == v18)
          {
            int v13 = 1;
            goto LABEL_74;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        int v13 = 1;
        if (v19 != v18) {
          continue;
        }
        break;
      }
    }
  }
LABEL_74:
  uint64_t v21 = std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(*((void *)p_buf + 7), *((void *)p_buf + 8), 3);
  if (v21)
  {
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t *, void, void *, void *))v21[3];
      std::__throw_bad_any_cast[abi:ne180100]();
    if (*((unsigned char *)p_buf + 16)
      || *((unsigned char *)p_buf + 20)
      || *((unsigned char *)p_buf + 19)
      || *((unsigned char *)p_buf + 22)
      || *((unsigned char *)p_buf + 24))
    {
      if (!v13)
      {
        if (v4)
        {
          uint64_t v25 = 8 * v4;
          uint64_t v2 = ComponentsOfClass;
          while (RESceneUnderstandingComponentGetSourceType() != 1)
          {
            v2 += 8;
            v25 -= 8;
            if (!v25)
            {
              uint64_t v2 = ComponentsOfClass + 8 * v4;
              break;
            }
          }
        }
        else
        {
          uint64_t v2 = ComponentsOfClass;
        }
      }
      uint64_t v23 = ComponentsOfClass + 8 * v4;
      if (v2 == v23)
      {
        int v13 = 1;
        uint64_t v2 = ComponentsOfClass + 8 * v4;
      }
      else
      {
        uint64_t v24 = v2;
        while (2)
        {
          REComponentGetEntity();
          REMeshComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            REMeshComponentSetMaterialAtIndex();
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
          }
          do
          {
            v24 += 8;
            if (v24 == v23)
            {
              int v13 = 1;
              goto LABEL_99;
            }
          }
          while (RESceneUnderstandingComponentGetSourceType() != 1);
          int v13 = 1;
          if (v24 != v23) {
            continue;
          }
          break;
        }
      }
    }
  }
LABEL_99:
  unsigned __int16 v26 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(2, *((void *)p_buf + 7), *((void *)p_buf + 8));
  char v27 = v26;
  if (v26 >= 0x100u)
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v30 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v30 -= 8;
          if (!v30)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v28 = ComponentsOfClass + 8 * v4;
    if (v2 == v28)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      uint64_t v29 = v2;
      while (2)
      {
        REComponentGetEntity();
        RERigidBodyComponentGetComponentType();
        if (v27)
        {
          if (REEntityAddComponentByClass())
          {
            RERigidBodyComponentSetMotionType();
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
          }
        }
        else if (REEntityGetComponentByClass())
        {
          RERigidBodyComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v29 += 8;
          if (v29 == v28)
          {
            int v13 = 1;
            goto LABEL_120;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        int v13 = 1;
        if (v29 != v28) {
          continue;
        }
        break;
      }
    }
  }
LABEL_120:
  unsigned __int16 v31 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(1, *((void *)p_buf + 7), *((void *)p_buf + 8));
  if (v31 >= 0x100u && v31 == 0)
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v35 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v35 -= 8;
          if (!v35)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v33 = ComponentsOfClass + 8 * v4;
    if (v2 == v33)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      uint64_t v34 = v2;
      int v13 = 1;
      while (2)
      {
        REComponentGetEntity();
        REColliderComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REColliderComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v34 += 8;
          if (v34 == v33)
          {
            int v13 = 1;
            goto LABEL_141;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        if (v34 != v33) {
          continue;
        }
        break;
      }
    }
  }
LABEL_141:
  unsigned __int16 v36 = rf::data_flow::consumer::findInDirtyOptions<BOOL>(8, *((void *)p_buf + 7), *((void *)p_buf + 8));
  if (v36 >= 0x100u && v36 == 0)
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v40 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v40 -= 8;
          if (!v40)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v38 = ComponentsOfClass + 8 * v4;
    if (v2 == v38)
    {
      int v13 = 1;
      uint64_t v2 = ComponentsOfClass + 8 * v4;
    }
    else
    {
      uint64_t v39 = v2;
      int v13 = 1;
      while (2)
      {
        if (RESceneUnderstandingComponentIsEntityType())
        {
          REComponentGetEntity();
          REAcousticMeshComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        do
        {
          v39 += 8;
          if (v39 == v38)
          {
            int v13 = 1;
            goto LABEL_162;
          }
        }
        while (RESceneUnderstandingComponentGetSourceType() != 1);
        if (v39 != v38) {
          continue;
        }
        break;
      }
    }
  }
LABEL_162:
  if ((unsigned __int16)rf::data_flow::consumer::findInDirtyOptions<BOOL>(9, *((void *)p_buf + 7), *((void *)p_buf + 8)) >= 0x100u&& !*((unsigned char *)p_buf + 16)&& !*((unsigned char *)p_buf + 20)&& !*((unsigned char *)p_buf + 19)&& !*((unsigned char *)p_buf + 22)&& !*((unsigned char *)p_buf + 24))
  {
    if (!v13)
    {
      if (v4)
      {
        uint64_t v104 = 8 * v4;
        uint64_t v2 = ComponentsOfClass;
        while (RESceneUnderstandingComponentGetSourceType() != 1)
        {
          v2 += 8;
          v104 -= 8;
          if (!v104)
          {
            uint64_t v2 = ComponentsOfClass + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t v2 = ComponentsOfClass;
      }
    }
    uint64_t v102 = ComponentsOfClass + 8 * v4;
LABEL_312:
    if (v2 != v102)
    {
      REComponentGetEntity();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMaterialParameterBlockArrayComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMaterialParameterBlockArrayComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      while (1)
      {
        v2 += 8;
        if (v2 == v102) {
          break;
        }
        if (RESceneUnderstandingComponentGetSourceType() == 1) {
          goto LABEL_312;
        }
      }
    }
  }
  unsigned int v41 = *(_DWORD *)(*((void *)p_buf + 1) + 2888);
  BOOL v42 = v41 > 4;
  int v43 = (1 << v41) & 0x15;
  if (v42 || v43 == 0)
  {
    int64x2_t v45 = (char *)(p_buf + 7);
    char v46 = *((unsigned char *)p_buf + 112);
    if (v46)
    {
      RESceneUnderstandingComponentGetComponentType();
      uint64_t v92 = RESceneGetComponentsOfClass();
      if (v93)
      {
        uint64_t v94 = v92;
        uint64_t v95 = 8 * v93;
        do
        {
          if ((RESceneUnderstandingComponentIsEntityType() & 1) == 0)
          {
            REComponentGetEntity();
            REAnchorComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              uint64_t IsAnchorExternal = REAnchorComponentGetIsAnchorExternal();
              if ((IsAnchorExternal & 1) == 0)
              {
                long long v97 = rf::realityFusionLogObject((rf *)IsAnchorExternal);
                if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t Name = REEntityGetName();
                  uint64_t LocalId = REEntityGetLocalId();
                  *(_DWORD *)uuid_t uu = 136315394;
                  *(void *)&uu[4] = Name;
                  *(_WORD *)&uu[12] = 2048;
                  *(void *)&uu[14] = LocalId;
                  _os_log_impl(&dword_235A7C000, v97, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Mark SU mesh entity %s(%llu) as external.", uu, 0x16u);
                }

                REAnchorComponentSetIsAnchorExternal();
              }
            }
          }
          v94 += 8;
          v95 -= 8;
        }
        while (v95);
      }
      char v46 = 0;
    }
  }
  else
  {
    int64x2_t v45 = (char *)(p_buf + 7);
    char v46 = 1;
  }
  *int64x2_t v45 = v46;
  if (!*(unsigned char *)(a2 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v110 = *(void *)(a2 + 8);
  if (*((unsigned char *)p_buf + 16)
    || *((unsigned char *)p_buf + 20)
    || *((unsigned char *)p_buf + 19)
    || *((unsigned char *)p_buf + 22)
    || *((unsigned char *)p_buf + 24))
  {
    if (*((unsigned char *)p_buf + 96)) {
      uint64_t v47 = (uint64_t)&v111[31].__m_.__opaque[48];
    }
    else {
      uint64_t v47 = (uint64_t)&v111[1];
    }
    std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map((uint64_t)__p, v47);
    *((unsigned char *)p_buf + 96) = 1;
    if (v116)
    {
      RESceneUnderstandingComponentGetComponentType();
      *(void *)uuid_t uu = RESceneGetComponentsOfClass();
      *(void *)&uu[8] = v48;
      *(void *)&uu[16] = __p;
      uu[24] = 1;
      LOBYTE(v11std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      BYTE8(v11std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v49 = v118;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v50 = *(void *)uu + 8 * *(void *)&uu[8];
      *(void *)&long long v121 = v49;
      *((void *)&v121 + 1) = uu;
      if (v49 != v50)
      {
        do
        {
          REComponentGetEntity();
          REAnchorComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            long long v51 = (rf *)REAnchorComponentGetIsAnchorExternal();
            if (v51)
            {
              std::string v52 = rf::realityFusionLogObject(v51);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v53 = REEntityGetLocalId();
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v53;
                _os_log_impl(&dword_235A7C000, v52, OS_LOG_TYPE_DEFAULT, "MeshReconstructionConsumer: Mark SU mesh entity %llu as relocalized.", (uint8_t *)&buf, 0xCu);
              }

              REAnchorComponentSetIsAnchorExternal();
            }
          }
          REMeshComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
          char v123 = 0;
          uint64_t v125 = 0;
          uuid_clear((unsigned __int8 *)&buf);
          *(void *)&long long buf = IdentifierPtr;
          char v123 = 1;
          id v113 = &buf;
          char v55 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&buf, (uint64_t)&std::piecewise_construct, &v113);
          uint64_t v57 = v55[6];
          int v56 = (std::__shared_weak_count *)v55[7];
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t Mesh = REMeshComponentGetMesh();
          if (!*(unsigned char *)(v57 + 376)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          if (Mesh != *(void *)(v57 + 368))
          {
            REMeshComponentSetMesh();
            if (!REMeshComponentGetMaterialCount()) {
              REMeshComponentAddMaterial();
            }
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
            REMaterialParameterBlockArrayComponentGetComponentType();
            REEntityGetOrAddComponentByClass();
            BlockAtIndex = (long long *)REMaterialParameterBlockArrayComponentGetBlockAtIndex();
            id v113 = 0;
            if (BlockAtIndex)
            {
              RERetain();
              id v113 = BlockAtIndex;
            }
            else
            {
              MEMORY[0x237DEDE90](v110);
              char v112 = (long long *)RERenderManagerMaterialParameterBlockCreateWithAsset();
              long long v60 = v113;
              id v113 = v112;
              if (v60) {
                RERelease();
              }
              char v112 = 0;
              RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(&v112);
              REMaterialParameterBlockArrayComponentSetBlockAtIndex();
            }
            REMaterialParameterBlockSetBool();
            REMaterialParameterBlockSetBool();
            if (*(unsigned char *)(v57 + 280)) {
              [*(id *)(v57 + 256) length];
            }
            REMaterialParameterBlockSetBool();
            if (*(unsigned char *)(v57 + 312)) {
              [*(id *)(v57 + 288) length];
            }
            REMaterialParameterBlockSetBool();
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
            RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(&v113);
            if (re::internal::enableSignposts(0, 0))
            {
              if (!*(void *)(v57 + 24))
              {
                if (*(unsigned char *)(v57 + 16)) {
                  __int16 v61 = *(void **)v57;
                }
                else {
                  __int16 v61 = (void *)v57;
                }
                *(void *)(v57 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = ((*v61 >> 2) + (*v61 << 6) + v61[1] + 2654435769) ^ *v61;
              }
              kdebug_trace();
            }
          }
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          *(void *)&long long v121 = v49 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((void **)&v121 + 1), (uint64_t *)&v121);
          uint64_t v49 = v121;
        }
        while ((void)v121 != v50);
      }
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    *((unsigned char *)p_buf + 96) = 0;
  }
  if (*((unsigned char *)p_buf + 23))
  {
    RESceneUnderstandingComponentGetComponentType();
    uint64_t v62 = RESceneGetComponentsOfClass();
    if (v63)
    {
      uint64_t v64 = v62;
      opaque = v111[33].__m_.__opaque;
      long long v66 = &v111[1].__m_.__opaque[32];
      uint64_t v67 = 8 * v63;
      do
      {
        if (RESceneUnderstandingComponentIsEntityType())
        {
          uint64_t Entity = REComponentGetEntity();
          REAcousticMeshComponentGetComponentType();
          if (REEntityGetOrAddComponentByClass())
          {
            SelfEnabled = (rf *)REEntityGetSelfEnabled();
            if (*((unsigned __int8 *)p_buf + 49) != SelfEnabled)
            {
              unint64_t v70 = rf::realityFusionLogObject(SelfEnabled);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v71 = opaque;
                uint64_t v72 = v66;
                int v73 = *((unsigned __int8 *)p_buf + 49);
                uint64_t v74 = REEntityGetName();
                *(_DWORD *)uuid_t uu = 67109378;
                *(_DWORD *)&uu[4] = v73;
                *(_WORD *)&uu[8] = 2080;
                *(void *)&uu[10] = v74;
                _os_log_impl(&dword_235A7C000, v70, OS_LOG_TYPE_DEFAULT, "Setting enabled=%d for AcousticMeshComponent on entity: %s", uu, 0x12u);
                long long v66 = v72;
                opaque = v71;
              }

              MEMORY[0x237DED730](Entity, *((unsigned __int8 *)p_buf + 49));
            }
            uint64_t v75 = RESceneUnderstandingComponentGetIdentifierPtr();
            uu[16] = 0;
            *(void *)&uu[24] = 0;
            uuid_clear(uu);
            *(void *)uuid_t uu = v75;
            uu[16] = 1;
            if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(opaque, (uint64_t)uu))
            {
              RETransformComponentGetComponentType();
              REEntityGetComponentByClass();
              RETransformComponentSetWorldMatrix4x4F();
              if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v66, (uint64_t)uu))
              {
                REAcousticMeshComponentSetLastUpdateTimestamp();
              }
              REAcousticMeshComponentSetARMesh();
              if (*((unsigned char *)p_buf + 48)) {
                RENetworkMarkComponentDirty();
              }
            }
          }
        }
        v64 += 8;
        v67 -= 8;
      }
      while (v67);
    }
  }
  if (*((unsigned char *)p_buf + 17))
  {
    if (*((unsigned char *)p_buf + 97)) {
      uint64_t v76 = (uint64_t)&v111[32].__m_.__opaque[24];
    }
    else {
      uint64_t v76 = (uint64_t)&v111[1];
    }
    std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map((uint64_t)__p, v76);
    *((unsigned char *)p_buf + 97) = 1;
    if (v116)
    {
      RESceneUnderstandingComponentGetComponentType();
      *(void *)uuid_t uu = RESceneGetComponentsOfClass();
      *(void *)&uu[8] = v77;
      *(void *)&uu[16] = __p;
      uu[24] = 1;
      LOBYTE(v11std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      BYTE8(v11std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v78 = v118;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v79 = *(void *)uu + 8 * *(void *)&uu[8];
      *(void *)&long long buf = v78;
      *((void *)&buf + 1) = uu;
      while (v78 != v79)
      {
        REComponentGetEntity();
        REColliderComponentGetComponentType();
        if (!REEntityGetComponentByClass())
        {
          REColliderComponentGetComponentType();
          REEntityAddComponentByClass();
          REColliderComponentSetGroup();
          if (*((unsigned char *)p_buf + 48)) {
            RENetworkMarkComponentDirty();
          }
        }
        if (*((unsigned char *)p_buf + 18))
        {
          RERigidBodyComponentGetComponentType();
          if (!REEntityGetComponentByClass())
          {
            RERigidBodyComponentGetComponentType();
            REEntityAddComponentByClass();
            RERigidBodyComponentSetMotionType();
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
          }
        }
        *(void *)&long long buf = v78 + 8;
        ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((void **)&buf + 1), (uint64_t *)&buf);
        uint64_t v78 = buf;
      }
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v80 = v118;
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(uu);
      uint64_t v81 = *(void *)uu + 8 * *(void *)&uu[8];
      *(void *)&long long v121 = v80;
      *((void *)&v121 + 1) = uu;
      if (v80 != v81)
      {
        do
        {
          uint64_t v82 = RESceneUnderstandingComponentGetIdentifierPtr();
          char v123 = 0;
          uint64_t v125 = 0;
          uuid_clear((unsigned __int8 *)&buf);
          *(void *)&long long buf = v82;
          char v123 = 1;
          uint64_t v83 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(__p, (uint64_t)&buf);
          float32x4_t v84 = v83;
          if (!v83) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (*(unsigned char *)(v83[6] + 392))
          {
            uint64_t v85 = REComponentGetEntity();
            REColliderComponentGetComponentType();
            REEntityGetComponentByClass();
            uint64_t Shape = REColliderComponentGetShape();
            uint64_t v87 = v84[6];
            if (!*(unsigned char *)(v87 + 392)) {
              goto LABEL_367;
            }
            if (Shape == *(void *)(v87 + 384)) {
              goto LABEL_264;
            }
            if (Shape)
            {
              RERetain();
              REColliderComponentSetShape();
              MEMORY[0x237DED700](v85);
              if (!*(unsigned char *)(v84[6] + 392)) {
LABEL_367:
              }
                std::__throw_bad_optional_access[abi:ne180100]();
              REColliderComponentSetShape();
              RESceneAddEntity();
              REAnchorComponentGetComponentType();
              REEntityAddComponentByClass();
              REAnchorComponentSetAnchoredLocally();
              REAnchorComponentSetIsAnchorExternal();
              RERelease();
            }
            else
            {
              REColliderComponentSetShape();
            }
            if (*((unsigned char *)p_buf + 48)) {
              RENetworkMarkComponentDirty();
            }
          }
          if (re::internal::enableSignposts(0, 0))
          {
            uint64_t v88 = v84[6];
            if (!*(void *)(v88 + 24))
            {
              if (*(unsigned char *)(v88 + 16)) {
                long long v89 = *(void **)v88;
              }
              else {
                long long v89 = (void *)v84[6];
              }
              *(void *)(v88 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = ((*v89 >> 2) + (*v89 << 6) + v89[1] + 2654435769) ^ *v89;
            }
            kdebug_trace();
          }
LABEL_264:
          *(void *)&long long v121 = v80 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(*((void **)&v121 + 1), (uint64_t *)&v121);
          uint64_t v80 = v121;
        }
        while ((void)v121 != v81);
      }
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    *((unsigned char *)p_buf + 97) = 0;
  }
  if (*((void *)p_buf + 10))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::__deallocate_node((uint64_t)v109, *((void ***)p_buf + 9));
    *((void *)p_buf + 9) = 0;
    uint64_t v90 = *((void *)p_buf + 8);
    if (v90)
    {
      for (uint64_t i = 0; i != v90; ++i)
        *(void *)(*v109 + 8 * i) = 0;
    }
    *((void *)p_buf + 10) = 0;
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  std::mutex::unlock(v111);
}

void sub_235ADDC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setRigidbodyEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[18] != a2)
  {
    this[18] = a2;
    int v2 = 2;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 2, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADDEA0(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setCollisionEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[17] != a2)
  {
    this[17] = a2;
    int v2 = 1;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 1, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADDF54(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setOcclusionEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[16] != a2)
  {
    this[16] = a2;
    int v2 = 0;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 0, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADE004(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::consumer::MeshReconstructionConsumer::setMeshMaterial(uint64_t (**result)(void, void, void, void, void), uint64_t (*a2)(void, void, void, void, void)))(void, void, void, void, void)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (result[4] != a2)
  {
    result[4] = a2;
    int v2 = 3;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
    v3[1] = a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(result + 7), 3, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return result;
}

void sub_235ADE0B0(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t (**rf::data_flow::consumer::MeshReconstructionConsumer::setSyntheticMeshMaterial(uint64_t (**result)(void, void, void, void, void), uint64_t (*a2)(void, void, void, void, void)))(void, void, void, void, void)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (result[5] != a2)
  {
    result[5] = a2;
    int v2 = 3;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
    v3[1] = a2;
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(result + 7), 3, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return result;
}

void sub_235ADE15C(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setWireframeEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[19] != a2)
  {
    this[19] = a2;
    int v2 = 4;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 4, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADE210(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setLightingEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[20] != a2)
  {
    this[20] = a2;
    int v2 = 5;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 5, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADE2C4(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setDynamicLightingEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[22] != a2)
  {
    this[22] = a2;
    int v2 = 6;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 6, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADE378(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *rf::data_flow::consumer::MeshReconstructionConsumer::setAtmosphereOcclusionEnabled(unsigned char *this, int a2)
{
  v3[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  if (this[24] != a2)
  {
    this[24] = a2;
    int v2 = 9;
    v3[1] = (uint64_t (*)(void, void, void, void, void))a2;
    v3[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>((uint64_t)(this + 56), 9, (uint64_t)&v2);
    return std::any::reset[abi:ne180100](v3);
  }
  return this;
}

void sub_235ADE42C(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t rf::data_flow::consumer::MeshReconstructionConsumer::getBoundingBox@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  RESceneUnderstandingComponentGetComponentType();
  uint64_t result = RESceneGetComponentsOfClass();
  uint64_t v6 = result;
  uint64_t v7 = v5;
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a2 + 16) = v8;
  if (v5)
  {
    uint64_t v9 = 8 * v5;
    for (uint64_t i = result; ; i += 8)
    {
      uint64_t result = RESceneUnderstandingComponentGetSourceType();
      if (result == 1) {
        break;
      }
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
  }
  else
  {
    uint64_t i = result;
  }
  uint64_t v11 = v6 + 8 * v7;
  if (i != v11)
  {
    v12.i64[0] = 0x7F0000007FLL;
    v12.i64[1] = 0x7F0000007FLL;
    float32x4_t v17 = v12;
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    while (1)
    {
      uint64_t result = REComponentGetEntity();
      if (a1 != 1) {
        break;
      }
      RETransformComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (result)
      {
        REColliderComponentGetComponentType();
        uint64_t result = REEntityGetComponentByClass();
        if (result)
        {
          REColliderComponentGetShape();
          RECollisionShapeAssetGetCollisionShape();
          RETransformComponentGetWorldPose();
          uint64_t result = RECollisionShapeGetBoundingBox();
LABEL_16:
          float32x4_t v16 = v17;
          float32x4_t v15 = v18;
          v15.i32[3] = 0;
          v13.i32[3] = 0;
          v16.i32[3] = 0;
          v14.i32[3] = 0;
          float32x4_t v17 = vmaxnmq_f32(v16, v14);
          float32x4_t v18 = vminnmq_f32(v15, v13);
          *(float32x4_t *)a2 = v18;
          *(float32x4_t *)(a2 + 16) = v17;
          goto LABEL_17;
        }
      }
      do
      {
LABEL_17:
        i += 8;
        if (i == v11) {
          return result;
        }
        uint64_t result = RESceneUnderstandingComponentGetSourceType();
      }
      while (result != 1);
      if (i == v11) {
        return result;
      }
    }
    if (!a1)
    {
      RETransformComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (!result) {
        goto LABEL_17;
      }
      RETransformComponentGetWorldMatrix4x4F();
      uint64_t result = REEntityComputeMeshBounds();
    }
    goto LABEL_16;
  }
  return result;
}

void rf::data_flow::consumer::MeshReconstructionConsumer::exportAcousticMeshComponents(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  RESceneUnderstandingComponentGetComponentType();
  RESceneGetComponentsOfClass();
  uint64_t v9 = [MEMORY[0x263F08850] defaultManager];
  a3;
  char v4 = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
  uint64_t v5 = (rf *)0;
  long long v8 = v5;
  if (v5) {
    char v6 = v4;
  }
  else {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = rf::realityFusionLogObject(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      blocunint64_t k = 138412290;
      block_4 = v8;
      _os_log_error_impl(&dword_235A7C000, v7, OS_LOG_TYPE_ERROR, "[MeshReconstructionConsumer::exportAcousticMeshComponentsInScene] Could not create export directory: %@", (uint8_t *)&block, 0xCu);
    }
  }
  operator new();
}

void sub_235ADE9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEE_block_invoke(uint64_t a1)
{
  v8[1] = *MEMORY[0x263EF8340];
  if (!**(unsigned char **)(a1 + 32))
  {
    char v4 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = *MEMORY[0x263F08320];
  int v2 = [NSString stringWithFormat:@"RealityFusion MeshReconstructionConsumer::exportAcousticMeshComponents has failure in exporting acoustic meshes. For details look for logs containing [MeshReconstructionConsumer::exportAcousticMeshComponentsInScene]"];
  v8[0] = v2;
  long long v3 = [NSDictionary dictionaryWithObjects:v8 forKeys:&v7 count:1];

  char v4 = (void *)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"RealityFusion" code:-1 userInfo:v3];
  if (*(void *)(a1 + 32)) {
LABEL_5:
  }
    MEMORY[0x237DEE2B0]();
  if (*(void *)(a1 + 64))
  {
    id v6 = v4;
    uint64_t v5 = *(void *)(a1 + 64);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, id *))(*(void *)v5 + 48))(v5, &v6);
  }
}

void sub_235ADEB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c35_ZTSNSt3__18functionIFvP7NSErrorEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_ea8_40c35_ZTSNSt3__18functionIFvP7NSErrorEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void rf::data_flow::consumer::MeshReconstructionConsumer::~MeshReconstructionConsumer(id *this)
{
  *this = &unk_26E8F62F8;

  RESharedPtr<REAsset>::~RESharedPtr(this + 13);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)(this + 7));
}

{
  uint64_t vars8;

  *this = &unk_26E8F62F8;

  RESharedPtr<REAsset>::~RESharedPtr(this + 13);
  std::__hash_table<std::__hash_value_type<unsigned long,std::any>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::any>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::any>>>::~__hash_table((uint64_t)(this + 7));
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::unordered_map<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::pair<rf::data_flow::RFUUID const,std::shared_ptr<rf::data_flow::consumer::Mesh>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_235ADED0C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x263F8C230];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(unsigned char *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      break;
    case 2:
      uint64_t result = 0;
      *(unsigned char *)(a3 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = std::type_info::operator==[abi:ne180100](a4, MEMORY[0x263F8C230]);
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<BOOL>::__id;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
      a3[1] = v8;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<REAsset *>::__handle[abi:ne180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<REAsset *>::__id;
      if (v10) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *RESharedPtr<REMaterialParameterBlock>::~RESharedPtr(void *a1)
{
  if (*a1) {
    RERelease();
  }
  return a1;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(void *result, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    char v4 = result;
    do
    {
      uint64_t result = (void *)RESceneUnderstandingComponentGetSourceType();
      if (result != 2)
      {
        uint64_t v5 = (void *)v4[2];
        uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        char v9 = 0;
        uint64_t v10 = 0;
        uuid_clear(uu);
        *(void *)uuid_t uu = IdentifierPtr;
        char v9 = 1;
        uint64_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
        {
          if (*(unsigned char *)(result[6] + 376)) {
            break;
          }
        }
      }
      uint64_t v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(void *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    uint64_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updateMeshComponentsInSceneWithSnapshot(REServiceLocator *,REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((unsigned char *)v1 + 40) = 1;
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(void *result, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *result + 8 * result[1];
  if (*a2 != v2)
  {
    char v4 = result;
    do
    {
      uint64_t result = (void *)RESceneUnderstandingComponentGetSourceType();
      if (result != 2)
      {
        uint64_t v5 = (void *)v4[2];
        uint64_t IdentifierPtr = RESceneUnderstandingComponentGetIdentifierPtr();
        char v9 = 0;
        uint64_t v10 = 0;
        uuid_clear(uu);
        *(void *)uuid_t uu = IdentifierPtr;
        char v9 = 1;
        uint64_t result = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(v5, (uint64_t)uu);
        if (result)
        {
          if (*(unsigned char *)(result[6] + 392)) {
            break;
          }
        }
      }
      uint64_t v7 = *a2 + 8;
      *a2 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void *ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::cache_begin(void *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    uint64_t result = ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::MeshReconstructionConsumer::updatePhysicsComponentsInSceneWithSnapshot(REScene *,rf::LockedARStateData &)::$_0>>::satisfy_forward(result, &v2);
    v1[4] = v2;
    *((unsigned char *)v1 + 40) = 1;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::find<rf::data_flow::consumer::DirtyOption>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::__unordered_map_hasher<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::hash<rf::data_flow::consumer::DirtyOption>,std::equal_to<rf::data_flow::consumer::DirtyOption>,true>,std::__unordered_map_equal<rf::data_flow::consumer::DirtyOption,std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,std::equal_to<rf::data_flow::consumer::DirtyOption>,std::hash<rf::data_flow::consumer::DirtyOption>,true>,std::allocator<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>>>::__emplace_unique_key_args<rf::data_flow::consumer::DirtyOption,std::pair<rf::data_flow::consumer::DirtyOption const,std::any>>(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    char v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  float32x4_t v13 = operator new(0x38uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *float32x4_t v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  std::any::any[abi:ne180100](v13 + 3, (void (**)(uint64_t))(a3 + 8));
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *(int8x8_t *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * vstd::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = v12;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *uint64_t v23 = *v29;
                  *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unsigned __int16 v31 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v32 = v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *unsigned __int16 v31 = v32;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v32;
  *(void *)(*(void *)a1 + 8 * v3) = v12;
  if (*(void *)v32)
  {
    unint64_t v33 = *(void *)(*(void *)v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    unsigned __int16 v31 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
}

void sub_235ADF634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::consumer::DirtyOption,std::any>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t (***)(void, void, void, void, void))a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::any::reset[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

void ___ZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponent_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = objc_alloc(MEMORY[0x263F135E8]);
  unint64_t v3 = [*(id *)(a1 + 64) allocator];
  unint64_t v4 = (void *)[v2 initWithBufferAllocator:v3];

  [v4 addObject:*(void *)(a1 + 64)];
  uint64_t v5 = NSString;
  rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)(a1 + 32), __p);
  if (v13 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = *(unsigned char **)__p;
  }
  unint64_t v7 = objc_msgSend(v5, "stringWithFormat:", @"%s.obj", v6);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  uint8x8_t v8 = [*(id *)(a1 + 72) URLByAppendingPathComponent:v7];
  *(void *)std::string __p = 0;
  char v9 = [v4 exportAssetToURL:v8 error:__p];

  if ((v9 & 1) == 0)
  {
    **(unsigned char **)(a1 + 80) = 1;
    unint64_t v11 = rf::realityFusionLogObject(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 138412290;
      *(void *)&__p[4] = 0;
      _os_log_error_impl(&dword_235A7C000, v11, OS_LOG_TYPE_ERROR, "[MeshReconstructionConsumer::exportAcousticMeshComponentsInScene]: error when exporting mdlAsset %@", __p, 0xCu);
    }
  }
}

void sub_235ADF834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c170_ZTSZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponentEUlSB_E_(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  *(void *)(a1 + 64) = *(id *)(a2 + 64);
  id result = *(id *)(a2 + 72);
  *(void *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_ea8_32c170_ZTSZZNK2rf9data_flow8consumer26MeshReconstructionConsumer28exportAcousticMeshComponentsEP7REScenePK7__CFURLNSt3__18functionIFvP7NSErrorEEEEN3__0clEP11REComponentEUlSB_E_(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
}

uint64_t std::__function::__value_func<void ()(NSError *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  }
  return a1;
}

void RFRayCastingServiceCreate()
{
  if (qword_26AB58AD0 != -1) {
    dispatch_once(&qword_26AB58AD0, &__block_literal_global_13);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

__n128 RFRayCastingServiceGetRayCastingResult@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263EF89A8];
  long long v2 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x263EF89A8];
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v4;
  *(_DWORD *)(a1 + 64) = -1073741824;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

void rf::data_flow::consumer::RayCastingConsumer::~RayCastingConsumer(rf::data_flow::consumer::RayCastingConsumer *this)
{
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer18RayCastingConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_24[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      long long v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  long long v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::RayCastingConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58AD8 = 0u;
  xmmword_26AB58AE8 = 0u;
  xmmword_26AB58AF8 = 0u;
  unk_26AB58B08 = 0u;
  xmmword_26AB58B18 = 0u;
  unk_26AB58B28 = 0u;
  unint64_t v7 = __dst;
  if (v9 < 0) {
    unint64_t v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58AD8 + 1) = v7;
  *(void *)&xmmword_26AB58AE8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::initCallback;
  *(void *)&xmmword_26AB58AF8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::finalizeCallback;
  qword_26AB58B10 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58B18 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_14 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235ADFC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::finalizeCallback(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::RayCastingConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t rf::helpers::drawAxis()
{
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  REPrimitiveRenderSetLineColor();
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  REPrimitiveRenderSetLineColor();
  REPrimitiveRenderAddLine();
  REPrimitiveRenderSetLineWidth();
  return REPrimitiveRenderSetLineColor();
}

uint64_t rf::helpers::drawAnchorCube(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3 = a3[1];
  float32x4_t v4 = a3[2];
  v6[0] = *a3;
  v6[1] = v3;
  v6[2] = v4;
  re::makeQuaternionFromMatrix<float>(v6);
  REPrimitiveRenderAddShape();
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawPlaneRect(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4)
{
  uint64_t v4 = 0;
  uint64_t v40 = *MEMORY[0x263EF8340];
  int32x4_t v5 = (int32x4_t)vmulq_f32(*a3, *a3);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  float32x2_t v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  float32x4_t v8 = vmulq_n_f32(*a3, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  float32x4_t v9 = a3[2];
  int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
  float32x4_t v23 = a3[3];
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  float32x4_t v13 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  float32x4_t v14 = vmulq_n_f32(v8, *a4 * 0.5);
  float32x4_t v15 = vaddq_f32(v23, v14);
  float32x4_t v16 = vmulq_n_f32(v13, a4[2] * 0.5);
  float32x4_t v17 = vsubq_f32(v23, v14);
  float32x4_t v21 = vaddq_f32(v16, v17);
  float32x4_t v22 = vaddq_f32(v16, v15);
  float32x4_t v19 = vsubq_f32(v15, v16);
  float32x4_t v20 = vsubq_f32(v17, v16);
  unint64_t v24 = &v22;
  uint8x8_t v25 = &v21;
  unint64_t v26 = &v22;
  uint8x8_t v27 = &v19;
  uint64_t v34 = &v23;
  uint64_t v35 = &v22;
  uint64_t v28 = &v21;
  uint64_t v29 = &v20;
  unint64_t v30 = &v20;
  unsigned __int16 v31 = &v19;
  uint64_t v32 = &v20;
  unint64_t v33 = &v23;
  char v36 = &v19;
  uint64_t v37 = &v23;
  uint64_t v38 = &v23;
  uint64_t v39 = &v21;
  do
  {
    REPrimitiveRenderAddLine();
    REPrimitiveRenderSetLineColor();
    uint64_t result = REPrimitiveRenderSetLineWidth();
    v4 += 16;
  }
  while (v4 != 128);
  return result;
}

uint64_t rf::helpers::drawBox(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3 = a3[1];
  v11[0] = *a3;
  float32x4_t v4 = a3[2];
  v11[1] = v3;
  void v11[2] = v4;
  re::makeQuaternionFromMatrix<float>(v11);
  REPrimitiveRenderAddShape();
  __asm { FMOV            V0.4S, #1.0 }
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawSphere(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v3 = a3[1];
  float32x4_t v4 = a3[2];
  v6[0] = *a3;
  v6[1] = v3;
  v6[2] = v4;
  re::makeQuaternionFromMatrix<float>(v6);
  REPrimitiveRenderAddShape();
  REPrimitiveRenderSetShapeColor();
  return REPrimitiveRenderSetShapeScale();
}

uint64_t rf::helpers::drawBoundingBox(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4)
{
  uint64_t v4 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  float32x4_t v5 = a3[1];
  int32x4_t v6 = (int32x4_t)vmulq_f32(*a3, *a3);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  float32x4_t v9 = vmulq_n_f32(*a3, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  int32x4_t v10 = (int32x4_t)vmulq_f32(v5, v5);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  float32x4_t v13 = vmulq_n_f32(v5, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  float32x4_t v15 = a3[2];
  float32x4_t v14 = a3[3];
  int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  float32x2_t v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
  float32x4_t v19 = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  float32x4_t v20 = vmulq_n_f32(v9, *a4 * 0.5);
  float32x4_t v21 = vaddq_f32(v14, v20);
  float32x4_t v22 = vmulq_n_f32(v19, a4[2] * 0.5);
  float32x4_t v23 = vaddq_f32(v21, v22);
  float32x4_t v24 = vmulq_n_f32(v13, a4[1] * 0.5);
  float32x4_t v25 = vsubq_f32(v14, v20);
  float32x4_t v26 = vaddq_f32(v25, v22);
  float32x4_t v36 = vaddq_f32(v24, v26);
  float32x4_t v37 = vaddq_f32(v24, v23);
  float32x4_t v27 = vsubq_f32(v25, v22);
  float32x4_t v28 = vsubq_f32(v21, v22);
  float32x4_t v34 = vaddq_f32(v24, v28);
  float32x4_t v35 = vaddq_f32(v24, v27);
  float32x4_t v32 = vsubq_f32(v26, v24);
  float32x4_t v33 = vsubq_f32(v23, v24);
  float32x4_t v30 = vsubq_f32(v28, v24);
  float32x4_t v31 = vsubq_f32(v27, v24);
  uint64_t v38 = &v37;
  uint64_t v39 = &v36;
  uint64_t v40 = &v37;
  unsigned int v41 = &v34;
  BOOL v42 = &v36;
  int v43 = &v35;
  long long v44 = &v35;
  int64x2_t v45 = &v34;
  char v46 = &v33;
  uint64_t v47 = &v32;
  uint64_t v48 = &v33;
  uint64_t v49 = &v30;
  uint64_t v50 = &v32;
  long long v51 = &v31;
  std::string v52 = &v31;
  uint64_t v53 = &v30;
  uint64_t v54 = &v37;
  char v55 = &v33;
  int v56 = &v36;
  uint64_t v57 = &v32;
  long long v58 = &v34;
  long long v59 = &v30;
  long long v60 = &v35;
  __int16 v61 = &v31;
  do
  {
    REPrimitiveRenderAddLine();
    REPrimitiveRenderSetLineColor();
    uint64_t result = REPrimitiveRenderSetLineWidth();
    v4 += 16;
  }
  while (v4 != 192);
  return result;
}

uint64_t re::makeQuaternionFromMatrix<float>(float32x4_t *a1)
{
  float32x4_t v1 = a1[1];
  int32x4_t v2 = (int32x4_t)vmulq_f32(*a1, *a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  float32x2_t v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  float32x4_t v5 = vmulq_n_f32(*a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  float32x4_t v6 = vmulq_f32(v1, v5);
  float32x4_t v7 = vmulq_f32(v5, v5);
  float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
  float32x4_t v9 = vsubq_f32(v1, vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]/ v8));
  int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  float32x4_t v11 = vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
  float32x4_t v12 = a1[2];
  float32x4_t v13 = vmulq_f32(v5, v12);
  float32x4_t v14 = vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]/ v8);
  float32x4_t v15 = vmulq_f32(v12, v11);
  float32x4_t v16 = vsubq_f32(v12, v14);
  v14.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
  float32x4_t v17 = vmulq_f32(v11, v11);
  float32x4_t v18 = vsubq_f32(v16, vmulq_n_f32(v11, v14.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
  int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
  int32x4_t v20 = (int32x4_t)vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
  float v21 = (float)(v5.f32[0] + v11.f32[1]) + *(float *)&v20.i32[2];
  if (v21 >= 0.0)
  {
    float v33 = sqrtf(v21 + 1.0);
    float32x2_t v34 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    float32x2_t v35 = vmul_f32(v34, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v34));
    return (uint64_t)vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v11, vuzp1q_s32((int32x4_t)v11, v20)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v20, vzip2q_s32(v20, (int32x4_t)v5))), vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35)).f32[0]);
  }
  else if (v5.f32[0] < v11.f32[1] || v5.f32[0] < *(float *)&v20.i32[2])
  {
    float v36 = 1.0 - v5.f32[0];
    if (v11.f32[1] >= *(float *)&v20.i32[2])
    {
      float v43 = sqrtf(v11.f32[1] + (float)(v36 - *(float *)&v20.i32[2]));
      *(float *)&unsigned int v44 = v43 + v43;
      float32x2_t v45 = vrecpe_f32((float32x2_t)v44);
      float32x2_t v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
      v47.i32[0] = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).u32[0];
      v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), *(float32x2_t *)v11.f32).u32[0];
      v46.i32[1] = v44;
      v47.i32[1] = 0.25;
      return (uint64_t)vmul_f32(v46, v47);
    }
    else
    {
      float32x2_t v37 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v36 - v11.f32[1]) + *(float *)&v20.i32[2])));
      float32x2_t v38 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v5, (int32x4_t)v11), *(float32x2_t *)v20.i8);
      float32x2_t v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
      v39.i32[0] = 2.0;
      v39.i32[0] = vmul_f32(v37, v39).u32[0];
      float32x2_t v40 = vrecpe_f32((float32x2_t)v39.u32[0]);
      float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39.u32[0], v40));
      float32x2_t v32 = vmul_n_f32(v38, vmul_f32(v41, vrecps_f32((float32x2_t)v39.u32[0], v41)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    float32x2_t v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    float32x2_t v23 = vadd_f32(*(float32x2_t *)v5.f32, v22);
    v22.i32[0] = 2.0;
    v22.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(v5.f32[0] + (float)((float)(1.0 - v11.f32[1])- *(float *)&v20.i32[2])))), v22).u32[0];
    v22.i32[1] = v23.i32[1];
    float32x2_t v24 = vrecpe_f32((float32x2_t)v22.u32[0]);
    float32x2_t v25 = vmul_f32(v24, vrecps_f32((float32x2_t)v22.u32[0], v24));
    unsigned __int32 v26 = vmul_f32(v25, vrecps_f32((float32x2_t)v22.u32[0], v25)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26;
    return (uint64_t)vmul_f32(v22, _D5);
  }
  return (uint64_t)v32;
}

float rf::ColorPalette::setColor(void *a1, int a2, long long *a3, float result)
{
  if (a2 >= 1 && (uint64_t)(a1[1] - *a1) >> 4 > (unint64_t)a2)
  {
    long long v4 = *a3;
    float v5 = 1.0;
    if (COERCE_FLOAT(*a3) <= 1.0) {
      LODWORD(v6) = *a3;
    }
    else {
      *(float *)&long long v6 = 1.0;
    }
    if (*(float *)&v4 < 0.0) {
      *(float *)&long long v6 = 0.0;
    }
    if (*((float *)&v4 + 1) <= 1.0) {
      LODWORD(v7) = HIDWORD(*(void *)a3);
    }
    else {
      float v7 = 1.0;
    }
    if (*((float *)&v4 + 1) >= 0.0) {
      float v8 = v7;
    }
    else {
      float v8 = 0.0;
    }
    *((float *)&v6 + 1) = v8;
    if (*((float *)&v4 + 2) <= 1.0) {
      LODWORD(v9) = *((void *)a3 + 1);
    }
    else {
      float v9 = 1.0;
    }
    if (*((float *)&v4 + 2) >= 0.0) {
      float v10 = v9;
    }
    else {
      float v10 = 0.0;
    }
    *((float *)&v6 + 2) = v10;
    if (*((float *)&v4 + 3) <= 1.0) {
      LODWORD(v5) = HIDWORD(*a3);
    }
    if (*((float *)&v4 + 3) >= 0.0) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = 0.0;
    }
    *((float *)&v6 + 3) = result;
    *(_OWORD *)(*a1 + 16 * a2) = v6;
  }
  return result;
}

uint64_t rf::ColorPalette::setColorVisibility(uint64_t this, unsigned int a2)
{
  if (*(void *)(this + 56))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 48);
    do
    {
      unint64_t v4 = v2 >> 6;
      uint64_t v5 = 1 << v2;
      if ((a2 >> v2)) {
        uint64_t v6 = *(void *)(v3 + 8 * v4) | v5;
      }
      else {
        uint64_t v6 = *(void *)(v3 + 8 * v4) & ~v5;
      }
      *(void *)(v3 + 8 * v4) = v6;
      ++v2;
    }
    while (v2 < *(void *)(this + 56));
  }
  return this;
}

rf::ColorPaletteMaterialARKit *rf::ColorPaletteMaterialARKit::ColorPaletteMaterialARKit(rf::ColorPaletteMaterialARKit *this)
{
  v10[1] = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((void *)this + 6) = 0;
  float v7 = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  v9[0] = xmmword_235AFC0A0;
  v9[1] = xmmword_235AFC0A0;
  void v9[2] = xmmword_235AFC0B0;
  void v9[3] = xmmword_235AFC0C0;
  void v9[4] = xmmword_235AFC0D0;
  v9[5] = xmmword_235AFC0E0;
  v9[6] = xmmword_235AFC0F0;
  v9[7] = xmmword_235AFC100;
  v9[8] = xmmword_235AFC110;
  id v9[9] = xmmword_235AFC120;
  _OWORD v9[10] = xmmword_235AFC130;
  v9[11] = xmmword_235AFC140;
  v9[12] = xmmword_235AFC150;
  v9[13] = xmmword_235AFC160;
  v9[14] = xmmword_235AFC170;
  v9[15] = xmmword_235AFC180;
  v9[16] = xmmword_235AFC190;
  v9[17] = xmmword_235AFC1A0;
  v9[18] = xmmword_235AFC1B0;
  v9[19] = xmmword_235AFC1C0;
  v9[20] = xmmword_235AFC1D0;
  v9[21] = xmmword_235AFC1E0;
  v9[22] = xmmword_235AFC1F0;
  v9[23] = xmmword_235AFC200;
  v9[24] = xmmword_235AFC210;
  v9[25] = xmmword_235AFC220;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l((char *)this, (char *)v9, (uint64_t)v10, 0x1AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  return this;
}

void sub_235AE0BD4(_Unwind_Exception *a1)
{
  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
    return;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 << 6 < v5 || v4 > (v6 << 6) - v5)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
    if ((unint64_t)(v6 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      unint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (!v8)
      {
        float32x4_t v11 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 8);
        goto LABEL_17;
      }
      if ((v8 & 0x8000000000000000) != 0) {
LABEL_13:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = 0;
    float32x4_t v11 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<REEntity **>>((uint64_t)&v21, ((v8 - 1) >> 6) + 1);
    uint64_t v21 = v12;
    *float32x4_t v11 = 0;
    uint64_t v13 = v21;
    uint64_t v14 = *(void *)(a1 + 8);
LABEL_17:
    unint64_t v15 = v14 + v5;
    float32x4_t v16 = *(void **)a1;
    if (v14 < 1)
    {
      LODWORD(v10) = 0;
      float v9 = v11;
    }
    else
    {
      unint64_t v17 = (unint64_t)v14 >> 6;
      if ((unint64_t)v14 >= 0x40)
      {
        uint64_t v18 = v13;
        memmove(v11, *(const void **)a1, 8 * v17);
        uint64_t v13 = v18;
      }
      float v9 = &v11[v17];
      uint64_t v10 = v14 & 0x3F;
      if (v10) {
        unint64_t *v9 = *v9 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v10) | v16[v17] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v10);
      }
      float32x4_t v16 = *(void **)a1;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v15;
    *(void *)(a1 + 16) = v13;
    if (v16) {
      operator delete(v16);
    }
    goto LABEL_26;
  }
  float v9 = (unint64_t *)(*(void *)a1 + 8 * (v4 >> 6));
  uint64_t v10 = *(void *)(a1 + 8) & 0x3FLL;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = a2;
LABEL_26:
  if (a2 != v4)
  {
    if (v10)
    {
      if ((64 - v10) >= v5) {
        unint64_t v19 = v5;
      }
      else {
        unint64_t v19 = (64 - v10);
      }
      *v9++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v19)) & (-1 << v10);
      v5 -= v19;
    }
    unint64_t v20 = v5 >> 6;
    if (v5 >= 0x40) {
      memset(v9, 255, 8 * v20);
    }
    if ((v5 & 0x3F) != 0) {
      v9[v20] |= 0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F);
    }
  }
}

void sub_235AE0DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

rf::ColorPaletteClassificationARKit *rf::ColorPaletteClassificationARKit::ColorPaletteClassificationARKit(rf::ColorPaletteClassificationARKit *this)
{
  v10[1] = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((void *)this + 6) = 0;
  float v7 = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  v9[0] = xmmword_235AFC230;
  v9[1] = xmmword_235AF7A80;
  void v9[2] = xmmword_235AFC240;
  void v9[3] = xmmword_235AFC250;
  void v9[4] = xmmword_235AFC260;
  v9[5] = xmmword_235AFC270;
  v9[6] = xmmword_235AFC280;
  v9[7] = xmmword_235AFC290;
  v9[8] = xmmword_235AFC2A0;
  id v9[9] = xmmword_235AFC2B0;
  _OWORD v9[10] = xmmword_235AFC2C0;
  v9[11] = xmmword_235AFC2D0;
  v9[12] = xmmword_235AFC2E0;
  v9[13] = xmmword_235AFC2F0;
  v9[14] = xmmword_235AFC300;
  v9[15] = xmmword_235AFC310;
  v9[16] = xmmword_235AFC320;
  v9[17] = xmmword_235AFC330;
  v9[18] = xmmword_235AFC340;
  v9[19] = xmmword_235AFC350;
  v9[20] = xmmword_235AFC360;
  v9[21] = xmmword_235AFC370;
  v9[22] = xmmword_235AFC380;
  v9[23] = xmmword_235AFC390;
  v9[24] = xmmword_235AFC3A0;
  v9[25] = xmmword_235AFC3B0;
  _OWORD v9[26] = xmmword_235AFC3C0;
  v9[27] = xmmword_235AFC3D0;
  v9[28] = xmmword_235AFC3E0;
  v9[29] = xmmword_235AFC3F0;
  v9[30] = xmmword_235AFC400;
  v9[31] = xmmword_235AFC410;
  v9[32] = xmmword_235AFC420;
  v9[33] = xmmword_235AFC430;
  v9[34] = xmmword_235AFC440;
  v9[35] = xmmword_235AFC450;
  v9[36] = xmmword_235AFC460;
  v9[37] = xmmword_235AFC470;
  v9[38] = xmmword_235AFC480;
  v9[39] = xmmword_235AFC490;
  v9[40] = xmmword_235AFC4A0;
  v9[41] = xmmword_235AFC4B0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l((char *)this, (char *)v9, (uint64_t)v10, 0x2AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  return this;
}

void sub_235AE1054(_Unwind_Exception *a1)
{
  rf::ColorPaletteMaterialARKit::~ColorPaletteMaterialARKit(v1);
  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPKS1_S7_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  float v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *float v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    float v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  float32x4_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_17:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *uint64_t v12 = &v9[v17];
  return result;
}

void RFSyntheticEnvironmentServiceCreate()
{
  if (qword_26AB58B40 != -1) {
    dispatch_once(&qword_26AB58B40, &__block_literal_global_14);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

uint64_t RFSyntheticEnvironmentServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  float v9 = a3;
  uint64_t v10 = ECSManagerNullable;
  char v11 = v7;
  uint64_t v12 = a2;
  char v13 = 1;
  uint64_t v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 8) + 16))(v5 + 8, &v9);
}

void *RFSyntheticEnvironmentServiceSetFinishedLoadingCallback(uint64_t a1, uint64_t a2)
{
  float32x4_t v11[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v8 = 0;
  if (a2)
  {
    v7[0] = &unk_26E8F6440;
    v7[1] = MEMORY[0x237DEE740](a2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    unk_26E8F6458(v7, v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v3 = v2 + 176;
  if (v9 != (void *)(v2 + 176))
  {
    unint64_t v4 = v10;
    uint64_t v5 = *(void *)(v2 + 200);
    if (v10 == v9)
    {
      if (v5 == v3)
      {
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, v11);
        (*(void (**)(void *))(*v10 + 32))(v10);
        uint64_t v10 = 0;
        (*(void (**)(void, void *))(**(void **)(v2 + 200) + 24))(*(void *)(v2 + 200), v9);
        (*(void (**)(void))(**(void **)(v2 + 200) + 32))(*(void *)(v2 + 200));
        *(void *)(v2 + 200) = 0;
        uint64_t v10 = v9;
        (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, v2 + 176);
        (*(void (**)(void *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v9[0] + 24))(v9, v2 + 176);
        (*(void (**)(void *))(*v10 + 32))(v10);
        uint64_t v10 = *(void **)(v2 + 200);
      }
      *(void *)(v2 + 200) = v3;
    }
    else if (v5 == v3)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v2 + 176, v9);
      (*(void (**)(void))(**(void **)(v2 + 200) + 32))(*(void *)(v2 + 200));
      *(void *)(v2 + 200) = v10;
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = *(void **)(v2 + 200);
      *(void *)(v2 + 200) = v4;
    }
  }
  std::__function::__value_func<void ()(NSURL *,NSError *)>::~__value_func[abi:ne180100](v9);
  return std::__function::__value_func<void ()(NSURL *,NSError *)>::~__value_func[abi:ne180100](v7);
}

void sub_235AE15C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer28SyntheticEnvironmentConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_25[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      unint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    unint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  unint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::SyntheticEnvironmentConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58B48 = 0u;
  xmmword_26AB58B58 = 0u;
  xmmword_26AB58B68 = 0u;
  unk_26AB58B78 = 0u;
  xmmword_26AB58B88 = 0u;
  unk_26AB58B98 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58B48 + 1) = v7;
  *(void *)&xmmword_26AB58B58 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::initCallback;
  *(void *)&xmmword_26AB58B68 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::finalizeCallback;
  qword_26AB58B80 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58B88 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_15 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AE177C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::SyntheticEnvironmentConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    rf::data_flow::consumer::SyntheticEnvironmentConsumer::~SyntheticEnvironmentConsumer((rf::data_flow::consumer::SyntheticEnvironmentConsumer *)(v2 + 8));
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F6440;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::destroy(uint64_t a1)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(NSURL *,NSError *),std::allocator<void({block_pointer} {__strong})(NSURL *,NSError *)>,void ()(NSURL *,NSError *)>::target_type()
{
}

void *std::__function::__value_func<void ()(NSURL *,NSError *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void RFVFXCollisionServiceCreate()
{
  if (qword_26AB58BB0 != -1) {
    dispatch_once(&qword_26AB58BB0, &__block_literal_global_15);
  }
  _CFRuntimeCreateInstance();
  operator new();
}

uint64_t RFVFXCollisionServiceUpdateByDeltaTime(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t ECSManagerNullable = RESceneGetECSManagerNullable();
  if (ECSManagerNullable)
  {
    uint64_t ECSManagerNullable = REECSManagerGetServiceLocator();
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  float v9 = a3;
  uint64_t v10 = ECSManagerNullable;
  char v11 = v7;
  uint64_t v12 = a2;
  char v13 = 1;
  uint64_t v14 = 0;
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)(v5 + 8) + 16))(v5 + 8, &v9);
}

void ___ZN2rf17ClassRegistrationINS_14CustomCFObjectINS_9data_flow8consumer20VFXCollisionConsumerEEEE13registerClassEv_block_invoke()
{
  size_t v0 = 0;
  int v1 = 1;
  for (char i = 114; ; char i = aStdStringViewR_26[v0++ + 51])
  {
    if (i == 91)
    {
      int v3 = 1;
      goto LABEL_8;
    }
    if (i == 93) {
      break;
    }
    if (!i)
    {
      size_t v0 = 0;
      HIBYTE(v9) = 0;
      unint64_t v4 = __dst;
      goto LABEL_18;
    }
LABEL_9:
    ;
  }
  int v3 = -1;
LABEL_8:
  v1 += v3;
  if (v1) {
    goto LABEL_9;
  }
  if (v0 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v0 >= 0x17)
  {
    uint64_t v5 = (v0 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v0 | 7) != 0x17) {
      uint64_t v5 = v0 | 7;
    }
    uint64_t v6 = v5 + 1;
    unint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)v0;
    int64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_17;
  }
  HIBYTE(v9) = v0;
  unint64_t v4 = __dst;
  if (v0) {
LABEL_17:
  }
    memcpy(v4, "rf::data_flow::consumer::VFXCollisionConsumer]", v0);
LABEL_18:
  *((unsigned char *)v4 + v0) = 0;
  xmmword_26AB58BB8 = 0u;
  xmmword_26AB58BC8 = 0u;
  xmmword_26AB58BD8 = 0u;
  unk_26AB58BE8 = 0u;
  xmmword_26AB58BF8 = 0u;
  unk_26AB58C08 = 0u;
  char v7 = __dst;
  if (v9 < 0) {
    char v7 = (void **)__dst[0];
  }
  *((void *)&xmmword_26AB58BB8 + 1) = v7;
  *(void *)&xmmword_26AB58BC8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::initCallback;
  *(void *)&xmmword_26AB58BD8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::finalizeCallback;
  qword_26AB58BF0 = (uint64_t)rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyFormattingDescriptionCallback;
  *(void *)&xmmword_26AB58BF8 = rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyDebugDescriptionCallback;
  _MergedGlobals_16 = _CFRuntimeRegisterClass();
  if (SHIBYTE(v9) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235AE1D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::initCallback(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t *rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::finalizeCallback(uint64_t a1)
{
  return std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyFormattingDescriptionCallback()
{
  return 0;
}

uint64_t rf::ClassRegistration<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>>::copyDebugDescriptionCallback()
{
  return 0;
}

uint64_t *std::unique_ptr<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject,std::default_delete<rf::CustomCFObject<rf::data_flow::consumer::VFXCollisionConsumer>::BridgableObject>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    *(void *)(v2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = &unk_26E8F4868;
    std::__hash_table<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::__unordered_map_hasher<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::hash<REScene *>,std::equal_to<REScene *>,true>,std::__unordered_map_equal<REScene *,std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>,std::equal_to<REScene *>,std::hash<REScene *>,true>,std::allocator<std::__hash_value_type<REScene *,std::unordered_map<REComponent *,std::unordered_map<rf::data_flow::RFUUID,long long,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,long long>>>>>>>::~__hash_table(v2 + 32);
    JUMPOUT(0x237DEE2B0);
  }
  return result;
}

void sub_235AE2510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a40) {

  }
  std::__function::__value_func<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__value_func[abi:ne180100](&STACK[0x550]);
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x570]);
  _Unwind_Resume(a1);
}

void std::function<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *))(*(void *)v4 + 48))(v4, &v5);
}

void sub_235AE269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::isInputProbe(_anonymous_namespace_ *this, ARAnchor *a2)
{
  uint64_t v2 = this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_235AE26F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::createInputProbeFromARAnchor(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = [(_anonymous_namespace_ *)v4 identifier];
  rf::data_flow::RFUUID::copy((rf::data_flow::RFUUID *)v5, (uint64_t)v30);
  [(_anonymous_namespace_ *)v4 transform];
  long long v31 = v6;
  long long v32 = v7;
  long long v33 = v8;
  long long v34 = v9;
  [(_anonymous_namespace_ *)v4 extent];
  long long v35 = v10;
  LOBYTE(v36) = 0;
  char v37 = 0;
  uint64_t v38 = 1065353216;

  char v11 = [(_anonymous_namespace_ *)v4 environmentTexture];
  LOBYTE(v5) = v11 == 0;

  if ((v5 & 1) == 0)
  {
    uint64_t v12 = [(_anonymous_namespace_ *)v4 environmentTexture];
    if (v37)
    {
      char v13 = v36;
      float v36 = v12;
    }
    else
    {
      float v36 = v12;
      char v37 = 1;
    }
  }
  uint64_t v14 = rf::realityFusionLogObject(v12);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v30, __p);
    int v15 = v25;
    float32x4_t v16 = (void **)__p[0];
    uint64_t v17 = [(_anonymous_namespace_ *)v4 environmentTexture];
    uint64_t v18 = (void *)v17;
    unint64_t v19 = __p;
    if (v15 < 0) {
      unint64_t v19 = v16;
    }
    *(_DWORD *)long long buf = 136315394;
    float32x4_t v27 = v19;
    __int16 v28 = 2048;
    uint64_t v29 = v17;
    _os_log_impl(&dword_235A7C000, v14, OS_LOG_TYPE_DEFAULT, "RFARSessionObserver: Updating probe %s with texture %p", buf, 0x16u);

    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  long long v20 = v34;
  long long v21 = v35;
  *(_OWORD *)(a2 + 64) = v33;
  *(_OWORD *)(a2 + 80) = v20;
  *(_OWORD *)(a2 + 96) = v21;
  long long v22 = v30[1];
  *(_OWORD *)a2 = v30[0];
  *(_OWORD *)(a2 + 16) = v22;
  long long v23 = v32;
  *(_OWORD *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v23;
  *(unsigned char *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  if (v37)
  {
    *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v36;
    *(unsigned char *)(a2 + 120) = 1;
  }
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v38;
}

void sub_235AE290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a35) {
  _Unwind_Resume(a1);
  }
}

uint64_t anonymous namespace'::isInputAnchor(_anonymous_namespace_ *this, ARAnchor *a2)
{
  uint64_t v2 = this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass) {
    int isInputProbe = 1;
  }
  else {
  uint64_t v6 = isInputProbe ^ 1u;
  }

  return v6;
}

void sub_235AE29DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_235AE2FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,char a38)
{
  if (a38) {

  }
  std::__function::__value_func<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__value_func[abi:ne180100](&STACK[0x540]);
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x560]);
  _Unwind_Resume(a1);
}

void sub_235AE37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a36) {

  }
  std::__function::__value_func<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__value_func[abi:ne180100](&STACK[0x530]);
  rf::data_flow::provider::InputData::~InputData((void **)&STACK[0x550]);
  _Unwind_Resume(a1);
}

void sub_235AE3D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,void *a39)
{
  if (a38) {

  }
  rf::data_flow::provider::InputData::~InputData(&a39);
  _Unwind_Resume(a1);
}

void sub_235AE4188(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_235AE4394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<rf::data_flow::EnvironmentProbe>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<rf::data_flow::EnvironmentProbe>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__function::__value_func<rf::data_flow::provider::InputData ()(NSArray<ARAnchor *> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE11cache_beginEv(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ43__RFARSessionObserver_processAddedAnchors__EUb_E3__0EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    uint64_t v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235AE4760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<rf::data_flow::EnvironmentProbe>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::EnvironmentProbe>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<rf::data_flow::EnvironmentProbe>,rf::data_flow::EnvironmentProbe*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 144)
    {
      if (*(unsigned char *)(i - 24)) {
    }
      }
  }
  return a1;
}

char *std::vector<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

void anonymous namespace'::createInputAnchorFromARAnchor(_anonymous_namespace_ *this, ARAnchor *a2)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  long long v122 = a2;
  rf::helpers::getBaseAnchorPropertiesFromARAnchor((rf::helpers *)v122, (uint64_t)&v142);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = v122;
    uint64_t v4 = [(ARAnchor *)v3 planeExtent];
    [v4 rotationOnYAxis];
    __float2 v6 = __sincosf_stret(v5);

    [(ARAnchor *)v3 center];
    long long v119 = v7;
    long long v8 = [(ARAnchor *)v3 geometry];
    uint64_t v9 = [v8 boundaryVertexCount];

    *(_OWORD *)std::string __p = 0uLL;
    char v124 = 0;
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        char v11 = [(ARAnchor *)v3 geometry];
        uint64_t v12 = [v11 boundaryVertices];
        uint64_t v13 = v12;
        if (__p[1] >= v124)
        {
          uint64_t v15 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          if ((unint64_t)(v15 + 1) >> 60) {
            _ZNKSt3__16vectorIDv3_fNS_9allocatorIS1_EEE20__throw_length_errorB8ne180100Ev();
          }
          unint64_t v16 = (v124 - (char *)__p[0]) >> 3;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)(v124 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v124, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          unint64_t v19 = &v18[16 * v15];
          *(_OWORD *)unint64_t v19 = *(_OWORD *)(v13 + 16 * i);
          uint64_t v14 = (uint64_t)(v19 + 16);
          long long v20 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              long long v21 = *((_OWORD *)v20 - 1);
              v20 -= 16;
              *((_OWORD *)v19 - 1) = v21;
              v19 -= 16;
            }
            while (v20 != __p[0]);
            long long v20 = (char *)__p[0];
          }
          __p[0] = v19;
          char v124 = &v18[16 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(_OWORD *)__p[1] = *(_OWORD *)(v12 + 16 * i);
          uint64_t v14 = (uint64_t)__p[1] + 16;
        }
        __p[1] = (void *)v14;
      }
    }
    long long v125 = v142;
    long long v126 = v143;
    float32x4_t v116 = v145;
    long long v127 = v144;
    long long v140 = v146;
    float v22 = *(float *)&v147[4];
    int v141 = *(_DWORD *)v147;
    long long v138 = *(_OWORD *)&v147[8];
    char v139 = v147[24];
    id v23 = v148;
    id v148 = 0;
    float32x2_t v24 = [(ARAnchor *)v3 planeExtent];
    [v24 width];
    float v113 = v25;
    unsigned __int32 v26 = [(ARAnchor *)v3 planeExtent];
    [v26 height];
    float v110 = v27;
    int v28 = [(ARAnchor *)v3 alignment];
    int v29 = [(ARAnchor *)v3 classification];
    float32x4_t v30 = v124;
    char v124 = 0;

    float32x2_t v31 = vrsqrte_f32((float32x2_t)1065353216);
    float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v31, v31)));
    float32x4_t v43 = vmulq_n_f32((float32x4_t)xmmword_235AF75F0, vmul_f32(v32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v32, v32))).f32[0]);
    float v33 = vmulq_f32(v43, v43).f32[0];
    float v34 = vmuls_lane_f32(v43.f32[1], *(float32x2_t *)v43.f32, 1);
    float v35 = vmuls_lane_f32(v43.f32[2], v43, 2);
    float v36 = vmuls_lane_f32(v43.f32[0], *(float32x2_t *)v43.f32, 1);
    float v37 = vmuls_lane_f32(v43.f32[0], v43, 2);
    v32.f32[0] = vmuls_lane_f32(v43.f32[1], v43, 2);
    float v38 = v6.__sinval * v43.f32[0];
    float v39 = vmuls_lane_f32(v6.__sinval, *(float32x2_t *)v43.f32, 1);
    v43.f32[0] = vmuls_lane_f32(v6.__sinval, v43, 2);
    float v40 = -(float)(v43.f32[0] - (float)(v36 * (float)(1.0 - v6.__cosval)));
    float32_t v41 = v43.f32[0] + (float)(v36 * (float)(1.0 - v6.__cosval));
    float v42 = -(float)(v38 - (float)(v32.f32[0] * (float)(1.0 - v6.__cosval)));
    v43.i32[3] = 0;
    v43.f32[0] = v33 + (float)(v6.__cosval * (float)(1.0 - v33));
    v43.f32[1] = v41;
    HIDWORD(v45) = 0;
    HIDWORD(v44) = 0;
    *(float *)&long long v44 = v40;
    *((float *)&v44 + 1) = v34 + (float)(v6.__cosval * (float)(1.0 - v34));
    *((float *)&v44 + 2) = v38 + (float)(v32.f32[0] * (float)(1.0 - v6.__cosval));
    *(float *)&long long v45 = v39 + (float)(v37 * (float)(1.0 - v6.__cosval));
    *((float *)&v45 + 1) = v42;
    *((float *)&v45 + 2) = v35 + (float)(v6.__cosval * (float)(1.0 - v35));
    long long v46 = v119;
    HIDWORD(v46) = 1.0;
    *(void *)&long long v47 = LODWORD(v33);
    *(float *)&long long v47 = v113;
    *((void *)&v47 + 1) = LODWORD(v110);
    if (v29) {
      goto LABEL_22;
    }
    float32x4_t v55 = vmulq_f32(v116, (float32x4_t)xmmword_235AF75F0);
    float v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
    if (v56 > 0.70711 || v56 < -0.70711)
    {
      if (v116.f32[1] < 0.0)
      {
        int v29 = 3;
        goto LABEL_22;
      }
      if (v22 < -0.5)
      {
        int v29 = 2;
        goto LABEL_22;
      }
      if (v113 > 0.4 && v110 > 0.4)
      {
        int v29 = 4;
        goto LABEL_22;
      }
    }
    else if (v113 > 1.0 && v110 > 1.0)
    {
      int v29 = 1;
LABEL_22:
      long long v48 = v126;
      *(_OWORD *)this = v125;
      *((_OWORD *)this + 1) = v48;
      *((_OWORD *)this + 2) = v127;
      *((float32x4_t *)this + 3) = v116;
      *((_OWORD *)this + 4) = v140;
      *((_DWORD *)this + 20) = v141;
      *((float *)this + 21) = v22;
      *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = v138;
      *((unsigned char *)this + 104) = v139;
      *((void *)this + 14) = v23;
      v43.f32[2] = -(float)(v39 - (float)(v37 * (float)(1.0 - v6.__cosval)));
      *((float32x4_t *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v43;
      *((_OWORD *)this + 9) = v44;
      *((_OWORD *)this + 10) = v45;
      *((_OWORD *)this + 11) = v46;
      *((_OWORD *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v47;
      *((_DWORD *)this + 52) = v28;
      *((_DWORD *)this + 53) = v29;
      *(_OWORD *)((char *)this + 216) = *(_OWORD *)__p;
      *((void *)this + 29) = v30;
      *((_DWORD *)this + 64) = 1;

      goto LABEL_61;
    }
    int v29 = 0;
    goto LABEL_22;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v49 = v122;
    long long v129 = v146;
    v130[0] = *(_OWORD *)v147;
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
    long long v125 = v142;
    long long v126 = v143;
    long long v127 = v144;
    float32x4_t v128 = v145;
    id v50 = v148;
    id v148 = 0;
    id v131 = v50;
    v132[0] = [(ARAnchor *)v49 isDetectionOnly];
    long long v51 = [(ARAnchor *)v49 name];
    if (v51)
    {
      id v118 = [(ARAnchor *)v49 name];
      std::string::basic_string[abi:ne180100]<0>(&v132[8], (char *)[v118 UTF8String]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v132[8], "");
    }
    unint64_t v70 = [(ARAnchor *)v49 referenceImage];
    unsigned int v71 = [v70 resourceGroupName];
    if (v71)
    {
      id v115 = [(ARAnchor *)v49 referenceImage];
      id v112 = [v115 resourceGroupName];
      std::string::basic_string[abi:ne180100]<0>(&v133[8], (char *)[v112 UTF8String]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v133[8], "");
    }
    [(ARAnchor *)v49 estimatedScaleFactor];
    double v73 = v72;
    uint64_t v74 = [(ARAnchor *)v49 referenceImage];
    [v74 physicalSize];
    double v76 = v75;
    uint64_t v77 = [(ARAnchor *)v49 referenceImage];
    [v77 physicalSize];
    *(float *)&unsigned int v78 = v76;
    v79.i64[0] = v78;
    *(float *)&unsigned int v81 = v80;
    v79.i64[1] = v81;
    float v82 = v73;
    float32x4_t v135 = vmulq_n_f32(v79, v82);

    if (v71)
    {
    }
    if (v51) {

    }
    long long v83 = v130[0];
    *((_OWORD *)this + 4) = v129;
    *((_OWORD *)this + 5) = v83;
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
    long long v84 = v126;
    *(_OWORD *)this = v125;
    *((_OWORD *)this + 1) = v84;
    float32x4_t v85 = v128;
    *((_OWORD *)this + 2) = v127;
    *((float32x4_t *)this + 3) = v85;
    id v86 = v131;
    id v131 = 0;
    *((void *)this + 14) = v86;
    *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = v132[0];
    *(_OWORD *)((char *)this + 136) = *(_OWORD *)&v132[8];
    *((void *)this + 19) = *(void *)v133;
    *(void *)&v132[8] = 0;
    *(void *)&v132[16] = 0;
    *(void *)long long v133 = 0;
    *((_OWORD *)this + 10) = *(_OWORD *)&v133[8];
    *((void *)this + 22) = v134;
    *(void *)&v133[8] = 0;
    *(void *)&v133[16] = 0;
    *(void *)&long long v134 = 0;
    *((float32x4_t *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v135;
    *((_DWORD *)this + 64) = 2;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      std::string v52 = v122;
      long long v129 = v146;
      v130[0] = *(_OWORD *)v147;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
      long long v125 = v142;
      long long v126 = v143;
      long long v127 = v144;
      float32x4_t v128 = v145;
      id v53 = v148;
      id v148 = 0;
      id v131 = v53;
      uint64_t v54 = [(ARAnchor *)v52 name];
      if (v54)
      {
        id v115 = [(ARAnchor *)v52 name];
        std::string::basic_string[abi:ne180100]<0>(v132, (char *)[v115 UTF8String]);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v132, "");
      }
      long long v121 = [(ARAnchor *)v52 referenceObject];
      uint64_t v93 = [v121 resourceGroupName];
      if (v93)
      {
        id v112 = [(ARAnchor *)v52 referenceObject];
        id v109 = [v112 resourceGroupName];
        std::string::basic_string[abi:ne180100]<0>(v133, (char *)[v109 UTF8String]);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v133, "");
      }
      v135.i8[0] = 0;
      v135.i64[1] = 0;
      uuid_clear((unsigned __int8 *)&v134);
      uint64_t v94 = [(ARAnchor *)v52 referenceObject];
      [v94 center];
      long long v136 = v95;
      long long v96 = [(ARAnchor *)v52 referenceObject];
      [v96 extent];
      long long v137 = v97;

      if (v93)
      {
      }
      if (v54) {

      }
      long long v98 = v130[0];
      *((_OWORD *)this + 4) = v129;
      *((_OWORD *)this + 5) = v98;
      *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
      long long v99 = v126;
      *(_OWORD *)this = v125;
      *((_OWORD *)this + 1) = v99;
      float32x4_t v100 = v128;
      *((_OWORD *)this + 2) = v127;
      *((float32x4_t *)this + 3) = v100;
      id v101 = v131;
      id v131 = 0;
      *((void *)this + 14) = v101;
      long long v102 = *(_OWORD *)v132;
      *((void *)this + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *(void *)&v132[16];
      *((_OWORD *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v102;
      memset(v132, 0, sizeof(v132));
      *((void *)this + 21) = *(void *)&v133[16];
      *(_OWORD *)((char *)this + 152) = *(_OWORD *)v133;
      memset(v133, 0, sizeof(v133));
      float32x4_t v103 = v135;
      *((_OWORD *)this + 11) = v134;
      *((float32x4_t *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v103;
      long long v104 = v137;
      *((_OWORD *)this + 13) = v136;
      *((_OWORD *)this + 14) = v104;
      *((_DWORD *)this + 64) = 3;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v57 = v122;
        long long v129 = v146;
        v130[0] = *(_OWORD *)v147;
        *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
        long long v125 = v142;
        long long v126 = v143;
        long long v127 = v144;
        float32x4_t v128 = v145;
        id v58 = v148;
        id v148 = 0;
        [(ARAnchor *)v57 leftEyeTransform];
        long long v117 = v60;
        long long v120 = v59;
        long long v111 = v62;
        long long v114 = v61;
        [(ARAnchor *)v57 rightEyeTransform];
        long long v63 = v130[0];
        *((_OWORD *)this + 4) = v129;
        *((_OWORD *)this + 5) = v63;
        *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
        long long v64 = v126;
        *(_OWORD *)this = v125;
        *((_OWORD *)this + 1) = v64;
        float32x4_t v65 = v128;
        *((_OWORD *)this + 2) = v127;
        *((float32x4_t *)this + 3) = v65;
        *((void *)this + 14) = v58;
        *((_OWORD *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v120;
        *((_OWORD *)this + 9) = v117;
        *((_OWORD *)this + 10) = v114;
        *((_OWORD *)this + 11) = v111;
        *((_OWORD *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v66;
        *((_OWORD *)this + 13) = v67;
        *((_OWORD *)this + 14) = v68;
        *((_OWORD *)this + 15) = v69;
        *((_DWORD *)this + 64) = 4;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v87 = v122;
          long long v129 = v146;
          v130[0] = *(_OWORD *)v147;
          *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v147[9];
          long long v125 = v142;
          long long v126 = v143;
          long long v127 = v144;
          float32x4_t v128 = v145;
          id v88 = v148;
          id v148 = 0;
          [(ARAnchor *)v87 estimatedScaleFactor];
          *(float *)&double v89 = v89;
          long long v90 = v130[0];
          *((_OWORD *)this + 4) = v129;
          *((_OWORD *)this + 5) = v90;
          *(_OWORD *)((char *)this + 89) = *(_OWORD *)((char *)v130 + 9);
          long long v91 = v126;
          *(_OWORD *)this = v125;
          *((_OWORD *)this + 1) = v91;
          float32x4_t v92 = v128;
          *((_OWORD *)this + 2) = v127;
          *((float32x4_t *)this + 3) = v92;
          *((void *)this + 14) = v88;
          *((_DWORD *)this + 32) = LODWORD(v89);
          *((_DWORD *)this + 64) = 5;
        }
        else
        {
          id v105 = v148;
          id v148 = 0;
          long long v106 = *(_OWORD *)v147;
          *((_OWORD *)this + 4) = v146;
          *((_OWORD *)this + 5) = v106;
          *(_OWORD *)((char *)this + 89) = *(_OWORD *)&v147[9];
          long long v107 = v143;
          *(_OWORD *)this = v142;
          *((_OWORD *)this + 1) = v107;
          float32x4_t v108 = v145;
          *((_OWORD *)this + 2) = v144;
          *((float32x4_t *)this + 3) = v108;
          *((void *)this + 14) = v105;
          *((_DWORD *)this + 64) = 0;
        }
      }
    }
  }
LABEL_61:
}

void sub_235AE5320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

double _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processUpdatedAnchors__EUb0_E3__2EENS_14logical_negateIPFbP8ARAnchorEEEE11cache_beginEv(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processUpdatedAnchors__EUb0_E3__2EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processUpdatedAnchors__EUb0_E3__2EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    __float2 v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235AE5640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processRemovedAnchors__EUb1_E3__4EENS_14logical_negateIPFbP8ARAnchorEEEE11cache_beginEv(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processRemovedAnchors__EUb1_E3__4EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ45__RFARSessionObserver_processRemovedAnchors__EUb1_E3__4EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    __float2 v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235AE572C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ53__RFARSessionObserver_processUpdatedExternalAnchors__EUb2_E3__7EENS_14logical_negateIPFbP8ARAnchorEEEE11cache_beginEv(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v3 = *(void *)(a1 + 16);
    *((void *)&v3 + 1) = a1 + 32;
    _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ53__RFARSessionObserver_processUpdatedExternalAnchors__EUb2_E3__7EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(a1, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return result;
}

void _ZN6ranges14remove_if_viewINS_14transform_viewINS_9iota_viewImmEEZZ53__RFARSessionObserver_processUpdatedExternalAnchors__EUb2_E3__7EENS_14logical_negateIPFbP8ARAnchorEEEE15satisfy_forwardERNS_14basic_iteratorINS_14adaptor_cursorINSD_INS3_6cursorEEENS_19iter_transform_viewIS3_NS_10indirectedIS4_EEE7adaptorILb0EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)a2; v2 != i; *(void *)a2 = i)
  {
    __float2 v6 = [***(id ***)(a2 + 8) objectAtIndexedSubscript:(int)i];
    char v7 = (*(uint64_t (**)(void))(a1 + 48))();

    if (v7) {
      break;
    }
    uint64_t i = *(void *)a2 + 1;
  }
}

void sub_235AE5818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *rf::AnchorDefinitionComponent::instance(rf::AnchorDefinitionComponent *this)
{
  {
    rf::AnchorDefinitionComponent::AnchorDefinitionComponent((rf::AnchorDefinitionComponent *)&rf::AnchorDefinitionComponent::instance(void)::instance);
  }
  return &rf::AnchorDefinitionComponent::instance(void)::instance;
}

void sub_235AE5888(_Unwind_Exception *a1)
{
}

rf::AnchorDefinitionComponent *rf::AnchorDefinitionComponent::AnchorDefinitionComponent(rf::AnchorDefinitionComponent *this)
{
  *(void *)this = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)this + std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  rf::AnchorDefinitionComponent::buildIntrospectionInfo((uint64_t)this);
  rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(this);
  return this;
}

void sub_235AE58F4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 13);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 9);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 5);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

void *rf::AnchorDefinitionComponent::deinit(rf::AnchorDefinitionComponent *this)
{
  *((_DWORD *)this + 3std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  if (*(void *)this)
  {
    RECustomComponentTypeDestroy();
    *(void *)this = 0;
  }
  if (*((void *)this + 17))
  {
    RECIntrospectionStructUnregister();
    *((void *)this + 17) = 0;
  }
  if (*((void *)this + 18))
  {
    RECIntrospectionEnumUnregister();
    *((void *)this + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100]((void *)this + 1);
  std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100]((void *)this + 5);
  std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100]((void *)this + 9);
  return std::__function::__value_func<void ()(REComponent *)>::operator=[abi:ne180100]((void *)this + 13);
}

uint64_t rf::AnchorDefinitionComponent::buildIntrospectionInfo(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(void *)(this + 144))
  {
    this = REEnumBuilderCreate();
    if (this)
    {
      if (REEnumBuilderInit())
      {
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        REEnumBuilderAddCase();
        *(void *)(v1 + 144) = RECIntrospectionEnumRegister();
      }
      this = REEnumBuilderDestroy();
    }
  }
  if (!*(void *)(v1 + 136))
  {
    this = REStructBuilderCreate();
    if (this)
    {
      uint64_t v2 = this;
      if (REStructBuilderInit())
      {
        REStructBuilderAddMemberCStyleArrayDataTypeWithTag();
        REStructBuilderAddMemberEnumWithTag();
        REStructBuilderAddMemberDataTypeWithTag();
        REStructBuilderAddMemberDataTypeWithTag();
        REStructBuilderAddMemberDataTypeWithTag();
        REStructBuilderAddMemberDataTypeWithTag();
        REStructBuilderAddMemberDataTypeWithTag();
        *(void *)(v1 + 136) = RECIntrospectionStructRegister();
      }
      return MEMORY[0x270F205A0](v2);
    }
  }
  return this;
}

void *rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void *this)
{
  if (!*this)
  {
    uint64_t v1 = this;
    this = (void *)RECustomComponentTypeCreate();
    void *v1 = this;
  }
  return this;
}

void rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_0::__invoke()
{
}

void rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_1::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x237DEE2B0);
  }
}

uint64_t rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_2::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result + 8;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_3::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 64))
  {
    uint64_t v3 = result + 40;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_4::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 96))
  {
    uint64_t v3 = result + 72;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

uint64_t rf::AnchorDefinitionComponent::registerAnchorDefinitionComponent(void)::$_5::__invoke(uint64_t a1)
{
  RECustomComponentGetType();
  uint64_t result = RECustomComponentTypeGetContext();
  if (*(void *)(result + 128))
  {
    uint64_t v3 = result + 104;
    return std::function<void ()(REComponent *)>::operator()(v3, a1);
  }
  return result;
}

_DWORD *rf::data_flow::consumer::EnvironmentProbeVisualizer::drawEnvironmentProbe(_DWORD *result, float32x4_t *a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result)
  {
    uint64_t result = (_DWORD *)rf::helpers::drawAxis();
    int v4 = *v3;
  }
  if ((v4 & 2) != 0)
  {
    __asm { FMOV            V0.4S, #1.0 }
    return (_DWORD *)rf::helpers::drawBoundingBox(*((void *)v3 + 2), *((void *)v3 + 1), a2 + 2, a2[6].f32);
  }
  return result;
}

void RFPlacementComponentSetUp(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  _OWORD v17[4] = *MEMORY[0x263EF8340];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v12 = a5;
  uint64_t v13 = rf::PlacementComponentTypeInfo::instance(v12);
  v17[0] = &unk_26E8F6508;
  v17[1] = MEMORY[0x237DEE740](v9);
  void v17[3] = v17;
  v16[0] = &unk_26E8F6598;
  v16[1] = MEMORY[0x237DEE740](v10);
  void v16[3] = v16;
  v15[0] = &unk_26E8F6628;
  v15[1] = MEMORY[0x237DEE740](v11);
  v15[3] = v15;
  v14[0] = &unk_26E8F66A8;
  v14[1] = MEMORY[0x237DEE740](v12);
  void v14[3] = v14;
  rf::PlacementComponentTypeInfo::initWithType(v13, a1, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14);
  std::__function::__value_func<RESRT ()(REComponent *)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<BOOL ()(REComponent *)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::~__value_func[abi:ne180100](v17);
}

void sub_235AE602C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  std::__function::__value_func<RESRT ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<unsigned char const* ()(REComponent *)>::~__value_func[abi:ne180100]((void *)(v6 - 88));

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F6508;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F6508;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFPlacementComponentSetUp::$_0,std::allocator<RFPlacementComponentSetUp::$_0>,unsigned char const* ()(REComponent *)>::target_type()
{
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F6598;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F6598;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFPlacementComponentSetUp::$_1,std::allocator<RFPlacementComponentSetUp::$_1>,BOOL ()(REComponent *)>::target_type()
{
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F6628;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F6628;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFPlacementComponentSetUp::$_2,std::allocator<RFPlacementComponentSetUp::$_2>,void ()(REComponent *)>::target_type()
{
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DEE2B0);
}

void *std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26E8F66A8;
  v2[1] = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E8F66A8;
  uint64_t result = MEMORY[0x237DEE740](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RFPlacementComponentSetUp::$_3,std::allocator<RFPlacementComponentSetUp::$_3>,RESRT ()(REComponent *)>::target_type()
{
}

void rf::detail::insertRoomBoundaryAnchorsInto(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      char v7 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(*a1 + 208), v4);
      uint64_t v8 = rf::realityFusionLogObject(v7);
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        if (v9)
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v4, __p);
          uint64_t v10 = __p;
          if (SBYTE7(v42) < 0) {
            uint64_t v10 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v10;
          uint64_t v11 = v8;
          uint64_t v12 = "ARState: Adding Room Anchor Again %s";
LABEL_11:
          _os_log_impl(&dword_235A7C000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0xCu);
          if (SBYTE7(v42) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (v9)
      {
        rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v4, __p);
        uint64_t v13 = __p;
        if (SBYTE7(v42) < 0) {
          uint64_t v13 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        uint64_t v11 = v8;
        uint64_t v12 = "ARState: Adding Room Anchor %s";
        goto LABEL_11;
      }

      uint64_t v15 = a3[1];
      unint64_t v14 = (unint64_t)a3[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v18 = *a3;
        uint64_t v19 = (v15 - *a3) >> 5;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v14 - (void)v18;
        if (v21 >> 4 > v20) {
          unint64_t v20 = v21 >> 4;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          id v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v22);
          uint64_t v18 = *a3;
          uint64_t v15 = a3[1];
        }
        else
        {
          id v23 = 0;
        }
        long long v24 = *(_OWORD *)(v4 + 16);
        float v25 = &v23[32 * v19];
        *(_OWORD *)float v25 = *(_OWORD *)v4;
        *((_OWORD *)v25 + 1) = v24;
        if (v15 == v18)
        {
          int v28 = &v23[32 * v19];
        }
        else
        {
          unsigned __int32 v26 = &v23[32 * v19];
          do
          {
            long long v27 = *((_OWORD *)v15 - 1);
            int v28 = v26 - 32;
            *((_OWORD *)v26 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v26 - 1) = v27;
            v15 -= 32;
            v26 -= 32;
          }
          while (v15 != v18);
        }
        uint64_t v17 = v25 + 32;
        *a3 = v28;
        a3[1] = v25 + 32;
        a3[2] = &v23[32 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        long long v16 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v4;
        *((_OWORD *)v15 + 1) = v16;
        uint64_t v17 = v15 + 32;
      }
      a3[1] = v17;
      if (*(unsigned char *)(v4 + 128))
      {
        uint64_t v29 = *a1;
        float32x4_t v30 = (_OWORD *)(*a1 + 248);
        int v31 = *(unsigned __int8 *)(*a1 + 280);
        long long v32 = *(_OWORD *)(v4 + 16);
        *float32x4_t v30 = *(_OWORD *)v4;
        v30[1] = v32;
        if (!v31) {
          *(unsigned char *)(v29 + 280) = 1;
        }
      }
      rf::detail::createRoomBoundary((uint64_t)__p, v4);
      uint64_t v33 = *a1 + 208;
      *(void *)long long buf = v4;
      float v34 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v33, v4, (int32x4_t **)buf);
      char v35 = v49;
      long long v36 = v48;
      *((_OWORD *)v34 + 9) = v47;
      *((_OWORD *)v34 + 10) = v36;
      long long v38 = v45;
      long long v37 = v46;
      long long v39 = v44;
      *((_OWORD *)v34 + 5) = v43;
      *((_OWORD *)v34 + 6) = v39;
      *((unsigned char *)v34 + 176) = v35;
      *((_OWORD *)v34 + 7) = v38;
      *((_OWORD *)v34 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v37;
      long long v40 = v42;
      *((_OWORD *)v34 + 3) = *(_OWORD *)__p;
      *((_OWORD *)v34 + 4) = v40;
      std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v34 + 24), (uint64_t)v50);
      std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v34 + 78), (uint64_t)v52);
      std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v34 + 132), (uint64_t)v54);
      if (v55) {
        rf::data_flow::consumer::Mesh::~Mesh(v54);
      }
      if (v53) {
        rf::data_flow::consumer::Mesh::~Mesh(v52);
      }
      if (v51) {
        rf::data_flow::consumer::Mesh::~Mesh(v50);
      }
      v4 += 1200;
    }
    while (v4 != v5);
  }
}

void sub_235AE6AAC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void rf::detail::createRoomBoundary(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  uuid_clear((unsigned __int8 *)a1);
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 1008) = 0;
  *(unsigned char *)(a1 + 14std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v8;
  rf::detail::createMeshFromInput(v9, a2 + 144);
  std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(a1 + 144), (uint64_t)v9);
  if (v10) {
    rf::data_flow::consumer::Mesh::~Mesh(v9);
  }
  rf::detail::createMeshFromInput(v9, a2 + 496);
  std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(a1 + 576), (uint64_t)v9);
  if (v10) {
    rf::data_flow::consumer::Mesh::~Mesh(v9);
  }
  rf::detail::createMeshFromInput(v9, a2 + 848);
  std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(a1 + 1008), (uint64_t)v9);
  if (v10) {
    rf::data_flow::consumer::Mesh::~Mesh(v9);
  }
}

void sub_235AE6C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a61) {
    rf::data_flow::consumer::Mesh::~Mesh((id *)&a9);
  }
  rf::data_flow::consumer::RoomBoundary::~RoomBoundary(v61);
  _Unwind_Resume(a1);
}

void rf::data_flow::consumer::RoomBoundary::~RoomBoundary(id *this)
{
  if (*((unsigned char *)this + 1424)) {
    rf::data_flow::consumer::Mesh::~Mesh(this + 126);
  }
  if (*((unsigned char *)this + 992)) {
    rf::data_flow::consumer::Mesh::~Mesh(this + 72);
  }
  if (*((unsigned char *)this + 560)) {
    rf::data_flow::consumer::Mesh::~Mesh(this + 18);
  }
}

void rf::detail::updateRoomBoundarysAt(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>((void *)(*a1 + 208), v4))
      {
        long long v8 = a3[1];
        unint64_t v7 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v13 = *a3;
          uint64_t v14 = (v8 - *a3) >> 5;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v7 - (void)v13;
          if (v16 >> 4 > v15) {
            unint64_t v15 = v16 >> 4;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rf::data_flow::RFUUID>>((uint64_t)(a3 + 2), v17);
            uint64_t v13 = *a3;
            long long v8 = a3[1];
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = *(_OWORD *)(v4 + 16);
          unint64_t v20 = &v18[32 * v14];
          *(_OWORD *)unint64_t v20 = *(_OWORD *)v4;
          *((_OWORD *)v20 + 1) = v19;
          if (v8 == v13)
          {
            id v23 = &v18[32 * v14];
          }
          else
          {
            uint64_t v21 = &v18[32 * v14];
            do
            {
              long long v22 = *((_OWORD *)v8 - 1);
              id v23 = v21 - 32;
              *((_OWORD *)v21 - 2) = *((_OWORD *)v8 - 2);
              *((_OWORD *)v21 - 1) = v22;
              v8 -= 32;
              v21 -= 32;
            }
            while (v8 != v13);
          }
          char v10 = v20 + 32;
          *a3 = v23;
          a3[1] = v20 + 32;
          a3[2] = &v18[32 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)long long v8 = *(_OWORD *)v4;
          *((_OWORD *)v8 + 1) = v9;
          char v10 = v8 + 32;
        }
        a3[1] = v10;
        if (*(unsigned char *)(v4 + 128))
        {
          uint64_t v24 = *a1;
          float v25 = (_OWORD *)(*a1 + 248);
          int v26 = *(unsigned __int8 *)(*a1 + 280);
          long long v27 = *(_OWORD *)(v4 + 16);
          *float v25 = *(_OWORD *)v4;
          v25[1] = v27;
          if (!v26) {
            *(unsigned char *)(v24 + 280) = 1;
          }
        }
        rf::detail::createRoomBoundary((uint64_t)__p, v4);
        uint64_t v28 = *a1 + 208;
        *(void *)long long buf = v4;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(v28, v4, (int32x4_t **)buf);
        char v30 = v44;
        long long v31 = v43;
        *((_OWORD *)v29 + 9) = v42;
        *((_OWORD *)v29 + 10) = v31;
        long long v33 = v40;
        long long v32 = v41;
        long long v34 = v39;
        *((_OWORD *)v29 + 5) = v38;
        *((_OWORD *)v29 + 6) = v34;
        *((unsigned char *)v29 + 176) = v30;
        *((_OWORD *)v29 + 7) = v33;
        *((_OWORD *)v29 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v32;
        long long v35 = v37;
        *((_OWORD *)v29 + 3) = *(_OWORD *)__p;
        *((_OWORD *)v29 + 4) = v35;
        std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v29 + 24), (uint64_t)v45);
        std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v29 + 78), (uint64_t)v47);
        std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v29 + 132), (uint64_t)v49);
        if (v50) {
          rf::data_flow::consumer::Mesh::~Mesh(v49);
        }
        if (v48) {
          rf::data_flow::consumer::Mesh::~Mesh(v47);
        }
        if (v46) {
          rf::data_flow::consumer::Mesh::~Mesh(v45);
        }
      }
      else
      {
        uint64_t v11 = rf::realityFusionLogObject(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string((rf::data_flow::RFUUID *)v4, __p);
          uint64_t v12 = __p;
          if (SBYTE7(v37) < 0) {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl(&dword_235A7C000, v11, OS_LOG_TYPE_DEFAULT, "ARState: Updating Room Anchor %s that doesn't exist in ARState.", buf, 0xCu);
          if (SBYTE7(v37) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      v4 += 1200;
    }
    while (v4 != v5);
  }
}

void sub_235AE6FAC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void rf::detail::removeRoomBoundaryAnchorsFrom(int8x8_t **a1@<X0>, rf::data_flow::RFUUID **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v67 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a3 + 32) = 1065353216;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = *a2;
  long long v59 = a2[1];
  uint64_t v60 = a3 + 32;
  if (*a2 != v59)
  {
    long long v6 = a1;
    uint64_t v58 = a3 + 16;
    do
    {
      unint64_t v7 = (rf *)std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::find<rf::data_flow::RFUUID>(&(*v6)[26], (uint64_t)v5);
      long long v8 = v7;
      if (v7)
      {
        long long v9 = rf::realityFusionLogObject(v7);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          rf::data_flow::RFUUID::string(v5, &__p);
          std::vector<int>::pointer p_p = &__p;
          if (v64 < 0) {
            std::vector<int>::pointer p_p = __p;
          }
          *(_DWORD *)long long buf = 136315138;
          long long v66 = p_p;
          _os_log_impl(&dword_235A7C000, v9, OS_LOG_TYPE_DEFAULT, "ARState: Removing Room Anchors %s", buf, 0xCu);
          if (v64 < 0) {
            operator delete(__p);
          }
        }

        unint64_t v11 = *((void *)v8 + 5);
        if (!v11)
        {
          if (*((unsigned char *)v8 + 32)) {
            char v55 = (void *)*((void *)v8 + 2);
          }
          else {
            char v55 = (void *)((char *)v8 + 16);
          }
          unint64_t v11 = ((*v55 >> 2) + (*v55 << 6) + v55[1] + 2654435769) ^ *v55;
          *((void *)v8 + 5) = v11;
        }
        uint64_t v12 = (_OWORD *)((char *)v8 + 48);
        unint64_t v13 = *(void *)(v4 + 8);
        if (v13)
        {
          uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
          v14.i16[0] = vaddlv_u8(v14);
          unint64_t v15 = v14.u32[0];
          if (v14.u32[0] > 1uLL)
          {
            unint64_t v3 = v11;
            if (v11 >= v13) {
              unint64_t v3 = v11 % v13;
            }
          }
          else
          {
            unint64_t v3 = (v13 - 1) & v11;
          }
          uint64_t v16 = *(uint64_t ***)(*(void *)v4 + 8 * v3);
          if (v16)
          {
            unint64_t v17 = *v16;
            if (*v16)
            {
              while (1)
              {
                unint64_t v18 = v17[1];
                if (v18 == v11)
                {
                  if (rf::data_flow::RFUUID::Equality::operator()(v60, (uint64_t)(v17 + 2), (uint64_t)v8 + 16))
                  {
                    *((_OWORD *)v17 + 3) = *v12;
                    long long v49 = *((_OWORD *)v8 + 4);
                    long long v50 = *((_OWORD *)v8 + 5);
                    long long v51 = *((_OWORD *)v8 + 7);
                    *((_OWORD *)v17 + 6) = *((_OWORD *)v8 + 6);
                    *((_OWORD *)v17 + 7) = v51;
                    *((_OWORD *)v17 + 4) = v49;
                    *((_OWORD *)v17 + 5) = v50;
                    long long v52 = *((_OWORD *)v8 + 8);
                    long long v53 = *((_OWORD *)v8 + 9);
                    long long v54 = *((_OWORD *)v8 + 10);
                    *((unsigned char *)v17 + 176) = *((unsigned char *)v8 + 176);
                    *((_OWORD *)v17 + 9) = v53;
                    *((_OWORD *)v17 + 10) = v54;
                    *((_OWORD *)v17 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v52;
                    uint64_t v4 = a3;
                    std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v17 + 24), (uint64_t)v8 + 192);
                    long long v6 = a1;
                    std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v17 + 78), (uint64_t)v8 + 624);
                    std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>((rf::data_flow::consumer::Mesh *)(v17 + 132), (uint64_t)v8 + 1056);
                    goto LABEL_50;
                  }
                }
                else
                {
                  if (v15 > 1)
                  {
                    if (v18 >= v13) {
                      v18 %= v13;
                    }
                  }
                  else
                  {
                    v18 &= v13 - 1;
                  }
                  if (v18 != v3)
                  {
LABEL_26:
                    uint64_t v4 = a3;
                    break;
                  }
                }
                unint64_t v17 = (uint64_t *)*v17;
                if (!v17) {
                  goto LABEL_26;
                }
              }
            }
          }
          long long v6 = a1;
        }
        long long v19 = operator new(0x5D0uLL);
        std::string __p = v19;
        long long v62 = (int8x8_t *)v58;
        char v63 = 0;
        *long long v19 = 0;
        v19[1] = v11;
        long long v20 = *((_OWORD *)v8 + 2);
        *((_OWORD *)v19 + 1) = *((_OWORD *)v8 + 1);
        *((_OWORD *)v19 + 2) = v20;
        *((_OWORD *)v19 + 3) = *v12;
        long long v21 = *((_OWORD *)v8 + 7);
        long long v23 = *((_OWORD *)v8 + 4);
        long long v22 = *((_OWORD *)v8 + 5);
        *((_OWORD *)v19 + 6) = *((_OWORD *)v8 + 6);
        *((_OWORD *)v19 + 7) = v21;
        *((_OWORD *)v19 + 4) = v23;
        *((_OWORD *)v19 + 5) = v22;
        long long v25 = *((_OWORD *)v8 + 9);
        long long v24 = *((_OWORD *)v8 + 10);
        long long v26 = *((_OWORD *)v8 + 8);
        *((unsigned char *)v19 + 176) = *((unsigned char *)v8 + 176);
        *((_OWORD *)v19 + 9) = v25;
        *((_OWORD *)v19 + 10) = v24;
        *((_OWORD *)v19 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v26;
        std::__optional_move_base<rf::data_flow::consumer::Mesh,false>::__optional_move_base[abi:ne180100]((unsigned char *)v19 + 192, (uint64_t)v8 + 192);
        std::__optional_move_base<rf::data_flow::consumer::Mesh,false>::__optional_move_base[abi:ne180100]((unsigned char *)v19 + 624, (uint64_t)v8 + 624);
        std::__optional_move_base<rf::data_flow::consumer::Mesh,false>::__optional_move_base[abi:ne180100]((unsigned char *)v19 + 1056, (uint64_t)v8 + 1056);
        char v63 = 1;
        float v27 = (float)(unint64_t)(*(void *)(v4 + 24) + 1);
        float v28 = *(float *)(v4 + 32);
        if (!v13 || (float)(v28 * (float)v13) < v27)
        {
          BOOL v29 = v13 < 3 || (v13 & (v13 - 1)) != 0;
          unint64_t v30 = v29 | (2 * v13);
          unint64_t v31 = vcvtps_u32_f32(v27 / v28);
          if (v30 <= v31) {
            size_t v32 = v31;
          }
          else {
            size_t v32 = v30;
          }
          std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(v4, v32);
          unint64_t v13 = *(void *)(v4 + 8);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v11 >= v13) {
              unint64_t v3 = v11 % v13;
            }
            else {
              unint64_t v3 = v11;
            }
          }
          else
          {
            unint64_t v3 = (v13 - 1) & v11;
          }
        }
        long long v33 = *(void ***)(*(void *)v4 + 8 * v3);
        if (v33)
        {
          *(void *)std::string __p = *v33;
          *long long v33 = __p;
        }
        else
        {
          *(void *)std::string __p = *(void *)(v4 + 16);
          *(void *)(v4 + 16) = __p;
          *(void *)(*(void *)v4 + 8 * v3) = v58;
          if (*(void *)__p)
          {
            unint64_t v34 = *(void *)(*(void *)__p + 8);
            if ((v13 & (v13 - 1)) != 0)
            {
              if (v34 >= v13) {
                v34 %= v13;
              }
            }
            else
            {
              v34 &= v13 - 1;
            }
            *(void *)(*(void *)v4 + 8 * v34) = __p;
          }
        }
        std::string __p = 0;
        ++*(void *)(v4 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
LABEL_50:
        long long v35 = *v6;
        if ((*v6)[35].i8[0])
        {
          long long v36 = (const unsigned __int8 *)&v35[31];
          if (v35[33].i8[0]) {
            long long v36 = *(const unsigned __int8 **)v36;
          }
          if (*((unsigned char *)v5 + 16)) {
            long long v37 = *(const unsigned __int8 **)v5;
          }
          else {
            long long v37 = (const unsigned __int8 *)v5;
          }
          int v38 = uuid_compare(v36, v37);
          long long v35 = *v6;
          if (!v38 && v35[35].i8[0]) {
            v35[35].i8[0] = 0;
          }
        }
        int8x8_t v39 = v35[27];
        unint64_t v40 = *((void *)v8 + 1);
        uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          if (v40 >= *(void *)&v39) {
            v40 %= *(void *)&v39;
          }
        }
        else
        {
          v40 &= *(void *)&v39 - 1;
        }
        int8x8_t v42 = v35[26];
        long long v43 = *(rf **)(*(void *)&v42 + 8 * v40);
        do
        {
          char v44 = v43;
          long long v43 = *(rf **)v43;
        }
        while (v43 != v8);
        if (v44 == (rf *)&v35[28]) {
          goto LABEL_76;
        }
        unint64_t v45 = *((void *)v44 + 1);
        if (v41.u32[0] > 1uLL)
        {
          if (v45 >= *(void *)&v39) {
            v45 %= *(void *)&v39;
          }
        }
        else
        {
          v45 &= *(void *)&v39 - 1;
        }
        if (v45 != v40)
        {
LABEL_76:
          if (!*(void *)v8) {
            goto LABEL_77;
          }
          unint64_t v46 = *(void *)(*(void *)v8 + 8);
          if (v41.u32[0] > 1uLL)
          {
            if (v46 >= *(void *)&v39) {
              v46 %= *(void *)&v39;
            }
          }
          else
          {
            v46 &= *(void *)&v39 - 1;
          }
          if (v46 != v40) {
LABEL_77:
          }
            *(void *)(*(void *)&v42 + 8 * v40) = 0;
        }
        uint64_t v47 = *(void *)v8;
        if (*(void *)v8)
        {
          unint64_t v48 = *(void *)(v47 + 8);
          if (v41.u32[0] > 1uLL)
          {
            if (v48 >= *(void *)&v39) {
              v48 %= *(void *)&v39;
            }
          }
          else
          {
            v48 &= *(void *)&v39 - 1;
          }
          if (v48 != v40)
          {
            *(void *)(*(void *)&v35[26] + 8 * vstd::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 48) = v44;
            uint64_t v47 = *(void *)v8;
          }
        }
        *(void *)char v44 = v47;
        *(void *)long long v8 = 0;
        --*(void *)&v35[29];
        std::string __p = v8;
        long long v62 = v35 + 28;
        char v63 = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
      }
      uint64_t v5 = (rf::data_flow::RFUUID *)((char *)v5 + 32);
    }
    while (v5 != v59);
  }
}

void sub_235AE75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

void rf::detail::createMeshFromInput(unsigned char *a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 336))
  {
    long long v2 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v2;
    uint64_t v13 = 1;
    long long v3 = *(_OWORD *)(a2 + 48);
    long long v14 = *(_OWORD *)(a2 + 32);
    long long v15 = v3;
    long long v4 = *(_OWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 64);
    long long v17 = v4;
    char v18 = *(unsigned char *)(a2 + 96);
    int v19 = *(_DWORD *)(a2 + 100);
    uint64_t v20 = *(void *)(a2 + 104);
    LOBYTE(v21) = 0;
    char v23 = 0;
    if (*(unsigned char *)(a2 + 136))
    {
      uint64_t v5 = *(void *)(a2 + 112);
      *(void *)(a2 + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 0;
      uint64_t v21 = v5;
      long long v22 = *(_OWORD *)(a2 + 120);
      char v23 = 1;
    }
    LOBYTE(vstd::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
    char v26 = 0;
    if (*(unsigned char *)(a2 + 168))
    {
      uint64_t v6 = *(void *)(a2 + 144);
      *(void *)(a2 + 144) = 0;
      uint64_t v24 = v6;
      long long v25 = *(_OWORD *)(a2 + 152);
      char v26 = 1;
    }
    LOBYTE(v27) = 0;
    char v29 = 0;
    if (*(unsigned char *)(a2 + 200))
    {
      uint64_t v7 = *(void *)(a2 + 176);
      *(void *)(a2 + 176) = 0;
      uint64_t v27 = v7;
      long long v28 = *(_OWORD *)(a2 + 184);
      char v29 = 1;
    }
    LOBYTE(v30) = 0;
    char v32 = 0;
    if (*(unsigned char *)(a2 + 232))
    {
      uint64_t v8 = *(void *)(a2 + 208);
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 208) = 0;
      uint64_t v30 = v8;
      long long v31 = *(_OWORD *)(a2 + 216);
      char v32 = 1;
    }
    LOBYTE(v33) = 0;
    char v35 = 0;
    if (*(unsigned char *)(a2 + 264))
    {
      uint64_t v9 = *(void *)(a2 + 240);
      *(void *)(a2 + 240) = 0;
      uint64_t v33 = v9;
      long long v34 = *(_OWORD *)(a2 + 248);
      char v35 = 1;
    }
    LOBYTE(v36) = 0;
    char v38 = 0;
    if (*(unsigned char *)(a2 + 296))
    {
      uint64_t v10 = *(void *)(a2 + 272);
      *(void *)(a2 + 272) = 0;
      uint64_t v36 = v10;
      long long v37 = *(_OWORD *)(a2 + 280);
      char v38 = 1;
    }
    LOBYTE(v39) = 0;
    char v41 = 0;
    if (*(unsigned char *)(a2 + 328))
    {
      uint64_t v11 = *(void *)(a2 + 304);
      *(void *)(a2 + 304) = 0;
      uint64_t v39 = v11;
      long long v40 = *(_OWORD *)(a2 + 312);
      char v41 = 1;
    }
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    char v46 = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    *(unsigned char *)(rf::data_flow::consumer::Mesh::Mesh((uint64_t)a1, v12) + 416) = 1;
    rf::data_flow::consumer::Mesh::~Mesh((id *)v12);
  }
  else
  {
    *a1 = 0;
    a1[416] = 0;
  }
}

void sub_235AE788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void std::__optional_storage_base<rf::data_flow::consumer::Mesh,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::consumer::Mesh,false>>(rf::data_flow::consumer::Mesh *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 416) == *(unsigned __int8 *)(a2 + 416))
  {
    if (*((unsigned char *)this + 416))
    {
      long long v4 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 48);
      *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 32);
      *((_OWORD *)this + 3) = v6;
      *(_OWORD *)this = v4;
      *((_OWORD *)this + 1) = v5;
      long long v7 = *(_OWORD *)(a2 + 64);
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 112);
      *((_OWORD *)this + 6) = *(_OWORD *)(a2 + 96);
      *((_OWORD *)this + 7) = v9;
      *((_OWORD *)this + 4) = v7;
      *((_OWORD *)this + 5) = v8;
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 128, (uint64_t *)(a2 + 128));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 160, (uint64_t *)(a2 + 160));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 192, (uint64_t *)(a2 + 192));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 224, (uint64_t *)(a2 + 224));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 256, (uint64_t *)(a2 + 256));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 288, (uint64_t *)(a2 + 288));
      std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>((uint64_t)this + 320, (uint64_t *)(a2 + 320));
      uint64_t v10 = (uint64_t *)((char *)this + 352);
      if (*((unsigned __int8 *)this + 360) == *(unsigned __int8 *)(a2 + 360))
      {
        if (*((unsigned char *)this + 360))
        {
          uint64_t v11 = *v10;
          *uint64_t v10 = *(void *)(a2 + 352);
          if (v11) {
            RERelease();
          }
          *(void *)(a2 + 352) = 0;
        }
      }
      else if (*((unsigned char *)this + 360))
      {
        RESharedPtr<REGeomModelDescriptor>::~RESharedPtr(v10);
        *((unsigned char *)this + 360) = 0;
      }
      else
      {
        *((void *)this + 44) = *(void *)(a2 + 352);
        *(void *)(a2 + 352) = 0;
        *((unsigned char *)this + 360) = 1;
      }
      std::__optional_storage_base<RESharedPtr<REAsset>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<RESharedPtr<REAsset>,false>>((uint64_t)this + 368, a2 + 368);
      std::__optional_storage_base<RESharedPtr<REAsset>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<RESharedPtr<REAsset>,false>>((uint64_t)this + 384, a2 + 384);
      if (*((unsigned __int8 *)this + 408) == *(unsigned __int8 *)(a2 + 408))
      {
        if (*((unsigned char *)this + 408))
        {
          uint64_t v12 = *(void *)(a2 + 400);
          *(void *)(a2 + 400) = 0;
          uint64_t v13 = (void *)*((void *)this + 50);
          *((void *)this + 50) = v12;
        }
      }
      else if (*((unsigned char *)this + 408))
      {

        *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 0;
      }
      else
      {
        uint64_t v14 = *(void *)(a2 + 400);
        *(void *)(a2 + 400) = 0;
        *((void *)this + 50) = v14;
        *((unsigned char *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 1;
      }
    }
  }
  else if (*((unsigned char *)this + 416))
  {
    rf::data_flow::consumer::Mesh::~Mesh((id *)this);
    *((unsigned char *)this + 416) = 0;
  }
  else
  {
    rf::data_flow::consumer::Mesh::Mesh((uint64_t)this, (long long *)a2);
    *((unsigned char *)this + 416) = 1;
  }
}

__n128 std::__optional_storage_base<rf::data_flow::MeshBuffer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<rf::data_flow::MeshBuffer,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = *a2;
      *a2 = 0;
      id v5 = *(id *)a1;
      *(void *)a1 = v4;

      __n128 result = *(__n128 *)(a2 + 1);
      *(__n128 *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {

    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 0;
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    *(void *)a1 = v7;
    __n128 result = *(__n128 *)(a2 + 1);
    *(__n128 *)(a1 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = result;
    *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<RESharedPtr<REAsset>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<RESharedPtr<REAsset>,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(unsigned char *)(result + 8))
    {
      uint64_t v3 = *(void *)result;
      *(void *)__n128 result = *(void *)a2;
      if (v3) {
        __n128 result = RERelease();
      }
      *(void *)a2 = 0;
    }
  }
  else if (*(unsigned char *)(result + 8))
  {
    __n128 result = (uint64_t)RESharedPtr<REAsset>::~RESharedPtr((void *)result);
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 0;
  }
  else
  {
    *(void *)__n128 result = *(void *)a2;
    *(void *)a2 = 0;
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>>>::__emplace_unique_key_args<rf::data_flow::RFUUID,std::piecewise_construct_t const&,std::tuple<rf::data_flow::RFUUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, int32x4_t **a3)
{
  unint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v27 = *(void **)a2;
    }
    else {
      uint64_t v27 = (void *)a2;
    }
    unint64_t v7 = ((*v27 >> 2) + (*v27 << 6) + v27[1] + 2654435769) ^ *v27;
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::__unordered_map_hasher<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::hash<REScene const*>,std::equal_to<REScene const*>,true>,std::__unordered_map_equal<REScene const*,std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>,std::equal_to<REScene const*>,std::hash<REScene const*>,true>,std::allocator<std::__hash_value_type<REScene const*,std::unordered_map<rf::data_flow::RFUUID,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<csq::EntryWithProperties<rf::query::REEntityProperty,rf::query::PositionProperty>>>>>>>>::~__hash_table((uint64_t)this + 24) = v7;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (rf::data_flow::RFUUID::Equality::operator()(a1 + 32, (uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = *a3;
  long long v15 = (int32x4_t *)operator new(0x5D0uLL);
  v28[0] = v15;
  v28[1] = a1 + 16;
  char v29 = 0;
  v15->i64[0] = 0;
  v15->i64[1] = v7;
  int32x4_t v16 = v14[1];
  v15[1] = *v14;
  _OWORD v15[2] = v16;
  bzero(&v15[3], 0x5A0uLL);
  uuid_clear((unsigned __int8 *)&v15[3]);
  void v15[5] = (int32x4_t)xmmword_235AF75E0;
  float v15[6] = (int32x4_t)xmmword_235AF75F0;
  v15[7] = (int32x4_t)xmmword_235AF7600;
  v15[8] = (int32x4_t)xmmword_235AF7AA0;
  v17.i64[0] = 0x7F0000007FLL;
  v17.i64[1] = 0x7F0000007FLL;
  v15[9] = vdupq_n_s32(0x7F800000u);
  v15[10] = v17;
  v15[11].i8[0] = 0;
  v15[12].i8[0] = 0;
  v15[38].i8[0] = 0;
  v15[39].i8[0] = 0;
  v15[65].i8[0] = 0;
  v15[66].i8[0] = 0;
  v15[92].i8[0] = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::EnvironmentProbe>>>::__rehash<true>(a1, v23);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v28[0] = *v24;
    *uint64_t v24 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v25 = *(void *)(*(void *)v28[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v25 >= v8) {
          v25 %= v8;
        }
      }
      else
      {
        v25 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v28[0];
    }
  }
  uint64_t v12 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v12;
}

void sub_235AE7E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<rf::data_flow::RFUUID,rf::data_flow::consumer::RoomBoundary>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<rf::data_flow::consumer::Mesh,false>::__optional_move_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(unsigned char *)(a2 + 416))
  {
    rf::data_flow::consumer::Mesh::Mesh((uint64_t)a1, (long long *)a2);
    a1[416] = 1;
  }
  return a1;
}

void sub_235AE7EB8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 416)) {
    rf::data_flow::consumer::Mesh::~Mesh((id *)v1);
  }
  _Unwind_Resume(exception_object);
}

rf::data_flow::consumer::AnchorManagementConsumer *rf::data_flow::consumer::AnchorManagementConsumer::AnchorManagementConsumer(rf::data_flow::consumer::AnchorManagementConsumer *this, const rf::data_flow::consumer::AnchorManagementConfig *a2)
{
  *(void *)this = &unk_26E8F6738;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  std::__function::__value_func<void ()(REEntity *,rf::data_flow::consumer::AnchoringState)>::__value_func[abi:ne180100]((uint64_t)this + 24, (uint64_t)a2);
  int v4 = *((_DWORD *)a2 + 8);
  *(_DWORD *)((char *)this + 59) = *(_DWORD *)((char *)a2 + 35);
  *((_DWORD *)this + 14) = v4;
  std::__function::__value_func<rf::data_flow::RFUUID ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>)>::__value_func[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 40);
  std::__function::__value_func<void ()(std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor> *)>::__value_func[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 72);
  std::__function::__value_func<void ()(NSSet<ARReferenceImage *> *)>::__value_func[abi:ne180100]((uint64_t)this + 128, (uint64_t)a2 + 104);
  int v5 = *((_DWORD *)a2 + 34);
  int v6 = *(_DWORD *)((char *)a2 + 139);
  *((_OWORD *)this + 15) = 0u;
  *(_DWORD *)((char *)this + 163) = v6;
  *((_DWORD *)this + 40) = v5;
  *((void *)this + 23) = 0;
  *((_WORD *)this + 96) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 5std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1065353216;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 6std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 7std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1065353216;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 88) = 1065353216;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 9std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = 1065353216;
  *((void *)this + 50) = 0;
  *((_WORD *)this + 204) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v25, (const UInt8 *)v23);
  std::string::basic_string[abi:ne180100]<0>(__p, "anchorDirtyThreshold");
  uint64_t v7 = rf::UserDefaults::floatValue((CFStringRef *)&v25, (const UInt8 *)__p);
  if ((v7 & 0xFF00000000) != 0) {
    float v8 = *(float *)&v7;
  }
  else {
    float v8 = 0.001;
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v25);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  *((float *)this + 114) = v8;
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  rf::UserDefaults::UserDefaults((CFStringRef *)&v25, (const UInt8 *)v23);
  std::string::basic_string[abi:ne180100]<0>(__p, "anchoringUpdateCountThreshold");
  unint64_t v9 = rf::UserDefaults::uintValue((CFStringRef *)&v25, (const UInt8 *)__p);
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 50;
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  rf::UserDefaults::~UserDefaults(&v25);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  *((void *)this + 5std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)this + 488) = 0u;
  *((_DWORD *)this + 126) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  uint64_t v12 = rf::UserDefaults::UserDefaults((CFStringRef *)__p, (const UInt8 *)v23);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  unint64_t v13 = rf::helpers::kCameraIdentifier((rf::helpers *)v12);
  uint64_t v14 = (rf::helpers *)std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)this + 360, (uint64_t)v13, v13);
  long long v15 = rf::helpers::kHeadIdentifier(v14);
  int32x4_t v16 = (rf::helpers *)std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)this + 360, (uint64_t)v15, v15);
  int32x4_t v17 = rf::helpers::kBodyIdentifier(v16);
  std::__hash_table<rf::data_flow::RFUUID,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<rf::data_flow::RFUUID>>::__emplace_unique_key_args<rf::data_flow::RFUUID,rf::data_flow::RFUUID const&>((uint64_t)this + 360, (uint64_t)v17, v17);
  uint64_t v18 = [MEMORY[0x263F00628] context];
  float v19 = (void *)*((void *)this + 50);
  *((void *)this + 50) = v18;

  rf::UserDefaults::~UserDefaults((const void **)__p);
  return this;
}

void sub_235AE8194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>>>::~__hash_table(v28);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::~__hash_table(v25 + 176);

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v27);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v25 + 80);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v25 + 40);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v25);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v26);
  RESharedPtr<REAsset>::~RESharedPtr(v24);
  rf::data_flow::consumer::AnchorManagementConfig::~AnchorManagementConfig(v22);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2rf9data_flow8consumer24AnchorManagementConsumer34registerShadowClusterUpdateHandlerERKNS_15ConsumerRequestE_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  REComponentGetEntity();
  uint64_t v2 = v1 + 144;
  uint64_t v3 = v1 + 496;
  if (*(_DWORD *)(v1 + 752) != 1) {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(v1 + 768)) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  REAnchorShadowMarkerComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REShadowClusterRootComponentGetClusterBound();
  float v7 = fmaxf(vmuls_lane_f32(0.5, (float32x2_t)*(_OWORD *)&vsubq_f32(v6, v5), 1), 0.03);
  float32x4_t v8 = vaddq_f32(v6, v5);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v16[0] = vmlaq_n_f32(vmulq_f32(v8, v6), (float32x4_t)xmmword_235AFC870, v7);
  v16[1] = (float32x4_t)xmmword_235AF9160;
  char v17 = 1;
  uint64_t v18 = -1;
  uint64_t v19 = 0;
  rf::helpers::getNearestPlaneAnchor((unint64_t)v16, v2, v9, v10, v11, v12, v13, v14, (uint64_t)v20, v16[0]);
  if (!v22)
  {
    if (v4) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t result = REAnchorShadowMarkerSetPlaneExists();
    goto LABEL_13;
  }
  if (v21 != 1) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t result = REAnchorShadowMarkerSetPointAndNormal();
  if (v4) {
    uint64_t result = REAnchorShadowMarkerSetFloorPlane();
  }
LABEL_13:
  if (v22) {
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
  }
  return result;
}

void sub_235AE845C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a53) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rf::data_flow::consumer::AnchorManagementConsumer::consumeLatestUpdate(uint64_t result, uint64_t a2)
{
  v313[3] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 32)) {
    return result;
  }
  std::string::size_type v4 = result;
  uint64_t updated = *(void *)(a2 + 24);
  uint64_t v299 = v4;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (updated) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
LABEL_98:
      uint64_t v293 = *(void *)(a2 + 24);
      goto LABEL_99;
    }
    Uniqueuint64_t Name = (char *)RESceneGetUniqueName();
    std::string::basic_string[abi:ne180100]<0>(&uu, UniqueName);
    unint64_t v295 = (void *)(v4 + 496);
    unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](v4 + 496, (uint64_t)&uu);
    int8x8_t v10 = *(int8x8_t *)(v4 + 480);
    if (v10)
    {
      unint64_t EventBus = v9;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
      v11.i16[0] = vaddlv_u8(v11);
      unint64_t v12 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v13 = v9;
        uint64_t v14 = v299;
        if (v9 >= *(void *)&v10) {
          unint64_t v13 = v9 % *(void *)&v10;
        }
      }
      else
      {
        unint64_t v13 = (*(void *)&v10 - 1) & v9;
        uint64_t v14 = v299;
      }
      long long v15 = *(unsigned __int8 ***)(*(void *)(v14 + 472) + 8 * v13);
      if (v15)
      {
        for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v17 = *((void *)i + 1);
          if (EventBus == v17)
          {
            uint64_t updated = std::equal_to<std::string>::operator()[abi:ne180100](v299 + 504, i + 16, (unsigned __int8 *)&uu);
            if (updated) {
              goto LABEL_95;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v17 >= *(void *)&v10) {
                v17 %= *(void *)&v10;
              }
            }
            else
            {
              v17 &= *(void *)&v10 - 1;
            }
            if (v17 != v13) {
              break;
            }
          }
        }
      }
    }
    MEMORY[0x237DEDE80](v6);
    unint64_t EventBus = REEngineGetEventBus();
    __n[0] = v299;
    if (SHIBYTE(uu.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&__n[1], uu.__r_.__value_.__l.__data_, uu.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&__n[1] = uu;
    }
    MEMORY[0x237DED790]("RESceneWillRemoveEvent");
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3321888768;
    v307[0].__r_.__value_.__r.__words[0] = (std::string::size_type)___ZZN2rf9data_flow8consumer24AnchorManagementConsumer37listenToSceneRemovalForReferenceAssetEP7RESceneP16REServiceLocatorENK3__0cvU13block_pointerF20REEventHandlerResultPvPKvEEv_block_invoke;
    v307[0].__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_64_ea8_32c128_ZTSKZN2rf9data_flow8consumer24AnchorManagementConsumer37listenToSceneRemovalForReferenceAssetEP7RESceneP16REServiceLocatorE3__0_e14_I24__0_v8r_v16l;
    v307[0].__r_.__value_.__r.__words[2] = __n[0];
    if (SHIBYTE(__n[3]) < 0) {
      std::string::__init_copy_ctor_external(&v307[1], (const std::string::value_type *)__n[1], __n[2]);
    }
    else {
      v307[1] = *(std::string *)&__n[1];
    }
    uint64_t v18 = (void *)MEMORY[0x237DEE740](buf);
    if (SHIBYTE(v307[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v307[1].__r_.__value_.__l.__data_);
    }
    uint64_t v19 = REEventBusSubscribeBlock();
    uint64_t v21 = v20;

    if (SHIBYTE(uu.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v312, uu.__r_.__value_.__l.__data_, uu.__r_.__value_.__l.__size_);
    }
    else {
      std::string v312 = uu;
    }
    char v22 = (char *)operator new(0x40uLL);
    std::string::size_type size = v312.__r_.__value_.__l.__size_;
    *((void *)v22 + 2) = v312.__r_.__value_.__r.__words[0];
    *(void *)long long buf = v22;
    *(void *)&buf[8] = v299 + 488;
    __n128 v294 = (void *)(v299 + 488);
    *(void *)char v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 3) = size;
    *(void *)(v22 + 31) = *(std::string::size_type *)((char *)&v312.__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
    memset(&v312, 0, sizeof(v312));
    *((void *)v22 + 6) = v19;
    *((void *)v22 + 7) = v21;
    v22[39] = v24;
    *((void *)v22 + 5) = EventBus;
    v307[0].__r_.__value_.__s.__data_[0] = 1;
    *((void *)v22 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v295, (uint64_t)(v22 + 16));
    unint64_t v25 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v295, (uint64_t)(v22 + 16));
    *((void *)v22 + 1) = v25;
    unint64_t v26 = *(void *)(v299 + 480);
    if (v26)
    {
      unint64_t EventBus = v25;
      uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      unint64_t v28 = v27.u32[0];
      if (v27.u32[0] > 1uLL)
      {
        unint64_t v29 = v25;
        if (v26 <= v25) {
          unint64_t v29 = v25 % v26;
        }
      }
      else
      {
        unint64_t v29 = (v26 - 1) & v25;
      }
      uint64_t v30 = *(unsigned __int8 ***)(*(void *)(v299 + 472) + 8 * v29);
      if (v30)
      {
        for (int j = *v30; j; int j = *(unsigned __int8 **)j)
        {
          unint64_t v32 = *((void *)j + 1);
          if (v32 == EventBus)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](v299 + 504, j + 16, (unsigned __int8 *)v22 + 16)) {
              goto LABEL_91;
            }
          }
          else
          {
            if (v28 > 1)
            {
              if (v32 >= v26) {
                v32 %= v26;
              }
            }
            else
            {
              v32 &= v26 - 1;
            }
            if (v32 != v29) {
              break;
            }
          }
        }
      }
    }
    float v33 = (float)(unint64_t)(*(void *)(v299 + 496) + 1);
    float v34 = *(float *)(v299 + 504);
    if (v26 && (float)(v34 * (float)v26) >= v33)
    {
LABEL_53:
      int8x8_t v35 = *(int8x8_t *)(v299 + 480);
      unint64_t v36 = *((void *)v22 + 1);
      uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        if (v36 >= *(void *)&v35) {
          v36 %= *(void *)&v35;
        }
      }
      else
      {
        v36 &= *(void *)&v35 - 1;
      }
      uint64_t v41 = *(void *)(v299 + 472);
      char v42 = *(void **)(v41 + 8 * v36);
      if (v42)
      {
        *(void *)char v22 = *v42;
      }
      else
      {
        *(void *)char v22 = *v294;
        *__n128 v294 = v22;
        *(void *)(v41 + 8 * v36) = v294;
        if (!*(void *)v22)
        {
LABEL_90:
          ++*v295;
          *(void *)long long buf = 0;
LABEL_91:
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,rf::data_flow::consumer::AnchorManagementConsumer::SceneSubscription>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
          if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v312.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__n[3]) < 0) {
            operator delete((void *)__n[1]);
          }
LABEL_95:
          if (SHIBYTE(uu.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(uu.__r_.__value_.__l.__data_);
          }
          std::string::size_type v4 = v299;
          if (!*(unsigned char *)(a2 + 32)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          goto LABEL_98;
        }
        unint64_t v43 = *(void *)(*(void *)v22 + 8);
        if (v37.u32[0] > 1uLL)
        {
          if (v43 >= *(void *)&v35) {
            v43 %= *(void *)&v35;
          }
        }
        else
        {
          v43 &= *(void *)&v35 - 1;
        }
        char v42 = (void *)(*(void *)(v299 + 472) + 8 * v43);
      }
      *char v42 = v22;
      goto LABEL_90;
    }
    BOOL v38 = 1;
    if (v26 >= 3) {
      BOOL v38 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v39 = v38 | (2 * v26);
    unint64_t v40 = vcvtps_u32_f32(v33 / v34);
    if (v39 <= v40) {
      unint64_t EventBus = v40;
    }
    else {
      unint64_t EventBus = v39;
    }
    if (EventBus == 1)
    {
      unint64_t EventBus = 2;
    }
    else if ((EventBus & (EventBus - 1)) != 0)
    {
      unint64_t EventBus = std::__next_prime(EventBus);
    }
    int8x8_t v44 = *(int8x8_t *)(v299 + 480);
    if (EventBus <= *(void *)&v44)
    {
      if (EventBus >= *(void *)&v44) {
        goto LABEL_53;
      }
      unint64_t prime = vcvtps_u32_f32((float)*(unint64_t *)(v299 + 496) / *(float *)(v299 + 504));
      if (*(void *)&v44 < 3uLL || (uint8x8_t v52 = (uint8x8_t)vcnt_s8(v44), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        unint64_t prime = std::__next_prime(prime);
      }
      else
      {
        uint64_t v53 = 1 << -(char)__clz(prime - 1);
        if (prime >= 2) {
          unint64_t prime = v53;
        }
      }
      if (EventBus <= prime) {
        unint64_t EventBus = prime;
      }
      if (EventBus >= *(void *)&v44) {
        goto LABEL_53;
      }
      if (!EventBus)
      {
        v275 = *(void **)(v299 + 472);
        *(void *)(v299 + 472) = 0;
        if (v275) {
          operator delete(v275);
        }
        *(void *)(v299 + 480) = 0;
        goto LABEL_53;
      }
    }
    if (EventBus >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v45 = operator new(8 * EventBus);
    char v46 = *(void **)(v299 + 472);
    *(void *)(v299 + 472) = v45;
    if (v46) {
      operator delete(v46);
    }
    uint64_t v47 = 0;
    *(void *)(v299 + 480) = EventBus;
    do
      *(void *)(*(void *)(v299 + 472) + 8 * v47++) = 0;
    while (EventBus != v47);
    char v48 = (void *)*v294;
    if (!*v294) {
      goto LABEL_53;
    }
    unint64_t v49 = v48[1];
    uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)EventBus);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      if (v49 >= EventBus) {
        v49 %= EventBus;
      }
    }
    else
    {
      v49 &= EventBus - 1;
    }
    *(void *)(*(void *)(v299 + 472) + 8 * v49) = v294;
    unint64_t v272 = (void *)*v48;
    if (!*v48) {
      goto LABEL_53;
    }
    while (1)
    {
      unint64_t v273 = v272[1];
      if (v50.u32[0] > 1uLL)
      {
        if (v273 >= EventBus) {
          v273 %= EventBus;
        }
      }
      else
      {
        v273 &= EventBus - 1;
      }
      if (v273 != v49)
      {
        uint64_t v274 = *(void *)(v299 + 472);
        if (!*(void *)(v274 + 8 * v273))
        {
          *(void *)(v274 + 8 * v273) = v48;
          goto LABEL_489;
        }
        *char v48 = *v272;
        *unint64_t v272 = **(void **)(*(void *)(v299 + 472) + 8 * v273);
        **(void **)(*(void *)(v299 + 472) + 8 * v273) = v272;
        unint64_t v272 = v48;
      }
      unint64_t v273 = v49;
LABEL_489:
      char v48 = v272;
      unint64_t v272 = (void *)*v272;
      unint64_t v49 = v273;
      if (!v272) {
        goto LABEL_53;
      }
    }
  }
  uint64_t v293 = *(void *)(a2 + 24);
LABEL_99:
  uint64_t v285 = *(void *)(v4 + 8);
  if (!*(unsigned char *)(v4 + 160))
  {
    if (!*(unsigned char *)(v4 + 192))
    {
      if (*(unsigned char *)(a2 + 16))
      {
        uint64_t updated = MEMORY[0x237DEDEB0](*(void *)(a2 + 8));
        if (updated)
        {
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&buf[8] = 3221225472;
          v307[0].__r_.__value_.__r.__words[0] = (std::string::size_type)___ZN2rf9data_flow8consumer24AnchorManagementConsumer34registerShadowClusterUpdateHandlerERKNS_15ConsumerRequestE_block_invoke;
          v307[0].__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_40_e35_v24__0__REScene__8__REComponent__16l;
          v307[0].__r_.__value_.__r.__words[2] = v4;
          uint64_t updated = REShadowManagerSetShadowClusterRootUpdateHandler();
          std::string::size_type v4 = v299;
          *(unsigned char *)(v299 + 192) = 1;
        }
      }
    }
    long long v54 = (rf::AnchorDefinitionComponent *)rf::AnchorDefinitionComponent::instance((rf::AnchorDefinitionComponent *)updated);
    if (*(void *)v54)
    {
      rf::AnchorDefinitionComponent::instance(v54);
      __n[0] = RESceneGetComponentsOfCustomType();
      __n[1] = v55;
      *(void *)long long buf = __n[0];
      ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::AnchorManagementConsumer::updateAnchorDefinitionComponents(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>> const&)::$_0>>::satisfy_forward(__n[0], v55, (uint64_t *)buf);
      float v56 = *(char **)buf;
      size_t __n[2] = *(void *)buf;
      LOBYTE(__n[3]) = 1;
      v301[0] = *(void **)buf;
      v301[1] = __n;
      uint64_t v57 = (void *)(__n[0] + 8 * __n[1]);
      if (v57 != *(void **)buf)
      {
        uint64_t v58 = (void *)(v285 + 144);
        unint64_t EventBus = (unint64_t)&Entity;
        do
        {
          uint64_t Object = 0;
          uint64_t Object = RECustomComponentGetObject();
          uint64_t Entity = 0;
          uint64_t Entity = REComponentGetEntity();
          std::string::size_type v59 = Object;
          uu.__r_.__value_.__s.__data_[16] = 0;
          uint64_t v311 = 0;
          uuid_clear((unsigned __int8 *)&uu);
          uu.__r_.__value_.__r.__words[0] = v59;
          uu.__r_.__value_.__s.__data_[16] = 1;
          if (std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v58, (uint64_t)&uu))
          {
            uint64_t v60 = std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::Mesh>>>>::find<rf::data_flow::RFUUID>(v58, (uint64_t)&uu);
            if (!v60) {
              goto LABEL_508;
            }
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)buf, (uint64_t)(v60 + 6));
            uint64_t SelfEnabled = REEntityGetSelfEnabled();
            if ((SelfEnabled & 1) == 0)
            {
              long long v62 = rf::realityFusionLogObject((rf *)SelfEnabled);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t Name = REEntityGetName();
                LODWORD(v312.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v312.__r_.__value_.__r.__words + 4) = Name;
                _os_log_impl(&dword_235A7C000, v62, OS_LOG_TYPE_DEFAULT, "AnchorManagementConsumer: Enabling %s (a redefined anchor found).", (uint8_t *)&v312, 0xCu);
              }

              MEMORY[0x237DED730](Entity, 1);
              RENetworkMarkEntityMetadataDirty();
            }
            v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&Object;
            v312.__r_.__value_.__l.__size_ = (std::string::size_type)&Entity;
            v312.__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
            if (v309 == -1) {
              std::__throw_bad_variant_access[abi:ne180100]();
            }
            v313[0] = &v312;
            ((void (*)(void *, uint8_t *))off_26E8F67A0[v309])(v313, buf);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
          }
          else
          {
            MEMORY[0x237DED730](Entity, 0);
            char v64 = (rf *)RENetworkMarkEntityMetadataDirty();
            float32x4_t v65 = rf::realityFusionLogObject(v64);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v66 = REEntityGetName();
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v66;
              _os_log_impl(&dword_235A7C000, v65, OS_LOG_TYPE_DEFAULT, "AnchorManagementConsumer: Disabling %s because it needs redifinition and there's no matching anchor in the state.", buf, 0xCu);
            }
          }
          v301[0] = v56 + 8;
          ranges::remove_if_view<std::span<REComponent *,18446744073709551615ul>,ranges::logical_negate<rf::data_flow::consumer::AnchorManagementConsumer::updateAnchorDefinitionComponents(REScene *,std::unordered_map<rf::data_flow::RFUUID,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,std::allocator<std::pair<rf::data_flow::RFUUID const,std::variant<rf::data_flow::CustomAnchor,rf::data_flow::PlaneAnchor,rf::data_flow::ImageAnchor,rf::data_flow::ObjectAnchor,rf::data_flow::FaceAnchor,rf::data_flow::BodyAnchor>>>> const&)::$_0>>::satisfy_forward(*(void *)v301[1], *((void *)v301[1] + 1), (uint64_t *)v301);
          float v56 = (char *)v301[0];
        }
        while (v301[0] != v57);
      }
      std::string::size_type v4 = v299;
    }
  }
  if (!*(void *)(v4 + 152) || !*(void *)(v4 + 400)) {
    goto LABEL_376;
  }
  uint64_t v67 = (char *)RESceneGetUniqueName();
  std::string::basic_string[abi:ne180100]<0>(v301, v67);
  float32x4_t v286 = (uint64_t *)(v299 + 416);
  uint64_t v68 = v299 + 440;
  unint64_t v69 = std::__string_hash<char>::operator()[abi:ne180100](v299 + 440, (uint64_t)v301);
  int8x8_t v70 = *(int8x8_t *)(v299 + 424);
  if (v70)
  {
    unint64_t v71 = v69;
    uint8x8_t v72 = (uint8x8_t)vcnt_s8(v70);
    v72.i16[0] = vaddlv_u8(v72);
    unint64_t v73 = v72.u32[0];
    if (v72.u32[0] > 1uLL)
    {
      unint64_t EventBus = v69;
      if (v69 >= *(void *)&v70) {
        unint64_t EventBus = v69 % *(void *)&v70;
      }
    }
    else
    {
      unint64_t EventBus = (*(void *)&v70 - 1) & v69;
    }
    uint64_t v74 = *(unsigned __int8 ***)(*v286 + 8 * EventBus);
    if (v74)
    {
      for (unint64_t k = *v74; k; unint64_t k = *(unsigned __int8 **)k)
      {
        unint64_t v76 = *((void *)k + 1);
        if (v71 == v76)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](v299 + 448, k + 16, (unsigned __int8 *)v301)) {
            goto LABEL_235;
          }
        }
        else
        {
          if (v73 > 1)
          {
            if (v76 >= *(void *)&v70) {
              v76 %= *(void *)&v70;
            }
          }
          else
          {
            v76 &= *(void *)&v70 - 1;
          }
          if (v76 != EventBus) {
            break;
          }
        }
      }
    }
  }
  memset(__n, 0, sizeof(__n));
  LODWORD(v305[0]) = 1065353216;
  if (SHIBYTE(v302) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v301[0], (std::string::size_type)v301[1]);
    int v78 = v305[0];
    size_t v77 = __n[1];
  }
  else
  {
    size_t v77 = 0;
    *(_OWORD *)long long buf = *(_OWORD *)v301;
    v307[0].__r_.__value_.__r.__words[0] = v302;
    int v78 = 1065353216;
  }
  std::string::size_type v79 = (std::string::size_type)buf;
  memset(&v307[0].__r_.__value_.__r.__words[1], 0, 32);
  LODWORD(v307[1].__r_.__value_.__r.__words[2]) = v78;
  std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v307[0].__r_.__value_.__l.__size_, v77);
  for (size_t m = __n[2]; m; size_t m = *(void *)m)
  {
    unint64_t v81 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v307[1].__r_.__value_.__l.__size_, m + 16);
    std::string::size_type v82 = v81;
    unint64_t EventBus = v307[0].__r_.__value_.__r.__words[2];
    if (v307[0].__r_.__value_.__r.__words[2])
    {
      uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v307[0].__r_.__value_.__r.__words[2]);
      v83.i16[0] = vaddlv_u8(v83);
      unint64_t v84 = v83.u32[0];
      if (v83.u32[0] > 1uLL)
      {
        std::string::size_type v79 = v81;
        if (v81 >= v307[0].__r_.__value_.__r.__words[2]) {
          std::string::size_type v79 = v81 % v307[0].__r_.__value_.__r.__words[2];
        }
      }
      else
      {
        std::string::size_type v79 = (v307[0].__r_.__value_.__r.__words[2] - 1) & v81;
      }
      float32x4_t v85 = *(unsigned __int8 ***)(v307[0].__r_.__value_.__l.__size_ + 8 * v79);
      if (v85)
      {
        for (uint64_t n = *v85; n; uint64_t n = *(unsigned __int8 **)n)
        {
          unint64_t v87 = *((void *)n + 1);
          if (v87 == v82)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v307[1].__r_.__value_.__r.__words[2], n + 16, (unsigned __int8 *)(m + 16)))goto LABEL_183; {
          }
            }
          else
          {
            if (v84 > 1)
            {
              if (v87 >= EventBus) {
                v87 %= EventBus;
              }
            }
            else
            {
              v87 &= EventBus - 1;
            }
            if (v87 != v79) {
              break;
            }
          }
        }
      }
    }
    id v88 = operator new(0x30uLL);
    uu.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
    uu.__r_.__value_.__l.__size_ = (std::string::size_type)&v307[1];
    uu.__r_.__value_.__s.__data_[16] = 0;
    void *v88 = 0;
    v88[1] = v82;
    double v89 = (std::string *)(v88 + 2);
    if (*(char *)(m + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v89, *(const std::string::value_type **)(m + 16), *(void *)(m + 24));
    }
    else
    {
      long long v90 = *(_OWORD *)(m + 16);
      v88[4] = *(void *)(m + 32);
      *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
    }
    v88[5] = *(id *)(m + 40);
    uu.__r_.__value_.__s.__data_[16] = 1;
    float v91 = (float)(v307[1].__r_.__value_.__l.__size_ + 1);
    if (!EventBus || (float)(*(float *)&v307[1].__r_.__value_.__r.__words[2] * (float)EventBus) < v91)
    {
      BOOL v92 = (EventBus & (EventBus - 1)) != 0;
      if (EventBus < 3) {
        BOOL v92 = 1;
      }
      unint64_t v93 = v92 | (2 * EventBus);
      unint64_t v94 = vcvtps_u32_f32(v91 / *(float *)&v307[1].__r_.__value_.__r.__words[2]);
      if (v93 <= v94) {
        size_t v95 = v94;
      }
      else {
        size_t v95 = v93;
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)&v307[0].__r_.__value_.__l.__size_, v95);
      unint64_t EventBus = v307[0].__r_.__value_.__r.__words[2];
      if ((v307[0].__r_.__value_.__r.__words[2] & (v307[0].__r_.__value_.__r.__words[2] - 1)) != 0)
      {
        if (v82 >= v307[0].__r_.__value_.__r.__words[2]) {
          std::string::size_type v79 = v82 % v307[0].__r_.__value_.__r.__words[2];
        }
        else {
          std::string::size_type v79 = v82;
        }
      }
      else
      {
        std::string::size_type v79 = (v307[0].__r_.__value_.__r.__words[2] - 1) & v82;
      }
    }
    std::string::size_type v96 = v307[0].__r_.__value_.__l.__size_;
    long long v97 = *(void **)(v307[0].__r_.__value_.__l.__size_ + 8 * v79);
    if (v97)
    {
      void *v88 = *v97;
    }
    else
    {
      void *v88 = v307[1].__r_.__value_.__l.__data_;
      v307[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
      *(void *)(v96 + 8 * v79) = &v307[1];
      if (!*v88) {
        goto LABEL_182;
      }
      unint64_t v98 = *(void *)(*v88 + 8);
      if ((EventBus & (EventBus - 1)) != 0)
      {
        if (v98 >= EventBus) {
          v98 %= EventBus;
        }
      }
      else
      {
        v98 &= EventBus - 1;
      }
      long long v97 = (void *)(v307[0].__r_.__value_.__l.__size_ + 8 * v98);
    }
    *long long v97 = v88;
LABEL_182:
    uu.__r_.__value_.__r.__words[0] = 0;
    ++v307[1].__r_.__value_.__l.__size_;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)&uu);
LABEL_183:
    ;
  }
  unint64_t v99 = std::__string_hash<char>::operator()[abi:ne180100](v68, (uint64_t)buf);
  unint64_t v100 = v99;
  uint64_t v68 = v299;
  unint64_t v101 = *(void *)(v299 + 424);
  if (v101)
  {
    uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)v101);
    v102.i16[0] = vaddlv_u8(v102);
    unint64_t v103 = v102.u32[0];
    if (v102.u32[0] > 1uLL)
    {
      unint64_t EventBus = v99;
      if (v99 >= v101) {
        unint64_t EventBus = v99 % v101;
      }
    }
    else
    {
      unint64_t EventBus = (v101 - 1) & v99;
    }
    long long v104 = *(unsigned __int8 ***)(*v286 + 8 * EventBus);
    if (v104)
    {
      for (iuint64_t i = *v104; ii; iuint64_t i = *(unsigned __int8 **)ii)
      {
        unint64_t v106 = *((void *)ii + 1);
        if (v106 == v100)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](v299 + 448, ii + 16, buf)) {
            goto LABEL_232;
          }
        }
        else
        {
          if (v103 > 1)
          {
            if (v106 >= v101) {
              v106 %= v101;
            }
          }
          else
          {
            v106 &= v101 - 1;
          }
          if (v106 != EventBus) {
            break;
          }
        }
      }
    }
  }
  long long v107 = (char *)operator new(0x50uLL);
  float32x4_t v108 = (void *)(v299 + 432);
  uu.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  uu.__r_.__value_.__l.__size_ = v299 + 432;
  uu.__r_.__value_.__s.__data_[16] = 0;
  *(void *)long long v107 = 0;
  *((void *)v107 + 1) = v100;
  id v109 = (std::string *)(v107 + 16);
  if (v307[0].__r_.__value_.__s.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
  }
  else
  {
    *(_OWORD *)&v109->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    *((void *)v107 + 4) = v307[0].__r_.__value_.__r.__words[0];
  }
  long long v110 = *(_OWORD *)&v307[0].__r_.__value_.__r.__words[1];
  long long v111 = *(_OWORD *)&v307[1].__r_.__value_.__l.__data_;
  *((void *)v107 + 7) = v307[1].__r_.__value_.__l.__data_;
  *(_OWORD *)&v307[0].__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v107 + 40) = v110;
  *((void *)v107 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = *((void *)&v111 + 1);
  *((_DWORD *)v107 + 1std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v307[1].__r_.__value_.__r.__words[2];
  if (*((void *)&v111 + 1))
  {
    unint64_t v112 = *(void *)(v111 + 8);
    if ((*((void *)&v110 + 1) & (*((void *)&v110 + 1) - 1)) != 0)
    {
      if (v112 >= *((void *)&v110 + 1)) {
        v112 %= *((void *)&v110 + 1);
      }
    }
    else
    {
      v112 &= *((void *)&v110 + 1) - 1;
    }
    *(void *)(v110 + 8 * v1std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 12) = v107 + 56;
    *(_OWORD *)&v307[1].__r_.__value_.__l.__data_ = 0uLL;
  }
  uu.__r_.__value_.__s.__data_[16] = 1;
  float v113 = (float)(unint64_t)(*(void *)(v299 + 440) + 1);
  float v114 = *(float *)(v299 + 448);
  if (!v101 || (float)(v114 * (float)v101) < v113)
  {
    BOOL v115 = 1;
    if (v101 >= 3) {
      BOOL v115 = (v101 & (v101 - 1)) != 0;
    }
    unint64_t v116 = v115 | (2 * v101);
    unint64_t v117 = vcvtps_u32_f32(v113 / v114);
    if (v116 <= v117) {
      size_t v118 = v117;
    }
    else {
      size_t v118 = v116;
    }
    std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)v286, v118);
    unint64_t v101 = *(void *)(v299 + 424);
    if ((v101 & (v101 - 1)) != 0)
    {
      if (v100 >= v101) {
        unint64_t EventBus = v100 % v101;
      }
      else {
        unint64_t EventBus = v100;
      }
    }
    else
    {
      unint64_t EventBus = (v101 - 1) & v100;
    }
  }
  uint64_t v119 = *v286;
  long long v120 = *(void **)(*v286 + 8 * EventBus);
  if (v120)
  {
    *(void *)long long v107 = *v120;
LABEL_230:
    *long long v120 = v107;
    goto LABEL_231;
  }
  *(void *)long long v107 = *v108;
  *float32x4_t v108 = v107;
  *(void *)(v119 + 8 * EventBus) = v108;
  if (*(void *)v107)
  {
    unint64_t v121 = *(void *)(*(void *)v107 + 8);
    if ((v101 & (v101 - 1)) != 0)
    {
      if (v121 >= v101) {
        v121 %= v101;
      }
    }
    else
    {
      v121 &= v101 - 1;
    }
    long long v120 = (void *)(*v286 + 8 * v121);
    goto LABEL_230;
  }
LABEL_231:
  uu.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(v299 + 440);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,void *>>>>::reset[abi:ne180100]((uint64_t)&uu);
LABEL_232:
  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table((uint64_t)&v307[0].__r_.__value_.__l.__size_);
  if (v307[0].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*(void **)buf);
  }
  std::__hash_table<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>>>::~__hash_table((uint64_t)__n);
LABEL_235:
  memset(__n, 0, sizeof(__n));
  LODWORD(v305[0]) = 1065353216;
  REAnchoringComponentGetComponentType();
  RESceneGetComponentsOfClass();
  uint64_t v123 = v122;
  if (v122)
  {
    char v289 = 0;
    uint64_t v124 = 0;
    while (1)
    {
      if (REAnchoringComponentGetDescriptorType() != 4) {
        goto LABEL_317;
      }
      REComponentGetEntity();
      REClientAnchorSyncComponentGetComponentType();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (!*(unsigned char *)(v299 + 160))
      {
        if (ComponentByClass) {
          goto LABEL_317;
        }
      }
      if (!REEntityIsEnabledInHierarchy()) {
        goto LABEL_317;
      }
      long long v126 = REAnchoringComponentGetTrackingImageMTLTexture();
      if (v126) {
        break;
      }
LABEL_316:

LABEL_317:
      if (++v124 == v123) {
        goto LABEL_320;
      }
    }
    int v296 = v126;
    if (!REAnchoringComponentGetDescriptorResourceStyle())
    {
      rf::getMessage((rf *)"AnchorManagementConsumer: Image anchoring target should not have kREAnchoringResourceNone", &uu);
      rf::internal::logAssert((const char *)&uu);
      if (SHIBYTE(uu.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(uu.__r_.__value_.__l.__data_);
      }
      rf::internal::debugBreakHandler(v276);
      uint64_t Object = 0;
      long long v308 = 0u;
      *(_OWORD *)long long buf = 0u;
      memset(v307, 0, sizeof(v307));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      rf::getMessage((rf *)"AnchorManagementConsumer: Image anchoring target should not have kREAnchoringResourceNone", &v312);
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v277 = &v312;
      }
      else {
        v277 = (std::string *)v312.__r_.__value_.__r.__words[0];
      }
      LODWORD(v313[0]) = 136315138;
      *(void *)((char *)v313 + 4) = v277;
      _os_log_send_and_compose_impl();
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      _os_crash_msg();
      __break(1u);
LABEL_508:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    DescriptorResourceGroup = (char *)REAnchoringComponentGetDescriptorResourceGroup();
    size_t v128 = strlen(DescriptorResourceGroup);
    DescriptorResourceuint64_t Name = (char *)REAnchoringComponentGetDescriptorResourceName();
    size_t v130 = strlen(DescriptorResourceName);
    rf::helpers::getFullPath(DescriptorResourceGroup, v128, DescriptorResourceName, v130, &v312);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__n, (unsigned __int8 *)&v312, (uint64_t)&v312);
    *(void *)long long buf = v301;
    id v131 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v301, (long long **)buf);
    unint64_t v132 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v131 + 64), (uint64_t)&v312);
    int8x8_t v133 = *(int8x8_t *)(v131 + 48);
    if (v133)
    {
      unint64_t v134 = v132;
      uint8x8_t v135 = (uint8x8_t)vcnt_s8(v133);
      v135.i16[0] = vaddlv_u8(v135);
      unint64_t v136 = v135.u32[0];
      if (v135.u32[0] > 1uLL)
      {
        unint64_t v137 = v132;
        if (v132 >= *(void *)&v133) {
          unint64_t v137 = v132 % *(void *)&v133;
        }
      }
      else
      {
        unint64_t v137 = (*(void *)&v133 - 1) & v132;
      }
      long long v138 = *(unsigned __int8 ***)(*((void *)v131 + 5) + 8 * v137);
      if (v138)
      {
        char v139 = *v138;
        if (*v138)
        {
          uint64_t v68 = *(void *)&v133 - 1;
          uint64_t v140 = (uint64_t)(v131 + 72);
          do
          {
            unint64_t v141 = *((void *)v139 + 1);
            if (v134 == v141)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](v140, v139 + 16, (unsigned __int8 *)&v312))
              {
                long long v126 = v296;
                goto LABEL_314;
              }
            }
            else
            {
              if (v136 > 1)
              {
                if (v141 >= *(void *)&v133) {
                  v141 %= *(void *)&v133;
                }
              }
              else
              {
                v141 &= v68;
              }
              if (v141 != v137) {
                break;
              }
            }
            char v139 = *(unsigned __int8 **)v139;
          }
          while (v139);
        }
      }
    }
    REAnchoringComponentGetTrackingImageWidth();
    float v143 = v142;
    long long v144 = [MEMORY[0x263F00650] imageWithMTLTexture:v296 options:0];
    float32x4_t v145 = *(void **)(v299 + 400);
    char v282 = v144;
    [v144 extent];
    uint64_t v146 = objc_msgSend(v145, "createCGImage:fromRect:", v144);
    *(void *)long long buf = v301;
    uint64_t v147 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v301, (long long **)buf);
    id v148 = (void *)[objc_alloc(MEMORY[0x263F20F28]) initWithCGImage:v146 orientation:2 physicalWidth:v143];
    uint64_t v149 = &v312;
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v149 = (std::string *)v312.__r_.__value_.__r.__words[0];
    }
    float v150 = objc_msgSend(NSString, "stringWithFormat:", @"%s", v149);
    [v148 setName:v150];

    long long v152 = rf::realityFusionLogObject(v151);
    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
    {
      float v153 = &v312;
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v153 = (std::string *)v312.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v153;
      _os_log_impl(&dword_235A7C000, v152, OS_LOG_TYPE_DEFAULT, "AnchorManagementConsumer: Adding reference image %s", buf, 0xCu);
    }

    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)&v312.__r_.__value_.__l.__data_;
      v307[0].__r_.__value_.__r.__words[0] = v312.__r_.__value_.__r.__words[2];
    }
    unint64_t v290 = (uint64_t *)(v147 + 40);
    id v278 = v148;
    v307[0].__r_.__value_.__l.__size_ = (std::string::size_type)v278;
    BOOL v154 = v147 + 64;
    unint64_t v155 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v147 + 64), (uint64_t)buf);
    unint64_t v156 = v155;
    unint64_t v157 = *((void *)v147 + 6);
    if (v157)
    {
      uint8x8_t v158 = (uint8x8_t)vcnt_s8((int8x8_t)v157);
      v158.i16[0] = vaddlv_u8(v158);
      unint64_t v159 = v158.u32[0];
      if (v158.u32[0] > 1uLL)
      {
        uint64_t v68 = v155;
        if (v155 >= v157) {
          uint64_t v68 = v155 % v157;
        }
      }
      else
      {
        uint64_t v68 = (v157 - 1) & v155;
      }
      unint64_t v160 = *(unsigned __int8 ***)(*v290 + 8 * v68);
      if (v160)
      {
        for (jint j = *v160; jj; jint j = *(unsigned __int8 **)jj)
        {
          unint64_t v162 = *((void *)jj + 1);
          if (v162 == v156)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(v147 + 72), jj + 16, buf)) {
              goto LABEL_311;
            }
          }
          else
          {
            if (v159 > 1)
            {
              if (v162 >= v157) {
                v162 %= v157;
              }
            }
            else
            {
              v162 &= v157 - 1;
            }
            if (v162 != v68) {
              break;
            }
          }
        }
      }
      BOOL v154 = v147 + 64;
    }
    uint64_t v163 = operator new(0x30uLL);
    CFDataRef v164 = v147 + 56;
    uu.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
    uu.__r_.__value_.__l.__size_ = (std::string::size_type)(v147 + 56);
    uu.__r_.__value_.__s.__data_[16] = 0;
    void *v163 = 0;
    v163[1] = v156;
    unint64_t v165 = (std::string *)(v163 + 2);
    if (v307[0].__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::__init_copy_ctor_external(v165, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else
    {
      *(_OWORD *)&v165->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      v163[4] = v307[0].__r_.__value_.__r.__words[0];
    }
    std::string::size_type v166 = v307[0].__r_.__value_.__l.__size_;
    v307[0].__r_.__value_.__l.__size_ = 0;
    v163[5] = v166;
    uu.__r_.__value_.__s.__data_[16] = 1;
    float v167 = (float)(unint64_t)(*((void *)v147 + 8) + 1);
    float v168 = *((float *)v147 + 18);
    if (!v157 || (float)(v168 * (float)v157) < v167)
    {
      BOOL v169 = (v157 & (v157 - 1)) != 0;
      if (v157 < 3) {
        BOOL v169 = 1;
      }
      unint64_t v170 = v169 | (2 * v157);
      unint64_t v171 = vcvtps_u32_f32(v167 / v168);
      if (v170 <= v171) {
        size_t v172 = v171;
      }
      else {
        size_t v172 = v170;
      }
      std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,long long>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,long long>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,long long>>>::__rehash<true>((uint64_t)v290, v172);
      unint64_t v157 = *((void *)v147 + 6);
      if ((v157 & (v157 - 1)) != 0)
      {
        if (v156 >= v157) {
          uint64_t v68 = v156 % v157;
        }
        else {
          uint64_t v68 = v156;
        }
      }
      else
      {
        uint64_t v68 = (v157 - 1) & v156;
      }
    }
    uint64_t v173 = *v290;
    unint64_t v174 = *(void **)(*v290 + 8 * v68);
    if (v174)
    {
      void *v163 = *v174;
    }
    else
    {
      void *v163 = *v164;
      void *v164 = v163;
      *(void *)(v173 + 8 * v6std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v164;
      if (!*v163)
      {
LABEL_310:
        uu.__r_.__value_.__r.__words[0] = 0;
        ++*v154;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)&uu);
LABEL_311:

        long long v126 = v296;
        if (v307[0].__r_.__value_.__s.__data_[7] < 0) {
          operator delete(*(void **)buf);
        }

        char v289 = 1;
LABEL_314:
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        goto LABEL_316;
      }
      unint64_t v175 = *(void *)(*v163 + 8);
      if ((v157 & (v157 - 1)) != 0)
      {
        if (v175 >= v157) {
          v175 %= v157;
        }
      }
      else
      {
        v175 &= v157 - 1;
      }
      unint64_t v174 = (void *)(*v290 + 8 * v175);
    }
    void *v174 = v163;
    goto LABEL_310;
  }
  char v289 = 0;
LABEL_320:
  *(void *)long long buf = v301;
  int v176 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,ARReferenceImage * {__strong}>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v301, (long long **)buf);
  id v279 = objc_alloc_init(MEMORY[0x263EFF9C0]);
  long long v177 = (unsigned __int8 *)(v176 + 56);
  long long v178 = (unsigned __int8 *)*((void *)v176 + 7);
  if (v178)
  {
    do
    {
      size_t v179 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__n[3], (uint64_t)(v178 + 16));
      size_t v180 = __n[1];
      if (__n[1])
      {
        size_t v181 = v179;
        uint8x8_t v182 = (uint8x8_t)vcnt_s8((int8x8_t)__n[1]);
        v182.i16[0] = vaddlv_u8(v182);
        unint64_t v183 = v182.u32[0];
        if (v182.u32[0] > 1uLL)
        {
          size_t v184 = v179;
          if (v179 >= __n[1]) {
            size_t v184 = v179 % __n[1];
          }
        }
        else
        {
          size_t v184 = (__n[1] - 1) & v179;
        }
        __n128 v185 = *(unsigned __int8 ***)(__n[0] + 8 * v184);
        if (v185)
        {
          for (kunint64_t k = *v185; kk; kunint64_t k = *(unsigned __int8 **)kk)
          {
            size_t v187 = *((void *)kk + 1);
            if (v181 == v187)
            {
              size_t v179 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v305, kk + 16, v178 + 16);
              if (v179)
              {
                uint64_t v200 = *(uint64_t **)v178;
                goto LABEL_367;
              }
            }
            else
            {
              if (v183 > 1)
              {
                if (v187 >= v180) {
                  v187 %= v180;
                }
              }
              else
              {
                v187 &= v180 - 1;
              }
              if (v187 != v184) {
                break;
              }
            }
          }
        }
      }
      float32x4_t v188 = rf::realityFusionLogObject((rf *)v179);
      if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
      {
        float32x4_t v189 = [*((id *)v178 + 5) name];
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v189;
        _os_log_impl(&dword_235A7C000, v188, OS_LOG_TYPE_DEFAULT, "AnchorManagementConsumer: Removing reference image %@", buf, 0xCu);
      }
      int8x8_t v190 = *(int8x8_t *)(v176 + 48);
      unint64_t v191 = *((void *)v178 + 1);
      uint8x8_t v192 = (uint8x8_t)vcnt_s8(v190);
      v192.i16[0] = vaddlv_u8(v192);
      if (v192.u32[0] > 1uLL)
      {
        if (v191 >= *(void *)&v190) {
          v191 %= *(void *)&v190;
        }
      }
      else
      {
        v191 &= *(void *)&v190 - 1;
      }
      uint64_t v200 = *(uint64_t **)v178;
      uint64_t v193 = *((void *)v176 + 5);
      int v194 = *(unsigned __int8 **)(v193 + 8 * v191);
      do
      {
        long long v195 = v194;
        int v194 = *(unsigned __int8 **)v194;
      }
      while (v194 != v178);
      if (v195 == v177) {
        goto LABEL_514;
      }
      unint64_t v196 = *((void *)v195 + 1);
      if (v192.u32[0] > 1uLL)
      {
        if (v196 >= *(void *)&v190) {
          v196 %= *(void *)&v190;
        }
      }
      else
      {
        v196 &= *(void *)&v190 - 1;
      }
      int8x8_t v197 = *(uint64_t **)v178;
      if (v196 != v191)
      {
LABEL_514:
        if (v200)
        {
          unint64_t v198 = v200[1];
          if (v192.u32[0] > 1uLL)
          {
            unint64_t v199 = v200[1];
            if (v198 >= *(void *)&v190) {
              unint64_t v199 = v198 % *(void *)&v190;
            }
          }
          else
          {
            unint64_t v199 = v198 & (*(void *)&v190 - 1);
          }
          int8x8_t v197 = *(uint64_t **)v178;
          if (v199 == v191) {
            goto LABEL_360;
          }
        }
        *(void *)(v193 + 8 * v191) = 0;
        int8x8_t v197 = *(uint64_t **)v178;
      }
      if (!v197) {
        goto LABEL_366;
      }
      unint64_t v198 = v197[1];
LABEL_360:
      if (v192.u32[0] > 1uLL)
      {
        if (v198 >= *(void *)&v190) {
          v198 %= *(void *)&v190;
        }
      }
      else
      {
        v198 &= *(void *)&v190 - 1;
      }
      if (v198 != v191)
      {
        *(void *)(*((void *)v176 + 5) + 8 * v19std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 8) = v195;
        int8x8_t v197 = *(uint64_t **)v178;
      }
LABEL_366:
      *(void *)long long v195 = v197;
      *(void *)long long v178 = 0;
      --*((void *)v176 + 8);
      *(void *)long long buf = v178;
      *(void *)&buf[8] = v176 + 56;
      char v289 = 1;
      v307[0].__r_.__value_.__s.__data_[0] = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ARReferenceImage * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_367:
      long long v178 = (unsigned __int8 *)v200;
    }
    while (v200);
  }
  if (v289)
  {
    while (1)
    {
      long long v177 = *(unsigned __int8 **)v177;
      if (!v177) {
        break;
      }
      [v279 addObject:*((void *)v177 + 5)];
    }
    if (*(void *)(v299 + 152)) {
      std::function<void ()(NSSet<ARReferenceImage *> *)>::operator()(v299 + 128, v279);
    }
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__n);
  if (SHIBYTE(v302) < 0) {
    operator delete(v301[0]);
  }
  std::string::size_type v4 = v299;
LABEL_376:
  if (*(unsigned char *)(v4 + 61))
  {
    if (!*(unsigned char *)(v299 + 160))
    {
      REAnchorComponentGetComponentType();
      RESceneGetComponentsOfClass();
      if (v201)
      {
        uint64_t v202 = v201;
        do
        {
          if ((REAnchorComponentGetAnchoredLocally() & 1) == 0)
          {
            uint64_t v203 = REComponentGetEntity();
            uint64_t isRemotelyOwned = rf::helpers::isRemotelyOwned();
            if ((isRemotelyOwned & 1) == 0)
            {
              unint64_t v205 = rf::realityFusionLogObject((rf *)isRemotelyOwned);
              if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v206 = REEntityGetName();
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = v206;
                _os_log_impl(&dword_235A7C000, v205, OS_LOG_TYPE_DEFAULT, "Entity \"%s\" anchor added/modified by local peer - removing.", buf, 0xCu);
              }

              REAnchorComponentGetComponentType();
              REEntityRemoveComponentByClass();
              uint64_t v207 = *(void *)(v299 + 48);
              if (v207)
              {
                *(void *)long long buf = v203;
                LODWORD(__n[0]) = 2;
                (*(void (**)(uint64_t, uint8_t *, size_t *))(*(void *)v207 + 48))(v207, buf, __n);
              }
            }
          }
          --v202;
        }
        while (v202);
      }
    }
  }
  if (*(unsigned char *)(v285 + 2880)) {
    *(unsigned char *)(v299 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 1;
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  RESceneUnderstandingRootComponentGetComponentType();
  RESceneGetComponentsOfClass();
  uint64_t v209 = v208;
  if (RESceneGetECSManagerNullable()
    && REECSManagerGetServiceLocator()
    && MEMORY[0x237DEDEB0]()
    && (REShadowManagerGetShadowPatchFlatteningEnabled() & 1) == 0)
  {
    ShadowEnabled = (rf *)REShadowManagerGetShadowEnabled();
    int v297 = (int)ShadowEnabled;
    if (v209)
    {
      REComponentGetEntity();
      RESceneUnderstandingRenderOptionsComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        v297 &= ~RESceneUnderstandingRenderOptionsComponentIsShadowEnabled();
        goto LABEL_396;
      }
      unint64_t v271 = rf::realityFusionLogObject(0);
      if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_235A7C000, v271, OS_LOG_TYPE_DEFAULT, "The root entity should have render option component!", buf, 2u);
      }
    }
    else
    {
      unint64_t v271 = rf::realityFusionLogObject(ShadowEnabled);
      if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_235A7C000, v271, OS_LOG_TYPE_DEFAULT, "We should have a root entity!", buf, 2u);
      }
    }

    goto LABEL_396;
  }
  int v297 = 0;
LABEL_396:
  REAnchoringComponentGetComponentType();
  uint64_t ComponentsOfClass = RESceneGetComponentsOfClass();
  __n128 v212 = (uint64_t *)ComponentsOfClass;
  uint64_t v213 = v211;
  if (v211)
  {
    uint64_t v214 = 8 * v211;
    uint64_t v215 = ComponentsOfClass;
    do
    {
      REAnchoringComponentInitializeWorldTransformIfNeeded();
      v215 += 8;
      v214 -= 8;
    }
    while (v214);
  }
  uint64_t v216 = v285 + 64;
  if (!*(unsigned char *)(v299 + 160))
  {
    RECoordinateSpaceDefinitionComponentGetComponentType();
    uint64_t v217 = RESceneGetComponentsOfClass();
    *(void *)long long buf = 0;
    if (v218)
    {
      uint64_t v219 = v217;
      uint64_t v220 = 8 * v218;
      do
      {
        uint64_t v221 = REComponentGetEntity();
        REAnchorComponentGetComponentType();
        uint64_t v222 = REEntityGetComponentByClass();
        REAnchoringComponentGetComponentType();
        uint64_t v223 = REEntityGetComponentByClass();
        if (v223) {
          rf::data_flow::consumer::AnchorManagementConsumer::matchOrUpdateAnchorComponent(v299, v293, v221, v222, v223, v216, v297, (unint64_t *)buf);
        }
        v219 += 8;
        v220 -= 8;
      }
      while (v220);
    }
  }
  uu.__r_.__value_.__r.__words[0] = 0;
  if (v213)
  {
    float32x4_t v224 = &v212[v213];
    do
    {
      uint64_t v225 = REComponentGetEntity();
      RECoordinateSpaceDefinitionComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        REAnchorComponentGetComponentType();
        uint64_t v226 = REEntityGetComponentByClass();
        REAnchorComponentGetComponentType();
        uint64_t v227 = REEntityGetComponentByClass();
        rf::data_flow::consumer::AnchorManagementConsumer::updateReceiveIsAnchoredOnClientForComponent(v299, v225, v227);
        int v228 = rf::helpers::needAnchoringInClientProcessForEntity((unsigned char *)(v299 + 161), v225);
        int v229 = rf::helpers::needAnchoringInServerProcessForEntity(v225);
        REClientAnchorSyncComponentGetComponentType();
        uint64_t v230 = REEntityGetComponentByClass();
        if (*(unsigned char *)(v299 + 160)) {
          int v231 = v228;
        }
        else {
          int v231 = v229;
        }
        if (v231 == 1)
        {
          rf::data_flow::consumer::AnchorManagementConsumer::matchOrUpdateAnchorComponent(v299, v293, v225, v226, *v212, v216, v297, (unint64_t *)&uu);
        }
        else if (!*(unsigned char *)(v299 + 160) && v230)
        {
          int isAnchoringTypeAuthorizedForPeer = rf::helpers::isAnchoringTypeAuthorizedForPeer(*v212, (void *)(v285 + 232));
          if ((REClientAnchorSyncComponentIsAnchored() & isAnchoringTypeAuthorizedForPeer) == 1)
          {
            if (rf::CoordinateSpaceTracker::findCoordinateSpaceDefinitionEntity(v225))
            {
              REAnchoringComponentGetComponentType();
              if (REEntityGetComponentByClass())
              {
                if (REAnchoringComponentGetDescriptorType() - 1 <= 4)
                {
                  REEntityCalculateWorldMatrix4x4F();
                  float32x4_t v287 = v234;
                  float32x4_t v291 = v233;
                  float32x4_t v280 = v236;
                  float32x4_t v283 = v235;
                  REClientAnchorSyncComponentGetAnchorTransform();
                  uint64_t v237 = 0;
                  *(_OWORD *)__uint64_t n = v238;
                  *(_OWORD *)&size_t __n[2] = v239;
                  v305[0] = v240;
                  v305[1] = v241;
                  do
                  {
                    *(float32x4_t *)&buf[v237 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v291, COERCE_FLOAT(*(_OWORD *)&__n[v237])), v287, (float32x2_t)__n[v237], 1), v283, *(float32x4_t *)&__n[v237], 2), v280, *(float32x4_t *)&__n[v237], 3);
                    v237 += 2;
                  }
                  while (v237 != 8);
                  rf::data_flow::consumer::AnchorManagementConsumer::updateAnchorComponentFromClientAnchorSyncComponent(REEntity *,REComponent *)::appManagedAnchorCFStringRef Identifier = -1;
                  *(void *)algn_26882F448 = -1;
                  REAnchorComponentGetComponentType();
                  uint64_t v242 = REEntityGetComponentByClass();
                  if (v242)
                  {
                    RERetain();
                    uint64_t v243 = v242;
                  }
                  else
                  {
                    REAnchorComponentGetComponentType();
                    uint64_t v243 = REComponentCreateByClass();
                    rf::data_flow::consumer::AnchorManagementConsumer::updateReceiveIsAnchoredOnClientForComponent(v299, v225, v243);
                  }
                  REAnchorComponentSetAnchoredLocally();
                  REAnchorComponentSetWorldTransform();
                  REAnchorComponentSetAnchorIdentifier();
                  int IsAnchorExternal = REAnchorComponentGetIsAnchorExternal();
                  int IsExternal = REClientAnchorSyncComponentIsExternal();
                  if (IsAnchorExternal != IsExternal)
                  {
                    REAnchorComponentSetIsAnchorExternal();
                    uint64_t v246 = *(void *)(v299 + 48);
                    if (v246)
                    {
                      if (IsExternal) {
                        int v247 = 4;
                      }
                      else {
                        int v247 = 5;
                      }
                      *(void *)long long buf = v225;
                      LODWORD(__n[0]) = v247;
                      (*(void (**)(uint64_t, uint8_t *, size_t *))(*(void *)v246 + 48))(v246, buf, __n);
                    }
                  }
                  if (!v242)
                  {
                    RENetworkComponentGetComponentType();
                    uint64_t v248 = REEntityGetComponentByClass();
                    if (v248) {
                      MEMORY[0x237DED990](v248, v243);
                    }
                    REEntityAddExistingComponent();
                  }
                  RERelease();
                }
              }
            }
          }
          else
          {
            REAnchorComponentGetComponentType();
            if (REEntityGetComponentByClass()) {
              rf::data_flow::consumer::AnchorManagementConsumer::unanchorEntity(v299, v225);
            }
          }
        }
      }
      ++v212;
    }
    while (v212 != v224);
  }
  if (*(unsigned char *)(v299 + 160))
  {
    REAnchoringComponentGetComponentType();
    uint64_t v249 = RESceneGetComponentsOfClass();
    if (v250)
    {
      uint64_t v251 = v249;
      uint64_t v252 = 8 * v250;
      float32x4_t v281 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
      do
      {
        int DescriptorType = REAnchoringComponentGetDescriptorType();
        uint64_t v254 = REComponentGetEntity();
        if (!rf::helpers::needAnchoringInClientProcessForEntity((unsigned char *)(v299 + 161), v254)) {
          goto LABEL_443;
        }
        RECoordinateSpaceDefinitionComponentGetComponentType();
        if (REEntityGetComponentByClass()) {
          goto LABEL_443;
        }
        REClientAnchorSyncComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        REAnchorComponentGetComponentType();
        uint64_t v255 = REEntityGetComponentByClass();
        if ((v255 != 0) != REClientAnchorSyncComponentIsAnchored())
        {
          REClientAnchorSyncComponentSetIsAnchored();
          RENetworkMarkComponentDirty();
        }
        int v256 = REClientAnchorSyncComponentIsExternal();
        if (v255)
        {
          if (v256 == REAnchorComponentGetIsAnchorExternal())
          {
            if ((DescriptorType - 1) <= 4) {
              goto LABEL_456;
            }
            goto LABEL_443;
          }
        }
        else if ((v256 & 1) == 0)
        {
          goto LABEL_443;
        }
        REClientAnchorSyncComponentSetIsExternal();
        RENetworkMarkComponentDirty();
        if ((DescriptorType - 1) < 5 && v255 != 0)
        {
LABEL_456:
          REAnchorComponentGetWorldTransform();
          float32x4_t v298 = v258;
          float32x4_t v288 = v260;
          float32x4_t v292 = v259;
          float32x4_t v284 = v261;
          REClientAnchorSyncComponentGetAnchorTransform();
          if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v281, vabdq_f32(v298, v262)), (int8x16_t)vcgeq_f32(v281, vabdq_f32(v292, v263))), vandq_s8((int8x16_t)vcgeq_f32(v281, vabdq_f32(v288, v264)), (int8x16_t)vcgeq_f32(v281, vabdq_f32(v284, v265))))) & 0x80000000) == 0)
          {
            REClientAnchorSyncComponentSetAnchorTransform();
            RENetworkMarkComponentDirty();
          }
        }
LABEL_443:
        v251 += 8;
        v252 -= 8;
      }
      while (v252);
    }
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result) {
    uint64_t result = kdebug_trace();
  }
  if (*(unsigned char *)(v299 + 409)) {
    *(_WORD *)(v299 + std::__hash_table<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,std::__unordered_map_hasher<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Hash,rf::data_flow::RFUUID::Equality,true>,std::__unordered_map_equal<rf::data_flow::RFUUID,std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>,rf::data_flow::RFUUID::Equality,rf::data_flow::RFUUID::Hash,true>,std::allocator<std::__hash_value_type<rf::data_flow::RFUUID,std::shared_ptr<rf::data_flow::consumer::MeshVisualizer::DebugVisMesh>>>>::~__hash_table((uint64_t)this + 408) = 0;
  }
  if (*(unsigned char *)(v299 + 160))
  {
    REClientAnchorSyncComponentGetComponentType();
    uint64_t result = RESceneGetComponentsOfClass();
    if (v266)
    {
      uint64_t v267 = result;
      uint64_t v268 = 8 * v266;
      do
      {
        uint64_t v269 = REComponentGetEntity();
        uint64_t result = rf::helpers::needAnchoringInClientProcessForEntity((unsigned char *)(v299 + 161), v269);
        if ((result & 1) == 0)
        {
          REClientAnchorSyncComponentGetComponentType();
          uint64_t result = REEntityRemoveComponentByClass();
        }
        v267 += 8;
        v268 -= 8;
      }
      while (v268);
    }
  }
  return result;
}