uint64_t SGRecordMeasurementState(void *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  double v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E4F143B8];
  result = a1[2];
  if (!result)
  {
    v3 = mach_absolute_time() - a1[1];
    if (SGMachTimeToNanoseconds_onceToken != -1) {
      dispatch_once(&SGMachTimeToNanoseconds_onceToken, &__block_literal_global_16442);
    }
    v4 = v3 * SGMachTimeToNanoseconds_machTimebaseInfo / *(unsigned int *)algn_1EB9F00D4;
    v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v8 = (void *)*a1;
      v6 = (double)v4;
      v9 = 138412546;
      v10 = v8;
      v11 = 2048;
      v12 = (double)v4 * 0.000000001;
      _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "SGScales: %@ took %f seconds", (uint8_t *)&v9, 0x16u);
    }
    else
    {
      v6 = (double)v4;
    }

    v7 = (void *)*a1;
    +[SGAggregateLogging pushValue:@"timing" toDistKeyWithDomain:*a1 suffix:v6 / 1000000.0];

    *a1 = 0;
    if (v4 <= 1) {
      result = 1;
    }
    else {
      result = v4;
    }
    a1[2] = result;
  }
  return result;
}

void sub_1CA6543A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA655B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(v48);
  objc_destroyWeak(location);
  objc_destroyWeak(&a48);
  _Unwind_Resume(a1);
}

void sub_1CA6565B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 144), 8);
  _Unwind_Resume(a1);
}

id aggdKeyForComponents(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  memset(v17, 0, sizeof(v17));
  uint64_t v16 = (char *)v17;
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id v13 = a1;
  appendStringToBuf(&v16, (unint64_t)v18, @"com.apple.suggestions", 0);
  appendStringToBuf(&v16, (unint64_t)v18, v13, 1);

  appendStringToBuf(&v16, (unint64_t)v18, v9, 1);
  appendStringToBuf(&v16, (unint64_t)v18, v12, 1);

  appendStringToBuf(&v16, (unint64_t)v18, v11, 1);
  appendStringToBuf(&v16, (unint64_t)v18, v10, 1);

  v14 = (void *)[[NSString alloc] initWithUTF8String:v17];
  return v14;
}

void appendStringToBuf(char **a1, unint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  v8 = *a1;
  id v13 = v7;
  if (v7 && (unint64_t)v8 < a2)
  {
    if (a4)
    {
      char *v8 = 46;
      v8 = *a1 + 1;
      *a1 = v8;
      if ((unint64_t)v8 >= a2)
      {
        id v11 = [MEMORY[0x1E4F28B00] currentHandler];
        id v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void appendStringToBuf(char **, const char *, NSString *__strong, BOOL)");
        [v11 handleFailureInFunction:v12 file:@"SGAggregateLogging+PET.m" lineNumber:26 description:@"Logging string too long"];

        id v7 = v13;
        v8 = *a1;
      }
    }
    v8 = &(*a1)[strlcpy(v8, (const char *)[objc_retainAutorelease(v7) UTF8String], a2 - (void)*a1)];
    *a1 = v8;
  }
  if ((unint64_t)v8 >= a2)
  {
    id v9 = [MEMORY[0x1E4F28B00] currentHandler];
    id v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void appendStringToBuf(char **, const char *, NSString *__strong, BOOL)");
    [v9 handleFailureInFunction:v10 file:@"SGAggregateLogging+PET.m" lineNumber:30 description:@"Logging string too long"];
  }
}

void ___registerEnableDisablePreferenceChangeListener_block_invoke(uint64_t a1)
{
  v2 = [MEMORY[0x1E4F28C40] defaultCenter];
  [v2 postNotificationName:*MEMORY[0x1E4F5DF00] object:0 userInfo:0 deliverImmediately:1];

  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *MEMORY[0x1E4F5DC08];
    v4 = (void *)CFPreferencesCopyAppValue(@"AppCanShowSiriSuggestionsBlacklist", @"com.apple.suggestions");
    LOBYTE(v3) = [v4 containsObject:v3];

    v5 = objc_msgSend(MEMORY[0x1E4F25550], "sg_newStore");
    id v6 = v5;
    if (v3) {
      [v5 removeSuggestedEventCalendar];
    }
    else {
      [v5 insertSuggestedEventCalendar];
    }
  }
}

void sub_1CA657B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6585E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2SelfIdModelScoreReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          v18 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_46:
          uint64_t v37 = 16;
          goto LABEL_55;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_50:
          *(unsigned char *)(a1 + 24) = v28 != 0;
          continue;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v34 = *v3;
        unint64_t v35 = *(void *)(a2 + v34);
        if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v35 + 1;
        v22 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0) {
          goto LABEL_52;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_54:
      uint64_t v37 = 20;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2SuggestdExitReasonReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2AutocompleteUserSelectedContactReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          v18 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  uint64_t v22 = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_46:
          BOOL v38 = v22 != 0;
          uint64_t v39 = 25;
          goto LABEL_51;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_50:
          BOOL v38 = v28 != 0;
          uint64_t v39 = 24;
LABEL_51:
          *(unsigned char *)(a1 + v39) = v38;
          continue;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_53;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_55;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v34) = 0;
      }
LABEL_55:
      *(_DWORD *)(a1 + 8) = v34;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SGM2BundleIdsTrackedAsOtherReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t heuristicIdentifyHandle(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = self;

  if (v2)
  {
    memset(v24, 0, sizeof(v24));
    CFIndex Length = CFStringGetLength(v1);
    CFStringRef theString = v1;
    uint64_t v28 = 0;
    CFIndex v29 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v1);
    CStringPtr = 0;
    char v26 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
    }
    int64_t v30 = 0;
    int64_t v31 = 0;
    unsigned int v27 = CStringPtr;
    if (Length < 1)
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      int64_t v7 = 0;
      unsigned int v8 = 0;
      int v9 = 0;
      int64_t v10 = 0;
      uint64_t v11 = 64;
      do
      {
        if ((unint64_t)v10 >= 4) {
          uint64_t v12 = 4;
        }
        else {
          uint64_t v12 = v10;
        }
        CFIndex v13 = v29;
        if (v29 <= v10)
        {
          UniChar v14 = 0;
        }
        else if (v26)
        {
          UniChar v14 = v26[v10 + v28];
        }
        else if (v27)
        {
          UniChar v14 = v27[v28 + v10];
        }
        else
        {
          if (v31 <= v10 || v7 > v10)
          {
            uint64_t v19 = v12 + v6;
            uint64_t v20 = v11 - v12;
            int64_t v21 = v10 - v12;
            CFIndex v22 = v21 + 64;
            if (v21 + 64 >= v29) {
              CFIndex v22 = v29;
            }
            int64_t v30 = v21;
            int64_t v31 = v22;
            if (v29 >= v20) {
              CFIndex v13 = v20;
            }
            v32.length = v13 + v19;
            v32.location = v21 + v28;
            CFStringGetCharacters(theString, v32, (UniChar *)v24);
            int64_t v7 = v30;
          }
          UniChar v14 = *((_WORD *)v24 + v10 - v7);
        }
        unsigned int v15 = (unsigned __int16)(v14 - 48);
        if (v14 == 64) {
          ++v9;
        }
        unsigned int v16 = (unsigned __int16)(v14 + 240);
        if (v15 < 0xA || v16 < 0xA) {
          ++v8;
        }
        ++v10;
        --v6;
        ++v11;
      }
      while (Length != v10);
      if (v9 == 1) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = 2 * (v8 > 4);
      }
    }
  }

  return v2;
}

uint64_t SGM2ContactCreatedReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_39;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if (v17 == 2)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0) {
            goto LABEL_43;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            uint64_t v28 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 24) = v28 != 0;
      }
      else if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA660A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA660D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6610AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CA661690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA661884(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA663004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t SGM2ContactDetailExtractionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 0x20u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_81:
          uint64_t v63 = 36;
          goto LABEL_111;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 0x80u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_85:
          BOOL v64 = v28 != 0;
          uint64_t v65 = 41;
          goto LABEL_106;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (2)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v22 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_89:
          uint64_t v63 = 8;
          goto LABEL_111;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 0x10u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v22 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                BOOL v14 = v38++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_93:
          uint64_t v63 = 32;
          goto LABEL_111;
        case 6u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          while (2)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
              *(void *)(a2 + v44) = v45 + 1;
              v22 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_97:
          uint64_t v63 = 20;
          goto LABEL_111;
        case 7u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v49 = *v3;
            unint64_t v50 = *(void *)(a2 + v49);
            if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
              *(void *)(a2 + v49) = v50 + 1;
              v22 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                BOOL v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_101:
          uint64_t v63 = 12;
          goto LABEL_111;
        case 8u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          *(unsigned char *)(a1 + 44) |= 0x40u;
          while (2)
          {
            uint64_t v55 = *v3;
            unint64_t v56 = *(void *)(a2 + v55);
            if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
              *(void *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                BOOL v14 = v53++ >= 9;
                if (v14)
                {
                  uint64_t v54 = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v54 = 0;
          }
LABEL_105:
          BOOL v64 = v54 != 0;
          uint64_t v65 = 40;
LABEL_106:
          *(unsigned char *)(a1 + v65) = v64;
          continue;
        case 9u:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v60 = *v3;
        unint64_t v61 = *(void *)(a2 + v60);
        if (v61 == -1 || v61 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
        *(void *)(a2 + v60) = v61 + 1;
        v22 |= (unint64_t)(v62 & 0x7F) << v58;
        if ((v62 & 0x80) == 0) {
          goto LABEL_108;
        }
        v58 += 7;
        BOOL v14 = v59++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_110;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_108:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_110:
      uint64_t v63 = 16;
LABEL_111:
      *(_DWORD *)(a1 + v63) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2ContactDetailSentReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_60:
          uint64_t v47 = 24;
          goto LABEL_77;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_64;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_64:
          uint64_t v47 = 8;
          goto LABEL_77;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v22 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_68:
          uint64_t v47 = 12;
          goto LABEL_77;
        case 5u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  uint64_t v38 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v38 = 0;
          }
LABEL_72:
          *(unsigned char *)(a1 + 32) = v38 != 0;
          continue;
        case 6u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v44 = *v3;
        unint64_t v45 = *(void *)(a2 + v44);
        if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
        *(void *)(a2 + v44) = v45 + 1;
        v22 |= (unint64_t)(v46 & 0x7F) << v42;
        if ((v46 & 0x80) == 0) {
          goto LABEL_74;
        }
        v42 += 7;
        BOOL v14 = v43++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_76;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_76:
      uint64_t v47 = 28;
LABEL_77:
      *(_DWORD *)(a1 + v47) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2ContactsInterfaceCacheCountReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA668444(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6685FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA668858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1158(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1159(uint64_t a1)
{
}

void sub_1CA668ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA668D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA668F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6691C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA669818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2ContactsInterfaceCacheHitReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2FoundInMailModelScoreReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_67:
          uint64_t v53 = 28;
          goto LABEL_89;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_71:
          uint64_t v53 = 8;
          goto LABEL_89;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (v14)
                {
                  uint64_t v33 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v33 = 0;
          }
LABEL_75:
          BOOL v54 = v33 != 0;
          uint64_t v55 = 37;
          goto LABEL_80;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v40 = *v3;
            unint64_t v41 = *(void *)(a2 + v40);
            if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
              *(void *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v14 = v38++ >= 9;
                if (v14)
                {
                  uint64_t v39 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v39 = 0;
          }
LABEL_79:
          BOOL v54 = v39 != 0;
          uint64_t v55 = 36;
LABEL_80:
          *(unsigned char *)(a1 + v55) = v54;
          continue;
        case 6u:
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v45 = *v3;
            unint64_t v46 = *(void *)(a2 + v45);
            if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v46 + 1;
              v22 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                BOOL v14 = v44++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_84:
          uint64_t v53 = 24;
          goto LABEL_89;
        case 7u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v50 = *v3;
        unint64_t v51 = *(void *)(a2 + v50);
        if (v51 == -1 || v51 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
        *(void *)(a2 + v50) = v51 + 1;
        v22 |= (unint64_t)(v52 & 0x7F) << v48;
        if ((v52 & 0x80) == 0) {
          goto LABEL_86;
        }
        v48 += 7;
        BOOL v14 = v49++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_88;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_86:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_88:
      uint64_t v53 = 32;
LABEL_89:
      *(_DWORD *)(a1 + v53) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA66C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1465(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1466(uint64_t a1)
{
}

void sub_1CA66C894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1490(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1491(uint64_t a1)
{
}

void sub_1CA66D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t SGMIMetricsUpdateProcessInformationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    unint64_t v18 = v10 >> 3;
    if ((int)(v10 >> 3) <= 39)
    {
      switch((int)v18)
      {
        case 1:
          char v19 = objc_alloc_init(SGMIMetricsTrialMetadata);
          uint64_t v20 = 120;
          goto LABEL_69;
        case 2:
          char v19 = objc_alloc_init(SGMIMetricsTrialMetadata);
          uint64_t v20 = 64;
LABEL_69:
          objc_storeStrong((id *)(a1 + v20), v19);
          if PBReaderPlaceMark() && (SGMIMetricsTrialMetadataReadFrom((uint64_t)v19, a2)) {
            goto LABEL_71;
          }
          goto LABEL_220;
        case 3:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x200u;
          while (2)
          {
            uint64_t v50 = *v3;
            unint64_t v51 = *(void *)(a2 + v50);
            if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v51 + 1;
              v23 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                BOOL v14 = v49++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_167;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_167:
          uint64_t v101 = 92;
          goto LABEL_213;
        case 4:
          if (v16 == 2)
          {
            uint64_t result = PBReaderPlaceMark();
            if (!result) {
              return result;
            }
            while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
            {
              char v54 = 0;
              unsigned int v55 = 0;
              uint64_t v56 = 0;
              while (1)
              {
                uint64_t v57 = *v3;
                unint64_t v58 = *(void *)(a2 + v57);
                if (v58 == -1 || v58 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
                *(void *)(a2 + v57) = v58 + 1;
                v56 |= (unint64_t)(v59 & 0x7F) << v54;
                if (v59 < 0)
                {
                  v54 += 7;
                  BOOL v14 = v55++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_91;
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_91:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v103 = 0;
            unsigned int v104 = 0;
            uint64_t v105 = 0;
            while (1)
            {
              uint64_t v106 = *v3;
              unint64_t v107 = *(void *)(a2 + v106);
              if (v107 == -1 || v107 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v108 = *(unsigned char *)(*(void *)(a2 + *v7) + v107);
              *(void *)(a2 + v106) = v107 + 1;
              v105 |= (unint64_t)(v108 & 0x7F) << v103;
              if (v108 < 0)
              {
                v103 += 7;
                BOOL v14 = v104++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_217;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_217:
            PBRepeatedInt32Add();
          }
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
          goto LABEL_66;
        case 10:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x100u;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v23 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v14 = v61++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_171;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_171:
          uint64_t v101 = 88;
          goto LABEL_213;
        case 11:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          *(_WORD *)(a1 + 132) |= 0x2000u;
          while (2)
          {
            uint64_t v68 = *v3;
            unint64_t v69 = *(void *)(a2 + v68);
            if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v69);
              *(void *)(a2 + v68) = v69 + 1;
              v67 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                BOOL v14 = v66++ >= 9;
                if (v14)
                {
                  uint64_t v67 = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v67 = 0;
          }
LABEL_175:
          *(unsigned char *)(a1 + 128) = v67 != 0;
          goto LABEL_214;
        case 20:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x10u;
          while (2)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v75 = *(unsigned char *)(*(void *)(a2 + *v7) + v74);
              *(void *)(a2 + v73) = v74 + 1;
              v23 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                BOOL v14 = v72++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_179:
          uint64_t v101 = 72;
          goto LABEL_213;
        case 21:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x20u;
          while (2)
          {
            uint64_t v78 = *v3;
            unint64_t v79 = *(void *)(a2 + v78);
            if (v79 == -1 || v79 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v80 = *(unsigned char *)(*(void *)(a2 + *v7) + v79);
              *(void *)(a2 + v78) = v79 + 1;
              v23 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                BOOL v14 = v77++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_183:
          uint64_t v101 = 76;
          goto LABEL_213;
        case 22:
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x400u;
          while (2)
          {
            uint64_t v83 = *v3;
            unint64_t v84 = *(void *)(a2 + v83);
            if (v84 == -1 || v84 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v85 = *(unsigned char *)(*(void *)(a2 + *v7) + v84);
              *(void *)(a2 + v83) = v84 + 1;
              v23 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                BOOL v14 = v82++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_187:
          uint64_t v101 = 96;
          goto LABEL_213;
        default:
          if (v18 != 30) {
            goto LABEL_66;
          }
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 132) |= 0x80u;
          while (2)
          {
            uint64_t v45 = *v3;
            unint64_t v46 = *(void *)(a2 + v45);
            if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v46 + 1;
              v23 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                BOOL v14 = v44++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_212;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_212:
          uint64_t v101 = 84;
          goto LABEL_213;
      }
      goto LABEL_214;
    }
    if ((int)v18 > 49) {
      break;
    }
    switch(v18)
    {
      case '(':
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 132) |= 0x40u;
        while (1)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 1;
          v23 |= (unint64_t)(v37 & 0x7F) << v33;
          if ((v37 & 0x80) == 0) {
            goto LABEL_153;
          }
          v33 += 7;
          BOOL v14 = v34++ >= 9;
          if (v14)
          {
            LODWORD(v23) = 0;
            goto LABEL_155;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_153:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_155:
        uint64_t v101 = 80;
        break;
      case ')':
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 132) |= 0x1000u;
        while (1)
        {
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 == -1 || v41 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
          *(void *)(a2 + v40) = v41 + 1;
          v23 |= (unint64_t)(v42 & 0x7F) << v38;
          if ((v42 & 0x80) == 0) {
            goto LABEL_157;
          }
          v38 += 7;
          BOOL v14 = v39++ >= 9;
          if (v14)
          {
            LODWORD(v23) = 0;
            goto LABEL_159;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_157:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_159:
        uint64_t v101 = 104;
        break;
      case '*':
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 132) |= 0x800u;
        while (1)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0) {
            goto LABEL_149;
          }
          v21 += 7;
          BOOL v14 = v22++ >= 9;
          if (v14)
          {
            LODWORD(v23) = 0;
            goto LABEL_151;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_149:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_151:
        uint64_t v101 = 100;
        break;
      default:
LABEL_66:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_214;
    }
LABEL_213:
    *(_DWORD *)(a1 + v101) = v23;
LABEL_214:
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
  }
  switch((int)v18)
  {
    case '<':
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      *(_WORD *)(a1 + 132) |= 1u;
      while (2)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
          *(void *)(a2 + v30) = v31 + 1;
          v29 |= (unint64_t)(v32 & 0x7F) << v27;
          if (v32 < 0)
          {
            v27 += 7;
            BOOL v14 = v28++ >= 9;
            if (v14)
            {
              uint64_t v29 = 0;
              goto LABEL_163;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_163:
      uint64_t v102 = 32;
      goto LABEL_200;
    case '=':
      char v86 = 0;
      unsigned int v87 = 0;
      uint64_t v29 = 0;
      *(_WORD *)(a1 + 132) |= 8u;
      while (2)
      {
        uint64_t v88 = *v3;
        unint64_t v89 = *(void *)(a2 + v88);
        if (v89 == -1 || v89 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v90 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
          *(void *)(a2 + v88) = v89 + 1;
          v29 |= (unint64_t)(v90 & 0x7F) << v86;
          if (v90 < 0)
          {
            v86 += 7;
            BOOL v14 = v87++ >= 9;
            if (v14)
            {
              uint64_t v29 = 0;
              goto LABEL_191;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_191:
      uint64_t v102 = 56;
      goto LABEL_200;
    case '>':
      char v91 = 0;
      unsigned int v92 = 0;
      uint64_t v29 = 0;
      *(_WORD *)(a1 + 132) |= 4u;
      while (2)
      {
        uint64_t v93 = *v3;
        unint64_t v94 = *(void *)(a2 + v93);
        if (v94 == -1 || v94 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v95 = *(unsigned char *)(*(void *)(a2 + *v7) + v94);
          *(void *)(a2 + v93) = v94 + 1;
          v29 |= (unint64_t)(v95 & 0x7F) << v91;
          if (v95 < 0)
          {
            v91 += 7;
            BOOL v14 = v92++ >= 9;
            if (v14)
            {
              uint64_t v29 = 0;
              goto LABEL_195;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_195:
      uint64_t v102 = 48;
      goto LABEL_200;
    case '?':
      char v96 = 0;
      unsigned int v97 = 0;
      uint64_t v29 = 0;
      *(_WORD *)(a1 + 132) |= 2u;
      while (2)
      {
        uint64_t v98 = *v3;
        unint64_t v99 = *(void *)(a2 + v98);
        if (v99 == -1 || v99 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v100 = *(unsigned char *)(*(void *)(a2 + *v7) + v99);
          *(void *)(a2 + v98) = v99 + 1;
          v29 |= (unint64_t)(v100 & 0x7F) << v96;
          if (v100 < 0)
          {
            v96 += 7;
            BOOL v14 = v97++ >= 9;
            if (v14)
            {
              uint64_t v29 = 0;
              goto LABEL_199;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_199:
      uint64_t v102 = 40;
LABEL_200:
      *(void *)(a1 + v102) = v29;
      goto LABEL_214;
    default:
      if (v18 != 50) {
        goto LABEL_66;
      }
      char v19 = objc_alloc_init(SGMIMetricsSubmodelsStats);
      objc_storeStrong((id *)(a1 + 112), v19);
      if (PBReaderPlaceMark() && SGMIMetricsSubmodelsStatsReadFrom((uint64_t)v19, a2))
      {
LABEL_71:
        PBReaderRecallMark();

        goto LABEL_214;
      }
LABEL_220:

      return 0;
  }
}

void sub_1CA67310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1828(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1829(uint64_t a1)
{
}

void sub_1CA674220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA675F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  _Block_object_dispose((const void *)(v38 - 176), 8);
  SGRecordMeasurementState(&a38);
  _Block_object_dispose((const void *)(v38 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1CA676868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA677088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6774AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6779A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA677BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRTRoutineManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!CoreRoutineLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreRoutineLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E65B58B0;
    uint64_t v8 = 0;
    CoreRoutineLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreRoutineLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    v4 = [NSString stringWithUTF8String:"void *CoreRoutineLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGReminderDissector.m", 62, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTRoutineManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    v5 = [NSString stringWithUTF8String:"Class getRTRoutineManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGReminderDissector.m", 63, @"Unable to find class %s", "RTRoutineManager");

LABEL_10:
    __break(1u);
  }
  getRTRoutineManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreRoutineLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreRoutineLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t SGM2SearchResultsIncludedPureSuggestionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA679490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2095(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2096(uint64_t a1)
{
}

void sub_1CA679650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6797F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA679AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA679D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA67A5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t SGM2SearchResultsUserSelectedContactReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          unint64_t v18 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  uint64_t v22 = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_46:
          BOOL v38 = v22 != 0;
          uint64_t v39 = 25;
          goto LABEL_51;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_50:
          BOOL v38 = v28 != 0;
          uint64_t v39 = 24;
LABEL_51:
          *(unsigned char *)(a1 + v39) = v38;
          continue;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_53;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_55;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v34) = 0;
      }
LABEL_55:
      *(_DWORD *)(a1 + 8) = v34;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2SerializedContactsCacheHitReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2SqliteErrorsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA67DE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2596(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2597(uint64_t a1)
{
}

void sub_1CA67E220(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA67E394(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA67E8C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA67EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA67F5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2SuggestedContactDetailShownReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGMIMetricsAggregatedAccuracyLogsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 0xBu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsTrialMetadata);
        uint64_t v18 = 24;
        goto LABEL_33;
      case 0xCu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        uint64_t v26 = 8;
        goto LABEL_38;
      case 0xDu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        uint64_t v26 = 16;
        goto LABEL_38;
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        goto LABEL_28;
      case 0x15u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsTrialMetadata);
        uint64_t v18 = 48;
LABEL_33:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_48;
        }
        goto LABEL_40;
      case 0x16u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        uint64_t v26 = 32;
        goto LABEL_38;
      case 0x17u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        uint64_t v26 = 40;
LABEL_38:
        objc_storeStrong((id *)(a1 + v26), v17);
        if (PBReaderPlaceMark() && SGMIMetricsAggregatedAccuracyLogReadFrom((uint64_t)v17, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_48:

        return 0;
      default:
        if ((v10 >> 3) == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 60) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_44;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_46:
          *(_DWORD *)(a1 + 56) = v21;
        }
        else
        {
LABEL_28:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        goto LABEL_41;
    }
  }
}

uint64_t SGM2SuggestedContactDetailUsedReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2UnknownContactInformationShownReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v17;

          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_46:
          *(_DWORD *)(a1 + 8) = v22;
          continue;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  uint64_t v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_50:
          BOOL v38 = v28 != 0;
          uint64_t v39 = 24;
          goto LABEL_55;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_52;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          uint64_t v34 = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v34 = 0;
      }
LABEL_54:
      BOOL v38 = v34 != 0;
      uint64_t v39 = 25;
LABEL_55:
      *(unsigned char *)(a1 + v39) = v38;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2PerfXPCLatencyReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGM2CustomResponsesHarvestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA683EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3348(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3349(uint64_t a1)
{
}

uint64_t processTree(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1)
  {
    long long v7 = *(const xmlChar **)(a2 + 16);
    if (v7)
    {
      uint64_t result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"head");
      if (result) {
        return result;
      }
      uint64_t result = xmlStrEqual(v7, (const xmlChar *)"script");
      if (result) {
        return result;
      }
      uint64_t result = xmlStrEqual(v7, (const xmlChar *)"style");
      if (result) {
        return result;
      }
      char v8 = *(const xmlChar **)(a2 + 16);
      if (v8)
      {
        if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"p") || xmlStrEqual(v8, (const xmlChar *)"div"))
        {
LABEL_12:
          if (*(_DWORD *)(v3 + 16) != 2)
          {
            bufAddChar(v3, 10);
            int v9 = *(_DWORD *)(v3 + 16);
            BOOL v10 = v9 == 1;
            int v11 = v9 == 1 ? 2 : 1;
            *(_DWORD *)(v3 + 16) = v11;
            if (!v10)
            {
              bufAddChar(v3, 10);
              if (*(_DWORD *)(v3 + 16) == 1) {
                int v12 = 2;
              }
              else {
                int v12 = 1;
              }
              *(_DWORD *)(v3 + 16) = v12;
            }
          }
          if (*(int *)(v3 + 32) < 1)
          {
            int v14 = 1;
          }
          else
          {
            int v13 = 0;
            int v14 = 1;
            do
            {
              toBuf(v3, "> ");
              ++v13;
            }
            while (v13 < *(_DWORD *)(v3 + 32));
          }
LABEL_42:
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"b")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"strong"))
          {
            int v20 = *(_DWORD *)(v3 + 20);
            if (!v20) {
              *(_DWORD *)(v3 + 44) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(v3 + 20) = v20 + 1;
            goto LABEL_47;
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"i")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"em"))
          {
            int v24 = *(_DWORD *)(v3 + 24);
            if (!v24) {
              *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(v3 + 24) = v24 + 1;
            goto LABEL_47;
          }
          int v27 = xmlStrlen(*(const xmlChar **)(a2 + 16));
          uint64_t v28 = *(const xmlChar **)(a2 + 16);
          if (v27 == 2 && *v28 == 104)
          {
            int v29 = *(_DWORD *)(v3 + 36);
            if (!v29) {
              *(_DWORD *)(v3 + 60) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(v3 + 36) = v29 + 1;
            goto LABEL_47;
          }
          if (xmlStrEqual(v28, (const xmlChar *)"tt")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"pre"))
          {
            int v34 = *(_DWORD *)(v3 + 28);
            if (!v34) {
              *(_DWORD *)(v3 + 52) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(v3 + 28) = v34 + 1;
            goto LABEL_47;
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"ol"))
          {
            *(_DWORD *)(v3 + 68) = 1;
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"li"))
          {
            li(v3);
          }
          else
          {
            if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"a"))
            {
              int v39 = *(_DWORD *)(v3 + 40);
              if (!v39) {
                *(_DWORD *)(v3 + 64) = *(_DWORD *)(v3 + 8);
              }
              *(_DWORD *)(v3 + 40) = v39 + 1;
              goto LABEL_47;
            }
            if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"br"))
            {
              if (*(_DWORD *)(v3 + 16) != 2)
              {
                bufAddChar(v3, 10);
                if (*(_DWORD *)(v3 + 16) == 1) {
                  int v49 = 2;
                }
                else {
                  int v49 = 1;
                }
                *(_DWORD *)(v3 + 16) = v49;
              }
              if (*(int *)(v3 + 32) >= 1)
              {
                int v50 = 0;
                do
                {
                  toBuf(v3, "> ");
                  ++v50;
                }
                while (v50 < *(_DWORD *)(v3 + 32));
              }
              goto LABEL_47;
            }
            if (*(unsigned char *)(v3 + 88)
              && (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"tr")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"td")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"th")))
            {
              if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table")) {
                ++*(_DWORD *)(v3 + 84);
              }
              toBuf(v3, "[");
              toBuf(v3, *(char **)(a2 + 16));
              toBufInt(v3, *(_DWORD *)(v3 + 84));
              char v52 = "] ";
            }
            else
            {
              if (!xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sup")
                && !xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sub"))
              {
                goto LABEL_47;
              }
              if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
              {
                bufAddChar(v3, 32);
                *(_DWORD *)(v3 + 16) = 3;
              }
              char v52 = "(";
            }
            toBuf(v3, v52);
          }
LABEL_47:
          for (uint64_t i = *(void *)(a2 + 24); i; uint64_t i = *(void *)(i + 48))
            processTree(v3, i);
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"b")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"strong"))
          {
            int v22 = *(_DWORD *)(v3 + 20);
            if (v22 <= 1) {
              int v22 = 1;
            }
            int v23 = v22 - 1;
            *(_DWORD *)(v3 + 20) = v23;
            if (!v23 && (*(_DWORD *)(v3 + 44) & 0x80000000) == 0) {
              *(_DWORD *)(v3 + 44) = -1;
            }
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"i") {
                 || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"em"))
          }
          {
            int v25 = *(_DWORD *)(v3 + 24);
            if (v25 <= 1) {
              int v25 = 1;
            }
            int v26 = v25 - 1;
            *(_DWORD *)(v3 + 24) = v26;
            if (!v26 && (*(_DWORD *)(v3 + 48) & 0x80000000) == 0) {
              *(_DWORD *)(v3 + 48) = -1;
            }
          }
          else
          {
            int v30 = xmlStrlen(*(const xmlChar **)(a2 + 16));
            char v31 = *(const xmlChar **)(a2 + 16);
            if (v30 == 2 && *v31 == 104)
            {
              int v32 = *(_DWORD *)(v3 + 36);
              if (v32 <= 1) {
                int v32 = 1;
              }
              int v33 = v32 - 1;
              *(_DWORD *)(v3 + 36) = v33;
              if (!v33 && (*(_DWORD *)(v3 + 60) & 0x80000000) == 0) {
                *(_DWORD *)(v3 + 60) = -1;
              }
            }
            else if (xmlStrEqual(v31, (const xmlChar *)"tt") {
                   || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"pre"))
            }
            {
              int v35 = *(_DWORD *)(v3 + 28);
              if (v35 <= 1) {
                int v35 = 1;
              }
              int v36 = v35 - 1;
              *(_DWORD *)(v3 + 28) = v36;
              if (!v36 && (*(_DWORD *)(v3 + 52) & 0x80000000) == 0) {
                *(_DWORD *)(v3 + 52) = -1;
              }
            }
            else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"ol"))
            {
              *(_DWORD *)(v3 + 68) = 0;
            }
            else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"a"))
            {
              int v59 = v14;
              Prop = xmlGetProp((const xmlNode *)a2, (const xmlChar *)"href");
              free(*(void **)(v3 + 72));
              if (Prop) {
                BOOL v38 = strdup((const char *)Prop);
              }
              else {
                BOOL v38 = 0;
              }
              *(void *)(v3 + 72) = v38;
              int v40 = *(_DWORD *)(v3 + 40);
              if (v40 <= 1) {
                int v40 = 1;
              }
              int v41 = v40 - 1;
              *(_DWORD *)(v3 + 40) = v41;
              if (!v41 && (*(_DWORD *)(v3 + 64) & 0x80000000) == 0) {
                *(_DWORD *)(v3 + 64) = -1;
              }
              if (Prop && *Prop)
              {
                int v42 = strlen((const char *)Prop);
                if (v42 < 7 || (uint64_t v43 = 7, strncmp((const char *)Prop, "mailto:", 7uLL))) {
                  uint64_t v43 = 0;
                }
                unsigned int v44 = &Prop[v43];
                int v45 = strlen((const char *)v44);
                uint64_t v46 = *(void *)v3;
                int v47 = *(_DWORD *)(v3 + 8);
                if (!bufEndswith(*(void *)v3, v47, (char *)v44, v45)
                  && (v42 < 7
                   || strncmp((const char *)Prop, "http://", 7uLL)
                   || !bufEndswith(v46, v47, (char *)v44 + 7, v45 - 7)))
                {
                  if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
                  {
                    bufAddChar(v3, 32);
                    *(_DWORD *)(v3 + 16) = 3;
                  }
                  toBuf(v3, "<");
                  if (*(unsigned char *)(v3 + 89)) {
                    char v48 = "_link_";
                  }
                  else {
                    char v48 = (char *)Prop;
                  }
                  toBuf(v3, v48);
                  toBuf(v3, ">");
                  if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
                  {
                    bufAddChar(v3, 32);
                    *(_DWORD *)(v3 + 16) = 3;
                  }
                }
              }
              ((void (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(Prop);
              int v14 = v59;
            }
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"tr")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"td")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"th"))
          {
            if (*(unsigned char *)(v3 + 88))
            {
              toBuf(v3, " [/");
              toBuf(v3, *(char **)(a2 + 16));
              int v53 = *(_DWORD *)(v3 + 84);
              *(_OWORD *)__s = 0u;
              long long v61 = 0u;
              __sprintf_chk(__s, 0, 0x20uLL, "%i", v53);
              toBuf(v3, __s);
              toBuf(v3, "]");
            }
            else if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
            {
              bufAddChar(v3, 32);
              *(_DWORD *)(v3 + 16) = 3;
            }
            uint64_t result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table");
            if (result) {
              --*(_DWORD *)(v3 + 84);
            }
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sup") {
                 || (uint64_t result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sub"), result))
          }
          {
            uint64_t result = toBuf(v3, ")");
          }
          if (v14)
          {
            if (*(_DWORD *)(v3 + 16) != 2)
            {
              uint64_t result = (uint64_t)bufAddChar(v3, 10);
              int v54 = *(_DWORD *)(v3 + 16);
              BOOL v55 = v54 == 1;
              int v56 = v54 == 1 ? 2 : 1;
              *(_DWORD *)(v3 + 16) = v56;
              if (!v55)
              {
                uint64_t result = (uint64_t)bufAddChar(v3, 10);
                if (*(_DWORD *)(v3 + 16) == 1) {
                  int v57 = 2;
                }
                else {
                  int v57 = 1;
                }
                *(_DWORD *)(v3 + 16) = v57;
              }
            }
            if (*(int *)(v3 + 32) >= 1)
            {
              int v58 = 0;
              do
              {
                uint64_t result = toBuf(v3, "> ");
                ++v58;
              }
              while (v58 < *(_DWORD *)(v3 + 32));
            }
          }
          return result;
        }
        if (!xmlStrEqual(v8, (const xmlChar *)"b")
          && !xmlStrEqual(v8, (const xmlChar *)"i")
          && !xmlStrEqual(v8, (const xmlChar *)"br")
          && !xmlStrEqual(v8, (const xmlChar *)"a")
          && !xmlStrEqual(v8, (const xmlChar *)"span"))
        {
          if (xmlStrEqual(v8, (const xmlChar *)"blockquote")) {
            goto LABEL_12;
          }
          if (*v8 == 104)
          {
            if (xmlStrEqual(v8, (const xmlChar *)"h1")
              || xmlStrEqual(v8, (const xmlChar *)"h2")
              || xmlStrEqual(v8, (const xmlChar *)"h3")
              || xmlStrEqual(v8, (const xmlChar *)"h4")
              || xmlStrEqual(v8, (const xmlChar *)"h5")
              || xmlStrEqual(v8, (const xmlChar *)"h6")
              || xmlStrEqual(v8, (const xmlChar *)"hr")
              || xmlStrEqual(v8, (const xmlChar *)"header"))
            {
              goto LABEL_12;
            }
            unint64_t v51 = "hgroup";
          }
          else
          {
            if (xmlStrEqual(v8, (const xmlChar *)"li")
              || xmlStrEqual(v8, (const xmlChar *)"ol")
              || xmlStrEqual(v8, (const xmlChar *)"ul")
              || xmlStrEqual(v8, (const xmlChar *)"table")
              || xmlStrEqual(v8, (const xmlChar *)"address")
              || xmlStrEqual(v8, (const xmlChar *)"article")
              || xmlStrEqual(v8, (const xmlChar *)"details")
              || xmlStrEqual(v8, (const xmlChar *)"dl")
              || xmlStrEqual(v8, (const xmlChar *)"dt")
              || xmlStrEqual(v8, (const xmlChar *)"fieldset")
              || xmlStrEqual(v8, (const xmlChar *)"figcaption")
              || xmlStrEqual(v8, (const xmlChar *)"footer")
              || xmlStrEqual(v8, (const xmlChar *)"form")
              || xmlStrEqual(v8, (const xmlChar *)"nav")
              || xmlStrEqual(v8, (const xmlChar *)"noscript")
              || xmlStrEqual(v8, (const xmlChar *)"pre")
              || xmlStrEqual(v8, (const xmlChar *)"section"))
            {
              goto LABEL_12;
            }
            unint64_t v51 = "summary";
          }
          if (xmlStrEqual(v8, (const xmlChar *)v51)) {
            goto LABEL_12;
          }
        }
      }
    }
    int v14 = 0;
    goto LABEL_42;
  }
  if (v4 != 3) {
    return result;
  }
  Content = (char *)xmlNodeGetContent((const xmlNode *)a2);
  uint64_t v6 = Content;
  if (*(int *)(v3 + 28) <= 0)
  {
    int v15 = Content;
    while (1)
    {
      while (1)
      {
        int v16 = 0;
        unsigned int v18 = *v15++;
        uint64_t v17 = v18;
        if (v18 > 0x20) {
          goto LABEL_30;
        }
        if (((1 << v17) & 0x100002600) != 0) {
          break;
        }
        if (!v17) {
          goto LABEL_32;
        }
LABEL_30:
        bufAddChar(v3, v17);
        *(_DWORD *)(v3 + 16) = v16;
      }
      if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
      {
        int v16 = 3;
        LOBYTE(v17) = 32;
        goto LABEL_30;
      }
    }
  }
  toBuf(v3, Content);
LABEL_32:
  uint64_t v19 = (uint64_t (*)(char *))*MEMORY[0x1E4FBA9D0];
  return v19(v6);
}

uint64_t toBuf(uint64_t result, char *__s)
{
  if (__s)
  {
    uint64_t v3 = result;
    uint64_t result = strlen(__s);
    int v4 = result;
    if (result)
    {
      char v5 = *__s;
      if (*__s)
      {
        uint64_t v6 = __s + 1;
        do
        {
          uint64_t result = (uint64_t)bufAddChar(v3, v5);
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      int v8 = __s[v4 - 1];
      if (v8 != 32)
      {
        if (v8 == 10)
        {
          if (v4 >= 2 && __s[v4 - 2] == 10 || *(_DWORD *)(v3 + 16) == 1) {
            int v9 = 2;
          }
          else {
            int v9 = 1;
          }
          goto LABEL_16;
        }
        if (v8 != 9)
        {
          *(_DWORD *)(v3 + 16) = 0;
          return result;
        }
      }
      int v9 = 3;
LABEL_16:
      *(_DWORD *)(v3 + 16) = v9;
    }
  }
  return result;
}

void *bufAddChar(uint64_t a1, char a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t result = *(void **)a1;
  if (v4 >= v5)
  {
    int v7 = (v5 & 1) + v5 + (v5 >> 1);
    *(_DWORD *)(a1 + 12) = v7;
    uint64_t result = reallocf(result, v7);
    if (!result)
    {
      id v8 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v8);
    }
    *(void *)a1 = result;
    int v4 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4 + 1;
  *((unsigned char *)result + v4) = a2;
  return result;
}

void li(uint64_t a1)
{
  if (*(int *)(a1 + 68) < 1)
  {
    toBuf(a1, "* ");
  }
  else
  {
    id v2 = [NSString alloc];
    uint64_t v3 = *(unsigned int *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v3 + 1;
    id v4 = objc_msgSend(v2, "initWithFormat:", @"%i. ", v3);
    toBuf(a1, (char *)[v4 UTF8String]);
  }
}

uint64_t toBufInt(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)__s = 0u;
  long long v5 = 0u;
  __sprintf_chk(__s, 0, 0x20uLL, "%i", a2);
  return toBuf(a1, __s);
}

BOOL bufEndswith(uint64_t a1, int a2, char *__s2, int a4)
{
  BOOL result = 0;
  if (__s2 && a1 && a2 >= a4) {
    return strncmp((const char *)(a1 + a2 - a4), __s2, a4) == 0;
  }
  return result;
}

uint64_t _sgmDocumentTypeOfMessage(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  uint64_t v3 = MEMORY[0x1E4F5DDA8];
  if ((isKindOfClass & 1) == 0) {
    uint64_t v3 = MEMORY[0x1E4F5DDA0];
  }
  return *(void *)v3;
}

void SGPETAddValueForScalarKey(void *a1, uint64_t a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = objc_opt_new();
  [v4 setKey:v3];
  long long v5 = [MEMORY[0x1E4F93728] sharedInstance];
  [v5 trackScalarForMessage:v4 count:a2];

  id v6 = [NSString alloc];
  int v7 = (void *)[v6 initWithFormat:@"%@.%@", *MEMORY[0x1E4F5DEF0], v3];

  BOOL v10 = @"count";
  id v8 = [NSNumber numberWithInt:a2];
  v11[0] = v8;
  int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];

  AnalyticsSendEvent();
}

void logIngestEvent(int a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = sgLogHandle();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a1)
  {
    if (v5)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = a2;
      _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_INFO, "Starting ingest of %lu messages", buf, 0xCu);
    }
  }
  else if (v5)
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v11 = a2;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_INFO, "Ending ingest of %lu messages", buf, 0xCu);
  }

  id v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", a2, @"count");
  int v9 = v6;
  int v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v9 forKeys:&v8 count:1];

  PLLogRegisteredEvent();
}

void logDissectionEvent(int a1, void *a2, unint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = sgLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a1)
  {
    if (v7)
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v16 = [v5 contentLength];
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_INFO, "Starting dissection, len=%tu, ctx=%i", buf, 0x12u);
    }
  }
  else if (v7)
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v16 = [v5 contentLength];
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_INFO, "Ending dissection, len=%tu, ctx=%i", buf, 0x12u);
  }

  v13[0] = @"bodySize";
  uint64_t v8 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v5, "contentLength"));
  v13[1] = @"context";
  v14[0] = v8;
  if (a3 >= 4)
  {
    BOOL v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = [NSString stringWithUTF8String:"NSString *dissectionContextName(SGDPowerLogDissectionContext)"];
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"SGDPowerLog.m", 49, @"Invalid dissection context: %lu", a3);

    int v9 = 0;
  }
  else
  {
    int v9 = off_1E65B5BD8[a3];
  }
  v14[1] = v9;
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];

  PLLogRegisteredEvent();
}

void sub_1CA68B948(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4015(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4016(uint64_t a1)
{
}

void sub_1CA68C860(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1CA68D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA68DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___serialQueueForTitleGeneration_block_invoke()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [MEMORY[0x1E4F93B18] autoreleasingSerialQueueWithLabel:*MEMORY[0x1E4F5DF18]];
  id v2 = (void *)_serialQueueForTitleGeneration__pasExprOnceResult;
  _serialQueueForTitleGeneration__pasExprOnceResult = v1;
}

void sub_1CA68F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6938B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA69919C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id _PASValidatedFormat(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  v18[1] = &a9;
  int v9 = (objc_class *)NSString;
  id v10 = a1;
  v18[0] = 0;
  uint64_t v11 = (void *)[[v9 alloc] initWithValidatedFormat:v10 validFormatSpecifiers:@"%@" locale:0 arguments:&a9 error:v18];

  id v12 = v18[0];
  if (!v11)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F1CA00]);
    uint64_t v14 = *MEMORY[0x1E4F1C3C8];
    uint64_t v19 = *MEMORY[0x1E4F28A50];
    v20[0] = v12;
    int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
    uint64_t v16 = (void *)[v13 initWithName:v14 reason:@"An error occurred while formatting the string." userInfo:v15];

    [v16 raise];
  }

  return v11;
}

void sub_1CA69B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1CA69E0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA69EBC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6A0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6A26FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  SGRecordMeasurementState(va);
  _Unwind_Resume(a1);
}

void sub_1CA6A5640(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void __getEntityMappingDispatchQueue_block_invoke()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_BACKGROUND, 0);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.suggestions.ml.datadetector", v2);
  id v4 = (void *)getEntityMappingDispatchQueue__pasExprOnceResult;
  getEntityMappingDispatchQueue__pasExprOnceResult = (uint64_t)v3;
}

BOOL SGMIMetricsAggregatedAccuracyLogReadFrom(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA60A000uLL;
    uint64_t v8 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsSalient;
    uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
    id v10 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsNeutral;
    uint64_t v11 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsIgnorable;
    id v12 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsSalient;
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *v3;
        unint64_t v17 = *(void *)(a2 + v16);
        if (v17 == -1 || v17 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + *v9) + v17);
        *(void *)(a2 + v16) = v17 + 1;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        if (v14++ >= 9)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v22 = v15 >> 3;
      if ((int)(v15 >> 3) <= 30)
      {
        switch((int)v22)
        {
          case 11:
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 0x100u;
            while (2)
            {
              uint64_t v26 = *v3;
              unint64_t v27 = *(void *)(a2 + v26);
              if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
              {
                int v30 = v8;
                goto LABEL_97;
              }
              char v28 = *(unsigned char *)(*(void *)(a2 + *v9) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                int v29 = 0;
                v23 += 7;
                int v30 = v8;
                BOOL v31 = v24++ > 8;
                if (v31) {
                  goto LABEL_101;
                }
                continue;
              }
              break;
            }
            int v30 = v8;
            goto LABEL_98;
          case 12:
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 0x80u;
            while (2)
            {
              uint64_t v39 = *v3;
              unint64_t v40 = *(void *)(a2 + v39);
              if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
              {
                int v30 = v10;
                goto LABEL_97;
              }
              char v41 = *(unsigned char *)(*(void *)(a2 + *v9) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v25 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                int v29 = 0;
                v37 += 7;
                int v30 = v10;
                BOOL v31 = v38++ > 8;
                if (v31) {
                  goto LABEL_101;
                }
                continue;
              }
              break;
            }
            int v30 = v10;
            goto LABEL_98;
          case 13:
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 0x40u;
            while (2)
            {
              uint64_t v44 = *v3;
              unint64_t v45 = *(void *)(a2 + v44);
              if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
              {
                int v30 = v11;
                goto LABEL_97;
              }
              char v46 = *(unsigned char *)(*(void *)(a2 + *v9) + v45);
              *(void *)(a2 + v44) = v45 + 1;
              v25 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                int v29 = 0;
                v42 += 7;
                int v30 = v11;
                BOOL v31 = v43++ > 8;
                if (v31) {
                  goto LABEL_101;
                }
                continue;
              }
              break;
            }
            int v30 = v11;
            goto LABEL_98;
          case 21:
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 0x20u;
            while (2)
            {
              uint64_t v49 = *v3;
              unint64_t v50 = *(void *)(a2 + v49);
              if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
              {
                int v30 = v12;
                goto LABEL_97;
              }
              char v51 = *(unsigned char *)(*(void *)(a2 + *v9) + v50);
              *(void *)(a2 + v49) = v50 + 1;
              v25 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                int v29 = 0;
                v47 += 7;
                int v30 = v12;
                BOOL v31 = v48++ > 8;
                if (v31) {
                  goto LABEL_101;
                }
                continue;
              }
              break;
            }
            int v30 = v12;
            goto LABEL_98;
          case 22:
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 0x10u;
            while (2)
            {
              uint64_t v54 = *v3;
              unint64_t v55 = *(void *)(a2 + v54);
              if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
              {
                int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
                goto LABEL_97;
              }
              char v56 = *(unsigned char *)(*(void *)(a2 + *v9) + v55);
              *(void *)(a2 + v54) = v55 + 1;
              v25 |= (unint64_t)(v56 & 0x7F) << v52;
              if (v56 < 0)
              {
                int v29 = 0;
                v52 += 7;
                int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
                BOOL v31 = v53++ > 8;
                if (v31) {
                  goto LABEL_101;
                }
                continue;
              }
              break;
            }
            int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
            goto LABEL_98;
          case 23:
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v25 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 8u;
            break;
          default:
            goto LABEL_86;
        }
        while (1)
        {
          uint64_t v59 = *v3;
          unint64_t v60 = *(void *)(a2 + v59);
          if (v60 == -1 || v60 >= *(void *)(a2 + *v4))
          {
            int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
            goto LABEL_97;
          }
          char v61 = *(unsigned char *)(*(void *)(a2 + *v9) + v60);
          *(void *)(a2 + v59) = v60 + 1;
          v25 |= (unint64_t)(v61 & 0x7F) << v57;
          if ((v61 & 0x80) == 0) {
            break;
          }
          int v29 = 0;
          v57 += 7;
          int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
          BOOL v31 = v58++ > 8;
          if (v31) {
            goto LABEL_101;
          }
        }
        int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
        goto LABEL_98;
      }
      if (v22 == 31)
      {
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v25 = 0;
        *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 4u;
        while (1)
        {
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 == -1 || v65 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v66 = *(unsigned char *)(*(void *)(a2 + *v9) + v65);
          *(void *)(a2 + v64) = v65 + 1;
          v25 |= (unint64_t)(v66 & 0x7F) << v62;
          if ((v66 & 0x80) == 0)
          {
            int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
            goto LABEL_98;
          }
          int v29 = 0;
          v62 += 7;
          int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
          BOOL v31 = v63++ > 8;
          if (v31) {
            goto LABEL_101;
          }
        }
        int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
LABEL_97:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_98;
      }
      if (v22 == 32) {
        break;
      }
      if (v22 == 33)
      {
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v25 = 0;
        *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 1u;
        while (1)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
            goto LABEL_97;
          }
          char v36 = *(unsigned char *)(*(void *)(a2 + *v9) + v35);
          *(void *)(a2 + v34) = v35 + 1;
          v25 |= (unint64_t)(v36 & 0x7F) << v32;
          if ((v36 & 0x80) == 0) {
            break;
          }
          int v29 = 0;
          v32 += 7;
          int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
          BOOL v31 = v33++ > 8;
          if (v31) {
            goto LABEL_101;
          }
        }
        int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
        goto LABEL_98;
      }
LABEL_86:
      unsigned int v72 = v8;
      uint64_t v73 = v10;
      unint64_t v74 = v11;
      unint64_t v75 = v7;
      char v76 = v12;
      uint64_t v80 = a1;
      unsigned int v77 = v5;
      char v78 = PBReaderSkipValueWithTag();
      id v5 = v77;
      a1 = v80;
      id v12 = v76;
      unint64_t v7 = v75;
      uint64_t v11 = v74;
      id v10 = v73;
      uint64_t v8 = v72;
      if ((v78 & 1) == 0) {
        return 0;
      }
LABEL_102:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v67 = 0;
    unsigned int v68 = 0;
    uint64_t v25 = 0;
    *(_WORD *)(a1 + *(int *)(v7 + 3676)) |= 2u;
    while (1)
    {
      uint64_t v69 = *v3;
      unint64_t v70 = *(void *)(a2 + v69);
      if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
      {
        int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
        goto LABEL_97;
      }
      char v71 = *(unsigned char *)(*(void *)(a2 + *v9) + v70);
      *(void *)(a2 + v69) = v70 + 1;
      v25 |= (unint64_t)(v71 & 0x7F) << v67;
      if ((v71 & 0x80) == 0) {
        break;
      }
      int v29 = 0;
      v67 += 7;
      int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
      BOOL v31 = v68++ > 8;
      if (v31) {
        goto LABEL_101;
      }
    }
    int v30 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
LABEL_98:
    if (*(unsigned char *)(a2 + *v5)) {
      int v29 = 0;
    }
    else {
      int v29 = v25;
    }
LABEL_101:
    *(_DWORD *)(a1 + *v30) = v29;
    goto LABEL_102;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA6A9E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SGM2HarvestCostReadFrom(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_59:
          uint64_t v47 = 8;
          goto LABEL_77;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 20) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_63:
          BOOL v48 = v26 != 0;
          uint64_t v49 = 17;
          goto LABEL_72;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 20) |= 0x10u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v32 = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_67:
          BOOL v48 = v32 != 0;
          uint64_t v49 = 18;
          goto LABEL_72;
        case 4u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 20) |= 4u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  uint64_t v38 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v38 = 0;
          }
LABEL_71:
          BOOL v48 = v38 != 0;
          uint64_t v49 = 16;
LABEL_72:
          *(unsigned char *)(a1 + v49) = v48;
          continue;
        case 5u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 20) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v44 = *v3;
        unint64_t v45 = *(void *)(a2 + v44);
        if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
        *(void *)(a2 + v44) = v45 + 1;
        v19 |= (unint64_t)(v46 & 0x7F) << v42;
        if ((v46 & 0x80) == 0) {
          goto LABEL_74;
        }
        v42 += 7;
        BOOL v14 = v43++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_76;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_76:
      uint64_t v47 = 12;
LABEL_77:
      *(_DWORD *)(a1 + v47) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void SGNotUserInitiated(void *a1, int a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  unint64_t v7 = (void *)MEMORY[0x1CB79B230]();
  if (SGNotUserInitiated__pasOnceToken3 != -1) {
    dispatch_once(&SGNotUserInitiated__pasOnceToken3, &__block_literal_global_4884);
  }
  id v8 = (id)SGNotUserInitiated__pasExprOnceResult;
  if (SGNotUserInitiated__pasOnceToken4 != -1) {
    dispatch_once(&SGNotUserInitiated__pasOnceToken4, &__block_literal_global_3);
  }
  id v9 = (id)SGNotUserInitiated__pasExprOnceResult_1;
  qos_class_t v10 = qos_class_self();
  if (v10 >= QOS_CLASS_UTILITY) {
    uint64_t v11 = 17;
  }
  else {
    uint64_t v11 = v10;
  }
  pthread_mutex_lock(&SGNotUserInitiated_queueCacheLock);
  unint64_t v12 = [NSNumber numberWithUnsignedInt:v11];
  char v13 = [v8 objectForKeyedSubscript:v12];

  if (!v13)
  {
    char v13 = objc_opt_new();
    [v13 setQualityOfService:v11];
    [v13 setMaxConcurrentOperationCount:2];
    BOOL v14 = [NSNumber numberWithUnsignedInt:v11];
    [v8 setObject:v13 forKeyedSubscript:v14];
  }
  int v15 = [MEMORY[0x1E4F28B48] blockOperationWithBlock:v6];
  [v15 setName:v5];
  if (a2 == 2)
  {
    uint64_t v16 = [v9 objectForKeyedSubscript:v5];
    if (v16)
    {
      [v15 addDependency:v16];
      id location = 0;
      objc_initWeak(&location, v15);
      id from = 0;
      objc_initWeak(&from, v16);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __SGNotUserInitiated_block_invoke_3;
      v22[3] = &unk_1E65B6448;
      objc_copyWeak(&v23, &location);
      objc_copyWeak(&v24, &from);
      [v16 setCompletionBlock:v22];
      objc_destroyWeak(&v24);
      objc_destroyWeak(&v23);
      objc_destroyWeak(&from);
      objc_destroyWeak(&location);
    }
    [v9 setObject:v15 forKeyedSubscript:v5];

    id location = 0;
    objc_initWeak(&location, v15);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    id v18[2] = __SGNotUserInitiated_block_invoke_4;
    v18[3] = &unk_1E65B6470;
    id v19 = v9;
    id v20 = v5;
    objc_copyWeak(&v21, &location);
    [v15 setCompletionBlock:v18];
    objc_destroyWeak(&v21);

    objc_destroyWeak(&location);
  }
  else
  {
    [v15 setCompletionBlock:&__block_literal_global_8];
  }
  pthread_mutex_unlock(&SGNotUserInitiated_queueCacheLock);
  char v17 = waitGroup();
  dispatch_group_enter(v17);

  [v13 addOperation:v15];
}

void sub_1CA6ABAF4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void __SGNotUserInitiated_block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained removeDependency:v3];

  id v4 = waitGroup();
  dispatch_group_leave(v4);
}

void __SGNotUserInitiated_block_invoke_4(uint64_t a1)
{
  pthread_mutex_lock(&SGNotUserInitiated_queueCacheLock);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

  if (v2 == WeakRetained) {
    [*(id *)(a1 + 32) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  pthread_mutex_unlock(&SGNotUserInitiated_queueCacheLock);
  id v4 = waitGroup();
  dispatch_group_leave(v4);
}

id waitGroup()
{
  if (waitGroup__pasOnceToken2 != -1) {
    dispatch_once(&waitGroup__pasOnceToken2, &__block_literal_global_10);
  }
  v0 = (void *)waitGroup__pasExprOnceResult;
  return v0;
}

void __waitGroup_block_invoke()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  dispatch_group_t v1 = dispatch_group_create();
  id v2 = (void *)waitGroup__pasExprOnceResult;
  waitGroup__pasExprOnceResult = (uint64_t)v1;
}

void __SGNotUserInitiated_block_invoke_5()
{
  v0 = waitGroup();
  dispatch_group_leave(v0);
}

void __SGNotUserInitiated_block_invoke_2()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)SGNotUserInitiated__pasExprOnceResult_1;
  SGNotUserInitiated__pasExprOnceResult_1 = v1;
}

void __SGNotUserInitiated_block_invoke()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)SGNotUserInitiated__pasExprOnceResult;
  SGNotUserInitiated__pasExprOnceResult = v1;
}

void SGNotUserInitiatedWaitUntilAllOperationsAreFinished()
{
  v0 = waitGroup();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1CA6AD6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_1CA6AEBB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6AECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPSUSummarizationAnalyticsClass_block_invoke(uint64_t a1)
{
  if (!ProactiveSummarizationLibraryCore_frameworkLibrary) {
    ProactiveSummarizationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  Class result = objc_getClass("PSUSummarizationAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPSUSummarizationAnalyticsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ProactiveSummarizationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ProactiveSummarizationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1CA6AEF7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6AF2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6AF448(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6AFC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_1CA6B0014(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA6B06C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B0824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6B09E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B0A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA6B0BF4(_Unwind_Exception *a1)
{
  SGRecordMeasurementState((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1CA6B0D98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B0EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA6B0FB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B1104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1CA6B11CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B1750(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6B194C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B1BF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B1EE4(_Unwind_Exception *a1)
{
  SGRecordMeasurementState((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1CA6B2254(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1CA6B45D0(_Unwind_Exception *a1)
{
}

void sub_1CA6B45E8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1CA6B45F4);
}

void sub_1CA6B53CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id getMailAccountClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMailAccountClass_softClass;
  uint64_t v7 = getMailAccountClass_softClass;
  if (!getMailAccountClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getMailAccountClass_block_invoke;
    v3[3] = &unk_1E65C0148;
    v3[4] = &v4;
    __getMailAccountClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1CA6B5558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMailAccountClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!MessageLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __MessageLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E65B6868;
    uint64_t v8 = 0;
    MessageLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MessageLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MessageLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGCalendarAttachmentDissector.m", 47, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MailAccount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getMailAccountClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGCalendarAttachmentDissector.m", 48, @"Unable to find class %s", "MailAccount");

LABEL_10:
    __break(1u);
  }
  getMailAccountClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MessageLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MessageLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __removeAttachments_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const char *)([*(id *)(a1 + 32) bytes] + a2);
  if (a2 + a3 >= (unint64_t)[*(id *)(a1 + 32) length]
    || (result = 0, int v8 = v6[a3], v8 != 9) && v8 != 32)
  {
    if ((int)a3 >= 6 && !strncmp(v6, "ATTACH", 6uLL))
    {
      uint64_t v9 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a2, a3);
      [*(id *)(a1 + 40) addObject:v9];
    }
    return 1;
  }
  return result;
}

void sub_1CA6B6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6B66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5293(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5294(uint64_t a1)
{
}

id convertDateComponentsToLocalTimeZone(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  id v3 = [v1 alloc];
  uint64_t v4 = (void *)[v3 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  id v5 = [v4 dateFromComponents:v2];

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CAF0] localTimeZone];
    long long v7 = [v4 componentsInTimeZone:v6 fromDate:v5];
  }
  else
  {
    long long v7 = 0;
  }

  return v7;
}

void sub_1CA6B9998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id normalizeName(void *a1)
{
  id v1 = a1;
  if ([v1 canBeConvertedToEncoding:1])
  {
    id v2 = v1;
  }
  else
  {
    id v2 = [v1 precomposedStringWithCanonicalMapping];
  }
  id v3 = v2;

  return v3;
}

uint64_t re2::Prog::SearchOnePass(uint64_t a1, unsigned __int8 **a2, long long *a3, int a4, int a5, uint64_t a6, int a7)
{
  int v9 = a5;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a4 != 1 && a5 != 2)
  {
    LOBYTE(v48) = 0;
    char v13 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Cannot use SearchOnePass for unanchored matches.", 48);
    LogMessage::~LogMessage((void **)&v48);
    return 0;
  }
  int v14 = 2 * a7;
  uint64_t v50 = 0;
  memset(&v49[2], 0, 32);
  if (2 * a7 <= 2) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = v14;
  }
  memset(v49, 0, 32);
  bzero(&v48, 8 * v15);
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  bzero(&v45, 8 * v15);
  long long v44 = *a3;
  uint64_t v16 = (unsigned __int8 *)v44;
  if (!(void)v44)
  {
    uint64_t v16 = *a2;
    *(void *)&long long v44 = *a2;
    DWORD2(v44) = *((_DWORD *)a2 + 2);
  }
  char v17 = *a2;
  if (*(unsigned char *)a1 && v16 != v17) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    unsigned int v18 = &v16[SDWORD2(v44)];
    int v19 = *((_DWORD *)a2 + 2);
    uint64_t v20 = v19;
    if (v18 != &v17[v19]) {
      return 0;
    }
    int v42 = a7;
    uint64_t v38 = a6;
    int v9 = 2;
  }
  else
  {
    int v42 = a7;
    uint64_t v38 = a6;
    int v19 = *((_DWORD *)a2 + 2);
    uint64_t v20 = v19;
  }
  id v21 = *(int **)(a1 + 576);
  uint64_t v40 = *(void *)(a1 + 568);
  int v43 = *(_DWORD *)(a1 + 28);
  unint64_t v45 = *a2;
  BOOL v48 = v17;
  int v22 = *v21;
  if (v19 >= 1)
  {
    char v39 = 0;
    uint64_t v23 = a1 + 304;
    char v41 = &v17[v20];
    if (v14 <= 3) {
      int v24 = 3;
    }
    else {
      int v24 = v14;
    }
    uint64_t __n = 8 * (v24 - 2);
    while (1)
    {
      unsigned int v25 = v22;
      unsigned int v26 = v21[*(unsigned __int8 *)(v23 + *v17) + 1];
      if ((v26 & 0x3F) != 0 && (v26 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v44, v17)) != 0)
      {
        id v21 = 0;
        int v22 = 48;
        if (v9 != 2) {
          goto LABEL_26;
        }
      }
      else
      {
        id v21 = (int *)(v40 + v43 * (uint64_t)HIWORD(v26));
        int v22 = *v21;
        if (v9 != 2)
        {
LABEL_26:
          if (v25 != 48
            && v26 & 0x40 | v22 & 0x3F
            && ((v25 & 0x3F) == 0 || (v25 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v44, v17)) == 0))
          {
            if (v42 >= 2)
            {
              memcpy((char *)v46 + 8, (char *)v49 + 8, __n);
              if (v15 >= 3 && (v25 & 0x7F80) != 0)
              {
                for (uint64_t i = 2; i != v15; ++i)
                {
                  if (((v25 >> i) & 0x20) != 0) {
                    (&v45)[i] = v17;
                  }
                }
              }
            }
            *(void *)&v46[0] = v17;
            char v39 = 1;
            if (!v9 && (v26 & 0x40) != 0) {
              goto LABEL_63;
            }
          }
        }
      }
      if (!v21) {
        goto LABEL_51;
      }
      if (v15 >= 3 && v42 >= 2 && (v26 & 0x7F80) != 0)
      {
        for (uint64_t j = 2; j != v15; ++j)
        {
          if (((v26 >> j) & 0x20) != 0) {
            (&v48)[j] = v17;
          }
        }
      }
      if (++v17 >= v41) {
        goto LABEL_48;
      }
    }
  }
  char v39 = 0;
LABEL_48:
  unsigned int v29 = *v21;
  if (*v21 == 48 || (v29 & 0x3F) != 0 && (v29 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v44, v17)) != 0)
  {
LABEL_51:
    if ((v39 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v15 >= 3 && v42 >= 2 && (v29 & 0x7F80) != 0)
    {
      for (uint64_t k = 2; k != v15; ++k)
      {
        if (((v29 >> k) & 0x20) != 0) {
          (&v48)[k] = v17;
        }
      }
    }
    if (v15 >= 3) {
      memcpy((char *)v46 + 8, (char *)v49 + 8, 8 * (v15 - 4) + 16);
    }
    *(void *)&v46[0] = v17;
  }
LABEL_63:
  if (v42 >= 1)
  {
    uint64_t v32 = v42;
    uint64_t v33 = (_DWORD *)(v38 + 8);
    unint64_t v34 = v46;
    do
    {
      uint64_t v35 = *((void *)v34 - 1);
      int v36 = *v34;
      v34 += 4;
      *((void *)v33 - 1) = v35;
      *uint64_t v33 = v36 - v35;
      v33 += 4;
      --v32;
    }
    while (v32);
  }
  return 1;
}

void sub_1CA6BADF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  id v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1CA6BAF7C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1CB79A880](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v24[0] = 0;
  v24[1] = 0;
  MEMORY[0x1CB79A7A0](v24, a1);
  if (LOBYTE(v24[0]))
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      qos_class_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      __b.__locale_ = 0;
      size_t v26 = 0;
      int64_t v27 = 0;
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v26 = v16;
        int64_t v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      if (v27 >= 0) {
        locale = &__b;
      }
      else {
        locale = __b.__locale_;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v7 + 96))(v7, locale, v16);
      uint64_t v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x1CB79A7B0](v24);
  return a1;
}

void sub_1CA6BB258(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB79A7B0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1CA6BB22CLL);
}

void sub_1CA6BB2C4(_Unwind_Exception *a1)
{
}

void LogMessage::~LogMessage(void **this)
{
  if (!*(unsigned char *)this) {
    LogMessage::Flush((LogMessage *)this);
  }
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  this[1] = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)this + *(void *)(v3 - 24) + 8) = *(void **)(v2 + 24);
  this[2] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB79A880](this + 15);
}

void LogMessage::Flush(LogMessage *this)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 1, (uint64_t)"\n", 1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  std::stringbuf::str();
  write(2, __p, 0);
  *(unsigned char *)this = 1;
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CA6BB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E65B4F10, MEMORY[0x1E4FBA1C8]);
}

void sub_1CA6BB51C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

BOOL re2::Prog::IsOnePass(re2::Prog *this)
{
  if (*((unsigned char *)this + 3)) {
    return *((void *)this + 72) != 0;
  }
  *((unsigned char *)this + 3) = 1;
  if (*((_DWORD *)this + 1))
  {
    uint64_t v2 = *((int *)this + 4);
    if ((int)v2 <= 64997 && *((void *)this + 32) / 4 / (4 * *((_DWORD *)this + 5) + 4) >= v2 + 2) {
      operator new[]();
    }
  }
  return 0;
}

void sub_1CA6BBC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  re2::SparseSet::~SparseSet((re2::SparseSet *)va);
  re2::SparseSet::~SparseSet((re2::SparseSet *)va1);
  _Unwind_Resume(a1);
}

void re2::SparseSet::~SparseSet(re2::SparseSet *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x1CB79A8A0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1000C8052888210);
  }
}

void finishSuggestionsSetup(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __finishSuggestionsSetup_block_invoke;
  v8[3] = &unk_1E65BFD88;
  id v9 = v3;
  id v10 = v4;
  uint64_t v5 = finishSuggestionsSetup_onceFlag;
  id v6 = v4;
  id v7 = v3;
  if (v5 != -1) {
    dispatch_once(&finishSuggestionsSetup_onceFlag, v8);
  }
}

uint64_t retrySuggestionsInitializationWhenUnlocked()
{
  retrySuggestionsInitializationWhenUnlocked_lockStateToken = [MEMORY[0x1E4F93B10] registerForLockStateChangeNotifications:&__block_literal_global_55];
  return MEMORY[0x1F41817F8]();
}

id sharedSpotlightReceiver()
{
  if (sharedSpotlightReceiver__pasOnceToken2 != -1) {
    dispatch_once(&sharedSpotlightReceiver__pasOnceToken2, &__block_literal_global_57);
  }
  v0 = (void *)sharedSpotlightReceiver__pasExprOnceResult;
  return v0;
}

void __sharedSpotlightReceiver_block_invoke()
{
  v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)sharedSpotlightReceiver__pasExprOnceResult;
  sharedSpotlightReceiver__pasExprOnceResult = v1;
}

void __retrySuggestionsInitializationWhenUnlocked_block_invoke(uint64_t a1, int a2)
{
  if (!a2)
  {
    id v5 = +[SGSqlEntityStore defaultHarvestStore];
    id v3 = +[SGSqlEntityStore defaultStore];
    if (v5) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      [MEMORY[0x1E4F93B10] unregisterForLockStateChangeNotifications:retrySuggestionsInitializationWhenUnlocked_lockStateToken];
      finishSuggestionsSetup(v5, v3);
    }
  }
}

void __finishSuggestionsSetup_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v20 = v3;
    __int16 v21 = 2112;
    uint64_t v22 = v4;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "Running finishSuggestionsSetup (harvestStore=%@, defaultStore=%@)", buf, 0x16u);
  }

  id v5 = +[SGDManagerForCTS sharedSingletonInstance];
  id v6 = [[SGDSuggestManager alloc] initWithStore:*(void *)(a1 + 32)];
  [(SGDSuggestManager *)v6 registerForCoreSpotlightIndexing];
  id v7 = [[SGDSuggestManager alloc] initWithStore:*(void *)(a1 + 40)];
  [MEMORY[0x1E4F5DB70] setInProcessSuggestManager:v7];
  [MEMORY[0x1E4F93760] addContentAdmissionObserver:v7];
  [(SGDSuggestManager *)v6 registerForProactiveHarvesting];
  id v8 = +[SGDocumentUnderstandingConsumer sharedInstance];
  id v9 = +[SGAutonamingConsumer sharedInstance];
  [*(id *)(a1 + 32) registerCachePrecomputationWithCTS];
  id v10 = (void *)MEMORY[0x1E4F93B18];
  uint64_t v11 = dispatch_get_global_queue(-32768, 0);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __finishSuggestionsSetup_block_invoke_40;
  v17[3] = &unk_1E65BEF88;
  id v18 = v5;
  id v12 = v5;
  [v10 runAsyncOnQueue:v11 afterDelaySeconds:v17 block:5.0];

  uint64_t v13 = sharedSpotlightReceiver();
  [v13 setSuggestManager:v6];

  HVBatteryMonitoringStart();
  uint64_t v14 = +[SGDCloudKitSync sharedInstance];
  [v14 setReadyForNewEntities:1];

  uint64_t v15 = (void *)MEMORY[0x1E4F93B18];
  uint64_t v16 = dispatch_get_global_queue(5, 0);
  [v15 runAsyncOnQueue:v16 afterDelaySeconds:&__block_literal_global_42 block:6.0];
}

uint64_t __finishSuggestionsSetup_block_invoke_40()
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___registerEnableDisablePreferenceChangeListener_block_invoke;
  v1[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = 1;
  return [MEMORY[0x1E4F5DAF0] registerBlockOnSuggestionsSettingsChange:v1];
}

id __finishSuggestionsSetup_block_invoke_2()
{
  return +[SGDSpotlightCommander sharedInstance];
}

void sub_1CA6BFCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6BFED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6596(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6597(uint64_t a1)
{
}

void SGDExit(uint64_t a1)
{
  if (atomic_exchange(SGDExit_exitFlag, 1u))
  {
    while (1)
      pause();
  }
  char v2 = objc_opt_new();
  [v2 setExitCode:a1];
  uint64_t v3 = [MEMORY[0x1E4F93728] sharedInstance];
  [v3 trackScalarForMessage:v2];

  id v4 = [NSString alloc];
  uint64_t v5 = *MEMORY[0x1E4F5DEF0];
  id v6 = [v2 key];
  [v4 initWithFormat:@"%@.%@", v5, v6];

  id v7 = [v2 dictionaryRepresentation];
  AnalyticsSendEvent();

  usleep(0x7A120u);
  _exit(a1);
}

uint64_t re2::Compiler::ShortVisit(uint64_t a1)
{
  *(unsigned char *)(a1 + 32) = 1;
  return 0;
}

uint64_t re2::Compiler::Copy(uint64_t a1)
{
  LOBYTE(v4) = 0;
  char v2 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Compiler::Copy called!", 22);
  LogMessage::~LogMessage(&v4);
  *(unsigned char *)(a1 + 32) = 1;
  return 0;
}

void sub_1CA6C025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unint64_t re2::Compiler::PostVisit(re2::Compiler *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6)
{
  if (!*((unsigned char *)this + 32))
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    switch(*(unsigned char *)a2)
    {
      case 1:
        return v7 | ((unint64_t)v6 << 32);
      case 2:
        goto LABEL_11;
      case 3:
        unint64_t v10 = re2::Compiler::Literal(this, *(_DWORD *)(a2 + 24), *(_WORD *)(a2 + 2) & 1);
        goto LABEL_50;
      case 4:
        int v11 = *(_DWORD *)(a2 + 24);
        if (!v11)
        {
LABEL_11:
          unint64_t v10 = re2::Compiler::Nop(this);
          goto LABEL_50;
        }
        if (v11 < 1) {
          goto LABEL_2;
        }
        unint64_t v12 = re2::Compiler::Literal(this, **(_DWORD **)(a2 + 32), *(_WORD *)(a2 + 2) & 1);
        LODWORD(v7) = v12;
        unint64_t v6 = HIDWORD(v12);
        if (*(int *)(a2 + 24) >= 2)
        {
          uint64_t v13 = 1;
          do
          {
            unint64_t v14 = re2::Compiler::Literal(this, *(_DWORD *)(*(void *)(a2 + 32) + 4 * v13), *(_WORD *)(a2 + 2) & 1);
            unint64_t v15 = re2::Compiler::Cat((uint64_t)this, v7 | ((unint64_t)v6 << 32), v14);
            LODWORD(v7) = v15;
            unint64_t v6 = HIDWORD(v15);
            ++v13;
          }
          while (v13 < *(int *)(a2 + 24));
        }
        return v7 | ((unint64_t)v6 << 32);
      case 5:
        if (!a5)
        {
          LOBYTE(v50) = 0;
          int v42 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"kRegexpConcat: child_frags is NULL", 34);
          goto LABEL_82;
        }
        unint64_t v7 = *a5;
        if (a6 >= 2)
        {
          uint64_t v16 = a6 - 1;
          char v17 = a5 + 1;
          do
          {
            unint64_t v18 = *v17++;
            unint64_t v7 = re2::Compiler::Cat((uint64_t)this, v7, v18);
            --v16;
          }
          while (v16);
        }
        goto LABEL_32;
      case 6:
        if (!a5)
        {
          LOBYTE(v50) = 0;
          int v43 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpAlternate child_frags is NULL", 36);
          goto LABEL_82;
        }
        unint64_t v7 = *a5;
        if (a6 >= 2)
        {
          uint64_t v19 = a6 - 1;
          uint64_t v20 = a5 + 1;
          do
          {
            unint64_t v21 = *v20++;
            unint64_t v7 = re2::Compiler::Alt((uint64_t)this, v7, v21);
            --v19;
          }
          while (v19);
        }
        goto LABEL_32;
      case 7:
        if (a5)
        {
          unint64_t v10 = re2::Compiler::Star((uint64_t)this, *a5, (*(unsigned __int16 *)(a2 + 2) >> 6) & 1);
          goto LABEL_50;
        }
        LOBYTE(v50) = 0;
        long long v44 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"kRegexpStar child_frags is NULL", 31);
        goto LABEL_82;
      case 8:
        if (a5)
        {
          unint64_t v7 = *a5;
          unint64_t v6 = re2::Compiler::Star((uint64_t)this, *a5, (*(unsigned __int16 *)(a2 + 2) >> 6) & 1) >> 32;
          return v7 | ((unint64_t)v6 << 32);
        }
        LOBYTE(v50) = 0;
        unint64_t v45 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"kRegexpPlus child_frags is NULL", 31);
        goto LABEL_82;
      case 9:
        if (a5)
        {
          unint64_t v10 = re2::Compiler::Quest(this, *a5, (*(_WORD *)(a2 + 2) & 0x40) != 0);
          goto LABEL_50;
        }
        LOBYTE(v50) = 0;
        BOOL v48 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"kRegexpQuest child_frags is NULL", 32);
        goto LABEL_82;
      case 0xB:
        if (a5)
        {
          int v23 = *(_DWORD *)(a2 + 24);
          unint64_t v7 = *a5;
          if ((v23 & 0x80000000) == 0)
          {
            unint64_t v10 = re2::Compiler::Capture((uint64_t)this, *a5, v23);
            goto LABEL_50;
          }
LABEL_32:
          unint64_t v6 = HIDWORD(v7);
        }
        else
        {
          LOBYTE(v50) = 0;
          char v46 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"kRegexpCapture child_frags is NULL", 34);
LABEL_82:
          LogMessage::~LogMessage(&v50);
          LODWORD(v6) = 0;
          LODWORD(v7) = 0;
          *((unsigned char *)this + 32) = 1;
        }
        return v7 | ((unint64_t)v6 << 32);
      case 0xC:
        int v24 = (void *)((char *)this + 80);
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((void **)this + 10));
        *((void *)this + 9) = v24;
        *((void *)this + 11) = 0;
        *((void *)this + 12) = 0;
        *int v24 = 0;
        re2::Compiler::AddRuneRange(this, 0, 1114111, 0);
        goto LABEL_34;
      case 0xD:
        unint64_t v10 = re2::Compiler::ByteRange(this, 0, 255, 0);
        goto LABEL_50;
      case 0xE:
        if (*((unsigned char *)this + 40)) {
          int v25 = 2;
        }
        else {
          int v25 = 1;
        }
        goto LABEL_49;
      case 0xF:
        if (*((unsigned char *)this + 40)) {
          int v25 = 1;
        }
        else {
          int v25 = 2;
        }
        goto LABEL_49;
      case 0x10:
        int v25 = 16;
        goto LABEL_49;
      case 0x11:
        int v25 = 32;
        goto LABEL_49;
      case 0x12:
        BOOL v26 = *((unsigned char *)this + 40) == 0;
        int v27 = 8;
        int v28 = 4;
        goto LABEL_46;
      case 0x13:
        BOOL v26 = *((unsigned char *)this + 40) == 0;
        int v27 = 4;
        int v28 = 8;
LABEL_46:
        if (v26) {
          int v25 = v28;
        }
        else {
          int v25 = v27;
        }
LABEL_49:
        unint64_t v10 = re2::Compiler::EmptyWidth((uint64_t)this, v25);
        goto LABEL_50;
      case 0x14:
        unsigned int v29 = *(unsigned __int8 **)(a2 + 24);
        if (!*((_DWORD *)v29 + 1))
        {
          LOBYTE(v50) = 0;
          uint64_t v47 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"No ranges in char class", 23);
          LogMessage::~LogMessage(&v50);
          LODWORD(v7) = 0;
          *((unsigned char *)this + 32) = 1;
          LODWORD(v6) = 0;
          return v7 | ((unint64_t)v6 << 32);
        }
        int v30 = *v29;
        BOOL v31 = *v29 != 0;
        uint64_t v32 = (void *)((char *)this + 80);
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((void **)this + 10));
        *((void *)this + 9) = (char *)this + 80;
        *uint64_t v32 = 0;
        *((void *)this + 11) = 0;
        *((void *)this + 12) = 0;
        if (!*((_DWORD *)v29 + 4))
        {
          LODWORD(v7) = 0;
          LODWORD(v6) = 0;
          return v7 | ((unint64_t)v6 << 32);
        }
        uint64_t v33 = (int *)*((void *)v29 + 1);
        break;
      case 0x15:
        unint64_t v7 = re2::Compiler::Match(this, *(_DWORD *)(a2 + 24));
        if (*((_DWORD *)this + 26) == 2)
        {
          LODWORD(v6) = 0;
        }
        else
        {
          unint64_t v39 = re2::Compiler::DotStar(this);
          unint64_t v40 = re2::Compiler::EmptyWidth((uint64_t)this, 8);
          unint64_t v41 = re2::Compiler::Cat((uint64_t)this, v40, v7);
          unint64_t v10 = re2::Compiler::Cat((uint64_t)this, v39, v41);
LABEL_50:
          LODWORD(v7) = v10;
          unint64_t v6 = HIDWORD(v10);
        }
        return v7 | ((unint64_t)v6 << 32);
      default:
        LOBYTE(v50) = 0;
        uint64_t v22 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Missing case in Compiler: ", 26);
        std::ostream::operator<<();
        goto LABEL_82;
    }
    while (1)
    {
      int v34 = *v33;
      if (!v30) {
        break;
      }
      if (v34 < 65) {
        goto LABEL_60;
      }
      if (v33[1] >= 91) {
        break;
      }
LABEL_55:
      v33 += 2;
      if (v33 == (int *)(*((void *)v29 + 1) + 8 * *((int *)v29 + 4)))
      {
LABEL_34:
        unint64_t v7 = *((void *)this + 12);
        unint64_t v6 = HIDWORD(v7);
        return v7 | ((unint64_t)v6 << 32);
      }
    }
    if (v34 >= 66)
    {
      int v35 = v33[1];
      if (v34 <= 122) {
        goto LABEL_63;
      }
    }
    else
    {
LABEL_60:
      int v35 = v33[1];
      if (v35 <= 121)
      {
LABEL_63:
        unsigned int v36 = v31;
        if (v35 > 64) {
          goto LABEL_65;
        }
      }
    }
    unsigned int v36 = 0;
LABEL_65:
    if (*((_DWORD *)this + 9) == 2)
    {
      if (v34 <= 255 && v34 <= v35)
      {
        if (v35 >= 255) {
          unsigned __int8 v37 = -1;
        }
        else {
          unsigned __int8 v37 = v35;
        }
        int v38 = re2::Compiler::RuneByteSuffix(this, *v33, v37, v36, 0);
        re2::Compiler::AddSuffix((uint64_t)this, v38);
      }
    }
    else
    {
      re2::Compiler::AddRuneRangeUTF8(this, v34, v35, v36);
    }
    goto LABEL_55;
  }
LABEL_2:
  LODWORD(v6) = 0;
  LODWORD(v7) = 0;
  return v7 | ((unint64_t)v6 << 32);
}

void sub_1CA6C083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Compiler::Nop(re2::Compiler *this)
{
  if (*((unsigned char *)this + 32) || (uint64_t v1 = *((unsigned int *)this + 14), (int)v1 >= *((_DWORD *)this + 11)))
  {
    uint64_t v3 = 0;
    LODWORD(v1) = 0;
    *((unsigned char *)this + 32) = 1;
  }
  else
  {
    int v2 = *((_DWORD *)this + 15);
    if ((int)v1 >= v2)
    {
      if (!v2)
      {
        int v2 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if ((int)v1 >= v2)
      {
        do
          v2 *= 2;
        while ((int)v1 >= v2);
        *((_DWORD *)this + 15) = v2;
      }
      operator new[]();
    }
    *((_DWORD *)this + 14) = v1 + 1;
    if ((v1 & 0x80000000) != 0)
    {
      uint64_t v3 = 0;
      LODWORD(v1) = 0;
    }
    else
    {
      *(_DWORD *)(*((void *)this + 6) + 8 * v1) = *(_DWORD *)(*((void *)this + 6)
                                                                              + 8 * v1) & 0xFFFFFFF8 | 6;
      uint64_t v3 = v1 << 33;
    }
  }
  return v3 | v1;
}

uint64_t re2::Compiler::Match(re2::Compiler *this, unsigned int a2)
{
  if (*((unsigned char *)this + 32) || (int v2 = *((_DWORD *)this + 14), v2 >= *((_DWORD *)this + 11)))
  {
    int v2 = 0;
    *((unsigned char *)this + 32) = 1;
  }
  else
  {
    int v3 = *((_DWORD *)this + 15);
    if (v2 >= v3)
    {
      if (!v3)
      {
        int v3 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if (v2 >= v3)
      {
        do
          v3 *= 2;
        while (v2 >= v3);
        *((_DWORD *)this + 15) = v3;
      }
      operator new[]();
    }
    *((_DWORD *)this + 14) = v2 + 1;
    if (v2 < 0)
    {
      return 0;
    }
    else
    {
      id v4 = (unsigned int *)(*((void *)this + 6) + 8 * v2);
      unsigned int *v4 = *v4 & 0xFFFFFFF8 | 5;
      v4[1] = a2;
    }
  }
  return v2;
}

unint64_t re2::Compiler::DotStar(re2::Compiler *this)
{
  unint64_t v2 = re2::Compiler::ByteRange(this, 0, 255, 0);
  return re2::Compiler::Star((uint64_t)this, v2, 1);
}

uint64_t re2::Compiler::EmptyWidth(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 32) || (uint64_t v3 = *(unsigned int *)(a1 + 56), (int)v3 >= *(_DWORD *)(a1 + 44)))
  {
    uint64_t v18 = 0;
    LODWORD(v3) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 60);
    if ((int)v3 >= v4)
    {
      if (!v4)
      {
        int v4 = 8;
        *(_DWORD *)(a1 + 60) = 8;
      }
      if ((int)v3 >= v4)
      {
        do
          v4 *= 2;
        while ((int)v3 >= v4);
        *(_DWORD *)(a1 + 60) = v4;
      }
      operator new[]();
    }
    *(_DWORD *)(a1 + 56) = v3 + 1;
    if ((v3 & 0x80000000) == 0)
    {
      uint64_t v5 = (_DWORD *)(*(void *)(a1 + 48) + 8 * v3);
      _DWORD *v5 = 4;
      v5[1] = a2;
      if ((a2 & 3) != 0) {
        *(_DWORD *)(*(void *)(a1 + 24) + 272) |= 0x600u;
      }
      if ((a2 & 0x30) == 0)
      {
LABEL_52:
        uint64_t v18 = v3 << 33;
        return v18 | v3;
      }
      int v6 = 0;
      while (2)
      {
        while (2)
        {
          int v7 = v6;
          int v10 = v6 - 48 < 0xA || (v6 & 0xDFu) - 65 < 0x1A || v6 == 95;
          if (v6 <= 255) {
            unsigned int v11 = 255;
          }
          else {
            unsigned int v11 = v6;
          }
          do
          {
            if (v11 == v6)
            {
              uint64_t v20 = *(void *)(a1 + 24);
              if ((v7 - 1) <= 0xFE) {
                *(_DWORD *)(v20 + 4 * ((v7 - 1) >> 5) + 272) |= 1 << (v7 - 1);
              }
              if (v11 <= 0xFF) {
                *(_DWORD *)(v20 + 4 * (v11 >> 5) + 272) |= 1 << v11;
              }
              goto LABEL_52;
            }
            int v12 = v6++;
            int v15 = v6 - 48 < 0xA || (v6 & 0xDFu) - 65 < 0x1A || v6 == 95;
          }
          while (v10 == v15);
          uint64_t v16 = *(void *)(a1 + 24);
          unsigned int v17 = v7 - 1;
          if (v17 <= 0xFE)
          {
            *(_DWORD *)(v16 + 4 * (v17 >> 5) + 272) |= 1 << v17;
            if (v12 > 0xFF)
            {
LABEL_40:
              if (v12 < 255) {
                continue;
              }
              goto LABEL_52;
            }
          }
          else if (v12 > 0xFF)
          {
            goto LABEL_40;
          }
          break;
        }
        *(_DWORD *)(v16 + 4 * (v12 >> 5) + 272) |= 1 << v12;
        if (v12 < 255) {
          continue;
        }
        goto LABEL_52;
      }
    }
    uint64_t v18 = 0;
    LODWORD(v3) = 0;
  }
  return v18 | v3;
}

unint64_t re2::Compiler::Cat(uint64_t a1, unint64_t a2, unint64_t a3)
{
  LODWORD(v3) = 0;
  unsigned int v4 = 0;
  if (a2 && a3)
  {
    unint64_t v3 = HIDWORD(a2);
    unint64_t v5 = HIDWORD(a3);
    uint64_t v6 = *(void *)(a1 + 48);
    if (HIDWORD(a2) == 2 * a2 && *(_DWORD *)(v6 + 8 * a2) == 6)
    {
      if (HIDWORD(a2))
      {
        do
        {
          while (1)
          {
            uint64_t v8 = v3 >> 1;
            if ((v3 & 1) == 0) {
              break;
            }
            uint64_t v7 = v6 + 8 * v8;
            LODWORD(v3) = *(_DWORD *)(v7 + 4);
            *(_DWORD *)(v7 + 4) = a3;
            if (!v3) {
              goto LABEL_10;
            }
          }
          uint64_t v9 = 8 * v8;
          LODWORD(v3) = *(_DWORD *)(v6 + v9) >> 3;
          *(_DWORD *)(v6 + v9) = *(_DWORD *)(v6 + v9) & 7 | (8 * a3);
        }
        while (v3);
      }
LABEL_10:
      unint64_t v3 = HIDWORD(a3);
LABEL_11:
      unsigned int v4 = a3;
      return v4 | ((unint64_t)v3 << 32);
    }
    if (*(unsigned char *)(a1 + 40))
    {
      if (HIDWORD(a3))
      {
        do
        {
          while (1)
          {
            uint64_t v12 = v5 >> 1;
            if ((v5 & 1) == 0) {
              break;
            }
            uint64_t v11 = v6 + 8 * v12;
            LODWORD(v5) = *(_DWORD *)(v11 + 4);
            *(_DWORD *)(v11 + 4) = a2;
            if (!v5) {
              goto LABEL_11;
            }
          }
          uint64_t v13 = 8 * v12;
          LODWORD(v5) = *(_DWORD *)(v6 + v13) >> 3;
          *(_DWORD *)(v6 + v13) = *(_DWORD *)(v6 + v13) & 7 | (8 * a2);
        }
        while (v5);
      }
      goto LABEL_11;
    }
    if (HIDWORD(a2))
    {
      do
      {
        while (1)
        {
          uint64_t v15 = v3 >> 1;
          if ((v3 & 1) == 0) {
            break;
          }
          uint64_t v14 = v6 + 8 * v15;
          LODWORD(v3) = *(_DWORD *)(v14 + 4);
          *(_DWORD *)(v14 + 4) = a3;
          if (!v3) {
            goto LABEL_25;
          }
        }
        uint64_t v16 = 8 * v15;
        LODWORD(v3) = *(_DWORD *)(v6 + v16) >> 3;
        *(_DWORD *)(v6 + v16) = *(_DWORD *)(v6 + v16) & 7 | (8 * a3);
      }
      while (v3);
    }
LABEL_25:
    unint64_t v3 = HIDWORD(a3);
    unsigned int v4 = a2;
  }
  return v4 | ((unint64_t)v3 << 32);
}

unint64_t re2::Compiler::Alt(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2)
  {
    unint64_t v3 = HIDWORD(a2);
    if (a3)
    {
      if (*(unsigned char *)(a1 + 32) || (int v4 = *(_DWORD *)(a1 + 56), v4 >= *(_DWORD *)(a1 + 44)))
      {
        unint64_t v3 = 0;
        int v4 = 0;
        *(unsigned char *)(a1 + 32) = 1;
      }
      else
      {
        int v5 = *(_DWORD *)(a1 + 60);
        if (v4 >= v5)
        {
          if (!v5)
          {
            int v5 = 8;
            *(_DWORD *)(a1 + 60) = 8;
          }
          if (v4 >= v5)
          {
            do
              v5 *= 2;
            while (v4 >= v5);
            *(_DWORD *)(a1 + 60) = v5;
          }
          operator new[]();
        }
        *(_DWORD *)(a1 + 56) = v4 + 1;
        if (v4 < 0)
        {
          unint64_t v3 = 0;
          int v4 = 0;
        }
        else
        {
          uint64_t v6 = (_DWORD *)(*(void *)(a1 + 48) + 8 * v4);
          *uint64_t v6 = 8 * a2;
          v6[1] = a3;
          if (v3)
          {
            if (HIDWORD(a3))
            {
              uint64_t v7 = *(void *)(a1 + 48);
              unint64_t v8 = HIDWORD(a2);
              do
              {
                while (1)
                {
                  char v9 = v8;
                  unint64_t v10 = v8 >> 1;
                  if (v8) {
                    break;
                  }
                  unint64_t v8 = (unint64_t)*(unsigned int *)(v7 + 8 * v10) >> 3;
                  if (!v8) {
                    goto LABEL_21;
                  }
                }
                unint64_t v8 = *(unsigned int *)(v7 + 8 * v10 + 4);
              }
              while (*(_DWORD *)(v7 + 8 * v10 + 4));
LABEL_21:
              if (v9) {
                *(_DWORD *)(v7 + 8 * v10 + 4) = HIDWORD(a3);
              }
              else {
                *(_DWORD *)(v7 + 8 * v10) = *(_DWORD *)(v7 + 8 * v10) & 7 | (8 * HIDWORD(a3));
              }
            }
          }
          else
          {
            unint64_t v3 = HIDWORD(a3);
          }
        }
      }
    }
    else
    {
      int v4 = a2;
    }
  }
  else
  {
    unint64_t v3 = HIDWORD(a3);
    int v4 = a3;
  }
  return v4 | (v3 << 32);
}

unint64_t re2::Compiler::Star(uint64_t a1, unint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 32) || (unsigned int v3 = *(_DWORD *)(a1 + 56), (signed int)v3 >= *(_DWORD *)(a1 + 44)))
  {
    uint64_t v10 = 0;
    unsigned int v3 = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 60);
    if ((int)v3 >= v4)
    {
      if (!v4)
      {
        int v4 = 8;
        *(_DWORD *)(a1 + 60) = 8;
      }
      if ((int)v3 >= v4)
      {
        do
          v4 *= 2;
        while ((int)v3 >= v4);
        *(_DWORD *)(a1 + 60) = v4;
      }
      operator new[]();
    }
    *(_DWORD *)(a1 + 56) = v3 + 1;
    if ((v3 & 0x80000000) != 0)
    {
      uint64_t v10 = 0;
      unsigned int v3 = 0;
    }
    else
    {
      unint64_t v5 = HIDWORD(a2);
      *(void *)(*(void *)(a1 + 48) + 8 * v3) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (HIDWORD(a2))
      {
        do
        {
          while (1)
          {
            uint64_t v8 = v5 >> 1;
            if (v5) {
              break;
            }
            uint64_t v7 = 8 * v8;
            LODWORD(v5) = *(_DWORD *)(v6 + v7) >> 3;
            *(_DWORD *)(v6 + v7) = *(_DWORD *)(v6 + v7) & 7 | (8 * v3);
            if (!v5) {
              goto LABEL_16;
            }
          }
          uint64_t v9 = v6 + 8 * v8;
          LODWORD(v5) = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = v3;
        }
        while (v5);
LABEL_16:
        uint64_t v6 = *(void *)(a1 + 48);
      }
      if (a3)
      {
        *(_DWORD *)(v6 + 8 * v3 + 4) = a2;
        uint64_t v10 = 2 * v3;
      }
      else
      {
        *(_DWORD *)(v6 + 8 * v3) = *(_DWORD *)(v6 + 8 * v3) & 7 | (8 * a2);
        uint64_t v10 = (2 * v3) | 1;
      }
    }
  }
  return v3 | (unint64_t)(v10 << 32);
}

unint64_t re2::Compiler::Quest(re2::Compiler *this, unint64_t a2, char a3)
{
  if (!a2)
  {
    unint64_t v8 = re2::Compiler::Nop(this);
    unint64_t v7 = HIDWORD(v8);
    unsigned int v3 = v8;
    return v3 | (v7 << 32);
  }
  if (*((unsigned char *)this + 32) || (unsigned int v3 = *((_DWORD *)this + 14), (signed int)v3 >= *((_DWORD *)this + 11)))
  {
    unint64_t v7 = 0;
    unsigned int v3 = 0;
    *((unsigned char *)this + 32) = 1;
    return v3 | (v7 << 32);
  }
  int v4 = *((_DWORD *)this + 15);
  if ((int)v3 >= v4)
  {
    if (!v4)
    {
      int v4 = 8;
      *((_DWORD *)this + 15) = 8;
    }
    if ((int)v3 >= v4)
    {
      do
        v4 *= 2;
      while ((int)v3 >= v4);
      *((_DWORD *)this + 15) = v4;
    }
    operator new[]();
  }
  *((_DWORD *)this + 14) = v3 + 1;
  if ((v3 & 0x80000000) != 0)
  {
    unint64_t v7 = 0;
    unsigned int v3 = 0;
    return v3 | (v7 << 32);
  }
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = (_DWORD *)(v5 + 8 * v3);
  if (a3)
  {
    *uint64_t v6 = 0;
    *(_DWORD *)(v5 + 8 * v3 + 4) = a2;
    unint64_t v7 = HIDWORD(a2);
    if (!v3) {
      return v3 | (v7 << 32);
    }
    unint64_t v7 = 2 * v3;
  }
  else
  {
    *uint64_t v6 = 8 * a2;
    *(_DWORD *)(v5 + 8 * v3 + 4) = 0;
    unint64_t v7 = (2 * v3) | 1;
  }
  if (HIDWORD(a2))
  {
    uint64_t v10 = *((void *)this + 6);
    unsigned int v11 = v7;
    do
    {
      while (1)
      {
        unsigned int v12 = v11;
        char v13 = v11;
        unint64_t v14 = (unint64_t)v11 >> 1;
        if (v13) {
          break;
        }
        unsigned int v11 = *(_DWORD *)(v10 + 8 * v14) >> 3;
        if (!v11) {
          goto LABEL_25;
        }
      }
      unsigned int v11 = *(_DWORD *)(v10 + 8 * v14 + 4);
    }
    while (v11);
LABEL_25:
    uint64_t v15 = v12 >> 1;
    if (v12) {
      *(_DWORD *)(v10 + 8 * v15 + 4) = HIDWORD(a2);
    }
    else {
      *(_DWORD *)(v10 + 8 * v15) = *(_DWORD *)(v10 + 8 * v15) & 7 | (8 * HIDWORD(a2));
    }
  }
  return v3 | (v7 << 32);
}

unint64_t re2::Compiler::Literal(re2::Compiler *this, unsigned int a2, int a3)
{
  int v5 = *((_DWORD *)this + 9);
  if (v5 != 1)
  {
    if (v5 != 2)
    {
      unint64_t v6 = 0;
      LODWORD(v7) = 0;
      return v7 | v6;
    }
LABEL_5:
    uint64_t v8 = re2::Compiler::ByteRange(this, a2, a2, a3);
    LODWORD(v7) = v8;
    unint64_t v6 = v8 & 0xFFFFFFFF00000000;
    return v7 | v6;
  }
  if ((int)a2 <= 127) {
    goto LABEL_5;
  }
  if (a2 > 0x7FF)
  {
    if (HIWORD(a2) <= 0x10u) {
      unsigned int v14 = a2;
    }
    else {
      unsigned int v14 = 65533;
    }
    unsigned int v15 = HIWORD(v14);
    int v16 = (v14 >> 18) | 0xF0;
    unsigned int v17 = v14 >> 12;
    int v18 = (v14 >> 6) & 0x3F | 0x80;
    int v19 = v14 & 0x3F | 0x80;
    int v20 = (v14 >> 12) | 0xE0;
    unsigned int v21 = v14 >> 6;
    if (v15) {
      int v9 = v19;
    }
    else {
      int v9 = 0;
    }
    if (v15) {
      int v10 = v18;
    }
    else {
      int v10 = v19;
    }
    if (v15) {
      char v13 = v17;
    }
    else {
      char v13 = v21;
    }
    if (v15) {
      LOBYTE(v12) = v16;
    }
    else {
      LOBYTE(v12) = v20;
    }
    BOOL v11 = v15 == 0;
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
    BOOL v11 = 0;
    int v12 = (a2 >> 6) | 0xC0;
    char v13 = a2;
  }
  unint64_t v22 = re2::Compiler::ByteRange(this, v12, v12, 0);
  unint64_t v23 = re2::Compiler::ByteRange(this, v13 & 0x3F | 0x80u, v13 & 0x3F | 0x80u, 0);
  unint64_t v7 = re2::Compiler::Cat((uint64_t)this, v22, v23);
  if (a2 > 0x7FF)
  {
    unint64_t v24 = re2::Compiler::ByteRange(this, v10, v10, 0);
    unint64_t v7 = re2::Compiler::Cat((uint64_t)this, v7, v24);
    if (!v11)
    {
      unint64_t v25 = re2::Compiler::ByteRange(this, v9, v9, 0);
      unint64_t v7 = re2::Compiler::Cat((uint64_t)this, v7, v25);
    }
  }
  unint64_t v6 = v7 & 0xFFFFFFFF00000000;
  return v7 | v6;
}

void std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

re2::Compiler *re2::Compiler::AddRuneRange(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  uint64_t v4 = (uint64_t)this;
  if (*((_DWORD *)this + 9) == 2)
  {
    if (a2 <= 255 && a2 <= a3)
    {
      if (a3 >= 255) {
        unsigned __int8 v5 = -1;
      }
      else {
        unsigned __int8 v5 = a3;
      }
      int v6 = re2::Compiler::RuneByteSuffix(this, a2, v5, a4, 0);
      return (re2::Compiler *)re2::Compiler::AddSuffix(v4, v6);
    }
  }
  else
  {
    return re2::Compiler::AddRuneRangeUTF8(this, a2, a3, a4);
  }
  return this;
}

uint64_t re2::Compiler::ByteRange(re2::Compiler *this, int a2, int a3, int a4)
{
  if (*((unsigned char *)this + 32) || (uint64_t v4 = *((unsigned int *)this + 14), (int)v4 >= *((_DWORD *)this + 11)))
  {
    uint64_t v8 = 0;
    LODWORD(v4) = 0;
    *((unsigned char *)this + 32) = 1;
  }
  else
  {
    int v5 = *((_DWORD *)this + 15);
    if ((int)v4 >= v5)
    {
      if (!v5)
      {
        int v5 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if ((int)v4 >= v5)
      {
        do
          v5 *= 2;
        while ((int)v4 >= v5);
        *((_DWORD *)this + 15) = v5;
      }
      operator new[]();
    }
    *((_DWORD *)this + 14) = v4 + 1;
    if ((v4 & 0x80000000) == 0)
    {
      uint64_t v6 = *((void *)this + 6) + 8 * v4;
      *(_DWORD *)uint64_t v6 = 2;
      *(unsigned char *)(v6 + 4) = a2;
      *(unsigned char *)(v6 + 5) = a3;
      *(unsigned char *)(v6 + 6) = a4;
      uint64_t v7 = *((void *)this + 3);
      ++*(_DWORD *)(v7 + 16);
      if ((a2 - 1) <= 0xFE)
      {
        *(_DWORD *)(v7 + 4 * ((a2 - 1) >> 5) + 272) |= 1 << (a2 - 1);
        if (a3 > 0xFF)
        {
LABEL_13:
          if (a2 > 122) {
            goto LABEL_30;
          }
          goto LABEL_20;
        }
      }
      else if (a3 > 0xFF)
      {
        goto LABEL_13;
      }
      *(_DWORD *)(v7 + 4 * (a3 >> 5) + 272) |= 1 << a3;
      if (a2 > 122)
      {
LABEL_30:
        uint64_t v8 = v4 << 33;
        return v8 | v4;
      }
LABEL_20:
      if (a3 >= 97 && a4)
      {
        unsigned int v10 = a2 <= 97 ? 97 : a2;
        unsigned int v11 = a3 >= 122 ? 122 : a3;
        if (v10 <= v11)
        {
          uint64_t v12 = v7 + 272;
          *(_DWORD *)(v12 + 4 * ((v10 - 33) >> 5)) |= 1 << (v10 - 33);
          *(_DWORD *)(v12 + 4 * ((v11 - 32) >> 5)) |= 1 << v11;
        }
      }
      goto LABEL_30;
    }
    uint64_t v8 = 0;
    LODWORD(v4) = 0;
  }
  return v8 | v4;
}

re2::Compiler *re2::Compiler::AddRuneRangeUTF8(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2 > a3) {
    return this;
  }
  int v6 = a2;
  uint64_t v7 = this;
  unsigned int v8 = a3 & 0xFFFFFFC0;
  int v9 = a3 & 0x3F;
  unsigned int v10 = a3 & 0xFFFFF000;
  unsigned int v11 = a3 & 0xFFFC0000;
  int v27 = a3 & 0xFFF;
  int v28 = a3 & 0x3FFFF;
  while (v6 != 128 || a3 != 1114111)
  {
    if (v6 > 127 || a3 <= 127) {
      goto LABEL_11;
    }
    int v12 = 127;
LABEL_28:
    this = (re2::Compiler *)re2::Compiler::AddRuneRangeUTF8(v7, v6, v12, a4);
    int v6 = v12 + 1;
LABEL_29:
    if (v6 > a3) {
      return this;
    }
  }
  if (!*((unsigned char *)v7 + 40))
  {
    uint64_t v15 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)int v30 = 0u;
    int v16 = &byte_1CA8CB5DC;
    do
    {
      uint64_t v17 = *((unsigned int *)v16 - 2);
      if ((v17 & 0x80000000) != 0) {
        int v18 = 0;
      }
      else {
        int v18 = *(_DWORD *)&v30[4 * v17];
      }
      this = (re2::Compiler *)re2::Compiler::UncachedRuneByteSuffix(v7, *(v16 - 4), *v16, 0, v18);
      *(_DWORD *)&v30[4 * v15] = this;
      if (((0x555uLL >> v15) & 1) == 0) {
        this = (re2::Compiler *)re2::Compiler::AddSuffix((uint64_t)v7, (int)this);
      }
      ++v15;
      v16 += 12;
    }
    while (v15 != 12);
    return this;
  }
LABEL_11:
  if (v6 <= 2047 && a3 > 2047)
  {
    int v12 = 2047;
    goto LABEL_28;
  }
  if (v6 < 0x10000 && a3 >= 0x10000)
  {
    int v12 = 0xFFFF;
    goto LABEL_28;
  }
  if (a3 >= 128)
  {
    if ((v6 & 0xFFFFFFC0) == v8) {
      goto LABEL_19;
    }
    if ((v6 & 0x3F) != 0)
    {
      int v13 = 63;
LABEL_27:
      int v12 = v6 | v13;
      goto LABEL_28;
    }
    unsigned int v14 = v8;
    if (v9 != 63) {
      goto LABEL_36;
    }
LABEL_19:
    if ((v6 & 0xFFFFF000) != v10)
    {
      if ((v6 & 0xFFF) != 0)
      {
        int v13 = 4095;
        goto LABEL_27;
      }
      unsigned int v14 = v10;
      if (v27 != 4095) {
        goto LABEL_36;
      }
    }
    if ((v6 & 0xFFFC0000) == v11) {
      goto LABEL_46;
    }
    if ((v6 & 0x3FFFF) == 0)
    {
      unsigned int v14 = v11;
      if (v28 == 0x3FFFF)
      {
LABEL_46:
        *(_DWORD *)unsigned int v29 = 0;
        *(_DWORD *)int v30 = 0;
        if (v6 <= 0x7F)
        {
          char v21 = 0;
          char v20 = 0;
          v30[0] = v6;
          uint64_t v22 = 1;
        }
        else if (v6 > 0x7FF)
        {
          if (v6 <= 0x10FFFF) {
            unsigned int v24 = v6;
          }
          else {
            unsigned int v24 = 65533;
          }
          char v21 = 0;
          if (HIWORD(v24))
          {
            char v20 = 0;
            v30[0] = (v24 >> 18) | 0xF0;
            v30[1] = (v24 >> 12) & 0x3F | 0x80;
            v30[2] = (v24 >> 6) & 0x3F | 0x80;
            v30[3] = v24 & 0x3F | 0x80;
            uint64_t v22 = 4;
          }
          else
          {
            v30[0] = (v24 >> 12) | 0xE0;
            v30[1] = (v24 >> 6) & 0x3F | 0x80;
            v30[2] = v24 & 0x3F | 0x80;
            char v20 = 1;
            uint64_t v22 = 3;
          }
        }
        else
        {
          char v20 = 0;
          v30[0] = (v6 >> 6) | 0xC0;
          v30[1] = v6 & 0x3F | 0x80;
          char v21 = 1;
          uint64_t v22 = 2;
        }
        if (a3 > 0x7FF)
        {
          if (a3 <= 0x10FFFF) {
            unsigned int v23 = a3;
          }
          else {
            unsigned int v23 = 65533;
          }
          if (HIWORD(v23))
          {
            v29[0] = (v23 >> 18) | 0xF0;
            v29[1] = (v23 >> 12) & 0x3F | 0x80;
            v29[2] = (v23 >> 6) & 0x3F | 0x80;
            v29[3] = v23 & 0x3F | 0x80;
          }
          else
          {
            v29[0] = (v23 >> 12) | 0xE0;
            v29[1] = (v23 >> 6) & 0x3F | 0x80;
            v29[2] = v23 & 0x3F | 0x80;
          }
        }
        else
        {
          v29[0] = (a3 >> 6) | 0xC0;
          v29[1] = a3 & 0x3F | 0x80;
        }
        if (*((unsigned char *)v7 + 40))
        {
          int v25 = re2::Compiler::RuneByteSuffix(v7, v30[0], v29[0], 0, 0);
          if (v6 >= 0x80)
          {
            int v25 = re2::Compiler::RuneByteSuffix(v7, v30[1], v29[1], 0, v25);
            if ((v21 & 1) == 0)
            {
              int v25 = re2::Compiler::RuneByteSuffix(v7, v30[2], v29[2], 0, v25);
              if ((v20 & 1) == 0)
              {
                uint64_t v26 = 3;
                goto LABEL_72;
              }
            }
          }
        }
        else
        {
          int v25 = re2::Compiler::RuneByteSuffix(v7, v30[(v22 - 1)], v29[(v22 - 1)], 0, 0);
          if (v6 >= 0x80)
          {
            int v25 = re2::Compiler::RuneByteSuffix(v7, v30[(v22 - 2)], v29[(v22 - 2)], 0, v25);
            if ((unint64_t)(v22 - 1) >= 2)
            {
              int v25 = re2::Compiler::RuneByteSuffix(v7, v30[(v22 - 3)], v29[(v22 - 3)], 0, v25);
              if ((unint64_t)(v22 - 2) >= 2)
              {
                uint64_t v26 = (v22 - 4);
LABEL_72:
                int v25 = re2::Compiler::RuneByteSuffix(v7, v30[v26], v29[v26], 0, v25);
              }
            }
          }
        }
        return (re2::Compiler *)re2::Compiler::AddSuffix((uint64_t)v7, v25);
      }
LABEL_36:
      this = (re2::Compiler *)re2::Compiler::AddRuneRangeUTF8(v7, v6, v14 - 1, a4);
      int v6 = v14;
      goto LABEL_29;
    }
    int v13 = 0x3FFFF;
    goto LABEL_27;
  }
  int v19 = re2::Compiler::RuneByteSuffix(v7, v6, a3, a4, 0);
  return (re2::Compiler *)re2::Compiler::AddSuffix((uint64_t)v7, v19);
}

unint64_t re2::Compiler::RuneByteSuffix(re2::Compiler *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  int v6 = *((_DWORD *)this + 9);
  if (v6 == 2 || v6 == 1 && !*((unsigned char *)this + 40) && ((a2 & 0x80) == 0 || a3 >= 0xC0))
  {
    return re2::Compiler::UncachedRuneByteSuffix(this, a2, a3, a4, a5);
  }
  else
  {
    unint64_t v7 = ((unint64_t)a2 << 9) | ((uint64_t)a5 << 17) | (2 * a3) | a4;
    int v9 = (uint64_t **)((char *)this + 80);
    unsigned int v8 = (void *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_17;
    }
    unsigned int v10 = (uint64_t **)((char *)this + 80);
    do
    {
      unint64_t v11 = v8[4];
      BOOL v12 = v11 >= v7;
      if (v11 >= v7) {
        int v13 = v8;
      }
      else {
        int v13 = v8 + 1;
      }
      if (v12) {
        unsigned int v10 = (uint64_t **)v8;
      }
      unsigned int v8 = (void *)*v13;
    }
    while (*v13);
    if (v10 != v9 && v7 >= (unint64_t)v10[4]) {
      return *((unsigned int *)v10 + 10);
    }
LABEL_17:
    unint64_t v14 = re2::Compiler::UncachedRuneByteSuffix(this, a2, a3, a4, a5);
    uint64_t v15 = (char *)*((void *)this + 10);
    int v16 = (uint64_t **)((char *)this + 80);
    if (v15)
    {
      while (1)
      {
        while (1)
        {
          int v16 = (uint64_t **)v15;
          unint64_t v17 = *((void *)v15 + 4);
          if (v7 >= v17) {
            break;
          }
          uint64_t v15 = (char *)*v16;
          int v9 = v16;
          if (!*v16) {
            goto LABEL_24;
          }
        }
        if (v17 >= v7) {
          break;
        }
        uint64_t v15 = (char *)v16[1];
        if (!v15)
        {
          int v9 = v16 + 1;
          goto LABEL_24;
        }
      }
    }
    else
    {
LABEL_24:
      int v18 = (char *)v16;
      int v16 = (uint64_t **)operator new(0x30uLL);
      v16[4] = (uint64_t *)v7;
      *((_DWORD *)v16 + 10) = 0;
      *int v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t *)v18;
      *int v9 = (uint64_t *)v16;
      uint64_t v19 = **((void **)this + 9);
      char v20 = (uint64_t *)v16;
      if (v19)
      {
        *((void *)this + 9) = v19;
        char v20 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v20);
      ++*((void *)this + 11);
    }
    *((_DWORD *)v16 + 10) = v14;
    return v14;
  }
}

uint64_t re2::Compiler::AddSuffix(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 96))
  {
    if (*(unsigned char *)(this + 32) || (int v2 = *(_DWORD *)(this + 56), v2 >= *(_DWORD *)(this + 44)))
    {
      int v2 = 0;
      *(unsigned char *)(this + 32) = 1;
    }
    else
    {
      int v3 = *(_DWORD *)(this + 60);
      if (v2 >= v3)
      {
        if (!v3)
        {
          int v3 = 8;
          *(_DWORD *)(this + 60) = 8;
        }
        if (v2 >= v3)
        {
          do
            v3 *= 2;
          while (v2 >= v3);
          *(_DWORD *)(this + 60) = v3;
        }
        operator new[]();
      }
      *(_DWORD *)(this + 56) = v2 + 1;
      if (v2 < 0)
      {
        int v2 = 0;
      }
      else
      {
        uint64_t v4 = (_DWORD *)(*(void *)(this + 48) + 8 * v2);
        _DWORD *v4 = 8 * *(_DWORD *)(this + 96);
        v4[1] = a2;
      }
    }
  }
  else
  {
    int v2 = a2;
  }
  *(_DWORD *)(this + 96) = v2;
  return this;
}

uint64_t re2::Compiler::Capture(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 32) || (unsigned int v3 = *(_DWORD *)(a1 + 56), v4 = v3 + 2, (signed int)(v3 + 2) > *(_DWORD *)(a1 + 44)))
  {
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    *(unsigned char *)(a1 + 32) = 1;
    return v5 | v3;
  }
  int v6 = *(_DWORD *)(a1 + 60);
  if (v4 > v6)
  {
    if (!v6)
    {
      int v6 = 8;
      *(_DWORD *)(a1 + 60) = 8;
    }
    if (v4 > v6)
    {
      do
        v6 *= 2;
      while (v4 > v6);
      *(_DWORD *)(a1 + 60) = v6;
    }
    operator new[]();
  }
  *(_DWORD *)(a1 + 56) = v4;
  if ((v3 & 0x80000000) != 0)
  {
LABEL_19:
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    return v5 | v3;
  }
  unint64_t v7 = HIDWORD(a2);
  unsigned int v8 = (_DWORD *)(*(void *)(a1 + 48) + 8 * v3);
  _DWORD *v8 = (8 * a2) | 3;
  v8[1] = 2 * a3;
  uint64_t v9 = v3 + 1;
  unsigned int v10 = (_DWORD *)(*(void *)(a1 + 48) + 8 * v9);
  *unsigned int v10 = 3;
  v10[1] = (2 * a3) | 1;
  if (HIDWORD(a2))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    do
    {
      while (1)
      {
        uint64_t v13 = v7 >> 1;
        if (v7) {
          break;
        }
        uint64_t v12 = 8 * v13;
        LODWORD(v7) = *(_DWORD *)(v11 + v12) >> 3;
        *(_DWORD *)(v11 + v12) = *(_DWORD *)(v11 + v12) & 7 | (8 * v9);
        if (!v7) {
          goto LABEL_18;
        }
      }
      uint64_t v14 = v11 + 8 * v13;
      LODWORD(v7) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v9;
    }
    while (v7);
  }
LABEL_18:
  uint64_t v5 = v9 << 33;
  return v5 | v3;
}

unint64_t re2::Compiler::UncachedRuneByteSuffix(re2::Compiler *this, int a2, int a3, int a4, int a5)
{
  unint64_t result = re2::Compiler::ByteRange(this, a2, a3, a4);
  uint64_t v8 = *((void *)this + 6);
  unint64_t v9 = HIDWORD(result);
  if (a5)
  {
    if (HIDWORD(result))
    {
      do
      {
        while (1)
        {
          uint64_t v11 = v9 >> 1;
          if ((v9 & 1) == 0) {
            break;
          }
          uint64_t v10 = v8 + 8 * v11;
          LODWORD(v9) = *(_DWORD *)(v10 + 4);
          *(_DWORD *)(v10 + 4) = a5;
          if (!v9) {
            return result;
          }
        }
        uint64_t v12 = 8 * v11;
        LODWORD(v9) = *(_DWORD *)(v8 + v12) >> 3;
        *(_DWORD *)(v8 + v12) = *(_DWORD *)(v8 + v12) & 7 | (8 * a5);
      }
      while (v9);
    }
  }
  else
  {
    LODWORD(v13) = *((_DWORD *)this + 25);
    if (v13)
    {
      if (HIDWORD(result))
      {
        unsigned int v14 = *((_DWORD *)this + 25);
        do
        {
          while (1)
          {
            unsigned int v15 = v14;
            char v16 = v14;
            unint64_t v17 = (unint64_t)v14 >> 1;
            if (v16) {
              break;
            }
            unsigned int v14 = *(_DWORD *)(v8 + 8 * v17) >> 3;
            if (!v14) {
              goto LABEL_14;
            }
          }
          unsigned int v14 = *(_DWORD *)(v8 + 8 * v17 + 4);
        }
        while (v14);
LABEL_14:
        uint64_t v18 = v15 >> 1;
        if (v15) {
          *(_DWORD *)(v8 + 8 * v18 + 4) = HIDWORD(result);
        }
        else {
          *(_DWORD *)(v8 + 8 * v18) = *(_DWORD *)(v8 + 8 * v18) & 7 | (8 * HIDWORD(result));
        }
      }
    }
    else
    {
      unint64_t v13 = HIDWORD(result);
    }
    *((_DWORD *)this + 25) = v13;
  }
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      unsigned int v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            unint64_t v9 = (uint64_t *)a2[2];
          }
          else
          {
            unint64_t v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              unsigned int v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            *unint64_t v9 = v2;
            *(void *)(v2 + 16) = v9;
            unsigned int v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          *unsigned int v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (int v6 = *(unsigned __int8 *)(v4 + 24), v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unsigned int v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        *uint64_t v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t re2::Compiler::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(unsigned char *)(a1 + 32)) {
    *a4 = 1;
  }
  return 0;
}

void re2::Compiler::~Compiler(re2::Compiler *this)
{
  re2::Compiler::~Compiler(this);
  JUMPOUT(0x1CB79A8C0);
}

{
  re2::Prog *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F24EA528;
  uint64_t v2 = (re2::Prog *)*((void *)this + 3);
  if (v2)
  {
    re2::Prog::~Prog(v2);
    MEMORY[0x1CB79A8C0]();
  }
  unsigned int v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1000C8000313F17);
  }
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((void **)this + 10));
  *(void *)this = &unk_1F24EA590;
  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)this);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v4);
    MEMORY[0x1CB79A8C0](v5, 0x1080C40BE8D5F09);
  }
}

void re2::Regexp::Walker<re2::Frag>::Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(v1 + 40))
    {
      LOBYTE(v16) = 0;
      unsigned int v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v16);
      uint64_t v4 = *(void **)(a1 + 8);
      uint64_t v5 = v4[5];
      while (v5)
      {
        uint64_t v6 = v4[4];
        unint64_t v7 = v5 + v6 - 1;
        uint64_t v8 = v4[1];
        uint64_t v9 = *(void *)(*(void *)(v8 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55) + 40);
        if (v9)
        {
          MEMORY[0x1CB79A8C0](v9, 0x1000C4000313F17);
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v6 = v4[4];
          uint64_t v8 = v4[1];
        }
        uint64_t v10 = v4[2];
        uint64_t v12 = v10 - v8;
        BOOL v11 = v12 == 0;
        uint64_t v13 = 85 * (v12 >> 3) - 1;
        uint64_t v14 = v4[5];
        if (v11) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v13;
        }
        uint64_t v5 = v14 - 1;
        v4[5] = v14 - 1;
        if ((unint64_t)(v15 - (v14 + v6) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v10 - 8));
          v4[2] -= 8;
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v5 = v4[5];
        }
      }
    }
  }
}

void sub_1CA6C28D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unsigned int v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unsigned int v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 85;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t re2::Regexp::Walker<re2::Frag>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::Regexp::Walker<re2::Frag>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Regexp::Walker<re2::Frag>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::PatchList::Deref(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a2 >> 1;
  if (a2) {
    return *(unsigned int *)(a1 + 8 * v2 + 4);
  }
  else {
    return *(_DWORD *)(a1 + 8 * v2) >> 3;
  }
}

uint64_t re2::PatchList::Patch(uint64_t result, unsigned int a2, int a3)
{
  for (; a2; *(_DWORD *)(v5 + 4) = a3)
  {
    while (1)
    {
      uint64_t v4 = a2 >> 1;
      if (a2) {
        break;
      }
      uint64_t v3 = 8 * v4;
      a2 = *(_DWORD *)(result + v3) >> 3;
      *(_DWORD *)(result + v3) = *(_DWORD *)(result + v3) & 7 | (8 * a3);
      if (!a2) {
        return result;
      }
    }
    uint64_t v5 = result + 8 * v4;
    a2 = *(_DWORD *)(v5 + 4);
  }
  return result;
}

uint64_t re2::PatchList::Append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return a3;
  }
  if (!a3) {
    return a2;
  }
  unsigned int v3 = a2;
  do
  {
    while (1)
    {
      unsigned int v4 = v3;
      char v5 = v3;
      unint64_t v6 = (unint64_t)v3 >> 1;
      if (v5) {
        break;
      }
      unsigned int v3 = *(_DWORD *)(a1 + 8 * v6) >> 3;
      if (!v3) {
        goto LABEL_7;
      }
    }
    unsigned int v3 = *(_DWORD *)(a1 + 8 * v6 + 4);
  }
  while (v3);
LABEL_7:
  uint64_t v7 = v4 >> 1;
  if (v4) {
    *(_DWORD *)(a1 + 8 * v7 + 4) = a3;
  }
  else {
    *(_DWORD *)(a1 + 8 * v7) = *(_DWORD *)(a1 + 8 * v7) & 7 | (8 * a3);
  }
  return a2;
}

void re2::Compiler::Compiler(re2::Compiler *this)
{
  *(void *)this = &unk_1F24EA590;
  operator new();
}

void sub_1CA6C2CA0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(void **)(v1 + 80));
  re2::Regexp::Walker<re2::Frag>::~Walker((void *)v1);
  _Unwind_Resume(a1);
}

void *re2::Regexp::Walker<re2::Frag>::~Walker(void *a1)
{
  *a1 = &unk_1F24EA590;
  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)a1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  return a1;
}

uint64_t re2::Compiler::AllocInst(re2::Compiler *this, int a2)
{
  if (*((unsigned char *)this + 32) || (v2 = *((unsigned int *)this + 14), int v3 = v2 + a2, (int)v2 + a2 > *((_DWORD *)this + 11)))
  {
    *((unsigned char *)this + 32) = 1;
    return 0xFFFFFFFFLL;
  }
  else
  {
    int v5 = *((_DWORD *)this + 15);
    if (v3 > v5)
    {
      if (!v5)
      {
        int v5 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if (v3 > v5)
      {
        do
          v5 *= 2;
        while (v3 > v5);
        *((_DWORD *)this + 15) = v5;
      }
      operator new[]();
    }
    *((_DWORD *)this + 14) = v3;
  }
  return v2;
}

uint64_t re2::Compiler::Trim(uint64_t this)
{
  if (*(_DWORD *)(this + 56) < *(_DWORD *)(this + 60)) {
    operator new[]();
  }
  return this;
}

uint64_t re2::Compiler::NoMatch(re2::Compiler *this)
{
  return 0;
}

unint64_t re2::Compiler::Plus(uint64_t a1, unint64_t a2, int a3)
{
  return re2::Compiler::Star(a1, a2, a3) & 0xFFFFFFFF00000000 | a2;
}

void re2::Compiler::BeginRange(re2::Compiler *this)
{
  uint64_t v1 = (void *)((char *)this + 80);
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((void **)this + 10));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
}

uint64_t re2::Compiler::EndRange(re2::Compiler *this)
{
  return *((void *)this + 12);
}

re2::Compiler *re2::Compiler::AddRuneRangeLatin1(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  if (a2 <= 255 && a2 <= a3)
  {
    uint64_t v5 = (uint64_t)this;
    if (a3 >= 255) {
      unsigned __int8 v6 = -1;
    }
    else {
      unsigned __int8 v6 = a3;
    }
    int v7 = re2::Compiler::RuneByteSuffix(this, a2, v6, a4, 0);
    return (re2::Compiler *)re2::Compiler::AddSuffix(v5, v7);
  }
  return this;
}

uint64_t re2::Compiler::Add_80_10ffff(re2::Compiler *this)
{
  uint64_t v2 = 0;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  int v3 = &byte_1CA8CB5DC;
  do
  {
    uint64_t v4 = *((unsigned int *)v3 - 2);
    if ((v4 & 0x80000000) != 0) {
      int v5 = 0;
    }
    else {
      int v5 = *((_DWORD *)v7 + v4);
    }
    uint64_t result = re2::Compiler::UncachedRuneByteSuffix(this, *(v3 - 4), *v3, 0, v5);
    *((_DWORD *)v7 + v2) = result;
    if (((0x555uLL >> v2) & 1) == 0) {
      uint64_t result = re2::Compiler::AddSuffix((uint64_t)this, result);
    }
    ++v2;
    v3 += 12;
  }
  while (v2 != 12);
  return result;
}

uint64_t re2::Compiler::Setup(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(void *)(result + 24) + 24) = a2;
  if ((a2 & 0x20) != 0) {
    *(_DWORD *)(result + 36) = 2;
  }
  *(void *)(result + 64) = a3;
  if ((unint64_t)(a3 - 584) >> 27) {
    int v4 = 0x1000000;
  }
  else {
    int v4 = (unint64_t)(a3 - 584) >> 3;
  }
  if ((unint64_t)a3 < 0x249) {
    int v4 = 0;
  }
  if (a3 >= 1) {
    int v5 = v4;
  }
  else {
    int v5 = 100000;
  }
  *(_DWORD *)(result + 44) = v5;
  *(_DWORD *)(result + 104) = a4;
  return result;
}

void re2::Compiler::Compile(re2::Compiler *this, re2::Regexp *a2)
{
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)__src = 0u;
  long long v4 = 0u;
  memset(v2, 0, sizeof(v2));
  re2::Compiler::Compiler((re2::Compiler *)v2);
}

void sub_1CA6C33E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  re2::Compiler::~Compiler((re2::Compiler *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::IsAnchorStart(unsigned __int8 **this, re2::Regexp **a2)
{
  uint64_t v2 = 0;
  if ((int)a2 <= 3)
  {
    long long v4 = *this;
    if (*this)
    {
      int v5 = *v4;
      if (v5 == 18)
      {
        __int16 v9 = *((_WORD *)v4 + 1);
        uint64_t v10 = (char *)mallocRegexp();
        *(_WORD *)uint64_t v10 = 2;
        *((_WORD *)v10 + 1) = v9;
        uint64_t v2 = 1;
        *((_WORD *)v10 + 2) = 1;
        *(_OWORD *)(v10 + 6) = 0u;
        *(_OWORD *)(v10 + 22) = 0u;
        *((_WORD *)v10 + 19) = 0;
        *this = (unsigned __int8 *)v10;
        re2::Regexp::Decref((re2::Regexp *)v4);
      }
      else
      {
        int v6 = (int)a2;
        if (v5 == 11)
        {
          BOOL v11 = (re2::Regexp **)(v4 + 8);
          if (*((unsigned __int16 *)v4 + 3) >= 2u) {
            BOOL v11 = (re2::Regexp **)*v11;
          }
          char v20 = re2::Regexp::Incref(*v11);
          int IsAnchorStart = re2::IsAnchorStart((re2 *)&v20, (re2::Regexp **)(v6 + 1), v12);
          uint64_t v14 = v20;
          if (!IsAnchorStart)
          {
            uint64_t v18 = v20;
LABEL_19:
            re2::Regexp::Decref(v18);
            return 0;
          }
          __int16 v15 = *((_WORD *)v4 + 1);
          int v16 = *((_DWORD *)v4 + 6);
          uint64_t v17 = mallocRegexp();
          *uint64_t v17 = 11;
          v17[1] = v15;
          *((_DWORD *)v17 + 1) = 65537;
          *((void *)v17 + 3) = 0;
          *((void *)v17 + 4) = 0;
          *((void *)v17 + 1) = v14;
          *((void *)v17 + 2) = 0;
          *((_DWORD *)v17 + 6) = v16;
          *this = (unsigned __int8 *)v17;
          re2::Regexp::Decref((re2::Regexp *)v4);
          return 1;
        }
        else
        {
          if (v5 == 5 && *((_WORD *)v4 + 3))
          {
            int v7 = (re2::Regexp **)(v4 + 8);
            if (*((_WORD *)v4 + 3) != 1) {
              int v7 = (re2::Regexp **)*((void *)v4 + 1);
            }
            char v20 = re2::Regexp::Incref(*v7);
            if (re2::IsAnchorStart((re2 *)&v20, (re2::Regexp **)(v6 + 1), v8)) {
              operator new[]();
            }
            uint64_t v18 = v20;
            goto LABEL_19;
          }
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t re2::IsAnchorEnd(unsigned __int8 **this, re2::Regexp **a2)
{
  uint64_t v2 = 0;
  if ((int)a2 <= 3)
  {
    long long v4 = *this;
    if (*this)
    {
      int v5 = *v4;
      if (v5 == 19)
      {
        __int16 v10 = *((_WORD *)v4 + 1);
        BOOL v11 = (char *)mallocRegexp();
        *(_WORD *)BOOL v11 = 2;
        *((_WORD *)v11 + 1) = v10;
        uint64_t v2 = 1;
        *((_WORD *)v11 + 2) = 1;
        *(_OWORD *)(v11 + 6) = 0u;
        *(_OWORD *)(v11 + 22) = 0u;
        *((_WORD *)v11 + 19) = 0;
        *this = (unsigned __int8 *)v11;
        re2::Regexp::Decref((re2::Regexp *)v4);
      }
      else
      {
        int v6 = (int)a2;
        if (v5 == 11)
        {
          int v12 = (re2::Regexp **)(v4 + 8);
          if (*((unsigned __int16 *)v4 + 3) >= 2u) {
            int v12 = (re2::Regexp **)*v12;
          }
          char v21 = re2::Regexp::Incref(*v12);
          int IsAnchorEnd = re2::IsAnchorEnd((re2 *)&v21, (re2::Regexp **)(v6 + 1), v13);
          __int16 v15 = v21;
          if (!IsAnchorEnd)
          {
            uint64_t v19 = v21;
LABEL_19:
            re2::Regexp::Decref(v19);
            return 0;
          }
          __int16 v16 = *((_WORD *)v4 + 1);
          int v17 = *((_DWORD *)v4 + 6);
          uint64_t v18 = mallocRegexp();
          _WORD *v18 = 11;
          v18[1] = v16;
          *((_DWORD *)v18 + 1) = 65537;
          *((void *)v18 + 3) = 0;
          *((void *)v18 + 4) = 0;
          *((void *)v18 + 1) = v15;
          *((void *)v18 + 2) = 0;
          *((_DWORD *)v18 + 6) = v17;
          *this = (unsigned __int8 *)v18;
          re2::Regexp::Decref((re2::Regexp *)v4);
          return 1;
        }
        else
        {
          if (v5 == 5)
          {
            int v7 = *((unsigned __int16 *)v4 + 3);
            if (*((_WORD *)v4 + 3))
            {
              int v8 = v4 + 8;
              if (v7 != 1) {
                int v8 = (unsigned __int8 *)*((void *)v4 + 1);
              }
              char v21 = re2::Regexp::Incref(*(re2::Regexp **)&v8[8 * (v7 - 1)]);
              if (re2::IsAnchorEnd((re2 *)&v21, (re2::Regexp **)(v6 + 1), v9)) {
                operator new[]();
              }
              uint64_t v19 = v21;
              goto LABEL_19;
            }
          }
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t re2::Regexp::Walker<re2::Frag>::WalkInternal(uint64_t *a1, uint64_t a2)
{
  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)a1);
  if (a2)
  {
    long long v4 = (void *)a1[1];
    uint64_t v5 = v4[2];
    uint64_t v6 = v4[1];
    uint64_t v7 = -1;
    uint64_t v8 = 85 * ((v5 - v6) >> 3) - 1;
    if (v5 == v6) {
      uint64_t v8 = 0;
    }
    unint64_t v9 = v4[5] + v4[4];
    if (v8 == v9)
    {
      std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(a1[1]);
      uint64_t v6 = v4[1];
      unint64_t v9 = v4[5] + v4[4];
    }
    unint64_t v10 = *(void *)(v6 + 8 * (v9 / 0x55)) + 48 * (v9 % 0x55);
    *(void *)unint64_t v10 = a2;
    *(_DWORD *)(v10 + 8) = -1;
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 12) = 0;
    *(void *)(v10 + 28) = 0;
    *(void *)(v10 + 20) = 0;
LABEL_8:
    ++v4[5];
    while (1)
    {
      int v13 = (void *)a1[1];
      unint64_t v14 = v13[5] + v13[4] - 1;
      uint64_t v15 = *(void *)(v13[1] + 8 * (v14 / 0x55));
      unint64_t v16 = v14 % 0x55;
      int v17 = (uint64_t *)(v15 + 48 * (v14 % 0x55));
      uint64_t v18 = *v17;
      int v20 = *((_DWORD *)v17 + 2);
      uint64_t v19 = v17 + 1;
      if (v20 == -1)
      {
        int v24 = *((_DWORD *)a1 + 5);
        *((_DWORD *)a1 + 5) = v24 - 1;
        if (v24 <= 0)
        {
          *((unsigned char *)a1 + 16) = 1;
          uint64_t v28 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 40))(a1, v18, *(void *)(v15 + 48 * v16 + 12));
          goto LABEL_30;
        }
        uint64_t v25 = v7;
        LOBYTE(v51) = 0;
        uint64_t v26 = v15 + 48 * v16;
        uint64_t v27 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void **))(*a1 + 16))(a1, v18, *(void *)(v26 + 12), &v51);
        *(void *)(v26 + 20) = v27;
        if ((_BYTE)v51)
        {
          uint64_t v28 = v27;
          uint64_t v7 = v25;
          goto LABEL_30;
        }
        *uint64_t v19 = 0;
        uint64_t v29 = v15 + 48 * v16;
        *(void *)(v29 + 40) = 0;
        int v30 = (void *)(v29 + 40);
        if (*(_WORD *)(v18 + 6))
        {
          if (*(_WORD *)(v18 + 6) != 1) {
            operator new[]();
          }
          *int v30 = v15 + 48 * v16 + 28;
        }
        uint64_t v7 = v25;
        int v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6))
        {
LABEL_13:
          uint64_t v22 = (void *)(v18 + 8);
          if (v21 != 1) {
            uint64_t v22 = (void *)*v22;
          }
          uint64_t v23 = *v19;
          if ((int)v23 < v21)
          {
            long long v4 = (void *)a1[1];
            uint64_t v44 = v4[1];
            uint64_t v45 = v22[(int)v23];
            uint64_t v46 = *(void *)(v15 + 48 * v16 + 20);
            if (v4[2] == v44) {
              uint64_t v47 = 0;
            }
            else {
              uint64_t v47 = v7 + 85 * ((v4[2] - v44) >> 3);
            }
            unint64_t v48 = v4[5] + v4[4];
            if (v47 == v48)
            {
              std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(a1[1]);
              uint64_t v44 = v4[1];
              unint64_t v48 = v4[5] + v4[4];
            }
            unint64_t v11 = *(void *)(v44 + 8 * (v48 / 0x55)) + 48 * (v48 % 0x55);
            *(void *)unint64_t v11 = v45;
            *(_DWORD *)(v11 + 8) = -1;
            *(void *)(v11 + 12) = v46;
            *(void *)(v11 + 28) = 0;
            *(void *)(v11 + 20) = 0;
            *(void *)(v11 + 40) = 0;
            goto LABEL_8;
          }
          goto LABEL_27;
        }
      }
      else
      {
        int v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6)) {
          goto LABEL_13;
        }
      }
      uint64_t v23 = *v19;
LABEL_27:
      uint64_t v31 = v15 + 48 * v16;
      uint64_t v33 = *(void *)(v31 + 40);
      long long v32 = (void *)(v31 + 40);
      uint64_t v28 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 24))(a1, v18, *(void *)((char *)v32 - 28), *(void *)((char *)v32 - 20), v33, v23);
      if (*(unsigned __int16 *)(v18 + 6) >= 2u && *v32) {
        MEMORY[0x1CB79A8A0](*v32, 0x1000C8000313F17);
      }
LABEL_30:
      int v34 = (void *)a1[1];
      uint64_t v35 = v34[2];
      uint64_t v37 = v34[4];
      uint64_t v36 = v34[5];
      if (v35 == v34[1]) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = v7 + 85 * ((v35 - v34[1]) >> 3);
      }
      uint64_t v39 = v36 - 1;
      v34[5] = v36 - 1;
      if ((unint64_t)(v38 - (v36 + v37) + 1) >= 0xAA)
      {
        operator delete(*(void **)(v35 - 8));
        v34[2] -= 8;
        int v34 = (void *)a1[1];
        uint64_t v39 = v34[5];
      }
      if (!v39) {
        return v28;
      }
      unint64_t v40 = v39 + v34[4] - 1;
      uint64_t v41 = *(void *)(v34[1] + 8 * (v40 / 0x55));
      unint64_t v42 = v40 % 0x55;
      uint64_t v43 = *(void *)(v41 + 48 * v42 + 40);
      if (v43) {
        int v12 = (uint64_t *)(v43 + 8 * *(int *)(v41 + 48 * v42 + 8));
      }
      else {
        int v12 = (uint64_t *)(v41 + 48 * v42 + 28);
      }
      *int v12 = v28;
      ++*(_DWORD *)(v41 + 48 * v42 + 8);
    }
  }
  LOBYTE(v51) = 0;
  uint64_t v49 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v51);
  return 0;
}

void sub_1CA6C3CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::Compiler::Finish(re2::Compiler *this)
{
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v2 = *((void *)this + 3);
    if (!*(void *)(v2 + 4)) {
      *((_DWORD *)this + 14) = 1;
    }
    int v3 = *((_DWORD *)this + 14);
    if (v3 < *((_DWORD *)this + 15)) {
      operator new[]();
    }
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    int v6 = 0;
    *(void *)(v2 + 32) = *((void *)this + 6);
    *(_DWORD *)(v2 + 12) = v3;
    *((void *)this + 6) = 0;
    while (1)
    {
      if ((v4 & 0x1F) == 0) {
        unsigned int v5 = *(_DWORD *)(v2 + 272 + 4 * (v4 >> 5));
      }
      *(unsigned char *)(v2 + 304 + v4) = v6;
      v6 += v5 & 1;
      v5 >>= 1;
      if (++v4 == 256)
      {
        *(_DWORD *)(v2 + 20) = *(unsigned __int8 *)(v2 + 559) + 1;
        operator new[]();
      }
    }
  }
  return 0;
}

void std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    unsigned int v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)unsigned int v5 = v8;
      goto LABEL_89;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        uint64_t v37 = (char *)operator new(8 * v34);
        uint64_t v38 = &v37[8 * v35];
        uint64_t v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        unsigned int v5 = v38;
        if (!v40)
        {
          unsigned int v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            unint64_t v84 = &v37[8 * v35];
            uint64_t v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v42 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v43 = &v38[v86];
              unsigned int v87 = (long long *)(v6 + 3);
              uint64_t v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *uint64_t v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v86;
            }
          }
          else
          {
            uint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unsigned int v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  int v17 = *(char **)(a1 + 24);
  int v20 = *(char **)a1;
  uint64_t v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    int v24 = operator new(0xFF0uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      uint64_t v44 = v19;
      goto LABEL_87;
    }
    unint64_t v69 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v69 = 1;
    }
    if (v69 >> 61) {
      goto LABEL_106;
    }
    unint64_t v70 = (v69 + 3) >> 2;
    uint64_t v71 = 8 * v69;
    unsigned int v72 = (char *)operator new(8 * v69);
    uint64_t v44 = &v72[8 * v70];
    uint64_t v73 = &v72[v71];
    unint64_t v74 = v44;
    if (v18 != v19)
    {
      unint64_t v74 = &v44[8 * v22];
      unint64_t v75 = &v72[8 * v70];
      char v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        unsigned int v77 = &v72[8 * v70];
        unint64_t v75 = v77;
        char v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          unint64_t v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v75 = &v44[v79];
          uint64_t v80 = (long long *)(v19 + 16);
          char v81 = v77 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *char v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v72;
            *(void *)(a1 + 8) = v44;
            *(void *)(a1 + 16) = v74;
            *(void *)(a1 + 24) = v73;
LABEL_86:
            operator delete(v19);
            uint64_t v44 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v44 - 1) = v25;
            uint64_t v7 = *(char **)(a1 + 8);
            unsigned int v5 = *(char **)(a1 + 16);
            *(void *)(a1 + 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            unint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v93 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v93 = 1;
              }
              if (!(v93 >> 61))
              {
                unint64_t v94 = v93 >> 2;
                uint64_t v95 = 8 * v93;
                uint64_t v37 = (char *)operator new(8 * v93);
                uint64_t v38 = &v37[8 * v94];
                uint64_t v39 = &v37[v95];
                int64_t v96 = v5 - v7;
                BOOL v40 = v5 == v7;
                unsigned int v5 = v38;
                if (!v40)
                {
                  unsigned int v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    unint64_t v99 = &v37[8 * v94];
                    uint64_t v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      uint64_t v100 = (v97 >> 3) + 1;
                      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v98 = &v38[v101];
                      uint64_t v102 = (long long *)(v7 + 16);
                      char v103 = v99 + 16;
                      uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *char v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v101;
                    }
                  }
                  else
                  {
                    uint64_t v98 = &v37[8 * v94];
                  }
                  do
                  {
                    uint64_t v106 = *(void *)v7;
                    v7 += 8;
                    *(void *)uint64_t v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_81:
                *(void *)a1 = v37;
                *(void *)(a1 + 8) = v38;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  unsigned int v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          char v76 = &v19[v79];
        }
      }
      do
      {
        uint64_t v92 = *(void *)v76;
        v76 += 8;
        *(void *)unint64_t v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(void *)a1 = v72;
    *(void *)(a1 + 8) = v44;
    *(void *)(a1 + 16) = v74;
    *(void *)(a1 + 24) = v73;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0xFF0uLL);
  int v30 = &v28[8 * v22];
  uint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    long long v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v30 = (char *)operator new(8 * v45);
      uint64_t v31 = &v30[8 * v45];
      operator delete(v28);
      uint64_t v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      uint64_t v28 = v30;
    }
    else
    {
      unint64_t v33 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v33 = v22 + 1;
      }
      v30 -= 8 * (v33 >> 1);
    }
    uint64_t v29 = v32;
  }
  *(void *)int v30 = v29;
  uint64_t v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28) {
        goto LABEL_43;
      }
      if (v46 < v31)
      {
        uint64_t v49 = (v31 - v46) >> 3;
        if (v49 >= -1) {
          uint64_t v50 = v49 + 1;
        }
        else {
          uint64_t v50 = v49 + 2;
        }
        uint64_t v51 = v50 >> 1;
        int v30 = &v28[8 * (v50 >> 1)];
        uint64_t v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          uint64_t v52 = v46;
        }
        uint64_t v46 = (char *)v52 + 8 * v51;
        goto LABEL_43;
      }
      if (v31 == v28) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = (v31 - v28) >> 2;
      }
      if (v53 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v54 = (char *)operator new(8 * v53);
      unint64_t v55 = v54;
      unint64_t v56 = (v53 + 3) >> 2;
      int v30 = &v54[8 * v56];
      int64_t v57 = v46 - v28;
      BOOL v40 = v46 == v28;
      uint64_t v46 = v30;
      if (!v40)
      {
        uint64_t v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v58 = v57 - 8;
        uint64_t v59 = &v54[8 * v56];
        unint64_t v60 = v28;
        if (v58 >= 0x38)
        {
          uint64_t v61 = 8 * v56;
          uint64_t v59 = &v54[8 * v56];
          unint64_t v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            uint64_t v64 = (long long *)(v28 + 16);
            unint64_t v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)unint64_t v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_42;
            }
            unint64_t v60 = &v28[v63];
          }
        }
        do
        {
          uint64_t v68 = *(void *)v60;
          v60 += 8;
          *(void *)uint64_t v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_42:
      uint64_t v31 = &v54[8 * v53];
      operator delete(v28);
      uint64_t v28 = v55;
LABEL_43:
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  uint64_t v47 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v30;
  *(void *)(a1 + 16) = v46;
  *(void *)(a1 + 24) = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1CA6C4480(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void re2::Regexp::CompileToProg(re2::Regexp *this)
{
}

void re2::Regexp::CompileToReverseProg(re2::Regexp *this)
{
}

void re2::Compiler::CompileSet()
{
  memset(v0, 0, sizeof(v0));
  re2::Compiler::Compiler((re2::Compiler *)v0);
}

void sub_1CA6C46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  re2::Compiler::~Compiler((re2::Compiler *)va);
  _Unwind_Resume(a1);
}

void re2::FilteredRE2::FilteredRE2(re2::FilteredRE2 *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  operator new();
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  operator new();
}

void sub_1CA6C4738(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA6C47C4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void re2::FilteredRE2::~FilteredRE2(re2::FilteredRE2 *this)
{
  unint64_t v2 = *(re2::RE2 ***)this;
  BOOL v3 = (re2::RE2 **)*((void *)this + 1);
  if (v3 == v2)
  {
    unint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        re2::RE2::~RE2(v2[v5]);
        MEMORY[0x1CB79A8C0]();
        unint64_t v2 = *(re2::RE2 ***)this;
        BOOL v3 = (re2::RE2 **)*((void *)this + 1);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (*((void *)this + 4))
  {
    re2::PrefilterTree::~PrefilterTree(*((re2::PrefilterTree **)this + 4));
    MEMORY[0x1CB79A8C0]();
    unint64_t v2 = *(re2::RE2 ***)this;
  }
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void re2::FilteredRE2::Add(re2::FilteredRE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3, int *a4)
{
}

void sub_1CA6C4B20(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  MEMORY[0x1CB79A8C0](v1, 0x1072C4099187B91);
  _Unwind_Resume(a1);
}

void sub_1CA6C4B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]()
{
}

unint64_t re2::FilteredRE2::SlowFirstMatch(re2::FilteredRE2 *this, const re2::StringPiece *a2)
{
  uint64_t v2 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = 0;
  while ((re2::RE2::DoMatch(*(void *)(v2 + 8 * v5), (uint64_t)a2, 0, 0, 0, 0) & 1) == 0)
  {
    ++v5;
    uint64_t v2 = *(void *)this;
    if (v5 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

void re2::FilteredRE2::PrintPrefilter(re2::PrefilterTree **this, int a2)
{
}

void sub_1CA6C4E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6C57A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6C58B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6C5B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA6C72F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6C79B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6C7DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGMIMetricsMailIntelligenceForMessageReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_78;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            goto LABEL_80;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_78:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_80:
        uint64_t v64 = 24;
        goto LABEL_101;
      case 2u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 40;
        goto LABEL_28;
      case 3u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 32;
LABEL_28:
        unint64_t v27 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_102;
      case 4u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 0x40u;
        while (2)
        {
          uint64_t v30 = *v3;
          uint64_t v31 = *(void *)(a2 + v30);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v3re2::Compiler::Compile(this, 0) = v32;
            v20 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_84:
        uint64_t v64 = 76;
        goto LABEL_101;
      case 0xAu:
        *(unsigned char *)(a1 + 80) |= 0x20u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(void *)(a2 + *v4))
        {
          int v37 = *(_DWORD *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v37 = 0;
        }
        *(_DWORD *)(a1 + 72) = v37;
        goto LABEL_102;
      case 0xBu:
        uint64_t v38 = objc_alloc_init(SGMIMetricsMailAttachmentHistogram);
        [(id)a1 addMailAttachmentHistogram:v38];
        if (!PBReaderPlaceMark() || !SGMIMetricsMailAttachmentHistogramReadFrom((uint64_t)v38, a2)) {
          goto LABEL_107;
        }
        goto LABEL_76;
      case 0xCu:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 2u;
        while (2)
        {
          uint64_t v41 = *v3;
          uint64_t v42 = *(void *)(a2 + v41);
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v43;
            v20 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v15 = v40++ >= 9;
              if (v15)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_88:
        uint64_t v64 = 56;
        goto LABEL_101;
      case 0xDu:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 4u;
        while (2)
        {
          uint64_t v47 = *v3;
          uint64_t v48 = *(void *)(a2 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v49;
            v20 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v15 = v46++ >= 9;
              if (v15)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_92:
        uint64_t v64 = 60;
        goto LABEL_101;
      case 0xEu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 0x10u;
        while (2)
        {
          uint64_t v53 = *v3;
          uint64_t v54 = *(void *)(a2 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v55;
            v20 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v15 = v52++ >= 9;
              if (v15)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_96:
        uint64_t v64 = 68;
        goto LABEL_101;
      case 0xFu:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 80) |= 8u;
        while (2)
        {
          uint64_t v59 = *v3;
          uint64_t v60 = *(void *)(a2 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v60);
            *(void *)(a2 + v59) = v61;
            v20 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              BOOL v15 = v58++ >= 9;
              if (v15)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_100:
        uint64_t v64 = 64;
LABEL_101:
        *(_DWORD *)(a1 + v64) = v20;
        goto LABEL_102;
      case 0x14u:
        uint64_t v38 = objc_alloc_init(SGMIMetricsInferenceAndGroundTruth);
        uint64_t v63 = 8;
        goto LABEL_74;
      case 0x15u:
        uint64_t v38 = objc_alloc_init(SGMIMetricsInferenceAndGroundTruth);
        uint64_t v63 = 16;
LABEL_74:
        objc_storeStrong((id *)(a1 + v63), v38);
        if (PBReaderPlaceMark()
          && (SGMIMetricsInferenceAndGroundTruthReadFrom((uint64_t)v38, a2) & 1) != 0)
        {
LABEL_76:
          PBReaderRecallMark();

LABEL_102:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_107:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_102;
    }
  }
}

id appendFeatureSuffix(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 length]) {
    id v5 = (id)[[NSString alloc] initWithFormat:@"%@__%@", v3, v4];
  }
  else {
    id v5 = v3;
  }
  int v6 = v5;

  return v6;
}

void __lastnames_block_invoke()
{
  v0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  id v7 = [v0 pathForResource:@"lastnames" ofType:@"trie" inDirectory:@"/"];

  if (!v7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"_PASCFBurstTrie *lastnames(void)_block_invoke"];
    [v3 handleFailureInFunction:v4, @"SGNameMappingTransformer.m", 53, @"Invalid parameter not satisfying: %@", @"path" file lineNumber description];
  }
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93AC8]) initWithPath:v7];
  uint64_t v2 = (void *)lastnames_trie;
  lastnames_trie = v1;

  if (!lastnames_trie)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = [NSString stringWithUTF8String:"_PASCFBurstTrie *lastnames(void)_block_invoke"];
    [v5 handleFailureInFunction:v6, @"SGNameMappingTransformer.m", 55, @"Could not load lastnames trie: %@", v7 file lineNumber description];
  }
}

void __firstnames_block_invoke()
{
  v0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  id v7 = [v0 pathForResource:@"firstnames" ofType:@"trie" inDirectory:@"/"];

  if (!v7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"_PASCFBurstTrie *firstnames(void)_block_invoke"];
    [v3 handleFailureInFunction:v4, @"SGNameMappingTransformer.m", 41, @"Invalid parameter not satisfying: %@", @"path" file lineNumber description];
  }
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93AC8]) initWithPath:v7];
  uint64_t v2 = (void *)firstnames_trie;
  firstnames_trie = v1;

  if (!firstnames_trie)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = [NSString stringWithUTF8String:"_PASCFBurstTrie *firstnames(void)_block_invoke"];
    [v5 handleFailureInFunction:v6, @"SGNameMappingTransformer.m", 43, @"Could not load firstnames trie: %@", v7 file lineNumber description];
  }
}

double re2::RE2::Set::Set(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 1;
  *(void *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2re2::Compiler::Compile(this, 0) = 1;
  *(void *)(a1 + 4re2::Compiler::Compile(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 1;
  *(void *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2re2::Compiler::Compile(this, 0) = 1;
  *(void *)(a1 + 4re2::Compiler::Compile(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

void re2::RE2::Set::~Set(re2::RE2::Set *this)
{
  uint64_t v2 = (re2::Regexp **)*((void *)this + 5);
  if (v2 != *((re2::Regexp ***)this + 4))
  {
    unint64_t v3 = 0;
    uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
    do
    {
      re2::Regexp::Decref(v2[v3++]);
      uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
    }
    while (v3 < (uint64_t)(*((void *)this + 5) - (void)v2) >> 3);
  }
  if (*((void *)this + 7))
  {
    re2::Prog::~Prog(*((re2::Prog **)this + 7));
    MEMORY[0x1CB79A8C0]();
    uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
  }
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  re2::Regexp **v2;
  unint64_t v3;

  uint64_t v2 = (re2::Regexp **)*((void *)this + 5);
  if (v2 != *((re2::Regexp ***)this + 4))
  {
    unint64_t v3 = 0;
    uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
    do
    {
      re2::Regexp::Decref(v2[v3++]);
      uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
    }
    while (v3 < (uint64_t)(*((void *)this + 5) - (void)v2) >> 3);
  }
  if (*((void *)this + 7))
  {
    re2::Prog::~Prog(*((re2::Prog **)this + 7));
    MEMORY[0x1CB79A8C0]();
    uint64_t v2 = (re2::Regexp **)*((void *)this + 4);
  }
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void re2::RegexpStatus::~RegexpStatus(re2::RegexpStatus *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x1CB79A8C0](v1, 0x1012C40EC159624);
  }
}

uint64_t re2::RE2::Set::Compile(re2::RE2::Set *this)
{
  if (*((unsigned char *)this + 64))
  {
    LOBYTE(v8) = 0;
    uint64_t v1 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"RE2::Set::Compile multiple times", 32);
LABEL_3:
    LogMessage::~LogMessage(&v8);
    return 0;
  }
  *((unsigned char *)this + 64) = 1;
  __int16 v4 = re2::RE2::Options::ParseFlags(this);
  id v5 = re2::Regexp::ConcatOrAlternate(6, *((_OWORD **)this + 4), (*((void *)this + 5) - *((void *)this + 4)) >> 3, v4, 1);
  *((void *)this + 5) = *((void *)this + 4);
  int v6 = re2::Regexp::Simplify((re2::Regexp *)v5);
  re2::Regexp::Decref((re2::Regexp *)v5);
  if (v6) {
    re2::Compiler::CompileSet();
  }
  if (*((unsigned char *)this + 6))
  {
    LOBYTE(v8) = 0;
    id v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Error simplifying during Compile.", 33);
    goto LABEL_3;
  }
  return 0;
}

void sub_1CA6CC748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

_DWORD *re2::Prog::Inst::InitAlt(_DWORD *this, int a2, int a3)
{
  *this = 8 * a2;
  this[1] = a3;
  return this;
}

uint64_t re2::Prog::Inst::InitByteRange(uint64_t this, char a2, char a3, char a4, int a5)
{
  *(_DWORD *)this = (8 * a5) | 2;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = a3;
  *(unsigned char *)(this + 6) = a4;
  return this;
}

int *re2::Prog::Inst::InitCapture(int *this, int a2, int a3)
{
  *this = (8 * a3) | 3;
  this[1] = a2;
  return this;
}

int *re2::Prog::Inst::InitEmptyWidth(int *result, int a2, int a3)
{
  *double result = (8 * a3) | 4;
  result[1] = a2;
  return result;
}

unsigned int *re2::Prog::Inst::InitMatch(unsigned int *this, unsigned int a2)
{
  *this = *this & 0xFFFFFFF8 | 5;
  this[1] = a2;
  return this;
}

unsigned int *re2::Prog::Inst::InitNop(unsigned int *this)
{
  *this = *this & 0xFFFFFFF8 | 6;
  return this;
}

_DWORD *re2::Prog::Inst::InitFail(_DWORD *this)
{
  *this |= 7u;
  return this;
}

std::string *re2::Prog::Inst::Dump@<X0>(re2::Prog::Inst *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = *(_DWORD *)this;
  switch(*(_DWORD *)this & 7)
  {
    case 1:
      double result = re2::StringPrintf((re2 *)"altmatch -> %d | %d", a2, v2 >> 3, *((unsigned int *)this + 1));
      break;
    case 2:
      __int16 v4 = "/i";
      if (!*((unsigned char *)this + 6)) {
        __int16 v4 = "";
      }
      double result = re2::StringPrintf((re2 *)"byte%s [%02x-%02x] -> %d", a2, v4, *((unsigned __int8 *)this + 4), *((unsigned __int8 *)this + 5), v2 >> 3);
      break;
    case 3:
      double result = re2::StringPrintf((re2 *)"capture %d -> %d", a2, *((unsigned int *)this + 1), v2 >> 3);
      break;
    case 4:
      double result = re2::StringPrintf((re2 *)"emptywidth %#x -> %d", a2, *((unsigned int *)this + 1), v2 >> 3);
      break;
    case 5:
      double result = re2::StringPrintf((re2 *)"match! %d", a2, *((unsigned int *)this + 1));
      break;
    case 6:
      double result = re2::StringPrintf((re2 *)"nop -> %d", a2, v2 >> 3);
      break;
    case 7:
      double result = re2::StringPrintf((re2 *)"fail", a2);
      break;
    default:
      double result = re2::StringPrintf((re2 *)"alt -> %d | %d", a2, v2 >> 3, *((unsigned int *)this + 1));
      break;
  }
  return result;
}

re2::Prog *re2::Prog::Prog(re2::Prog *this)
{
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 1re2::Compiler::Compile(this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 40), 0)) {
    abort();
  }
  *((void *)this + 3re2::Compiler::Compile(this, 0) = 0;
  *((void *)this + 31) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 7re2::Compiler::Compile(this, 0) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  return this;
}

{
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 1re2::Compiler::Compile(this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 40), 0)) {
    abort();
  }
  *((void *)this + 3re2::Compiler::Compile(this, 0) = 0;
  *((void *)this + 31) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 7re2::Compiler::Compile(this, 0) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  return this;
}

void re2::Prog::~Prog(re2::Prog *this)
{
  unsigned int v2 = (void (*)(void))*((void *)this + 33);
  if (v2)
  {
    if (*((void *)this + 30)) {
      v2(*((void *)this + 30));
    }
    if (*((void *)this + 31)) {
      (*((void (**)(void))this + 33))(*((void *)this + 31));
    }
  }
  uint64_t v3 = *((void *)this + 71);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    MEMORY[0x1CB79A8A0](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = *((void *)this + 70);
  if (v5) {
    MEMORY[0x1CB79A8A0](v5, 0x1000C8077774924);
  }
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 40))) {
    abort();
  }
}

void re2::Prog::Dump(re2::Prog *this)
{
  *(void *)__s = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  operator new[]();
}

void sub_1CA6CCC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  re2::SparseSet::~SparseSet((re2::SparseSet *)&a15);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void re2::ProgToString(std::string *this, re2::Prog *a2, re2::SparseSet *a3)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a3)
  {
    int v6 = (int *)*((void *)a3 + 2);
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *((void *)a2 + 4);
      unint64_t v10 = (re2::Prog::Inst *)(v9 + 8 * v8);
      re2::Prog::Inst::Dump(v10, &__p);
      re2::StringAppendF(this, "%d. %s\n", v11, v12, v13, v14, v15, v16, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v7 = *(unsigned int *)v10;
      if (v7 >= 8)
      {
        unint64_t v17 = v7 >> 3;
        if (*((_DWORD *)a3 + 1) > *(_DWORD *)v10 >> 3)
        {
          uint64_t v18 = *((void *)a3 + 1);
          uint64_t v19 = *((void *)a3 + 2);
          uint64_t v20 = *(int *)(v18 + 4 * v17);
          if (v20 >= *(_DWORD *)a3 || *(_DWORD *)(v19 + 4 * v20) != v17)
          {
            *(_DWORD *)(v18 + 4 * v17) = *(_DWORD *)a3;
            *(_DWORD *)(v19 + 4 * (int)(*(_DWORD *)a3)++) = v17;
            LODWORD(v7) = *(_DWORD *)v10;
          }
        }
      }
      if ((v7 & 6) == 0)
      {
        unsigned int v21 = *(_DWORD *)(v9 + 8 * v8 + 4);
        if (v21)
        {
          if (*((_DWORD *)a3 + 1) > v21)
          {
            uint64_t v22 = *((void *)a3 + 1);
            uint64_t v23 = *((void *)a3 + 2);
            uint64_t v24 = *(int *)(v22 + 4 * (int)v21);
            if (v24 >= *(_DWORD *)a3 || *(_DWORD *)(v23 + 4 * v24) != v21)
            {
              *(_DWORD *)(v22 + 4 * (int)v21) = *(_DWORD *)a3;
              *(_DWORD *)(v23 + 4 * (int)(*(_DWORD *)a3)++) = v21;
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != (int *)(*((void *)a3 + 2) + 4 * *(int *)a3));
  }
}

void sub_1CA6CCE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v17 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v17 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

void re2::Prog::DumpUnanchored(re2::Prog *this)
{
}

void sub_1CA6CCF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re2::Prog::Optimize(re2::Prog *this)
{
}

uint64_t re2::Prog::EmptyFlags(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (*(unsigned char **)a1 == a2)
  {
    uint64_t v9 = *(int *)(a1 + 8);
    if (!v9)
    {
      int v4 = 15;
      return ~(2 * v4) & 0x20 | v4;
    }
    uint64_t v5 = &a2[v9];
    int v4 = 5;
  }
  else
  {
    int v3 = *(a2 - 1);
    int v4 = v3 == 10;
    uint64_t v5 = &v2[*(int *)(a1 + 8)];
    if (v5 == a2)
    {
      if ((v3 & 0xFFFFFFDF) - 65 < 0x1A || (v3 - 48) < 0xA || v3 == 95) {
        int v8 = 26;
      }
      else {
        int v8 = 10;
      }
      v4 |= v8;
      return ~(2 * v4) & 0x20 | v4;
    }
  }
  if (v5 > a2 && *a2 == 10) {
    v4 |= 2u;
  }
  if (v2 == a2)
  {
    int v18 = *a2;
    if ((v18 & 0xFFFFFFDF) - 65 < 0x1A || (v18 - 48) < 0xA || v18 == 95) {
      v4 |= 0x10u;
    }
  }
  else
  {
    int v10 = *(a2 - 1);
    int v13 = (v10 - 48) < 0xA || (v10 & 0xFFFFFFDF) - 65 < 0x1A || v10 == 95;
    int v14 = *a2;
    int v17 = (v14 - 48) < 0xA || (v14 & 0xFFFFFFDF) - 65 < 0x1A || v14 == 95;
    if (v13 != v17) {
      v4 |= 0x10u;
    }
  }
  return ~(2 * v4) & 0x20 | v4;
}

uint64_t re2::Prog::MarkByteRange(uint64_t this, int a2, unsigned int a3)
{
  if ((a2 - 1) > 0xFE)
  {
    if (a3 > 0xFF) {
      return this;
    }
LABEL_5:
    *(_DWORD *)(this + 4 * (a3 >> 5) + 272) |= 1 << a3;
    return this;
  }
  *(_DWORD *)(this + 4 * ((a2 - 1) >> 5) + 272) |= 1 << (a2 - 1);
  if (a3 <= 0xFF) {
    goto LABEL_5;
  }
  return this;
}

void re2::Prog::ComputeByteMap(re2::Prog *this)
{
  uint64_t v1 = 0;
  unsigned int v2 = 0;
  int v3 = 0;
  while (1)
  {
    if ((v1 & 0x1F) == 0) {
      unsigned int v2 = *((_DWORD *)this + (v1 >> 5) + 68);
    }
    *((unsigned char *)this + v1 + 304) = v3;
    v3 += v2 & 1;
    v2 >>= 1;
    if (++v1 == 256)
    {
      *((_DWORD *)this + 5) = *((unsigned __int8 *)this + 559) + 1;
      operator new[]();
    }
  }
}

void sub_1CA6CDDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__7481(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__7482(uint64_t a1)
{
}

void sub_1CA6CE338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 248), 8);
  _Unwind_Resume(a1);
}

uint64_t __enumerateMyNameInstances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = 0;
  char v7 = 0;
  while (1)
  {
    int v8 = (void *)(a2 + v6);
    uint64_t v9 = *(const char **)(a2 + v6 + 16);
    if (!v9) {
      goto LABEL_9;
    }
    if (*v8 == 0x7FFFFFFFFFFFFFFFLL || v8[1] == 0) {
      goto LABEL_9;
    }
    if (!strcmp(*(const char **)(a2 + v6 + 16), "name")) {
      break;
    }
    v7 |= strcmp(v9, "strong_phrase") == 0;
LABEL_9:
    v6 += 24;
    if (v6 == 120) {
      goto LABEL_10;
    }
  }
  char v16 = 0;
  int v13 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *v8, v8[1]);
  (*(void (**)(uint64_t, void *, void, void, id, void, char *))(v14 + 16))(v14, v15, *v8, v8[1], v5, v7 & 1, &v16);

  if (!v16)
  {
LABEL_10:
    uint64_t v11 = &SGRe2KeepGoing;
    goto LABEL_11;
  }
  uint64_t v11 = &SGRe2Stop;
LABEL_11:

  return *v11;
}

uint64_t __enumerateNameComponents_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

double re2::Regexp::Regexp(uint64_t a1, char a2, __int16 a3)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_WORD *)(a1 + 38) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_WORD *)(a1 + 38) = 0;
  return result;
}

void re2::Regexp::~Regexp(re2::Regexp *this)
{
  if (*((_WORD *)this + 3))
  {
    LOBYTE(v1re2::Compiler::Compile(this, 0) = 0;
    unsigned int v2 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Regexp not destroyed.", 21);
    LogMessage::~LogMessage(&v10);
  }
  int v3 = *(unsigned __int8 *)this;
  switch(v3)
  {
    case 4:
      uint64_t v7 = *((void *)this + 4);
      if (v7) {
        MEMORY[0x1CB79A8A0](v7, 0x1000C8052888210);
      }
      break;
    case 20:
      uint64_t v8 = *((void *)this + 3);
      if (v8) {
        MEMORY[0x1CB79A8A0](v8, 0x1000C8077774924);
      }
      uint64_t v9 = *((void *)this + 4);
      if (v9)
      {
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(void **)(v9 + 24));
        uint64_t v5 = v9;
        uint64_t v6 = 0x1020C4098A2B122;
LABEL_16:
        MEMORY[0x1CB79A8C0](v5, v6);
      }
      break;
    case 11:
      uint64_t v4 = *((void *)this + 4);
      if (v4)
      {
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        uint64_t v5 = v4;
        uint64_t v6 = 0x1012C40EC159624;
        goto LABEL_16;
      }
      break;
  }
}

uint64_t re2::CharClass::Delete(uint64_t this)
{
  if (this) {
    JUMPOUT(0x1CB79A8A0);
  }
  return this;
}

void re2::Regexp::operator delete(void *a1)
{
}

BOOL re2::Regexp::QuickDestroy(re2::Regexp *this)
{
  int v1 = *((unsigned __int16 *)this + 3);
  if (this && !*((_WORD *)this + 3))
  {
    re2::Regexp::~Regexp(this);
    freeRegexp(v2);
  }
  return v1 == 0;
}

uint64_t re2::Regexp::Ref(re2::Regexp *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 2);
  if (v1 == 0xFFFF)
  {
    pthread_mutex_lock(&re2::ref_mutex);
    uint64_t v3 = re2::ref_map;
    if (re2::ref_map)
    {
      uint64_t v5 = (uint64_t **)(re2::ref_map + 8);
      uint64_t v4 = *(unint64_t **)(re2::ref_map + 8);
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v6 = v4;
            unint64_t v7 = v4[4];
            if (v7 <= (unint64_t)this) {
              break;
            }
            uint64_t v4 = (unint64_t *)*v6;
            uint64_t v5 = (uint64_t **)v6;
            if (!*v6) {
              goto LABEL_10;
            }
          }
          if (v7 >= (unint64_t)this) {
            break;
          }
          uint64_t v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            uint64_t v5 = (uint64_t **)(v6 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v6 = (void *)(re2::ref_map + 8);
LABEL_10:
        uint64_t v8 = v6;
        uint64_t v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 1re2::Compiler::Compile(this, 0) = 0;
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = v8;
        unsigned char *v5 = v6;
        uint64_t v9 = **(void **)v3;
        int v10 = v6;
        if (v9)
        {
          *(void *)uint64_t v3 = v9;
          int v10 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v10);
        ++*(void *)(v3 + 16);
      }
      uint64_t v1 = *((unsigned int *)v6 + 10);
    }
    else
    {
      uint64_t v1 = 0;
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  return v1;
}

re2::Regexp *re2::Regexp::Incref(re2::Regexp *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 2);
  if (v2 < 0xFFFE)
  {
    *((_WORD *)this + 2) = v2 + 1;
  }
  else
  {
    pthread_mutex_lock(&re2::ref_mutex);
    uint64_t v3 = (void **)re2::ref_map;
    if (!re2::ref_map) {
      operator new();
    }
    uint64_t v4 = *(unint64_t **)(re2::ref_map + 8);
    uint64_t v5 = (uint64_t **)(re2::ref_map + 8);
    uint64_t v6 = (void *)(re2::ref_map + 8);
    if (*((__int16 *)this + 2) == -1)
    {
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v6 = v4;
            unint64_t v11 = v4[4];
            if (v11 <= (unint64_t)this) {
              break;
            }
            uint64_t v4 = (unint64_t *)*v6;
            uint64_t v5 = (uint64_t **)v6;
            if (!*v6) {
              goto LABEL_25;
            }
          }
          if (v11 >= (unint64_t)this) {
            break;
          }
          uint64_t v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            uint64_t v5 = (uint64_t **)(v6 + 1);
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        uint64_t v12 = v6;
        uint64_t v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 1re2::Compiler::Compile(this, 0) = 0;
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = v12;
        unsigned char *v5 = v6;
        int v13 = (void *)**v3;
        uint64_t v14 = v6;
        if (v13)
        {
          *uint64_t v3 = v13;
          uint64_t v14 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v14);
        v3[2] = (void *)((char *)v3[2] + 1);
      }
      ++*((_DWORD *)v6 + 10);
    }
    else
    {
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v6 = v4;
            unint64_t v7 = v4[4];
            if (v7 <= (unint64_t)this) {
              break;
            }
            uint64_t v4 = (unint64_t *)*v6;
            uint64_t v5 = (uint64_t **)v6;
            if (!*v6) {
              goto LABEL_14;
            }
          }
          if (v7 >= (unint64_t)this) {
            break;
          }
          uint64_t v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            uint64_t v5 = (uint64_t **)(v6 + 1);
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        uint64_t v8 = v6;
        uint64_t v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 1re2::Compiler::Compile(this, 0) = 0;
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = v8;
        unsigned char *v5 = v6;
        uint64_t v9 = (void *)**v3;
        int v10 = v6;
        if (v9)
        {
          *uint64_t v3 = v9;
          int v10 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v10);
        v3[2] = (void *)((char *)v3[2] + 1);
      }
      *((_DWORD *)v6 + 1re2::Compiler::Compile(this, 0) = 0xFFFF;
      *((_WORD *)this + 2) = -1;
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  return this;
}

void re2::Regexp::Decref(re2::Regexp *this)
{
  int v2 = *((unsigned __int16 *)this + 2);
  if (v2 == 0xFFFF)
  {
    pthread_mutex_lock(&re2::ref_mutex);
    uint64_t v4 = re2::ref_map;
    uint64_t v6 = (uint64_t **)(re2::ref_map + 8);
    uint64_t v5 = *(unint64_t **)(re2::ref_map + 8);
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v7 = (char *)v5;
          unint64_t v8 = v5[4];
          if (v8 <= (unint64_t)this) {
            break;
          }
          uint64_t v5 = *(unint64_t **)v7;
          uint64_t v6 = (uint64_t **)v7;
          if (!*(void *)v7) {
            goto LABEL_11;
          }
        }
        if (v8 >= (unint64_t)this) {
          break;
        }
        uint64_t v5 = (unint64_t *)*((void *)v7 + 1);
        if (!v5)
        {
          uint64_t v6 = (uint64_t **)(v7 + 8);
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v7 = (char *)(re2::ref_map + 8);
LABEL_11:
      uint64_t v9 = v7;
      unint64_t v7 = (char *)operator new(0x30uLL);
      *((void *)v7 + 4) = this;
      *((_DWORD *)v7 + 1re2::Compiler::Compile(this, 0) = 0;
      *(void *)unint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = v9;
      *uint64_t v6 = (uint64_t *)v7;
      uint64_t v10 = **(void **)v4;
      unint64_t v11 = (uint64_t *)v7;
      if (v10)
      {
        *(void *)uint64_t v4 = v10;
        unint64_t v11 = *v6;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v11);
      ++*(void *)(v4 + 16);
    }
    int v12 = *((_DWORD *)v7 + 10);
    int v13 = v12 - 1;
    if (v12 >= 0x10000)
    {
      uint64_t v23 = re2::ref_map;
      uint64_t v25 = (uint64_t **)(re2::ref_map + 8);
      uint64_t v24 = *(unint64_t **)(re2::ref_map + 8);
      if (v24)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v26 = v24;
            unint64_t v27 = v24[4];
            if (v27 <= (unint64_t)this) {
              break;
            }
            uint64_t v24 = (unint64_t *)*v26;
            uint64_t v25 = (uint64_t **)v26;
            if (!*v26) {
              goto LABEL_39;
            }
          }
          if (v27 >= (unint64_t)this) {
            break;
          }
          uint64_t v24 = (unint64_t *)v26[1];
          if (!v24)
          {
            uint64_t v25 = (uint64_t **)(v26 + 1);
            goto LABEL_39;
          }
        }
      }
      else
      {
        uint64_t v26 = (void *)(re2::ref_map + 8);
LABEL_39:
        char v28 = v26;
        uint64_t v26 = operator new(0x30uLL);
        v26[4] = this;
        *((_DWORD *)v26 + 1re2::Compiler::Compile(this, 0) = 0;
        *uint64_t v26 = 0;
        v26[1] = 0;
        v26[2] = v28;
        *uint64_t v25 = v26;
        uint64_t v29 = **(void **)v23;
        uint64_t v30 = v26;
        if (v29)
        {
          *(void *)uint64_t v23 = v29;
          uint64_t v30 = *v25;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v23 + 8), v30);
        ++*(void *)(v23 + 16);
      }
      *((_DWORD *)v26 + 1re2::Compiler::Compile(this, 0) = v13;
    }
    else
    {
      *((_WORD *)this + 2) = v13;
      uint64_t v14 = re2::ref_map;
      uint64_t v15 = *(uint64_t **)(re2::ref_map + 8);
      if (v15)
      {
        char v16 = (uint64_t *)(re2::ref_map + 8);
        int v17 = *(void **)(re2::ref_map + 8);
        do
        {
          unint64_t v18 = v17[4];
          BOOL v19 = v18 >= (unint64_t)this;
          if (v18 >= (unint64_t)this) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v17 + 1;
          }
          if (v19) {
            char v16 = v17;
          }
          int v17 = (void *)*v20;
        }
        while (*v20);
        if (v16 != (uint64_t *)(re2::ref_map + 8) && v16[4] <= (unint64_t)this)
        {
          unsigned int v21 = (uint64_t *)v16[1];
          if (v21)
          {
            do
            {
              uint64_t v22 = v21;
              unsigned int v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
          else
          {
            uint64_t v31 = v16;
            do
            {
              uint64_t v22 = (uint64_t *)v31[2];
              BOOL v32 = *v22 == (void)v31;
              uint64_t v31 = v22;
            }
            while (!v32);
          }
          if (*(uint64_t **)re2::ref_map == v16) {
            *(void *)re2::ref_map = v22;
          }
          --*(void *)(v14 + 16);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, v16);
          operator delete(v16);
        }
      }
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  else
  {
    __int16 v3 = v2 - 1;
    *((_WORD *)this + 2) = v3;
    if (!v3)
    {
      re2::Regexp::Destroy(this);
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  __int16 v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      __int16 v3 = a2;
      goto LABEL_7;
    }
    do
    {
      __int16 v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *__int16 v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      char v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_50;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v20 = (uint64_t *)v7[1];
      uint64_t *v14 = v20;
      if (v20) {
        void v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      void v14[2] = v7;
      if (result == (uint64_t *)v14) {
        double result = v7;
      }
      unint64_t v7 = *v14;
      char v16 = (void *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    unsigned int v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        unsigned int v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *unsigned int v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        char v16 = v7;
      }
      unint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *unint64_t v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_26:
    unint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_40:
      BOOL v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_26;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    unint64_t v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      id v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *int v17 = (uint64_t)v14;
    void v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      double result = v7;
    }
    unint64_t v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_40;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_40;
  }
  BOOL v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *unint64_t v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    BOOL v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *uint64_t v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void re2::Regexp::Destroy(re2::Regexp *this)
{
  uint64_t v1 = this;
  if (this && !*((_WORD *)this + 3))
  {
    re2::Regexp::~Regexp(this);
    freeRegexp(v2);
    return;
  }
  if (*((_WORD *)this + 3))
  {
    *((void *)this + 2) = 0;
    while (1)
    {
      if (!v1) {
        return;
      }
      uint64_t v4 = (re2::Regexp *)*((void *)v1 + 2);
      if (*((_WORD *)v1 + 2))
      {
        LOBYTE(v13) = 0;
        int v5 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Bad reference count ", 20);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v13);
      }
      if (*((_WORD *)v1 + 3)) {
        break;
      }
LABEL_7:
      re2::Regexp::~Regexp(v1);
      freeRegexp(v3);
      uint64_t v1 = v4;
    }
    uint64_t v6 = (void *)((char *)v1 + 8);
    if (*((_WORD *)v1 + 3) != 1) {
      uint64_t v6 = (void *)*v6;
    }
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v9 = v6[v7];
      if (v9)
      {
        int v10 = *(unsigned __int16 *)(v9 + 4);
        if (v10 == 0xFFFF)
        {
          re2::Regexp::Decref((re2::Regexp *)v6[v7]);
          if (!*(_WORD *)(v9 + 4))
          {
LABEL_22:
            if (*(_WORD *)(v9 + 6))
            {
              *(void *)(v9 + 16) = v4;
              uint64_t v4 = (re2::Regexp *)v9;
            }
            else
            {
              re2::Regexp::~Regexp((re2::Regexp *)v9);
              freeRegexp(v12);
            }
          }
        }
        else
        {
          __int16 v11 = v10 - 1;
          *(_WORD *)(v9 + 4) = v11;
          if (!v11) {
            goto LABEL_22;
          }
        }
      }
      ++v7;
      unint64_t v8 = *((unsigned __int16 *)v1 + 3);
      if (v7 >= v8)
      {
        if (v8 >= 2) {
          MEMORY[0x1CB79A8A0](v6, 0x20C8093837F09);
        }
        *((_WORD *)v1 + 3) = 0;
        goto LABEL_7;
      }
    }
  }
}

void sub_1CA6D2D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::AddRuneToString(uint64_t this, int a2)
{
  int8x8_t v2 = (int8x8_t)*(unsigned int *)(this + 24);
  if (!v2.i32[0]) {
    operator new[]();
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v2.i32[0] >= 8 && v3.i32[0] <= 1u) {
    operator new[]();
  }
  uint64_t v5 = *(void *)(this + 32);
  uint64_t v6 = *(int *)(this + 24);
  *(_DWORD *)(this + 24) = v6 + 1;
  *(_DWORD *)(v5 + 4 * v6) = a2;
  return this;
}

double re2::Regexp::HaveMatch(int a1, __int16 a2)
{
  uint64_t v4 = (char *)mallocRegexp();
  *(_WORD *)uint64_t v4 = 21;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  double result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((_DWORD *)v4 + 6) = a1;
  return result;
}

_WORD *re2::Regexp::Plus(_WORD *a1, int a2)
{
  __int16 v2 = a2;
  uint8x8_t v3 = a1;
  if (*(unsigned char *)a1 != 8 || (unsigned __int16)a1[1] != a2)
  {
    uint64_t v4 = mallocRegexp();
    _WORD *v4 = 8;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((void *)v4 + 1) = v3;
    *((void *)v4 + 2) = 0;
    uint8x8_t v3 = v4;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = 0;
  }
  return v3;
}

_WORD *re2::Regexp::Star(_WORD *a1, int a2)
{
  __int16 v2 = a2;
  uint8x8_t v3 = a1;
  if (*(unsigned char *)a1 != 7 || (unsigned __int16)a1[1] != a2)
  {
    uint64_t v4 = mallocRegexp();
    _WORD *v4 = 7;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((void *)v4 + 1) = v3;
    *((void *)v4 + 2) = 0;
    uint8x8_t v3 = v4;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = 0;
  }
  return v3;
}

_WORD *re2::Regexp::Quest(_WORD *a1, int a2)
{
  __int16 v2 = a2;
  uint8x8_t v3 = a1;
  if (*(unsigned char *)a1 != 9 || (unsigned __int16)a1[1] != a2)
  {
    uint64_t v4 = mallocRegexp();
    _WORD *v4 = 9;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((void *)v4 + 1) = v3;
    *((void *)v4 + 2) = 0;
    uint8x8_t v3 = v4;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = 0;
  }
  return v3;
}

char *re2::Regexp::ConcatOrAlternate(int a1, _OWORD *a2, signed int a3, __int16 a4, int a5)
{
  if (a3 == 1) {
    return *(char **)a2;
  }
  char v9 = a1;
  if (a1 == 6 && a5) {
    operator new[]();
  }
  if (a3 >= 0x10000)
  {
    int v10 = (char *)mallocRegexp();
    *int v10 = v9;
    v10[1] = 0;
    *((_WORD *)v10 + 1) = a4;
    *((_WORD *)v10 + 2) = 1;
    *(_OWORD *)(v10 + 6) = 0u;
    *(_OWORD *)(v10 + 22) = 0u;
    *((_WORD *)v10 + 19) = 0;
    re2::Regexp::AllocSub((uint64_t)v10, (a3 + 65534) / 0xFFFFu);
    __int16 v11 = (char *)mallocRegexp();
    *__int16 v11 = v9;
    v11[1] = 0;
    *((_WORD *)v11 + 1) = a4;
    *((_WORD *)v11 + 2) = 1;
    *(_OWORD *)(v11 + 6) = 0u;
    *(_OWORD *)(v11 + 22) = 0u;
    *((_WORD *)v11 + 19) = 0;
    operator new[]();
  }
  uint64_t v6 = (char *)mallocRegexp();
  *uint64_t v6 = v9;
  v6[1] = 0;
  *((_WORD *)v6 + 1) = a4;
  *((_WORD *)v6 + 2) = 1;
  *(_OWORD *)(v6 + 6) = 0u;
  *(_OWORD *)(v6 + 22) = 0u;
  *((_WORD *)v6 + 19) = 0;
  re2::Regexp::AllocSub((uint64_t)v6, a3);
  int v12 = v6 + 8;
  if (*((unsigned __int16 *)v6 + 3) >= 2u) {
    int v12 = (void *)*v12;
  }
  if (a3 >= 1)
  {
    uint64_t v13 = 0;
    if (a3 < 4) {
      goto LABEL_16;
    }
    if ((unint64_t)((char *)v12 - (char *)a2) <= 0x1F) {
      goto LABEL_16;
    }
    uint64_t v13 = a3 & 0xFFFFFFFC;
    uint64_t v14 = v12 + 2;
    uint64_t v15 = a2 + 1;
    uint64_t v16 = v13;
    do
    {
      long long v17 = *v15;
      *(v14 - 1) = *(v15 - 1);
      _OWORD *v14 = v17;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v13 != a3)
    {
LABEL_16:
      uint64_t v18 = a3 - v13;
      uint64_t v19 = v13;
      uint64_t v20 = &v12[v19];
      unsigned int v21 = (uint64_t *)((char *)a2 + v19 * 8);
      do
      {
        uint64_t v22 = *v21++;
        *v20++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  return v6;
}

uint64_t re2::Regexp::AllocSub(uint64_t this, unsigned int a2)
{
  if (a2 >= 0x10000)
  {
    LogMessage::LogMessage((LogMessage *)&v2, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_regexp.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Cannot AllocSub ", 16);
    std::ostream::operator<<();
    LogMessage::Flush((LogMessage *)&v2);
    abort();
  }
  if (a2 >= 2) {
    operator new[]();
  }
  *(_WORD *)(this + 6) = a2;
  return this;
}

void sub_1CA6D331C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LogMessage::LogMessage(LogMessage *this, const char *a2)
{
  *(unsigned char *)this = 0;
  uint8x8_t v3 = (void *)((char *)this + 8);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 8);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)a2, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
}

void sub_1CA6D33B0(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void LogMessageFatal::~LogMessageFatal(LogMessageFatal *this)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB79A880](a1 + 112);
  return a1;
}

char *re2::Regexp::Concat(_OWORD *a1, signed int a2, __int16 a3)
{
  return re2::Regexp::ConcatOrAlternate(5, a1, a2, a3, 0);
}

char *re2::Regexp::Alternate(_OWORD *a1, signed int a2, __int16 a3)
{
  return re2::Regexp::ConcatOrAlternate(6, a1, a2, a3, 1);
}

char *re2::Regexp::AlternateNoFactor(_OWORD *a1, signed int a2, __int16 a3)
{
  return re2::Regexp::ConcatOrAlternate(6, a1, a2, a3, 0);
}

_WORD *re2::Regexp::Capture(uint64_t a1, __int16 a2, int a3)
{
  double result = mallocRegexp();
  *double result = 11;
  result[1] = a2;
  *((_DWORD *)result + 1) = 65537;
  *((void *)result + 3) = 0;
  *((void *)result + 4) = 0;
  *((void *)result + 1) = a1;
  *((void *)result + 2) = 0;
  *((_DWORD *)result + 6) = a3;
  return result;
}

_WORD *re2::Regexp::Repeat(uint64_t a1, __int16 a2, int a3, int a4)
{
  double result = mallocRegexp();
  *double result = 10;
  result[1] = a2;
  *((_DWORD *)result + 1) = 65537;
  *((void *)result + 3) = 0;
  *((void *)result + 4) = 0;
  *((void *)result + 1) = a1;
  *((void *)result + 2) = 0;
  *((_DWORD *)result + 6) = a4;
  *((_DWORD *)result + 7) = a3;
  return result;
}

double re2::Regexp::NewLiteral(int a1, __int16 a2)
{
  size_t v4 = (char *)mallocRegexp();
  *(_WORD *)size_t v4 = 3;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  double result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((_DWORD *)v4 + 6) = a1;
  return result;
}

char *re2::Regexp::LiteralString(int *a1, int a2, __int16 a3)
{
  if (a2 <= 0)
  {
    unint64_t v7 = (char *)mallocRegexp();
    *(_WORD *)unint64_t v7 = 2;
    *((_WORD *)v7 + 1) = a3;
    *((_WORD *)v7 + 2) = 1;
    *(_OWORD *)(v7 + 6) = 0u;
    *(_OWORD *)(v7 + 22) = 0u;
    *((_WORD *)v7 + 19) = 0;
  }
  else if (a2 == 1)
  {
    int v6 = *a1;
    unint64_t v7 = (char *)mallocRegexp();
    *(_WORD *)unint64_t v7 = 3;
    *((_WORD *)v7 + 1) = a3;
    *((_WORD *)v7 + 2) = 1;
    *(_OWORD *)(v7 + 22) = 0u;
    *(_OWORD *)(v7 + 6) = 0u;
    *((_WORD *)v7 + 19) = 0;
    *((_DWORD *)v7 + 6) = v6;
  }
  else
  {
    unint64_t v7 = (char *)mallocRegexp();
    uint64_t v9 = 0;
    *(_WORD *)unint64_t v7 = 4;
    *((_WORD *)v7 + 1) = a3;
    *((_WORD *)v7 + 2) = 1;
    *(_OWORD *)(v7 + 6) = 0u;
    *(_OWORD *)(v7 + 22) = 0u;
    *((_WORD *)v7 + 19) = 0;
    do
    {
      int v11 = a1[v9];
      int8x8_t v12 = (int8x8_t)*((unsigned int *)v7 + 6);
      if (!v12.i32[0]) {
        operator new[]();
      }
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      uint64_t v14 = *((void *)v7 + 4);
      if (v12.i32[0] >= 8 && v13.i32[0] <= 1u) {
        operator new[]();
      }
      uint64_t v10 = *((int *)v7 + 6);
      *((_DWORD *)v7 + 6) = v10 + 1;
      *(_DWORD *)(v14 + 4 * v1re2::Compiler::Compile(this, 0) = v11;
      ++v9;
    }
    while (v9 != a2);
  }
  return v7;
}

double re2::Regexp::NewCharClass(uint64_t a1, __int16 a2)
{
  size_t v4 = (char *)mallocRegexp();
  *(_WORD *)size_t v4 = 20;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  double result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((void *)v4 + 3) = a1;
  return result;
}

__n128 re2::Regexp::Swap(re2::Regexp *this, re2::Regexp *a2)
{
  __n128 result = *(__n128 *)this;
  long long v3 = *((_OWORD *)this + 1);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *((void *)a2 + 4);
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v6;
  *((void *)this + 4) = v5;
  *((void *)a2 + 4) = v4;
  *(__n128 *)a2 = result;
  *((_OWORD *)a2 + 1) = v3;
  return result;
}

BOOL re2::Regexp::Equal(re2::Regexp *this, re2::Regexp *a2, re2::Regexp *a3)
{
  long long v3 = a2;
  uint64_t v4 = this;
  if (!this || !a2) {
    return this == a2;
  }
  if (!re2::TopEqual(this, a2, a3)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)v4;
  if ((v6 - 5) > 6) {
    return 1;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  while (v6 - 7 < 5)
  {
    int8x8_t v12 = (re2 **)((char *)v4 + 8);
    if (*((unsigned __int16 *)v4 + 3) >= 2u) {
      int8x8_t v12 = (re2 **)*v12;
    }
    uint8x8_t v13 = (re2::Regexp **)((char *)v3 + 8);
    if (*((unsigned __int16 *)v3 + 3) >= 2u) {
      uint8x8_t v13 = (re2::Regexp **)*v13;
    }
    uint64_t v4 = *v12;
    long long v3 = *v13;
    if (!re2::TopEqual(*v12, *v13, v5))
    {
LABEL_103:
      uint64_t v10 = 0;
      if (v7) {
        goto LABEL_104;
      }
      return v10;
    }
    int v11 = v8;
LABEL_11:
    LOBYTE(v6) = *(unsigned char *)v4;
    unint64_t v8 = v11;
  }
  if (v6 - 5 < 2)
  {
    LODWORD(v14) = *((unsigned __int16 *)v4 + 3);
    if (*((_WORD *)v4 + 3))
    {
      uint64_t v15 = v4;
      unint64_t v16 = 0;
      long long v67 = v15;
      unint64_t v69 = v3;
      uint64_t v71 = (void *)((char *)v3 + 8);
      unsigned int v72 = (void *)((char *)v15 + 8);
      do
      {
        long long v17 = v72;
        if (v14 >= 2) {
          long long v17 = (void *)*v72;
        }
        uint64_t v18 = v71;
        if (*((unsigned __int16 *)v3 + 3) >= 2u) {
          uint64_t v18 = (void *)*v71;
        }
        uint64_t v19 = (re2 *)v17[v16];
        uint64_t v20 = (re2::Regexp *)v18[v16];
        if (!re2::TopEqual(v19, v20, v5)) {
          goto LABEL_103;
        }
        if ((unint64_t)v8 < v9)
        {
          void *v8 = v19;
          unsigned int v21 = v8 + 1;
          if ((unint64_t)(v8 + 1) >= v9) {
            goto LABEL_54;
          }
          goto LABEL_22;
        }
        uint64_t v22 = v8 - v7;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          goto LABEL_108;
        }
        if ((uint64_t)(v9 - (void)v7) >> 2 > v23) {
          unint64_t v23 = (uint64_t)(v9 - (void)v7) >> 2;
        }
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          if (v24 >> 61) {
            goto LABEL_109;
          }
          uint64_t v25 = operator new(8 * v24);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (re2 **)&v25[8 * v22];
        *uint64_t v26 = v19;
        unsigned int v21 = v26 + 1;
        if (v8 != v7)
        {
          unint64_t v27 = (char *)(v8 - 1) - (char *)v7;
          if (v27 < 0x58)
          {
            uint64_t v28 = v8;
            goto LABEL_50;
          }
          if ((unint64_t)((char *)v7 - v25) < 0x20)
          {
            uint64_t v28 = v8;
            do
            {
LABEL_50:
              unint64_t v34 = *--v28;
              *--uint64_t v26 = v34;
            }
            while (v28 != v7);
            goto LABEL_51;
          }
          uint64_t v29 = (v27 >> 3) + 1;
          uint64_t v28 = &v8[-(v29 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v30 = &v25[8 * v22 - 16];
          uint64_t v31 = v8 - 2;
          uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *uint64_t v30 = v33;
            v30 -= 2;
            v31 -= 4;
            v32 -= 4;
          }
          while (v32);
          v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
LABEL_51:
        unint64_t v9 = (unint64_t)&v25[8 * v24];
        if (v7) {
          operator delete(v7);
        }
        unint64_t v7 = v26;
        if ((unint64_t)v21 >= v9)
        {
LABEL_54:
          uint64_t v35 = v21 - v7;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
LABEL_108:
          }
            std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v9 - (void)v7) >> 2 > v36) {
            unint64_t v36 = (uint64_t)(v9 - (void)v7) >> 2;
          }
          if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37)
          {
            if (v37 >> 61) {
LABEL_109:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v38 = operator new(8 * v37);
          }
          else
          {
            uint64_t v38 = 0;
          }
          char v39 = (re2::Regexp **)&v38[8 * v35];
          unint64_t v9 = (unint64_t)&v38[8 * v37];
          *char v39 = v20;
          unint64_t v8 = v39 + 1;
          if (v21 == v7)
          {
            long long v3 = v69;
          }
          else
          {
            unint64_t v40 = (char *)(v21 - 1) - (char *)v7;
            if (v40 < 0x58 || (unint64_t)((char *)v7 - v38) < 0x20)
            {
              uint64_t v41 = v21;
              long long v3 = v69;
              goto LABEL_68;
            }
            uint64_t v43 = (v40 >> 3) + 1;
            uint64_t v41 = &v21[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
            char v44 = &v38[8 * v35 - 16];
            char v45 = v21 - 2;
            uint64_t v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *char v44 = v47;
              v44 -= 2;
              v45 -= 4;
              v46 -= 4;
            }
            while (v46);
            v39 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
            long long v3 = v69;
            if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_68:
                uint64_t v42 = *--v41;
                *--char v39 = v42;
              }
              while (v41 != v7);
            }
            if (!v7)
            {
LABEL_73:
              unint64_t v7 = v39;
              goto LABEL_23;
            }
          }
          operator delete(v7);
          goto LABEL_73;
        }
LABEL_22:
        *unsigned int v21 = v20;
        unint64_t v8 = v21 + 1;
        long long v3 = v69;
LABEL_23:
        ++v16;
        unint64_t v14 = *((unsigned __int16 *)v67 + 3);
      }
      while (v16 < v14);
    }
  }
  uint64_t v48 = (char *)v8 - (char *)v7;
  if ((((char *)v8 - (char *)v7) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v49 = v48 >> 3;
    uint64_t v50 = (v48 << 29) - 0x200000000;
    unint64_t v51 = v50 >> 32;
    uint64_t v4 = *(re2 **)((char *)v7 + (v50 >> 29));
    long long v3 = *(re2 **)((char *)v7 + (((v48 << 29) - 0x100000000) >> 29));
    unint64_t v52 = (v50 >> 32) - (v48 >> 3);
    if (v50 >> 32 <= (unint64_t)(v48 >> 3))
    {
      if (v50 >> 32 >= (unint64_t)(v48 >> 3)) {
        int v11 = v8;
      }
      else {
        int v11 = (re2 **)((char *)v7 + (v50 >> 29));
      }
      goto LABEL_11;
    }
    if (v52 <= (uint64_t)(v9 - (void)v8) >> 3)
    {
      bzero(v8, 8 * v52);
      int v11 = &v8[v52];
      goto LABEL_11;
    }
    if (v50 < 0) {
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v9 - (void)v7) >> 2 > v51) {
      unint64_t v51 = (uint64_t)(v9 - (void)v7) >> 2;
    }
    if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v68 = *(re2 **)((char *)v7 + (v50 >> 29));
    unint64_t v70 = *(re2 **)((char *)v7 + (((v48 << 29) - 0x100000000) >> 29));
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v55 = &v54[8 * v49];
    size_t v56 = 8 * v52;
    char v57 = v54;
    unint64_t v9 = (unint64_t)&v54[8 * v53];
    bzero(v55, v56);
    int v11 = (re2 **)&v55[v56];
    if (v8 == v7)
    {
      uint64_t v4 = v68;
      goto LABEL_100;
    }
    unint64_t v58 = (char *)v8 - (char *)v7 - 8;
    uint64_t v4 = v68;
    if (v58 >= 0x58)
    {
      if ((unint64_t)((char *)v7 - v57) >= 0x20)
      {
        uint64_t v60 = (v58 >> 3) + 1;
        uint64_t v59 = &v8[-(v60 & 0x3FFFFFFFFFFFFFFCLL)];
        unint64_t v61 = &v57[8 * v49 - 16];
        char v62 = v8 - 2;
        uint64_t v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v64 = *(_OWORD *)v62;
          *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
          *(_OWORD *)unint64_t v61 = v64;
          v61 -= 32;
          v62 -= 4;
          v63 -= 4;
        }
        while (v63);
        v55 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          if (!v7)
          {
LABEL_101:
            unint64_t v7 = (re2 **)v55;
            long long v3 = v70;
            goto LABEL_11;
          }
LABEL_100:
          operator delete(v7);
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v59 = v8;
      }
    }
    else
    {
      uint64_t v59 = v8;
    }
    do
    {
      uint64_t v65 = (uint64_t)*--v59;
      *((void *)v55 - 1) = v65;
      v55 -= 8;
    }
    while (v59 != v7);
    goto LABEL_99;
  }
  uint64_t v10 = 1;
  if (v7) {
LABEL_104:
  }
    operator delete(v7);
  return v10;
}

void sub_1CA6D3E3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL re2::TopEqual(re2 *this, re2::Regexp *a2, re2::Regexp *a3)
{
  int v3 = *(unsigned __int8 *)this;
  if (v3 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL result = 1;
  switch(v3)
  {
    case 1:
    case 2:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return result;
    case 3:
      if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6)) {
        return 0;
      }
      return ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 1) == 0;
    case 4:
      uint64_t v8 = *((int *)this + 6);
      if (v8 != *((_DWORD *)a2 + 6)
        || ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 1) != 0)
      {
        return 0;
      }
      unint64_t v9 = (const void *)*((void *)this + 4);
      uint64_t v10 = (const void *)*((void *)a2 + 4);
      size_t v11 = 4 * v8;
      goto LABEL_17;
    case 5:
    case 6:
      int v6 = *((unsigned __int16 *)this + 3);
      int v7 = *((unsigned __int16 *)a2 + 3);
      goto LABEL_13;
    case 7:
    case 8:
    case 9:
      return ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 0x40) == 0;
    case 10:
      if (((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 0x40) != 0
        || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7))
      {
        return 0;
      }
      goto LABEL_12;
    case 11:
      if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6)) {
        return 0;
      }
      return *((void *)this + 4) == *((void *)a2 + 4);
    case 19:
      return ((*((_WORD *)a2 + 1) ^ *((_WORD *)this + 1)) & 0x8000u) == 0;
    case 20:
      uint64_t v12 = *((void *)this + 3);
      uint64_t v13 = *((void *)a2 + 3);
      if (*(_DWORD *)(v12 + 4) != *(_DWORD *)(v13 + 4)) {
        return 0;
      }
      size_t v11 = 8 * *(int *)(v12 + 16);
      if (v11 != 8 * *(int *)(v13 + 16)) {
        return 0;
      }
      uint64_t v10 = *(const void **)(v13 + 8);
      unint64_t v9 = *(const void **)(v12 + 8);
LABEL_17:
      BOOL result = memcmp(v9, v10, v11) == 0;
      break;
    case 21:
LABEL_12:
      int v6 = *((_DWORD *)this + 6);
      int v7 = *((_DWORD *)a2 + 6);
LABEL_13:
      BOOL result = v6 == v7;
      break;
    default:
      LOBYTE(v15) = 0;
      unint64_t v14 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unexpected op in Regexp::Equal: ", 32);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v15);
      return 0;
  }
  return result;
}

void sub_1CA6D4040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

size_t re2::RegexpStatus::CodeText@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xD) {
    int v3 = 1;
  }
  else {
    int v3 = a1;
  }
  uint64_t v4 = re2::kErrorStrings[v3];
  size_t result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  size_t result = (size_t)memmove(a2, v4, v6);
LABEL_12:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

unint64_t re2::RegexpStatus::Text@<X0>(re2::RegexpStatus *this@<X0>, std::string *a2@<X8>)
{
  int v3 = a2;
  if (!*((_DWORD *)this + 4))
  {
    int v9 = *(_DWORD *)this;
    if (*(_DWORD *)this > 0xDu) {
      int v9 = 1;
    }
    uint64_t v10 = re2::kErrorStrings[v9];
    unint64_t result = strlen(v10);
    if (result > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = result;
    if (result >= 0x17)
    {
      uint64_t v17 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17) {
        uint64_t v17 = result | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v19 = (std::string *)operator new(v17 + 1);
      v3->__r_.__value_.__l.__size_ = v12;
      v3->__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      int v3 = v19;
    }
    else
    {
      *((unsigned char *)&v3->__r_.__value_.__s + 23) = result;
      if (!result) {
        goto LABEL_31;
      }
    }
    unint64_t result = (unint64_t)memmove(v3, v10, v12);
LABEL_31:
    v3->__r_.__value_.__s.__data_[v12] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v4 = *(_DWORD *)this;
  if (*(_DWORD *)this > 0xDu) {
    int v4 = 1;
  }
  uint64_t v5 = re2::kErrorStrings[v4];
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v13 = v6 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    size_t v21 = v7;
    int64_t v22 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v22) = v6;
    p_dst = (void **)&__dst;
    if (!v6) {
      goto LABEL_18;
    }
  }
  memmove(p_dst, v5, v7);
LABEL_18:
  *((unsigned char *)p_dst + v7) = 0;
  if (v22 >= 0) {
    uint64_t v15 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v15 = (const std::string::value_type *)__dst;
  }
  if (v22 >= 0) {
    std::string::size_type v16 = HIBYTE(v22);
  }
  else {
    std::string::size_type v16 = v21;
  }
  std::string::append(v3, v15, v16);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst);
  }
  std::string::append(v3, ": ");
  return (unint64_t)std::string::append(v3, *((const std::string::value_type **)this + 1), *((int *)this + 4));
}

void sub_1CA6D4324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t re2::RegexpStatus::Copy(uint64_t this, const re2::RegexpStatus *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v2 = *((void *)a2 + 1);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *(void *)(this + 8) = v2;
  return this;
}

void re2::Regexp::NumCaptures(re2::Regexp *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v1 = &unk_1F24EBE80;
  operator new();
}

void sub_1CA6D4488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re2::Regexp::Walker<int>::WalkInternal(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  re2::Regexp::Walker<int>::Reset((uint64_t)a1);
  if (a2)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = v8[2];
    uint64_t v10 = v8[1];
    if (v9 == v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = 16 * (v9 - v10) - 1;
    }
    uint64_t v12 = v8[5];
    unint64_t v13 = v12 + v8[4];
    if (v11 == v13)
    {
      std::deque<re2::WalkState<int>>::__add_back_capacity(a1[1]);
      uint64_t v10 = v8[1];
      uint64_t v12 = v8[5];
      unint64_t v13 = v12 + v8[4];
    }
    uint64_t v14 = *(void *)(v10 + ((v13 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v13 & 0x7F);
    *(void *)uint64_t v14 = a2;
    *(_DWORD *)(v14 + 8) = -1;
    *(_DWORD *)(v14 + 12) = a3;
    *(void *)(v14 + 24) = 0;
    v8[5] = v12 + 1;
    while (1)
    {
      while (1)
      {
        std::string::size_type v16 = (void *)a1[1];
        unint64_t v17 = v16[5] + v16[4] - 1;
        uint64_t v18 = *(void *)(v16[1] + ((v17 >> 4) & 0xFFFFFFFFFFFFFF8));
        unint64_t v19 = v17 & 0x7F;
        uint64_t v20 = (uint64_t *)(v18 + 32 * v19);
        uint64_t v21 = *v20;
        int v23 = *((_DWORD *)v20 + 2);
        int64_t v22 = v20 + 1;
        if (v23 == -1)
        {
          int v38 = *((_DWORD *)a1 + 5);
          *((_DWORD *)a1 + 5) = v38 - 1;
          if (v38 <= 0)
          {
            *((unsigned char *)a1 + 16) = 1;
            int v40 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 40))(a1, v21, *(unsigned int *)(v18 + 32 * v19 + 12));
LABEL_36:
            int v45 = v40;
            goto LABEL_37;
          }
          LOBYTE(v59) = 0;
          uint64_t v39 = v18 + 32 * v19;
          int v40 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void **))(*a1 + 16))(a1, v21, *(unsigned int *)(v39 + 12), &v59);
          *(_DWORD *)(v39 + 16) = v40;
          if ((_BYTE)v59) {
            goto LABEL_36;
          }
          *int64_t v22 = 0;
          *(void *)(v39 + 24) = 0;
          uint64_t v41 = (void *)(v39 + 24);
          if (*(_WORD *)(v21 + 6))
          {
            if (*(_WORD *)(v21 + 6) != 1) {
              operator new[]();
            }
            *uint64_t v41 = v18 + 32 * v19 + 20;
          }
        }
        int v24 = *(unsigned __int16 *)(v21 + 6);
        if (*(_WORD *)(v21 + 6)) {
          break;
        }
        uint64_t v26 = *v22;
LABEL_32:
        uint64_t v42 = v18 + 32 * v19;
        uint64_t v44 = *(void *)(v42 + 24);
        uint64_t v43 = (void *)(v42 + 24);
        int v45 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 24))(a1, v21, *((unsigned int *)v43 - 3), *((unsigned int *)v43 - 2), v44, v26);
        if (*(unsigned __int16 *)(v21 + 6) >= 2u && *v43) {
          MEMORY[0x1CB79A8A0](*v43, 0x1000C8052888210);
        }
LABEL_37:
        uint64_t v46 = (void *)a1[1];
        uint64_t v47 = v46[1];
        uint64_t v48 = v46[2];
        uint64_t v49 = 16 * (v48 - v47) - 1;
        uint64_t v51 = v46[4];
        uint64_t v50 = v46[5];
        if (v48 == v47) {
          uint64_t v49 = 0;
        }
        uint64_t v52 = v50 - 1;
        v46[5] = v50 - 1;
        if ((unint64_t)(v49 - (v50 + v51) + 1) >= 0x100)
        {
          operator delete(*(void **)(v48 - 8));
          v46[2] -= 8;
          uint64_t v46 = (void *)a1[1];
          uint64_t v52 = v46[5];
        }
        if (!v52) {
          return;
        }
        unint64_t v53 = v52 + v46[4] - 1;
        uint64_t v54 = *(void *)(v46[1] + ((v53 >> 4) & 0xFFFFFFFFFFFFFF8));
        unint64_t v55 = v53 & 0x7F;
        uint64_t v56 = v54 + 32 * v55;
        uint64_t v57 = *(void *)(v56 + 24);
        if (v57) {
          uint64_t v15 = (_DWORD *)(v57 + 4 * *(int *)(v56 + 8));
        }
        else {
          uint64_t v15 = (_DWORD *)(v56 + 20);
        }
        *uint64_t v15 = v45;
        ++*(_DWORD *)(v54 + 32 * v55 + 8);
      }
      uint64_t v25 = (void *)(v21 + 8);
      if (v24 != 1) {
        uint64_t v25 = (void *)*v25;
      }
      uint64_t v26 = *v22;
      if ((int)v26 >= v24) {
        goto LABEL_32;
      }
      uint64_t v27 = (v26 - 1);
      BOOL v28 = (int)v26 < 1 || a4 == 0;
      if (!v28 && v25[v27] == v25[v26])
      {
        *(_DWORD *)(*(void *)(v18 + 32 * v19 + 24) + 4 * (int)(*v22)++) = (*(uint64_t (**)(uint64_t *, void))(*a1 + 32))(a1, *(unsigned int *)(*(void *)(v18 + 32 * v19 + 24)+ 4 * v27));
      }
      else
      {
        uint64_t v29 = (void *)a1[1];
        uint64_t v30 = v29[2];
        uint64_t v31 = v29[1];
        uint64_t v32 = v25[(int)v26];
        int v33 = *(_DWORD *)(v18 + 32 * v19 + 16);
        if (v30 == v31) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = 16 * (v30 - v31) - 1;
        }
        uint64_t v35 = v29[5];
        unint64_t v36 = v35 + v29[4];
        if (v34 == v36)
        {
          std::deque<re2::WalkState<int>>::__add_back_capacity(a1[1]);
          uint64_t v31 = v29[1];
          uint64_t v35 = v29[5];
          unint64_t v36 = v35 + v29[4];
        }
        uint64_t v37 = *(void *)(v31 + ((v36 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v36 & 0x7F);
        *(void *)uint64_t v37 = v32;
        *(_DWORD *)(v37 + 8) = -1;
        *(_DWORD *)(v37 + 12) = v33;
        *(void *)(v37 + 24) = 0;
        v29[5] = v35 + 1;
      }
    }
  }
  LOBYTE(v59) = 0;
  unint64_t v58 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v59);
}

void sub_1CA6D48E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<int>::Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(v1 + 40))
    {
      LOBYTE(v13) = 0;
      uint64_t v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v13);
      uint64_t v4 = *(void **)(a1 + 8);
      uint64_t v5 = v4[5];
      while (v5)
      {
        uint64_t v6 = v4[4];
        unint64_t v7 = v5 + v6 - 1;
        uint64_t v8 = v4[1];
        uint64_t v9 = *(void *)(*(void *)(v8 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F) + 24);
        if (v9)
        {
          MEMORY[0x1CB79A8C0](v9, 0x1000C4052888210);
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v6 = v4[4];
          uint64_t v8 = v4[1];
        }
        uint64_t v10 = v4[2];
        uint64_t v11 = 16 * (v10 - v8) - 1;
        uint64_t v12 = v4[5];
        if (v10 == v8) {
          uint64_t v11 = 0;
        }
        uint64_t v5 = v12 - 1;
        v4[5] = v12 - 1;
        if ((unint64_t)(v11 - (v12 + v6) + 1) >= 0x100)
        {
          operator delete(*(void **)(v10 - 8));
          v4[2] -= 8;
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v5 = v4[5];
        }
      }
    }
  }
}

void sub_1CA6D4A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::deque<re2::WalkState<int>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4re2::Compiler::Compile(this, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void re2::NumCapturesWalker::~NumCapturesWalker(re2::NumCapturesWalker *this)
{
  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

void std::deque<re2::WalkState<int>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)unint64_t v5 = v8;
      goto LABEL_89;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        uint64_t v37 = (char *)operator new(8 * v34);
        int v38 = &v37[8 * v35];
        uint64_t v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        unint64_t v5 = v38;
        if (!v40)
        {
          unint64_t v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            unint64_t v84 = &v37[8 * v35];
            uint64_t v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v42 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v43 = &v38[v86];
              unsigned int v87 = (long long *)(v6 + 3);
              uint64_t v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *uint64_t v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v86;
            }
          }
          else
          {
            uint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  unint64_t v17 = *(char **)(a1 + 24);
  uint64_t v20 = *(char **)a1;
  unint64_t v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    int v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      uint64_t v44 = v19;
      goto LABEL_87;
    }
    unint64_t v69 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v69 = 1;
    }
    if (v69 >> 61) {
      goto LABEL_106;
    }
    unint64_t v70 = (v69 + 3) >> 2;
    uint64_t v71 = 8 * v69;
    unsigned int v72 = (char *)operator new(8 * v69);
    uint64_t v44 = &v72[8 * v70];
    uint64_t v73 = &v72[v71];
    unint64_t v74 = v44;
    if (v18 != v19)
    {
      unint64_t v74 = &v44[8 * v22];
      unint64_t v75 = &v72[8 * v70];
      char v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        unsigned int v77 = &v72[8 * v70];
        unint64_t v75 = v77;
        char v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          unint64_t v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v75 = &v44[v79];
          uint64_t v80 = (long long *)(v19 + 16);
          char v81 = v77 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *char v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v72;
            *(void *)(a1 + 8) = v44;
            *(void *)(a1 + 16) = v74;
            *(void *)(a1 + 24) = v73;
LABEL_86:
            operator delete(v19);
            uint64_t v44 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v44 - 1) = v25;
            unint64_t v7 = *(char **)(a1 + 8);
            unint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            uint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v93 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v93 = 1;
              }
              if (!(v93 >> 61))
              {
                unint64_t v94 = v93 >> 2;
                uint64_t v95 = 8 * v93;
                uint64_t v37 = (char *)operator new(8 * v93);
                int v38 = &v37[8 * v94];
                uint64_t v39 = &v37[v95];
                int64_t v96 = v5 - v7;
                BOOL v40 = v5 == v7;
                unint64_t v5 = v38;
                if (!v40)
                {
                  unint64_t v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    unint64_t v99 = &v37[8 * v94];
                    uint64_t v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      uint64_t v100 = (v97 >> 3) + 1;
                      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v98 = &v38[v101];
                      uint64_t v102 = (long long *)(v7 + 16);
                      char v103 = v99 + 16;
                      uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *char v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v101;
                    }
                  }
                  else
                  {
                    uint64_t v98 = &v37[8 * v94];
                  }
                  do
                  {
                    uint64_t v106 = *(void *)v7;
                    v7 += 8;
                    *(void *)uint64_t v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_81:
                *(void *)a1 = v37;
                *(void *)(a1 + 8) = v38;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  unint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          char v76 = &v19[v79];
        }
      }
      do
      {
        uint64_t v92 = *(void *)v76;
        v76 += 8;
        *(void *)unint64_t v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(void *)a1 = v72;
    *(void *)(a1 + 8) = v44;
    *(void *)(a1 + 16) = v74;
    *(void *)(a1 + 24) = v73;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  BOOL v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  uint64_t v30 = &v28[8 * v22];
  uint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    uint64_t v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      uint64_t v31 = &v30[8 * v45];
      operator delete(v28);
      unint64_t v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      BOOL v28 = v30;
    }
    else
    {
      unint64_t v33 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v33 = v22 + 1;
      }
      v30 -= 8 * (v33 >> 1);
    }
    uint64_t v29 = v32;
  }
  *(void *)uint64_t v30 = v29;
  uint64_t v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28) {
        goto LABEL_43;
      }
      if (v46 < v31)
      {
        uint64_t v49 = (v31 - v46) >> 3;
        if (v49 >= -1) {
          uint64_t v50 = v49 + 1;
        }
        else {
          uint64_t v50 = v49 + 2;
        }
        uint64_t v51 = v50 >> 1;
        uint64_t v30 = &v28[8 * (v50 >> 1)];
        uint64_t v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          uint64_t v52 = v46;
        }
        uint64_t v46 = (char *)v52 + 8 * v51;
        goto LABEL_43;
      }
      if (v31 == v28) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = (v31 - v28) >> 2;
      }
      if (v53 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v54 = (char *)operator new(8 * v53);
      unint64_t v55 = v54;
      unint64_t v56 = (v53 + 3) >> 2;
      uint64_t v30 = &v54[8 * v56];
      int64_t v57 = v46 - v28;
      BOOL v40 = v46 == v28;
      uint64_t v46 = v30;
      if (!v40)
      {
        uint64_t v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v58 = v57 - 8;
        uint64_t v59 = &v54[8 * v56];
        uint64_t v60 = v28;
        if (v58 >= 0x38)
        {
          uint64_t v61 = 8 * v56;
          uint64_t v59 = &v54[8 * v56];
          uint64_t v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            long long v64 = (long long *)(v28 + 16);
            uint64_t v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)uint64_t v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_42;
            }
            uint64_t v60 = &v28[v63];
          }
        }
        do
        {
          uint64_t v68 = *(void *)v60;
          v60 += 8;
          *(void *)uint64_t v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_42:
      uint64_t v31 = &v54[8 * v53];
      operator delete(v28);
      BOOL v28 = v55;
LABEL_43:
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  uint64_t v47 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v30;
  *(void *)(a1 + 16) = v46;
  *(void *)(a1 + 24) = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1CA6D5168(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::NumCapturesWalker::ShortVisit(re2::NumCapturesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  LOBYTE(v6) = 0;
  unint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"NumCapturesWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v6);
  return a3;
}

void sub_1CA6D51F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::Walker<int>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::Regexp::Walker<int>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::NumCapturesWalker::PreVisit(re2::NumCapturesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  if (*(unsigned char *)a2 == 11) {
    ++*((_DWORD *)this + 6);
  }
  return a3;
}

uint64_t re2::Regexp::Walker<int>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void re2::Regexp::NamedCaptures(re2::Regexp *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v1 = &unk_1F24EBE80;
  operator new();
}

void sub_1CA6D5398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re2::NamedCapturesWalker::~NamedCapturesWalker(re2::NamedCapturesWalker *this)
{
  *(void *)this = &unk_1F24EA708;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1CB79A8C0](v2, 0x1020C4062D53EE8);
  }
  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1CB79A8C0](v4, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t vars8;

  re2::NamedCapturesWalker::~NamedCapturesWalker(this);
  JUMPOUT(0x1CB79A8C0);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t re2::NamedCapturesWalker::ShortVisit(re2::NamedCapturesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  LOBYTE(v6) = 0;
  uint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"NamedCapturesWalker::ShortVisit called", 38);
  LogMessage::~LogMessage(&v6);
  return a3;
}

void sub_1CA6D550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::NamedCapturesWalker::PreVisit(re2::NamedCapturesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4 = a3;
  if (*(unsigned char *)a2 == 11)
  {
    uint64_t v6 = (long long *)*((void *)a2 + 4);
    if (v6)
    {
      uint64_t v7 = (uint64_t **)*((void *)this + 3);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = v7[1];
      if (v8)
      {
        unsigned int v52 = a3;
        char v9 = *((unsigned char *)v6 + 23);
        if (v9 >= 0) {
          size_t v10 = *((unsigned __int8 *)v6 + 23);
        }
        else {
          size_t v10 = *((void *)v6 + 1);
        }
        if (v9 >= 0) {
          uint64_t v11 = (const std::string::value_type *)*((void *)a2 + 4);
        }
        else {
          uint64_t v11 = *(const std::string::value_type **)v6;
        }
        uint64_t v12 = v7 + 1;
        uint64_t v13 = v7[1];
        do
        {
          int v14 = *((char *)v13 + 55);
          if (v14 >= 0) {
            size_t v15 = *((unsigned __int8 *)v13 + 55);
          }
          else {
            size_t v15 = v13[5];
          }
          if (v14 >= 0) {
            int64_t v16 = v13 + 4;
          }
          else {
            int64_t v16 = (const void *)v13[4];
          }
          if (v10 >= v15) {
            size_t v17 = v15;
          }
          else {
            size_t v17 = v10;
          }
          int v18 = memcmp(v16, v11, v17);
          BOOL v19 = v15 < v10;
          if (v18) {
            BOOL v19 = v18 < 0;
          }
          BOOL v20 = !v19;
          if (v19) {
            uint64_t v21 = (uint64_t **)(v13 + 1);
          }
          else {
            uint64_t v21 = (uint64_t **)v13;
          }
          if (v20) {
            uint64_t v12 = (uint64_t **)v13;
          }
          uint64_t v13 = *v21;
        }
        while (*v21);
        uint64_t v4 = v52;
        if (v12 == v7 + 1) {
          goto LABEL_43;
        }
        int v24 = v12[4];
        uint64_t v23 = v12 + 4;
        uint64_t v22 = v24;
        int v25 = *((char *)v23 + 23);
        if (v25 >= 0) {
          size_t v26 = *((unsigned __int8 *)v23 + 23);
        }
        else {
          size_t v26 = (size_t)v23[1];
        }
        if (v25 >= 0) {
          unint64_t v27 = v23;
        }
        else {
          unint64_t v27 = (uint64_t **)v22;
        }
        if (v26 >= v10) {
          size_t v28 = v10;
        }
        else {
          size_t v28 = v26;
        }
        int v29 = memcmp(v11, v27, v28);
        BOOL v30 = v10 < v26;
        if (v29) {
          BOOL v30 = v29 < 0;
        }
        if (v30)
        {
LABEL_43:
          int v31 = *((_DWORD *)a2 + 6);
          uint64_t v32 = v7 + 1;
          int v33 = *((char *)v6 + 23);
          if (v33 >= 0) {
            size_t v34 = *((unsigned __int8 *)v6 + 23);
          }
          else {
            size_t v34 = *((void *)v6 + 1);
          }
          if (v33 >= 0) {
            unint64_t v35 = (const std::string::value_type *)v6;
          }
          else {
            unint64_t v35 = *(const std::string::value_type **)v6;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v36 = (uint64_t **)v8;
              int v37 = *((char *)v8 + 55);
              if (v37 >= 0) {
                size_t v38 = *((unsigned __int8 *)v8 + 55);
              }
              else {
                size_t v38 = v8[5];
              }
              if (v37 >= 0) {
                uint64_t v39 = v8 + 4;
              }
              else {
                uint64_t v39 = (const void *)v8[4];
              }
              if (v38 >= v34) {
                size_t v40 = v34;
              }
              else {
                size_t v40 = v38;
              }
              int v41 = memcmp(v35, v39, v40);
              BOOL v42 = v34 < v38;
              if (v41) {
                BOOL v42 = v41 < 0;
              }
              if (v42) {
                break;
              }
              int v43 = memcmp(v39, v35, v40);
              BOOL v44 = v38 < v34;
              if (v43) {
                BOOL v44 = v43 < 0;
              }
              if (!v44)
              {
                uint64_t v46 = (char *)v36;
                uint64_t v4 = v52;
                goto LABEL_75;
              }
              uint64_t v8 = v36[1];
              if (!v8)
              {
                unint64_t v45 = v36 + 1;
LABEL_78:
                uint64_t v4 = v52;
                goto LABEL_69;
              }
            }
            uint64_t v8 = *v36;
            if (!*v36)
            {
              unint64_t v45 = v36;
              goto LABEL_78;
            }
          }
        }
      }
      else
      {
        int v31 = *((_DWORD *)a2 + 6);
        uint64_t v32 = v7 + 1;
        unint64_t v45 = v7 + 1;
        uint64_t v36 = v7 + 1;
LABEL_69:
        uint64_t v46 = (char *)operator new(0x40uLL);
        uint64_t v47 = (std::string *)(v46 + 32);
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v48 = *v6;
          *((void *)v46 + 6) = *((void *)v6 + 2);
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
        }
        *((_DWORD *)v46 + 14) = 0;
        *(void *)uint64_t v46 = 0;
        *((void *)v46 + 1) = 0;
        *((void *)v46 + 2) = v36;
        *unint64_t v45 = (uint64_t *)v46;
        uint64_t v49 = (uint64_t *)**v7;
        uint64_t v50 = (uint64_t *)v46;
        if (v49)
        {
          *uint64_t v7 = v49;
          uint64_t v50 = *v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v32, v50);
        v7[2] = (uint64_t *)((char *)v7[2] + 1);
LABEL_75:
        *((_DWORD *)v46 + 14) = v31;
      }
    }
  }
  return v4;
}

void sub_1CA6D5800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void re2::Regexp::CaptureNames(re2::Regexp *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v1 = &unk_1F24EBE80;
  operator new();
}

void sub_1CA6D59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re2::CaptureNamesWalker::~CaptureNamesWalker(re2::CaptureNamesWalker *this)
{
  *(void *)this = &unk_1F24EA760;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1CB79A8C0](v2, 0x1020C4062D53EE8);
  }
  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1CB79A8C0](v4, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t vars8;

  re2::CaptureNamesWalker::~CaptureNamesWalker(this);
  JUMPOUT(0x1CB79A8C0);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t re2::CaptureNamesWalker::ShortVisit(re2::CaptureNamesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  LOBYTE(v6) = 0;
  uint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"CaptureNamesWalker::ShortVisit called", 37);
  LogMessage::~LogMessage(&v6);
  return a3;
}

void sub_1CA6D5B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::CaptureNamesWalker::PreVisit(re2::CaptureNamesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  if (*(unsigned char *)a2 == 11)
  {
    unint64_t v5 = (const std::string *)*((void *)a2 + 4);
    if (v5)
    {
      std::string::size_type v6 = (uint64_t **)*((void *)this + 3);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = (char *)v6[1];
      int v8 = *((_DWORD *)a2 + 6);
      if (v7)
      {
        do
        {
          while (1)
          {
            uint64_t v11 = v7;
            int v9 = *((_DWORD *)v7 + 8);
            if (v8 < v9) {
              break;
            }
            if (v9 >= v8) {
              goto LABEL_15;
            }
            uint64_t v7 = (char *)*((void *)v11 + 1);
            if (!v7)
            {
              size_t v10 = (uint64_t **)(v11 + 8);
              goto LABEL_12;
            }
          }
          uint64_t v7 = *(char **)v11;
        }
        while (*(void *)v11);
        size_t v10 = (uint64_t **)v11;
      }
      else
      {
        size_t v10 = v6 + 1;
        uint64_t v11 = (char *)(v6 + 1);
      }
LABEL_12:
      uint64_t v12 = v11;
      uint64_t v11 = (char *)operator new(0x40uLL);
      *((_DWORD *)v11 + 8) = v8;
      *((void *)v11 + 6) = 0;
      *((void *)v11 + 7) = 0;
      *((void *)v11 + 5) = 0;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v12;
      *size_t v10 = (uint64_t *)v11;
      uint64_t v13 = (uint64_t *)**v6;
      int v14 = (uint64_t *)v11;
      if (v13)
      {
        *std::string::size_type v6 = v13;
        int v14 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v6[1], v14);
      v6[2] = (uint64_t *)((char *)v6[2] + 1);
LABEL_15:
      std::string::operator=((std::string *)(v11 + 40), v5);
    }
  }
  return a3;
}

uint64_t re2::CharClassBuilder::CharClassBuilder(uint64_t this)
{
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

{
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

uint64_t re2::CharClassBuilder::AddRange(re2::CharClassBuilder *this, int a2, uint64_t a3)
{
  if ((int)a3 < a2) {
    return 0;
  }
  uint64_t v4 = a3;
  int v5 = a2;
  if (a2 <= 122 && (int)a3 >= 65)
  {
    if (a2 <= 65) {
      unsigned int v7 = 65;
    }
    else {
      unsigned int v7 = a2;
    }
    if (a3 >= 0x5A) {
      unsigned int v8 = 90;
    }
    else {
      unsigned int v8 = a3;
    }
    BOOL v9 = v8 >= v7;
    char v10 = v8 - v7;
    if (v9) {
      *(_DWORD *)this |= ~(-1 << (v10 + 1)) << (v7 - 65);
    }
    if (a2 <= 97) {
      unsigned int v11 = 97;
    }
    else {
      unsigned int v11 = a2;
    }
    if (a3 >= 0x7A) {
      unsigned int v12 = 122;
    }
    else {
      unsigned int v12 = a3;
    }
    BOOL v9 = v12 >= v11;
    char v13 = v12 - v11;
    if (v9) {
      *((_DWORD *)this + 1) |= ~(-1 << (v13 + 1)) << (v11 - 97);
    }
  }
  size_t v15 = (uint64_t **)((char *)this + 24);
  int v14 = (uint64_t *)*((void *)this + 3);
  if (!v14) {
    goto LABEL_72;
  }
  int64_t v16 = (uint64_t **)((char *)this + 24);
  size_t v17 = (char *)*((void *)this + 3);
  do
  {
    int v18 = *((_DWORD *)v17 + 8);
    BOOL v19 = v18 < a2;
    if (v18 >= a2) {
      BOOL v20 = (char **)v17;
    }
    else {
      BOOL v20 = (char **)(v17 + 8);
    }
    if (!v19) {
      int64_t v16 = (uint64_t **)v17;
    }
    size_t v17 = *v20;
  }
  while (*v20);
  if (v16 != v15 && *((_DWORD *)v16 + 7) <= a2 && *((_DWORD *)v16 + 8) >= (int)a3) {
    return 0;
  }
  int v21 = a2 - 1;
  if (a2 >= 1)
  {
    uint64_t v22 = (uint64_t **)((char *)this + 24);
    uint64_t v23 = (char *)*((void *)this + 3);
    do
    {
      int v24 = *((_DWORD *)v23 + 8);
      BOOL v25 = v24 < v21;
      if (v24 >= v21) {
        size_t v26 = (char **)v23;
      }
      else {
        size_t v26 = (char **)(v23 + 8);
      }
      if (!v25) {
        uint64_t v22 = (uint64_t **)v23;
      }
      uint64_t v23 = *v26;
    }
    while (*v26);
    if (v22 != v15)
    {
      int v27 = *((_DWORD *)v22 + 7);
      if (v27 < a2)
      {
        int v28 = *((_DWORD *)v22 + 8);
        if (v28 <= (int)a3) {
          uint64_t v4 = a3;
        }
        else {
          uint64_t v4 = v28;
        }
        *((_DWORD *)this + 2) += v27 + ~v28;
        int v29 = v22[1];
        if (v29)
        {
          do
          {
            BOOL v30 = v29;
            int v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          int v31 = v22;
          do
          {
            BOOL v30 = v31[2];
            BOOL v32 = *v30 == (void)v31;
            int v31 = (uint64_t **)v30;
          }
          while (!v32);
        }
        if (*((uint64_t ***)this + 2) == v22) {
          *((void *)this + 2) = v30;
        }
        --*((void *)this + 4);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v22);
        operator delete(v22);
        int v14 = (uint64_t *)*((void *)this + 3);
        int v5 = v27;
      }
    }
  }
  if ((int)v4 < 1114111)
  {
    if (v14)
    {
      int v33 = (uint64_t **)((char *)this + 24);
      size_t v34 = v14;
      do
      {
        int v35 = *((_DWORD *)v34 + 8);
        BOOL v36 = v35 <= (int)v4;
        if (v35 <= (int)v4) {
          int v37 = (uint64_t **)(v34 + 1);
        }
        else {
          int v37 = (uint64_t **)v34;
        }
        if (!v36) {
          int v33 = (uint64_t **)v34;
        }
        size_t v34 = *v37;
      }
      while (*v37);
      if (v33 != v15)
      {
        int v38 = *((_DWORD *)v33 + 7);
        if ((int)v4 + 1 >= v38)
        {
          uint64_t v4 = *((unsigned int *)v33 + 8);
          *((_DWORD *)this + 2) += v38 + ~v4;
          uint64_t v39 = v33[1];
          if (v39)
          {
            do
            {
              size_t v40 = v39;
              uint64_t v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
          else
          {
            int v43 = v33;
            do
            {
              size_t v40 = v43[2];
              BOOL v32 = *v40 == (void)v43;
              int v43 = (uint64_t **)v40;
            }
            while (!v32);
          }
          if (*((uint64_t ***)this + 2) == v33) {
            *((void *)this + 2) = v40;
          }
          --*((void *)this + 4);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v33);
          operator delete(v33);
          int v14 = (uint64_t *)*((void *)this + 3);
        }
      }
      goto LABEL_79;
    }
LABEL_72:
    int v41 = (_DWORD *)((char *)this + 8);
    BOOL v42 = (void *)((char *)this + 32);
    goto LABEL_80;
  }
LABEL_79:
  int v41 = (_DWORD *)((char *)this + 8);
  BOOL v42 = (void *)((char *)this + 32);
  if (v14)
  {
    while (1)
    {
      uint64_t v49 = (uint64_t **)((char *)this + 24);
      uint64_t v50 = v14;
      do
      {
        int v51 = *((_DWORD *)v50 + 8);
        BOOL v52 = v51 < v5;
        if (v51 >= v5) {
          unint64_t v53 = (uint64_t **)v50;
        }
        else {
          unint64_t v53 = (uint64_t **)(v50 + 1);
        }
        if (!v52) {
          uint64_t v49 = (uint64_t **)v50;
        }
        uint64_t v50 = *v53;
      }
      while (*v53);
      if (v49 == v15) {
        break;
      }
      int v54 = *((_DWORD *)v49 + 7);
      if ((int)v4 < v54) {
        break;
      }
      *v41 += v54 + ~*((_DWORD *)v49 + 8);
      unint64_t v55 = v49[1];
      unint64_t v56 = v49;
      if (v55)
      {
        do
        {
          int64_t v57 = v55;
          unint64_t v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          int64_t v57 = v56[2];
          BOOL v32 = *v57 == (void)v56;
          unint64_t v56 = (uint64_t **)v57;
        }
        while (!v32);
      }
      if (*((uint64_t ***)this + 2) == v49) {
        *((void *)this + 2) = v57;
      }
      --*v42;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v49);
      operator delete(v49);
      int v14 = *v15;
      if (!*v15) {
        goto LABEL_80;
      }
    }
    *v41 += v4 - v5 + 1;
    do
    {
      while (1)
      {
        unint64_t v45 = v14;
        if ((int)v4 < *((_DWORD *)v14 + 7)) {
          break;
        }
        if (*((_DWORD *)v14 + 8) >= v5) {
          return 1;
        }
        int v14 = (uint64_t *)v14[1];
        if (!v14)
        {
          BOOL v44 = (uint64_t **)(v45 + 1);
          goto LABEL_81;
        }
      }
      int v14 = (uint64_t *)*v14;
    }
    while (*v45);
    BOOL v44 = (uint64_t **)v45;
    goto LABEL_81;
  }
LABEL_80:
  *v41 += v4 - v5 + 1;
  BOOL v44 = (uint64_t **)((char *)this + 24);
  unint64_t v45 = (uint64_t *)((char *)this + 24);
LABEL_81:
  uint64_t v46 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v46 + 28) = v5 | (unint64_t)(v4 << 32);
  *uint64_t v46 = 0;
  v46[1] = 0;
  v46[2] = (uint64_t)v45;
  *BOOL v44 = v46;
  uint64_t v47 = **((void **)this + 2);
  if (v47)
  {
    *((void *)this + 2) = v47;
    long long v48 = *v44;
  }
  else
  {
    long long v48 = v46;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v15, v48);
  ++*v42;
  return 1;
}

re2::CharClassBuilder *re2::CharClassBuilder::AddCharClass(re2::CharClassBuilder *this, re2::CharClassBuilder *a2)
{
  uint64_t v2 = (char *)*((void *)a2 + 2);
  uint64_t v3 = (char *)a2 + 24;
  if (v2 != (char *)a2 + 24)
  {
    uint64_t v4 = this;
    do
    {
      this = (re2::CharClassBuilder *)re2::CharClassBuilder::AddRange(v4, *((_DWORD *)v2 + 7), *((unsigned int *)v2 + 8));
      int v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          std::string::size_type v6 = v5;
          int v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          std::string::size_type v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

BOOL re2::CharClassBuilder::Contains(re2::CharClassBuilder *this, int a2)
{
  uint64_t v4 = (char *)*((void *)this + 3);
  uint64_t v2 = (char *)this + 24;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  int v5 = v2;
  do
  {
    int v6 = *((_DWORD *)v3 + 8);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      unsigned int v8 = (char **)v3;
    }
    else {
      unsigned int v8 = (char **)(v3 + 8);
    }
    if (!v7) {
      int v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 7) > a2) {
LABEL_11:
  }
    int v5 = v2;
  return v5 != v2;
}

BOOL re2::CharClassBuilder::FoldsASCII(re2::CharClassBuilder *this)
{
  return ((*((_DWORD *)this + 1) ^ *(_DWORD *)this) & 0x3FFFFFF) == 0;
}

void re2::CharClassBuilder::Copy(re2::CharClassBuilder *this)
{
}

uint64_t re2::CharClassBuilder::RemoveAbove(uint64_t this, uint64_t a2)
{
  if ((int)a2 <= 1114110)
  {
    uint64_t v3 = this;
    if ((int)a2 <= 121)
    {
      if ((int)a2 >= 97)
      {
        *(_DWORD *)(this + 4) &= 0x3FFFFFFu >> (122 - a2);
      }
      else
      {
        *(_DWORD *)(this + 4) = 0;
        if ((int)a2 <= 89)
        {
          if ((int)a2 > 64) {
            *(_DWORD *)this &= 0x3FFFFFFu >> (90 - a2);
          }
          else {
            *(_DWORD *)this = 0;
          }
        }
      }
    }
    uint64_t v4 = this + 24;
    this = *(void *)(this + 24);
    if (this)
    {
      int v5 = a2 + 1;
      do
      {
        uint64_t v10 = v3 + 24;
        uint64_t v11 = this;
        do
        {
          int v12 = *(_DWORD *)(v11 + 32);
          BOOL v13 = v12 <= (int)a2;
          if (v12 <= (int)a2) {
            int v14 = (uint64_t *)(v11 + 8);
          }
          else {
            int v14 = (uint64_t *)v11;
          }
          if (!v13) {
            uint64_t v10 = v11;
          }
          uint64_t v11 = *v14;
        }
        while (*v14);
        if (v10 == v4 || *(int *)(v10 + 28) > 1114111) {
          break;
        }
        size_t v15 = *(void **)(v10 + 8);
        int64_t v16 = (void *)v10;
        if (v15)
        {
          do
          {
            size_t v17 = v15;
            size_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            size_t v17 = (void *)v16[2];
            BOOL v18 = *v17 == (void)v16;
            int64_t v16 = v17;
          }
          while (!v18);
        }
        uint64_t v19 = *(void *)(v10 + 28);
        if (*(void *)(v3 + 16) == v10) {
          *(void *)(v3 + 16) = v17;
        }
        --*(void *)(v3 + 32);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this, (uint64_t *)v10);
        operator delete((void *)v10);
        int v9 = ~HIDWORD(v19) + v19 + *(_DWORD *)(v3 + 8);
        *(_DWORD *)(v3 + 8) = v9;
        this = *(void *)(v3 + 24);
        if ((int)v19 <= (int)a2)
        {
          BOOL v20 = (uint64_t **)(v3 + 24);
          int v21 = (uint64_t **)(v3 + 24);
          if (this)
          {
            uint64_t v22 = *(uint64_t ***)(v3 + 24);
            while (1)
            {
              while (1)
              {
                int v21 = v22;
                if (*((_DWORD *)v22 + 7) <= (int)a2) {
                  break;
                }
                uint64_t v22 = (uint64_t **)*v22;
                BOOL v20 = v21;
                if (!*v21) {
                  goto LABEL_11;
                }
              }
              if (*((_DWORD *)v22 + 8) >= (int)v19) {
                break;
              }
              uint64_t v22 = (uint64_t **)v22[1];
              if (!v22)
              {
                BOOL v20 = v21 + 1;
                goto LABEL_11;
              }
            }
          }
          else
          {
LABEL_11:
            int v6 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v6 + 28) = v19 | (unint64_t)(a2 << 32);
            *int v6 = 0;
            v6[1] = 0;
            v6[2] = (uint64_t)v21;
            *BOOL v20 = v6;
            uint64_t v7 = **(void **)(v3 + 16);
            if (v7)
            {
              *(void *)(v3 + 16) = v7;
              unsigned int v8 = *v20;
            }
            else
            {
              unsigned int v8 = v6;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 24), v8);
            this = *(void *)(v3 + 24);
            ++*(void *)(v3 + 32);
            int v9 = *(_DWORD *)(v3 + 8);
          }
          *(_DWORD *)(v3 + 8) = v5 - v19 + v9;
        }
      }
      while (this);
    }
  }
  return this;
}

void re2::CharClassBuilder::Negate(int8x8_t *this)
{
  uint64_t v1 = this;
  int8x8_t v2 = this[4];
  BOOL v3 = __CFADD__(*(void *)&v2, 1);
  unint64_t v4 = *(void *)&v2 + 1;
  if (v3)
  {
    int v5 = (uint64_t **)this[2];
    int v6 = (uint64_t **)&this[3];
    if (v5 != (uint64_t **)&this[3])
    {
      uint64_t v7 = 0;
      unsigned int v8 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = (uint64_t *)operator new(8uLL);
LABEL_57:
    *uint64_t v7 = 0x10FFFF00000000;
    size_t v15 = v7 + 1;
    goto LABEL_80;
  }
  if (v4 >> 61) {
    std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v4;
  uint64_t v10 = (uint64_t *)operator new(8 * v4);
  uint64_t v7 = v10;
  int v5 = (uint64_t **)v1[2];
  int v6 = (uint64_t **)&v1[3];
  if (v5 == (uint64_t **)&v1[3])
  {
    int v6 = (uint64_t **)v1[2];
    goto LABEL_57;
  }
  unsigned int v8 = &v10[v9];
LABEL_8:
  int v54 = v1;
  if (*((_DWORD *)v5 + 7))
  {
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)v5 + 8) + 1;
    int v12 = v5[1];
    if (v12)
    {
      do
      {
        int v5 = (uint64_t **)v12;
        int v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        BOOL v13 = (uint64_t *)v5;
        int v5 = (uint64_t **)v5[2];
      }
      while (*v5 != v13);
    }
  }
  int v14 = v7;
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v16 = (*((_DWORD *)v5 + 7) - 1);
      if (v14 >= v8) {
        break;
      }
      *v14++ = v11 | (unint64_t)(v16 << 32);
LABEL_39:
      int v26 = *((_DWORD *)v5 + 8);
      int v27 = v5[1];
      if (v27)
      {
        do
        {
          int v28 = (uint64_t **)v27;
          int v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          int v28 = (uint64_t **)v5[2];
          BOOL v29 = *v28 == (uint64_t *)v5;
          int v5 = v28;
        }
        while (!v29);
      }
      unsigned int v11 = v26 + 1;
      int v5 = v28;
      if (v28 == v6) {
        goto LABEL_15;
      }
    }
    uint64_t v17 = v14 - v7;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v8 - (char *)v7) >> 2 > v18) {
      unint64_t v18 = ((char *)v8 - (char *)v7) >> 2;
    }
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v20 = operator new(8 * v19);
    }
    else
    {
      BOOL v20 = 0;
    }
    int v21 = (uint64_t *)&v20[8 * v17];
    *int v21 = v11 | (unint64_t)(v16 << 32);
    uint64_t v22 = v21 + 1;
    if (v14 != v7)
    {
      unint64_t v23 = (char *)(v14 - 1) - (char *)v7;
      if (v23 >= 0x168)
      {
        if (&v20[(char *)v14 - (char *)v7 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[(char *)v14 - (char *)v7 - 8])
        {
          int v24 = v14;
        }
        else if ((uint64_t *)((char *)v14 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1)
        {
          int v24 = v14;
        }
        else if ((unint64_t)((char *)v7 - v20) >= 0x20)
        {
          uint64_t v30 = (v23 >> 3) + 1;
          int v24 = &v14[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          int v31 = &v20[8 * v17 - 16];
          BOOL v32 = v14 - 2;
          uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *int v31 = v34;
            v31 -= 2;
            v32 -= 4;
            v33 -= 4;
          }
          while (v33);
          v21 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_36;
          }
        }
        else
        {
          int v24 = v14;
        }
      }
      else
      {
        int v24 = v14;
      }
      do
      {
        uint64_t v25 = *--v24;
        *--int v21 = v25;
      }
      while (v24 != v7);
    }
LABEL_36:
    unsigned int v8 = (uint64_t *)&v20[8 * v19];
    if (v7) {
      operator delete(v7);
    }
    uint64_t v7 = v21;
    int v14 = v22;
    goto LABEL_39;
  }
LABEL_15:
  if ((int)v11 >= 1114112)
  {
LABEL_18:
    size_t v15 = v14;
    uint64_t v1 = v54;
    goto LABEL_80;
  }
  if (v14 < v8)
  {
    *v14++ = v11 | 0x10FFFF00000000;
    goto LABEL_18;
  }
  uint64_t v35 = v14 - v7;
  unint64_t v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 61) {
    std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
  }
  if (((char *)v8 - (char *)v7) >> 2 > v36) {
    unint64_t v36 = ((char *)v8 - (char *)v7) >> 2;
  }
  if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v36)
  {
    if (v36 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v37 = operator new(8 * v36);
  }
  else
  {
    int v37 = 0;
  }
  int v38 = (uint64_t *)&v37[8 * v35];
  *int v38 = v11 | 0x10FFFF00000000;
  size_t v15 = v38 + 1;
  if (v14 == v7)
  {
    uint64_t v1 = v54;
  }
  else
  {
    unint64_t v39 = (char *)v14 - (char *)v7 - 8;
    uint64_t v1 = v54;
    if (v39 >= 0x58)
    {
      if ((unint64_t)((char *)v7 - v37) >= 0x20)
      {
        uint64_t v41 = (v39 >> 3) + 1;
        size_t v40 = &v14[-(v41 & 0x3FFFFFFFFFFFFFFCLL)];
        BOOL v42 = &v37[8 * v35 - 16];
        int v43 = v14 - 2;
        uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *BOOL v42 = v45;
          v42 -= 2;
          v43 -= 4;
          v44 -= 4;
        }
        while (v44);
        v38 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
        if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_77;
        }
      }
      else
      {
        size_t v40 = v14;
      }
    }
    else
    {
      size_t v40 = v14;
    }
    do
    {
      uint64_t v46 = *--v40;
      *--int v38 = v46;
    }
    while (v40 != v7);
  }
LABEL_77:
  if (v7) {
    operator delete(v7);
  }
  uint64_t v7 = v38;
LABEL_80:
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*v6);
  void v1[4] = 0;
  v1[2] = (int8x8_t)v6;
  *int v6 = 0;
  if (v15 != v7)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    while (1)
    {
      uint64_t v49 = &v7[v48];
      uint64_t v50 = v6;
      int v51 = v6;
      if (v47)
      {
        while (1)
        {
          while (1)
          {
            int v51 = (uint64_t **)v47;
            if (*((_DWORD *)v49 + 1) >= *((_DWORD *)v47 + 7)) {
              break;
            }
            uint64_t v47 = (uint64_t *)*v47;
            uint64_t v50 = v51;
            if (!*v51) {
              goto LABEL_89;
            }
          }
          if (*((_DWORD *)v47 + 8) >= *(_DWORD *)v49) {
            break;
          }
          uint64_t v47 = (uint64_t *)v47[1];
          if (!v47)
          {
            uint64_t v50 = v51 + 1;
            goto LABEL_89;
          }
        }
      }
      else
      {
LABEL_89:
        BOOL v52 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v52 + 28) = *v49;
        *BOOL v52 = 0;
        v52[1] = 0;
        v52[2] = (uint64_t)v51;
        uint64_t *v50 = v52;
        int8x8_t v53 = **(int8x8_t **)&v1[2];
        if (v53)
        {
          v1[2] = v53;
          BOOL v52 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v6, v52);
        ++*(void *)&v1[4];
      }
      if (++v48 >= (unint64_t)(v15 - v7)) {
        break;
      }
      uint64_t v47 = *v6;
    }
  }
  *uint64_t v1 = (int8x8_t)(*(void *)&vmvn_s8(*v1) & 0x3FFFFFF03FFFFFFLL);
  v1[1].i32[0] = 1114112 - v1[1].i32[0];
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1CA6D6B5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void re2::CharClass::New(re2::CharClass *this)
{
}

void re2::CharClass::Negate(re2::CharClass *this)
{
}

uint64_t re2::CharClass::Contains(re2::CharClass *this, int a2)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = *((void *)this + 1);
    do
    {
      uint64_t v5 = v2 >> 1;
      if (*(_DWORD *)(v3 + 8 * v5 + 4) < a2)
      {
        unsigned int v4 = v5 + 1;
        v3 += 8 * v4;
        v2 -= v4;
      }
      else
      {
        int v2 = v2 >> 1;
        if (*(_DWORD *)(v3 + 8 * v5) <= a2) {
          return 1;
        }
      }
    }
    while (v2 > 0);
  }
  return 0;
}

void re2::CharClassBuilder::GetCharClass(re2::CharClassBuilder *this)
{
}

uint64_t re2::RE2::FullMatchN(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  return re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 2, 0, (void **)a3, (int)a4);
}

uint64_t re2::RE2::DoMatch(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, void **a5, int a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 30))
    {
      LOBYTE(v24[0]) = 0;
      uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24 + 8);
      unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid RE2: ", 13);
      uint64_t v9 = *(void *)(a1 + 120);
      int v10 = *(char *)(v9 + 23);
      if (v10 >= 0) {
        uint64_t v11 = *(void *)(a1 + 120);
      }
      else {
        uint64_t v11 = *(void *)v9;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v9 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v11, v12);
      LogMessage::~LogMessage((void **)v24);
    }
    return 0;
  }
  memset(&v24[15], 0, 32);
  if (a6) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = a4 == 0;
  }
  if (v17) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = a6 + 1;
  }
  memset(v24, 0, 240);
  if (v18 >= 0x12) {
    operator new[]();
  }
  if ((re2::RE2::Match(a1, (long long *)a2, 0, *(_DWORD *)(a2 + 8), a3, (re2::StringPiece *)v24, v18) & 1) == 0) {
    return 0;
  }
  if (a4) {
    *a4 = LODWORD(v24[0]) + DWORD2(v24[0]) - *(_DWORD *)a2;
  }
  if (a5 && a6)
  {
    if (*(void *)(a1 + 88))
    {
      int v19 = *(_DWORD *)(a1 + 160);
      if (v19 == -1) {
        re2::Regexp::NumCaptures(*(re2::Regexp **)(a1 + 88));
      }
      if (v19 < a6) {
        return 0;
      }
    }
    else if (a6 > -1)
    {
      return 0;
    }
    uint64_t v20 = a6 & ~(a6 >> 31);
    int v21 = (unsigned int *)&v24[1] + 2;
    while (v20)
    {
      char v22 = ((uint64_t (*)(void, void, void))(*a5)[1])(*((void *)v21 - 1), *v21, **a5);
      v21 += 4;
      ++a5;
      --v20;
      if ((v22 & 1) == 0) {
        return 0;
      }
    }
  }
  return 1;
}

void sub_1CA6D883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::RE2::Match(uint64_t a1, long long *a2, unsigned int a3, int a4, int a5, re2::StringPiece *a6, int a7)
{
  if (*(_DWORD *)(a1 + 128) || (size_t v15 = *(re2::Regexp **)(a1 + 88)) == 0)
  {
    if (!*(unsigned char *)(a1 + 30)) {
      return 0;
    }
    LOBYTE(v134) = 0;
    unsigned int v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid RE2: ", 13);
    uint64_t v10 = *(void *)(a1 + 120);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(void *)(a1 + 120);
    }
    else {
      uint64_t v12 = *(void *)v10;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    goto LABEL_10;
  }
  if ((a3 & 0x80000000) != 0 || (int)a3 > a4 || (int v17 = *((_DWORD *)a2 + 2), v17 < a4))
  {
    if (!*(unsigned char *)(a1 + 30)) {
      return 0;
    }
    LOBYTE(v134) = 0;
    unsigned int v18 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"RE2: invalid startpos, endpos pair.", 35);
    goto LABEL_10;
  }
  int v19 = a7;
  int v21 = a5;
  long long v133 = *a2;
  char v22 = (unsigned __int8 *)(v133 + a3);
  uint64_t v132 = 0;
  *(void *)&long long v133 = v22;
  int v23 = a4 - a3 - v17 + DWORD2(v133);
  DWORD2(v133) = v23;
  if (a7) {
    int v24 = &v131;
  }
  else {
    int v24 = 0;
  }
  uint64_t v131 = 0;
  int v25 = *(_DWORD *)(a1 + 160);
  if (v25 == -1) {
    re2::Regexp::NumCaptures(v15);
  }
  if (v25 < a7) {
    a7 = v25 + 1;
  }
  uint64_t v26 = *(void *)(a1 + 96);
  if (a3 && *(unsigned char *)v26) {
    return 0;
  }
  if (*(unsigned char *)v26 && *(unsigned char *)(v26 + 1))
  {
    int v21 = 2;
  }
  else
  {
    if (*(unsigned char *)v26) {
      BOOL v27 = a5 == 2;
    }
    else {
      BOOL v27 = 1;
    }
    if (!v27) {
      int v21 = 1;
    }
  }
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v28 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 71);
  }
  if (v28)
  {
    if (a3) {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 71) & 0x80) != 0) {
      uint64_t v29 = *(void *)(a1 + 56);
    }
    else {
      LODWORD(v29) = *(unsigned __int8 *)(a1 + 71);
    }
    BOOL v47 = __OFSUB__(v23, v29);
    int v48 = v23 - v29;
    if (v48 < 0 != v47) {
      return 0;
    }
    uint64_t v49 = (unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)(a1 + 72))
    {
      if ((*(unsigned char *)(a1 + 71) & 0x80) != 0) {
        uint64_t v49 = *(unsigned __int8 **)v49;
      }
      if ((int)v29 >= 1)
      {
        uint64_t v50 = &v49[(int)v29];
        int v51 = v22;
        do
        {
          int v52 = *v51;
          if ((v52 - 65) < 0x1A) {
            LOBYTE(v52) = v52 + 32;
          }
          if (*v49 != v52) {
            return 0;
          }
          ++v49;
          ++v51;
        }
        while (v49 < v50);
      }
    }
    else
    {
      int v119 = a7;
      if ((*(unsigned char *)(a1 + 71) & 0x80) != 0) {
        uint64_t v49 = *(unsigned __int8 **)v49;
      }
      if (memcmp(v49, v22, (int)v29)) {
        return 0;
      }
      a7 = v119;
    }
    *(void *)&long long v133 = &v22[(int)v29];
    DWORD2(v133) = v48;
    uint64_t v120 = a1 + 24;
    int v36 = 0;
    if (v21 != 2) {
      int v21 = *(unsigned __int8 *)(a1 + 29);
    }
    int v58 = *(unsigned __int8 *)(a1 + 112);
    int v59 = *(_DWORD *)(v26 + 12);
    BOOL v34 = v59 < 501;
    char v130 = 0;
    int v122 = 0x40000 / v59;
    if (!v58)
    {
      int v35 = v29;
      if (v59 < 501)
      {
LABEL_111:
        if (*((_DWORD *)a2 + 2) <= v122 && a7 >= 2)
        {
          if (re2::FLAGS_trace_re2)
          {
            LOBYTE(v134) = 0;
            uint64_t v68 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Match ", 6);
            re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
            if ((v129 & 0x80u) == 0) {
              unint64_t v69 = &v127;
            }
            else {
              unint64_t v69 = v127;
            }
            if ((v129 & 0x80u) == 0) {
              uint64_t v70 = v129;
            }
            else {
              uint64_t v70 = v128;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v69, v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
            re2::CEscape((re2 *)&v133, v71);
          }
          LOBYTE(v34) = 1;
          int v32 = v36;
          LODWORD(v29) = v35;
LABEL_168:
          int v57 = 1;
          goto LABEL_169;
        }
      }
LABEL_116:
      LODWORD(v29) = v35;
      BOOL v121 = v34;
      int v62 = a7;
      if (!re2::Prog::SearchDFA((unsigned __int8 *)v26, (uint64_t *)&v133, (uint64_t *)a2, 1, v21, (uint64_t)&v131, &v130))
      {
        if (!v130)
        {
          if (re2::FLAGS_trace_re2)
          {
            LOBYTE(v134) = 0;
            char v76 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Match ", 6);
            re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
            if ((v129 & 0x80u) == 0) {
              unsigned int v77 = &v127;
            }
            else {
              unsigned int v77 = v127;
            }
            if ((v129 & 0x80u) == 0) {
              uint64_t v78 = v129;
            }
            else {
              uint64_t v78 = v128;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v77, v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
            re2::CEscape((re2 *)&v133, v79);
          }
          return 0;
        }
        if (re2::FLAGS_trace_re2)
        {
          LOBYTE(v134) = 0;
          long long v64 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Match ", 6);
          re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
          if ((v129 & 0x80u) == 0) {
            uint64_t v65 = &v127;
          }
          else {
            uint64_t v65 = v127;
          }
          if ((v129 & 0x80u) == 0) {
            uint64_t v66 = v129;
          }
          else {
            uint64_t v66 = v128;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v65, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
          re2::CEscape((re2 *)&v133, v67);
        }
        int v57 = 1;
        int v32 = v36;
        a7 = v62;
        LOBYTE(v34) = v121;
        goto LABEL_169;
      }
      int v32 = v36;
      a7 = v62;
      int v46 = v29;
LABEL_118:
      LOBYTE(v34) = v121;
      if (a7 <= 1)
      {
        if (a7 == 1)
        {
          *(void *)a6 = v131;
          *((_DWORD *)a6 + 2) = v132;
        }
LABEL_209:
        if (v19 >= 1 && v46 >= 1)
        {
          int v102 = *((_DWORD *)a6 + 2) + v46;
          *(void *)a6 -= v46;
          *((_DWORD *)a6 + 2) = v102;
        }
        if (a7 >= v19) {
          return 1;
        }
        unint64_t v103 = a7;
        unint64_t v104 = v19 - (uint64_t)a7;
        if (v104 >= 2)
        {
          unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v106 = (uint64_t)a6 + 16 * a7 + 16;
          unint64_t v107 = v104 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(void *)(v106 - 16) = 0;
            *(void *)uint64_t v106 = 0;
            *(_DWORD *)(v106 - 8) = 0;
            *(_DWORD *)(v106 + 8) = 0;
            v106 += 32;
            v107 -= 2;
          }
          while (v107);
          if (v104 == v105) {
            return 1;
          }
          unint64_t v103 = v105 + a7;
        }
        unint64_t v108 = v19 - v103;
        v109 = (_DWORD *)((char *)a6 + 16 * v103 + 8);
        do
        {
          *((void *)v109 - 1) = 0;
          _DWORD *v109 = 0;
          v109 += 4;
          --v108;
        }
        while (v108);
        return 1;
      }
      char v124 = 0;
      HIDWORD(v126) = 0;
      int v21 = 2;
      int v57 = 1;
      uint64_t v63 = &v131;
LABEL_170:
      v125 = (unsigned __int8 *)*v63;
      LODWORD(v126) = *((_DWORD *)v63 + 2);
      if (v32 && v57)
      {
        if (re2::FLAGS_trace_re2)
        {
          LOBYTE(v134) = 0;
          unint64_t v84 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Match ", 6);
          re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
          if ((v129 & 0x80u) == 0) {
            uint64_t v85 = &v127;
          }
          else {
            uint64_t v85 = v127;
          }
          if ((v129 & 0x80u) == 0) {
            uint64_t v86 = v129;
          }
          else {
            uint64_t v86 = v128;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v85, v86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
          re2::CEscape((re2 *)&v133, v87);
        }
        uint64_t v88 = *(void *)(a1 + 96);
        int v89 = a7;
        if ((re2::Prog::SearchOnePass(v88, &v125, a2, 1, v21, (uint64_t)a6, a7) & 1) == 0)
        {
          if ((v124 & 1) != 0 || !*(unsigned char *)(v120 + 6)) {
            return 0;
          }
          LOBYTE(v134) = 0;
          long long v90 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"SearchOnePass inconsistency", 27);
          goto LABEL_10;
        }
        goto LABEL_208;
      }
      if (v34)
      {
        int v91 = re2::FLAGS_trace_re2;
        if ((int)v126 <= v122)
        {
          if (re2::FLAGS_trace_re2)
          {
            LOBYTE(v134) = 0;
            uint64_t v92 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Match ", 6);
            re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
            if ((v129 & 0x80u) == 0) {
              unint64_t v93 = &v127;
            }
            else {
              unint64_t v93 = v127;
            }
            if ((v129 & 0x80u) == 0) {
              uint64_t v94 = v129;
            }
            else {
              uint64_t v94 = v128;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v93, v94);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
            re2::CEscape((re2 *)&v133, v95);
          }
          uint64_t v96 = *(void *)(a1 + 96);
          int v89 = a7;
          if (re2::Prog::SearchBitState(v96, (int *)&v125, (const re2::StringPiece *)a2, v57, v21, a6, a7))
          {
LABEL_208:
            a7 = v89;
            goto LABEL_209;
          }
          if ((v124 & 1) != 0 || !*(unsigned char *)(v120 + 6)) {
            return 0;
          }
          LOBYTE(v134) = 0;
          unint64_t v97 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"SearchBitState inconsistency", 28);
LABEL_10:
          LogMessage::~LogMessage(&v134);
          return 0;
        }
      }
      else
      {
        int v91 = re2::FLAGS_trace_re2;
      }
      if (v91)
      {
        LOBYTE(v134) = 0;
        uint64_t v98 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v129 & 0x80u) == 0) {
          unint64_t v99 = &v127;
        }
        else {
          unint64_t v99 = v127;
        }
        if ((v129 & 0x80u) == 0) {
          uint64_t v100 = v129;
        }
        else {
          uint64_t v100 = v128;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v99, v100);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
        re2::CEscape((re2 *)&v133, v101);
      }
      re2::Prog::SearchNFA(*(re2::Prog **)(a1 + 96));
    }
    int v35 = v29;
    if (a7 >= 6)
    {
LABEL_110:
      if (v34) {
        goto LABEL_111;
      }
      goto LABEL_116;
    }
LABEL_106:
    int v60 = *((_DWORD *)a2 + 2);
    if (v60 <= 4096 && (a7 > 1 || v60 <= 8))
    {
      if (re2::FLAGS_trace_re2)
      {
        LOBYTE(v134) = 0;
        unsigned int v72 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v129 & 0x80u) == 0) {
          uint64_t v73 = &v127;
        }
        else {
          uint64_t v73 = v127;
        }
        if ((v129 & 0x80u) == 0) {
          uint64_t v74 = v129;
        }
        else {
          uint64_t v74 = v128;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v73, v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
        re2::CEscape((re2 *)&v133, v75);
      }
      int v32 = 1;
      goto LABEL_168;
    }
    int v36 = 1;
    int v35 = v29;
    goto LABEL_110;
  }
  int v30 = *(unsigned __int8 *)(a1 + 29);
  if (*(unsigned char *)(a1 + 112)) {
    BOOL v31 = a7 < 6;
  }
  else {
    BOOL v31 = 0;
  }
  int v32 = v31;
  int v33 = *(_DWORD *)(v26 + 12);
  BOOL v34 = v33 < 501;
  char v130 = 0;
  int v122 = 0x40000 / v33;
  int v123 = v30;
  uint64_t v120 = a1 + 24;
  if (v21 == 1)
  {
    LODWORD(v29) = 0;
    int v35 = 0;
    int v36 = 0;
    int v21 = v123;
    if (!v32) {
      goto LABEL_110;
    }
    goto LABEL_106;
  }
  if (v21 == 2)
  {
    LODWORD(v29) = 0;
    int v35 = 0;
    int v36 = 0;
    if ((v32 & 1) == 0) {
      goto LABEL_110;
    }
    goto LABEL_106;
  }
  BOOL v121 = v33 < 501;
  int v37 = a7;
  if (!re2::Prog::SearchDFA((unsigned __int8 *)v26, (uint64_t *)&v133, (uint64_t *)a2, 0, v30, (uint64_t)v24, &v130))
  {
    if (!v130)
    {
      if (re2::FLAGS_trace_re2)
      {
        LOBYTE(v134) = 0;
        uint64_t v80 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v129 & 0x80u) == 0) {
          char v81 = &v127;
        }
        else {
          char v81 = v127;
        }
        if ((v129 & 0x80u) == 0) {
          uint64_t v82 = v129;
        }
        else {
          uint64_t v82 = v128;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v81, v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
        re2::CEscape((re2 *)&v133, v83);
      }
      return 0;
    }
    if (re2::FLAGS_trace_re2)
    {
      LOBYTE(v134) = 0;
      int8x8_t v53 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v129 & 0x80u) == 0) {
        int v54 = &v127;
      }
      else {
        int v54 = v127;
      }
      if ((v129 & 0x80u) == 0) {
        uint64_t v55 = v129;
      }
      else {
        uint64_t v55 = v128;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
      re2::CEscape((re2 *)&v133, v56);
    }
    goto LABEL_97;
  }
  if (re2::FLAGS_trace_re2)
  {
    LOBYTE(v134) = 0;
    int v38 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Match ", 6);
    re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
    if ((v129 & 0x80u) == 0) {
      unint64_t v39 = &v127;
    }
    else {
      unint64_t v39 = v127;
    }
    if ((v129 & 0x80u) == 0) {
      uint64_t v40 = v129;
    }
    else {
      uint64_t v40 = v128;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v39, v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
    re2::CEscape((re2 *)&v133, v41);
  }
  if (!v19) {
    return 1;
  }
  uint64_t result = re2::RE2::ReverseProg((re2::RE2 *)a1);
  if (result)
  {
    if (re2::Prog::SearchDFA((unsigned __int8 *)result, &v131, (uint64_t *)a2, 1, 1, (uint64_t)&v131, &v130))
    {
      if (re2::FLAGS_trace_re2)
      {
        LOBYTE(v134) = 0;
        BOOL v42 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v129 & 0x80u) == 0) {
          int v43 = &v127;
        }
        else {
          int v43 = v127;
        }
        if ((v129 & 0x80u) == 0) {
          uint64_t v44 = v129;
        }
        else {
          uint64_t v44 = v128;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v43, v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
        re2::CEscape((re2 *)&v133, v45);
      }
      int v46 = 0;
      a7 = v37;
      goto LABEL_118;
    }
    if (!v130)
    {
      if (re2::FLAGS_trace_re2)
      {
        LOBYTE(v134) = 0;
        v114 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v129 & 0x80u) == 0) {
          v115 = &v127;
        }
        else {
          v115 = v127;
        }
        if ((v129 & 0x80u) == 0) {
          uint64_t v116 = v129;
        }
        else {
          uint64_t v116 = v128;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v115, v116);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
        re2::CEscape((re2 *)&v133, v117);
      }
      if (!*(unsigned char *)(a1 + 30)) {
        return 0;
      }
      LOBYTE(v134) = 0;
      v118 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"DFA inconsistency", 17);
      goto LABEL_10;
    }
    if (re2::FLAGS_trace_re2)
    {
      LOBYTE(v134) = 0;
      v110 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v127, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v129 & 0x80u) == 0) {
        v111 = &v127;
      }
      else {
        v111 = v127;
      }
      if ((v129 & 0x80u) == 0) {
        uint64_t v112 = v129;
      }
      else {
        uint64_t v112 = v128;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v111, v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" [", 2);
      re2::CEscape((re2 *)&v133, v113);
    }
LABEL_97:
    LODWORD(v29) = 0;
    int v57 = 0;
    a7 = v37;
    int v21 = v123;
    LOBYTE(v34) = v121;
LABEL_169:
    uint64_t v126 = 0;
    char v124 = 1;
    uint64_t v63 = (uint64_t *)&v133;
    int v46 = v29;
    goto LABEL_170;
  }
  return result;
}

void sub_1CA6D9B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
}

void re2::trunc(re2 *this, const re2::StringPiece *__src, int a3)
{
  unsigned int v4 = this;
  if (a3 <= 99)
  {
    if (a3 < 0) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v5 = a3;
    if (a3 >= 0x17)
    {
      uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v7 = a3 | 7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (re2 *)operator new(v7 + 1);
      *((void *)v4 + 1) = v5;
      *((void *)v4 + 2) = v8 | 0x8000000000000000;
      *(void *)unsigned int v4 = v9;
      unsigned int v4 = v9;
    }
    else
    {
      *((unsigned char *)this + 23) = a3;
      if (!a3) {
        goto LABEL_12;
      }
    }
    memcpy(v4, __src, v5);
LABEL_12:
    *((unsigned char *)v4 + v5) = 0;
    return;
  }
  v10.__r_.__value_.__l.__size_ = 100;
  v10.__r_.__value_.__r.__words[2] = 0x8000000000000068;
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  memcpy(v10.__r_.__value_.__l.__data_, __src, 0x64uLL);
  *(unsigned char *)(v10.__r_.__value_.__r.__words[0] + 10re2::Compiler::Compile(this, 0) = 0;
  int v6 = std::string::append(&v10, "...");
  *(std::string *)unsigned int v4 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1CA6D9E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re2::RE2::ReverseProg(re2::RE2 *this)
{
  unsigned int v4 = *(pthread_rwlock_t **)this;
  if (pthread_rwlock_wrlock(*(pthread_rwlock_t **)this)) {
    abort();
  }
  uint64_t v2 = *((void *)this + 13);
  if (!v2)
  {
    if (*((void *)this + 15) == re2::empty_string) {
      re2::Compiler::Compile(*((re2::Compiler **)this + 11), (re2::Regexp *)1);
    }
    uint64_t v2 = 0;
  }
  if (pthread_rwlock_unlock(v4)) {
    abort();
  }
  return v2;
}

void sub_1CA6DA034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  LogMessage::~LogMessage(&a15);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)(v15 - 56));
  _Unwind_Resume(a1);
}

void re2::MutexLock::~MutexLock(pthread_rwlock_t **this)
{
  if (pthread_rwlock_unlock(*this)) {
    abort();
  }
}

uint64_t re2::RE2::PartialMatchN(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  return re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 0, 0, (void **)a3, (int)a4);
}

uint64_t re2::RE2::ConsumeN(re2::RE2 *this, re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  int v7 = 0;
  uint64_t result = re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 1, &v7, (void **)a3, (int)a4);
  if (result)
  {
    int v6 = v7;
    *(void *)this += v7;
    *((_DWORD *)this + 2) -= v6;
  }
  return result;
}

uint64_t re2::RE2::FindAndConsumeN(re2::RE2 *this, re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  int v7 = 0;
  uint64_t result = re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 0, &v7, (void **)a3, (int)a4);
  if (result)
  {
    int v6 = v7;
    *(void *)this += v7;
    *((_DWORD *)this + 2) -= v6;
  }
  return result;
}

double re2::RE2::Options::Options(uint64_t a1, int a2)
{
  if (a2 == 1) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  *(_DWORD *)a1 = v2;
  *(unsigned char *)(a1 + 4) = a2 == 2;
  *(unsigned char *)(a1 + 5) = a2 == 2;
  *(unsigned char *)(a1 + 6) = a2 != 3;
  *(void *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)&double result = 0x100000001;
  *(_DWORD *)(a1 + 2re2::Compiler::Compile(this, 0) = 1;
  return result;
}

{
  int v2;
  double result;

  if (a2 == 1) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  *(_DWORD *)a1 = v2;
  *(unsigned char *)(a1 + 4) = a2 == 2;
  *(unsigned char *)(a1 + 5) = a2 == 2;
  *(unsigned char *)(a1 + 6) = a2 != 3;
  *(void *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)&double result = 0x100000001;
  *(_DWORD *)(a1 + 2re2::Compiler::Compile(this, 0) = 1;
  return result;
}

void re2::RE2::RE2(re2::RE2 *this, const char *__s)
{
  *((void *)this + 17) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 3re2::Compiler::Compile(this, 0) = 1;
  *((void *)this + 4) = 0x800000;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)((char *)this + 45) = 0;
  *(void *)((char *)this + 61) = 0;
  *(void *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  std::string v10 = __s;
  if (__s) {
    int v3 = strlen(__s);
  }
  else {
    int v3 = 0;
  }
  int v11 = v3;
  int v4 = 1;
  __int16 v5 = 0;
  char v6 = 1;
  uint64_t v7 = 0x800000;
  int v8 = 0;
  int v9 = 1;
  re2::RE2::Init(this, (const re2::StringPiece *)&v10, (const re2::RE2::Options *)&v4);
}

void sub_1CA6DA318(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void re2::RE2::Init(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3)
{
}

void sub_1CA6DABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  MEMORY[0x1CB79A8C0](v21, 0x1012C40EC159624);
  re2::RegexpStatus::~RegexpStatus((re2::RegexpStatus *)(v22 - 112));
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::Options::ParseFlags(re2::RE2::Options *this)
{
  if (*(_DWORD *)this != 1)
  {
    if (*(_DWORD *)this == 2)
    {
      int v2 = 36;
      goto LABEL_7;
    }
    if (*((unsigned char *)this + 6))
    {
      LOBYTE(v6) = 0;
      int v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Unknown encoding ", 17);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v6);
    }
  }
  int v2 = 4;
LABEL_7:
  if (!*((unsigned char *)this + 4)) {
    v2 |= 0x794u;
  }
  if (*((unsigned char *)this + 16)) {
    v2 |= 2u;
  }
  if (*((unsigned char *)this + 17)) {
    v2 |= 0x800u;
  }
  if (*((unsigned char *)this + 18)) {
    v2 |= 8u;
  }
  if (*((unsigned char *)this + 19)) {
    v2 |= 0x1000u;
  }
  unsigned int v4 = v2 | (*((unsigned char *)this + 20) == 0);
  if (*((unsigned char *)this + 21)) {
    v4 |= 0x80u;
  }
  if (*((unsigned char *)this + 22)) {
    v4 |= 0x100u;
  }
  if (*((unsigned char *)this + 23)) {
    return v4 | 0x10;
  }
  else {
    return v4;
  }
}

void sub_1CA6DADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void re2::RE2::RE2(re2::RE2 *this, const re2::StringPiece *a2)
{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 3re2::Compiler::Compile(this, 0) = 1;
  *((void *)this + 4) = 0x800000;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)((char *)this + 45) = 0;
  *(void *)((char *)this + 61) = 0;
  *(void *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  int v2 = 1;
  __int16 v3 = 0;
  char v4 = 1;
  uint64_t v5 = 0x800000;
  int v6 = 0;
  int v7 = 1;
  re2::RE2::Init(this, a2, (const re2::RE2::Options *)&v2);
}

{
  int v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  int v6;
  int v7;

  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 3re2::Compiler::Compile(this, 0) = 1;
  *((void *)this + 4) = 0x800000;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)((char *)this + 45) = 0;
  *(void *)((char *)this + 61) = 0;
  *(void *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  int v2 = 1;
  __int16 v3 = 0;
  char v4 = 1;
  uint64_t v5 = 0x800000;
  int v6 = 0;
  int v7 = 1;
  re2::RE2::Init(this, a2, (const re2::RE2::Options *)&v2);
}

void sub_1CA6DAE90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void sub_1CA6DAF68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void re2::RE2::RE2(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3)
{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 3re2::Compiler::Compile(this, 0) = 1;
  *((void *)this + 4) = 0x800000;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)((char *)this + 45) = 0;
  *(void *)((char *)this + 61) = 0;
  *(void *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  re2::RE2::Init(this, a2, a3);
}

{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 3re2::Compiler::Compile(this, 0) = 1;
  *((void *)this + 4) = 0x800000;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(void *)((char *)this + 45) = 0;
  *(void *)((char *)this + 61) = 0;
  *(void *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  re2::RE2::Init(this, a2, a3);
}

void sub_1CA6DB018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void sub_1CA6DB0C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void re2::RE2::~RE2(re2::RE2 *this)
{
  int v2 = (re2::Regexp *)*((void *)this + 11);
  if (v2) {
    re2::Regexp::Decref(v2);
  }
  __int16 v3 = (re2::Regexp *)*((void *)this + 10);
  if (v3) {
    re2::Regexp::Decref(v3);
  }
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    if (pthread_rwlock_destroy(*(pthread_rwlock_t **)this)) {
      abort();
    }
    MEMORY[0x1CB79A8C0](v4, 0x1000C40BEF03554);
  }
  uint64_t v5 = (re2::Prog *)*((void *)this + 12);
  if (v5)
  {
    re2::Prog::~Prog(v5);
    MEMORY[0x1CB79A8C0]();
  }
  int v6 = (re2::Prog *)*((void *)this + 13);
  if (v6)
  {
    re2::Prog::~Prog(v6);
    MEMORY[0x1CB79A8C0]();
  }
  uint64_t v7 = *((void *)this + 15);
  if (v7 && v7 != re2::empty_string)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x1CB79A8C0](v7, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 21);
  if (v8 && v8 != re2::empty_named_groups)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v8 + 8));
    MEMORY[0x1CB79A8C0](v8, 0x1020C4062D53EE8);
  }
  uint64_t v9 = *((void *)this + 22);
  if (v9)
  {
    if (v9 != re2::empty_group_names)
    {
      std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(char **)(v9 + 8));
      MEMORY[0x1CB79A8C0](v9, 0x1020C4062D53EE8);
    }
  }
  if ((*((char *)this + 159) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      return;
    }
LABEL_27:
    operator delete(*((void **)this + 6));
    return;
  }
  operator delete(*((void **)this + 17));
  if (*((char *)this + 71) < 0) {
    goto LABEL_27;
  }
}

uint64_t re2::RE2::ProgramSize(re2::RE2 *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (v1) {
    return *(unsigned int *)(v1 + 12);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t re2::RE2::NamedCapturingGroups(pthread_rwlock_t **this)
{
  int v2 = *this;
  if (pthread_rwlock_wrlock(*this)) {
    abort();
  }
  if (*((_DWORD *)this + 32))
  {
    uint64_t v3 = re2::empty_named_groups;
  }
  else
  {
    uint64_t v3 = (uint64_t)this[21];
    if (!v3) {
      operator new();
    }
  }
  if (pthread_rwlock_unlock(v2)) {
    abort();
  }
  return v3;
}

void sub_1CA6DB3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, pthread_rwlock_t *);
  re2::NamedCapturesWalker::~NamedCapturesWalker((re2::NamedCapturesWalker *)va1);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::CapturingGroupNames(pthread_rwlock_t **this)
{
  int v2 = *this;
  if (pthread_rwlock_wrlock(*this)) {
    abort();
  }
  if (*((_DWORD *)this + 32))
  {
    uint64_t v3 = re2::empty_group_names;
  }
  else
  {
    uint64_t v3 = (uint64_t)this[22];
    if (!v3) {
      operator new();
    }
  }
  if (pthread_rwlock_unlock(v2)) {
    abort();
  }
  return v3;
}

void sub_1CA6DB544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, pthread_rwlock_t *);
  re2::CaptureNamesWalker::~CaptureNamesWalker((re2::CaptureNamesWalker *)va1);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::MaxSubmatch(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = *(unsigned char **)a1;
  uint64_t v5 = &v4[v1];
  do
  {
    if (*v4 == 92 && ++v4 < v5 && ((char)*v4 & 0x80000000) == 0)
    {
      LODWORD(v6) = *v4 - 48;
      if ((int)v6 <= (int)result) {
        uint64_t v6 = result;
      }
      else {
        uint64_t v6 = v6;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v4 + 60) & 0x400) != 0) {
        uint64_t result = v6;
      }
    }
    ++v4;
  }
  while (v4 < v5);
  return result;
}

void re2::RE2::QuoteMeta(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 2 * *(_DWORD *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      int v5 = *(char *)(*(void *)a1 + v4);
      if (v5 >= 97)
      {
        if (v5 > 0x7A) {
          goto LABEL_15;
        }
        goto LABEL_16;
      }
      if (v5 >= 65) {
        break;
      }
      if (v5 >= 48)
      {
        if (v5 > 0x39) {
          goto LABEL_15;
        }
        goto LABEL_16;
      }
      if (v5 < 0) {
        goto LABEL_16;
      }
      if (*(unsigned char *)(*(void *)a1 + v4)) {
        goto LABEL_15;
      }
      std::string::append(a2, "\\x00");
LABEL_17:
      if (++v4 >= *(int *)(a1 + 8)) {
        return;
      }
    }
    if (v5 >= 0x5B && v5 != 95)
    {
LABEL_15:
      std::string::push_back(a2, 92);
      LOBYTE(v5) = *(unsigned char *)(*(void *)a1 + v4);
    }
LABEL_16:
    std::string::push_back(a2, v5);
    goto LABEL_17;
  }
}

void sub_1CA6DB6DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re2::RE2::NumberOfCapturingGroups(re2::RE2 *this)
{
  uint64_t v1 = (re2::Regexp *)*((void *)this + 11);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *((unsigned int *)this + 40);
  if (result == -1) {
    re2::Regexp::NumCaptures(v1);
  }
  return result;
}

BOOL re2::RE2::Arg::parse_null(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  return a3 == 0;
}

uint64_t re2::RE2::Arg::parse_string(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  if (a3) {
    MEMORY[0x1CB79A740](a3, this, (int)a2, a4);
  }
  return 1;
}

uint64_t re2::RE2::Arg::parse_stringpiece(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    *(void *)a3 = this;
    *(_DWORD *)(a3 + 8) = a2;
  }
  return 1;
}

BOOL re2::RE2::Arg::parse_char(re2::RE2::Arg *this, const char *a2, unsigned char *a3, void *a4)
{
  if (a2 == 1 && a3) {
    *a3 = *(unsigned char *)this;
  }
  return a2 == 1;
}

BOOL re2::RE2::Arg::parse_uchar(re2::RE2::Arg *this, const char *a2, unsigned char *a3, void *a4)
{
  if (a2 == 1 && a3) {
    *a3 = *(unsigned char *)this;
  }
  return a2 == 1;
}

uint64_t re2::RE2::Arg::parse_long_radix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v4 = (int)a4;
  int v6 = (int)a2;
  char v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1) {
    goto LABEL_20;
  }
  unsigned int v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL)) {
      goto LABEL_7;
    }
LABEL_20:
    int v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x4000) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v9 = (re2::RE2::Arg *)((char *)this + 1);
  int v10 = *(unsigned __int8 *)this;
  if (v10 != 45) {
    uint64_t v9 = this;
  }
  unsigned int v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(unsigned char *)v9 == 48 && *((unsigned char *)v9 + 1) == 48)
  {
    while (*((unsigned char *)v9 + 2) == 48)
    {
      uint64_t v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        unsigned int v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45) {
    size_t v13 = v11 + 1;
  }
  else {
    size_t v13 = v11;
  }
  if (v13 > 0x20) {
    goto LABEL_20;
  }
  int v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45) {
    LOBYTE(__dst[0]) = 45;
  }
  *((unsigned char *)__dst + v13) = 0;
LABEL_21:
  __endptr = 0;
  *__error() = 0;
  uint64_t v15 = strtol(v14, &__endptr, v4);
  uint64_t result = 0;
  if (__endptr != &v14[(int)v13]) {
    return result;
  }
  if (*__error()) {
    return 0;
  }
  if (a3) {
    *a3 = v15;
  }
  return 1;
}

uint64_t re2::RE2::Arg::parse_ulong_radix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v4 = (int)a4;
  int v6 = (int)a2;
  char v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1) {
    goto LABEL_20;
  }
  unsigned int v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL)) {
      goto LABEL_7;
    }
LABEL_20:
    int v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x4000) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v9 = (re2::RE2::Arg *)((char *)this + 1);
  int v10 = *(unsigned __int8 *)this;
  if (v10 != 45) {
    uint64_t v9 = this;
  }
  unsigned int v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(unsigned char *)v9 == 48 && *((unsigned char *)v9 + 1) == 48)
  {
    while (*((unsigned char *)v9 + 2) == 48)
    {
      uint64_t v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        unsigned int v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45) {
    size_t v13 = v11 + 1;
  }
  else {
    size_t v13 = v11;
  }
  if (v13 > 0x20) {
    goto LABEL_20;
  }
  int v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45) {
    LOBYTE(__dst[0]) = 45;
  }
  *((unsigned char *)__dst + v13) = 0;
LABEL_21:
  if (*v14 == 45) {
    return 0;
  }
  __endptr = 0;
  *__error() = 0;
  unint64_t v16 = strtoul(v14, &__endptr, v4);
  uint64_t result = 0;
  if (__endptr == &v14[(int)v13])
  {
    if (*__error()) {
      return 0;
    }
    if (a3) {
      *a3 = v16;
    }
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_radix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, a4);
  if (result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_radix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, a4);
  if (result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_radix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, a4);
  if (result)
  {
    if (v6 == (int)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_radix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, a4);
  if (result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_longlong_radix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v4 = (int)a4;
  int v6 = (int)a2;
  char v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1) {
    goto LABEL_20;
  }
  unsigned int v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL)) {
      goto LABEL_7;
    }
LABEL_20:
    int v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x4000) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v9 = (re2::RE2::Arg *)((char *)this + 1);
  int v10 = *(unsigned __int8 *)this;
  if (v10 != 45) {
    uint64_t v9 = this;
  }
  unsigned int v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(unsigned char *)v9 == 48 && *((unsigned char *)v9 + 1) == 48)
  {
    while (*((unsigned char *)v9 + 2) == 48)
    {
      uint64_t v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        unsigned int v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45) {
    size_t v13 = v11 + 1;
  }
  else {
    size_t v13 = v11;
  }
  if (v13 > 0x20) {
    goto LABEL_20;
  }
  int v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45) {
    LOBYTE(__dst[0]) = 45;
  }
  *((unsigned char *)__dst + v13) = 0;
LABEL_21:
  __endptr = 0;
  *__error() = 0;
  uint64_t v15 = strtoll(v14, &__endptr, v4);
  uint64_t result = 0;
  if (__endptr != &v14[(int)v13]) {
    return result;
  }
  if (*__error()) {
    return 0;
  }
  if (a3) {
    *a3 = v15;
  }
  return 1;
}

uint64_t re2::RE2::Arg::parse_ulonglong_radix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v4 = (int)a4;
  int v6 = (int)a2;
  char v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1) {
    goto LABEL_20;
  }
  unsigned int v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL)) {
      goto LABEL_7;
    }
LABEL_20:
    int v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x4000) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v9 = (re2::RE2::Arg *)((char *)this + 1);
  int v10 = *(unsigned __int8 *)this;
  if (v10 != 45) {
    uint64_t v9 = this;
  }
  unsigned int v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(unsigned char *)v9 == 48 && *((unsigned char *)v9 + 1) == 48)
  {
    while (*((unsigned char *)v9 + 2) == 48)
    {
      uint64_t v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        unsigned int v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45) {
    size_t v13 = v11 + 1;
  }
  else {
    size_t v13 = v11;
  }
  if (v13 > 0x20) {
    goto LABEL_20;
  }
  int v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45) {
    LOBYTE(__dst[0]) = 45;
  }
  *((unsigned char *)__dst + v13) = 0;
LABEL_21:
  if (*v14 == 45) {
    return 0;
  }
  __endptr = 0;
  *__error() = 0;
  unint64_t v16 = strtoull(v14, &__endptr, v4);
  uint64_t result = 0;
  if (__endptr == &v14[(int)v13])
  {
    if (*__error()) {
      return 0;
    }
    if (a3) {
      *a3 = v16;
    }
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_double(re2::RE2::Arg *this, const char *a2, double *a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v12 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 > 199) {
    return 0;
  }
  uint64_t v6 = (int)a2;
  memcpy(__dst, this, (int)a2);
  uint64_t v7 = (char *)__dst + v6;
  *uint64_t v7 = 0;
  *__error() = 0;
  int v10 = 0;
  double v8 = strtod((const char *)__dst, &v10);
  uint64_t result = 0;
  if (v10 == v7)
  {
    double v9 = v8;
    if (*__error()) {
      return 0;
    }
    if (a3) {
      *a3 = v9;
    }
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_float(re2::RE2::Arg *this, const char *a2, float *a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v12 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 > 199) {
    return 0;
  }
  uint64_t v6 = (int)a2;
  memcpy(__dst, this, (int)a2);
  uint64_t v7 = (char *)__dst + v6;
  *uint64_t v7 = 0;
  *__error() = 0;
  int v10 = 0;
  float v8 = strtof((const char *)__dst, &v10);
  uint64_t result = 0;
  if (v10 == v7)
  {
    float v9 = v8;
    if (*__error()) {
      return 0;
    }
    if (a3) {
      *a3 = v9;
    }
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0xA);
  if (result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_hex(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0x10);
  if (result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_octal(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)8);
  if (result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_cradix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t v7 = 0;
  int v5 = re2::RE2::Arg::parse_long_radix(this, a2, &v7, 0);
  uint64_t result = 0;
  if (v5)
  {
    if (v7 == (__int16)v7)
    {
      if (a3) {
        *a3 = v7;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0xA);
  if (result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_hex(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0x10);
  if (result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_octal(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)8);
  if (result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_cradix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  unint64_t v7 = 0;
  int v5 = re2::RE2::Arg::parse_ulong_radix(this, a2, &v7, 0);
  uint64_t result = 0;
  if (v5)
  {
    if (v7 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v7;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0xA);
  if (result)
  {
    if (v6 == (int)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_hex(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0x10);
  if (result)
  {
    if (v6 == (int)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_octal(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)8);
  if (result)
  {
    if (v6 == (int)v6)
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_cradix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t v7 = 0;
  int v5 = re2::RE2::Arg::parse_long_radix(this, a2, &v7, 0);
  uint64_t result = 0;
  if (v5)
  {
    if (v7 == (int)v7)
    {
      if (a3) {
        *a3 = v7;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0xA);
  if (result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_hex(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0x10);
  if (result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_octal(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  unint64_t v6 = 0;
  uint64_t result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)8);
  if (result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v6;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_cradix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  unint64_t v7 = 0;
  int v5 = re2::RE2::Arg::parse_ulong_radix(this, a2, &v7, 0);
  uint64_t result = 0;
  if (v5)
  {
    if (HIDWORD(v7))
    {
      return 0;
    }
    else
    {
      if (a3) {
        *a3 = v7;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_long(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_long_hex(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_long_octal(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_long_cradix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_ulong(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_ulong_hex(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_ulong_octal(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_ulong_cradix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_longlong(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_longlong_hex(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_longlong_octal(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_longlong_cradix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_ulonglong(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_ulonglong_hex(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_ulonglong_octal(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_ulonglong_cradix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, 0);
}

void sub_1CA6DCC50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DD414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DD838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8254(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__8255(uint64_t a1)
{
}

void sub_1CA6DDB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DE01C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DE1AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DE354(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DE910(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DEAA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DEC48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DEDD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DEF50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DF088(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DF1CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DF340(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6DF9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E4F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E54A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E5644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6E6994(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1CA6E7C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
}

uint64_t isLowercaseAscii(void *a1)
{
  uint64_t v1 = a1;
  int v2 = self;

  if (!v2) {
    goto LABEL_29;
  }
  memset(v20, 0, sizeof(v20));
  CFIndex Length = CFStringGetLength(v1);
  CFStringRef theString = v1;
  uint64_t v24 = 0;
  CFIndex v25 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  uint64_t v22 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v23 = CStringPtr;
  if (Length >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 64;
    while (1)
    {
      uint64_t v10 = (unint64_t)v8 >= 4 ? 4 : v8;
      CFIndex v11 = v25;
      if (v25 <= v8)
      {
        UniChar v12 = 0;
      }
      else if (v22)
      {
        UniChar v12 = v22[v8 + v24];
      }
      else if (v23)
      {
        UniChar v12 = v23[v24 + v8];
      }
      else
      {
        if (v27 <= v8 || v7 > v8)
        {
          uint64_t v14 = v10 + v6;
          uint64_t v15 = v9 - v10;
          uint64_t v16 = v8 - v10;
          CFIndex v17 = v16 + 64;
          if (v16 + 64 >= v25) {
            CFIndex v17 = v25;
          }
          uint64_t v26 = v16;
          uint64_t v27 = v17;
          if (v25 >= v15) {
            CFIndex v11 = v15;
          }
          v28.length = v11 + v14;
          v28.id location = v16 + v24;
          CFStringGetCharacters(theString, v28, (UniChar *)v20);
          uint64_t v7 = v26;
        }
        UniChar v12 = *((_WORD *)v20 + v8 - v7);
      }
      if (v12 > 0x7Fu || (unsigned __int16)(v12 - 65) <= 0x19u) {
        break;
      }
      ++v8;
      --v6;
      ++v9;
      if (Length == v8) {
        goto LABEL_29;
      }
    }
    uint64_t v18 = 0;
  }
  else
  {
LABEL_29:
    uint64_t v18 = 1;
  }

  return v18;
}

uint64_t canTurnIntoAscii(void *a1)
{
  uint64_t v1 = a1;
  int v2 = self;

  if (!v2) {
    goto LABEL_53;
  }
  memset(v22, 0, sizeof(v22));
  CFIndex Length = CFStringGetLength(v1);
  CFStringRef theString = v1;
  uint64_t v26 = 0;
  CFIndex v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  uint64_t v24 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  }
  int64_t v28 = 0;
  int64_t v29 = 0;
  CFIndex v25 = CStringPtr;
  if (Length < 1)
  {
LABEL_53:
    uint64_t v20 = 1;
    goto LABEL_54;
  }
  uint64_t v6 = 0;
  int64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = 64;
  while (1)
  {
    if ((unint64_t)v8 >= 4) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = v8;
    }
    CFIndex v11 = v27;
    if (v27 <= v8) {
      goto LABEL_37;
    }
    if (v24)
    {
      UniChar v12 = v24[v8 + v26];
    }
    else if (v25)
    {
      UniChar v12 = v25[v26 + v8];
    }
    else
    {
      if (v29 <= v8 || v7 > v8)
      {
        uint64_t v14 = v10 + v6;
        uint64_t v15 = v9 - v10;
        int64_t v16 = v8 - v10;
        CFIndex v17 = v16 + 64;
        if (v16 + 64 >= v27) {
          CFIndex v17 = v27;
        }
        int64_t v28 = v16;
        int64_t v29 = v17;
        if (v27 >= v15) {
          CFIndex v11 = v15;
        }
        v30.length = v11 + v14;
        v30.id location = v16 + v26;
        CFStringGetCharacters(theString, v30, (UniChar *)v22);
        int64_t v7 = v28;
      }
      UniChar v12 = *((_WORD *)v22 + v8 - v7);
    }
    if (v12 <= 0x214Fu)
    {
      if (v12 - 7552 < 0x80 || v12 - 8304 < 0x30 || v12 - 8400 < 0x30) {
        goto LABEL_37;
      }
    }
    else if (v12 > 0xAB2Fu)
    {
      if (v12 - 43824 < 0x40 || v12 - 65056 < 0x10) {
        goto LABEL_37;
      }
    }
    else if (v12 - 8528 < 0x40 || v12 - 11360 < 0x20)
    {
      goto LABEL_37;
    }
    if (v12 >= 0x80u)
    {
      int v19 = v12 & 0xFF80;
      if (v19 != 128
        && v19 != 256
        && v12 - 384 >= 0xD0
        && v12 - 592 >= 0xB0
        && v12 - 768 >= 0x70
        && v12 - 6832 >= 0x50
        && v19 != 7424
        && (v12 & 0xFF00) != 0x1E00
        && v12 - 8448 >= 0x50
        && v12 - 42784 >= 0xE0
        && v12 - 64256 >= 0x50
        && v12 - 65280 > 0xEF)
      {
        break;
      }
    }
LABEL_37:
    ++v8;
    --v6;
    ++v9;
    if (Length == v8) {
      goto LABEL_53;
    }
  }
  uint64_t v20 = 0;
LABEL_54:

  return v20;
}

id fastPathLatinToAsciiTransformation(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ((unint64_t)[v1 length] > 0x80)
  {
LABEL_48:
    uint64_t v21 = 0;
  }
  else
  {
    memset(v31, 0, sizeof(v31));
    int v2 = (__CFString *)v1;
    uint64_t v3 = self;

    if (v3)
    {
      memset(v23, 0, sizeof(v23));
      CFIndex Length = CFStringGetLength(v2);
      CFStringRef theString = v2;
      uint64_t v27 = 0;
      CFIndex v28 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v2);
      CStringPtr = 0;
      CFIndex v25 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
      }
      int64_t v29 = 0;
      int64_t v30 = 0;
      uint64_t v26 = CStringPtr;
      if (Length >= 1)
      {
        uint64_t v7 = 0;
        int64_t v8 = 0;
        uint64_t v9 = (char *)v31;
        uint64_t v10 = 64;
        while (1)
        {
          if ((unint64_t)v8 >= 4) {
            uint64_t v11 = 4;
          }
          else {
            uint64_t v11 = v8;
          }
          CFIndex v12 = v28;
          if (v28 <= v8)
          {
            LOBYTE(v13) = 0;
          }
          else
          {
            if (v25)
            {
              UniChar v13 = v25[v8 + v27];
            }
            else if (v26)
            {
              UniChar v13 = v26[v27 + v8];
            }
            else
            {
              int64_t v14 = v29;
              if (v30 <= v8 || v29 > v8)
              {
                uint64_t v16 = v11 + v7;
                uint64_t v17 = v10 - v11;
                int64_t v18 = v8 - v11;
                CFIndex v19 = v18 + 64;
                if (v18 + 64 >= v28) {
                  CFIndex v19 = v28;
                }
                int64_t v29 = v18;
                int64_t v30 = v19;
                if (v28 >= v17) {
                  CFIndex v12 = v17;
                }
                v34.length = v12 + v16;
                v34.id location = v18 + v27;
                CFStringGetCharacters(theString, v34, (UniChar *)v23);
                int64_t v14 = v29;
              }
              UniChar v13 = *((_WORD *)v23 + v8 - v14);
            }
            if (v13 > 0x7Fu)
            {
              if ((isCombiningMark(v13) & 1) == 0)
              {
                char v20 = 97;
                switch(v13)
                {
                  case 0xBBu:
                    char v20 = 32;
                    break;
                  case 0xDFu:
                    char v20 = 115;
                    *v9++ = 115;
                    break;
                  case 0xE0u:
                  case 0xE1u:
                  case 0xE2u:
                  case 0xE3u:
                  case 0xE4u:
                  case 0xE5u:
                    break;
                  case 0xE7u:
                    char v20 = 99;
                    break;
                  case 0xE8u:
                  case 0xE9u:
                  case 0xEAu:
                  case 0xEBu:
                    char v20 = 101;
                    break;
                  case 0xECu:
                  case 0xEDu:
                  case 0xEEu:
                  case 0xEFu:
                    char v20 = 105;
                    break;
                  case 0xF1u:
                    char v20 = 110;
                    break;
                  case 0xF2u:
                  case 0xF3u:
                  case 0xF4u:
                  case 0xF5u:
                  case 0xF6u:
                  case 0xF8u:
                    char v20 = 111;
                    break;
                  case 0xF9u:
                  case 0xFAu:
                  case 0xFBu:
                  case 0xFCu:
                    char v20 = 117;
                    break;
                  default:

                    goto LABEL_48;
                }
                *v9++ = v20;
              }
              goto LABEL_28;
            }
          }
          *v9++ = v13;
LABEL_28:
          ++v8;
          --v7;
          ++v10;
          if (Length == v8) {
            goto LABEL_43;
          }
        }
      }
    }
    uint64_t v9 = (char *)v31;
LABEL_43:

    uint64_t v21 = (void *)[[NSString alloc] initWithBytes:v31 length:v9 - (char *)v31 encoding:1];
  }

  return v21;
}

uint64_t isCombiningMark(int a1)
{
  BOOL v2 = (a1 - 768) < 0x70 || (a1 - 6832) < 0x50;
  int v3 = (a1 - 65056) < 0x10 || v2;
  if ((a1 - 8400) >= 0x30) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 1;
  }
  if ((a1 - 7616) >= 0x40) {
    return v4;
  }
  else {
    return 1;
  }
}

uint64_t re2::CEscapeString(re2 *this, const char *a2, uint64_t a3, char *a4)
{
  int v4 = (int)a4;
  if ((int)a2 >= 1)
  {
    uint64_t v6 = (unsigned __int8 *)this;
    LODWORD(v7) = 0;
    int64_t v8 = (unsigned __int8 *)this + (int)a2;
    while (v4 - (int)v7 >= 2)
    {
      int v9 = *v6;
      switch(*v6)
      {
        case 9u:
          *(_WORD *)(a3 + (int)v7) = 29788;
          goto LABEL_4;
        case 0xAu:
          *(_WORD *)(a3 + (int)v7) = 28252;
          goto LABEL_4;
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
          goto LABEL_11;
        case 0xDu:
          *(_WORD *)(a3 + (int)v7) = 29276;
          goto LABEL_4;
        case 0x22u:
          *(_WORD *)(a3 + (int)v7) = 8796;
          goto LABEL_4;
        case 0x27u:
          *(_WORD *)(a3 + (int)v7) = 10076;
          goto LABEL_4;
        default:
          if (v9 == 92)
          {
            *(_WORD *)(a3 + (int)v7) = 23644;
LABEL_4:
            uint64_t v7 = (v7 + 2);
          }
          else
          {
LABEL_11:
            if ((v9 - 127) > 0xFFFFFFA0)
            {
              *(unsigned char *)(a3 + (int)v7) = v9;
              uint64_t v7 = (v7 + 1);
            }
            else
            {
              if ((v4 - v7) < 4) {
                return 0xFFFFFFFFLL;
              }
              sprintf((char *)(a3 + (int)v7), "\\%03o", *v6);
              uint64_t v7 = (v7 + 4);
            }
          }
          if (++v6 >= v8) {
            goto LABEL_19;
          }
          break;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 0;
LABEL_19:
  if ((int)v7 >= v4) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a3 + (int)v7) = 0;
  return v7;
}

void re2::CEscape(re2 *this, const re2::StringPiece *a2)
{
}

double re2::PrefixSuccessor@<D0>(const void **this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3 = *((int *)this + 2);
  if ((v3 & 0x80000000) != 0) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v5 = *this;
  memset(&__dst, 0, sizeof(__dst));
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v5, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    LODWORD(v11) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    LODWORD(v11) = __dst.__r_.__value_.__r.__words[1];
  }
  if ((int)v11 - 1 < 0)
  {
LABEL_19:
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    if (v10 < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    while (1)
    {
      std::string::size_type v11 = (v11 - 1);
      CFIndex v12 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__dst
          : (std::string *)__dst.__r_.__value_.__r.__words[0];
      int v13 = v12->__r_.__value_.__s.__data_[v11];
      if (v13 != 255) {
        break;
      }
      std::string::erase(&__dst, v11, 0xFFFFFFFFFFFFFFFFLL);
      if ((int)v11 <= 0)
      {
        char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_19;
      }
    }
    v12->__r_.__value_.__s.__data_[v11] = v13 + 1;
    double result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a2 = __dst;
  }
  return result;
}

void sub_1CA6E98F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA6EB1E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA6EB398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6EBB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6EC194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6EC41C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1CA6EC304);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1CA6ECD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6EF374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6EF3A0(void *a1)
{
}

uint64_t getScannerRefAndAcquire()
{
  if (getScannerRefAndAcquire_sharedScannerSemaphoreOnce != -1) {
    dispatch_once(&getScannerRefAndAcquire_sharedScannerSemaphoreOnce, &__block_literal_global_245);
  }
  dispatch_semaphore_wait((dispatch_semaphore_t)sharedScannerSemaphore, 0xFFFFFFFFFFFFFFFFLL);
  pthread_mutex_lock(&scannerPoolLock);
  uint64_t v0 = 0;
  char v1 = 1;
  while (1)
  {
    char v2 = v1;
    if (!scannerInUse[v0]) {
      break;
    }
    char v1 = 0;
    uint64_t v0 = 1u;
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
  scannerInUse[v0] = 1;
  uint64_t v6 = (void *)sharedScanners[v0];
  if (!v6)
  {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_249 idleTimeout:1.0];
    uint64_t v8 = (void *)sharedScanners[v0];
    sharedScanners[v0] = v7;

    uint64_t v6 = (void *)sharedScanners[v0];
  }
  uint64_t v5 = [v6 result];
  if (!v5)
  {
LABEL_6:
    std::string::size_type v3 = [MEMORY[0x1E4F28B00] currentHandler];
    int v4 = [NSString stringWithUTF8String:"DDScannerRef getScannerRefAndAcquire(void)"];
    [v3 handleFailureInFunction:v4 file:@"SGDataDetectorMatch.m" lineNumber:311 description:@"Could not get data detector from pool"];

    uint64_t v5 = 0;
  }
  pthread_mutex_unlock(&scannerPoolLock);
  return v5;
}

intptr_t releaseScannerRef(const void *a1)
{
  pthread_mutex_lock(&scannerPoolLock);
  uint64_t v2 = 0;
  char v3 = 1;
  while (1)
  {
    char v4 = v3;
    uint64_t v5 = [(id)sharedScanners[v2] resultIfAvailable];

    if (v5 == a1) {
      break;
    }
    char v3 = 0;
    uint64_t v2 = 1u;
    if ((v4 & 1) == 0)
    {
      uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v7 = [NSString stringWithUTF8String:"void releaseScannerRef(DDScannerRef)"];
      [v6 handleFailureInFunction:v7, @"SGDataDetectorMatch.m", 325, @"Could not return scanner %@ to pool", a1 file lineNumber description];

      goto LABEL_6;
    }
  }
  scannerInUse[v2] = 0;
  CFRelease(a1);
LABEL_6:
  pthread_mutex_unlock(&scannerPoolLock);
  uint64_t v8 = sharedScannerSemaphore;
  return dispatch_semaphore_signal(v8);
}

id __getScannerRefAndAcquire_block_invoke_2()
{
  ScannerOrFail = (void *)SGDataDetectorsCreateScannerOrFail();
  return ScannerOrFail;
}

uint64_t __getScannerRefAndAcquire_block_invoke()
{
  sharedScannerSemaphore = (uint64_t)dispatch_semaphore_create(1);
  return MEMORY[0x1F41817F8]();
}

void sub_1CA6EF898(_Unwind_Exception *a1)
{
}

uint64_t SGRangeFromCFRange(uint64_t result, uint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (result < 0 || a2 < 0)
  {
    uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"CFRange \"%ld:%ld\" cannot be converted to NSRange.", result, a2);
    char v3 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v6 = *MEMORY[0x1E4F28588];
    v7[0] = v2;
    char v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    id v5 = [v3 errorWithDomain:@"_PASUtilityMacros" code:0 userInfo:v4];

    return 0;
  }
  return result;
}

id matchFromSimpleDDResult(uint64_t a1, void *a2)
{
  id v85 = a2;
  uint64_t Range = DDResultGetRange();
  uint64_t v5 = SGRangeFromCFRange(Range, v4);
  uint64_t v7 = v6;
  uint64_t RangeForURLification = DDResultGetRangeForURLification();
  uint64_t v10 = SGRangeFromCFRange(RangeForURLification, v9);
  uint64_t v12 = v11;
  v93[0] = 0;
  if (calendarsAndFormatters_onceToken != -1) {
    dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_9161);
  }
  id v84 = (id)calendarsAndFormatters_result_1;
  v91[1] = 0;
  uint64_t v92 = 0;
  if (DDResultHasType() && DDResultCopyMailValue()
    || DDResultHasType() && DDResultCopyPhoneValue()
    || DDResultHasType() && DDResultCopyIMScreenNameValue())
  {
    int v13 = v92;
    id v83 = 0;
  }
  else
  {
    id v83 = 0;
    int v13 = 0;
  }
  uint64_t v79 = v5;
  uint64_t v80 = v7;
  uint64_t v77 = v12;
  uint64_t v78 = v10;
  if (DDResultHasType())
  {
    v93[0] = 1;
    CFTimeZoneRef v14 = CFTimeZoneCopyDefault();
    uint64_t v15 = SGDataDetectorsGetDate();
    char v81 = v13;
    if (calendarsAndFormatters_onceToken != -1) {
      dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_9161);
    }
    id v16 = (id)calendarsAndFormatters_result_0;
    uint64_t v17 = [MEMORY[0x1E4F1C9C8] distantPast];
    int64_t v18 = [v16 components:4 fromDate:v17];
    CFIndex v19 = SGDataDetectorsGetDate();
    CFRelease(v14);
    char v20 = [v16 components:4 fromDate:v19];
    uint64_t v21 = [v20 year];
    if (v21 == [v18 year])
    {
      if (calendarsAndFormatters_onceToken != -1) {
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_9161);
      }
      uint64_t v22 = &calendarsAndFormatters_result_2;
    }
    else
    {
      if (calendarsAndFormatters_onceToken != -1) {
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_9161);
      }
      uint64_t v22 = &calendarsAndFormatters_result_1;
    }
    id v23 = (id)*v22;
    uint64_t v24 = [v23 stringFromDate:v15];

    int v13 = (void *)v24;
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((DDResultHasType() & 1) != 0 || DDResultHasType())
  {
    CFIndex v25 = v13;
    CFTimeZoneRef v26 = CFTimeZoneCopyDefault();
    CFLocaleRef System = CFLocaleGetSystem();
    char HasType = DDResultHasType();
    id v90 = 0;
    v91[0] = v15;
    id v88 = 0;
    id v89 = 0;
    CFTimeZoneRef v70 = v26;
    SGDataDetectorsGetIntervalDatesAndTimeZoneWithLocale(a1, (uint64_t)System, v91, &v90, &v89, &v88, (uint64_t)v85, v93);
    id v28 = v91[0];

    id v29 = v90;
    id v30 = v89;
    id v75 = v88;
    if (v28)
    {
      uint64_t v31 = objc_msgSend(v84, "stringFromDate:", v28, v26);

      CFIndex v25 = (void *)v31;
    }
    id v76 = v30;
    if (v26) {
      CFRelease(v26);
    }
    uint64_t v15 = v28;
    int v13 = v25;
  }
  else
  {
    char HasType = 0;
    id v75 = 0;
    id v76 = 0;
    id v29 = 0;
  }
  if ((DDResultHasType() & 1) != 0 || (DDResultHasType() & 1) != 0 || DDResultHasType())
  {
    CFTimeZoneRef v32 = CFTimeZoneCopyDefault();
    CFLocaleRef v33 = CFLocaleGetSystem();
    id v86 = v29;
    id v87 = v15;
    int DateAndTimeZoneWithLocaleAndTimeZone = SGDataDetectorsGetDateAndTimeZoneWithLocaleAndTimeZone(a1, (uint64_t)v33, (uint64_t)v85, (uint64_t)v32, &v87, &v86, v93);
    id v35 = v87;

    id v74 = v86;
    if (DateAndTimeZoneWithLocaleAndTimeZone)
    {
      if (calendarsAndFormatters_onceToken != -1) {
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_9161);
      }
      id v36 = (id)calendarsAndFormatters_result_3;
      uint64_t v37 = [v36 stringFromDate:v35];

      int v13 = (void *)v37;
    }
    if (v32) {
      CFRelease(v32);
    }
  }
  else
  {
    id v74 = v29;
    id v35 = v15;
  }
  if (DDResultGetSubresultWithType())
  {
    uint64_t v38 = DDResultGetRange();
    uint64_t v40 = SGRangeFromCFRange(v38, v39);
    uint64_t v42 = v41;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
  }
  id v73 = v35;
  if (DDResultHasType())
  {
    CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
    if (SubResults)
    {
      CFArrayRef v44 = SubResults;
      if (CFArrayGetCount(SubResults) >= 1)
      {
        ValueAtIndex = (id *)CFArrayGetValueAtIndex(v44, 0);
        id v46 = ValueAtIndex[8];

        id v47 = ValueAtIndex[9];
        id v83 = v46;
        int v13 = v47;
      }
    }
  }
  unint64_t v48 = 0x1E65B3000uLL;
  if ((DDResultHasType() & 1) != 0
    || (DDResultHasType() & 1) != 0
    || (DDResultHasType() & 1) != 0
    || DDResultHasType())
  {
    char HasType = +[SGDataDetectorMatch inferredDateForDataDetectorResult:](SGDataDetectorMatch, "inferredDateForDataDetectorResult:", a1, v70);
  }
  if (DDResultGetCategory() == 3)
  {
    DDResultCopyFullAddressComponents();
    uint64_t v49 = [MEMORY[0x1E4F5DAE8] components:0 city:0 state:0 postalCode:0 country:0];

    uint64_t v50 = (void *)v49;
    unint64_t v48 = 0x1E65B3000;
  }
  else
  {
    uint64_t v50 = 0;
  }
  uint64_t MatchType = SGDataDetectorsGetMatchType();
  switch((int)MatchType)
  {
    case 1:
      id v61 = objc_alloc(*(Class *)(v48 + 4080));
      unint64_t v56 = v83;
      uint64_t v62 = objc_msgSend(v61, "initWithMatchType:range:labelRange:labelString:valueRange:valueString:postalAddressComponents:", 1, v79, v80, v40, v42, v83, v78, v77, v13, v50);
      goto LABEL_63;
    case 3:
    case 8:
      char v52 = [*(id *)(v48 + 4080) approximateTimeForDataDetectorResult:a1];
      char v53 = [*(id *)(v48 + 4080) partialDateForDataDetectorResult:a1];
      id v54 = objc_alloc(*(Class *)(v48 + 4080));
      BYTE3(v72) = v53;
      BYTE2(v72) = v52;
      BYTE1(v72) = HasType;
      LOBYTE(v72) = v93[0] != 0;
      uint64_t v55 = v76;
      unint64_t v56 = v83;
      uint64_t v71 = v40;
      int v57 = v73;
      int v58 = v74;
      int v59 = v75;
      int v60 = (void *)[v54 initWithDetectedDate:v73 detectedTimeZone:v74 detectedEndDate:v76 detectedEndTimeZone:v75 matchType:MatchType range:v79 labelRange:v80 labelString:v71 valueRange:v42 valueString:v83 allDay:v78 inferredDate:v77 approximateTime:v13 partialDate:v72];
      goto LABEL_65;
    case 6:
      uint64_t ParsecDomain = DDResultGetParsecDomain();
      ParsecUUID = (void *)DDResultGetParsecUUID();
      id v66 = objc_alloc(*(Class *)(v48 + 4080));
      long long v67 = v66;
      if (ParsecUUID)
      {
        uint64_t v68 = (void *)[ParsecUUID copy];
        unint64_t v56 = v83;
        int v60 = objc_msgSend(v67, "initWithLookupHintInDomain:range:labelRange:labelString:valueRange:valueString:qid:", ParsecDomain, v79, v80, v40, v42, v83, v78, v77, v13, v68);
      }
      else
      {
        unint64_t v56 = v83;
        uint64_t v62 = objc_msgSend(v66, "initWithLookupHintInDomain:range:labelRange:labelString:valueRange:valueString:qid:", ParsecDomain, v79, v80, v40, v42, v83, v78, v77, v13, 0);
LABEL_63:
        int v60 = (void *)v62;
      }
      int v59 = v75;
      uint64_t v55 = v76;
      int v57 = v73;
      int v58 = v74;
LABEL_65:

      return v60;
    default:
      id v63 = objc_alloc(*(Class *)(v48 + 4080));
      unint64_t v56 = v83;
      uint64_t v62 = objc_msgSend(v63, "initWithMatchType:range:labelRange:labelString:valueRange:valueString:", MatchType, v79, v80, v40, v42, v83, v78, v77, v13);
      goto LABEL_63;
  }
}

uint64_t __calendarsAndFormatters_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:*MEMORY[0x1E4F1C318]];
  char v1 = (void *)calendarsAndFormatters_result_0;
  calendarsAndFormatters_result_0 = v0;

  uint64_t v2 = objc_opt_new();
  [v2 setDateFormat:@"dd-MM-yyyy"];
  char v3 = (void *)calendarsAndFormatters_result_1;
  calendarsAndFormatters_result_1 = (uint64_t)v2;

  uint64_t v4 = objc_opt_new();
  [v4 setDateFormat:@"dd-MM"];
  uint64_t v5 = (void *)calendarsAndFormatters_result_2;
  calendarsAndFormatters_result_2 = (uint64_t)v4;

  calendarsAndFormatters_result_3 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

void sub_1CA6F1640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9213(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9214(uint64_t a1)
{
}

id patterns()
{
  if (patterns_onceToken != -1) {
    dispatch_once(&patterns_onceToken, &__block_literal_global_9220);
  }
  uint64_t v0 = (void *)patterns_patterns;
  return v0;
}

uint64_t __patterns_block_invoke()
{
  patterns_patterns = +[SGPatterns patternsForClass:objc_opt_class()];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA6F1CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id patterns_9321()
{
  if (patterns_onceToken_9336 != -1) {
    dispatch_once(&patterns_onceToken_9336, &__block_literal_global_9337);
  }
  uint64_t v0 = (void *)patterns_patterns_9338;
  return v0;
}

uint64_t __patterns_block_invoke_9341()
{
  patterns_patterns_9338 = +[SGPatterns patternsForClass:objc_opt_class()];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA6F336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id emailAddressDomain(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v3 = [v1 rangeOfString:@"@" options:6];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = [v1 substringFromIndex:v3 + 1];
    uint64_t v4 = [v5 lowercaseString];
  }

  return v4;
}

void enumerateTokensInEmailAddress(void *a1, void *a2)
{
  id v3 = a1;
  int v58 = a2;
  if (!v3) {
    goto LABEL_87;
  }
  uint64_t v4 = (__CFString *)v3;
  uint64_t v5 = self;

  if (!v5) {
    goto LABEL_39;
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v60 = 0u;
  CFIndex Length = CFStringGetLength(v4);
  CFStringRef theString = v4;
  uint64_t v70 = 0;
  CFIndex v71 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v4);
  CStringPtr = 0;
  uint64_t v68 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
  }
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  unint64_t v69 = CStringPtr;
  if (Length < 1)
  {
LABEL_39:
    char v29 = 0;
    goto LABEL_42;
  }
  id v56 = v3;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 64;
  uint64_t v14 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v15 = (unint64_t)v11 >= 4 ? 4 : v11;
    CFIndex v16 = v71;
    if (v71 <= v11)
    {
      unsigned int v18 = 0;
      UniChar v17 = 0;
    }
    else
    {
      if (v68)
      {
        UniChar v17 = v68[v11 + v70];
      }
      else if (v69)
      {
        UniChar v17 = v69[v70 + v11];
      }
      else
      {
        uint64_t v19 = v72;
        if (v73 <= v11 || v72 > v11)
        {
          uint64_t v21 = v15 + v9;
          uint64_t v22 = v13 - v15;
          uint64_t v23 = v11 - v15;
          uint64_t v24 = v14;
          CFIndex v25 = v23 + 64;
          if (v23 + 64 >= v71) {
            CFIndex v25 = v71;
          }
          uint64_t v72 = v23;
          uint64_t v73 = v25;
          if (v71 >= v22) {
            CFIndex v16 = v22;
          }
          v74.length = v16 + v21;
          v74.id location = v23 + v70;
          CFStringGetCharacters(theString, v74, buffer);
          uint64_t v14 = v24;
          uint64_t v19 = v72;
        }
        UniChar v17 = buffer[v11 - v19];
      }
      unsigned int v18 = v17;
      if (v17 > 0x7Fu)
      {
        uint64_t v27 = v14;
        if (__maskrune(v17, 0x8000uLL))
        {
          char v10 = 1;
          uint64_t v14 = v27;
          goto LABEL_35;
        }
        int v28 = __maskrune(v17, 0x1000uLL);
        uint64_t v14 = v27;
        if (v28) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    int v26 = *(_DWORD *)(v14 + 4 * v18 + 60);
    if ((v26 & 0x8000) != 0)
    {
      char v10 = 1;
      goto LABEL_35;
    }
    if ((v26 & 0x1000) != 0)
    {
LABEL_29:
      char v12 = 1;
      goto LABEL_35;
    }
LABEL_34:
    if (v17 == 64) {
      goto LABEL_38;
    }
LABEL_35:
    if (v10 & 1) != 0 && (v12) {
      break;
    }
    ++v11;
    --v9;
    ++v13;
    if (Length == v11)
    {
LABEL_38:
      char v29 = 0;
      goto LABEL_41;
    }
  }
  char v29 = 1;
LABEL_41:
  id v3 = v56;
LABEL_42:

  id v30 = (char *)malloc_type_malloc(2 * [(__CFString *)v4 length], 0x1000040BDFB0063uLL);
  if (!v30)
  {
    id v54 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
    objc_exception_throw(v54);
  }
  uint64_t v31 = v30;
  CFTimeZoneRef v32 = v4;
  CFLocaleRef v33 = self;

  if (!v33) {
    goto LABEL_85;
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v60 = 0u;
  CFIndex v34 = CFStringGetLength(v32);
  CFStringRef theString = v32;
  uint64_t v70 = 0;
  CFIndex v71 = v34;
  id v35 = CFStringGetCharactersPtr(v32);
  uint64_t v36 = 0;
  uint64_t v68 = v35;
  if (!v35) {
    uint64_t v36 = CFStringGetCStringPtr(v32, 0x600u);
  }
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  unint64_t v69 = v36;
  if (v34 <= 0) {
    goto LABEL_85;
  }
  uint64_t v55 = v32;
  id v57 = v3;
  uint64_t v37 = 0;
  int64_t v38 = 0;
  uint64_t v39 = 64;
  uint64_t v40 = v31;
  while (2)
  {
    if ((unint64_t)v38 >= 4) {
      uint64_t v41 = 4;
    }
    else {
      uint64_t v41 = v38;
    }
    CFIndex v42 = v71;
    if (v71 <= v38)
    {
      unsigned int v44 = 0;
      UniChar v43 = 0;
      if (v29) {
        goto LABEL_71;
      }
      goto LABEL_80;
    }
    if (v68)
    {
      UniChar v43 = v68[v38 + v70];
    }
    else if (v69)
    {
      UniChar v43 = v69[v70 + v38];
    }
    else
    {
      uint64_t v45 = v72;
      if (v73 <= v38 || v72 > v38)
      {
        uint64_t v47 = v41 + v37;
        uint64_t v48 = v39 - v41;
        int64_t v49 = v38 - v41;
        CFIndex v50 = v49 + 64;
        if (v49 + 64 >= v71) {
          CFIndex v50 = v71;
        }
        uint64_t v72 = v49;
        uint64_t v73 = v50;
        if (v71 >= v48) {
          CFIndex v42 = v48;
        }
        v75.length = v42 + v47;
        v75.id location = v49 + v70;
        CFStringGetCharacters(theString, v75, buffer);
        uint64_t v45 = v72;
      }
      UniChar v43 = buffer[v38 - v45];
    }
    unsigned int v44 = v43;
    if (v43 != 64)
    {
      if ((v29 & 1) == 0) {
        goto LABEL_74;
      }
      if (v43 <= 0x7Fu)
      {
LABEL_71:
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v44 + 60) & 0x8000) != 0) {
          goto LABEL_72;
        }
LABEL_74:
        if (v43 - 45 <= 0x32 && ((1 << (v43 - 45)) & 0x4000000000003) != 0)
        {
          int v51 = 0;
          goto LABEL_77;
        }
        goto LABEL_80;
      }
      if (!__maskrune(v43, 0x8000uLL)) {
        goto LABEL_74;
      }
LABEL_72:
      int v51 = 1;
LABEL_77:
      if (v40 > v31)
      {
        char v52 = (void *)[[NSString alloc] initWithCharactersNoCopy:v31 length:(v40 - v31) >> 1 freeWhenDone:0];
        int v53 = v58[2](v58, v52);

        uint64_t v40 = v31;
        if (!v53)
        {
          CFTimeZoneRef v32 = v55;
          id v3 = v57;
          goto LABEL_85;
        }
      }
      if (v51)
      {
LABEL_80:
        *(_WORD *)uint64_t v40 = __tolower(v44);
        v40 += 2;
      }
      ++v38;
      --v37;
      ++v39;
      if (v34 == v38) {
        break;
      }
      continue;
    }
    break;
  }

  id v3 = v57;
  if (v40 <= v31) {
    goto LABEL_86;
  }
  CFTimeZoneRef v32 = (__CFString *)[[NSString alloc] initWithCharactersNoCopy:v31 length:(v40 - v31) >> 1 freeWhenDone:0];
  v58[2](v58, v32);
LABEL_85:

LABEL_86:
  free(v31);
LABEL_87:
}

void sub_1CA6F3DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6F5234(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9503(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9504(uint64_t a1)
{
}

void sub_1CA6F6104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6F6ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6F8620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9668(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9669(uint64_t a1)
{
}

void sub_1CA6F91A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6F9874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_1CA6FA67C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t simplifyInterdicts(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v28 = a2;
  [v3 sortUsingComparator:&__block_literal_global_407];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    char v7 = 0;
    id v8 = 0;
    uint64_t v9 = *(void *)v35;
    id v27 = v4;
    while (1)
    {
      uint64_t v10 = 0;
      uint64_t v29 = v6;
      do
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * v10);
        if (v8)
        {
          char v12 = [*(id *)(*((void *)&v34 + 1) + 8 * v10) first];
          uint64_t v13 = [v8 first];
          int v14 = [v12 isEqualToString:v13];

          if (v14)
          {
            id v33 = objc_alloc(MEMORY[0x1E4F93BB8]);
            uint64_t v15 = [v11 first];
            uint64_t v16 = [v11 second];
            uint64_t v17 = [v8 second];
            id v32 = v16;
            id v30 = v17;
            context = (void *)MEMORY[0x1CB79B230]();
            uint64_t v18 = SGDelimitedStringsDeserializeSet();
            uint64_t v19 = SGDelimitedStringsDeserializeSet();
            char v20 = [v18 setByAddingObjectsFromSet:v19];
            [v20 allObjects];
            v22 = uint64_t v21 = v9;
            uint64_t v23 = [v22 sortedArrayUsingSelector:sel_compare_];
            uint64_t v24 = SGDelimitedStringsSerializeArray();

            uint64_t v9 = v21;
            uint64_t v6 = v29;

            uint64_t v25 = [v33 initWithFirst:v15 second:v24];

            char v7 = 1;
            id v8 = (id)v25;
            id v4 = v27;
            goto LABEL_11;
          }
          [v28 addObject:v8];
        }
        uint64_t v15 = v8;
        id v8 = v11;
LABEL_11:

        ++v10;
      }
      while (v6 != v10);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (!v6)
      {

        if (v8)
        {
          [v28 addObject:v8];
          goto LABEL_16;
        }
        goto LABEL_17;
      }
    }
  }
  char v7 = 0;
  id v8 = v4;
LABEL_16:

LABEL_17:
  return v7 & 1;
}

uint64_t __simplifyInterdicts_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 first];
  uint64_t v6 = [v4 first];

  uint64_t v7 = [v5 compare:v6];
  return v7;
}

void sub_1CA6FB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6FB3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9925(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9926(uint64_t a1)
{
}

void sub_1CA6FB540(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6FDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA6FE0F8(_Unwind_Exception *a1)
{
  SGRecordMeasurementState((void *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1CA6FEA1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_1CA6FF330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1CA6FFA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1CA70018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1CA700B10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7010F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t writeIdentity(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11)
{
  id v18 = a1;
  id v19 = a2;
  id v20 = a3;
  id v21 = a4;
  id v22 = a5;
  id v23 = a6;
  id v24 = a7;
  id v25 = a8;
  id v26 = a9;
  uint64_t v51 = 0;
  char v52 = &v51;
  uint64_t v53 = 0x2020000000;
  char v54 = 0;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __writeIdentity_block_invoke;
  v38[3] = &unk_1E65B75A0;
  id v27 = v18;
  id v39 = v27;
  id v28 = v26;
  id v40 = v28;
  id v29 = v19;
  id v41 = v29;
  id v30 = v20;
  id v42 = v30;
  id v31 = v21;
  id v43 = v31;
  id v32 = v22;
  id v44 = v32;
  id v33 = v23;
  id v45 = v33;
  id v34 = v24;
  id v46 = v34;
  id v35 = v25;
  char v49 = a10;
  char v50 = a11;
  id v47 = v35;
  uint64_t v48 = &v51;
  [v27 writeTransaction:v38];
  uint64_t v36 = *((unsigned __int8 *)v52 + 24);

  _Block_object_dispose(&v51, 8);
  return v36;
}

void sub_1CA703240(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void __writeIdentity_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __writeIdentity_block_invoke_2;
  v29[3] = &unk_1E65B7578;
  uint64_t v2 = *(void **)(a1 + 32);
  id v30 = *(id *)(a1 + 40);
  id v31 = *(id *)(a1 + 48);
  id v32 = *(id *)(a1 + 56);
  id v33 = *(id *)(a1 + 64);
  id v34 = *(id *)(a1 + 72);
  id v35 = *(id *)(a1 + 80);
  id v36 = *(id *)(a1 + 88);
  id v37 = *(id *)(a1 + 96);
  __int16 v38 = *(_WORD *)(a1 + 112);
  [v2 prepAndRunQuery:@"INSERT OR IGNORE INTO identityPerson (recordId, surname, middlename, fullname, nameSketches, phones, socialProfileIdentifiers, email, curated, isSent) VALUES (?,?,?,?,?,?,?,?,?,?)", v29, 0, 0 onPrep onRow onError];
  if (sqlite3_changes((sqlite3 *)[*(id *)(a1 + 32) handle])) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v3 = *(id *)(a1 + 80);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v40 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v26;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v25 + 1) + 8 * v7);
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = __writeIdentity_block_invoke_3;
        v23[3] = &unk_1E65BEB88;
        v23[4] = v8;
        uint64_t v9 = *(void **)(a1 + 32);
        id v24 = *(id *)(a1 + 40);
        [v9 prepAndRunQuery:@"INSERT OR IGNORE INTO identityPhones (phone, recordId) VALUES (?, ?)", v23, 0, 0 onPrep onRow onError];
        if (sqlite3_changes((sqlite3 *)[*(id *)(a1 + 32) handle])) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
        }

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v25 objects:v40 count:16];
    }
    while (v5);
  }

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v10 = *(id *)(a1 + 88);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v39 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8 * v14);
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = __writeIdentity_block_invoke_4;
        v17[3] = &unk_1E65BFF28;
        void v17[4] = v15;
        uint64_t v16 = *(void **)(a1 + 32);
        id v18 = *(id *)(a1 + 40);
        [v16 prepAndRunSQL:@"INSERT OR IGNORE INTO identitySocialProfileIdentifiers (socialProfileIdentifier, recordId) VALUES (:socialProfileIdentifier, :recordId)", v17, 0, 0 onPrep onRow onError];
        if (sqlite3_changes((sqlite3 *)[*(id *)(a1 + 32) handle])) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
        }

        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v39 count:16];
    }
    while (v12);
  }
}

uint64_t __writeIdentity_block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, [*(id *)(a1 + 32) rowId]);
  if (*(void *)(a1 + 40)) {
    uint64_t v4 = *(__CFString **)(a1 + 40);
  }
  else {
    uint64_t v4 = &stru_1F24EEF20;
  }
  sqlite3_bind_text(a2, 2, (const char *)[(__CFString *)v4 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 48)) {
    uint64_t v5 = *(__CFString **)(a1 + 48);
  }
  else {
    uint64_t v5 = &stru_1F24EEF20;
  }
  sqlite3_bind_text(a2, 3, (const char *)[(__CFString *)v5 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if ([*(id *)(a1 + 56) length]) {
    sqlite3_bind_text(a2, 4, (const char *)[*(id *)(a1 + 56) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sqlite3_bind_null(a2, 4);
  }
  uint64_t v6 = [*(id *)(a1 + 64) allObjects];
  SGDelimitedStringsSerializeArray();
  id v7 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 5, (const char *)[v7 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  uint64_t v8 = [*(id *)(a1 + 72) allObjects];
  SGDelimitedStringsSerializeArray();
  id v9 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 6, (const char *)[v9 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  id v10 = [*(id *)(a1 + 80) allObjects];
  SGDelimitedStringsSerializeArray();
  id v11 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 7, (const char *)[v11 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  if (*(void *)(a1 + 88)) {
    uint64_t v12 = *(__CFString **)(a1 + 88);
  }
  else {
    uint64_t v12 = &stru_1F24EEF20;
  }
  sqlite3_bind_text(a2, 8, (const char *)[(__CFString *)v12 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(a2, 9, *(unsigned __int8 *)(a1 + 96));
  int v13 = *(unsigned __int8 *)(a1 + 97);
  return sqlite3_bind_int(a2, 10, v13);
}

uint64_t __writeIdentity_block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_int64 v4 = [*(id *)(a1 + 40) rowId];
  return sqlite3_bind_int64(a2, 2, v4);
}

void __writeIdentity_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":socialProfileIdentifier" toNSString:v3];
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 40), "rowId"));
}

void sub_1CA703A38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CA705034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA705BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t __Block_byref_object_copy__10159(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__10160(uint64_t a1)
{
}

id dereferenceData(void *a1, int a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = __Block_byref_object_copy__10159;
  uint64_t v15 = __Block_byref_object_dispose__10160;
  id v3 = a1;
  id v16 = v3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = (void *)globalPatternsData;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __dereferenceData_block_invoke;
    _OWORD v7[3] = &unk_1E65B7780;
    id v9 = &v11;
    id v8 = v3;
    int v10 = a2;
    [v4 runWithLockAcquired:v7];
  }
  id v5 = (id)v12[5];
  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_1CA705F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __dereferenceData_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4re2::Compiler::Compile(this, 0) = [*(id *)(a2 + 16) dataForOffset:*(void *)(a1 + 32) includeTerminator:*(unsigned int *)(a1 + 48)];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA706208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7064C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7071D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA70C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL isInhumanHeader(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 length]
    && [v1 characterAtIndex:0] == 120
    && [@" x-sendgrid-eid x-facebook-notify x-amazon-mail-relay-type x-autogenerated x-campaign x-ses-outgoing x-ebay-mailtracker x-mailing-id x-phpbb-origin x-report-abuse x-facebook x-bloggermail x-campaign-id x-feedback-id" rangeOfString:v1 options:2] != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

void re2::NFA::NFA(re2::NFA *this, re2::Prog *a2)
{
  *(_OWORD *)((char *)this + 4re2::Compiler::Compile(this, 0) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  id v3 = (_DWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 113) = 0u;
  *(void *)this = a2;
  *((void *)this + 1) = *((unsigned int *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  re2::SparseArray<re2::NFA::Thread *>::resize((_DWORD *)this + 10, *((_DWORD *)a2 + 3));
  re2::SparseArray<re2::NFA::Thread *>::resize(v3, *(_DWORD *)(*(void *)this + 12));
  *((_DWORD *)this + 4re2::Compiler::Compile(this, 0) = 2 * *(_DWORD *)(*(void *)this + 12);
  operator new[]();
}

void sub_1CA70E424(_Unwind_Exception *a1)
{
  re2::SparseArray<re2::NFA::Thread *>::~SparseArray(v2);
  re2::SparseArray<re2::NFA::Thread *>::~SparseArray(v1);
  _Unwind_Resume(a1);
}

_DWORD *re2::SparseArray<re2::NFA::Thread *>::resize(_DWORD *result, int a2)
{
  if (result[1] < a2) {
    operator new[]();
  }
  result[1] = a2;
  if (*result > a2) {
    *double result = a2;
  }
  return result;
}

uint64_t re2::NFA::ComputeFirstByte(re2::NFA *this)
{
  if (*((_DWORD *)this + 2)) {
    operator new[]();
  }
  return 0xFFFFFFFFLL;
}

void *re2::SparseArray<re2::NFA::Thread *>::~SparseArray(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x1CB79A8A0](v2, 0x1000C8052888210);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void re2::NFA::~NFA(re2::NFA *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    MEMORY[0x1CB79A8A0](v2, 0x50C80EE9192B6);
  }
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1050C80606E6C2FLL);
  }
  id v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    do
    {
      int v10 = (void *)*v4;
      uint64_t v9 = v4[1];
      if (v9) {
        MEMORY[0x1CB79A8A0](v9, 0x50C80EE9192B6);
      }
      MEMORY[0x1CB79A8C0](v4, 0x10A2C40E7E742B6);
      id v4 = v10;
    }
    while (v10);
  }
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
    MEMORY[0x1CB79A8A0](v5, 0x1000C8052888210);
  }
  uint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    MEMORY[0x1CB79A8A0](v7, 0x1000C8052888210);
  }
  id v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
}

unint64_t re2::NFA::AddToThreadq(unint64_t result, unsigned int *a2, int a3, int a4, uint64_t a5, unint64_t a6)
{
  if (a3)
  {
    unint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 152);
    *(_DWORD *)uint64_t v7 = a3;
    *(_DWORD *)(v7 + 4) = -1;
    *(void *)(v7 + 8) = 0;
    unint64_t v63 = a6 + 16;
    unint64_t v64 = a6 + 8;
    uint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = (v8 - 1);
      uint64_t v10 = v7 + 16 * v9;
      uint64_t v11 = *(unsigned int *)(v10 + 4);
      if ((v11 & 0x80000000) == 0) {
        *(void *)(a6 + 8 * v11) = *(void *)(v7 + 16 * v9 + 8);
      }
      signed int v12 = *(_DWORD *)v10;
      if (*(_DWORD *)v10)
      {
        unsigned int v13 = *a2;
        unsigned int v14 = a2[1];
        if (v14 <= v12) {
          goto LABEL_12;
        }
        uint64_t v15 = *((void *)a2 + 1);
        uint64_t v16 = *((void *)a2 + 2);
        uint64_t v17 = *(int *)(v15 + 4 * v12);
        if (v17 >= v13 || *(_DWORD *)(v16 + 16 * v17 + 8) != v12) {
          break;
        }
      }
LABEL_4:
      uint64_t v8 = v9;
      if ((int)v9 <= 0) {
        return result;
      }
    }
    *(_DWORD *)(v15 + 4 * v12) = v13;
    unsigned int v14 = a2[1];
    uint64_t v18 = (int)*a2;
    *(_DWORD *)(v16 + 16 * v18 + 8) = v12;
    unsigned int v13 = v18 + 1;
    *a2 = v13;
    *(void *)(v16 + 16 * *(int *)(v15 + 4 * v12)) = 0;
LABEL_12:
    if (v14 <= v12)
    {
      uint64_t v19 = *((void *)a2 + 2);
    }
    else
    {
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *(int *)(*((void *)a2 + 1) + 4 * v12);
      if (v20 < v13)
      {
        uint64_t v21 = v19 + 16 * v20;
        if (*(_DWORD *)(v21 + 8) == v12) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v21 = v19 + 16 * (int)v13;
LABEL_18:
    uint64_t v22 = *(void *)(*(void *)v6 + 32);
    id v23 = (unsigned int *)(v22 + 8 * v12);
    unsigned int v24 = *v23;
    switch(*v23 & 7)
    {
      case 1:
        long long v26 = *(void **)(v6 + 168);
        if (!v26) {
          operator new();
        }
        double result = v26[1];
        *(void *)(v6 + 168) = *v26;
        *(_DWORD *)long long v26 = v12;
        unint64_t v38 = *(unsigned int *)(v6 + 12);
        if ((int)v38 < 1) {
          goto LABEL_45;
        }
        if (v38 >= 0xB
          && ((unint64_t v39 = (8 * v38 - 8) & 0xFFFFFFFFFFFFFFF0, result >= v63 + v39) || result + v39 + 16 <= a6))
        {
          unint64_t v54 = ((v38 - 1) >> 1) + 1;
          uint64_t v55 = v54 & 0x7FFFFFFFFFFFFFFCLL;
          id v56 = (_OWORD *)(result + 32);
          id v57 = (long long *)(a6 + 32);
          uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(v57 - 2);
            long long v59 = *(v57 - 1);
            long long v62 = *v57;
            long long v61 = v57[1];
            v57 += 4;
            *(v56 - 2) = v60;
            *(v56 - 1) = v59;
            *id v56 = v62;
            v56[1] = v61;
            v56 += 4;
            v58 -= 4;
          }
          while (v58);
          if (v54 == v55) {
            goto LABEL_45;
          }
          unint64_t v40 = 2 * v55;
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v41 = (void *)(result + 8 * v40 + 8);
        id v42 = (uint64_t *)(v64 + 8 * v40);
        do
        {
          *(v41 - 1) = *(v42 - 1);
          uint64_t v43 = *v42;
          v42 += 2;
          *uint64_t v41 = v43;
          v41 += 2;
          v40 += 2;
        }
        while (v40 < v38);
LABEL_45:
        *(void *)uint64_t v21 = v26;
        goto LABEL_46;
      case 2:
      case 5:
        long long v25 = *(void **)(v6 + 168);
        if (!v25) {
          operator new();
        }
        double result = v25[1];
        *(void *)(v6 + 168) = *v25;
        *(_DWORD *)long long v25 = v12;
        unint64_t v32 = *(unsigned int *)(v6 + 12);
        if ((int)v32 < 1) {
          goto LABEL_36;
        }
        if (v32 < 0xB
          || (unint64_t v33 = (8 * v32 - 8) & 0xFFFFFFFFFFFFFFF0, result < v63 + v33) && result + v33 + 16 > a6)
        {
          unint64_t v34 = 0;
          goto LABEL_34;
        }
        unint64_t v45 = ((v32 - 1) >> 1) + 1;
        uint64_t v46 = v45 & 0x7FFFFFFFFFFFFFFCLL;
        id v47 = (_OWORD *)(result + 32);
        uint64_t v48 = (long long *)(a6 + 32);
        uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          long long v51 = *(v48 - 2);
          long long v50 = *(v48 - 1);
          long long v53 = *v48;
          long long v52 = v48[1];
          v48 += 4;
          *(v47 - 2) = v51;
          *(v47 - 1) = v50;
          *id v47 = v53;
          v47[1] = v52;
          v47 += 4;
          v49 -= 4;
        }
        while (v49);
        if (v45 != v46)
        {
          unint64_t v34 = 2 * v46;
LABEL_34:
          id v35 = (void *)(result + 8 * v34 + 8);
          id v36 = (uint64_t *)(v64 + 8 * v34);
          do
          {
            *(v35 - 1) = *(v36 - 1);
            uint64_t v37 = *v36;
            v36 += 2;
            *id v35 = v37;
            v35 += 2;
            v34 += 2;
          }
          while (v34 < v32);
        }
LABEL_36:
        *(void *)uint64_t v21 = v25;
        goto LABEL_4;
      case 3:
        int v27 = *(_DWORD *)(v22 + 8 * v12 + 4);
        int v28 = v8 - 1;
        if (v27 < *(_DWORD *)(v6 + 12))
        {
          uint64_t v29 = 8 * v27;
          uint64_t v30 = *(void *)(a6 + v29);
          *(_DWORD *)uint64_t v10 = 0;
          *(_DWORD *)(v10 + 4) = v27;
          *(void *)(v10 + 8) = v30;
          *(void *)(a6 + v29) = a5;
          unsigned int v24 = *v23;
          uint64_t v9 = v8;
          int v28 = v8;
        }
        uint64_t v31 = v7 + 16 * v9;
        *(_DWORD *)uint64_t v31 = v24 >> 3;
        *(_DWORD *)(v31 + 4) = -1;
        *(void *)(v31 + 8) = 0;
        uint64_t v9 = (v28 + 1);
        goto LABEL_4;
      case 4:
        if ((*(_DWORD *)(v22 + 8 * v12 + 4) & ~a4) == 0) {
          goto LABEL_3;
        }
        goto LABEL_4;
      case 6:
LABEL_3:
        *(_DWORD *)uint64_t v10 = v24 >> 3;
        *(_DWORD *)(v10 + 4) = -1;
        *(void *)(v10 + 8) = 0;
        uint64_t v9 = v8;
        goto LABEL_4;
      case 7:
        goto LABEL_4;
      default:
LABEL_46:
        *(_DWORD *)uint64_t v10 = *(_DWORD *)(v22 + 8 * v12 + 4);
        *(_DWORD *)(v10 + 4) = -1;
        *(void *)(v10 + 8) = 0;
        uint64_t v9 = (v8 + 1);
        uint64_t v44 = v7 + 16 * v8;
        *(_DWORD *)uint64_t v44 = *v23 >> 3;
        *(_DWORD *)(v44 + 4) = -1;
        *(void *)(v44 + 8) = 0;
        goto LABEL_4;
    }
  }
  return result;
}

std::string *re2::NFA::FormatCapture@<X0>(std::string *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, std::string *a9@<X8>)
{
  a9->__r_.__value_.__r.__words[0] = 0;
  a9->__r_.__value_.__l.__size_ = 0;
  a9->__r_.__value_.__r.__words[2] = 0;
  if (SHIDWORD(this->__r_.__value_.__r.__words[1]) >= 1)
  {
    uint64_t v11 = this;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = a2[v12];
      if (v13)
      {
        char v14 = (_BYTE)v13 - v11[1].__r_.__value_.__r.__words[0];
        if (a2[v12 + 1]) {
          this = re2::StringAppendF(a9, "(%d,%d)", a3, a4, a5, a6, a7, a8, v14);
        }
        else {
          this = re2::StringAppendF(a9, "(%d,?)", a3, a4, a5, a6, a7, a8, v14);
        }
      }
      else
      {
        this = re2::StringAppendF(a9, "(?,?)", a3, a4, a5, a6, a7, a8, v15);
      }
      v12 += 2;
    }
    while (SHIDWORD(v11->__r_.__value_.__r.__words[1]) > (int)v12);
  }
  return this;
}

void sub_1CA70EF10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re2::NFA::Search(re2::NFA *this, const re2::StringPiece *a2, const re2::StringPiece *a3, BOOL a4, char a5, re2::StringPiece *a6, int a7)
{
  if (*((_DWORD *)this + 2))
  {
    long long v17 = *(_OWORD *)a3;
    unint64_t v7 = *(void *)a3;
    if (!*(void *)a3)
    {
      unint64_t v7 = *(void *)a2;
      DWORD2(v17) = *((_DWORD *)a2 + 2);
    }
    unint64_t v8 = v7 + SDWORD2(v17);
    unint64_t v9 = *(void *)a2 + *((int *)a2 + 2);
    if (v7 > *(void *)a2 || v8 < v9)
    {
      LogMessage::LogMessage((LogMessage *)&v18, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_nfa.cc");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad args: context does not contain text ", 40);
      char v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"+", 1);
      char v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"+", 1);
      std::ostream::operator<<();
      LogMessage::Flush((LogMessage *)&v18);
      abort();
    }
    if (v7 == *(void *)a2 || **(unsigned char **)this == 0)
    {
      if (*(unsigned char *)(*(void *)this + 1))
      {
        if (v8 != v9) {
          return 0;
        }
        a5 = 1;
        *((unsigned char *)this + 17) = 1;
        *((void *)this + 4) = v8;
      }
      if ((a7 & 0x80000000) == 0)
      {
        *((_DWORD *)this + 3) = 2 * a7;
        *((unsigned char *)this + 16) = a5;
        if (!a7) {
          *((_DWORD *)this + 3) = 2;
        }
        operator new[]();
      }
      LOBYTE(v18) = 0;
      uint64_t v12 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad args: nsubmatch=", 20);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v18);
    }
  }
  return 0;
}

void sub_1CA70F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void re2::Prog::SearchNFA(re2::Prog *a1)
{
  memset(v1, 0, sizeof(v1));
  re2::NFA::NFA((re2::NFA *)v1, a1);
}

void sub_1CA70FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  re2::NFA::~NFA((re2::NFA *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::chartorune(re2 *this, int *a2, const char *a3)
{
  unsigned int v3 = *(unsigned __int8 *)a2;
  if (*(char *)a2 < 0)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 1) ^ 0x80;
    if (v5 <= 0x3F)
    {
      if (v3 > 0xDF)
      {
        unsigned int v6 = *((unsigned __int8 *)a2 + 2) ^ 0x80;
        if (v6 <= 0x3F)
        {
          if (v3 > 0xEF)
          {
            if (v3 <= 0xF7)
            {
              unsigned int v8 = *((unsigned __int8 *)a2 + 3) ^ 0x80;
              if (v8 <= 0x3F)
              {
                unsigned int v9 = (((unsigned __int16)(((_WORD)v5 << 6) | ((_WORD)v3 << 12)) | (unsigned __int16)v6) & 0x7FFF) << 6;
                if (v9 >= 0x10000)
                {
                  unsigned int v3 = v9 | v8;
                  uint64_t v4 = 4;
                  goto LABEL_16;
                }
              }
            }
          }
          else
          {
            unsigned int v7 = ((v3 & 0xF) << 12) | (v5 << 6);
            if (v7 >= 0x800)
            {
              unsigned int v3 = v7 | v6;
              uint64_t v4 = 3;
              goto LABEL_16;
            }
          }
        }
      }
      else if (v3 >= 0xC0)
      {
        unsigned int v3 = ((v3 & 0x1F) << 6) | v5;
        if (v3 >= 0x80)
        {
          uint64_t v4 = 2;
          goto LABEL_16;
        }
      }
    }
    uint64_t v4 = 1;
    unsigned int v3 = 65533;
    goto LABEL_16;
  }
  uint64_t v4 = 1;
LABEL_16:
  *(_DWORD *)this = v3;
  return v4;
}

uint64_t re2::runetochar(re2 *this, char *a2, const int *a3)
{
  unsigned int v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 > 0x7Fu)
  {
    if (v3 > 0x7FF)
    {
      if (HIWORD(v3) > 0x10u) {
        unsigned int v3 = 65533;
      }
      if (HIWORD(v3))
      {
        *(unsigned char *)this = (v3 >> 18) | 0xF0;
        *((unsigned char *)this + 1) = (v3 >> 12) & 0x3F | 0x80;
        *((unsigned char *)this + 2) = (v3 >> 6) & 0x3F | 0x80;
        *((unsigned char *)this + 3) = v3 & 0x3F | 0x80;
        return 4;
      }
      else
      {
        *(unsigned char *)this = (v3 >> 12) | 0xE0;
        *((unsigned char *)this + 1) = (v3 >> 6) & 0x3F | 0x80;
        *((unsigned char *)this + 2) = v3 & 0x3F | 0x80;
        return 3;
      }
    }
    else
    {
      *(unsigned char *)this = (v3 >> 6) | 0xC0;
      *((unsigned char *)this + 1) = v3 & 0x3F | 0x80;
      return 2;
    }
  }
  else
  {
    *(unsigned char *)this = v3;
    return 1;
  }
}

uint64_t re2::runelen(re2 *this)
{
  if ((this - 1114112) < 0xFFF00000) {
    int v1 = 3;
  }
  else {
    int v1 = 4;
  }
  if (this >= 0x800) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (this >= 0x80) {
    return v2;
  }
  else {
    return 1;
  }
}

BOOL re2::fullrune(re2 *this, const char *a2)
{
  BOOL result = 0;
  if ((int)a2 >= 1)
  {
    if ((*(char *)this & 0x80000000) == 0) {
      return 1;
    }
    if (a2 >= 2)
    {
      unsigned int v3 = *(unsigned __int8 *)this;
      if (v3 < 0xE0 || a2 >= 3 && (a2 != 3 || v3 <= 0xEF)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t re2::utflen(re2 *this, const char *a2)
{
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    unsigned int v4 = *(unsigned __int8 *)this;
    if ((*(char *)this & 0x80000000) == 0) {
      break;
    }
    unsigned int v5 = *((unsigned __int8 *)this + 1) ^ 0x80;
    if (v5 > 0x3F) {
      goto LABEL_3;
    }
    if (v4 > 0xDF)
    {
      if (*((char *)this + 2) > -65) {
        goto LABEL_3;
      }
      if (v4 > 0xEF)
      {
        if (v4 > 0xF7 || *((char *)this + 3) > -65 || !((((v4 & 7) << 18) | (v5 << 12)) >> 16)) {
          goto LABEL_3;
        }
        uint64_t v3 = 4;
      }
      else
      {
        if ((((v4 & 0xF) << 12) | (v5 << 6)) < 0x800) {
          goto LABEL_3;
        }
        uint64_t v3 = 3;
      }
    }
    else
    {
      if (v4 < 0xC0 || ((v4 << 6) & 0x780 | v5) < 0x80) {
        goto LABEL_3;
      }
      uint64_t v3 = 2;
    }
LABEL_4:
    this = (re2 *)((char *)this + v3);
  }
  if (*(unsigned char *)this)
  {
LABEL_3:
    uint64_t v3 = 1;
    goto LABEL_4;
  }
  return i;
}

char *re2::utfrune(char *this, const char *a2)
{
  if ((int)a2 < 128) {
    return strchr(this, (int)a2);
  }
  while (1)
  {
    unsigned int v4 = *this;
    if (*this < 0)
    {
      unsigned int v5 = this[1] ^ 0x80;
      if (v5 <= 0x3F)
      {
        if (v4 > 0xDF)
        {
          unsigned int v6 = this[2] ^ 0x80;
          if (v6 <= 0x3F)
          {
            if (v4 > 0xEF)
            {
              if (v4 > 0xF7) {
                goto LABEL_3;
              }
              unsigned int v8 = this[3] ^ 0x80;
              if (v8 > 0x3F) {
                goto LABEL_3;
              }
              unsigned int v9 = (((unsigned __int16)(((_WORD)v5 << 6) | ((_WORD)v4 << 12)) | (unsigned __int16)v6) & 0x7FFF) << 6;
              if (v9 < 0x10000) {
                goto LABEL_3;
              }
              unsigned int v2 = v9 | v8;
              uint64_t v3 = 4;
            }
            else
            {
              unsigned int v7 = ((v4 & 0xF) << 12) | (v5 << 6);
              if (v7 < 0x800) {
                goto LABEL_3;
              }
              unsigned int v2 = v7 | v6;
              uint64_t v3 = 3;
            }
LABEL_4:
            if (v2 == a2) {
              return this;
            }
            goto LABEL_5;
          }
        }
        else if (v4 >= 0xC0)
        {
          unsigned int v2 = ((v4 & 0x1F) << 6) | v5;
          if (v2 >= 0x80)
          {
            uint64_t v3 = 2;
            goto LABEL_4;
          }
        }
      }
LABEL_3:
      unsigned int v2 = 65533;
      uint64_t v3 = 1;
      goto LABEL_4;
    }
    if (!*this) {
      return 0;
    }
    if (v4 == a2) {
      return this;
    }
    uint64_t v3 = 1;
LABEL_5:
    this += v3;
  }
}

id SGSha256HMACData(void *a1, id a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v2 = a1;
    id v3 = a2;
    id v4 = v2;
    unsigned int v5 = (const void *)objc_msgSend(v3, "bytes", (unsigned __int128)0, (unsigned __int128)0);
    size_t v6 = [v3 length];

    id v7 = v4;
    unsigned int v8 = (const void *)[v7 bytes];
    size_t v9 = [v7 length];

    CCHmac(2u, v5, v6, v8, v9, &v11);
    a1 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v11 length:32];
  }
  return a1;
}

id SGSha256ForStrings(void *a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(v4, 0, sizeof(v4));
  hashStrings(a1, a2, (unsigned __int8 *)v4);
  unsigned int v2 = _PASBytesToHex();
  return v2;
}

void hashStrings(void *a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (![v5 count])
  {
    uint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "void hashStrings(NSArray<NSString *> *__strong, NSData *__strong, uint8_t *)");
    [v18 handleFailureInFunction:v19, @"SGCrypto.m", 30, @"Invalid parameter not satisfying: %@", @"strings.count > 0" file lineNumber description];
  }
  md = a3;
  if (!a3)
  {
    uint64_t v20 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "void hashStrings(NSArray<NSString *> *__strong, NSData *__strong, uint8_t *)");
    [v20 handleFailureInFunction:v21, @"SGCrypto.m", 31, @"Invalid parameter not satisfying: %@", @"digest != NULL" file lineNumber description];
  }
  memset(&c, 0, sizeof(c));
  CC_SHA256_Init(&c);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v25;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v25 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(__CFString **)(*((void *)&v24 + 1) + 8 * v11);
        CStringPtr = CFStringGetCStringPtr(v12, 0x600u);
        if (CStringPtr)
        {
          CC_SHA256_Update(&c, CStringPtr, [(__CFString *)v12 length]);
        }
        else
        {
          memset(buffer, 0, sizeof(buffer));
          *(void *)len = 0;
          CFIndex v14 = [(__CFString *)v12 length];
          CFIndex v15 = 0;
          while (1)
          {
            v32.id location = v15;
            v32.length = v14;
            if (!CFStringGetBytes(v12, v32, 0x8000100u, 0, 0, (UInt8 *)buffer, 512, (CFIndex *)len)) {
              break;
            }
            CC_SHA256_Update(&c, buffer, len[0]);
            v15 += *(void *)len;
            v14 -= *(void *)len;
          }
        }
        ++v11;
      }
      while (v11 != v9);
      uint64_t v16 = [v7 countByEnumeratingWithState:&v24 objects:v30 count:16];
      uint64_t v9 = v16;
    }
    while (v16);
  }

  if (v6)
  {
    id v17 = v6;
    CC_SHA256_Update(&c, (const void *)[v17 bytes], objc_msgSend(v17, "length"));
  }
  CC_SHA256_Final(md, &c);
}

id SGSha256ForString(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  id v5 = a1;
  id v6 = objc_msgSend([v3 alloc], "initWithObjects:", v5, 0);

  id v7 = SGSha256ForStrings(v6, v4);

  return v7;
}

id SGSha256BytesForStrings(void *a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(v4, 0, sizeof(v4));
  hashStrings(a1, a2, (unsigned __int8 *)v4);
  unsigned int v2 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v4 length:32];
  return v2;
}

id SGSha256BytesForString(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  id v5 = a1;
  id v6 = objc_msgSend([v3 alloc], "initWithObjects:", v5, 0);

  id v7 = SGSha256BytesForStrings(v6, v4);

  return v7;
}

id SGRandomDataOfLength(size_t a1)
{
  id v2 = (id) [objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:a1];
  arc4random_buf((void *)[v2 mutableBytes], a1);
  return v2;
}

id SGSha256Data(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    memset(&v10, 0, sizeof(v10));
    id v4 = a1;
    CC_SHA256_Init(&v10);
    id v5 = v4;
    id v6 = (const void *)objc_msgSend(v5, "bytes", *(_OWORD *)v10.count, *(_OWORD *)&v10.hash[2], *(_OWORD *)&v10.hash[6], *(_OWORD *)&v10.wbuf[2], *(_OWORD *)&v10.wbuf[6], *(_OWORD *)&v10.wbuf[10], *(void *)&v10.wbuf[14]);
    CC_LONG v7 = [v5 length];

    CC_SHA256_Update(&v10, v6, v7);
    if (v3)
    {
      id v8 = v3;
      CC_SHA256_Update(&v10, (const void *)[v8 bytes], objc_msgSend(v8, "length"));
    }
    *(_OWORD *)md = 0u;
    long long v12 = 0u;
    CC_SHA256_Final(md, &v10);
    a1 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:md length:32];
  }

  return a1;
}

void sub_1CA712FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA71340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t __Block_byref_object_copy__11826(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11827(uint64_t a1)
{
}

void sub_1CA713828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA714390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __Block_byref_object_copy__11919(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11920(uint64_t a1)
{
}

void sub_1CA714960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1CA714AD4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    objc_storeStrong((id *)(*(void *)(*(void *)(v2 + 64) + 8) + 40), v4);
    *id v3 = 1;
    objc_end_catch();
    JUMPOUT(0x1CA714A9CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1CA714E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id numberedString(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = (const char *)[v3 UTF8String];
  size_t v5 = strlen(v4) + 21;
  memptr = 0;
  uint64_t v15 = 0;
  if (v5 > 0x200)
  {
    int v9 = malloc_type_posix_memalign(&memptr, 8uLL, v5, 0x100004077774924uLL);
    LOBYTE(v15) = 0;
    if (v9)
    {
      id v12 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v12);
    }
    id v6 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1F4188790]();
    id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v6, v5);
  }
  snprintf(v6, v5, "%s%lu", v4, a2);
  CC_LONG v7 = (void *)[[NSString alloc] initWithUTF8String:v6];
  if (!v7)
  {
    CC_SHA256_CTX v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString * _Nonnull numberedString(NSString * _Nonnull __strong, NSUInteger)");
    [v10 handleFailureInFunction:v11, @"SGSymbolicMappingTransformer.m", 56, @"Invalid parameter not satisfying: %@", @"numberedString" file lineNumber description];
  }
  if (v5 >= 0x201) {
    free(v6);
  }

  return v7;
}

id objCStringForCarrierKey(uint64_t a1)
{
  id v2 = [NSString alloc];
  if (*(unsigned char *)(a1 + 2)) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 2;
  }
  id v4 = (void *)[v2 initWithBytes:a1 length:v3 encoding:1];
  return v4;
}

id readUtf8String(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 dataOfLength:a2];
  id v4 = (void *)[[NSString alloc] initWithBytes:v3 length:a2 encoding:4];
  return v4;
}

id readLengthPrefixedString(void *a1)
{
  id v1 = a1;
  id v2 = readUtf8String(v1, bswap32(*(unsigned __int16 *)[v1 dataOfLength:2]) >> 16);

  return v2;
}

void sub_1CA718A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

size_t _SGTaggedCalloc_impl(objc_class *a1, unint64_t a2, unint64_t a3)
{
  if (!is_mul_ok(a2, a3)) {
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E4F1C4A0], @"malloc failed", 0, v3, v4));
  }
  size_t v5 = a2 * a3;
  return _SGTaggedMalloc_impl(a1, v5);
}

size_t _SGTaggedMalloc_impl(objc_class *a1, size_t a2)
{
  id Instance = class_createInstance(a1, a2);
  if (!Instance) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0]);
  }
  return (size_t)Instance + getTagSize();
}

size_t getTagSize()
{
  size_t result = getTagSize_size;
  if (getTagSize_size == -1)
  {
    id v1 = (objc_class *)objc_opt_class();
    size_t result = class_getInstanceSize(v1);
    getTagSize_size = result;
  }
  return result;
}

void _SGTaggedFree_impl(objc_class *a1, uint64_t a2)
{
  if (a2)
  {
    _SGTaggedTypeAssert_impl(a1, a2);
    uint64_t v3 = (void *)(a2 - getTagSize());
  }
}

Class _SGTaggedTypeAssert_impl(objc_class *a1, uint64_t a2)
{
  if (!a2)
  {
    id v6 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInFunction:objc_msgSend(NSString, "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), @"SGTaggedMalloc.m", 58, @"Invalid parameter not satisfying: %@", @"ptr" file lineNumber description];
  }
  if ((a2 & 3) != 0)
  {
    CC_LONG v7 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInFunction:objc_msgSend(NSString, "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), @"SGTaggedMalloc.m", 59, @"Invalid parameter not satisfying: %@", @"((uintptr_t)ptr & 0b11) == 0" file lineNumber description];
  }
  size_t TagSize = getTagSize();
  Class result = object_getClass((id)(a2 - TagSize));
  if (result != a1)
  {
    id v8 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    return (Class)[v8 handleFailureInFunction:objc_msgSend(NSString, "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), @"SGTaggedMalloc.m", 61, @"Invalid parameter not satisfying: %@", @"object_getClass(obj) == tag" file lineNumber description];
  }
  return result;
}

dispatch_data_t _SGTaggedVMAlloc_impl(objc_class *a1, size_t a2, void *a3)
{
  vm_address_t address = 0;
  vm_map_t v6 = *MEMORY[0x1E4F14960];
  size_t TagSize = getTagSize();
  if (vm_allocate(v6, &address, TagSize + a2, 1))
  {
    CC_SHA256_CTX v10 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "NSData *_SGTaggedVMAlloc_impl(Class, size_t, void **)"), @"SGTaggedMalloc.m", 68, @"Could not allocate virtual memory");
  }
  objc_constructInstance(a1, (void *)address);
  id v8 = (const void *)(address + getTagSize());
  vm_address_t address = (vm_address_t)v8;
  if (a3) {
    *a3 = v8;
  }
  return dispatch_data_create(v8, a2, 0, (dispatch_block_t)*MEMORY[0x1E4F14408]);
}

size_t _SGTaggedMallocAddTag_impl(objc_class *a1, void *a2)
{
  return (size_t)a2 + getTagSize();
}

BOOL SGMIMetricsSubmodelsStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  size_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  CC_LONG v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 72;
        goto LABEL_34;
      case 2u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 64;
        goto LABEL_34;
      case 3u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 96;
        goto LABEL_34;
      case 4u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 80;
        goto LABEL_34;
      case 5u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 56;
        goto LABEL_34;
      case 6u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 24;
        goto LABEL_34;
      case 7u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 16;
        goto LABEL_34;
      case 8u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 32;
        goto LABEL_34;
      case 9u:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 8;
        goto LABEL_34;
      case 0xAu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 104;
        goto LABEL_34;
      case 0xBu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 88;
        goto LABEL_34;
      case 0xCu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 40;
        goto LABEL_34;
      case 0xDu:
        uint64_t v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        uint64_t v18 = 48;
LABEL_34:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (PBReaderPlaceMark() && SGMIMetricsSubmodelStatsReadFrom((uint64_t)v17, a2))
        {
          PBReaderRecallMark();

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

uint64_t __Block_byref_object_copy__12776(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__12777(uint64_t a1)
{
}

BOOL doInsert(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v3 = a1 + 6150 * (a2 & 7);
  int v4 = 10;
  unsigned int v5 = a2;
  LOBYTE(v6) = 1;
  do
  {
    unint64_t v7 = v5 % 0x1806;
    if (v6)
    {
      unint64_t v8 = v7 >> 3;
      int v9 = *(unsigned __int8 *)(v3 + (v7 >> 3));
      int v10 = 1 << (v7 & a3);
      BOOL v6 = (v10 & v9) != 0;
    }
    else
    {
      BOOL v6 = 0;
      int v10 = 1 << ((v5 % 0x1806) & a3);
      unint64_t v8 = v7 >> 3;
      LOBYTE(v9) = *(unsigned char *)(v3 + (v7 >> 3));
    }
    *(unsigned char *)(v3 + v8) = v9 | v10;
    v5 += a2;
    --v4;
  }
  while (v4);
  return !v6;
}

uint64_t h64(void *a1)
{
  v2[2] = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  v2[1] = 0;
  SGMurmurhashString(a1, 12345, v2);
  return v2[0];
}

BOOL SGAddSignificantPseudoContactsEmail(void *a1)
{
  id v1 = a1;
  id v2 = [SGBloomFilter alloc];
  uint64_t v3 = +[SGPaths suggestionsDirectory];
  int v4 = [(SGBloomFilter *)v2 initWithDirectory:v3 name:@"significant-pseudo-contacts.bf"];

  BOOL v5 = [(SGBloomFilter *)v4 exists:v1];
  if (!v5) {
    [(SGBloomFilter *)v4 add:v1];
  }

  return !v5;
}

void sub_1CA721600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13492(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__13493(uint64_t a1)
{
}

void sub_1CA72183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA721F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA723734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13825(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__13826(uint64_t a1)
{
}

void sub_1CA72389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7239EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA723B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA723C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7243F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA724808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1CA725280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1CA725654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CA727378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA727704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA727B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1CA729C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA729EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA72A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA72A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA72AA64(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v20 = objc_begin_catch(exc_buf);
    uint64_t v21 = [v20 name];
    uint64_t v22 = (void *)*MEMORY[0x1E4F1C3C8];

    if (v21 == v22)
    {
      id v23 = sgLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        a9 = 0;
        _os_log_error_impl(&dword_1CA650000, v23, OS_LOG_TYPE_ERROR, "Corrupted persistent logging store! Removing corrupted store.", (uint8_t *)&a9, 2u);
      }

      int has_internal_diagnostics = os_variant_has_internal_diagnostics();
      long long v25 = *(void **)(v18 + 3256);
      if (has_internal_diagnostics)
      {
        long long v26 = [v25 defaultManager];
        long long v27 = [v17 stringByAppendingString:@".old"];
        [v26 moveItemAtPath:v17 toPath:v27 error:0];
      }
      else
      {
        long long v26 = [v25 defaultManager];
        [v26 removeItemAtPath:v17 error:0];
      }

      xpc_transaction_exit_clean();
      objc_end_catch();
      JUMPOUT(0x1CA72A9C0);
    }
    int v28 = sgLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      a9 = 0;
      _os_log_debug_impl(&dword_1CA650000, v28, OS_LOG_TYPE_DEBUG, "Exception we're not catching", (uint8_t *)&a9, 2u);
    }

    objc_exception_throw(v20);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1CA72C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA72CF6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1CA72E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA72EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const char *identifierForActivityId(uint64_t a1)
{
  if (a1 < 0xF) {
    return off_1E65B81D8[a1];
  }
  uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
  int v4 = [NSString stringWithUTF8String:"const char *identifierForActivityId(SGXPCActivity)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGXPCActivity.m", 77, @"Unknown activity id: %i", a1);

  return "";
}

id nullHandler()
{
  if (nullHandler_onceToken != -1) {
    dispatch_once(&nullHandler_onceToken, &__block_literal_global_126);
  }
  uint64_t v0 = (void *)MEMORY[0x1CB79B4C0](nullHandler_instance);
  return v0;
}

uint64_t __nullHandler_block_invoke()
{
  nullHandler_instance = [&__block_literal_global_128_14412 copy];
  return MEMORY[0x1F41817F8]();
}

id arrayFilledWith(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 15;
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:15];
  do
  {
    [v3 addObject:v1];
    --v2;
  }
  while (v2);

  return v3;
}

void sub_1CA731B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id spotlightEscaped(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = [NSString alloc];
  int v4 = (void *)MEMORY[0x1E4F28D90];
  BOOL v5 = _PASRepairString();
  BOOL v6 = [v4 dataWithJSONObject:v5 options:4 error:0];
  unint64_t v7 = (void *)[v3 initWithData:v6 encoding:4];

  if (!v7)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    int v10 = [NSString stringWithUTF8String:"NSString * _Nonnull spotlightEscaped(NSString * _Nonnull __strong)"];
    [v9 handleFailureInFunction:v10, @"SGEnrichmentWritebackAdapter.m", 43, @"Invalid parameter not satisfying: %@", @"escaped" file lineNumber description];
  }
  return v7;
}

BOOL SGMIMetricsSubmodelStatsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
              goto LABEL_61;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2re2::Compiler::Compile(this, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
              goto LABEL_64;
            }
          }
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
          goto LABEL_62;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
              goto LABEL_61;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
          goto LABEL_62;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
              goto LABEL_61;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
          goto LABEL_62;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
              goto LABEL_61;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
          goto LABEL_62;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
          goto LABEL_62;
        }
        v40 += 7;
        BOOL v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
          goto LABEL_64;
        }
      }
      long long v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
LABEL_61:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA734794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14860(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__14861(uint64_t a1)
{
}

void sub_1CA735544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SGJSGarbageCollect(uint64_t a1)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (void (*)(uint64_t))getJSGarbageCollectSymbolLoc_ptr;
  unsigned int v9 = getJSGarbageCollectSymbolLoc_ptr;
  if (!getJSGarbageCollectSymbolLoc_ptr)
  {
    id v3 = JavaScriptCoreLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v3, "JSGarbageCollect");
    getJSGarbageCollectSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    uint64_t v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    int v4 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v5 = [NSString stringWithUTF8String:"void SGJSGarbageCollect(JSContextRef)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGReverseTemplateJS.m", 56, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7358D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getJSGarbageCollectSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  Class result = dlsym(v2, "JSGarbageCollect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSGarbageCollectSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *JavaScriptCoreLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!JavaScriptCoreLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __JavaScriptCoreLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E65B85C8;
    uint64_t v6 = 0;
    JavaScriptCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)JavaScriptCoreLibraryCore_frameworkLibrary;
  if (!JavaScriptCoreLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *JavaScriptCoreLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGReverseTemplateJS.m", 45, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __JavaScriptCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  JavaScriptCoreLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1CA73850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getJSContextGetGroupSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSContextGetGroup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSContextGetGroupSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getJSStringCreateWithUTF8CStringSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSStringCreateWithUTF8CString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSStringCreateWithUTF8CStringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getJSScriptCreateReferencingImmortalASCIITextSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSScriptCreateReferencingImmortalASCIIText");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSScriptCreateReferencingImmortalASCIITextSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getJSStringReleaseSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSStringRelease");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSStringReleaseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getJSScriptEvaluateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSScriptEvaluate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSScriptEvaluateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getJSScriptReleaseSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSScriptRelease");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSScriptReleaseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getJSValueClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getJSValueClass_softClass;
  uint64_t v7 = getJSValueClass_softClass;
  if (!getJSValueClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getJSValueClass_block_invoke;
    v3[3] = &unk_1E65C0148;
    v3[4] = &v4;
    __getJSValueClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1CA7387EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getJSValueClass_block_invoke(uint64_t a1)
{
  JavaScriptCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("JSValue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getJSValueClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getJSValueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGReverseTemplateJS.m", 47, @"Unable to find class %s", "JSValue");

    __break(1u);
  }
}

void sub_1CA73A398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_1CA73A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getJSObjectMakeArrayBufferWithBytesNoCopySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSObjectMakeArrayBufferWithBytesNoCopy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSObjectMakeArrayBufferWithBytesNoCopySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void typedArrayDeallocatorRelease(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1CA73B40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, id *location)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a10);
  _Block_object_dispose((const void *)(v17 - 200), 8);
  _Block_object_dispose((const void *)(v17 - 168), 8);
  objc_destroyWeak((id *)(v17 - 136));
  _Unwind_Resume(a1);
}

id getJSContextClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getJSContextClass_softClass;
  uint64_t v7 = getJSContextClass_softClass;
  if (!getJSContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getJSContextClass_block_invoke;
    v3[3] = &unk_1E65C0148;
    v3[4] = &v4;
    __getJSContextClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1CA73C0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getJSContextClass_block_invoke(uint64_t a1)
{
  JavaScriptCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("JSContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getJSContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getJSContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGReverseTemplateJS.m", 46, @"Unable to find class %s", "JSContext");

    __break(1u);
  }
}

void sub_1CA73CDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getJSVirtualMachineClass_block_invoke(uint64_t a1)
{
  JavaScriptCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("JSVirtualMachine");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getJSVirtualMachineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getJSVirtualMachineClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGReverseTemplateJS.m", 48, @"Unable to find class %s", "JSVirtualMachine");

    __break(1u);
  }
}

void sub_1CA73D120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA73D790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA73DBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73DFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15404(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__15405(uint64_t a1)
{
}

void sub_1CA73EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA73F918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getPKPassLibraryClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPKPassLibraryClass_softClass;
  uint64_t v7 = getPKPassLibraryClass_softClass;
  if (!getPKPassLibraryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPKPassLibraryClass_block_invoke;
    v3[3] = &unk_1E65C0148;
    v3[4] = &v4;
    __getPKPassLibraryClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1CA73FC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPKPassLibraryClass_block_invoke(uint64_t a1)
{
  PassKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PKPassLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPKPassLibraryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPKPassLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGWalletPassAttachmentDissector.m", 31, @"Unable to find class %s", "PKPassLibrary");

    __break(1u);
  }
}

void *PassKitLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!PassKitLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __PassKitLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E65B8738;
    uint64_t v6 = 0;
    PassKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)PassKitLibraryCore_frameworkLibrary;
  if (!PassKitLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *PassKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGWalletPassAttachmentDissector.m", 29, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __PassKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PassKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1CA73FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPKAddPassesViewControllerClass_block_invoke(uint64_t a1)
{
  PassKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PKAddPassesViewController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPKAddPassesViewControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPKAddPassesViewControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGWalletPassAttachmentDissector.m", 32, @"Unable to find class %s", "PKAddPassesViewController");

    __break(1u);
  }
}

void sub_1CA740900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void __getPKPassClass_block_invoke(uint64_t a1)
{
  PassKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PKPass");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPKPassClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPKPassClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGWalletPassAttachmentDissector.m", 30, @"Unable to find class %s", "PKPass");

    __break(1u);
  }
}

__CFString *walletPassStateDescription(int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = @"SGRealtimeWalletPassStateNew";
  switch(a1)
  {
    case 0:
      id v3 = sgLogHandle();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4[0] = 67109120;
        v4[1] = 0;
        _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "walletPassStateDescription: Error in returning string for wallet pass state: %u", (uint8_t *)v4, 8u);
      }

      uint64_t result = @"SGRealtimeWalletPassUnknown";
      break;
    case 2:
      uint64_t result = @"SGRealtimeWalletPassStateUpdate";
      break;
    case 3:
      uint64_t result = @"SGRealtimeWalletPassStateDuplicate";
      break;
    case 4:
      uint64_t result = @"SGRealtimeWalletPassStateCancellation";
      break;
    default:
      return result;
  }
  return result;
}

void getPKPassSemanticDateKeyOriginalDepartureDate()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticDateKeyOriginalDepartureDate");
    getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticDateKeyOriginalDepartureDate(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 43, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7411C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticDateKeyOriginalDepartureDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getPKPassSemanticStringKeyEventType()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyEventType");
    getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyEventType(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 33, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA741D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyEventName()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyEventNameSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyEventNameSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyEventNameSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyEventName");
    getPKPassSemanticStringKeyEventNameSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyEventName(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA741EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyEventStartDate()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticDateKeyEventStartDate");
    getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticDateKeyEventStartDate(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 35, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyEventEndDate()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticDateKeyEventEndDate");
    getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticDateKeyEventEndDate(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 36, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticNumberKeySilenceRequested()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr;
  if (!getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticNumberKeySilenceRequested");
    getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticNumberKeySilenceRequested(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 37, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7422F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueName()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyVenueName");
    getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyVenueName(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 38, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueRoom()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyVenueRoom");
    getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyVenueRoom(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 39, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7425C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueEntrance()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyVenueEntrance");
    getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyVenueEntrance(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenuePhoneNumber()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyVenuePhoneNumber");
    getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyVenuePhoneNumber(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 41, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyVenueLocation()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticLocationKeyVenueLocation");
    getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticLocationKeyVenueLocation(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 42, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7429F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyOriginalArrivalDate()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticDateKeyOriginalArrivalDate");
    getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticDateKeyOriginalArrivalDate(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 44, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDepartureLocationDescription()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyDepartureLocationDescription");
    getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyDepartureLocationDescription(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 45, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyDepartureLocation()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticLocationKeyDepartureLocation");
    getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticLocationKeyDepartureLocation(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 53, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyDestinationLocation()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticLocationKeyDestinationLocation");
    getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticLocationKeyDestinationLocation(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 46, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA742F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDestinationLocationDescription()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyDestinationLocationDescription");
    getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyDestinationLocationDescription(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 47, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA743100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyFlightCode()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyFlightCode");
    getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyFlightCode(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 48, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA743268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticNumberKeyFlightNumber()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr;
  if (!getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticNumberKeyFlightNumber");
    getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticNumberKeyFlightNumber(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 49, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7433D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyAirlineCode()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyAirlineCode");
    getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyAirlineCode(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA743538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDepartureAirportCode()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyDepartureAirportCode");
    getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyDepartureAirportCode(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 51, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA7436A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDestinationAirportCode()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr;
  uint64_t v9 = getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr)
  {
    id v1 = PassKitLibrary();
    _OWORD v7[3] = (uint64_t)dlsym(v1, "PKPassSemanticStringKeyDestinationAirportCode");
    getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"PKPassSemanticStringKey getPKPassSemanticStringKeyDestinationAirportCode(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletPassAttachmentDissector.m", 52, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CA743808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyDestinationAirportCode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyDepartureAirportCode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getPKPassSemanticStringKeyAirlineCodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyAirlineCode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticNumberKeyFlightNumberSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticNumberKeyFlightNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyFlightCodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyFlightCode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyDestinationLocationDescription");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

void *__getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticLocationKeyDestinationLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticLocationKeyDepartureLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyDepartureLocationDescription");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticDateKeyOriginalArrivalDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticLocationKeyVenueLocationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticLocationKeyVenueLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyVenuePhoneNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyVenueEntranceSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyVenueEntrance");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyVenueRoomSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyVenueRoom");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyVenueNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyVenueName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticNumberKeySilenceRequested");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticDateKeyEventEndDateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticDateKeyEventEndDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticDateKeyEventStartDateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticDateKeyEventStartDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyEventNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyEventName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyEventNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPKPassSemanticStringKeyEventTypeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = PassKitLibrary();
  uint64_t result = dlsym(v2, "PKPassSemanticStringKeyEventType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t stateForWalletPassStateString(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isEqualToString:@"SGRealtimeWalletPassStateNew"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletPassStateUpdate"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletPassStateCancellation"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletPassStateDuplicate"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    id v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v1;
      _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "stateForWalletPassStateString: Error in returning wallet pass state for string: %@", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1CA7448F0(_Unwind_Exception *a1)
{
}

void sub_1CA744910(void *a1)
{
}

void sub_1CA7452EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15751(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__15752(uint64_t a1)
{
}

void sub_1CA74585C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA745C20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA745E54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA74626C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA74646C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CFString *qmarksSeparatedByCommas(unint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = a1 - 129;
    if (a1 > 0x81)
    {
      id v3 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v4 = qmarksSeparatedByCommas(129);
      uint64_t v2 = (__CFString *)[v4 mutableCopy];

      do
      {
        [(__CFString *)v2 appendString:@",?"];
        --v1;
      }
      while (v1);
    }
    else
    {
      uint64_t v2 = (__CFString *)[[NSString alloc] initWithBytesNoCopy:"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?" length:2 * a1 - 1 encoding:1 freeWhenDone:0];
    }
  }
  else
  {
    uint64_t v2 = &stru_1F24EEF20;
  }
  return v2;
}

uint64_t wrappedBusyCallbackForTiming(void *a1, uint64_t a2)
{
  id v3 = a1;
  busy = (uint64_t (*)(uint64_t, uint64_t))_sqlite3_system_busy_handler();
  uint64_t v5 = busy([v3 handle], a2);
  v3[2] = mach_absolute_time();

  return v5;
}

void firstStringAfterPrefix(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 != 1)
  {
    CFIndex v14 = [MEMORY[0x1E4F28B00] currentHandler];
    int v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void firstStringAfterPrefix(sqlite3_context *, int, sqlite3_value **)");
    [v14 handleFailureInFunction:v15, @"SGSqliteDatabase.m", 535, @"Invalid parameter not satisfying: %@", @"argc == 1" file lineNumber description];
  }
  int v5 = sqlite3_value_bytes(*a3);
  if (v5)
  {
    unsigned int v6 = v5;
    uint64_t v7 = sqlite3_value_text(*a3);
    uint64_t v8 = v7;
    if (v6 >= 0x7FFFFFFF) {
      uint64_t v9 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v9 = v6;
    }
    while (1)
    {
      unsigned int v10 = v9;
      if (v9-- < 1) {
        break;
      }
      if (v7[v9] != 255)
      {
        memptr = 0;
        uint64_t v20 = 0;
        if (v10 > 0x100)
        {
          int v16 = malloc_type_posix_memalign(&memptr, 8uLL, v10, 0x56215E3DuLL);
          LOBYTE(v2re2::Compiler::Compile(this, 0) = 0;
          if (v16)
          {
            id v17 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
            objc_exception_throw(v17);
          }
          char v13 = (char *)memptr;
        }
        else
        {
          MEMORY[0x1F4188790]();
          char v13 = (char *)&v18 - ((v12 + 15) & 0x1FFFFFFF0);
          bzero(v13, v12);
        }
        memcpy(v13, v8, v9);
        v13[v9] = v8[v9] + 1;
        sqlite3_result_text(a1, v13, v10, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        if (v10 >= 0x101) {
          free(v13);
        }
        return;
      }
    }
  }
  sqlite3_result_zeroblob(a1, 0);
}

void delimitedString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 != 2)
  {
    uint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v20 = objc_msgSend(NSString, "stringWithUTF8String:", "void delimitedString(sqlite3_context *, int, sqlite3_value **)");
    [v19 handleFailureInFunction:v20, @"SGSqliteDatabase.m", 484, @"Invalid parameter not satisfying: %@", @"argc == 2" file lineNumber description];
  }
  int v5 = sqlite3_value_int(a3[1]);
  unsigned int v6 = sqlite3_value_text(*a3);
  if (v5 < 0)
  {
    sqlite3_result_null(a1);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (void *)MEMORY[0x1CB79B230]();
  while (1)
  {
    int v9 = *v7;
    if (v9 == 92)
    {
      if (v7[1]) {
        ++v7;
      }
      goto LABEL_14;
    }
    if (v9 == 124) {
      break;
    }
    if (!*v7)
    {
      sqlite3_result_null(a1);
      goto LABEL_37;
    }
LABEL_14:
    ++v7;
  }
  BOOL v10 = __OFSUB__(v5--, 1);
  if (v5 < 0 == v10) {
    goto LABEL_14;
  }
  uint64_t v11 = (unsigned __int8 *)(v7 + 1);
  size_t v12 = (unsigned __int8 *)(v7 + 1);
  while (2)
  {
    int v13 = *v12;
    if (v13 == 92)
    {
      if (v12[1]) {
        ++v12;
      }
      goto LABEL_24;
    }
    if (*v12 && v13 != 124)
    {
LABEL_24:
      ++v12;
      continue;
    }
    break;
  }
  unint64_t v14 = v12 - v7;
  memptr = 0;
  uint64_t v25 = 0;
  if ((unint64_t)(v12 - v7) > 0x100)
  {
    int v21 = malloc_type_posix_memalign(&memptr, 8uLL, v12 - v7, 0x19CF9101uLL);
    LOBYTE(v25) = 0;
    if (v21)
    {
      id v22 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v22);
    }
    int v15 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1F4188790]();
    int v15 = (char *)&v23 - ((v12 - v11 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v15, v12 - v11 + 1);
  }
  int v16 = v15;
  if (v11 < v12)
  {
    int v16 = v15;
    do
    {
      if (v11 + 1 < v12 && *v11 == 92) {
        ++v11;
      }
      char v18 = *v11++;
      *v16++ = v18;
    }
    while (v11 < v12);
  }
  *int v16 = 0;
  sqlite3_result_text(a1, v15, v16 - v15, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v14 >= 0x101) {
    free(v15);
  }
LABEL_37:
}

void tagsHaveEscapedTag(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 != 2)
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void tagsHaveEscapedTag(sqlite3_context *, int, sqlite3_value **)");
    [v9 handleFailureInFunction:v10, @"SGSqliteDatabase.m", 472, @"Invalid parameter not satisfying: %@", @"argc == 2" file lineNumber description];
  }
  int v5 = (char *)sqlite3_value_text(*a3);
  unsigned int v6 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
  size_t v7 = strlen((const char *)v6);
  BOOL v8 = escapedTagInTags(v5, (char *)v6, v7);
  sqlite3_result_int(a1, v8);
}

BOOL escapedTagInTags(char *__s, char *a2, uint64_t a3)
{
  int v5 = a2 + 1;
  int v6 = *a2;
  size_t v7 = a3 - 1;
  BOOL v8 = __s;
  while (1)
  {
    int v9 = strchr(v8, v6);
    BOOL v10 = v9;
    if (!v9) {
      break;
    }
    BOOL v8 = v9 + 1;
    if (!strncmp(v9 + 1, v5, v7)
      && (v10 == __s || *(v10 - 1) != 92 || (unint64_t)(v10 - __s) >= 2 && *(v10 - 2) == 92))
    {
      int v11 = v10[a3];
      if (v11 == 124 || v11 == 0) {
        break;
      }
    }
  }
  return v10 != 0;
}

void hasInhumanTag(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 != 1)
  {
    size_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void hasInhumanTag(sqlite3_context *, int, sqlite3_value **)");
    [v7 handleFailureInFunction:v8, @"SGSqliteDatabase.m", 466, @"Invalid parameter not satisfying: %@", @"argc == 1" file lineNumber description];
  }
  int v5 = (char *)sqlite3_value_text(*a3);
  BOOL v6 = escapedTagInTags(v5, "|inhuman", 8);
  sqlite3_result_int(a1, v6);
}

uint64_t _indexForBindParam(sqlite3_stmt *a1, char *zName)
{
  if (a1)
  {
    if (zName) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v6 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
    [v6 handleFailureInFunction:v7, @"SGSqliteDatabase.m", 834, @"Invalid parameter not satisfying: %@", @"stmt" file lineNumber description];

    if (zName) {
      goto LABEL_3;
    }
  }
  BOOL v8 = [MEMORY[0x1E4F28B00] currentHandler];
  int v9 = objc_msgSend(NSString, "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
  [v8 handleFailureInFunction:v9, @"SGSqliteDatabase.m", 835, @"Invalid parameter not satisfying: %@", @"name" file lineNumber description];

LABEL_3:
  uint64_t v4 = sqlite3_bind_parameter_index(a1, zName);
  if ((int)v4 <= 0)
  {
    BOOL v10 = [MEMORY[0x1E4F28B00] currentHandler];
    int v11 = objc_msgSend(NSString, "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"SGSqliteDatabase.m", 837, @"Unknown bind parameter \"%s\"", zName);
  }
  return v4;
}

uint64_t sqlite3_bind_nsdata(sqlite3_stmt *a1, int a2, id a3)
{
  id v5 = a3;
  BOOL v6 = (const void *)[v5 bytes];
  sqlite3_uint64 v7 = [v5 length];

  return sqlite3_bind_blob64(a1, a2, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

char *sqlite3_column_nsstring(sqlite3_stmt *a1, int a2)
{
  uint64_t v2 = (char *)sqlite3_column_text(a1, a2);
  if (v2) {
    uint64_t v2 = (char *)CFStringCreateWithCString(0, v2, 0x8000100u);
  }
  return v2;
}

uint64_t sqlite3_bind_nsstring(sqlite3_stmt *a1, int a2, id a3)
{
  id v5 = (const char *)[a3 UTF8String];
  return sqlite3_bind_text(a1, a2, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id sqlite3_column_nssecurecoding(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (v7)
  {
    BOOL v8 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v6 length:v7 freeWhenDone:0];
    int v9 = (void *)MEMORY[0x1CB79B230]();
    BOOL v10 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v5 fromData:v8 error:0];
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_1CA7497D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__16008(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__16009(uint64_t a1)
{
}

uint64_t *re2::DFA::DFA(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  *((unsigned char *)a1 + 16) = 0;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  a1[27] = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 3), 0)) {
    abort();
  }
  a1[28] = 0;
  *((_OWORD *)a1 + 16) = 0u;
  a1[56] = 0;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 2re2::Compiler::Compile(this, 0) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  a1[29] = 0;
  a1[30] = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 32), 0)) {
    abort();
  }
  int v7 = 0;
  a1[57] = a4;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *((_DWORD *)a1 + 126) = 1065353216;
  a1[64] = 0;
  *((_DWORD *)a1 + 13re2::Compiler::Compile(this, 0) = -1;
  a1[66] = 0;
  *((_DWORD *)a1 + 134) = -1;
  a1[68] = 0;
  *((_DWORD *)a1 + 138) = -1;
  a1[70] = 0;
  *((_DWORD *)a1 + 142) = -1;
  a1[72] = 0;
  *((_DWORD *)a1 + 146) = -1;
  a1[74] = 0;
  *((_DWORD *)a1 + 15re2::Compiler::Compile(this, 0) = -1;
  a1[76] = 0;
  *((_DWORD *)a1 + 154) = -1;
  a1[78] = 0;
  *((_DWORD *)a1 + 158) = -1;
  *((unsigned char *)a1 + 64re2::Compiler::Compile(this, 0) = 0;
  *((_DWORD *)a1 + 3) = 0;
  int v8 = *(_DWORD *)(a2 + 12);
  if (*((_DWORD *)a1 + 2) == 1)
  {
    *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 8);
    int v7 = v8;
  }
  int v9 = v7 + 2 * v8;
  *((_DWORD *)a1 + 62) = v9;
  uint64_t v10 = *a1;
  uint64_t v11 = *(int *)(*a1 + 12) + (uint64_t)v7;
  uint64_t v12 = a4 - (16 * v11 + 4 * v9) - 648;
  a1[57] = v12;
  if (v12 >= 0)
  {
    a1[58] = v12;
    if (v12 >= 20 * (8 * *(int *)(v10 + 20) + 4 * v11) + 640) {
      operator new();
    }
  }
  *((unsigned char *)a1 + 16) = 1;
  return a1;
}

void sub_1CA750B78(_Unwind_Exception *a1)
{
  MEMORY[0x1CB79A8C0](v4, 0x1010C40C2DF3DD7);
  std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100](v3);
  re2::Mutex::~Mutex(v2);
  re2::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void re2::Mutex::~Mutex(pthread_rwlock_t *this)
{
  if (pthread_rwlock_destroy(this)) {
    abort();
  }
}

void re2::DFA::~DFA(re2::DFA *this)
{
  uint64_t v2 = *((void *)this + 28);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      MEMORY[0x1CB79A8A0](v3, 0x1000C8052888210);
    }
    uint64_t v4 = *(void *)(v2 + 16);
    if (v4) {
      MEMORY[0x1CB79A8A0](v4, 0x1000C8052888210);
    }
    MEMORY[0x1CB79A8C0](v2, 0x1010C40C2DF3DD7);
  }
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      MEMORY[0x1CB79A8A0](v6, 0x1000C8052888210);
    }
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7) {
      MEMORY[0x1CB79A8A0](v7, 0x1000C8052888210);
    }
    MEMORY[0x1CB79A8C0](v5, 0x1010C40C2DF3DD7);
  }
  uint64_t v8 = *((void *)this + 30);
  if (v8) {
    MEMORY[0x1CB79A8A0](v8, 0x1000C8052888210);
  }
  re2::DFA::ClearCache(this);
  int v9 = (void *)*((void *)this + 61);
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      operator delete(v9);
      int v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = (void *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v11) {
    operator delete(v11);
  }
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 256))) {
    abort();
  }
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 24))) {
    abort();
  }
}

void re2::DFA::ClearCache(re2::DFA *this)
{
  unint64_t v2 = *((void *)this + 62);
  if (v2)
  {
    if (v2 >> 61) {
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = (char *)operator new(8 * v2);
    uint64_t v4 = &v3[8 * v2];
    uint64_t v5 = (void *)*((void *)this + 61);
    if (v5) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)*((void *)this + 61);
    if (v5)
    {
LABEL_4:
      uint64_t v6 = v3;
      while (v6 < v4)
      {
        *(void *)uint64_t v6 = v5[2];
        v6 += 8;
LABEL_6:
        uint64_t v5 = (void *)*v5;
        if (!v5)
        {
          if (!*((void *)this + 62)) {
            goto LABEL_36;
          }
LABEL_46:
          uint64_t v25 = (void *)*((void *)this + 61);
          if (v25)
          {
            do
            {
              uint64_t v26 = (void *)*v25;
              operator delete(v25);
              uint64_t v25 = v26;
            }
            while (v26);
          }
          *((void *)this + 61) = 0;
          uint64_t v27 = *((void *)this + 60);
          if (v27)
          {
            for (uint64_t i = 0; i != v27; ++i)
              *(void *)(*((void *)this + 59) + 8 * i) = 0;
          }
          *((void *)this + 62) = 0;
          uint64_t v21 = v6 - v3;
          if (v6 == v3) {
            goto LABEL_52;
          }
LABEL_37:
          unint64_t v22 = v21 >> 3;
          if (v22 <= 1) {
            uint64_t v23 = 1;
          }
          else {
            uint64_t v23 = v22;
          }
          long long v24 = v3;
          do
          {
            if (*(void *)v24) {
              MEMORY[0x1CB79A8A0](*(void *)v24, 0x1000C8077774924);
            }
            v24 += 8;
            --v23;
          }
          while (v23);
          goto LABEL_53;
        }
      }
      uint64_t v7 = (v6 - v3) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
      }
      if ((v4 - v3) >> 2 > v8) {
        unint64_t v8 = (v4 - v3) >> 2;
      }
      if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9)
      {
        if (v9 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v10 = operator new(8 * v9);
      }
      else
      {
        uint64_t v10 = 0;
      }
      uint64_t v11 = &v10[8 * v7];
      *(void *)uint64_t v11 = v5[2];
      uint64_t v12 = v11 + 8;
      if (v6 != v3)
      {
        unint64_t v13 = v6 - 8 - v3;
        if (v13 >= 0x168)
        {
          if (&v10[v6 - v3 - 8 - (v13 & 0xFFFFFFFFFFFFFFF8)] > &v10[v6 - v3 - 8])
          {
            unint64_t v14 = v6;
          }
          else if (&v6[-(v13 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
          {
            unint64_t v14 = v6;
          }
          else if ((unint64_t)(v3 - v10) >= 0x20)
          {
            uint64_t v16 = (v13 >> 3) + 1;
            unint64_t v14 = &v6[-8 * (v16 & 0x3FFFFFFFFFFFFFFCLL)];
            id v17 = &v10[8 * v7 - 16];
            char v18 = v6 - 16;
            uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v20 = *(_OWORD *)v18;
              *(v17 - 1) = *((_OWORD *)v18 - 1);
              *id v17 = v20;
              v17 -= 2;
              v18 -= 32;
              v19 -= 4;
            }
            while (v19);
            v11 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
            if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_22;
            }
          }
          else
          {
            unint64_t v14 = v6;
          }
        }
        else
        {
          unint64_t v14 = v6;
        }
        do
        {
          uint64_t v15 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v11 - 1) = v15;
          v11 -= 8;
        }
        while (v14 != v3);
      }
LABEL_22:
      uint64_t v4 = &v10[8 * v9];
      if (v3) {
        operator delete(v3);
      }
      uint64_t v3 = v11;
      uint64_t v6 = v12;
      goto LABEL_6;
    }
  }
  uint64_t v6 = v3;
  if (v2) {
    goto LABEL_46;
  }
LABEL_36:
  uint64_t v21 = v6 - v3;
  if (v6 != v3) {
    goto LABEL_37;
  }
LABEL_52:
  if (v3)
  {
LABEL_53:
    operator delete(v3);
  }
}

void sub_1CA751070(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *re2::DFA::DumpWorkq@<X0>(std::string *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, std::string *a8@<X8>)
{
  a8->__r_.__value_.__r.__words[0] = 0;
  a8->__r_.__value_.__l.__size_ = 0;
  a8->__r_.__value_.__r.__words[2] = 0;
  if (LODWORD(result->__r_.__value_.__l.__data_))
  {
    unint64_t v9 = result;
    uint64_t v10 = (_DWORD *)result->__r_.__value_.__r.__words[2];
    uint64_t v11 = "";
    do
    {
      if (SHIDWORD(v9[1].__r_.__value_.__r.__words[0]) > *v10)
      {
        uint64_t result = re2::StringAppendF(a8, "%s%d", a2, a3, a4, a5, a6, a7, (char)v11);
        uint64_t v11 = ",";
      }
      else
      {
        uint64_t result = re2::StringAppendF(a8, "|", a2, a3, a4, a5, a6, a7, v12);
        uint64_t v11 = "";
      }
      ++v10;
    }
    while (v10 != (_DWORD *)(v9->__r_.__value_.__r.__words[2] + 4 * SLODWORD(v9->__r_.__value_.__l.__data_)));
  }
  return result;
}

void sub_1CA751160(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *re2::DFA::DumpState@<X0>(std::string *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v8 = result;
  if ((unint64_t)result >= 3)
  {
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    re2::StringAppendF((std::string *)a8, "(%p)", a2, a3, a4, a5, a6, a7, (char)result);
    if (SLODWORD(v8->__r_.__value_.__r.__words[1]) >= 1)
    {
      uint64_t v16 = 0;
      id v17 = "";
      do
      {
        if (*(_DWORD *)(v8->__r_.__value_.__r.__words[0] + 4 * v16) == -1)
        {
          re2::StringAppendF((std::string *)a8, "|", v10, v11, v12, v13, v14, v15, v18);
          id v17 = "";
        }
        else
        {
          re2::StringAppendF((std::string *)a8, "%s%d", v10, v11, v12, v13, v14, v15, (char)v17);
          id v17 = ",";
        }
        ++v16;
      }
      while (v16 < SLODWORD(v8->__r_.__value_.__r.__words[1]));
    }
    return re2::StringAppendF((std::string *)a8, " flag=%#x", v10, v11, v12, v13, v14, v15, HIDWORD(v8->__r_.__value_.__r.__words[1]));
  }
  else
  {
    *(unsigned char *)(a8 + 23) = 1;
    *(_WORD *)a8 = (0x2A585Fu >> (8 * (_BYTE)result));
  }
  return result;
}

void sub_1CA7512A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re2::DFA::WorkqToCachedState(re2::DFA *a1, int *a2, int a3)
{
  if (a2[8] + a2[7] <= 0x2000)
  {
    pthread_mutex_lock(&re2::instScratchLock);
    uint64_t v7 = &re2::instScratch;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v18 = 0;
    int v9 = a3 & 0x1000;
LABEL_67:
    int v16 = 0;
    a3 = v9;
    if (v18 | v9) {
      goto LABEL_57;
    }
    goto LABEL_68;
  }
  uint64_t v7 = (int *)malloc_type_malloc(4 * (a2[8] + a2[7]), 0x100004052888210uLL);
  if (!*a2) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v8 = (int *)*((void *)a2 + 2);
  int v9 = a3 & 0x1000;
  int v10 = *v8;
  if (a2[7] <= *v8)
  {
    uint64_t v11 = 0;
    int v16 = 0;
    char v17 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = *(void *)(*(void *)a1 + 32);
    uint64_t v14 = (_DWORD *)(v13 + 8 * v10);
    unsigned int v15 = *v14 & 7;
    if (v15 > 5)
    {
      int v16 = 0;
      char v17 = 0;
    }
    else
    {
      if (((1 << v15) & 0x35) != 0) {
        goto LABEL_6;
      }
      int v16 = 0;
      char v17 = 0;
      if (v15 == 1)
      {
        int v28 = *((_DWORD *)a1 + 2);
        if (v28 != 3)
        {
          if (v28)
          {
            if ((a3 & 0x1000) == 0) {
              goto LABEL_6;
            }
          }
          else if ((*(_DWORD *)(v13 + (*v14 & 0xFFFFFFF8)) & 7) != 2 || v9 == 0)
          {
            goto LABEL_6;
          }
LABEL_76:
          if (v7 == &re2::instScratch) {
            pthread_mutex_unlock(&re2::instScratchLock);
          }
          else {
            free(v7);
          }
          return 2;
        }
LABEL_6:
        *uint64_t v7 = v10;
        if ((*v14 & 7) == 4)
        {
          char v17 = 0;
          int v16 = *(_DWORD *)(v13 + 8 * v10 + 4);
        }
        else
        {
          int v16 = 0;
          char v17 = (*v14 & 7) == 5 && *(unsigned char *)(v12 + 1) == 0;
        }
        uint64_t v11 = 1;
      }
    }
  }
  if (*a2 == 1)
  {
LABEL_16:
    uint64_t v18 = v11;
    unsigned int v19 = v11 - 1;
    if ((int)v11 >= 1) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  int v20 = 0;
  uint64_t v21 = 1;
  while (1)
  {
    int v22 = v8[v21];
    if (v17) {
      break;
    }
    if (a2[7] > v22) {
      goto LABEL_24;
    }
    if ((int)v11 >= 1 && v7[(v11 - 1)] != -1)
    {
      uint64_t v18 = (v11 + 1);
      v7[v11] = -1;
      int v20 = 1;
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v18 = v11;
LABEL_20:
    ++v21;
    uint64_t v11 = v18;
    if (v21 == *a2) {
      goto LABEL_51;
    }
  }
  if (*((_DWORD *)a1 + 2))
  {
    if (a2[7] <= v22) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void *)(*(void *)a1 + 32);
    uint64_t v25 = (_DWORD *)(v24 + 8 * v22);
    unint64_t v6 = *v25;
    unsigned int v26 = *v25 & 7;
    if (v26 <= 5)
    {
      if (((1 << v26) & 0x35) != 0) {
        goto LABEL_26;
      }
      if (v26 == 1)
      {
        int v27 = *((_DWORD *)a1 + 2);
        if (v27 != 3)
        {
          if (v27 || !(v21 * 4) && (unint64_t v6 = *(_DWORD *)(v24 + (v6 & 0xFFFFFFF8)) & 7, v6 == 2))
          {
            unint64_t v6 = v27 == 1;
            if ((a3 & 0x1000) != 0)
            {
              unint64_t v6 = v6 & v20;
              if ((v6 & 1) == 0) {
                goto LABEL_76;
              }
            }
          }
        }
LABEL_26:
        uint64_t v18 = (v11 + 1);
        v7[(int)v11] = v22;
        if ((*v25 & 7) == 5)
        {
          v17 |= *(unsigned char *)(v23 + 1) == 0;
        }
        else if ((*v25 & 7) == 4)
        {
          v16 |= *(_DWORD *)(v24 + 8 * v22 + 4);
        }
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  uint64_t v18 = v11;
LABEL_51:
  unsigned int v19 = v18 - 1;
  if ((int)v18 >= 1)
  {
LABEL_52:
    if (v7[v19] == -1) {
      uint64_t v18 = v19;
    }
    else {
      uint64_t v18 = v18;
    }
  }
LABEL_55:
  if (!v16) {
    goto LABEL_67;
  }
  if (!(v18 | a3))
  {
LABEL_68:
    if (v7 == &re2::instScratch) {
      pthread_mutex_unlock(&re2::instScratchLock);
    }
    else {
      free(v7);
    }
    return 1;
  }
LABEL_57:
  if (*((_DWORD *)a1 + 2) == 1 && (int)v18 >= 1)
  {
    char v30 = &v7[(int)v18];
    unsigned int v31 = v7;
    do
    {
      unint64_t v33 = v31;
      do
      {
        int v34 = *v33;
        if (*v33 == -1) {
          break;
        }
        ++v33;
      }
      while (v33 < v30);
      BOOL v32 = v34 == -1;
      std::__sort<std::__less<int,int> &,int *>();
      unsigned int v31 = &v33[v32];
    }
    while (v31 < v30);
  }
  uint64_t v35 = re2::DFA::CachedState(a1, v7, v18, a3 | (v16 << 16), (unsigned int *)v6);
  if (v7 == &re2::instScratch) {
    pthread_mutex_unlock(&re2::instScratchLock);
  }
  else {
    free(v7);
  }
  return v35;
}

uint64_t re2::DFA::CachedState(re2::DFA *this, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v5 = a3;
  uint64_t v14 = a2;
  int v15 = a3;
  int v16 = a4;
  uint64_t v17 = 0;
  uint64_t v7 = std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>((void *)this + 59, (uint64_t)&v14, a3, a4, a5);
  if (v7) {
    return v7[2];
  }
  uint64_t v9 = *((void *)this + 57);
  uint64_t v10 = (uint64_t)(((unint64_t)(4 * v5 + 8 * (*(_DWORD *)(*(void *)this + 20) + 1) + 24) << 32)
                + 0x2000000000) >> 32;
  BOOL v11 = v9 < v10;
  uint64_t v12 = v9 - v10;
  if (!v11)
  {
    *((void *)this + 57) = v12;
    operator new[]();
  }
  uint64_t v8 = 0;
  *((void *)this + 57) = -1;
  return v8;
}

void *std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  if (a2)
  {
    uint64_t v7 = *(_DWORD **)a2;
    int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    unsigned int v36 = 0;
    unsigned int v37 = v9;
    re2::hashword2(v7, (const unsigned int *)((uint64_t)(4 * v8) >> 2), (int *)&v37, &v36, a5);
    unint64_t v10 = v36 | ((unint64_t)v37 << 32);
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v13 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v11 - 1) & v10;
  }
  uint64_t v14 = *(void **)(*a1 + 8 * v13);
  if (v14)
  {
    int v15 = (void *)*v14;
    if (v15)
    {
      uint64_t v16 = *(void *)&v11 - 1;
      if (a2)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v10)
            {
              uint64_t v19 = v15[2];
              if (v19 == a2) {
                return v15;
              }
              if (v19)
              {
                unint64_t v20 = *(unsigned int *)(v19 + 8);
                if (*(void *)(v19 + 8) == *(void *)(a2 + 8))
                {
                  if ((int)v20 < 1) {
                    return v15;
                  }
                  uint64_t v21 = *(_DWORD **)v19;
                  if (**(_DWORD **)v19 == **(_DWORD **)a2)
                  {
                    unint64_t v22 = 0;
                    uint64_t v23 = v21 + 1;
                    while (v20 - 1 != v22)
                    {
                      int v24 = v23[v22];
                      int v25 = *(_DWORD *)(*(void *)a2 + 4 + 4 * v22++);
                      if (v24 != v25)
                      {
                        if (v22 < v20) {
                          goto LABEL_15;
                        }
                        return v15;
                      }
                    }
                    return v15;
                  }
                }
              }
            }
            else if ((v18 & v16) != v13)
            {
              return 0;
            }
LABEL_15:
            uint64_t result = 0;
            int v15 = (void *)*v15;
            if (!v15) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v26 = v15[1];
          if (v26 == v10)
          {
            uint64_t v27 = v15[2];
            if (v27 == a2) {
              return v15;
            }
            if (v27)
            {
              unint64_t v28 = *(unsigned int *)(v27 + 8);
              if (*(void *)(v27 + 8) == *(void *)(a2 + 8))
              {
                if ((int)v28 < 1) {
                  return v15;
                }
                char v29 = *(_DWORD **)v27;
                if (**(_DWORD **)v27 == **(_DWORD **)a2)
                {
                  unint64_t v30 = 0;
                  unsigned int v31 = v29 + 1;
                  do
                  {
                    if (v28 - 1 == v30) {
                      return v15;
                    }
                    int v32 = v31[v30];
                    int v33 = *(_DWORD *)(*(void *)a2 + 4 + 4 * v30++);
                  }
                  while (v32 == v33);
                  if (v30 >= v28) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v26 >= *(void *)&v11) {
              v26 %= *(void *)&v11;
            }
            if (v26 != v13) {
              return 0;
            }
          }
          uint64_t result = 0;
          int v15 = (void *)*v15;
          if (!v15) {
            return result;
          }
        }
      }
      if (v12.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v34 = v15[1];
          if (v34 == v10)
          {
            if (!v15[2]) {
              return v15;
            }
          }
          else if ((v34 & v16) != v13)
          {
            return 0;
          }
          uint64_t result = 0;
          int v15 = (void *)*v15;
          if (!v15) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v35 = v15[1];
        if (v35 == v10)
        {
          if (!v15[2]) {
            return v15;
          }
        }
        else
        {
          if (v35 >= *(void *)&v11) {
            v35 %= *(void *)&v11;
          }
          if (v35 != v13) {
            return 0;
          }
        }
        uint64_t result = 0;
        int v15 = (void *)*v15;
        if (!v15) {
          return result;
        }
      }
    }
  }
  return 0;
}

void std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  if (a2)
  {
    int v8 = *(_DWORD **)a2;
    int v9 = *(_DWORD *)(a2 + 8);
    unsigned int v10 = *(_DWORD *)(a2 + 12);
    unsigned int v64 = 0;
    unsigned int v65 = v10;
    re2::hashword2(v8, (const unsigned int *)((uint64_t)(4 * v9) >> 2), (int *)&v65, &v64, a5);
    unint64_t v11 = v64 | ((unint64_t)v65 << 32);
    unint64_t v12 = *((void *)a1 + 1);
    if (v12) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v14 = 0;
    goto LABEL_55;
  }
  unint64_t v11 = 0;
  unint64_t v12 = *((void *)a1 + 1);
  if (!v12) {
    goto LABEL_6;
  }
LABEL_3:
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = v11;
    if (v11 >= v12) {
      unint64_t v14 = v11 % v12;
    }
  }
  else
  {
    unint64_t v14 = (v12 - 1) & v11;
  }
  int v15 = *(void **)(*(void *)a1 + 8 * v14);
  if (v15)
  {
    uint64_t v16 = (void *)*v15;
    if (v16)
    {
      unint64_t v17 = v12 - 1;
      if (a2)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == v11)
            {
              uint64_t v19 = v16[2];
              if (v19 == a2) {
                return;
              }
              if (v19)
              {
                unint64_t v20 = *(unsigned int *)(v19 + 8);
                if (*(void *)(v19 + 8) == *(void *)(a2 + 8))
                {
                  if ((int)v20 < 1) {
                    return;
                  }
                  uint64_t v21 = *(_DWORD **)v19;
                  if (**(_DWORD **)v19 == **(_DWORD **)a2)
                  {
                    unint64_t v22 = 0;
                    uint64_t v23 = v21 + 1;
                    do
                    {
                      if (v20 - 1 == v22) {
                        return;
                      }
                      int v24 = v23[v22];
                      int v25 = *(_DWORD *)(*(void *)a2 + 4 + 4 * v22++);
                    }
                    while (v24 == v25);
                    if (v22 >= v20) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v18 & v17) != v14)
            {
              goto LABEL_55;
            }
            uint64_t v16 = (void *)*v16;
            if (!v16) {
              goto LABEL_55;
            }
          }
        }
        while (1)
        {
          unint64_t v26 = v16[1];
          if (v26 == v11)
          {
            uint64_t v27 = v16[2];
            if (v27 == a2) {
              return;
            }
            if (v27)
            {
              unint64_t v28 = *(unsigned int *)(v27 + 8);
              if (*(void *)(v27 + 8) == *(void *)(a2 + 8))
              {
                if ((int)v28 < 1) {
                  return;
                }
                char v29 = *(_DWORD **)v27;
                if (**(_DWORD **)v27 == **(_DWORD **)a2)
                {
                  unint64_t v30 = 0;
                  unsigned int v31 = v29 + 1;
                  do
                  {
                    if (v28 - 1 == v30) {
                      return;
                    }
                    int v32 = v31[v30];
                    int v33 = *(_DWORD *)(*(void *)a2 + 4 + 4 * v30++);
                  }
                  while (v32 == v33);
                  if (v30 >= v28) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v26 >= v12) {
              v26 %= v12;
            }
            if (v26 != v14) {
              goto LABEL_55;
            }
          }
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_55;
          }
        }
      }
      if (v13.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v34 = v16[1];
          if (v34 == v11)
          {
            if (!v16[2]) {
              return;
            }
          }
          else if ((v34 & v17) != v14)
          {
            goto LABEL_55;
          }
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_55;
          }
        }
      }
      do
      {
        unint64_t v35 = v16[1];
        if (v35 == v11)
        {
          if (!v16[2]) {
            return;
          }
        }
        else
        {
          if (v35 >= v12) {
            v35 %= v12;
          }
          if (v35 != v14) {
            break;
          }
        }
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
LABEL_55:
  unsigned int v36 = operator new(0x18uLL);
  *unsigned int v36 = 0;
  v36[1] = v11;
  v36[2] = a3;
  float v37 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v38 = a1[8];
  if (v12 && (float)(v38 * (float)v12) >= v37)
  {
    unint64_t v11 = v14;
    goto LABEL_105;
  }
  BOOL v39 = 1;
  if (v12 >= 3) {
    BOOL v39 = (v12 & (v12 - 1)) != 0;
  }
  unint64_t v40 = v39 | (2 * v12);
  unint64_t v41 = vcvtps_u32_f32(v37 / v38);
  if (v40 <= v41) {
    size_t prime = v41;
  }
  else {
    size_t prime = v40;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v12 = *((void *)a1 + 1);
  }
  if (prime > v12)
  {
LABEL_68:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v43 = operator new(8 * prime);
    char v44 = *(void **)a1;
    *(void *)a1 = v43;
    if (v44) {
      operator delete(v44);
    }
    uint64_t v45 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v45++) = 0;
    while (prime != v45);
    id v47 = (uint64_t *)(a1 + 4);
    uint64_t v46 = (void *)*((void *)a1 + 2);
    if (!v46) {
      goto LABEL_92;
    }
    size_t v48 = v46[1];
    size_t v49 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v50 = v48 & v49;
      *(void *)(*(void *)a1 + 8 * v5re2::Compiler::Compile(this, 0) = v47;
      for (uint64_t i = (void *)*v46; *v46; uint64_t i = (void *)*v46)
      {
        size_t v52 = i[1] & v49;
        if (v52 == v50)
        {
          uint64_t v46 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v52))
        {
          *uint64_t v46 = *i;
          uint64_t v53 = 8 * v52;
          *uint64_t i = **(void **)(*(void *)a1 + v53);
          **(void **)(*(void *)a1 + v53) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v52) = v46;
          uint64_t v46 = i;
          size_t v50 = v52;
        }
      }
LABEL_92:
      unint64_t v12 = prime;
      goto LABEL_93;
    }
    if (v48 >= prime) {
      v48 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v48) = v47;
    id v57 = (void *)*v46;
    if (!*v46) {
      goto LABEL_92;
    }
    while (1)
    {
      size_t v59 = v57[1];
      if (v59 >= prime) {
        v59 %= prime;
      }
      if (v59 != v48)
      {
        if (!*(void *)(*(void *)a1 + 8 * v59))
        {
          *(void *)(*(void *)a1 + 8 * v59) = v46;
          goto LABEL_97;
        }
        *uint64_t v46 = *v57;
        uint64_t v58 = 8 * v59;
        *id v57 = **(void **)(*(void *)a1 + v58);
        **(void **)(*(void *)a1 + v58) = v57;
        id v57 = v46;
      }
      size_t v59 = v48;
LABEL_97:
      uint64_t v46 = v57;
      id v57 = (void *)*v57;
      size_t v48 = v59;
      if (!v57) {
        goto LABEL_92;
      }
    }
  }
  if (prime >= v12) {
    goto LABEL_93;
  }
  unint64_t v54 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v12 < 3 || (uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
  {
    unint64_t v54 = std::__next_prime(v54);
  }
  else
  {
    uint64_t v56 = 1 << -(char)__clz(v54 - 1);
    if (v54 >= 2) {
      unint64_t v54 = v56;
    }
  }
  if (prime <= v54) {
    size_t prime = v54;
  }
  if (prime < v12)
  {
    if (!prime)
    {
      unint64_t v63 = *(void **)a1;
      *(void *)a1 = 0;
      if (v63) {
        operator delete(v63);
      }
      unint64_t v12 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_93;
    }
    goto LABEL_68;
  }
  unint64_t v12 = *((void *)a1 + 1);
LABEL_93:
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12) {
      v11 %= v12;
    }
  }
  else
  {
    v11 &= v12 - 1;
  }
LABEL_105:
  long long v60 = *(void **)a1;
  long long v61 = *(void **)(*(void *)a1 + 8 * v11);
  if (v61)
  {
    *unsigned int v36 = *v61;
LABEL_113:
    *long long v61 = v36;
    goto LABEL_114;
  }
  *unsigned int v36 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v36;
  v60[v11] = a1 + 4;
  if (*v36)
  {
    unint64_t v62 = *(void *)(*v36 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v62 >= v12) {
        v62 %= v12;
      }
    }
    else
    {
      v62 &= v12 - 1;
    }
    long long v61 = (void *)(*(void *)a1 + 8 * v62);
    goto LABEL_113;
  }
LABEL_114:
  ++*((void *)a1 + 3);
}

void sub_1CA7520D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *re2::DFA::StateToWorkq(uint64_t *result, int *a2)
{
  *a2 = 0;
  a2[9] = a2[7];
  int v2 = *((_DWORD *)result + 2);
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(v5 + 4 * v4);
      if (v6 != -1) {
        break;
      }
      if (!*((unsigned char *)a2 + 40))
      {
        *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
        unsigned int v6 = a2[9];
        a2[9] = v6 + 1;
LABEL_7:
        if (a2[1] > v6)
        {
          uint64_t v7 = *((void *)a2 + 2);
          *(_DWORD *)(*((void *)a2 + 1) + 4 * (int)v6) = v3;
          *(_DWORD *)(v7 + 4 * *a2) = v6;
          int v3 = *a2 + 1;
          *a2 = v3;
          int v2 = *((_DWORD *)result + 2);
        }
      }
      if (++v4 >= v2) {
        return result;
      }
    }
    *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
    goto LABEL_7;
  }
  return result;
}

void *re2::DFA::AddToQueue(void *result, int *a2, int a3, int a4)
{
  uint64_t v4 = (_DWORD *)result[30];
  _DWORD *v4 = a3;
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = (v5 - 1);
    unsigned int v7 = v4[v6];
    if (!v7) {
      goto LABEL_3;
    }
    if (v7 == -1)
    {
      if (!*((unsigned char *)a2 + 40))
      {
        *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
        unsigned int v8 = a2[9];
        a2[9] = v8 + 1;
        if (a2[1] > v8)
        {
          uint64_t v9 = *((void *)a2 + 2);
          *(_DWORD *)(*((void *)a2 + 1) + 4 * (int)v8) = *a2;
          *(_DWORD *)(v9 + 4 * (*a2)++) = v8;
        }
      }
    }
    else
    {
      if (a2[1] <= v7)
      {
        *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
      }
      else
      {
        uint64_t v10 = *((void *)a2 + 1);
        uint64_t v11 = *(int *)(v10 + 4 * (int)v7);
        int v12 = *a2;
        if (v11 >= *a2)
        {
          *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
          uint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          uint64_t v13 = *((void *)a2 + 2);
          if (*(_DWORD *)(v13 + 4 * v11) == v7) {
            goto LABEL_3;
          }
          *((unsigned char *)a2 + 4re2::Compiler::Compile(this, 0) = 0;
        }
        *(_DWORD *)(v10 + 4 * (int)v7) = v12;
        *(_DWORD *)(v13 + 4 * (*a2)++) = v7;
      }
      uint64_t v14 = *result;
      uint64_t v15 = *(void *)(*result + 32);
      uint64_t v16 = (_DWORD *)(v15 + 8 * (int)v7);
      switch(*v16 & 7)
      {
        case 0:
        case 1:
          v4[v6] = *(_DWORD *)(v15 + 8 * (int)v7 + 4);
          if (a2[8] >= 1 && v7 == *(_DWORD *)(v14 + 8) && v7 != *(_DWORD *)(v14 + 4))
          {
            v4[v5] = -1;
            LODWORD(v5) = v5 + 1;
          }
          uint64_t v6 = (v5 + 1);
          v4[v5] = *v16 >> 3;
          break;
        case 3:
        case 6:
          goto LABEL_2;
        case 4:
          if ((*(_DWORD *)(v15 + 8 * (int)v7 + 4) & ~a4) == 0)
          {
LABEL_2:
            v4[v6] = *v16 >> 3;
            uint64_t v6 = v5;
          }
          break;
        default:
          break;
      }
    }
LABEL_3:
    uint64_t v5 = v6;
  }
  while ((int)v6 > 0);
  return result;
}

void *re2::DFA::RunWorkqOnEmptyString(void *result, int *a2, int *a3, int a4)
{
  *a3 = 0;
  a3[9] = a3[7];
  if (*a2)
  {
    unsigned int v7 = result;
    unsigned int v8 = (int *)*((void *)a2 + 2);
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      if (a2[7] <= v10) {
        int v11 = -1;
      }
      else {
        int v11 = v9;
      }
      uint64_t result = re2::DFA::AddToQueue(v7, a3, v11, a4);
    }
    while (v8 != (int *)(*((void *)a2 + 2) + 4 * *a2));
  }
  return result;
}

void *re2::DFA::RunWorkqOnByte(void *result, int *a2, uint64_t a3, int a4, int a5, unsigned char *a6, int a7)
{
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a3 + 28);
  if (*a2)
  {
    uint64_t v13 = result;
    uint64_t v14 = (int *)*((void *)a2 + 2);
    unsigned int v15 = a4 - 65;
    int v16 = a4 + 32;
    for (uint64_t i = v14; i != &v14[*a2]; ++i)
    {
      uint64_t v18 = *i;
      if (a2[7] <= (int)v18)
      {
        if (*a6) {
          return result;
        }
        if (!*(unsigned char *)(a3 + 40))
        {
          *(unsigned char *)(a3 + 4re2::Compiler::Compile(this, 0) = 0;
          unsigned int v25 = *(_DWORD *)(a3 + 36);
          *(_DWORD *)(a3 + 36) = v25 + 1;
          if (*(_DWORD *)(a3 + 4) > v25)
          {
            uint64_t v26 = *(void *)(a3 + 16);
            *(_DWORD *)(*(void *)(a3 + 8) + 4 * (int)v25) = *(_DWORD *)a3;
            *(_DWORD *)(v26 + 4 * (int)(*(_DWORD *)a3)++) = v25;
          }
        }
      }
      else
      {
        uint64_t v19 = *(void *)(*v13 + 32);
        uint64_t v20 = v19 + 8 * v18;
        int v21 = *(_DWORD *)v20 & 7;
        if (v21 == 5)
        {
          if (a4 == 256 || !*(unsigned char *)(*v13 + 1))
          {
            *a6 = 1;
            if (!a7) {
              return result;
            }
          }
        }
        else if (v21 == 2)
        {
          if (*(unsigned char *)(v20 + 6)) {
            BOOL v22 = v15 >= 0x1A;
          }
          else {
            BOOL v22 = 1;
          }
          uint64_t v23 = v19 + 8 * v18;
          if (v22) {
            int v24 = a4;
          }
          else {
            int v24 = v16;
          }
          if (v24 >= *(unsigned __int8 *)(v23 + 4) && v24 <= *(unsigned __int8 *)(v20 + 5))
          {
            uint64_t result = re2::DFA::AddToQueue(v13, (int *)a3, *(_DWORD *)v20 >> 3, a5);
            uint64_t v14 = (int *)*((void *)a2 + 2);
          }
        }
      }
    }
  }
  return result;
}

unint64_t re2::DFA::RunStateOnByteUnlocked(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 24);
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 24))) {
    abort();
  }
  unint64_t v7 = re2::DFA::RunStateOnByte((uint64_t *)a1, a2, a3);
  if (pthread_rwlock_unlock(v6)) {
    abort();
  }
  return v7;
}

void sub_1CA7525B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

unint64_t re2::DFA::RunStateOnByte(uint64_t *a1, unint64_t a2, int a3)
{
  if (a2 <= 2)
  {
    if (a2)
    {
      if (a2 == 2) {
        return 2;
      }
      LOBYTE(v4re2::Compiler::Compile(this, 0) = 0;
      unsigned int v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"DeadState in RunStateOnByte", 27);
    }
    else
    {
      LOBYTE(v4re2::Compiler::Compile(this, 0) = 0;
      int v33 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"NULL state in RunStateOnByte", 28);
    }
    LogMessage::~LogMessage(&v40);
    return 0;
  }
  else
  {
    uint64_t v6 = *a1;
    if (a3 == 256) {
      int v7 = *(_DWORD *)(v6 + 20);
    }
    else {
      int v7 = *(unsigned __int8 *)(v6 + a3 + 304);
    }
    unint64_t result = atomic_load_explicit((atomic_ullong *volatile)(*(void *)(a2 + 16) + 8 * v7), memory_order_acquire);
    if (!result)
    {
      int v10 = (int *)a1[28];
      *int v10 = 0;
      v10[9] = v10[7];
      int v11 = *(_DWORD *)(a2 + 8);
      if (v11 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)a2;
        while (1)
        {
          unsigned int v15 = *(_DWORD *)(v14 + 4 * v13);
          if (v15 != -1) {
            break;
          }
          if (!*((unsigned char *)v10 + 40))
          {
            *((unsigned char *)v10 + 4re2::Compiler::Compile(this, 0) = 0;
            unsigned int v15 = v10[9];
            v10[9] = v15 + 1;
LABEL_15:
            if (v10[1] > v15)
            {
              *(_DWORD *)(*((void *)v10 + 1) + 4 * (int)v15) = v12;
              *(_DWORD *)(*((void *)v10 + 2) + 4 * *v1re2::Compiler::Compile(this, 0) = v15;
              int v12 = *v10 + 1;
              *int v10 = v12;
              int v11 = *(_DWORD *)(a2 + 8);
            }
          }
          if (++v13 >= v11) {
            goto LABEL_18;
          }
        }
        *((unsigned char *)v10 + 4re2::Compiler::Compile(this, 0) = 0;
        goto LABEL_15;
      }
LABEL_18:
      unsigned int v16 = *(_DWORD *)(a2 + 12);
      unsigned int v17 = HIWORD(v16);
      BOOL v18 = a3 == 10;
      int v19 = v16 & 0xFFD | 2;
      if (a3 != 10) {
        int v19 = v16 & 0xFFF;
      }
      BOOL v22 = a3 - 48 < 0xA || (a3 & 0xDFu) - 65 < 0x1A || a3 == 95;
      if (a3 == 256)
      {
        v19 |= 0xAu;
        BOOL v23 = 0;
      }
      else
      {
        BOOL v23 = v22;
      }
      if (((v16 & 0x2000) == 0) != v23) {
        int v24 = 32;
      }
      else {
        int v24 = 16;
      }
      int v25 = v24 | v19;
      if ((v17 & ~(*(_DWORD *)(a2 + 12) & 0xFFF) & (v24 | v19)) != 0)
      {
        uint64_t v26 = (int *)a1[29];
        *uint64_t v26 = 0;
        v26[9] = v26[7];
        if (*v10)
        {
          uint64_t v27 = (int *)*((void *)v10 + 2);
          do
          {
            int v29 = *v27++;
            int v28 = v29;
            if (v10[7] <= v29) {
              int v30 = -1;
            }
            else {
              int v30 = v28;
            }
            re2::DFA::AddToQueue(a1, v26, v30, v25);
          }
          while (v27 != (int *)(*((void *)v10 + 2) + 4 * *v10));
        }
        uint64_t v32 = a1[28];
        unsigned int v31 = (int *)a1[29];
        a1[28] = (uint64_t)v31;
        a1[29] = v32;
      }
      else
      {
        unsigned int v31 = (int *)a1[28];
        uint64_t v32 = a1[29];
      }
      LOBYTE(v4re2::Compiler::Compile(this, 0) = 0;
      re2::DFA::RunWorkqOnByte(a1, v31, v32, a3, a3 == 10, &v40, *((_DWORD *)a1 + 2));
      if (a3 == 256 && *((_DWORD *)a1 + 2) == 3)
      {
        uint64_t v34 = (int *)a1[28];
      }
      else
      {
        uint64_t v35 = a1[28];
        uint64_t v34 = (int *)a1[29];
        a1[28] = (uint64_t)v34;
        a1[29] = v35;
      }
      if ((_BYTE)v40) {
        int v36 = v18 | 0x1000;
      }
      else {
        int v36 = v18;
      }
      if (v23) {
        int v37 = v36 | 0x2000;
      }
      else {
        int v37 = v36;
      }
      unint64_t result = re2::DFA::WorkqToCachedState((re2::DFA *)a1, v34, v37);
      uint64_t v38 = *a1;
      if (a3 == 256) {
        int v39 = *(_DWORD *)(v38 + 20);
      }
      else {
        int v39 = *(unsigned __int8 *)(v38 + a3 + 304);
      }
      atomic_store(result, (unint64_t *)(*(void *)(a2 + 16) + 8 * v39));
    }
  }
  return result;
}

void sub_1CA7528E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

re2::DFA::RWLocker *re2::DFA::RWLocker::RWLocker(re2::DFA::RWLocker *this, pthread_rwlock_t *a2)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  if (pthread_rwlock_rdlock(a2)) {
    abort();
  }
  return this;
}

{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  if (pthread_rwlock_rdlock(a2)) {
    abort();
  }
  return this;
}

uint64_t re2::DFA::RWLocker::LockForWriting(uint64_t this)
{
  if (!*(unsigned char *)(this + 8))
  {
    uint64_t v1 = this;
    if (pthread_rwlock_unlock(*(pthread_rwlock_t **)this)
      || (this = pthread_rwlock_wrlock(*(pthread_rwlock_t **)v1), this))
    {
      abort();
    }
    *(unsigned char *)(v1 + 8) = 1;
  }
  return this;
}

void re2::DFA::RWLocker::~RWLocker(pthread_rwlock_t **this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  int v2 = *this;
  if (v1)
  {
    if (!pthread_rwlock_unlock(v2)) {
      return;
    }
LABEL_5:
    abort();
  }
  if (pthread_rwlock_unlock(v2)) {
    goto LABEL_5;
  }
}

{
  int v1;
  pthread_rwlock_t *v2;

  int v1 = *((unsigned __int8 *)this + 8);
  int v2 = *this;
  if (v1)
  {
    if (!pthread_rwlock_unlock(v2)) {
      return;
    }
LABEL_5:
    abort();
  }
  if (pthread_rwlock_unlock(v2)) {
    goto LABEL_5;
  }
}

void re2::DFA::ResetCache(re2::DFA *this, pthread_rwlock_t **a2)
{
  int v3 = a2 + 1;
  if (!*((unsigned char *)a2 + 8))
  {
    if (pthread_rwlock_unlock(*a2) || pthread_rwlock_wrlock(*a2)) {
      abort();
    }
    goto LABEL_6;
  }
  if (!*((unsigned char *)this + 640))
  {
    LOBYTE(v8) = 0;
    uint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DFA memory cache could be too small: ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"only room for ", 14);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" states.", 8);
    int v3 = (char *)this + 640;
    LogMessage::~LogMessage(&v8);
LABEL_6:
    *int v3 = 1;
  }
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 13re2::Compiler::Compile(this, 0) = -1;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 134) = -1;
  *((void *)this + 68) = 0;
  *((_DWORD *)this + 138) = -1;
  *((void *)this + 7re2::Compiler::Compile(this, 0) = 0;
  *((_DWORD *)this + 142) = -1;
  *((void *)this + 72) = 0;
  *((_DWORD *)this + 146) = -1;
  *((void *)this + 74) = 0;
  *((_DWORD *)this + 15re2::Compiler::Compile(this, 0) = -1;
  *((void *)this + 76) = 0;
  *((_DWORD *)this + 154) = -1;
  *((void *)this + 78) = 0;
  *((_DWORD *)this + 158) = -1;
  re2::DFA::ClearCache(this);
  *((void *)this + 57) = *((void *)this + 58);
}

void sub_1CA752B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::DFA::StateSaver::StateSaver(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)unint64_t result = a2;
  if (a3 > 2)
  {
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 16) = *(void *)(a3 + 8);
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  *(void *)(result + 32) = a3;
  return result;
}

{
  *(void *)unint64_t result = a2;
  if (a3 > 2)
  {
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 16) = *(void *)(a3 + 8);
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  *(void *)(result + 32) = a3;
  return result;
}

void re2::DFA::StateSaver::~StateSaver(re2::DFA::StateSaver *this)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      MEMORY[0x1CB79A8A0](v1, 0x1000C8052888210);
    }
  }
}

{
  uint64_t v1;

  if (!*((unsigned char *)this + 24))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      MEMORY[0x1CB79A8A0](v1, 0x1000C8052888210);
    }
  }
}

uint64_t re2::DFA::StateSaver::Restore(re2::DFA::StateSaver *this)
{
  if (*((unsigned char *)this + 24)) {
    return *((void *)this + 4);
  }
  int v3 = (pthread_rwlock_t *)(*(void *)this + 24);
  v8[33] = v3;
  if (pthread_rwlock_wrlock(v3)) {
    abort();
  }
  uint64_t v2 = re2::DFA::CachedState(*(re2::DFA **)this, *((int **)this + 1), *((unsigned int *)this + 4), *((unsigned int *)this + 5), v4);
  if (!v2)
  {
    LOBYTE(v7) = 0;
    uint64_t v5 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"StateSaver failed to restore state.", 35);
    LogMessage::~LogMessage(&v7);
  }
  if (pthread_rwlock_unlock(v3)) {
    abort();
  }
  return v2;
}

void sub_1CA752DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::SearchFFF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 0, 0);
}

uint64_t re2::DFA::InlinedSearchLoop(uint64_t *a1, char **a2, int a3, int a4, int a5)
{
  unint64_t v7 = (unint64_t)a2[5];
  unsigned int v8 = *a2;
  if (a5) {
    uint64_t v9 = &(*a2)[*((int *)a2 + 2)];
  }
  else {
    uint64_t v9 = *a2;
  }
  if (a5) {
    int v10 = *a2;
  }
  else {
    int v10 = &(*a2)[*((int *)a2 + 2)];
  }
  int v11 = *(_DWORD *)(v7 + 12);
  if ((v11 & 0x1000) != 0) {
    int v12 = v10;
  }
  else {
    int v12 = 0;
  }
  if (v11 & 0x1000) != 0 && (a4)
  {
    a2[9] = v10;
    char v13 = 1;
    return v13 & 1;
  }
  long long v67 = v12;
  unsigned int v65 = (*(_DWORD *)(v7 + 12) & 0x1000u) >> 12;
  uint64_t v70 = v9;
  if (v10 == v9)
  {
    unint64_t v19 = (unint64_t)a2[5];
LABEL_61:
    unint64_t v7 = v19;
    if (a5)
    {
LABEL_62:
      uint64_t v26 = (unsigned __int8 *)&(*a2)[*((int *)a2 + 2)];
      uint64_t v27 = a1;
      if (v26 == (unsigned __int8 *)&a2[2][*((int *)a2 + 6)]) {
        goto LABEL_67;
      }
    }
    else
    {
LABEL_64:
      uint64_t v27 = a1;
      if (*a2 == a2[2])
      {
LABEL_67:
        int v29 = *(_DWORD *)(*v27 + 20);
        LODWORD(v28) = 256;
        goto LABEL_68;
      }
      uint64_t v26 = (unsigned __int8 *)(*a2 - 1);
    }
    uint64_t v28 = *v26;
    int v29 = *(unsigned __int8 *)(*v27 + v28 + 304);
LABEL_68:
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(*(void *)(v7 + 16) + 8 * v29), memory_order_acquire);
    if (explicit) {
      goto LABEL_86;
    }
    CFRange v74 = (pthread_rwlock_t *)(v27 + 3);
    if (pthread_rwlock_wrlock((pthread_rwlock_t *)(v27 + 3))) {
LABEL_130:
    }
      abort();
    unint64_t explicit = re2::DFA::RunStateOnByte(v27, v7, v28);
    if (pthread_rwlock_unlock((pthread_rwlock_t *)(v27 + 3))) {
      abort();
    }
    uint64_t v9 = v70;
    if (explicit) {
      goto LABEL_86;
    }
    long long v81 = 0u;
    long long v80 = 0u;
    uint64_t v79 = v27;
    if (v7 > 2)
    {
      *((void *)&v80 + 1) = *(void *)(v7 + 8);
      operator new[]();
    }
    long long v80 = 0uLL;
    LOBYTE(v81) = 1;
    *((void *)&v81 + 1) = v7;
    re2::DFA::ResetCache((re2::DFA *)v27, (pthread_rwlock_t **)a2[7]);
    uint64_t v31 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v79);
    unint64_t v32 = v31;
    if (v31)
    {
      CFRange v74 = (pthread_rwlock_t *)(v27 + 3);
      if (pthread_rwlock_wrlock((pthread_rwlock_t *)(v27 + 3))) {
        abort();
      }
      unint64_t explicit = re2::DFA::RunStateOnByte(v27, v32, v28);
      if (pthread_rwlock_unlock((pthread_rwlock_t *)(v27 + 3))) {
        abort();
      }
      if (explicit)
      {
        char v33 = 1;
        goto LABEL_85;
      }
      LOBYTE(v74) = 0;
      uint64_t v34 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"RunStateOnByteUnlocked failed after Reset", 41);
      LogMessage::~LogMessage((void **)&v74);
    }
    char v33 = 0;
    unint64_t explicit = 0;
    *((unsigned char *)a2 + 64) = 1;
LABEL_85:
    uint64_t v9 = v70;
    if ((v33 & 1) == 0)
    {
LABEL_128:
      char v13 = 0;
      return v13 & 1;
    }
LABEL_86:
    if (explicit == 2)
    {
LABEL_93:
      a2[9] = v9;
      char v13 = 1;
      return v13 & 1;
    }
    if (explicit < 3)
    {
      char v13 = v65;
    }
    else
    {
      char v13 = v65;
      if ((*(unsigned char *)(explicit + 13) & 0x10) != 0)
      {
        uint64_t v35 = a2[10];
        if (v35)
        {
          if (*((_DWORD *)v27 + 2) == 3)
          {
            int v36 = *(char **)v35;
            *((void *)v35 + 1) = *(void *)v35;
            int v37 = *(_DWORD *)(explicit + 8);
            if (v37 >= 1)
            {
              uint64_t v38 = 0;
              unint64_t v69 = v35;
              while (1)
              {
                uint64_t v40 = *(int *)(*(void *)explicit + 4 * v38);
                uint64_t v41 = *(void *)(*v27 + 32);
                if ((*(_DWORD *)(v41 + 8 * v40) & 7) != 5) {
                  goto LABEL_97;
                }
                uint64_t v42 = v27;
                int v43 = *(_DWORD *)(v41 + 8 * v40 + 4);
                unint64_t v44 = *((void *)v35 + 2);
                if ((unint64_t)v36 >= v44) {
                  break;
                }
                *(_DWORD *)int v36 = v43;
                int v39 = v36 + 4;
                uint64_t v27 = v42;
LABEL_96:
                *((void *)v35 + 1) = v39;
                int v37 = *(_DWORD *)(explicit + 8);
                int v36 = v39;
LABEL_97:
                if (++v38 >= v37) {
                  goto LABEL_125;
                }
              }
              uint64_t v45 = *(char **)v35;
              uint64_t v46 = (uint64_t)&v36[-*(void *)v35];
              uint64_t v47 = v46 >> 2;
              unint64_t v48 = (v46 >> 2) + 1;
              if (v48 >> 62) {
                std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v49 = v44 - (void)v45;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v73 = v48;
              if (v48)
              {
                if (v48 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                size_t v50 = operator new(4 * v48);
              }
              else
              {
                size_t v50 = 0;
              }
              long long v51 = &v50[4 * v47];
              *long long v51 = v43;
              int v39 = (char *)(v51 + 1);
              if (v36 == v45)
              {
                uint64_t v27 = v42;
                uint64_t v35 = v69;
                unint64_t v54 = v73;
              }
              else
              {
                unint64_t v52 = v36 - 4 - v45;
                uint64_t v27 = v42;
                if (v52 < 0xBC
                  || &v50[v46 - 4 - (v52 & 0xFFFFFFFFFFFFFFFCLL)] > &v50[v46 - 4]
                  || &v36[-(v52 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v36 - 4
                  || (unint64_t)(v36 - &v50[v46]) < 0x20)
                {
                  uint64_t v53 = v36;
                  uint64_t v35 = v69;
                  unint64_t v54 = v73;
                }
                else
                {
                  uint64_t v56 = (v52 >> 2) + 1;
                  uint64_t v53 = &v36[-4 * (v56 & 0x7FFFFFFFFFFFFFF8)];
                  id v57 = &v50[4 * v47 - 16];
                  uint64_t v58 = v36 - 16;
                  uint64_t v59 = v56 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v60 = *(_OWORD *)v58;
                    *(v57 - 1) = *((_OWORD *)v58 - 1);
                    *id v57 = v60;
                    v57 -= 2;
                    v58 -= 32;
                    v59 -= 8;
                  }
                  while (v59);
                  v51 -= v56 & 0x7FFFFFFFFFFFFFF8;
                  uint64_t v35 = v69;
                  unint64_t v54 = v73;
                  if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_115;
                  }
                }
                do
                {
                  int v55 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--long long v51 = v55;
                }
                while (v53 != v45);
              }
LABEL_115:
              *(void *)uint64_t v35 = v51;
              *((void *)v35 + 1) = v39;
              *((void *)v35 + 2) = &v50[4 * v54];
              if (v45) {
                operator delete(v45);
              }
              uint64_t v9 = v70;
              goto LABEL_96;
            }
          }
        }
LABEL_125:
        char v13 = 1;
        long long v67 = v9;
      }
    }
    a2[9] = v67;
    return v13 & 1;
  }
  uint64_t v68 = *a1 + 304;
  long long v66 = (pthread_rwlock_t *)(a1 + 3);
  unint64_t v62 = 0;
  uint64_t v14 = -1;
  if (!a5) {
    uint64_t v14 = 1;
  }
  uint64_t v63 = v14;
  unint64_t v15 = (unint64_t)a2[5];
  while (1)
  {
    if (a3 && v15 == v7)
    {
      int v16 = *((_DWORD *)a2 + 12);
      if (a5)
      {
        int v10 = (char *)memchr(v10, v16, v9 - v10);
        uint64_t v9 = v70;
        if (!v10) {
          goto LABEL_62;
        }
      }
      else
      {
        int v21 = (char *)(v10 - v9);
        if (v10 == v9) {
          goto LABEL_64;
        }
        while (1)
        {
          int v10 = &v21[(void)v8];
          if (v16 == v21[(void)v8 - 1]) {
            break;
          }
          if (!--v21) {
            goto LABEL_64;
          }
        }
      }
    }
    if (a5) {
      unsigned int v17 = v10;
    }
    else {
      unsigned int v17 = v10 - 1;
    }
    if (a5) {
      ++v10;
    }
    else {
      --v10;
    }
    uint64_t v18 = *v17;
    unint64_t v19 = atomic_load_explicit((atomic_ullong *volatile)(*(void *)(v15 + 16) + 8 * *(unsigned __int8 *)(v68 + v18)), memory_order_acquire);
    if (v19)
    {
      unint64_t v20 = v7;
      goto LABEL_56;
    }
    CFRange v74 = v66;
    if (pthread_rwlock_wrlock(v66)) {
      goto LABEL_130;
    }
    unint64_t v19 = re2::DFA::RunStateOnByte(a1, v15, v18);
    if (pthread_rwlock_unlock(v66)) {
      abort();
    }
    if (v19)
    {
      unint64_t v20 = v7;
      uint64_t v9 = v70;
      goto LABEL_56;
    }
    if (re2::FLAGS_re2_dfa_bail_when_slow && v62 && v10 - v62 < (unint64_t)(10 * a1[62]))
    {
      char v13 = 0;
      *((unsigned char *)a2 + 64) = 1;
      return v13 & 1;
    }
    long long v80 = 0u;
    long long v81 = 0u;
    uint64_t v79 = a1;
    if (v7 > 2)
    {
      *((void *)&v80 + 1) = *(void *)(v7 + 8);
      operator new[]();
    }
    long long v80 = 0uLL;
    LOBYTE(v81) = 1;
    *((void *)&v81 + 1) = v7;
    long long v77 = 0u;
    long long v78 = 0u;
    id v76 = a1;
    if (v15 > 2)
    {
      *((void *)&v77 + 1) = *(void *)(v15 + 8);
      operator new[]();
    }
    long long v77 = 0uLL;
    LOBYTE(v78) = 1;
    *((void *)&v78 + 1) = v15;
    re2::DFA::ResetCache((re2::DFA *)a1, (pthread_rwlock_t **)a2[7]);
    uint64_t v22 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v79);
    unint64_t v20 = v22;
    if (v22)
    {
      unint64_t v23 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v76);
      if (v23)
      {
        CFRange v74 = v66;
        if (pthread_rwlock_wrlock(v66)) {
          abort();
        }
        unint64_t v19 = re2::DFA::RunStateOnByte(a1, v23, v18);
        if (pthread_rwlock_unlock(v66)) {
          abort();
        }
        if (v19)
        {
          char v24 = 1;
          goto LABEL_55;
        }
        LOBYTE(v74) = 0;
        int v25 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v75);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"RunStateOnByteUnlocked failed after ResetCache", 46);
        LogMessage::~LogMessage((void **)&v74);
      }
    }
    char v24 = 0;
    unint64_t v19 = 0;
    *((unsigned char *)a2 + 64) = 1;
LABEL_55:
    unint64_t v62 = v10;
    uint64_t v9 = v70;
    if ((v24 & 1) == 0) {
      goto LABEL_128;
    }
LABEL_56:
    if (v19 <= 2) {
      break;
    }
    if ((*(unsigned char *)(v19 + 13) & 0x10) != 0)
    {
      long long v67 = &v10[v63];
      if (a4)
      {
        a2[9] = v67;
        char v13 = 1;
        return v13 & 1;
      }
      LOBYTE(v65) = 1;
    }
    unint64_t v7 = v20;
    unint64_t v15 = v19;
    if (v10 == v9) {
      goto LABEL_61;
    }
  }
  if (v19 != 1) {
    goto LABEL_93;
  }
  a2[9] = v67;
  char v13 = v65;
  return v13 & 1;
}

void sub_1CA7536CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  LogMessage::~LogMessage((void **)va);
  if (v14 >= 3)
  {
    if (v15) {
      MEMORY[0x1CB79A8A0](v15, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::SearchFFT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 0, 1);
}

uint64_t re2::DFA::SearchFTF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 1, 0);
}

uint64_t re2::DFA::SearchFTT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 1, 1);
}

uint64_t re2::DFA::SearchTFF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 0, 0);
}

uint64_t re2::DFA::SearchTFT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 0, 1);
}

uint64_t re2::DFA::SearchTTF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 1, 0);
}

uint64_t re2::DFA::SearchTTT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 1, 1);
}

uint64_t re2::DFA::SlowSearchLoop(uint64_t *a1, uint64_t a2)
{
  return re2::DFA::InlinedSearchLoop(a1, (char **)a2, *(_DWORD *)(a2 + 48) >= 0, *(unsigned __int8 *)(a2 + 33), *(unsigned __int8 *)(a2 + 34));
}

uint64_t re2::DFA::FastSearchLoop(uint64_t a1, uint64_t a2)
{
  return re2::DFA::FastSearchLoop(re2::DFA::SearchParams *)::Searches[2
                                                                    * (((*(_DWORD *)(a2 + 48) >> 29) & 4 | (2 * *(unsigned __int8 *)(a2 + 33)) | *(unsigned __int8 *)(a2 + 34)) ^ 4u)]();
}

uint64_t re2::DFA::AnalyzeSearch(re2::DFA *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)a2 < v4
    || (v5 = (unsigned __int8 *)(v3 + *(int *)(a2 + 8)), uint64_t v6 = (unsigned __int8 *)(v4 + *(int *)(a2 + 24)), v5 > v6))
  {
    LOBYTE(v17) = 0;
    unint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Text is not inside context.", 27);
    LogMessage::~LogMessage(&v17);
    uint64_t result = 1;
    *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 1;
    return result;
  }
  if (*(unsigned char *)(a2 + 34))
  {
    if (v3 != v4)
    {
      int v10 = *(unsigned __int8 *)(v3 - 1);
      if (v10 == 10) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
LABEL_25:
    unsigned int v12 = 0;
    int v11 = 5;
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (v5 == v6) {
    goto LABEL_25;
  }
  int v10 = *v5;
  if (v10 == 10)
  {
LABEL_7:
    int v11 = 1;
    unsigned int v12 = 2;
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_26;
    }
LABEL_27:
    v12 |= 1u;
    goto LABEL_28;
  }
LABEL_11:
  BOOL v14 = (v10 - 48) < 0xA || (v10 & 0xFFFFFFDF) - 65 < 0x1A || v10 == 95;
  if (v14) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = 6;
  }
  if (v14) {
    int v11 = 0x2000;
  }
  else {
    int v11 = 0;
  }
  if (*(unsigned char *)(a2 + 32)) {
    goto LABEL_27;
  }
LABEL_26:
  if (**(unsigned char **)a1) {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v15 = (void *)((char *)a1 + 16 * v12 + 512);
  if ((re2::DFA::AnalyzeSearchHelper((uint64_t)a1, a2, (uint64_t)v15, v11) & 1) != 0
    || (re2::DFA::ResetCache(a1, *(pthread_rwlock_t ***)(a2 + 56)),
        (re2::DFA::AnalyzeSearchHelper((uint64_t)a1, a2, (uint64_t)v15, v11) & 1) != 0))
  {
    *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = *v15;
    *(_DWORD *)(a2 + 48) = atomic_load_explicit((atomic_uint *volatile)a1 + 4 * v12 + 130, memory_order_acquire);
    return 1;
  }
  else
  {
    LOBYTE(v17) = 0;
    int v16 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Failed to analyze start state.", 30);
    LogMessage::~LogMessage(&v17);
    uint64_t result = 0;
    *(unsigned char *)(a2 + 64) = 1;
  }
  return result;
}

void sub_1CA753A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::DFA::AnalyzeSearchHelper(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (atomic_load_explicit((atomic_uint *volatile)(a3 + 8), memory_order_acquire) != -1) {
    return 1;
  }
  uint64_t v9 = (pthread_rwlock_t *)(a1 + 24);
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 24))) {
    abort();
  }
  if (*(_DWORD *)(a3 + 8) != -1)
  {
    BOOL v4 = 1;
    goto LABEL_13;
  }
  int v10 = *(int **)(a1 + 224);
  *int v10 = 0;
  v10[9] = v10[7];
  uint64_t v11 = 4;
  if (!*(unsigned char *)(a2 + 32)) {
    uint64_t v11 = 8;
  }
  re2::DFA::AddToQueue((void *)a1, v10, *(_DWORD *)(*(void *)a1 + v11), a4);
  uint64_t v12 = re2::DFA::WorkqToCachedState((re2::DFA *)a1, *(int **)(a1 + 224), a4);
  unint64_t v13 = v12;
  *(void *)a3 = v12;
  if ((unint64_t)(v12 - 1) < 2)
  {
    BOOL v4 = 1;
    unsigned int v14 = -3;
LABEL_10:
    atomic_store(v14, (unsigned int *)(a3 + 8));
    goto LABEL_13;
  }
  if (v12)
  {
    int v16 = 0;
    unsigned int v14 = -3;
    while (1)
    {
      unint64_t v17 = re2::DFA::RunStateOnByte((uint64_t *)a1, v13, v16);
      BOOL v4 = v17 != 0;
      if (!v17) {
        goto LABEL_10;
      }
      unint64_t v13 = *(void *)a3;
      if (v17 != *(void *)a3)
      {
        BOOL v18 = v14 == -3;
        unsigned int v14 = v16;
        if (!v18)
        {
          BOOL v4 = 1;
          unsigned int v14 = -2;
          goto LABEL_10;
        }
      }
      if (++v16 == 256)
      {
        BOOL v4 = 1;
        goto LABEL_10;
      }
    }
  }
  BOOL v4 = 0;
LABEL_13:
  if (pthread_rwlock_unlock(v9)) {
    abort();
  }
  return v4;
}

void sub_1CA753BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

unint64_t re2::Prog::GetDFA(uint64_t a1, int a2)
{
  if (a2 != 3 && a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 248);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 248), memory_order_acquire);
    if (explicit) {
      return explicit;
    }
  }
  else
  {
    uint64_t v3 = (unint64_t *)(a1 + 240);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 240), memory_order_acquire);
    if (explicit) {
      return explicit;
    }
  }
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 40))) {
    abort();
  }
  unint64_t explicit = *v3;
  if (!*v3) {
    operator new();
  }
  if (pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 40))) {
    abort();
  }
  return explicit;
}

void sub_1CA753D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1CB79A8C0](v2, 0x10B0C4020215F48);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

re2::DFA *re2::DeleteDFA(re2::DFA *this, re2::DFA *a2)
{
  if (this)
  {
    re2::DFA::~DFA(this);
    JUMPOUT(0x1CB79A8C0);
  }
  return this;
}

BOOL re2::Prog::SearchDFA(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, unsigned char *a7)
{
  BOOL result = 0;
  *a7 = 0;
  uint64_t v9 = *a2;
  if (*a3) {
    int v10 = a3;
  }
  else {
    int v10 = a2;
  }
  if (*a3) {
    uint64_t v11 = *a3;
  }
  else {
    uint64_t v11 = *a2;
  }
  int v12 = *a1;
  BOOL v13 = *a1 != 0;
  if (a1[2]) {
    BOOL v13 = a1[1] != 0;
  }
  if (!v13 || v11 == v9)
  {
    int v16 = *((_DWORD *)v10 + 2);
    if (a1[2]) {
      BOOL v17 = v12 != 0;
    }
    else {
      BOOL v17 = a1[1] != 0;
    }
    uint64_t v18 = v9 + *((int *)a2 + 2);
    if (v17 && v11 + v16 != v18) {
      return 0;
    }
    BOOL v23 = a5 == 2 || v12 != 0;
    char v24 = a4 == 1 || v23;
    if (a5 == 2) {
      goto LABEL_35;
    }
    if (a5 == 3)
    {
      int v25 = 0;
      int v48 = 1;
      int v26 = 3;
      goto LABEL_36;
    }
    if (a1[1])
    {
LABEL_35:
      int v25 = 0;
      int v26 = 1;
      a5 = 1;
      int v48 = 1;
    }
    else
    {
      int v48 = 0;
      int v26 = 1;
      int v25 = 1;
    }
LABEL_36:
    int v27 = *((_DWORD *)a3 + 3);
    if (a6) {
      int v28 = a5;
    }
    else {
      int v28 = v26;
    }
    if (a6) {
      int v29 = 0;
    }
    else {
      int v29 = v25;
    }
    unint64_t DFA = re2::Prog::GetDFA((uint64_t)a1, v28);
    if (*(unsigned char *)(DFA + 16))
    {
      BOOL result = 0;
      *a7 = 1;
      return result;
    }
    uint64_t v31 = (re2::DFA *)DFA;
    char v47 = v24;
    int v32 = a1[2];
    *a7 = 0;
    uint64_t v59 = (pthread_rwlock_t *)(DFA + 256);
    uint64_t v60 = 0;
    if (pthread_rwlock_rdlock((pthread_rwlock_t *)(DFA + 256))) {
      abort();
    }
    long long v49 = *(_OWORD *)a2;
    long long v53 = 0u;
    uint64_t v50 = v11;
    int v51 = v16;
    int v52 = v27;
    uint64_t v54 = 0xFFFFFFFFLL;
    int v55 = &v59;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    LOBYTE(v53) = v47;
    BYTE1(v53) = v29;
    BYTE2(v53) = v32 ^ 1;
    if (re2::DFA::AnalyzeSearch(v31, (uint64_t)&v49))
    {
      if (*((void *)&v53 + 1) == 1)
      {
        uint64_t v34 = 0;
        int v35 = 0;
        goto LABEL_56;
      }
      if (*((void *)&v53 + 1) == 2)
      {
        if (v29 != (v32 == 0)) {
          uint64_t v33 = *((int *)a2 + 2);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v34 = *a2 + v33;
        int v35 = 1;
LABEL_56:
        if ((_BYTE)v60)
        {
          if (!pthread_rwlock_unlock(v59)) {
            goto LABEL_58;
          }
        }
        else if (!pthread_rwlock_unlock(v59))
        {
LABEL_58:
          if (*a7) {
            int v37 = 0;
          }
          else {
            int v37 = v35;
          }
          if (v37 != 1) {
            return 0;
          }
          if (v48)
          {
            int v38 = a1[2];
            uint64_t v39 = *a2;
            int v40 = *((_DWORD *)a2 + 2);
            if (a1[2]) {
              uint64_t v41 = 0;
            }
            else {
              uint64_t v41 = *((int *)a2 + 2);
            }
            uint64_t v42 = v39 + v41;
            BOOL result = v34 == v42;
            if (!a6 || v34 != v42) {
              return result;
            }
          }
          else
          {
            if (!a6) {
              return 1;
            }
            int v38 = a1[2];
            uint64_t v39 = *a2;
            int v40 = *((_DWORD *)a2 + 2);
          }
          int v43 = v39 + v40;
          BOOL v44 = v38 == 0;
          if (v38) {
            uint64_t v45 = v34;
          }
          else {
            uint64_t v45 = v39;
          }
          if (v44) {
            int v46 = v34;
          }
          else {
            int v46 = v43;
          }
          *(void *)a6 = v45;
          *(_DWORD *)(a6 + 8) = v46 - v45;
          return 1;
        }
        abort();
      }
      int v36 = ((uint64_t (*)(re2::DFA *, long long *))re2::DFA::FastSearchLoop(re2::DFA::SearchParams *)::Searches[2 * (((v54 >> 29) & 4 | (2 * BYTE1(v53)) | BYTE2(v53)) ^ 4)])(v31, &v49);
      if (!(_BYTE)v56)
      {
        int v35 = v36;
        uint64_t v34 = v57;
        goto LABEL_56;
      }
    }
    uint64_t v34 = 0;
    int v35 = 0;
    *a7 = 1;
    goto LABEL_56;
  }
  return result;
}

void sub_1CA7540B8(_Unwind_Exception *a1)
{
  re2::DFA::RWLocker::~RWLocker((pthread_rwlock_t **)(v1 - 96));
  _Unwind_Resume(a1);
}

unint64_t re2::DFA::BuildAllStates(re2::DFA *this)
{
  if (!*((unsigned char *)this + 16))
  {
    uint64_t v2 = this;
    long long v53 = (pthread_rwlock_t *)((char *)this + 256);
    uint64_t v54 = 0;
    if (pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 256))) {
      abort();
    }
    long long v47 = 0u;
    memset(v46, 0, sizeof(v46));
    uint64_t v48 = 0xFFFFFFFFLL;
    long long v49 = &v53;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    char v3 = re2::DFA::AnalyzeSearch(v2, (uint64_t)v46);
    unint64_t v6 = *((void *)&v47 + 1);
    if (*((void *)&v47 + 1) > 2uLL) {
      char v7 = v3;
    }
    else {
      char v7 = 0;
    }
    if ((v7 & 1) == 0)
    {
      unint64_t v1 = 0;
      goto LABEL_47;
    }
    *(_OWORD *)int v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v45 = 1065353216;
    std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>((float *)v43, *((uint64_t *)&v47 + 1), *((uint64_t *)&v47 + 1), v4, v5);
    unsigned int v8 = (unint64_t *)operator new(8uLL);
    uint64_t v9 = 0;
    unint64_t *v8 = v6;
    int v10 = v8 + 1;
    uint64_t v11 = (pthread_rwlock_t *)((char *)v2 + 24);
    int v12 = v8 + 1;
    uint64_t v42 = v2;
LABEL_10:
    int v13 = 0;
    uint64_t v41 = v9;
    unint64_t v14 = v8[v9];
    while (1)
    {
      int v55 = v11;
      if (pthread_rwlock_wrlock(v11)) {
        abort();
      }
      unint64_t v15 = re2::DFA::RunStateOnByte((uint64_t *)v2, v14, v13);
      if (pthread_rwlock_unlock(v11)) {
        abort();
      }
      if (v15 < 3
        || std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>(v43, v15, v16, v17, v18))
      {
        goto LABEL_12;
      }
      std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>((float *)v43, v15, v15, v19, v20);
      if (v10 >= v12) {
        break;
      }
      *v10++ = v15;
LABEL_12:
      if (++v13 == 257)
      {
        uint64_t v9 = v41 + 1;
        if (v41 + 1 < (unint64_t)(v10 - v8)) {
          goto LABEL_10;
        }
        if (v8) {
          operator delete(v8);
        }
        int v37 = __p[0];
        if (__p[0])
        {
          do
          {
            int v38 = (void *)*v37;
            operator delete(v37);
            int v37 = v38;
          }
          while (v38);
        }
        unint64_t v1 = (unint64_t)((char *)v10 - (char *)v8) >> 3;
        uint64_t v39 = v43[0];
        v43[0] = 0;
        if (v39) {
          operator delete(v39);
        }
LABEL_47:
        if ((_BYTE)v54)
        {
          if (!pthread_rwlock_unlock(v53)) {
            return v1;
          }
        }
        else if (!pthread_rwlock_unlock(v53))
        {
          return v1;
        }
        abort();
      }
    }
    uint64_t v21 = v10 - v8;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v12 - (char *)v8) >> 2 > v22) {
      unint64_t v22 = ((char *)v12 - (char *)v8) >> 2;
    }
    if ((unint64_t)((char *)v12 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v24 = v23;
      int v25 = operator new(8 * v23);
      unint64_t v23 = v24;
    }
    else
    {
      int v25 = 0;
    }
    int v26 = (unint64_t *)&v25[8 * v21];
    *int v26 = v15;
    int v27 = v26 + 1;
    if (v10 != v8)
    {
      unint64_t v28 = (char *)(v10 - 1) - (char *)v8;
      if (v28 >= 0x58)
      {
        if ((unint64_t)((char *)v8 - v25) >= 0x20)
        {
          uint64_t v30 = (v28 >> 3) + 1;
          int v29 = &v10[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v31 = &v25[8 * v21 - 16];
          int v32 = v10 - 2;
          uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *uint64_t v31 = v34;
            v31 -= 2;
            v32 -= 4;
            v33 -= 4;
          }
          while (v33);
          v26 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_37;
          }
        }
        else
        {
          int v29 = v10;
        }
      }
      else
      {
        int v29 = v10;
      }
      do
      {
        unint64_t v35 = *--v29;
        *--int v26 = v35;
      }
      while (v29 != v8);
    }
LABEL_37:
    int v36 = &v25[8 * v23];
    if (v8) {
      operator delete(v8);
    }
    unsigned int v8 = v26;
    int v10 = v27;
    uint64_t v2 = v42;
    int v12 = (unint64_t *)v36;
    goto LABEL_12;
  }
  return 0;
}

void sub_1CA754404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100]((uint64_t)va);
  re2::DFA::RWLocker::~RWLocker((pthread_rwlock_t **)(v3 - 112));
  _Unwind_Resume(a1);
}

unint64_t re2::Prog::BuildEntireDFA(uint64_t a1, int a2)
{
  unint64_t DFA = (re2::DFA *)re2::Prog::GetDFA(a1, a2);
  return re2::DFA::BuildAllStates(DFA);
}

uint64_t SGScalesRecordTime(uint64_t a1, double a2)
{
  return +[SGAggregateLogging pushValue:@"timing" toDistKeyWithDomain:a1 suffix:a2 / 1000000.0];
}

unint64_t SGMachTimeToNanoseconds(uint64_t a1)
{
  if (SGMachTimeToNanoseconds_onceToken != -1) {
    dispatch_once(&SGMachTimeToNanoseconds_onceToken, &__block_literal_global_16442);
  }
  return (unint64_t)SGMachTimeToNanoseconds_machTimebaseInfo * a1 / *(unsigned int *)algn_1EB9F00D4;
}

uint64_t __SGMachTimeToNanoseconds_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&SGMachTimeToNanoseconds_machTimebaseInfo);
}

void sub_1CA754860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA754CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16572(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__16573(uint64_t a1)
{
}

void sub_1CA7560B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16690(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__16691(uint64_t a1)
{
}

void sub_1CA75803C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7592AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA75967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_WORD *SGFeatureVectorSerialize(_WORD *a1, char a2)
{
  if (a1)
  {
    uint64_t v4 = a1;
    if ((unsigned __int16)a1[1] - 1 > 2) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = qword_1CA8D0B20[(unsigned __int16)(a1[1] - 1)];
    }
    id v6 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    if (a2) {
      a1 = (_WORD *)[v6 initWithBytesNoCopy:v4 length:v5 freeWhenDone:0];
    }
    else {
      a1 = (_WORD *)[v6 initWithBytes:v4 length:v5];
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

uint64_t SGFeatureVectorSize(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 2) - 1 > 2) {
    return 0;
  }
  else {
    return qword_1CA8D0B20[(unsigned __int16)(*(_WORD *)(a1 + 2) - 1)];
  }
}

__int16 *SGFeatureVectorParse(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 readDataOfLength:4];
  if ([v2 length] != 4) {
    goto LABEL_7;
  }
  uint64_t v3 = (__int16 *)[v2 bytes];
  uint64_t v4 = v3;
  unsigned int v5 = (unsigned __int16)v3[1];
  if (*v3 == -2)
  {
    unsigned int v5 = __rev16(v5);
    v3[1] = v5;
  }
  unsigned int v6 = v5 - 1;
  if (v6 <= 2)
  {
    size_t v7 = qword_1CA8D0B20[(unsigned __int16)v6];
    size_t v8 = v7 - 4;
    uint64_t v9 = [v1 readDataOfLength:v7 - 4];
    if ([v9 length] >= v7 - 4)
    {
      uint64_t v11 = (__int16 *)malloc_type_malloc(v7, 0x62BFDA37uLL);
      int v10 = v11;
      if (v11)
      {
        *(_DWORD *)uint64_t v11 = *v4;
        memcpy(v11 + 2, (const void *)[v9 bytes], v8);
        int v12 = (unsigned __int16)v10[1];
        if (v12 == 3)
        {
          int v14 = *v10;
          uint64_t v17 = 0x140010000C0008;
          __int16 v18 = 24;
          if (v14 == -2)
          {
            for (uint64_t i = 0; i != 10; i += 2)
              *(_DWORD *)((char *)v10 + *(unsigned __int16 *)((char *)&v17 + i)) = bswap32(*(_DWORD *)((char *)v10 + *(unsigned __int16 *)((char *)&v17 + i)));
          }
        }
        else if (v12 == 1 && *v10 == -2)
        {
          for (uint64_t j = 0; j != 9; ++j)
            *(_DWORD *)((char *)v10 + (unsigned __int16)word_1CA8D0B0E[j]) = bswap32(*(_DWORD *)((char *)v10
                                                                                               + (unsigned __int16)word_1CA8D0B0E[j]));
        }
      }
    }
    else
    {
      int v10 = 0;
    }
  }
  else
  {
LABEL_7:
    int v10 = 0;
  }

  return v10;
}

void SGFeatureVectorLog(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int16 *)(a1 + 2);
  switch(v2)
  {
    case 3:
      uint64_t v3 = sgLogHandle();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        unint64_t v22 = "True";
        if (*(unsigned char *)(a1 + 4)) {
          unint64_t v23 = "True";
        }
        else {
          unint64_t v23 = "False";
        }
        if (*(unsigned char *)(a1 + 5)) {
          unint64_t v24 = "True";
        }
        else {
          unint64_t v24 = "False";
        }
        if (*(unsigned char *)(a1 + 6)) {
          int v25 = "True";
        }
        else {
          int v25 = "False";
        }
        if (!*(unsigned char *)(a1 + 7)) {
          unint64_t v22 = "False";
        }
        double v26 = *(float *)(a1 + 8);
        int v27 = *(_DWORD *)(a1 + 12);
        int v28 = *(_DWORD *)(a1 + 16);
        int v29 = *(_DWORD *)(a1 + 20);
        int v30 = *(_DWORD *)(a1 + 24);
        int v37 = 136317186;
        *(void *)int v38 = v23;
        *(_WORD *)&v38[8] = 2080;
        uint64_t v39 = v24;
        *(_WORD *)int v40 = 2080;
        *(void *)&v40[2] = v25;
        *(_WORD *)uint64_t v41 = 2080;
        *(void *)&v41[2] = v22;
        *(_WORD *)uint64_t v42 = 2048;
        *(double *)&v42[2] = v26;
        LOWORD(v43) = 1024;
        *(_DWORD *)((char *)&v43 + 2) = v27;
        HIWORD(v43) = 1024;
        *(_DWORD *)BOOL v44 = v28;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v29;
        __int16 v45 = 1024;
        LODWORD(v46) = v30;
        uint64_t v19 = "SGDetectionNotabilityFeatureVec: <\n"
              "  Is phone number: %s\n"
              "  Is address: %s\n"
              "  In HMM-detected sig: %s\n"
              "  In DD sig: %s\n"
              "  How far down the email was this found?: %0.3f\n"
              "  Phone numbers in sig: %i\n"
              "  Phone numbers in email: %i\n"
              "  Addresses in sig: %i\n"
              "  Addresses in email: %i\n"
              ">";
        unint64_t v20 = v3;
        uint32_t v21 = 76;
        goto LABEL_52;
      }
      break;
    case 2:
      uint64_t v3 = sgLogHandle();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = "True";
        if (*(unsigned char *)(a1 + 4)) {
          int v32 = "True";
        }
        else {
          int v32 = "False";
        }
        if (*(unsigned char *)(a1 + 5)) {
          uint64_t v33 = "True";
        }
        else {
          uint64_t v33 = "False";
        }
        if (*(unsigned char *)(a1 + 6)) {
          long long v34 = "True";
        }
        else {
          long long v34 = "False";
        }
        int v35 = *(unsigned __int8 *)(a1 + 8);
        if (*(unsigned char *)(a1 + 7)) {
          int v36 = "True";
        }
        else {
          int v36 = "False";
        }
        int v37 = 136316162;
        if (!v35) {
          uint64_t v31 = "False";
        }
        *(void *)int v38 = v32;
        *(_WORD *)&v38[8] = 2080;
        uint64_t v39 = v33;
        *(_WORD *)int v40 = 2080;
        *(void *)&v40[2] = v34;
        *(_WORD *)uint64_t v41 = 2080;
        *(void *)&v41[2] = v36;
        *(_WORD *)uint64_t v42 = 2080;
        *(void *)&v42[2] = v31;
        uint64_t v19 = "SGInhumanityFeatureVec: <\n"
              "  Has one or more inhuman-looking headers: %s\n"
              "  Author email address looks inhuman: %s\n"
              "  Author name looks inhuman: %s\n"
              "  Body of email contains inhuman phrase: %s\n"
              "  Domain is a template sender: %s\n"
              ">";
        unint64_t v20 = v3;
        uint32_t v21 = 52;
        goto LABEL_52;
      }
      break;
    case 1:
      uint64_t v3 = sgLogHandle();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *(_DWORD *)(a1 + 4);
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        size_t v7 = "True";
        if (*(unsigned char *)(a1 + 16)) {
          size_t v8 = "True";
        }
        else {
          size_t v8 = "False";
        }
        if (*(unsigned char *)(a1 + 17)) {
          uint64_t v9 = "True";
        }
        else {
          uint64_t v9 = "False";
        }
        if (*(unsigned char *)(a1 + 18)) {
          int v10 = "True";
        }
        else {
          int v10 = "False";
        }
        if (*(unsigned char *)(a1 + 19)) {
          uint64_t v11 = "True";
        }
        else {
          uint64_t v11 = "False";
        }
        if (*(unsigned char *)(a1 + 20)) {
          int v12 = "True";
        }
        else {
          int v12 = "False";
        }
        double v13 = *(float *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 28);
        int v15 = *(_DWORD *)(a1 + 32);
        int v16 = *(_DWORD *)(a1 + 36);
        int v17 = *(_DWORD *)(a1 + 40);
        int v18 = *(_DWORD *)(a1 + 44);
        if (!*(unsigned char *)(a1 + 48)) {
          size_t v7 = "False";
        }
        int v37 = 67112706;
        *(_DWORD *)int v38 = v4;
        *(_WORD *)&void v38[4] = 1024;
        *(_DWORD *)&v38[6] = v5;
        LOWORD(v39) = 1024;
        *(_DWORD *)((char *)&v39 + 2) = v6;
        HIWORD(v39) = 2080;
        *(void *)int v40 = v8;
        *(_WORD *)&v40[8] = 2080;
        *(void *)uint64_t v41 = v9;
        *(_WORD *)&v41[8] = 2080;
        *(void *)uint64_t v42 = v10;
        *(_WORD *)&v42[8] = 2080;
        int v43 = v11;
        *(_WORD *)BOOL v44 = 2080;
        *(void *)&v44[2] = v12;
        __int16 v45 = 2048;
        double v46 = v13;
        __int16 v47 = 1024;
        int v48 = v14;
        __int16 v49 = 1024;
        int v50 = v15;
        __int16 v51 = 1024;
        int v52 = v16;
        __int16 v53 = 1024;
        int v54 = v17;
        __int16 v55 = 1024;
        int v56 = v18;
        __int16 v57 = 2080;
        uint64_t v58 = v7;
        uint64_t v19 = "SGRealtimeContactConfidenceFeatureVec: <\n"
              "  contacts with phone number matches: %i\n"
              "  contacts with name matches: %i\n"
              "  contact with both phone and name matches: %i\n"
              "  Phone number matches an existing contact: %s\n"
              "  Name matches an existing contact: %s\n"
              "  Email matches an existing contact: %s\n"
              "  IM Address matches an existing contact: %s\n"
              "  Existing contact has address: %s\n"
              "  Address match with existing contact, if both have addrs: %0.3f\n"
              "  New phone numbers: %i\n"
              "  New emails: %i\n"
              "  New IM addresses: %i\n"
              "  New addresses: %i\n"
              "  Length of name: %i\n"
              "  Name has at-sign: %s\n"
              ">";
        unint64_t v20 = v3;
        uint32_t v21 = 120;
LABEL_52:
        _os_log_impl(&dword_1CA650000, v20, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v37, v21);
      }
      break;
    default:
      return;
  }
}

id patterns_17196()
{
  if (patterns_onceToken_17200 != -1) {
    dispatch_once(&patterns_onceToken_17200, &__block_literal_global_223);
  }
  uint64_t v0 = (void *)patterns_patterns_17201;
  return v0;
}

uint64_t __patterns_block_invoke_17203()
{
  patterns_patterns_17201 = +[SGPatterns patternsForClass:objc_opt_class()];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA75C984(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1CA75C7A8);
  }
  _Unwind_Resume(exc_buf);
}

id SGNamesAsciify(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1 && (isLowercaseAscii(v1) & 1) == 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1CB79B230]();
    int v4 = [v2 lowercaseString];

    if (isLowercaseAscii(v4))
    {
      int v2 = v4;
    }
    else if (v4)
    {
      int v2 = _PASSimpleICUTransform();
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2;
}

id letters(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  size_t v2 = [v1 length];
  buffer[0] = 0uLL;
  if (v2 > 0x200)
  {
    int v28 = malloc_type_posix_memalign((void **)buffer, 8uLL, v2, 0x778FEE5FuLL);
    BYTE8(buffer[0]) = 0;
    if (v28)
    {
      id v29 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v29);
    }
    uint64_t v3 = *(char **)&buffer[0];
  }
  else
  {
    MEMORY[0x1F4188790]();
    uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v3, v2);
  }
  int v4 = (__CFString *)v1;
  int v5 = self;

  if (v5)
  {
    memset(buffer, 0, sizeof(buffer));
    CFIndex Length = CFStringGetLength(v4);
    uint64_t v33 = v4;
    uint64_t v36 = 0;
    CFIndex v37 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v4);
    CStringPtr = 0;
    long long v34 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
    }
    size_t v31 = v2;
    int64_t v38 = 0;
    int64_t v39 = 0;
    int v35 = CStringPtr;
    if (Length >= 1)
    {
      uint64_t v9 = 0;
      int64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 64;
      uint64_t v13 = MEMORY[0x1E4F14390];
      while (1)
      {
        if ((unint64_t)v10 >= 4) {
          uint64_t v14 = 4;
        }
        else {
          uint64_t v14 = v10;
        }
        CFIndex v15 = v37;
        if (v37 <= v10)
        {
          unsigned int v17 = 0;
          LOBYTE(v16) = 0;
        }
        else
        {
          if (v34)
          {
            UniChar v16 = v34[v10 + v36];
          }
          else if (v35)
          {
            UniChar v16 = v35[v36 + v10];
          }
          else
          {
            int64_t v18 = v38;
            if (v39 <= v10 || v38 > v10)
            {
              uint64_t v20 = v14 + v9;
              uint64_t v21 = v12 - v14;
              int64_t v22 = v10 - v14;
              CFIndex v23 = v22 + 64;
              if (v22 + 64 >= v37) {
                CFIndex v23 = v37;
              }
              int64_t v38 = v22;
              int64_t v39 = v23;
              if (v37 >= v21) {
                CFIndex v15 = v21;
              }
              v42.length = v15 + v20;
              v42.id location = v22 + v36;
              CFStringGetCharacters(v33, v42, (UniChar *)buffer);
              int64_t v18 = v38;
            }
            UniChar v16 = *((_WORD *)buffer + v10 - v18);
          }
          unsigned int v17 = v16;
          if (v16 > 0x7Fu)
          {
            int v24 = __maskrune(v16, 0x100uLL);
            LOBYTE(v16) = v17;
            if (!v24) {
              goto LABEL_30;
            }
LABEL_29:
            v3[v11++] = v16;
            goto LABEL_30;
          }
        }
        if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x100) != 0) {
          goto LABEL_29;
        }
LABEL_30:
        ++v10;
        --v9;
        ++v12;
        if (Length == v10) {
          goto LABEL_36;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_36:
    size_t v2 = v31;
  }
  else
  {
    uint64_t v11 = 0;
  }

  if (v11 == v2)
  {
    uint64_t v25 = [(__CFString *)v4 copy];
  }
  else
  {
    v3[v11] = 0;
    uint64_t v25 = [[NSString alloc] initWithCString:v3 encoding:1];
  }
  double v26 = (void *)v25;
  if (v2 >= 0x201) {
    free(v3);
  }

  return v26;
}

__CFString *sketchWithInitialAndName(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  int v6 = &stru_1F24EEF20;
  if (v3 && v4)
  {
    uint64_t v7 = [v3 length];
    if (v7 != 1)
    {
      if (!v7)
      {
        int v6 = v5;
        goto LABEL_17;
      }
      size_t v8 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v9 = objc_msgSend(v3, "substringWithRange:", 0, 1);

      id v3 = (id)v9;
    }
    int64_t v10 = (const char *)[v5 UTF8String];
    id v3 = v3;
    uint64_t v11 = (const char *)[v3 UTF8String];
    int v6 = &stru_1F24EEF20;
    if (v10)
    {
      uint64_t v12 = v11;
      if (v11)
      {
        size_t v13 = strlen(v11);
        size_t v14 = v13 + strlen(v10) + 2;
        memptr = 0;
        uint64_t v23 = 0;
        if (v14 > 0x200)
        {
          int v19 = malloc_type_posix_memalign(&memptr, 8uLL, v14, 0x95FD74B8uLL);
          LOBYTE(v23) = 0;
          if (v19)
          {
            id v20 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
            objc_exception_throw(v20);
          }
          CFIndex v15 = (char *)memptr;
        }
        else
        {
          MEMORY[0x1F4188790]();
          CFIndex v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v15, v14);
        }
        snprintf(v15, v14, "%s.%s", v12, v10);
        UniChar v16 = (__CFString *)[[NSString alloc] initWithUTF8String:v15];
        if (v14 >= 0x201) {
          free(v15);
        }
        if (v16) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = &stru_1F24EEF20;
        }
        int v6 = v17;
      }
    }
  }
LABEL_17:

  return v6;
}

id SGNamesOnlyNameChars(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    _PASGetNameCharacterSet();
    size_t v2 = _PASKeepOnlyCharacterSet();
  }
  else
  {
    size_t v2 = 0;
  }
  return v2;
}

id tokenizeName(void *a1)
{
  id v1 = a1;
  if (tokenizeName__pasOnceToken35 != -1) {
    dispatch_once(&tokenizeName__pasOnceToken35, &__block_literal_global_231_17249);
  }
  id v2 = (id)tokenizeName__pasExprOnceResult;
  id v3 = objc_opt_new();
  id v4 = [v2 result];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __tokenizeName_block_invoke_3;
  v10[3] = &unk_1E65B89E8;
  id v13 = v1;
  id v11 = v1;
  id v5 = v3;
  id v12 = v5;
  id v6 = v1;
  [v4 runWithLockAcquired:v10];

  uint64_t v7 = v12;
  id v8 = v5;

  return v8;
}

long double limitedTermProb(void *a1)
{
  unsigned int v1 = nameData(a1);
  double v2 = (double)(int)((v1 >> 12) + 1) / 47171077.0;
  if ((v1 & 2) == 0) {
    double v2 = 0.0000000211994312;
  }
  long double result = log10(v2);
  if (result < -3.5) {
    return -3.5;
  }
  return result;
}

uint64_t nameData(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] > 0x20)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (nameFreqTrie_onceToken != -1) {
      dispatch_once(&nameFreqTrie_onceToken, &__block_literal_global_204);
    }
    pthread_mutex_lock(&nameFreqTrie_updateLock);
    id v2 = (id)nameFreqTrie_trie;
    pthread_mutex_unlock(&nameFreqTrie_updateLock);
    uint64_t v3 = [v2 payloadForString:v1];
  }
  return v3;
}

void __nameFreqTrie_block_invoke()
{
  uint64_t v0 = +[SGAsset asset];
  id v1 = (id)[v0 registerUpdateHandler:&__block_literal_global_207];

  id v2 = +[SGAsset asset];
  __nameFreqTrie_block_invoke_2((uint64_t)v2, v2);
}

void __nameFreqTrie_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  pthread_mutex_lock(&nameFreqTrie_updateLock);
  id v7 = [v2 filesystemPathForAssetDataRelativePath:@"namefreq.trie"];

  uint64_t v3 = (uint64_t)v7;
  if (v7) {
    uint64_t v3 = [objc_alloc(MEMORY[0x1E4F93AC8]) initWithPath:v7];
  }
  id v4 = (void *)nameFreqTrie_trie;
  nameFreqTrie_trie = v3;

  if (!nameFreqTrie_trie)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = [NSString stringWithUTF8String:"_PASCFBurstTrie *nameFreqTrie(void)_block_invoke_2"];
    [v5 handleFailureInFunction:v6 file:@"SGNames.m" lineNumber:65 description:@"Could not load name frequency trie"];
  }
  pthread_mutex_unlock(&nameFreqTrie_updateLock);
}

void __tokenizeName_block_invoke_3(uint64_t a1, void *a2)
{
  tokenizer = a2;
  CFStringRef v3 = *(const __CFString **)(a1 + 48);
  v12.length = [*(id *)(a1 + 32) length];
  v12.id location = 0;
  CFStringTokenizerSetString(tokenizer, v3, v12);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (CFStringTokenizerAdvanceToNextToken(tokenizer))
  {
    CurrentTokenuint64_t Range = CFStringTokenizerGetCurrentTokenRange(tokenizer);
    id v5 = (__CFString *)CFStringCreateWithSubstring(v4, *(CFStringRef *)(a1 + 48), CurrentTokenRange);
    id v6 = SGNamesAsciify(v5);
    id v7 = [MEMORY[0x1E4F28B88] alphanumericCharacterSet];
    [v6 rangeOfCharacterFromSet:v7];
    uint64_t v9 = v8;

    if (v9) {
      [*(id *)(a1 + 40) addObject:v6];
    }
    CFRelease(v5);
  }
  v14.id location = 0;
  v14.length = 1;
  CFStringTokenizerSetString(tokenizer, @"⌘", v14);
  CFRelease(tokenizer);
}

void __tokenizeName_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_234 idleTimeout:1.0];
  id v2 = (void *)tokenizeName__pasExprOnceResult;
  tokenizeName__pasExprOnceResult = v1;
}

id __tokenizeName_block_invoke_2()
{
  CFLocaleRef v0 = CFLocaleCopyCurrent();
  v7.id location = 0;
  v7.length = 0;
  CFStringTokenizerRef v1 = CFStringTokenizerCreate(0, 0, v7, 4uLL, v0);
  if (!v1)
  {
    CFAllocatorRef v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSArray<NSString *> *tokenizeName(NSString *__strong)_block_invoke_2"];
    [v4 handleFailureInFunction:v5, @"SGNames.m", 940, @"Invalid parameter not satisfying: %@", @"guardedTokenizer" file lineNumber description];
  }
  CFRelease(v0);
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F93B70]) initWithGuardedData:v1];

  return v2;
}

void sub_1CA75F698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17263(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__17264(uint64_t a1)
{
}

void sub_1CA760348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id removeParens(void *a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v10 = 0;
    goto LABEL_39;
  }
  CFStringRef v3 = (__CFString *)v1;
  CFAllocatorRef v4 = self;

  if (!v4) {
    goto LABEL_38;
  }
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v54 = 0u;
  long long buffer = 0u;
  CFIndex Length = CFStringGetLength(v3);
  CFStringRef v61 = v3;
  uint64_t v64 = 0;
  CFIndex v65 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  unint64_t v62 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v63 = CStringPtr;
  if (Length < 1)
  {
LABEL_38:

    uint64_t v10 = v3;
    goto LABEL_39;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 64;
  while (1)
  {
    uint64_t v12 = (unint64_t)v10 >= 4 ? 4 : v10;
    CFIndex v13 = v65;
    if (v65 <= v10)
    {
      UniChar v14 = 0;
    }
    else
    {
      if (v62)
      {
        UniChar v14 = v62[v10 + v64];
      }
      else if (v63)
      {
        UniChar v14 = v63[v64 + v10];
      }
      else
      {
        if (v67 <= v10 || v9 > v10)
        {
          uint64_t v18 = v12 + v8;
          uint64_t v19 = v11 - v12;
          uint64_t v20 = v10 - v12;
          CFIndex v21 = v20 + 64;
          if (v20 + 64 >= v65) {
            CFIndex v21 = v65;
          }
          uint64_t v66 = v20;
          uint64_t v67 = v21;
          if (v65 >= v19) {
            CFIndex v13 = v19;
          }
          v70.length = v13 + v18;
          v70.id location = v20 + v64;
          CFStringGetCharacters(v61, v70, (UniChar *)&buffer);
          uint64_t v9 = v66;
        }
        UniChar v14 = *((_WORD *)&buffer + v10 - v9);
      }
      if (v14 - 40 <= 0x33 && ((1 << (v14 - 40)) & 0x8000000100001) != 0)
      {
        int v16 = 0;
        int v15 = 1;
        goto LABEL_32;
      }
    }
    int v15 = 0;
    int v16 = 1;
LABEL_32:
    unsigned int v23 = v14 - 40;
    if (v23 <= 0x33 && ((1 << v23) & 0x8000000100001) != 0) {
      break;
    }
    ++v10;
    --v8;
    ++v11;
    if (Length == v10) {
      goto LABEL_38;
    }
  }
  if (v16) {
    goto LABEL_38;
  }

  if (v15)
  {
    size_t v25 = (2 * [(__CFString *)v3 length]) | 1;
    long long buffer = 0uLL;
    if (v25 > 0x200)
    {
      int v49 = malloc_type_posix_memalign((void **)&buffer, 8uLL, 2 * [(__CFString *)v3 length], 0x1000040BDFB0063uLL);
      BYTE8(buffer) = 0;
      if (v49)
      {
        id v50 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
        objc_exception_throw(v50);
      }
      int v52 = (char *)buffer;
    }
    else
    {
      MEMORY[0x1F4188790]();
      int v52 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v52, v25);
    }
    uint64_t v10 = v3;
    uint64_t v26 = self;

    if (v26)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v54 = 0u;
      long long buffer = 0u;
      CFIndex v27 = CFStringGetLength((CFStringRef)v10);
      CFStringRef v61 = (CFStringRef)v10;
      uint64_t v64 = 0;
      CFIndex v65 = v27;
      int v28 = CFStringGetCharactersPtr((CFStringRef)v10);
      id v29 = 0;
      unint64_t v62 = v28;
      if (!v28) {
        id v29 = CFStringGetCStringPtr((CFStringRef)v10, 0x600u);
      }
      size_t v51 = v25;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v63 = v29;
      if (v27 >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v26 = 0;
        uint64_t v36 = 64;
        CFIndex v37 = v52;
        while (1)
        {
          uint64_t v38 = (unint64_t)v32 >= 4 ? 4 : v32;
          CFIndex v39 = v65;
          if (v65 <= v32) {
            break;
          }
          if (v62)
          {
            UniChar v40 = v62[v32 + v64];
          }
          else if (v63)
          {
            UniChar v40 = v63[v64 + v32];
          }
          else
          {
            if (v67 <= v32 || v31 > v32)
            {
              uint64_t v42 = v38 + v30;
              uint64_t v43 = v36 - v38;
              uint64_t v44 = v32 - v38;
              CFIndex v45 = v44 + 64;
              if (v44 + 64 >= v65) {
                CFIndex v45 = v65;
              }
              uint64_t v66 = v44;
              uint64_t v67 = v45;
              if (v65 >= v43) {
                CFIndex v39 = v43;
              }
              v71.length = v39 + v42;
              v71.id location = v44 + v64;
              CFStringGetCharacters(v61, v71, (UniChar *)&buffer);
              CFIndex v37 = v52;
              uint64_t v31 = v66;
            }
            UniChar v40 = *((_WORD *)&buffer + v32 - v31);
          }
          if (v40 > 0x3Du)
          {
            switch(v40)
            {
              case '>':
                if (!v34) {
                  goto LABEL_39;
                }
                --v34;
                break;
              case '[':
                ++v33;
                break;
              case ']':
                if (!v33) {
                  goto LABEL_39;
                }
                --v33;
                break;
              default:
                goto LABEL_57;
            }
          }
          else
          {
            switch(v40)
            {
              case '(':
                ++v35;
                break;
              case ')':
                if (!v35) {
                  goto LABEL_39;
                }
                --v35;
                break;
              case '<':
                ++v34;
                break;
              default:
                goto LABEL_57;
            }
          }
LABEL_61:
          ++v32;
          --v30;
          ++v36;
          if (v27 == v32) {
            goto LABEL_93;
          }
        }
        UniChar v40 = 0;
LABEL_57:
        if (!v35 && !v34 && !v33)
        {
          uint64_t v35 = 0;
          uint64_t v34 = 0;
          *(_WORD *)&v37[2 * v26++] = v40;
        }
        goto LABEL_61;
      }
      uint64_t v26 = 0;
      uint64_t v35 = 0;
      uint64_t v34 = 0;
      uint64_t v33 = 0;
LABEL_93:
      size_t v25 = v51;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v34 = 0;
      uint64_t v33 = 0;
    }

    uint64_t v46 = [(id)v10 length];
    if (v34 + v35 + v33 || v26 == v46)
    {
      uint64_t v48 = objc_msgSend((id)v10, "copy", v51);
    }
    else
    {
      id v47 = [NSString alloc];
      uint64_t v48 = [v47 initWithCharacters:v52 length:v26];
    }
    uint64_t v10 = v48;
    if (v25 >= 0x201) {
      free(v52);
    }
  }
LABEL_39:

  return (id)v10;
}

void sub_1CA760ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void findEndOfHonorificPrefixCandidate(void *a1, void *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = a1;
  CFAllocatorRef v4 = a2;
  unint64_t v5 = [(__CFString *)v3 length];
  CharactersPtr = (UniChar *)CFStringGetCharactersPtr(v3);
  if (!CharactersPtr)
  {
    MEMORY[0x1F4188790]();
    CharactersPtr = (UniChar *)((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(CharactersPtr, v7);
    [(__CFString *)v3 getCharacters:CharactersPtr];
  }
  if (v5)
  {
    unint64_t v8 = 0;
    while (1)
    {
      int v9 = CharactersPtr[v8];
      if (v9 == 32 || v9 == 46) {
        break;
      }
      if (v5 == ++v8) {
        goto LABEL_18;
      }
    }
    if (v9 == 46) {
      unint64_t v10 = v8 + 1;
    }
    else {
      unint64_t v10 = v8;
    }
    unint64_t v11 = v10;
    if (v10 < v5)
    {
      unint64_t v11 = v10;
      while (CharactersPtr[v11] == 32)
      {
        if (++v11 >= v5)
        {
          unint64_t v11 = v5;
          break;
        }
      }
    }
    v4[2](v4, v10, v11, v9 == 46);
  }
LABEL_18:
}

void __enumerateTrailingHonorificMatchesInString_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v10 = a2;
  id v6 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = [v10 range];
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v7, v8, v9) & 1) == 0) {
    *a4 = 1;
  }
}

void __enumerateTrailingHonorificMatchesInString_block_invoke()
{
  CFLocaleRef v0 = patterns_17196();
  id v1 = [v0 rawValueForKey:@"TrailingHonorific"];

  if (!v1)
  {
    unint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void enumerateTrailingHonorificMatchesInString(NSString *__strong, BOOL (^__strong)(NSRange))_block_invoke");
    [v5 handleFailureInFunction:v6 file:@"SGNames.m" lineNumber:691 description:@"Could not initialize the raw regexp"];
  }
  id v9 = 0;
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F28FD8]) initWithPattern:v1 options:0 error:&v9];
  id v3 = v9;
  CFAllocatorRef v4 = (void *)enumerateTrailingHonorificMatchesInString_trailingRe;
  enumerateTrailingHonorificMatchesInString_trailingRe = v2;

  if (!enumerateTrailingHonorificMatchesInString_trailingRe)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void enumerateTrailingHonorificMatchesInString(NSString *__strong, BOOL (^__strong)(NSRange))_block_invoke");
    [v7 handleFailureInFunction:v8, @"SGNames.m", 693, @"Could not initialize regular expression: %@", v3 file lineNumber description];
  }
}

uint64_t SGGuessNamingTradition(void *a1)
{
  id v1 = a1;
  if (SGGuessNamingTradition__pasOnceToken3 != -1) {
    dispatch_once(&SGGuessNamingTradition__pasOnceToken3, &__block_literal_global_17319);
  }
  id v2 = (id)SGGuessNamingTradition__pasExprOnceResult;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __SGGuessNamingTradition_block_invoke_2;
  v6[3] = &unk_1E65BB4E8;
  id v3 = v1;
  id v7 = v3;
  uint64_t v8 = &v9;
  [v2 runWithLockAcquired:v6];
  uint64_t v4 = *((unsigned int *)v10 + 6);

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1CA761AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __SGGuessNamingTradition_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  unint64_t v5 = v4;
  if (v4)
  {
    LODWORD(v6) = [v4 intValue];
    goto LABEL_3;
  }
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = (void *)MEMORY[0x1CB79B230]();
  if ([v7 length])
  {
    v143 = chineseCharSet();
    v142 = hangulCharSet();
    v141 = japaneseCharSet();
    if (latinCharSet_onceToken != -1) {
      dispatch_once(&latinCharSet_onceToken, &__block_literal_global_188_17320);
    }
    id v140 = (id)latinCharSet_result;
    if (cyrillicCharSet_onceToken != -1) {
      dispatch_once(&cyrillicCharSet_onceToken, &__block_literal_global_200);
    }
    id v139 = (id)cyrillicCharSet_result;
    if (thaiCharSet_onceToken != -1) {
      dispatch_once(&thaiCharSet_onceToken, &__block_literal_global_202);
    }
    id v138 = (id)thaiCharSet_result;
    uint64_t v9 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
    id v10 = off_1E65B4000;
    v137 = +[SGNames cjkSpacerCharacters];
    uint64_t v11 = [v7 rangeOfString:@"," options:2];
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v12 = v7;
    }
    else
    {
      CFIndex v13 = [v7 substringFromIndex:v11 + 1];
      id v12 = [v13 stringByTrimmingCharactersInSet:v9];
    }
    id v132 = v12;
    uint64_t v14 = [v12 rangeOfCharacterFromSet:v9];
    if (v14 != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v15 = [v12 substringToIndex:v14];
      BOOL v16 = +[SGNames isCommonVietnameseSurname:v15];

      if (v16)
      {
        uint64_t v6 = 3;
        unsigned int v17 = v132;
LABEL_142:

        goto LABEL_143;
      }
    }
    uint64_t v18 = (__CFString *)v7;
    uint64_t v19 = self;

    id v124 = v7;
    int v123 = v8;
    v136 = v9;
    if (v19)
    {
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      *(_OWORD *)long long buffer = 0u;
      long long v155 = 0u;
      CFIndex Length = CFStringGetLength(v18);
      CFStringRef theString = v18;
      uint64_t v165 = 0;
      CFIndex v166 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v18);
      CStringPtr = 0;
      v163 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(v18, 0x600u);
      }
      id v144 = v3;
      int64_t v167 = 0;
      int64_t v168 = 0;
      v164 = CStringPtr;
      if (Length < 1)
      {
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        uint64_t v147 = 0;
        int v26 = 0;
        int v25 = 0;
      }
      else
      {
        uint64_t v23 = 0;
        int64_t v24 = 0;
        int v25 = 0;
        int v26 = 0;
        uint64_t v147 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        uint64_t v27 = 64;
        do
        {
          if ((unint64_t)v24 >= 4) {
            uint64_t v28 = 4;
          }
          else {
            uint64_t v28 = v24;
          }
          CFIndex v29 = v166;
          if (v166 <= v24)
          {
            UniChar v30 = 0;
          }
          else if (v163)
          {
            UniChar v30 = v163[v24 + v165];
          }
          else if (v164)
          {
            UniChar v30 = v164[v165 + v24];
          }
          else
          {
            int64_t v32 = v167;
            if (v168 <= v24 || v167 > v24)
            {
              uint64_t v34 = v28 + v23;
              uint64_t v35 = v27 - v28;
              int64_t v36 = v24 - v28;
              CFIndex v37 = v36 + 64;
              if (v36 + 64 >= v166) {
                CFIndex v37 = v166;
              }
              int64_t v167 = v36;
              int64_t v168 = v37;
              if (v166 >= v35) {
                CFIndex v29 = v35;
              }
              v170.length = v29 + v34;
              v170.id location = v36 + v165;
              CFStringGetCharacters(theString, v170, buffer);
              int64_t v32 = v167;
            }
            UniChar v30 = buffer[v24 - v32];
          }
          uint64_t v31 = v30;
          HIDWORD(v148) += [v143 characterIsMember:v31];
          LODWORD(v149) = v149 + [v142 characterIsMember:v31];
          HIDWORD(v149) += [v141 characterIsMember:v31];
          v25 += [v138 characterIsMember:v31];
          LODWORD(v148) = v148 + [v140 characterIsMember:v31];
          HIDWORD(v147) += [v136 characterIsMember:v31];
          LODWORD(v147) = v147 + [v137 characterIsMember:v31];
          v26 += [v139 characterIsMember:v31];
          ++v24;
          --v23;
          ++v27;
        }
        while (Length != v24);
      }
      int v122 = v26;
      id v3 = v144;
      id v10 = off_1E65B4000;
    }
    else
    {
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v147 = 0;
      int v122 = 0;
      int v25 = 0;
    }

    uint64_t v38 = v18;
    context = (void *)MEMORY[0x1CB79B230]();
    CFIndex v39 = patterns_17196();
    UniChar v40 = [v39 rawValueForKey:@"SpanishNameClassifierConfidenceThreshold"];
    uint64_t v41 = [v40 objectAtIndexedSubscript:0];
    [v41 floatValue];
    float v43 = v42;

    uint64_t v44 = patterns_17196();
    v135 = [v44 rawValueForKey:@"SpanishNameCharacterIndicators"];

    CFIndex v45 = patterns_17196();
    v145 = [v45 rawValueForKey:@"SpanishNameUnigramIndicators"];

    uint64_t v46 = patterns_17196();
    v134 = [v46 rawValueForKey:@"SpanishNameBigramIndicators"];

    id v47 = patterns_17196();
    long long v133 = [v47 rawValueForKey:@"TwoCharSpanishNameEndings"];

    uint64_t v48 = patterns_17196();
    int v49 = [v48 rawValueForKey:@"SpanishNameLocaleIndicators"];

    id v50 = [MEMORY[0x1E4F1CA20] currentLocale];
    uint64_t v51 = [v50 localeIdentifier];

    uint64_t v128 = (void *)v51;
    unsigned __int8 v129 = v49;
    int v52 = [v49 objectForKeyedSubscript:v51];
    __int16 v53 = v52;
    if (v52)
    {
      [v52 floatValue];
      double v55 = v54 + 0.0;
    }
    else
    {
      double v55 = 0.0;
    }
    CFStringRef v56 = v38;
    long long v57 = self;

    uint64_t v131 = (__CFString *)v56;
    uint64_t v125 = a1;
    if (v57)
    {
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      *(_OWORD *)long long buffer = 0u;
      long long v155 = 0u;
      CFIndex v58 = CFStringGetLength(v56);
      CFStringRef theString = v56;
      uint64_t v165 = 0;
      CFIndex v166 = v58;
      long long v59 = CFStringGetCharactersPtr(v56);
      long long v60 = 0;
      v163 = v59;
      if (!v59) {
        long long v60 = CFStringGetCStringPtr(v56, 0x600u);
      }
      int64_t v167 = 0;
      int64_t v168 = 0;
      v164 = v60;
      if (v58 >= 1)
      {
        uint64_t v61 = 0;
        int64_t v62 = 0;
        uint64_t v63 = 64;
        do
        {
          UniChar v64 = 0;
          if ((unint64_t)v62 >= 4) {
            uint64_t v65 = 4;
          }
          else {
            uint64_t v65 = v62;
          }
          LOWORD(v15re2::Compiler::Compile(this, 0) = 0;
          CFIndex v66 = v166;
          if (v166 > v62)
          {
            if (v163)
            {
              UniChar v64 = v163[v62 + v165];
            }
            else if (v164)
            {
              UniChar v64 = v164[v165 + v62];
            }
            else
            {
              int64_t v67 = v167;
              if (v168 <= v62 || v167 > v62)
              {
                uint64_t v69 = v65 + v61;
                uint64_t v70 = v63 - v65;
                int64_t v71 = v62 - v65;
                CFIndex v72 = v71 + 64;
                if (v71 + 64 >= v166) {
                  CFIndex v72 = v166;
                }
                int64_t v167 = v71;
                int64_t v168 = v72;
                if (v166 >= v70) {
                  CFIndex v66 = v70;
                }
                v171.length = v66 + v69;
                v171.id location = v71 + v165;
                CFStringGetCharacters(theString, v171, buffer);
                int64_t v67 = v167;
              }
              UniChar v64 = buffer[v62 - v67];
            }
          }
          LOWORD(v15re2::Compiler::Compile(this, 0) = v64;
          unint64_t v73 = (void *)MEMORY[0x1CB79B230]();
          CFRange v74 = [NSString stringWithCharacters:&v150 length:1];
          CFRange v75 = [v135 objectForKeyedSubscript:v74];

          if (v75)
          {
            [v75 floatValue];
            double v55 = v55 + v76;
          }

          ++v62;
          --v61;
          ++v63;
        }
        while (v58 != v62);
      }
      id v10 = off_1E65B4000;
    }

    long long v77 = [(__objc2_class *)v10[190] cleanName:v131];
    uint64_t v78 = [v77 lowercaseString];

    v127 = (void *)v78;
    uint64_t v79 = [(__objc2_class *)v10[190] stripAndReturnHonorifics:v78];
    long long v80 = v10[190];
    uint64_t v126 = v79;
    long long v81 = [v79 objectAtIndexedSubscript:1];
    uint64_t v82 = [(__objc2_class *)v80 handleLastNameFirstOrder:v81];
    id v83 = tokenizeNameAfterWhitespaceNormalization(v82);

    if ([v83 count])
    {
      unint64_t v84 = 0;
      do
      {
        id v85 = (void *)MEMORY[0x1CB79B230]();
        id v86 = [v83 objectAtIndexedSubscript:v84];
        id v87 = [v145 objectForKeyedSubscript:v86];

        if (v87)
        {
          [v87 floatValue];
          double v55 = v55 + v88;
        }
        if ((unint64_t)[v86 length] >= 3)
        {
          id v89 = objc_msgSend(v86, "substringFromIndex:", objc_msgSend(v86, "length") - 2);
          id v90 = [v133 objectForKeyedSubscript:v89];

          if (v90)
          {
            [v90 floatValue];
            double v55 = v55 + v91;
            id v87 = v90;
          }
          else
          {
            id v87 = 0;
          }
        }
        unint64_t v92 = v84 + 1;
        if ([v83 count] <= v84 + 1)
        {
          __int16 v53 = v87;
        }
        else
        {
          unint64_t v93 = objc_msgSend(v83, "subarrayWithRange:", v84, 2);
          uint64_t v94 = objc_msgSend(v93, "_pas_componentsJoinedByString:", @" ");

          __int16 v53 = [v134 objectForKeyedSubscript:v94];

          if (v53)
          {
            [v53 floatValue];
            double v55 = v55 + v95;
          }
        }
        unint64_t v84 = v92;
      }
      while ([v83 count] > v92);
    }

    uint64_t v96 = v131;

    if (forcePreferChinese)
    {
      int v97 = 0;
      int v98 = 1;
LABEL_115:
      unsigned int v17 = v132;
      goto LABEL_116;
    }
    unsigned int v17 = v132;
    if (forcePreferJapanese)
    {
      int v98 = 0;
      int v97 = 1;
LABEL_116:
      uint64_t v111 = [(__CFString *)v96 length];
      int v112 = (int)v149 > 0;
      if (SHIDWORD(v148) > 0) {
        ++v112;
      }
      if (SHIDWORD(v149) > 0) {
        ++v112;
      }
      int v113 = v25;
      if (v25 <= 0) {
        int v114 = 0;
      }
      else {
        int v114 = -1;
      }
      if (v112 == v114 || (int)v148 <= 0)
      {
        uint64_t v115 = v111 - SHIDWORD(v147);
        if (v115 == v147 + HIDWORD(v148) + HIDWORD(v149))
        {
          unint64_t v5 = 0;
          uint64_t v8 = v123;
          uint64_t v9 = v136;
          if ((SHIDWORD(v149) > 0) | v97 & (v98 ^ 1) & 1)
          {
            uint64_t v6 = 2;
            a1 = v125;
            id v7 = v124;
          }
          else
          {
            char v116 = v98 ^ 1 | v97;
            uint64_t v6 = 1;
            a1 = v125;
            id v7 = v124;
            if (v116)
            {
              if ((int)v147 + HIDWORD(v147) < 1) {
                uint64_t v6 = 1;
              }
              else {
                uint64_t v6 = 2;
              }
            }
          }
        }
        else
        {
          unint64_t v5 = 0;
          a1 = v125;
          uint64_t v8 = v123;
          id v7 = v124;
          uint64_t v9 = v136;
          if (v115 == v147 + HIDWORD(v148) + v149)
          {
            uint64_t v6 = 0;
          }
          else if ((double)(v113 + (int)v147) / (double)v115 <= 0.8)
          {
            if ((double)v122 / (double)v115 <= 0.5)
            {
              if (v55 <= v43) {
                uint64_t v6 = 8;
              }
              else {
                uint64_t v6 = 7;
              }
            }
            else
            {
              uint64_t v6 = 4;
            }
          }
          else
          {
            uint64_t v6 = 6;
          }
        }
      }
      else
      {
        uint64_t v6 = 5;
        unint64_t v5 = 0;
        a1 = v125;
        uint64_t v8 = v123;
        id v7 = v124;
        uint64_t v9 = v136;
      }
      goto LABEL_142;
    }
    id v146 = v3;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    unint64_t v99 = [MEMORY[0x1E4F1CA20] preferredLanguages];
    uint64_t v100 = [v99 countByEnumeratingWithState:&v150 objects:buffer count:16];
    if (v100)
    {
      uint64_t v101 = v100;
      char v102 = 0;
      int v97 = 0;
      uint64_t v103 = *(void *)v151;
      do
      {
        for (uint64_t i = 0; i != v101; ++i)
        {
          if (*(void *)v151 != v103) {
            objc_enumerationMutation(v99);
          }
          unint64_t v105 = *(void **)(*((void *)&v150 + 1) + 8 * i);
          if ([v105 hasPrefix:@"zh"]) {
            char v102 = 1;
          }
          else {
            v97 |= [v105 hasPrefix:@"ja"];
          }
        }
        uint64_t v101 = [v99 countByEnumeratingWithState:&v150 objects:buffer count:16];
      }
      while (v101);
    }
    else
    {
      char v102 = 0;
      int v97 = 0;
    }

    uint64_t v106 = (void *)MEMORY[0x1E4F1CA20];
    unint64_t v107 = [MEMORY[0x1E4F1CA20] currentLocale];
    unint64_t v108 = [v107 localeIdentifier];
    v109 = [v106 componentsFromLocaleIdentifier:v108];

    v110 = [v109 objectForKeyedSubscript:*MEMORY[0x1E4F1C400]];
    if ([v110 isEqualToString:@"CN"])
    {
      id v3 = v146;
      uint64_t v96 = v131;
    }
    else
    {
      id v3 = v146;
      uint64_t v96 = v131;
      if (([v110 isEqualToString:@"HK"] & 1) == 0
        && ([v110 isEqualToString:@"MO"] & 1) == 0
        && ([v110 isEqualToString:@"TW"] & 1) == 0)
      {
        v97 |= [v110 isEqualToString:@"JP"];
        if ((v102 & 1) == 0)
        {
          int v98 = 0;
          goto LABEL_114;
        }
      }
    }
    int v98 = v97 ^ 1;
    int v97 = 0;
LABEL_114:

    goto LABEL_115;
  }
  uint64_t v6 = 8;
LABEL_143:

  v117 = *(void **)(a1 + 32);
  if (v117 && (unint64_t)[v117 length] <= 0x3FF)
  {
    v118 = (void *)MEMORY[0x1CB79B230]();
    if (objc_msgSend(*(id *)(a1 + 32), "_pas_retainsConmingledBackingStore")) {
      id v119 = (id)[[NSString alloc] initWithString:*(void *)(a1 + 32)];
    }
    else {
      id v119 = *(id *)(a1 + 32);
    }
    uint64_t v120 = v119;
    if ((unint64_t)[v3 count] >= 0x19) {
      [v3 removeAllObjects];
    }
    BOOL v121 = [NSNumber numberWithUnsignedInt:v6];
    [v3 setObject:v121 forKeyedSubscript:v120];
  }
LABEL_3:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

id chineseCharSet()
{
  if (chineseCharSet_onceToken != -1) {
    dispatch_once(&chineseCharSet_onceToken, &__block_literal_global_217);
  }
  CFLocaleRef v0 = (void *)chineseCharSet_result;
  return v0;
}

id hangulCharSet()
{
  if (hangulCharSet_onceToken != -1) {
    dispatch_once(&hangulCharSet_onceToken, &__block_literal_global_221);
  }
  CFLocaleRef v0 = (void *)hangulCharSet_result;
  return v0;
}

id japaneseCharSet()
{
  if (japaneseCharSet_onceToken != -1) {
    dispatch_once(&japaneseCharSet_onceToken, &__block_literal_global_219);
  }
  CFLocaleRef v0 = (void *)japaneseCharSet_result;
  return v0;
}

uint64_t __thaiCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  thaiCharSet_long double result = charSetWithEndpoints(2, a2, a3, a4, a5, a6, a7, a8, 3584);
  return MEMORY[0x1F41817F8]();
}

id charSetWithEndpoints(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    unsigned int v17 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "NSCharacterSet *charSetWithEndpoints(int, ...)");
    [v17 handleFailureInFunction:v18, @"SGNames.m", 105, @"Invalid parameter not satisfying: %@", @"n_args && (n_args % 2) == 0" file lineNumber description];
  }
  CFIndex v21 = (int *)&a9;
  id v10 = objc_opt_new();
  int v11 = 1;
  do
  {
    id v12 = v21;
    int v13 = *v21;
    v21 += 4;
    LODWORD(v12) = v12[2];
    int v14 = v12 - v13;
    if ((int)v12 <= v13)
    {
      uint64_t v20 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "NSCharacterSet *charSetWithEndpoints(int, ...)");
      [v20 handleFailureInFunction:v19, @"SGNames.m", 112, @"Invalid parameter not satisfying: %@", @"start < end" file lineNumber description];
    }
    objc_msgSend(v10, "addCharactersInRange:", v13, v14 + 1);
    v11 += 2;
  }
  while (v11 <= a1);
  int v15 = (void *)[v10 copy];

  return v15;
}

uint64_t __cyrillicCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cyrillicCharSet_long double result = charSetWithEndpoints(10, a2, a3, a4, a5, a6, a7, a8, 1024);
  return MEMORY[0x1F41817F8]();
}

uint64_t __latinCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  latinCharSet_long double result = charSetWithEndpoints(6, a2, a3, a4, a5, a6, a7, a8, 65);
  return MEMORY[0x1F41817F8]();
}

uint64_t __japaneseCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  japaneseCharSet_long double result = charSetWithEndpoints(14, a2, a3, a4, a5, a6, a7, a8, 12352);
  return MEMORY[0x1F41817F8]();
}

uint64_t __hangulCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  hangulCharSet_long double result = charSetWithEndpoints(14, a2, a3, a4, a5, a6, a7, a8, 44032);
  return MEMORY[0x1F41817F8]();
}

uint64_t __chineseCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  chineseCharSet_long double result = charSetWithEndpoints(2, a2, a3, a4, a5, a6, a7, a8, 19968);
  return MEMORY[0x1F41817F8]();
}

void __SGGuessNamingTradition_block_invoke()
{
  CFLocaleRef v0 = (void *)MEMORY[0x1CB79B230]();
  id v1 = objc_alloc(MEMORY[0x1E4F93B70]);
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:25];
  uint64_t v3 = [v1 initWithGuardedData:v2];
  uint64_t v4 = (void *)SGGuessNamingTradition__pasExprOnceResult;
  SGGuessNamingTradition__pasExprOnceResult = v3;
}

void SGPreferChineseNamesForTesting()
{
  forcePreferChinese = 1;
  forcePreferJapanese = 0;
}

void SGPreferJapaneseNamesForTesting()
{
  forcePreferChinese = 0;
  forcePreferJapanese = 1;
}

void SGResetPreferredNameTraditionForTesting()
{
  forcePreferChinese = 0;
  forcePreferJapanese = 0;
}

BOOL SGNamesIsMostlyAlpha(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
    uint64_t v3 = (__CFString *)v1;
    uint64_t v4 = self;

    if (!v4) {
      goto LABEL_32;
    }
    memset(v24, 0, sizeof(v24));
    CFIndex Length = CFStringGetLength(v3);
    CFStringRef theString = v3;
    uint64_t v28 = 0;
    CFIndex v29 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    int v26 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    }
    int64_t v30 = 0;
    int64_t v31 = 0;
    uint64_t v27 = CStringPtr;
    if (Length >= 1)
    {
      uint64_t v8 = 0;
      int64_t v9 = 0;
      double v10 = 0.0;
      uint64_t v11 = 64;
      double v12 = 0.0;
      do
      {
        if ((unint64_t)v9 >= 4) {
          uint64_t v13 = 4;
        }
        else {
          uint64_t v13 = v9;
        }
        CFIndex v14 = v29;
        if (v29 <= v9)
        {
          UniChar v15 = 0;
        }
        else if (v26)
        {
          UniChar v15 = v26[v9 + v28];
        }
        else if (v27)
        {
          UniChar v15 = v27[v28 + v9];
        }
        else
        {
          int64_t v16 = v30;
          if (v31 <= v9 || v30 > v9)
          {
            uint64_t v18 = v13 + v8;
            uint64_t v19 = v11 - v13;
            int64_t v20 = v9 - v13;
            CFIndex v21 = v20 + 64;
            if (v20 + 64 >= v29) {
              CFIndex v21 = v29;
            }
            int64_t v30 = v20;
            int64_t v31 = v21;
            if (v29 >= v19) {
              CFIndex v14 = v19;
            }
            v32.length = v14 + v18;
            v32.id location = v20 + v28;
            CFStringGetCharacters(theString, v32, (UniChar *)v24);
            int64_t v16 = v30;
          }
          UniChar v15 = *((_WORD *)v24 + v9 - v16);
        }
        if (CFCharacterSetIsCharacterMember(Predefined, v15)) {
          double v10 = v10 + 1.0;
        }
        else {
          double v12 = v12 + 1.0;
        }
        ++v9;
        --v8;
        ++v11;
      }
      while (Length != v9);
    }
    else
    {
LABEL_32:
      double v12 = 0.0;
      double v10 = 0.0;
    }

    BOOL v22 = v10 / (v12 + v10) > 0.81;
  }
  else
  {
    BOOL v22 = 0;
  }

  return v22;
}

void sub_1CA764A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t __Block_byref_object_copy__17660(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__17661(uint64_t a1)
{
}

void sub_1CA76593C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA76696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SGEntityTagsFromStorage(void *a1)
{
  id v1 = a1;
  id v3 = (id)objc_opt_new();
  SGDelimitedStringsDeserializeWithBlock();

  return v3;
}

uint64_t __SGEntityTagsFromStorage_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [MEMORY[0x1E4F5D9F0] resolveName:a2];
  if (v3) {
    [*(id *)(a1 + 32) addObject:v3];
  }
  return MEMORY[0x1F41817F8]();
}

__CFString *SGEntityTagsForStorage(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  Mutable = CFStringCreateMutable(0, 0);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v8, "stored", v12))
        {
          int64_t v9 = [v8 name];
          uint64_t v12 = 0;
          SGDelimitedStringsSerialize();
          double v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

          CFStringAppend(Mutable, v10);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  return Mutable;
}

__CFString *globEscape(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = (__CFString *)v1;
  uint64_t v4 = self;

  if (!v4) {
    goto LABEL_37;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)long long buffer = 0u;
  long long v34 = 0u;
  CFIndex Length = CFStringGetLength(v3);
  CFStringRef theString = v3;
  uint64_t v44 = 0;
  CFIndex v45 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  float v42 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  int64_t v46 = 0;
  int64_t v47 = 0;
  float v43 = CStringPtr;
  if (Length <= 0)
  {
LABEL_37:

    goto LABEL_38;
  }
  context = v2;
  CFIndex v31 = Length;
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int64_t v10 = 0;
  uint64_t v32 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 64;
  do
  {
    if ((unint64_t)v10 >= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = v10;
    }
    CFIndex v14 = v45;
    if (v45 <= v10)
    {
      long long v16 = (void *)MEMORY[0x1CB79B230]();
LABEL_13:
      ++v11;
      goto LABEL_33;
    }
    if (v42)
    {
      UniChar v15 = v42[v10 + v44];
    }
    else if (v43)
    {
      UniChar v15 = v43[v44 + v10];
    }
    else
    {
      int64_t v17 = v46;
      if (v47 <= v10 || v46 > v10)
      {
        uint64_t v19 = v13 + v8;
        uint64_t v20 = v12 - v13;
        int64_t v21 = v10 - v13;
        CFIndex v22 = v21 + 64;
        if (v21 + 64 >= v45) {
          CFIndex v22 = v45;
        }
        int64_t v46 = v21;
        int64_t v47 = v22;
        if (v45 >= v20) {
          CFIndex v14 = v20;
        }
        v49.length = v14 + v19;
        v49.id location = v21 + v44;
        CFStringGetCharacters(theString, v49, buffer);
        int64_t v17 = v46;
      }
      UniChar v15 = buffer[v10 - v17];
    }
    long long v16 = (void *)MEMORY[0x1CB79B230]();
    if (v15 - 42 > 0x31 || ((1 << (v15 - 42)) & 0x2000000200001) == 0) {
      goto LABEL_13;
    }
    if (!v9) {
      int64_t v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithCapacity:", -[__CFString length](v3, "length"));
    }
    -[__CFString substringWithRange:](v3, "substringWithRange:", v32, v11);
    v25 = int64_t v24 = v3;
    [(__CFString *)v9 appendFormat:@"%@[%c]", v25, v15];

    id v3 = v24;
    uint64_t v26 = v11 + v32;
    uint64_t v11 = 0;
    uint64_t v32 = v26 + 1;
    CFIndex Length = v31;
LABEL_33:
    ++v10;
    --v8;
    ++v12;
  }
  while (Length != v10);

  id v2 = context;
  if (!v9)
  {
LABEL_38:
    int64_t v9 = v3;
    goto LABEL_39;
  }
  if (v11)
  {
    uint64_t v27 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v28 = -[__CFString substringWithRange:](v3, "substringWithRange:", v32, v11);
    [(__CFString *)v9 appendString:v28];
  }
LABEL_39:

  return v9;
}

uint64_t re2::RunningOnValgrind(re2 *this)
{
  return 0;
}

void sub_1CA7683A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA76887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_1CA768D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1CA7690BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id _bold(void *a1)
{
  uint64_t v1 = (objc_class *)NSString;
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithFormat:@"\x1B[1m%@\x1B[0m", v2];

  return v3;
}

BOOL SGMIMetricsSubmodelsProbabilitiesReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = &OBJC_IVAR___SGPipelineEntity__lazySnippetsContent;
    uint64_t v8 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personFromSenderProbability;
    int64_t v9 = (int *)MEMORY[0x1E4F940B8];
    int64_t v10 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personFromSenderInDyadicConversationProbability;
    uint64_t v11 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__subjectContentProbability;
    uint64_t v12 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personToRecipientsProbability;
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *v3;
        uint64_t v17 = *(void *)(a2 + v16);
        unint64_t v18 = v17 + 1;
        if (v17 == -1 || v18 > *(void *)(a2 + *v4)) {
          break;
        }
        char v19 = *(unsigned char *)(*(void *)(a2 + *v9) + v17);
        *(void *)(a2 + v16) = v18;
        v15 |= (unint64_t)(v19 & 0x7F) << v13;
        if ((v19 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        if (v14++ >= 9)
        {
          unint64_t v15 = 0;
          int v21 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v21 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v21 || (v15 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v7[330]) |= 0x100u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v24);
            *(void *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = v8;
          goto LABEL_86;
        case 2u:
          *(_WORD *)(a1 + v7[330]) |= 0x80u;
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v33);
            *(void *)(a2 + v32) = v33 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = v10;
          goto LABEL_86;
        case 3u:
          *(_WORD *)(a1 + v7[330]) |= 0x800u;
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v35);
            *(void *)(a2 + v34) = v35 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = v11;
          goto LABEL_86;
        case 4u:
          *(_WORD *)(a1 + v7[330]) |= 0x200u;
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v37);
            *(void *)(a2 + v36) = v37 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = v12;
          goto LABEL_86;
        case 5u:
          *(_WORD *)(a1 + v7[330]) |= 0x40u;
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v39);
            *(void *)(a2 + v38) = v39 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personCCRecipientsProbability;
          goto LABEL_86;
        case 6u:
          *(_WORD *)(a1 + v7[330]) |= 4u;
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v41);
            *(void *)(a2 + v4re2::Compiler::Compile(this, 0) = v41 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__domainFromSenderProbability;
          goto LABEL_86;
        case 7u:
          *(_WORD *)(a1 + v7[330]) |= 2u;
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v43);
            *(void *)(a2 + v42) = v43 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__conversationProbability;
          goto LABEL_86;
        case 8u:
          *(_WORD *)(a1 + v7[330]) |= 8u;
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v45);
            *(void *)(a2 + v44) = v45 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__listIdProbability;
          goto LABEL_86;
        case 9u:
          *(_WORD *)(a1 + v7[330]) |= 1u;
          uint64_t v46 = *v3;
          unint64_t v47 = *(void *)(a2 + v46);
          if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v47);
            *(void *)(a2 + v46) = v47 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__attachmentsProbability;
          goto LABEL_86;
        case 0xAu:
          *(_WORD *)(a1 + v7[330]) |= 0x1000u;
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v49);
            *(void *)(a2 + v48) = v49 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__subjectCountStatsProbability;
          goto LABEL_86;
        case 0xBu:
          *(_WORD *)(a1 + v7[330]) |= 0x400u;
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v51);
            *(void *)(a2 + v5re2::Compiler::Compile(this, 0) = v51 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__standardMailRulesProbability;
          goto LABEL_86;
        case 0xCu:
          *(_WORD *)(a1 + v7[330]) |= 0x10u;
          uint64_t v52 = *v3;
          unint64_t v53 = *(void *)(a2 + v52);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v53);
            *(void *)(a2 + v52) = v53 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__mailboxProbability;
          goto LABEL_86;
        case 0xDu:
          *(_WORD *)(a1 + v7[330]) |= 0x20u;
          uint64_t v54 = *v3;
          unint64_t v55 = *(void *)(a2 + v54);
          if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *(void *)(a2 + *v4))
          {
            int v25 = *(_DWORD *)(*(void *)(a2 + *v9) + v55);
            *(void *)(a2 + v54) = v55 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v25 = 0;
          }
          CFStringRef v56 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__mailboxTypeProbability;
LABEL_86:
          *(_DWORD *)(a1 + *v56) = v25;
          goto LABEL_87;
        default:
          uint64_t v26 = v8;
          uint64_t v27 = v10;
          uint64_t v28 = v11;
          CFIndex v29 = v7;
          int64_t v30 = v12;
          char v31 = PBReaderSkipValueWithTag();
          uint64_t v12 = v30;
          uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
          id v7 = v29;
          uint64_t v11 = v28;
          int64_t v10 = v27;
          uint64_t v8 = v26;
          if ((v31 & 1) == 0) {
            return 0;
          }
LABEL_87:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA76BC70(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    uint64_t v26 = sgLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      uint64_t v27 = [v25 debugDescription];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v27;
      _os_log_fault_impl(&dword_1CA650000, v26, OS_LOG_TYPE_FAULT, "Failed to report dbStats to AggD: %@", (uint8_t *)&buf, 0xCu);
    }
    if (!_PASEvaluateLogFaultAndProbCrashCriteria())
    {
      xpc_transaction_exit_clean();

      objc_end_catch();
      JUMPOUT(0x1CA76BC34);
    }
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_1CA76C120(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1CA76D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18447(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__18448(uint64_t a1)
{
}

void sub_1CA76DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebViewConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewConfigurationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDOMParser.m", 23, @"Unable to find class %s", "WKWebViewConfiguration");

    __break(1u);
  }
}

id getWKWebsiteDataStoreClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  CFLocaleRef v0 = (void *)getWKWebsiteDataStoreClass_softClass;
  uint64_t v7 = getWKWebsiteDataStoreClass_softClass;
  if (!getWKWebsiteDataStoreClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getWKWebsiteDataStoreClass_block_invoke;
    v3[3] = &unk_1E65C0148;
    v3[4] = &v4;
    __getWKWebsiteDataStoreClass_block_invoke((uint64_t)v3);
    CFLocaleRef v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1CA76DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKWebpagePreferencesClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebpagePreferences");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebpagePreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebpagePreferencesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDOMParser.m", 25, @"Unable to find class %s", "WKWebpagePreferences");

    __break(1u);
  }
}

void __getWKWebViewClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDOMParser.m", 22, @"Unable to find class %s", "WKWebView");

    __break(1u);
  }
}

void WebKitLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __WebKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E65B8BE0;
    uint64_t v5 = 0;
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"SGDOMParser.m", 21, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  CFLocaleRef v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __WebKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary = result;
  return result;
}

void __getWKWebsiteDataStoreClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebsiteDataStore");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebsiteDataStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebsiteDataStoreClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDOMParser.m", 24, @"Unable to find class %s", "WKWebsiteDataStore");

    __break(1u);
  }
}

void sub_1CA76E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
  {
    _Block_object_dispose(&a31, 8);
    objc_begin_catch(exception_object);
    uint64_t v32 = *a9;
    *a9 = 0;

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t SGMIMetricsTrialMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_34;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_36:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else
      {
        if (v17 == 2)
        {
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
        }
        uint64_t v26 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA772C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19097(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__19098(uint64_t a1)
{
}

void sub_1CA775218(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__256(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1CB79B4C0](*(void *)(a2 + 40));
  *(void *)(a1 + 4re2::Compiler::Compile(this, 0) = result;
  return result;
}

void __Block_byref_object_dispose__257(uint64_t a1)
{
}

void sub_1CA776C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA777260(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1CA7777D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1CA778398(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1CA778760(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7794B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1CA77A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA77A768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA77B040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA77B8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA77CAC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA77CCC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA77CD8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA77D064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA77D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA77D520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL SGMIMetricsMailAttachmentHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
              goto LABEL_77;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2re2::Compiler::Compile(this, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
              goto LABEL_80;
            }
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
          goto LABEL_78;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x40u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
              goto LABEL_77;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
          goto LABEL_78;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
              goto LABEL_77;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
          goto LABEL_78;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
              goto LABEL_77;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
          goto LABEL_78;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
              goto LABEL_77;
            }
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              BOOL v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
          goto LABEL_78;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
              goto LABEL_77;
            }
            char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v48 + 1;
            v19 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              BOOL v23 = v46++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
          goto LABEL_78;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v19 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
        {
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
          goto LABEL_78;
        }
        v50 += 7;
        BOOL v23 = v51++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
          goto LABEL_80;
        }
      }
      unint64_t v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
LABEL_77:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_78:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_80:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t re2::ToStringWalker::ShortVisit(re2::ToStringWalker *this, re2::Regexp *a2)
{
  return 0;
}

uint64_t re2::ToStringWalker::PostVisit(re2::ToStringWalker *this, re2::Regexp *a2, int a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*(unsigned char *)a2)
  {
    case 1:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      goto LABEL_55;
    case 2:
      if (a3 > 3) {
        return 0;
      }
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "(?:)";
      goto LABEL_70;
    case 3:
      re2::AppendLiteral(*((std::string **)this + 3), *((_DWORD *)a2 + 6), *((_WORD *)a2 + 1) & 1, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_71;
    case 4:
      if (*((int *)a2 + 6) >= 1)
      {
        uint64_t v13 = 0;
        do
          re2::AppendLiteral(*((std::string **)this + 3), *(_DWORD *)(*((void *)a2 + 4) + 4 * v13++), *((_WORD *)a2 + 1) & 1, a4, (uint64_t)a5, a6, a7, a8);
        while (v13 < *((int *)a2 + 6));
      }
      goto LABEL_9;
    case 5:
LABEL_9:
      if (a3 > 1) {
        goto LABEL_71;
      }
      goto LABEL_22;
    case 6:
      uint64_t v14 = *((void *)this + 3);
      if (*(char *)(v14 + 23) < 0)
      {
        std::string::size_type v15 = *(void *)(v14 + 8) - 1;
        if (*(unsigned char *)(*(void *)v14 + v15) == 124)
        {
LABEL_13:
          std::string::erase((std::string *)v14, v15, 0xFFFFFFFFFFFFFFFFLL);
          if (a3 > 2) {
            goto LABEL_71;
          }
          goto LABEL_22;
        }
      }
      else
      {
        std::string::size_type v15 = *(unsigned __int8 *)(v14 + 23) - 1;
        if (*(unsigned char *)(v14 + v15) == 124) {
          goto LABEL_13;
        }
      }
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      char v45 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad final char: ", 16);
      std::ostream::operator<<();
      LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      if (a3 <= 2)
      {
LABEL_22:
        unsigned int v18 = (std::string *)*((void *)this + 3);
        uint64_t v19 = ")";
        goto LABEL_73;
      }
LABEL_71:
      if (a3 == 3)
      {
        unsigned int v18 = (std::string *)*((void *)this + 3);
        uint64_t v19 = "|";
LABEL_73:
        std::string::append(v18, v19);
      }
      return 0;
    case 7:
      uint64_t v16 = (std::string *)*((void *)this + 3);
      char v17 = "*";
      goto LABEL_18;
    case 8:
      uint64_t v16 = (std::string *)*((void *)this + 3);
      char v17 = "+";
      goto LABEL_18;
    case 9:
      uint64_t v16 = (std::string *)*((void *)this + 3);
      char v17 = "?";
LABEL_18:
      std::string::append(v16, v17);
      goto LABEL_19;
    case 0xA:
      uint64_t v20 = *((unsigned int *)a2 + 6);
      if (v20 == -1)
      {
        unint64_t v21 = (std::string *)*((void *)this + 3);
        re2::StringPrintf((re2 *)"{%d,}", __p, *((unsigned int *)a2 + 7));
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v22 = __p;
        }
        else {
          char v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        }
      }
      else
      {
        unint64_t v21 = (std::string *)*((void *)this + 3);
        if (*((_DWORD *)a2 + 7) == v20)
        {
          re2::StringPrintf((re2 *)"{%d}", __p, *((unsigned int *)a2 + 6));
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v22 = __p;
          }
          else {
            char v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
          }
        }
        else
        {
          re2::StringPrintf((re2 *)"{%d,%d}", __p, *((unsigned int *)a2 + 7), v20);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v22 = __p;
          }
          else {
            char v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
          }
        }
      }
      std::string::append(v21, (const std::string::value_type *)v22, size);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
LABEL_19:
      if ((*((_WORD *)a2 + 1) & 0x40) != 0) {
        std::string::append(*((std::string **)this + 3), "?");
      }
      if (a3 <= 0) {
        goto LABEL_22;
      }
      goto LABEL_71;
    case 0xB:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = ")";
      goto LABEL_70;
    case 0xC:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = ".";
      goto LABEL_70;
    case 0xD:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "\\C";
      goto LABEL_70;
    case 0xE:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "^";
      goto LABEL_70;
    case 0xF:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "$";
      goto LABEL_70;
    case 0x10:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "\\b";
      goto LABEL_70;
    case 0x11:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "\\B";
      goto LABEL_70;
    case 0x12:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "(?-m:^)";
      goto LABEL_70;
    case 0x13:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      if (*((__int16 *)a2 + 1) < 0) {
        unint64_t v12 = "(?-m:$)";
      }
      else {
        unint64_t v12 = "\\z";
      }
      goto LABEL_70;
    case 0x14:
      uint64_t v11 = (std::string *)*((void *)this + 3);
      if (!*(_DWORD *)(*((void *)a2 + 3) + 4))
      {
LABEL_55:
        unint64_t v12 = "[^\\x00-\\x{10ffff}]";
        goto LABEL_70;
      }
      std::string::append(v11, "[");
      uint64_t v30 = *((void *)a2 + 3);
      int v31 = *(_DWORD *)(v30 + 16);
      if (v31 < 1)
      {
        if (!v31) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v32 = *(void *)(v30 + 8);
        do
        {
          uint64_t v34 = v31 >> 1;
          if (*(int *)(v32 + 8 * v34 + 4) <= 65533)
          {
            unsigned int v33 = v34 + 1;
            v32 += 8 * v33;
            v31 -= v33;
          }
          else
          {
            int v31 = v31 >> 1;
            if (*(int *)(v32 + 8 * v34) < 0xFFFF) {
              re2::CharClass::Negate(*((re2::CharClass **)a2 + 3));
            }
          }
        }
        while (v31 > 0);
      }
      char v35 = *(int **)(v30 + 8);
      do
      {
        int v37 = *v35;
        int v36 = v35[1];
        if (*v35 <= v36)
        {
          unint64_t v38 = (std::string *)*((void *)this + 3);
          re2::AppendCCChar(v38, *v35, v24, v25, v26, v27, v28, v29);
          if (v37 < v36)
          {
            std::string::append(v38, "-");
            re2::AppendCCChar(v38, v36, v39, v40, v41, v42, v43, v44);
          }
        }
        v35 += 2;
      }
      while (v35 != (int *)(*(void *)(v30 + 8) + 8 * *(int *)(v30 + 16)));
LABEL_57:
      if (v30 != *((void *)a2 + 3)) {
        MEMORY[0x1CB79A8A0](v30, 0x1000C8077774924);
      }
      uint64_t v11 = (std::string *)*((void *)this + 3);
      unint64_t v12 = "]";
LABEL_70:
      std::string::append(v11, v12);
      goto LABEL_71;
    case 0x15:
      std::string::append(*((std::string **)this + 3), "(?HaveMatch:%d)", *((int *)a2 + 6));
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

void sub_1CA7844EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *re2::AppendLiteral(std::string *this, int __c, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  if (__c && __c <= 127 && memchr("(){}[]*+?|.^$\\"", __c, 0xFuLL))
  {
    std::string::append(this, 1uLL, 92);
    std::string::value_type v11 = __c;
    unint64_t v12 = this;
LABEL_8:
    return std::string::append(v12, 1uLL, v11);
  }
  if ((__c - 97) <= 0x19 && v8)
  {
    std::string::append(this, 1uLL, 91);
    std::string::append(this, 1uLL, __c - 32);
    std::string::append(this, 1uLL, __c);
    unint64_t v12 = this;
    std::string::value_type v11 = 93;
    goto LABEL_8;
  }
  return re2::AppendCCChar(this, __c, a3, a4, a5, a6, a7, a8);
}

std::string *re2::AppendCCChar(std::string *this, int __c, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string::value_type v8 = __c;
  if ((__c - 32) > 0x5E)
  {
    switch(__c)
    {
      case 9:
        std::string::value_type v11 = "\\t";
        goto LABEL_12;
      case 10:
        std::string::value_type v11 = "\\n";
        goto LABEL_12;
      case 12:
        std::string::value_type v11 = "\\f";
        goto LABEL_12;
      case 13:
        std::string::value_type v11 = "\\r";
LABEL_12:
        uint64_t result = std::string::append(this, v11);
        break;
      default:
        if (__c > 255) {
          uint64_t result = re2::StringAppendF(this, "\\x{%x}", a3, a4, a5, a6, a7, a8, __c);
        }
        else {
          uint64_t result = re2::StringAppendF(this, "\\x%02x", a3, a4, a5, a6, a7, a8, __c);
        }
        break;
    }
  }
  else
  {
    if (memchr("[]^-\\"", __c, 6uLL)) {
      std::string::append(this, "\\"");
    }
    return std::string::append(this, 1uLL, v8);
  }
  return result;
}

uint64_t re2::ToStringWalker::PreVisit(std::string **this, re2::Regexp *a2, int a3, BOOL *a4)
{
  switch(*(unsigned char *)a2)
  {
    case 4:
    case 5:
      if (a3 <= 1)
      {
        uint64_t v5 = this + 3;
        uint64_t v4 = 2;
        goto LABEL_9;
      }
      uint64_t v4 = 2;
      break;
    case 6:
      if (a3 <= 2)
      {
        uint64_t v5 = this + 3;
        uint64_t v4 = 3;
        goto LABEL_9;
      }
      uint64_t v4 = 3;
      break;
    case 7:
    case 8:
    case 9:
    case 0xA:
      if (a3 > 0) {
        goto LABEL_3;
      }
      uint64_t v4 = 0;
      uint64_t v5 = this + 3;
LABEL_9:
      uint64_t v6 = "(?:";
      goto LABEL_10;
    case 0xB:
      uint64_t v5 = this + 3;
      std::string::append(this[3], "(");
      if (*((void *)a2 + 4))
      {
        std::string::append(*v5, "?P<");
        uint64_t v8 = *((void *)a2 + 4);
        int v9 = *(char *)(v8 + 23);
        if (v9 >= 0) {
          unint64_t v10 = (const std::string::value_type *)*((void *)a2 + 4);
        }
        else {
          unint64_t v10 = *(const std::string::value_type **)v8;
        }
        if (v9 >= 0) {
          std::string::size_type v11 = *(unsigned __int8 *)(v8 + 23);
        }
        else {
          std::string::size_type v11 = *(void *)(v8 + 8);
        }
        std::string::append(*v5, v10, v11);
        uint64_t v4 = 5;
        uint64_t v6 = ">";
LABEL_10:
        std::string::append(*v5, v6);
      }
      else
      {
        uint64_t v4 = 5;
      }
      break;
    default:
LABEL_3:
      uint64_t v4 = 0;
      break;
  }
  return v4;
}

void re2::ToStringWalker::~ToStringWalker(re2::ToStringWalker *this)
{
  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F24EBE80;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

void re2::Regexp::ToString(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v2 = &unk_1F24EBE80;
  operator new();
}

void sub_1CA784B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::ToStringWalker::~ToStringWalker((re2::ToStringWalker *)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void sub_1CA784FF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7862EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void findConnectedComponents()
{
}

void sub_1CA787C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, long long a17)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](1, v17);
  if (*((void *)&a17 + 1)) {
    operator delete(*((void **)&a17 + 1));
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void *v8;
  void *result;
  unint64_t v10;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void anonymous namespace'::DisjointSets<_vertex_t const*>::union_(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 40);
  uint8x8_t v6 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((void *)(a1 + 40), a2);
  unint64_t v7 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(v5, a3);
  if (!v6) {
    __assert_rtn("union_", "componentAnalysis.mm", 52, "rep1Iter != elementToRepresentative.end()");
  }
  if (!v7) {
    __assert_rtn("union_", "componentAnalysis.mm", 53, "rep2Iter != elementToRepresentative.end()");
  }
  unint64_t v8 = v6[3];
  unint64_t v9 = v7[3];
  if (v8 != v9)
  {
    unint64_t v10 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((void *)a1, v8);
    std::string::size_type v11 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((void *)a1, v9);
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      __assert_rtn("union_", "componentAnalysis.mm", 63, "set1Iter != representativeToSet.end() && set2Iter != representativeToSet.end()");
    }
    unint64_t v87 = v9;
    unint64_t v88 = v8;
    std::string::size_type v15 = (char *)v11[3];
    uint64_t v14 = v11[4];
    uint64_t v13 = (char **)(v11 + 3);
    unint64_t v16 = v14 - (void)v15;
    unsigned int v18 = (char *)v10[3];
    uint64_t v17 = v10[4];
    uint64_t v19 = (char **)(v10 + 3);
    unint64_t v85 = v17 - (void)v18;
    unint64_t v86 = v16;
    BOOL v20 = v16 >= v17 - (uint64_t)v18;
    if (v16 >= v17 - (uint64_t)v18) {
      unint64_t v21 = v15;
    }
    else {
      unint64_t v21 = v18;
    }
    if (v20) {
      char v22 = v13;
    }
    else {
      char v22 = v19;
    }
    if (v20) {
      BOOL v23 = v18;
    }
    else {
      BOOL v23 = v15;
    }
    if (v20) {
      uint64_t v24 = v19;
    }
    else {
      uint64_t v24 = v13;
    }
    uint64_t v25 = v24[1];
    if (v25 - v23 >= 1)
    {
      uint64_t v26 = (v25 - v23) >> 3;
      uint64_t v28 = v22[1];
      uint64_t v27 = v22[2];
      if (v26 <= (v27 - v28) >> 3)
      {
        if (v26 <= 0)
        {
          char v35 = v22[1];
          int v36 = &v28[8 * v26];
          int v37 = &v35[-8 * v26];
          unint64_t v38 = v35;
          if (v37 < v28)
          {
            unint64_t v38 = v22[1];
            do
            {
              uint64_t v39 = *(void *)v37;
              v37 += 8;
              *(void *)unint64_t v38 = v39;
              v38 += 8;
            }
            while (v37 < v28);
          }
          v22[1] = v38;
          if (v35 != v36) {
            memmove(&v35[-8 * ((v35 - v36) >> 3)], v28, v35 - v36);
          }
          if (&v23[8 * v26] != v23) {
            memmove(v28, v23, 8 * v26);
          }
        }
        else
        {
          int64_t v34 = v25 - v23;
          if (v25 != v23) {
            memmove(v22[1], v23, v25 - v23);
          }
          v22[1] = &v28[v34];
        }
      }
      else
      {
        uint64_t v29 = (v28 - v21) >> 3;
        unint64_t v30 = v29 + v26;
        if ((unint64_t)(v29 + v26) >> 61) {
          std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v27 - v21;
        if (v31 >> 2 > v30) {
          unint64_t v30 = v31 >> 2;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v40 = (void *)(v32 + 8 * v29);
        uint64_t v41 = (char *)&v40[v26];
        uint64_t v42 = 8 * v26;
        uint64_t v43 = v40;
        do
        {
          uint64_t v44 = *(void *)v23;
          v23 += 8;
          *v43++ = v44;
          v42 -= 8;
        }
        while (v42);
        char v45 = *v22;
        if (*v22 != v28)
        {
          unsigned int v46 = v28;
          do
          {
            uint64_t v47 = *((void *)v46 - 1);
            v46 -= 8;
            *--uint64_t v40 = v47;
          }
          while (v46 != v45);
        }
        unint64_t v48 = v32 + 8 * v33;
        char v49 = v22[1];
        uint64_t v50 = v49 - v28;
        if (v49 != v28) {
          memmove(v41, v28, v49 - v28);
        }
        unsigned int v51 = *v22;
        *char v22 = (char *)v40;
        v22[1] = &v41[v50];
        v22[2] = (char *)v48;
        if (v51) {
          operator delete(v51);
        }
      }
    }
    uint64_t v52 = *v24;
    unint64_t v53 = v24[1];
    if (*v24 != v53)
    {
      unint64_t v54 = v88;
      if (v86 >= v85) {
        unint64_t v54 = v87;
      }
      unint64_t v89 = v54;
      unint64_t v55 = (void *)(a1 + 56);
      unint64_t v56 = *(void *)(a1 + 48);
      do
      {
        unint64_t v57 = 0x9DDFEA08EB382D69 * ((8 * *(void *)v52 + 8) ^ HIDWORD(*(void *)v52));
        unint64_t v58 = 0x9DDFEA08EB382D69 * (HIDWORD(*(void *)v52) ^ (v57 >> 47) ^ v57);
        unint64_t v59 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
        if (v56)
        {
          uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
          v60.i16[0] = vaddlv_u8(v60);
          if (v60.u32[0] > 1uLL)
          {
            unint64_t v61 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
            if (v59 >= v56) {
              unint64_t v61 = v59 % v56;
            }
          }
          else
          {
            unint64_t v61 = v59 & (v56 - 1);
          }
          int64_t v62 = *(void ***)(*v5 + 8 * v61);
          if (v62)
          {
            for (uint64_t i = *v62; i; uint64_t i = (void *)*i)
            {
              unint64_t v64 = i[1];
              if (v64 == v59)
              {
                if (i[2] == *(void *)v52) {
                  goto LABEL_94;
                }
              }
              else
              {
                if (v60.u32[0] > 1uLL)
                {
                  if (v64 >= v56) {
                    v64 %= v56;
                  }
                }
                else
                {
                  v64 &= v56 - 1;
                }
                if (v64 != v61) {
                  break;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v61 = 0;
        }
        uint64_t i = operator new(0x20uLL);
        *uint64_t i = 0;
        i[1] = v59;
        i[2] = *(void *)v52;
        i[3] = 0;
        float v65 = (float)(unint64_t)(*(void *)(a1 + 64) + 1);
        float v66 = *(float *)(a1 + 72);
        if (!v56 || (float)(v66 * (float)v56) < v65)
        {
          BOOL v67 = (v56 & (v56 - 1)) != 0;
          if (v56 < 3) {
            BOOL v67 = 1;
          }
          unint64_t v68 = v67 | (2 * v56);
          unint64_t v69 = vcvtps_u32_f32(v65 / v66);
          if (v68 <= v69) {
            size_t v70 = v69;
          }
          else {
            size_t v70 = v68;
          }
          std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::__rehash<true>((uint64_t)v5, v70);
          unint64_t v56 = *(void *)(a1 + 48);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v59 >= v56) {
              unint64_t v61 = v59 % v56;
            }
            else {
              unint64_t v61 = v59;
            }
          }
          else
          {
            unint64_t v61 = (v56 - 1) & v59;
          }
        }
        uint64_t v71 = *v5;
        CFIndex v72 = *(void **)(*v5 + 8 * v61);
        if (v72)
        {
          *uint64_t i = *v72;
        }
        else
        {
          *uint64_t i = *v55;
          *unint64_t v55 = i;
          *(void *)(v71 + 8 * v61) = v55;
          if (!*i) {
            goto LABEL_93;
          }
          unint64_t v73 = *(void *)(*i + 8);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v73 >= v56) {
              v73 %= v56;
            }
          }
          else
          {
            v73 &= v56 - 1;
          }
          CFIndex v72 = (void *)(*v5 + 8 * v73);
        }
        *CFIndex v72 = i;
LABEL_93:
        ++*(void *)(a1 + 64);
LABEL_94:
        i[3] = v89;
        v52 += 8;
      }
      while (v52 != v53);
    }
    if (v86 >= v85) {
      unint64_t v74 = v88;
    }
    else {
      unint64_t v74 = v87;
    }
    CFRange v75 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((void *)a1, v74);
    if (v75)
    {
      int8x8_t v76 = *(int8x8_t *)(a1 + 8);
      unint64_t v77 = v75[1];
      uint8x8_t v78 = (uint8x8_t)vcnt_s8(v76);
      v78.i16[0] = vaddlv_u8(v78);
      if (v78.u32[0] > 1uLL)
      {
        if (v77 >= *(void *)&v76) {
          v77 %= *(void *)&v76;
        }
      }
      else
      {
        v77 &= *(void *)&v76 - 1;
      }
      uint64_t v79 = *(void **)(*(void *)a1 + 8 * v77);
      do
      {
        long long v80 = v79;
        uint64_t v79 = (void *)*v79;
      }
      while (v79 != v75);
      if (v80 == (void *)(a1 + 16)) {
        goto LABEL_117;
      }
      unint64_t v81 = v80[1];
      if (v78.u32[0] > 1uLL)
      {
        if (v81 >= *(void *)&v76) {
          v81 %= *(void *)&v76;
        }
      }
      else
      {
        v81 &= *(void *)&v76 - 1;
      }
      if (v81 != v77)
      {
LABEL_117:
        if (!*v75) {
          goto LABEL_118;
        }
        unint64_t v82 = *(void *)(*v75 + 8);
        if (v78.u32[0] > 1uLL)
        {
          if (v82 >= *(void *)&v76) {
            v82 %= *(void *)&v76;
          }
        }
        else
        {
          v82 &= *(void *)&v76 - 1;
        }
        if (v82 != v77) {
LABEL_118:
        }
          *(void *)(*(void *)a1 + 8 * v77) = 0;
      }
      uint64_t v83 = *v75;
      if (*v75)
      {
        unint64_t v84 = *(void *)(v83 + 8);
        if (v78.u32[0] > 1uLL)
        {
          if (v84 >= *(void *)&v76) {
            v84 %= *(void *)&v76;
          }
        }
        else
        {
          v84 &= *(void *)&v76 - 1;
        }
        if (v84 != v77)
        {
          *(void *)(*(void *)a1 + 8 * v84) = v80;
          uint64_t v83 = *v75;
        }
      }
      *long long v80 = v83;
      *CFRange v75 = 0;
      --*(void *)(a1 + 24);
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](1, v75);
    }
  }
}

void sub_1CA788428(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  uint8x8_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

BOOL sameConnectedComponent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v4 = (void *)(a1 + 40);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((void *)(a1 + 40), a2);
  uint8x8_t v6 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(v4, a3);
  BOOL result = 0;
  if (v5)
  {
    if (v6) {
      return v5[3] == v6[3];
    }
  }
  return result;
}

uint64_t freeDisjointSet(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int8x8_t v2 = *(void **)(result + 56);
    if (v2)
    {
      do
      {
        unint64_t v3 = (void *)*v2;
        operator delete(v2);
        int8x8_t v2 = v3;
      }
      while (v3);
    }
    int8x8_t v4 = *(void **)(v1 + 40);
    *(void *)(v1 + 4re2::Compiler::Compile(this, 0) = 0;
    if (v4) {
      operator delete(v4);
    }
    unint64_t v5 = *(void **)(v1 + 16);
    if (v5)
    {
      do
      {
        uint8x8_t v6 = (void *)*v5;
        uint64_t v7 = (void *)v5[3];
        if (v7)
        {
          v5[4] = v7;
          operator delete(v7);
        }
        operator delete(v5);
        unint64_t v5 = v6;
      }
      while (v6);
    }
    unint64_t v8 = *(void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v8) {
      operator delete(v8);
    }
    JUMPOUT(0x1CB79A8C0);
  }
  return result;
}

void visitConnectedComponents(uint64_t a1, void *a2, void *a3)
{
  BOOL v23 = a2;
  unint64_t v5 = a3;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (v6 >> 61) {
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v6);
    size_t v9 = &v7[8 * v8];
  }
  else
  {
    uint64_t v7 = 0;
    size_t v9 = 0;
  }
  uint8x8_t v10 = *(void **)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = v7;
    do
    {
      uint8x8_t v12 = v10 + 3;
      if (v11 >= v9)
      {
        uint64_t v13 = (v11 - v7) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
        }
        if ((v9 - v7) >> 2 > v14) {
          unint64_t v14 = (v9 - v7) >> 2;
        }
        if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (char *)(v15 + 8 * v13);
        *(void *)uint64_t v17 = v12;
        unsigned int v18 = v17 + 8;
        while (v11 != v7)
        {
          uint64_t v19 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v17 - 1) = v19;
          v17 -= 8;
        }
        size_t v9 = (char *)(v15 + 8 * v16);
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v17;
        unint64_t v11 = v18;
      }
      else
      {
        *(void *)unint64_t v11 = v12;
        v11 += 8;
      }
      uint8x8_t v10 = (void *)*v10;
    }
    while (v10);
    if (v7 != v11)
    {
      BOOL v20 = v7;
      do
      {
        unint64_t v21 = **(void ***)v20;
        char v22 = *(void **)(*(void *)v20 + 8);
        while (v21 != v22)
          v5[2](v5, *v21++);
        v23[2]();
        v20 += 8;
      }
      while (v20 != v11);
    }
  }
  if (v7) {
    operator delete(v7);
  }
}

void sub_1CA788A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CA789D34(_Unwind_Exception *a1)
{
}

uint64_t SGMIMetricsMissingElementPredictionReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int8x8_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_33;
          }
          v21 += 7;
          BOOL v15 = v22++ >= 9;
          if (v15)
          {
            uint64_t v23 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_35:
        *(unsigned char *)(a1 + 12) = v23 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + *v4))
        {
          int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA78C300(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x398], 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  SGRecordMeasurementState(&STACK[0x3B8]);
  _Unwind_Resume(a1);
}

void sub_1CA7916A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21514(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__21515(uint64_t a1)
{
}

void sub_1CA791A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA791E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA792044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA792CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __serialQueue_block_invoke()
{
  CFLocaleRef v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [MEMORY[0x1E4F93B18] autoreleasingSerialQueueWithLabel:"com.apple.suggestions.messageEventDissector" qosClass:17];
  int8x8_t v2 = (void *)serialQueue__pasExprOnceResult;
  serialQueue__pasExprOnceResult = v1;
}

void sub_1CA793D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA797B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21851(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__21852(uint64_t a1)
{
}

void sub_1CA798114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA79831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA798548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGDataDetectorsCreateScannerOrFail()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = DDScannerCreate();
  if (v0) {
    DDScannerEnableOptionalSource();
  }
  return v0;
}

void SGDataDetectorsRunWithSharedScanner(void *a1)
{
  id v1 = a1;
  if (SGDataDetectorsRunWithSharedScanner__pasOnceToken3 != -1) {
    dispatch_once(&SGDataDetectorsRunWithSharedScanner__pasOnceToken3, &__block_literal_global_21949);
  }
  id v2 = (id)SGDataDetectorsRunWithSharedScanner__pasExprOnceResult;
  unint64_t v3 = [v2 result];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __SGDataDetectorsRunWithSharedScanner_block_invoke_3;
  v5[3] = &unk_1E65B9668;
  id v6 = v1;
  id v4 = v1;
  [v3 runWithLockAcquired:v5];
}

uint64_t __SGDataDetectorsRunWithSharedScanner_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __SGDataDetectorsRunWithSharedScanner_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_8_21952 idleTimeout:10.0];
  id v2 = (void *)SGDataDetectorsRunWithSharedScanner__pasExprOnceResult;
  SGDataDetectorsRunWithSharedScanner__pasExprOnceResult = v1;
}

id __SGDataDetectorsRunWithSharedScanner_block_invoke_2()
{
  ScannerOrFail = (void *)SGDataDetectorsCreateScannerOrFail();
  id v1 = objc_alloc(MEMORY[0x1E4F93B80]);
  id v2 = [MEMORY[0x1E4F93B18] autoreleasingSerialQueueWithLabel:"SGDataDetectors-SharedScanner"];
  unint64_t v3 = (void *)[v1 initWithGuardedData:ScannerOrFail serialQueue:v2];

  return v3;
}

void SGDataDetectorsScan(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  SGDataDetectorsScanRange(a1, v8, 0, [v8 length], a3, v7);
}

void SGDataDetectorsScanRange(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a6;
  if (DDScannerScanStringWithRange())
  {
    CFArrayRef v9 = (const __CFArray *)DDScannerCopyResultsWithOptions();
    if (v9)
    {
      CFArrayRef v10 = v9;
      CFIndex Count = CFArrayGetCount(v9);
      CFIndex v12 = Count - 1;
      if (Count >= 1)
      {
        CFIndex v13 = 0;
        do
        {
          char v14 = (void *)MEMORY[0x1CB79B230]();
          ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
          int v16 = sgLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            int v20 = ValueAtIndex;
            _os_log_debug_impl(&dword_1CA650000, v16, OS_LOG_TYPE_DEBUG, "SGDataDetectors: data detection: %@", buf, 0xCu);
          }

          int v17 = v8[2](v8, ValueAtIndex);
          if (!v17) {
            break;
          }
        }
        while (v12 != v13++);
      }
      CFRelease(v10);
    }
  }
  DDScannerReset();
}

id SGDataDetectorsGetDate()
{
  int v0 = DDResultCopyExtractedDateFromReferenceDate();
  id v1 = 0;
  if (v0) {

  }
  return v1;
}

id SGDataDetectorsGetDateWithLocale()
{
  int v0 = DDResultCopyExtractedDateFromReferenceDateWithLocale();
  id v1 = 0;
  if (v0) {

  }
  return v1;
}

id SGDataDetectorsGetDateAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5)
{
  if (utcTz__pasOnceToken5 != -1) {
    dispatch_once(&utcTz__pasOnceToken5, &__block_literal_global_62);
  }
  if (DDResultCopyExtractedDateFromReferenceDateWithLocale())
  {
    *a4 = 0;
    *a5 = 0;
  }
  return 0;
}

void __utcTz_block_invoke()
{
  int v0 = (void *)MEMORY[0x1CB79B230]();
  utcTz__pasExprOnceResult = (uint64_t)CFTimeZoneCreateWithTimeIntervalFromGMT(0, 0.0);
}

uint64_t SGDataDetectorsGetDateAndTimeZoneWithLocaleAndTimeZone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, unsigned char *a7)
{
  uint64_t result = DDResultCopyExtractedDateFromReferenceDateWithLocale();
  if (result)
  {
    *a7 = 0;
    *a5 = 0;
    *a6 = 0;
    return 1;
  }
  return result;
}

uint64_t SGDataDetectorsGetIntervalDatesAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unsigned char *a8)
{
  uint64_t result = DDResultCopyExtractedStartDateEndDateWithLocale();
  if (result)
  {
    *a3 = 0;
    *a5 = 0;
    *a4 = 0;
    *a6 = 0;
    *a8 = 0;
    return 1;
  }
  return result;
}

uint64_t SGDataDetectorsGetType()
{
  int v0 = DDResultGetCategory() - 1;
  uint64_t result = 32;
  switch(v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 2048;
      break;
    case 2:
      uint64_t result = 16;
      break;
    case 3:
      uint64_t result = 8;
      break;
    case 4:
      BOOL v2 = DDResultHasType() == 0;
      uint64_t v3 = 4096;
      goto LABEL_7;
    default:
      BOOL v2 = DDResultHasType() == 0;
      uint64_t v3 = 8;
LABEL_7:
      if (v2) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v3;
      }
      break;
  }
  return result;
}

uint64_t SGDataDetectorsGetMatchType()
{
  int v0 = DDResultGetCategory() - 1;
  uint64_t result = 0;
  switch(v0)
  {
    case 0:
      if (DDResultHasType()) {
        return 2;
      }
      else {
        return 5;
      }
    case 1:
      return result;
    case 2:
      return 1;
    case 3:
      goto LABEL_8;
    case 4:
      if (DDResultHasType())
      {
        uint64_t result = 4;
      }
      else if (DDResultHasType())
      {
        uint64_t result = 6;
      }
      else
      {
LABEL_12:
        if (DDResultHasType())
        {
          uint64_t result = 7;
        }
        else if (DDResultHasType())
        {
          uint64_t result = 8;
        }
        else
        {
          uint64_t result = 9;
        }
      }
      break;
    default:
      if ((DDResultHasType() & 1) == 0) {
        goto LABEL_12;
      }
LABEL_8:
      uint64_t result = 3;
      break;
  }
  return result;
}

__CFString *SGNSTextCheckingTypeToString(uint64_t a1)
{
  id v1 = @"NSTextCheckingTypeTransitInformation";
  BOOL v2 = @"NSTextCheckingTypePhoneNumber";
  uint64_t v3 = @"NSTextCheckingTypeLink";
  if (a1 != 32) {
    uint64_t v3 = 0;
  }
  if (a1 != 2048) {
    BOOL v2 = v3;
  }
  if (a1 != 4096) {
    id v1 = v2;
  }
  id v4 = @"NSTextCheckingTypeDate";
  unint64_t v5 = @"NSTextCheckingTypeAddress";
  if (a1 != 16) {
    unint64_t v5 = 0;
  }
  if (a1 != 8) {
    id v4 = v5;
  }
  if (a1 <= 31) {
    return v4;
  }
  else {
    return v1;
  }
}

__CFString *SGDataDetectorMatchTypeToString(unsigned int a1)
{
  if (a1 > 8) {
    return @"SGDDMatchOther";
  }
  else {
    return off_1E65B96D8[a1];
  }
}

id SGDataDetectorsScanForPhone(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    unint64_t v2 = [v1 length];
    if (v2 >= 0x64) {
      uint64_t v3 = 100;
    }
    else {
      uint64_t v3 = v2;
    }
    uint64_t v11 = 0;
    CFIndex v12 = &v11;
    uint64_t v13 = 0x3032000000;
    char v14 = __Block_byref_object_copy__22018;
    BOOL v15 = __Block_byref_object_dispose__22019;
    id v16 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __SGDataDetectorsScanForPhone_block_invoke;
    v6[3] = &unk_1E65B96B8;
    uint64_t v9 = 0;
    uint64_t v10 = v3;
    id v7 = v1;
    id v8 = &v11;
    SGDataDetectorsRunWithSharedScanner(v6);
    id v4 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1CA799630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22018(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__22019(uint64_t a1)
{
}

void __SGDataDetectorsScanForPhone_block_invoke(void *a1, uint64_t a2)
{
  DDScannerSetScannerTimeout();
  id v4 = (void *)a1[4];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __SGDataDetectorsScanForPhone_block_invoke_2;
  v8[3] = &unk_1E65B9690;
  id v5 = v4;
  uint64_t v7 = a1[5];
  uint64_t v6 = a1[6];
  id v9 = v5;
  uint64_t v10 = v7;
  SGDataDetectorsScanRange(a2, v5, v6, a1[7], 0, v8);
  DDScannerSetScannerTimeout();
}

uint64_t __SGDataDetectorsScanForPhone_block_invoke_2(uint64_t a1)
{
  int HasType = DDResultHasType();
  if (HasType)
  {
    if ((unint64_t)[*(id *)(a1 + 32) length] < 0x65
      || (uint64_t Range = DDResultGetRange(), (unint64_t)(Range + v4) <= 0x5A))
    {
      if (DDResultCopyPhoneValue())
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v6 = *(void **)(v5 + 40);
        *(void *)(v5 + 4re2::Compiler::Compile(this, 0) = 0;
      }
    }
  }
  return HasType ^ 1u;
}

id SGDataDetectorsScanForPhoneLessCarefully(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v3 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
  uint64_t v4 = [v1 stringByTrimmingCharactersInSet:v3];

  if ((unint64_t)[v4 length] < 5 || (unint64_t)objc_msgSend(v4, "length") >= 0x15)
  {
    SGDataDetectorsScanForPhone(v4);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_34:
    uint64_t v25 = v5;
    goto LABEL_35;
  }
  uint64_t v6 = v4;
  uint64_t v7 = self;

  if (!v7) {
    goto LABEL_33;
  }
  memset(v27, 0, sizeof(v27));
  CFIndex Length = CFStringGetLength(v6);
  CFStringRef theString = v6;
  uint64_t v31 = 0;
  CFIndex v32 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v6);
  CStringPtr = 0;
  uint64_t v29 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v6, 0x600u);
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v30 = CStringPtr;
  if (Length < 1)
  {
LABEL_33:

    uint64_t v5 = v6;
    goto LABEL_34;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 64;
  while (1)
  {
    uint64_t v15 = (unint64_t)v13 >= 4 ? 4 : v13;
    CFIndex v16 = v32;
    if (v32 <= v13) {
      break;
    }
    if (v29)
    {
      UniChar v17 = v29[v13 + v31];
    }
    else if (v30)
    {
      UniChar v17 = v30[v31 + v13];
    }
    else
    {
      BOOL v18 = v34 > v13 && v12 <= v13;
      if (!v18)
      {
        uint64_t v19 = v15 + v11;
        uint64_t v20 = v14 - v15;
        uint64_t v21 = v13 - v15;
        CFIndex v22 = v21 + 64;
        if (v21 + 64 >= v32) {
          CFIndex v22 = v32;
        }
        uint64_t v33 = v21;
        uint64_t v34 = v22;
        if (v32 >= v20) {
          CFIndex v16 = v20;
        }
        v36.length = v16 + v19;
        v36.id location = v21 + v31;
        CFStringGetCharacters(theString, v36, (UniChar *)v27);
        uint64_t v12 = v33;
      }
      UniChar v17 = *((_WORD *)v27 + v13 - v12);
    }
    if (v17 - 48 >= 0xA)
    {
      BOOL v18 = v17 > 0x2Du;
      uint64_t v23 = (1 << v17) & 0x2B0100000000;
      if (v18 || v23 == 0) {
        break;
      }
    }
    ++v13;
    --v11;
    ++v14;
    if (Length == v13) {
      goto LABEL_33;
    }
  }
  uint64_t v25 = SGDataDetectorsScanForPhone(v6);

LABEL_35:
  return v25;
}

void sub_1CA79B284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  SGRecordMeasurementState(&a67);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22368(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__22369(uint64_t a1)
{
}

void sub_1CA79C530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1CA79C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1CA79CD3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA79E5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Block_object_dispose((const void *)(v31 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA79F7E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A0454(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A0BF0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A1418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A1A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A29AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A38FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7A3F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_1CA7A4A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

void SGEnumerateReplyAttributionCandidates(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  if (!callBlockOnFirstlineCandidate(v3, v4)) {
    goto LABEL_176;
  }
  uint64_t v5 = [(__CFString *)v3 length];
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  *(_OWORD *)long long buffer = 0u;
  long long v68 = 0u;
  CFStringRef theString = v3;
  uint64_t v78 = 0;
  int64_t v79 = v5;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  int8x8_t v76 = (UniChar *)CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  float v66 = v3;
  int64_t v8 = 0;
  int v9 = 0;
  int64_t v80 = 0;
  int64_t v81 = 0;
  unint64_t v77 = CStringPtr;
  if (!v5)
  {
    int v12 = 7;
    int64_t v11 = 0;
    goto LABEL_174;
  }
  int64_t v10 = v5;
  int64_t v11 = 0;
  while (v10 <= v11)
  {
    do
    {
LABEL_74:
      int64_t v14 = v11 + 1;
      int64_t v13 = v11;
LABEL_60:
      int64_t v11 = v13 + 1;
      int v12 = 7;
      if (v13 + 1 == v5)
      {
        int64_t v11 = 0;
        int64_t v8 = v14;
        goto LABEL_174;
      }
    }
    while (v11 < 0);
    int64_t v10 = v79;
  }
  uint64_t v24 = v76;
  if (v76)
  {
    int64_t v25 = v78 + v11;
LABEL_67:
    UniChar v26 = v24[v25];
    goto LABEL_70;
  }
  if (!v77)
  {
    if (v81 <= v11 || (int64_t v31 = v80, v80 > v11))
    {
      int64_t v32 = v11 - 4;
      if ((unint64_t)v11 < 4) {
        int64_t v32 = 0;
      }
      if (v32 + 64 < v10) {
        int64_t v10 = v32 + 64;
      }
      int64_t v80 = v32;
      int64_t v81 = v10;
      v83.id location = v78 + v32;
      v83.length = v10 - v32;
      CFStringGetCharacters(theString, v83, buffer);
      int64_t v31 = v80;
    }
    int64_t v25 = v11 - v31;
    uint64_t v24 = buffer;
    goto LABEL_67;
  }
  UniChar v26 = v77[v78 + v11];
LABEL_70:
  if (v26 != 10) {
    goto LABEL_74;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 == v5)
  {
    int v12 = 8;
    int v9 = 2;
LABEL_73:
    int64_t v8 = v5;
    goto LABEL_174;
  }
  int64_t v27 = v79;
  if (v79 > v8)
  {
    uint64_t v28 = v76;
    if (v76)
    {
      int64_t v29 = v78 + v8;
      goto LABEL_78;
    }
    if (v77)
    {
      UniChar v30 = v77[v78 + v8];
    }
    else
    {
      if (v81 <= v8 || (int64_t v52 = v80, v80 > v8))
      {
        int64_t v53 = v11 - 3;
        if ((unint64_t)v8 < 4) {
          int64_t v53 = 0;
        }
        if (v53 + 64 < v79) {
          int64_t v27 = v53 + 64;
        }
        int64_t v80 = v53;
        int64_t v81 = v27;
        v87.id location = v78 + v53;
        v87.length = v27 - v53;
        CFStringGetCharacters(theString, v87, buffer);
        int64_t v52 = v80;
      }
      int64_t v29 = v8 - v52;
      uint64_t v28 = buffer;
LABEL_78:
      UniChar v30 = v28[v29];
    }
    if (v30 == 10)
    {
      int v9 = 2;
      int64_t v14 = v11 + 1;
      goto LABEL_58;
    }
  }
  int64_t v33 = v11 + 2;
  if (v11 + 2 == v5)
  {
    int v12 = 0;
LABEL_173:
    int v9 = 2;
    goto LABEL_174;
  }
  int64_t v34 = v11 + 1;
  int v9 = 2;
  while (2)
  {
    if (v33 < 0 || (int64_t v35 = v79, v79 <= v33))
    {
      int64_t v37 = v33;
      goto LABEL_99;
    }
    if (v76)
    {
      UniChar v36 = v76[v78 + v33];
    }
    else if (v77)
    {
      UniChar v36 = v77[v78 + v33];
    }
    else
    {
      if (v81 <= v33 || (int64_t v38 = v80, v80 > v33))
      {
        int64_t v39 = v33 - 4;
        if ((unint64_t)v33 < 4) {
          int64_t v39 = 0;
        }
        if (v39 + 64 < v79) {
          int64_t v35 = v39 + 64;
        }
        int64_t v80 = v39;
        int64_t v81 = v35;
        v84.id location = v78 + v39;
        v84.length = v35 - v39;
        CFStringGetCharacters(theString, v84, buffer);
        int64_t v38 = v80;
      }
      UniChar v36 = buffer[v33 - v38];
    }
    if (v36 != 58 && v36 != 65306)
    {
      int64_t v37 = v33;
      if (v36 == 10)
      {
        int64_t v51 = v34 + 2;
        if (v34 + 2 == v5)
        {
          int v12 = 1;
          goto LABEL_173;
        }
        int v9 = 2;
        if (v51 < 0) {
          goto LABEL_201;
        }
        int64_t v58 = v79;
        if (v79 <= v51) {
          goto LABEL_201;
        }
        unint64_t v59 = v76;
        if (v76)
        {
          int64_t v60 = v78 + v51;
          goto LABEL_196;
        }
        if (v77)
        {
          UniChar v61 = v77[v78 + v51];
        }
        else
        {
          if (v81 <= v51 || (int64_t v64 = v80, v80 > v51))
          {
            int64_t v65 = v34 - 2;
            if ((unint64_t)v51 < 4) {
              int64_t v65 = 0;
            }
            if (v65 + 64 < v79) {
              int64_t v58 = v65 + 64;
            }
            int64_t v80 = v65;
            int64_t v81 = v58;
            v89.id location = v78 + v65;
            v89.length = v58 - v65;
            CFStringGetCharacters(theString, v89, buffer);
            int64_t v64 = v80;
          }
          int64_t v60 = v51 - v64;
          unint64_t v59 = buffer;
LABEL_196:
          UniChar v61 = v59[v60];
        }
        if (v61 == 10) {
          goto LABEL_9;
        }
        goto LABEL_201;
      }
LABEL_99:
      int64_t v33 = v37 + 1;
      int64_t v34 = v37;
      if (v37 + 1 == v5)
      {
        int v12 = 0;
        goto LABEL_174;
      }
      continue;
    }
    break;
  }
  int64_t v37 = v33 + 1;
  while (2)
  {
    if (v37 == v5)
    {
      int v12 = 5;
      goto LABEL_173;
    }
    int64_t v41 = v79;
    if (v79 <= v37) {
      goto LABEL_99;
    }
    if (v76)
    {
      LOWORD(v42) = v76[v78 + v37];
    }
    else if (v77)
    {
      LOWORD(v42) = v77[v78 + v37];
    }
    else
    {
      int64_t v43 = v80;
      if (v81 <= v37 || v80 > v37)
      {
        int64_t v45 = v37 - 4;
        if ((unint64_t)v37 < 4) {
          int64_t v45 = 0;
        }
        if (v45 + 64 < v79) {
          int64_t v41 = v45 + 64;
        }
        int64_t v80 = v45;
        int64_t v81 = v41;
        v85.id location = v78 + v45;
        v85.length = v41 - v45;
        CFStringGetCharacters(theString, v85, buffer);
        int64_t v43 = v80;
      }
      LOWORD(v42) = buffer[v37 - v43];
    }
    int v42 = (unsigned __int16)v42;
    if ((unsigned __int16)v42 > 0x39u)
    {
      BOOL v46 = (unsigned __int16)v42 == 58 || (unsigned __int16)v42 == 65306;
      if (!v46 && (unsigned __int16)v42 != 160) {
        goto LABEL_99;
      }
      goto LABEL_166;
    }
    if ((unsigned __int16)v42 <= 0xCu)
    {
      if ((unsigned __int16)v42 != 9) {
        goto LABEL_169;
      }
      goto LABEL_166;
    }
    if ((unsigned __int16)v42 != 13)
    {
      if ((unsigned __int16)v42 != 32) {
        goto LABEL_99;
      }
LABEL_166:
      int64_t v33 = v37++;
      continue;
    }
    break;
  }
  int64_t v37 = v33 + 2;
  if (v33 + 2 == v5)
  {
    int v12 = 6;
    goto LABEL_173;
  }
  if (v37 < 0) {
    goto LABEL_99;
  }
  int64_t v47 = v79;
  if (v79 <= v37) {
    goto LABEL_99;
  }
  if (v76)
  {
    LOWORD(v42) = v76[v78 + v37];
  }
  else if (v77)
  {
    LOWORD(v42) = v77[v78 + v37];
  }
  else
  {
    if (v81 <= v37 || (int64_t v48 = v80, v80 > v37))
    {
      int64_t v49 = v33 - 2;
      if ((unint64_t)v37 < 4) {
        int64_t v49 = 0;
      }
      if (v49 + 64 < v79) {
        int64_t v47 = v49 + 64;
      }
      int64_t v80 = v49;
      int64_t v81 = v47;
      v86.id location = v78 + v49;
      v86.length = v47 - v49;
      CFStringGetCharacters(theString, v86, buffer);
      int64_t v48 = v80;
    }
    LOWORD(v42) = buffer[v37 - v48];
  }
  int v42 = (unsigned __int16)v42;
  if ((unsigned __int16)v42 == 58 || (unsigned __int16)v42 == 65306) {
    goto LABEL_166;
  }
LABEL_169:
  if (v42 != 10) {
    goto LABEL_99;
  }
  int64_t v51 = v37 + 1;
  if (v37 + 1 == v5)
  {
    int v12 = 9;
    int v9 = 1;
    goto LABEL_73;
  }
  int64_t v54 = v79;
  int v9 = 1;
  if (v79 > v51)
  {
    unint64_t v55 = v76;
    if (v76)
    {
      int64_t v56 = v78 + v51;
      goto LABEL_189;
    }
    if (v77)
    {
      UniChar v57 = v77[v78 + v51];
    }
    else
    {
      if (v81 <= v51 || (int64_t v62 = v80, v80 > v51))
      {
        int64_t v63 = v37 - 3;
        if ((unint64_t)v51 < 4) {
          int64_t v63 = 0;
        }
        if (v63 + 64 < v79) {
          int64_t v54 = v63 + 64;
        }
        int64_t v80 = v63;
        int64_t v81 = v54;
        v88.id location = v78 + v63;
        v88.length = v54 - v63;
        CFStringGetCharacters(theString, v88, buffer);
        int64_t v62 = v80;
      }
      int64_t v56 = v51 - v62;
      unint64_t v55 = buffer;
LABEL_189:
      UniChar v57 = v55[v56];
    }
    if (v57 == 10)
    {
LABEL_59:
      int64_t v14 = v51 - 1;
      int64_t v13 = v51 - 2;
      if (!(*((unsigned int (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v14 - v11)) {
        goto LABEL_175;
      }
      goto LABEL_60;
    }
  }
  int64_t v8 = v37 + 1;
LABEL_201:
  int64_t v23 = v51 + 1;
  if (v23 == v5)
  {
    int v12 = 2;
    goto LABEL_174;
  }
LABEL_10:
  int CharacterFromInlineBuffer = CFStringGetCharacterFromInlineBuffer(buffer, v23);
  if (CharacterFromInlineBuffer == 58 || CharacterFromInlineBuffer == 65306)
  {
    int64_t v14 = v23 + 1;
    if (v23 + 1 == v5)
    {
      int v12 = 3;
      goto LABEL_174;
    }
    while (1)
    {
      if (v14 < 0) {
        goto LABEL_49;
      }
      int64_t v17 = v79;
      if (v79 <= v14) {
        goto LABEL_49;
      }
      if (v76)
      {
        UniChar v18 = v76[v78 + v14];
      }
      else if (v77)
      {
        UniChar v18 = v77[v78 + v14];
      }
      else
      {
        if (v81 <= v14 || (int64_t v19 = v80, v80 > v14))
        {
          int64_t v20 = v14 - 4;
          if ((unint64_t)v14 < 4) {
            int64_t v20 = 0;
          }
          if (v20 + 64 < v79) {
            int64_t v17 = v20 + 64;
          }
          int64_t v80 = v20;
          int64_t v81 = v17;
          v82.id location = v78 + v20;
          v82.length = v17 - v20;
          CFStringGetCharacters(theString, v82, buffer);
          int64_t v19 = v80;
        }
        UniChar v18 = buffer[v14 - v19];
      }
      if (v18 > 0x39u)
      {
        BOOL v21 = v18 == 58 || v18 == 65306;
        if (!v21 && v18 != 160) {
          goto LABEL_49;
        }
      }
      else if (v18 <= 0xCu)
      {
        if (v18 != 9)
        {
          if (v18 == 10) {
            goto LABEL_54;
          }
          goto LABEL_49;
        }
      }
      else if (v18 == 13)
      {
        int64_t v14 = v23 + 2;
        if (v23 + 2 == v5)
        {
          int v12 = 4;
          goto LABEL_174;
        }
        int v22 = CFStringGetCharacterFromInlineBuffer(buffer, v23 + 2);
        if (v22 != 58 && v22 != 65306)
        {
          if (v22 == 10)
          {
LABEL_54:
            if (((*((uint64_t (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v14 - v11) & 1) == 0) {
              goto LABEL_175;
            }
LABEL_58:
            int64_t v13 = v14 - 1;
            goto LABEL_60;
          }
LABEL_49:
          int64_t v23 = v14 + 1;
          int v12 = 2;
          if (v14 + 1 == v5)
          {
LABEL_174:
            int64_t v14 = v5;
            int64_t v51 = v5;
            switch(v12)
            {
              case 0:
              case 1:
              case 5:
              case 6:
                goto LABEL_9;
              case 2:
              case 3:
              case 4:
                goto LABEL_7;
              case 8:
                goto LABEL_58;
              case 9:
                goto LABEL_59;
              default:
                goto LABEL_175;
            }
            goto LABEL_175;
          }
          goto LABEL_10;
        }
      }
      else if (v18 != 32)
      {
        goto LABEL_49;
      }
      int64_t v23 = v14++;
      int v12 = 3;
      if (v14 == v5) {
        goto LABEL_174;
      }
    }
  }
  int64_t v14 = v23;
  if (CharacterFromInlineBuffer != 10) {
    goto LABEL_49;
  }
LABEL_7:
  if (v9 != 1
    || (--v8, (*((unsigned int (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v8 - v11)))
  {
LABEL_9:
    int64_t v13 = v8 - 1;
    int64_t v14 = v8;
    goto LABEL_60;
  }
LABEL_175:
  uint64_t v3 = v66;
LABEL_176:
}

uint64_t callBlockOnFirstlineCandidate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (__CFString *)v3;
  uint64_t v6 = self;

  if (!v6) {
    goto LABEL_32;
  }
  memset(v26, 0, sizeof(v26));
  CFIndex Length = CFStringGetLength(v5);
  CFStringRef theString = v5;
  uint64_t v30 = 0;
  CFIndex v31 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v5);
  CStringPtr = 0;
  uint64_t v28 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  }
  int64_t v32 = 0;
  int64_t v33 = 0;
  int64_t v29 = CStringPtr;
  if (Length < 1) {
    goto LABEL_32;
  }
  uint64_t v10 = 0;
  int64_t v11 = 0;
  int64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 64;
  while (1)
  {
    if ((unint64_t)v12 >= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = v12;
    }
    CFIndex v16 = v31;
    if (v31 <= v12) {
      goto LABEL_31;
    }
    if (v28)
    {
      UniChar v17 = v28[v12 + v30];
    }
    else if (v29)
    {
      UniChar v17 = v29[v30 + v12];
    }
    else
    {
      if (v33 <= v12 || v11 > v12)
      {
        uint64_t v19 = v15 + v10;
        uint64_t v20 = v14 - v15;
        int64_t v21 = v12 - v15;
        CFIndex v22 = v21 + 64;
        if (v21 + 64 >= v31) {
          CFIndex v22 = v31;
        }
        int64_t v32 = v21;
        int64_t v33 = v22;
        if (v31 >= v20) {
          CFIndex v16 = v20;
        }
        v34.length = v16 + v19;
        v34.id location = v21 + v30;
        CFStringGetCharacters(theString, v34, (UniChar *)v26);
        int64_t v11 = v32;
      }
      UniChar v17 = *((_WORD *)v26 + v12 - v11);
    }
    if (v17 != 58 && v17 != 65306) {
      break;
    }
    int v13 = 1;
LABEL_31:
    ++v12;
    --v10;
    ++v14;
    if (Length == v12) {
      goto LABEL_32;
    }
  }
  if (v17 != 10) {
    goto LABEL_31;
  }
  if (v13)
  {
    uint64_t v24 = v4[2](v4, 0, v12);
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v24 = 1;
LABEL_33:

  return v24;
}

uint64_t CFStringGetCharacterFromInlineBuffer(UniChar *buffer, int64_t a2)
{
  if (a2 < 0)
  {
    return 0;
  }
  else
  {
    int64_t v4 = *((void *)buffer + 20);
    if (v4 <= a2)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *((void *)buffer + 17);
      if (v5)
      {
        return *(unsigned __int16 *)(v5 + 2 * (*((void *)buffer + 19) + a2));
      }
      else
      {
        uint64_t v8 = *((void *)buffer + 18);
        if (v8)
        {
          return (unsigned __int16)*(char *)(v8 + *((void *)buffer + 19) + a2);
        }
        else
        {
          if (*((void *)buffer + 22) <= a2 || (int64_t v9 = *((void *)buffer + 21), v9 > a2))
          {
            int64_t v10 = a2 - 4;
            if ((unint64_t)a2 < 4) {
              int64_t v10 = 0;
            }
            if (v10 + 64 < v4) {
              int64_t v4 = v10 + 64;
            }
            *((void *)buffer + 21) = v10;
            *((void *)buffer + 22) = v4;
            v11.id location = *((void *)buffer + 19) + v10;
            v11.length = v4 - v10;
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v11, buffer);
            int64_t v9 = *((void *)buffer + 21);
          }
          return buffer[a2 - v9];
        }
      }
    }
  }
}

void SGEnumerateBodyHeaderCandidates(void *a1, void *a2)
{
  id v3 = a1;
  int64_t v4 = a2;
  if (callBlockOnFirstlineCandidate(v3, v4))
  {
    uint64_t v5 = [(__CFString *)v3 length];
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    *(_OWORD *)long long buffer = 0u;
    long long v74 = 0u;
    CFStringRef theString = v3;
    uint64_t v84 = 0;
    int64_t v85 = v5;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    CFRange v82 = (UniChar *)CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    }
    int64_t v8 = 0;
    int64_t v86 = 0;
    int64_t v87 = 0;
    CFRange v83 = CStringPtr;
    long long v71 = v3;
    long long v72 = v4;
    if (v5)
    {
      int64_t v9 = v5;
      int64_t v10 = 0;
      goto LABEL_15;
    }
    unsigned int v11 = 4;
LABEL_9:
    while (2)
    {
      while (2)
      {
        if (v11 >= 4)
        {
          int64_t v8 = v5;
          if (v11 != 5)
          {
LABEL_11:
            id v3 = v71;
            int64_t v4 = v72;
            goto LABEL_12;
          }
        }
LABEL_7:
        int64_t v10 = v8 - 1;
LABEL_8:
        ++v10;
        unsigned int v11 = 4;
        if (v10 == v5) {
          continue;
        }
        break;
      }
      if (v10 < 0) {
        goto LABEL_24;
      }
      int64_t v9 = v85;
LABEL_15:
      if (v9 <= v10) {
        goto LABEL_24;
      }
      int64_t v12 = v82;
      if (v82)
      {
        int64_t v13 = v84 + v10;
      }
      else
      {
        if (v83)
        {
          UniChar v14 = v83[v84 + v10];
LABEL_21:
          if (v14 == 10)
          {
            int64_t v8 = v10 + 1;
            if (v10 + 1 == v5)
            {
              unsigned int v11 = 5;
              int64_t v8 = v5;
              continue;
            }
            int64_t v15 = v85;
            if (v85 <= v8) {
              goto LABEL_40;
            }
            CFIndex v16 = v82;
            if (v82)
            {
              int64_t v17 = v84 + v8;
            }
            else
            {
              if (v83)
              {
                UniChar v18 = v83[v84 + v8];
LABEL_39:
                if (v18 == 10) {
                  goto LABEL_7;
                }
LABEL_40:
                int64_t v21 = v10 + 2;
                if (v10 + 2 == v5)
                {
LABEL_41:
                  unsigned int v11 = 0;
                  continue;
                }
                CFIndex v22 = &buffer[1];
                while (1)
                {
                  if ((v21 & 0x8000000000000000) == 0)
                  {
                    int64_t v23 = v85;
                    if (v85 > v21)
                    {
                      if (v82)
                      {
                        UniChar v24 = v82[v84 + v21];
                      }
                      else if (v83)
                      {
                        UniChar v24 = v83[v84 + v21];
                      }
                      else
                      {
                        if (v87 <= v21 || (int64_t v25 = v86, v86 > v21))
                        {
                          int64_t v26 = v21 - 4;
                          if ((unint64_t)v21 < 4) {
                            int64_t v26 = 0;
                          }
                          if (v26 + 64 < v85) {
                            int64_t v23 = v26 + 64;
                          }
                          int64_t v86 = v26;
                          int64_t v87 = v23;
                          v89.id location = v84 + v26;
                          v89.length = v23 - v26;
                          int64_t v27 = v22;
                          CFStringGetCharacters(theString, v89, buffer);
                          CFIndex v22 = v27;
                          int64_t v25 = v86;
                        }
                        UniChar v24 = buffer[v21 - v25];
                      }
                      if (v24 == 58 || v24 == 65306)
                      {
                        unint64_t v29 = v21 + 1;
                        if (v21 + 1 == v5)
                        {
                          unsigned int v11 = 1;
                          goto LABEL_9;
                        }
                        int64_t v30 = ~v21;
                        int64_t v31 = v21 + 65;
                        while (1)
                        {
                          int64_t v32 = v21 + 1;
                          if (v29 >= 4) {
                            uint64_t v33 = 4;
                          }
                          else {
                            uint64_t v33 = v29;
                          }
                          int64_t v34 = v85;
                          if (v85 <= v32) {
                            goto LABEL_93;
                          }
                          if (v82)
                          {
                            UniChar v35 = v82[v21 + 1 + v84];
                          }
                          else if (v83)
                          {
                            UniChar v35 = v83[v84 + 1 + v21];
                          }
                          else
                          {
                            int64_t v36 = v86;
                            if (v87 <= v32 || v86 > v32)
                            {
                              uint64_t v38 = v33 + v30;
                              int64_t v39 = v31 - v33;
                              int64_t v40 = v21 - v33;
                              int64_t v41 = v40 + 1;
                              int64_t v42 = v40 + 65;
                              if (v42 >= v85) {
                                int64_t v42 = v85;
                              }
                              int64_t v86 = v41;
                              int64_t v87 = v42;
                              if (v85 >= v39) {
                                int64_t v34 = v39;
                              }
                              v90.length = v34 + v38;
                              int64_t v43 = v22;
                              v90.id location = v41 + v84;
                              CFStringGetCharacters(theString, v90, buffer);
                              CFIndex v22 = v43;
                              int64_t v36 = v86;
                            }
                            UniChar v35 = v22[v21 - v36];
                          }
                          if (v35 <= 0x39u) {
                            break;
                          }
                          if (v35 != 58 && v35 != 65306)
                          {
                            if (v35 == 160) {
                              goto LABEL_98;
                            }
LABEL_93:
                            ++v21;
                            goto LABEL_95;
                          }
                          ++v29;
                          ++v21;
                          --v30;
                          ++v31;
                          unsigned int v11 = 1;
                          if (v5 - 1 == v21) {
                            goto LABEL_9;
                          }
                        }
                        if (v35 != 9)
                        {
                          if (v35 == 10) {
                            goto LABEL_7;
                          }
                          if (v35 != 32) {
                            goto LABEL_93;
                          }
                        }
LABEL_98:
                        int64_t v45 = v21 + 2;
                        if (v21 + 2 == v5)
                        {
                          unsigned int v11 = 2;
                          goto LABEL_9;
                        }
                        int64_t v46 = v21 + 67;
                        int64_t v47 = -3 - v21;
                        unint64_t v48 = v21 + 3;
                        if ((v45 & 0x8000000000000000) == 0)
                        {
                          int64_t v49 = v85;
                          if (v85 > v45)
                          {
                            uint64_t v50 = v82;
                            if (v82)
                            {
                              int64_t v51 = v84 + v45;
                              goto LABEL_104;
                            }
                            if (v83)
                            {
                              UniChar v52 = v83[v84 + v45];
                            }
                            else
                            {
                              if (v87 <= v45 || (int64_t v69 = v86, v86 > v45))
                              {
                                int64_t v70 = v21 - 2;
                                if ((unint64_t)v45 < 4) {
                                  int64_t v70 = 0;
                                }
                                if (v70 + 64 < v85) {
                                  int64_t v49 = v70 + 64;
                                }
                                int64_t v86 = v70;
                                int64_t v87 = v49;
                                v93.id location = v84 + v70;
                                v93.length = v49 - v70;
                                CFStringGetCharacters(theString, v93, buffer);
                                int64_t v69 = v86;
                              }
                              int64_t v51 = v45 - v69;
                              uint64_t v50 = buffer;
LABEL_104:
                              UniChar v52 = v50[v51];
                            }
                            if (v52 == 10) {
                              goto LABEL_7;
                            }
                          }
                        }
                        unint64_t v55 = &buffer[3];
                        do
                        {
                          if (v48 >= 4) {
                            uint64_t v56 = 4;
                          }
                          else {
                            uint64_t v56 = v48;
                          }
                          if (v5 - 3 == v21)
                          {
                            unsigned int v11 = 3;
                            goto LABEL_9;
                          }
                          int64_t v57 = v21;
                          int64_t v58 = v21 + 3;
                          if (v21 + 3 < 0 || (int64_t v59 = v85, v85 <= v58))
                          {
                            UniChar v60 = 0;
                          }
                          else if (v82)
                          {
                            UniChar v60 = v82[v21 + 3 + v84];
                          }
                          else if (v83)
                          {
                            UniChar v60 = v83[v84 + 3 + v21];
                          }
                          else
                          {
                            if (v87 <= v58 || (int64_t v61 = v86, v86 > v58))
                            {
                              uint64_t v62 = v56 + v47;
                              int64_t v63 = v46 - v56;
                              int64_t v64 = v21 - v56;
                              int64_t v65 = v55;
                              int64_t v66 = v64 + 3;
                              int64_t v67 = v64 + 67;
                              if (v67 >= v85) {
                                int64_t v67 = v85;
                              }
                              int64_t v86 = v66;
                              int64_t v87 = v67;
                              if (v85 >= v63) {
                                int64_t v59 = v63;
                              }
                              v92.length = v59 + v62;
                              v92.id location = v66 + v84;
                              CFStringGetCharacters(theString, v92, buffer);
                              unint64_t v55 = v65;
                              int64_t v61 = v86;
                            }
                            UniChar v60 = v55[v57 - v61];
                          }
                          int64_t v21 = v57 + 1;
                          ++v48;
                          --v47;
                          ++v46;
                        }
                        while (v60 != 10);
                        int64_t v8 = v57 + 3;
                        char v68 = v72[2](v72, v10, v57 + 3 - v10);
                        if ((v68 & 1) == 0) {
                          goto LABEL_11;
                        }
                        int64_t v10 = v57 + 2;
                        goto LABEL_8;
                      }
                      if (v24 == 10) {
                        goto LABEL_7;
                      }
                    }
                  }
LABEL_95:
                  if (++v21 == v5) {
                    goto LABEL_41;
                  }
                }
              }
              if (v87 <= v8 || (int64_t v53 = v86, v86 > v8))
              {
                int64_t v54 = v10 - 3;
                if ((unint64_t)v8 < 4) {
                  int64_t v54 = 0;
                }
                if (v54 + 64 < v85) {
                  int64_t v15 = v54 + 64;
                }
                int64_t v86 = v54;
                int64_t v87 = v15;
                v91.id location = v84 + v54;
                v91.length = v15 - v54;
                CFStringGetCharacters(theString, v91, buffer);
                int64_t v53 = v86;
              }
              int64_t v17 = v8 - v53;
              CFIndex v16 = buffer;
            }
            UniChar v18 = v16[v17];
            goto LABEL_39;
          }
LABEL_24:
          int64_t v8 = v10 + 1;
          goto LABEL_8;
        }
        if (v87 <= v10 || (int64_t v19 = v86, v86 > v10))
        {
          int64_t v20 = v10 - 4;
          if ((unint64_t)v10 < 4) {
            int64_t v20 = 0;
          }
          if (v20 + 64 < v9) {
            int64_t v9 = v20 + 64;
          }
          int64_t v86 = v20;
          int64_t v87 = v9;
          v88.id location = v84 + v20;
          v88.length = v9 - v20;
          CFStringGetCharacters(theString, v88, buffer);
          int64_t v19 = v86;
        }
        int64_t v13 = v10 - v19;
        int64_t v12 = buffer;
      }
      break;
    }
    UniChar v14 = v12[v13];
    goto LABEL_21;
  }
LABEL_12:
}

void charactersSAX(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = (objc_class *)NSString;
  id v6 = a1;
  id v7 = (id)[[v5 alloc] initWithBytes:a2 length:a3 encoding:4];
  [v6 appendString:v7];
}

void sub_1CA7A8678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

id patterns_22951()
{
  if (patterns_onceToken_22998 != -1) {
    dispatch_once(&patterns_onceToken_22998, &__block_literal_global_200_22999);
  }
  int v0 = (void *)patterns_patterns_23000;
  return v0;
}

id nontokenCharset()
{
  if (nontokenCharset_onceToken != -1) {
    dispatch_once(&nontokenCharset_onceToken, &__block_literal_global_238_22987);
  }
  int v0 = (void *)nontokenCharset_nontoken;
  return v0;
}

void __nontokenCharset_block_invoke()
{
  int v0 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
  id v4 = (id)[v0 mutableCopy];

  uint64_t v1 = punctuationCharset();
  [v4 formUnionWithCharacterSet:v1];

  uint64_t v2 = [v4 copy];
  id v3 = (void *)nontokenCharset_nontoken;
  nontokenCharset_nontoken = v2;
}

id punctuationCharset()
{
  if (punctuationCharset__pasOnceToken3 != -1) {
    dispatch_once(&punctuationCharset__pasOnceToken3, &__block_literal_global_233_22989);
  }
  int v0 = (void *)punctuationCharset__pasExprOnceResult;
  return v0;
}

void __punctuationCharset_block_invoke()
{
  int v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@".,?"];
  uint64_t v2 = (void *)punctuationCharset__pasExprOnceResult;
  punctuationCharset__pasExprOnceResult = v1;
}

uint64_t __patterns_block_invoke_23003()
{
  patterns_patterns_23000 = +[SGPatterns patternsForClass:objc_opt_class()];
  return MEMORY[0x1F41817F8]();
}

void tokenize(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a5;
  if (a3 > [v9 length] || a3 + a4 > objc_msgSend(v9, "length"))
  {
    int64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    int64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)");
    [v12 handleFailureInFunction:v13, @"SGSignatureDissector.m", 239, @"tokenize range (%lu, %lu) beyond text length %lu", a3, a4, objc_msgSend(v9, "length") file lineNumber description];
  }
  if (tokenize_onceToken != -1) {
    dispatch_once(&tokenize_onceToken, &__block_literal_global_211);
  }
  pthread_mutex_lock(&tokenize_updateLock);
  v18[0] = 0;
  v18[1] = v18;
  id v18[2] = 0x2020000000;
  char v19 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __tokenize_block_invoke_3;
  v14[3] = &unk_1E65B9BD8;
  CFIndex v16 = v18;
  id v11 = v10;
  id v15 = v11;
  uint64_t v17 = a2;
  +[SGTokenizer enumerateTokensInString:withRange:block:](SGTokenizer, "enumerateTokensInString:withRange:block:", v9, a3, a4, v14);
  pthread_mutex_unlock(&tokenize_updateLock);

  _Block_object_dispose(v18, 8);
}

void sub_1CA7AAA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void **emitToken(void **result, char a2, int a3)
{
  uint64_t v5 = result;
  id v6 = *result;
  if (*result >= result[1])
  {
    size_t v7 = (size_t)result[1] + ((unint64_t)result[1] & 1) + ((unint64_t)result[1] >> 1);
    result[1] = (void *)v7;
    int64_t v8 = reallocf(result[2], v7);
    if (!v8 || (v5[2] = v8, (uint64_t result = (void **)reallocf(v5[3], 4 * (void)v5[1])) == 0))
    {
      id v10 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v10);
    }
    v5[3] = result;
    id v6 = *v5;
  }
  v6[(void)v5[2]] = a2;
  id v9 = (char *)*v5;
  *((_DWORD *)v5[3] + (void)*v5) = a3;
  objc_class *v5 = v9 + 1;
  return result;
}

void __viterbi_block_invoke()
{
  atomic_store(0, viterbi_hmmLoaded);
  int v0 = +[SGAsset asset];
  id v1 = (id)[v0 registerUpdateHandler:&__block_literal_global_242_23037];

  id v2 = +[SGAsset asset];
  __viterbi_block_invoke_2((uint64_t)v2, v2);
}

void __viterbi_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = (void *)MEMORY[0x1CB79B230]();
  id v4 = [v2 filesystemPathForAssetDataRelativePath:@"hmm.dat"];
  if (v4)
  {
    id v12 = 0;
    uint64_t v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v4 options:1 error:&v12];
    id v6 = v12;
    if (v5)
    {
      id v7 = v5;
      if ([v7 length] != 336)
      {
        id v10 = [MEMORY[0x1E4F28B00] currentHandler];
        id v11 = [NSString stringWithUTF8String:"void deserializeHmm(NSData *__strong)"];
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"SGSignatureDissector.m", 1353, @"Wrong data length: %li", objc_msgSend(v7, "length"));
      }
      id v8 = v7;
      memcpy(hmm, (const void *)[v8 bytes], 0x150uLL);

      atomic_store(1u, viterbi_hmmLoaded);
    }
    else
    {
      id v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        UniChar v14 = v6;
        _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "Could not load HMM data: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    id v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "Could not fetch filesystem path for HMM", buf, 2u);
    }
  }
}

void __tokenize_block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = a2;
  if ([v8 length])
  {
    unsigned int v9 = [v8 characterAtIndex:0];
    if (v9 > 0x7F) {
      int v10 = __maskrune(v9, 0x8000uLL);
    }
    else {
      int v10 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x8000;
    }
    id v11 = [v8 lowercaseString];
    int v12 = [(id)tokenize_trie payloadForString:v11];
    if (v12)
    {
      char v13 = v12 - 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      if ([v11 length] != 1
        || [v11 characterAtIndex:0] != 45
        && [v11 characterAtIndex:0] != 95)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        if (*(void *)(a1 + 32))
        {
          uint64_t v15 = objc_msgSend(v11, "rangeOfString:");
          if (!v15)
          {
            char v13 = 10;
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v16 = [v11 length];
        uint64_t v17 = v16 - [*(id *)(a1 + 32) length];
        char v13 = 10;
        if (v15 != v17)
        {
          BOOL v18 = +[SGNames isLowercaseStringCommonNameWord:v8];
          char v13 = v18 ? 10 : 8;
          if (!v18 && !v10)
          {
            char v13 = 7;
            if ([v8 characterAtIndex:0] - 48 <= 9)
            {
              CFCharacterSetRef v19 = (const __CFCharacterSet *)punctuationCharset();
              uint64_t v20 = [v8 length];
              v23[0] = MEMORY[0x1E4F143A8];
              v23[1] = 3221225472;
              v23[2] = __tokenize_block_invoke_4;
              v23[3] = &unk_1E65B9BB0;
              CFStringRef v21 = (const __CFString *)v8;
              uint64_t v22 = *(void *)(a1 + 48);
              UniChar v24 = (__CFString *)v21;
              uint64_t v25 = v22;
              uint64_t v26 = a4;
              uint64_t v27 = a5;
              int v28 = 7;
              enumerateTokensSeparatedByCharset(v21, v19, 0, v20, v23);

              goto LABEL_8;
            }
          }
        }
        goto LABEL_7;
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
      if (*(unsigned char *)(v14 + 24)) {
        goto LABEL_8;
      }
      *(unsigned char *)(v14 + 24) = 1;
      char v13 = 11;
    }
LABEL_7:
    emitToken(*(void ***)(a1 + 48), v13, a4);
LABEL_8:
  }
}

void **__tokenize_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a2, a3);
  uint64_t v5 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  id v6 = self;

  if (!v6) {
    goto LABEL_26;
  }
  memset(v26, 0, sizeof(v26));
  CFIndex Length = CFStringGetLength(v5);
  CFStringRef theString = v5;
  uint64_t v30 = 0;
  CFIndex v31 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v5);
  CStringPtr = 0;
  int v28 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v29 = CStringPtr;
  if (Length >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 64;
    while (1)
    {
      uint64_t v14 = (unint64_t)v12 >= 4 ? 4 : v12;
      CFIndex v15 = v31;
      if (v31 <= v12) {
        break;
      }
      if (v28)
      {
        UniChar v16 = v28[v12 + v30];
      }
      else if (v29)
      {
        UniChar v16 = v29[v30 + v12];
      }
      else
      {
        if (v33 <= v12 || v11 > v12)
        {
          uint64_t v18 = v14 + v10;
          uint64_t v19 = v13 - v14;
          uint64_t v20 = v12 - v14;
          CFIndex v21 = v20 + 64;
          if (v20 + 64 >= v31) {
            CFIndex v21 = v31;
          }
          uint64_t v32 = v20;
          uint64_t v33 = v21;
          if (v31 >= v19) {
            CFIndex v15 = v19;
          }
          v34.length = v15 + v18;
          v34.id location = v20 + v30;
          CFStringGetCharacters(theString, v34, (UniChar *)v26);
          uint64_t v11 = v32;
        }
        UniChar v16 = *((_WORD *)v26 + v12 - v11);
      }
      if (v16 - 48 >= 0xA) {
        break;
      }
      ++v12;
      --v10;
      ++v13;
      if (Length == v12) {
        goto LABEL_26;
      }
    }

    char v24 = *(unsigned char *)(a1 + 64);
    uint64_t v22 = *(void ***)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 48) + a2;
  }
  else
  {
LABEL_26:

    uint64_t v22 = *(void ***)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 48) + a2;
    char v24 = 9;
  }
  return emitToken(v22, v24, v23);
}

void enumerateTokensSeparatedByCharset(const __CFString *a1, const __CFCharacterSet *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (a1 && a4)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    *(_OWORD *)long long buffer = 0u;
    long long v49 = 0u;
    CFStringRef theString = a1;
    uint64_t v59 = a3;
    uint64_t v60 = a4;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    if (CharactersPtr) {
      CStringPtr = 0;
    }
    else {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    uint64_t v11 = a3 + a4;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int64_t v58 = CStringPtr;
    uint64_t v12 = -a3;
    uint64_t v47 = 1 - a3;
    uint64_t v13 = a3 - 1;
    id v45 = v9;
    uint64_t v46 = 65 - a3;
    uint64_t v44 = &buffer[-a3 + 1];
    uint64_t v14 = -(a4 + a3);
    uint64_t v15 = a3;
    uint64_t v42 = a3 + a4;
    uint64_t v43 = a3;
    uint64_t v41 = a3 - 1;
    while (1)
    {
LABEL_7:
      uint64_t v16 = v11 - v15;
      if (v11 == v15) {
        break;
      }
      uint64_t v17 = v15;
      uint64_t v18 = v15 - a3;
      if (v18 < 0 || (uint64_t v19 = v60, v60 <= v18))
      {
        UniChar v22 = 0;
      }
      else
      {
        uint64_t v20 = (UniChar *)CharactersPtr;
        if (CharactersPtr)
        {
          uint64_t v21 = v59 + v18;
        }
        else
        {
          if (v58)
          {
            UniChar v22 = v58[v59 + v18];
            goto LABEL_14;
          }
          if (v62 <= v18 || (uint64_t v38 = v61, v61 > v18))
          {
            uint64_t v39 = v18 - 4;
            if ((unint64_t)v18 < 4) {
              uint64_t v39 = 0;
            }
            if (v39 + 64 < v60) {
              uint64_t v19 = v39 + 64;
            }
            uint64_t v61 = v39;
            uint64_t v62 = v19;
            v64.id location = v59 + v39;
            v64.length = v19 - v39;
            CFStringGetCharacters(theString, v64, buffer);
            uint64_t v38 = v61;
          }
          uint64_t v21 = v18 - v38;
          uint64_t v20 = buffer;
        }
        UniChar v22 = v20[v21];
      }
LABEL_14:
      uint64_t v15 = v17 + 1;
      if (!CFCharacterSetIsCharacterMember(a2, v22))
      {
        unint64_t v23 = v47 + v17;
        uint64_t v24 = v13 - v17;
        uint64_t v25 = v46 + v17;
        uint64_t v26 = v17;
        while (1)
        {
          uint64_t v27 = v23 >= 4 ? 4 : v23;
          if (v14 + v26 == -1) {
            break;
          }
          uint64_t v28 = v26;
          uint64_t v29 = v12 + v26 + 1;
          if (v29 < 0 || (uint64_t v30 = v60, v60 <= v29))
          {
            UniChar v31 = 0;
          }
          else if (CharactersPtr)
          {
            UniChar v31 = CharactersPtr[v12 + 1 + v26 + v59];
          }
          else if (v58)
          {
            UniChar v31 = v58[v59 + 1 + v12 + v26];
          }
          else
          {
            if (v62 <= v29 || (uint64_t v32 = v61, v61 > v29))
            {
              uint64_t v33 = v27 + v24;
              uint64_t v34 = v25 - v27;
              uint64_t v35 = -v27;
              uint64_t v36 = v46 + v26 + v35;
              if (v36 >= v60) {
                uint64_t v36 = v60;
              }
              uint64_t v61 = v47 + v26 + v35;
              uint64_t v62 = v36;
              if (v60 >= v34) {
                uint64_t v30 = v34;
              }
              v63.length = v30 + v33;
              v63.id location = v12 + v26 + v35 + v59 + 1;
              CFStringGetCharacters(theString, v63, buffer);
              uint64_t v32 = v61;
            }
            UniChar v31 = v44[v26 - v32];
          }
          ++v26;
          ++v23;
          --v24;
          ++v25;
          if (CFCharacterSetIsCharacterMember(a2, v31))
          {
            uint64_t v15 = v28 + 2;
            int64_t v37 = (void *)MEMORY[0x1CB79B230]();
            id v9 = v45;
            (*((void (**)(id, uint64_t, uint64_t))v45 + 2))(v45, v17, v26 - v17);
            uint64_t v11 = v42;
            a3 = v43;
            uint64_t v13 = v41;
            goto LABEL_7;
          }
        }
        int64_t v40 = (void *)MEMORY[0x1CB79B230]();
        id v9 = v45;
        (*((void (**)(id, uint64_t, uint64_t))v45 + 2))(v45, v17, v16);
        break;
      }
    }
  }
}

void __tokenize_block_invoke()
{
  int v0 = +[SGAsset asset];
  id v1 = (id)[v0 registerUpdateHandler:&__block_literal_global_214_23057];

  id v2 = +[SGAsset asset];
  __tokenize_block_invoke_2((uint64_t)v2, v2);
}

void __tokenize_block_invoke_2(uint64_t a1, void *a2)
{
  id v12 = a2;
  pthread_mutex_lock(&tokenize_updateLock);
  id v2 = v12;
  if (!v12)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    [v6 handleFailureInFunction:v7 file:@"SGSignatureDissector.m" lineNumber:248 description:@"Encountered nil Asset while attempting to load HMM tokens."];

    id v2 = 0;
  }
  id v3 = [v2 filesystemPathForAssetDataRelativePath:@"HmmSigTokens.dat"];
  if (!v3)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"SGSignatureDissector.m", 250, @"No HMM token file contained in CoreSuggestions MobileAsset version %lu", objc_msgSend(v12, "assetVersion"));
  }
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F93AC8]) initWithPath:v3];
  uint64_t v5 = (void *)tokenize_trie;
  tokenize_trie = v4;

  if (!tokenize_trie)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    [v10 handleFailureInFunction:v11 file:@"SGSignatureDissector.m" lineNumber:252 description:@"Could not load HMM keyword trie"];
  }
  pthread_mutex_unlock(&tokenize_updateLock);
}

void sub_1CA7ABD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23080(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__23081(uint64_t a1)
{
}

BOOL re2::StringPiece::_equal(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (*(unsigned __int8 *)(*a1 + (v2 - 1)) != (*a2)[(v2 - 1)]) {
    return 0;
  }
  unint64_t v5 = v3 + v2;
  unint64_t v6 = v3 + 1;
  do
  {
    int v7 = *v4++;
    BOOL result = *(unsigned __int8 *)(v6 - 1) == v7;
    BOOL v9 = *(unsigned __int8 *)(v6 - 1) != v7 || v6 >= v5;
    ++v6;
  }
  while (!v9);
  return result;
}

unint64_t re2::StringPiece::copy(re2::StringPiece *this, char *__dst, unint64_t a3, uint64_t a4)
{
  if (*((int *)this + 2) - a4 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = *((int *)this + 2) - a4;
  }
  memcpy(__dst, (const void *)(*(void *)this + a4), (int)v4);
  return v4;
}

uint64_t re2::StringPiece::find(re2::StringPiece *this, const re2::StringPiece *a2, unint64_t a3)
{
  unint64_t v3 = *((unsigned int *)this + 2);
  if ((v3 & 0x80000000) != 0 || v3 < a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)this;
  unint64_t v6 = (unsigned __int8 *)(*(void *)this + a3);
  uint64_t v7 = *((int *)a2 + 2);
  if (v7)
  {
    if ((uint64_t)(v5 + v3 - (void)v6) < v7 || (uint64_t v8 = v5 + v3 - v7 + 1, (unsigned __int8 *)v8 == v6))
    {
LABEL_14:
      unint64_t v6 = (unsigned __int8 *)(v5 + v3);
    }
    else
    {
      while (*v6 != **(unsigned __int8 **)a2)
      {
LABEL_8:
        if (++v6 == (unsigned __int8 *)v8) {
          goto LABEL_14;
        }
      }
      uint64_t v9 = 1;
      while (v7 != v9)
      {
        int v10 = v6[v9];
        int v11 = *(unsigned __int8 *)(*(void *)a2 + v9++);
        if (v10 != v11) {
          goto LABEL_8;
        }
      }
    }
  }
  id v12 = &v6[-v5];
  if ((unint64_t)&v12[v7] > v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v12;
  }
}

uint64_t re2::StringPiece::find(re2::StringPiece *this, int a2, unint64_t a3)
{
  unint64_t v3 = *((unsigned int *)this + 2);
  if ((int)v3 < 1 || v3 <= a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (void *)(*(void *)this + v3);
  unint64_t v6 = memchr((void *)(*(void *)this + a3), a2, (size_t)v5 - *(void *)this - a3);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v7 == v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v7 - v4);
  }
}

unint64_t re2::StringPiece::rfind(unsigned __int8 **this, const re2::StringPiece *a2, unint64_t a3)
{
  unint64_t v3 = *((int *)this + 2);
  uint64_t v4 = *((int *)a2 + 2);
  if ((int)v3 < (int)v4) {
    return 0xFFFFFFFFLL;
  }
  if (v4)
  {
    unint64_t v6 = *this;
    unint64_t v7 = v3 - v4;
    if (v7 >= a3) {
      unint64_t v7 = a3;
    }
    uint64_t v8 = &v6[v4 + v7];
    if (v6 == v8) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v9 = *this;
    int v10 = v8;
    do
    {
      if (*v9 == **(unsigned __int8 **)a2)
      {
        uint64_t v11 = 1;
        while (v4 != v11)
        {
          if (&v9[v11] == v8) {
            goto LABEL_17;
          }
          int v12 = v9[v11];
          int v13 = *(unsigned __int8 *)(*(void *)a2 + v11++);
          if (v12 != v13) {
            goto LABEL_9;
          }
        }
        int v10 = v9;
      }
LABEL_9:
      ++v9;
    }
    while (v9 != v8);
LABEL_17:
    unsigned int v14 = v10 - v6;
    if (v10 == v8) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v14;
    }
  }
  else if (v3 >= a3)
  {
    return a3;
  }
  else
  {
    return *((int *)this + 2);
  }
}

unint64_t re2::StringPiece::rfind(re2::StringPiece *this, unsigned __int8 a2, unint64_t a3)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((v3 - 1) >= a3) {
    unint64_t result = a3;
  }
  else {
    unint64_t result = (v3 - 1);
  }
  uint64_t v6 = *(void *)this;
  while (*(unsigned __int8 *)(v6 + result) != a2)
  {
    BOOL v7 = (int)result <= 0;
    unint64_t result = (result - 1);
    if (v7) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

unint64_t re2::StringPiece::substr(re2::StringPiece *this, unint64_t a2)
{
  unint64_t v2 = *((int *)this + 2);
  if (v2 >= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *((int *)this + 2);
  }
  return *(void *)this + v3;
}

uint64_t SGMIMetricsRegexSignatureStatsReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 191)
      {
        if ((int)v17 <= 289)
        {
          if (v17 == 192)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 64) |= 0x20u;
            while (1)
            {
              uint64_t v54 = *v3;
              unint64_t v55 = *(void *)(a2 + v54);
              if (v55 == -1 || v55 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
              *(void *)(a2 + v54) = v55 + 1;
              v20 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_114;
              }
              v52 += 7;
              BOOL v14 = v53++ >= 9;
              if (v14)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_116;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_114:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            }
LABEL_116:
            uint64_t v58 = 44;
          }
          else
          {
            if (v17 != 200)
            {
LABEL_87:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
              goto LABEL_118;
            }
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 64) |= 4u;
            while (1)
            {
              uint64_t v33 = *v3;
              unint64_t v34 = *(void *)(a2 + v33);
              if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v20 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_98;
              }
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                goto LABEL_100;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_98:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            }
LABEL_100:
            uint64_t v58 = 24;
          }
        }
        else
        {
          switch(v17)
          {
            case 0x122:
              char v42 = 0;
              unsigned int v43 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 64) |= 1u;
              while (1)
              {
                uint64_t v44 = *v3;
                unint64_t v45 = *(void *)(a2 + v44);
                if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
                *(void *)(a2 + v44) = v45 + 1;
                v20 |= (unint64_t)(v46 & 0x7F) << v42;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                  goto LABEL_108;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_106:
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              }
LABEL_108:
              uint64_t v58 = 16;
              break;
            case 0x12C:
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 64) |= 8u;
              while (1)
              {
                uint64_t v49 = *v3;
                unint64_t v50 = *(void *)(a2 + v49);
                if (v50 == -1 || v50 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
                *(void *)(a2 + v49) = v50 + 1;
                v20 |= (unint64_t)(v51 & 0x7F) << v47;
                if ((v51 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v47 += 7;
                BOOL v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                  goto LABEL_112;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_110:
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              }
LABEL_112:
              uint64_t v58 = 28;
              break;
            case 0x186:
              char v24 = 0;
              unsigned int v25 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 64) |= 2u;
              while (1)
              {
                uint64_t v26 = *v3;
                unint64_t v27 = *(void *)(a2 + v26);
                if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                *(void *)(a2 + v26) = v27 + 1;
                v20 |= (unint64_t)(v28 & 0x7F) << v24;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
                  goto LABEL_96;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_94:
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              }
LABEL_96:
              uint64_t v58 = 20;
              break;
            default:
              goto LABEL_87;
          }
        }
        goto LABEL_117;
      }
      if ((int)v17 > 99) {
        break;
      }
      if (v17 == 1)
      {
        uint64_t v36 = objc_alloc_init(SGMIMetricsTrialMetadata);
        objc_storeStrong((id *)(a1 + 56), v36);
        if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
LABEL_120:

          return 0;
        }
LABEL_79:
        PBReaderRecallMark();

        goto LABEL_118;
      }
      if (v17 != 10) {
        goto LABEL_87;
      }
      uint64_t v29 = PBReaderReadString();
      uint64_t v30 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v29;

LABEL_118:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 != 100)
    {
      if (v17 == 190)
      {
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 64) |= 0x10u;
        while (1)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
          *(void *)(a2 + v39) = v40 + 1;
          v20 |= (unint64_t)(v41 & 0x7F) << v37;
          if ((v41 & 0x80) == 0) {
            goto LABEL_102;
          }
          v37 += 7;
          BOOL v14 = v38++ >= 9;
          if (v14)
          {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            goto LABEL_104;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_102:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_104:
        uint64_t v58 = 40;
      }
      else
      {
        if (v17 != 191) {
          goto LABEL_87;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 64) |= 0x40u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_90;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            goto LABEL_92;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_90:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_92:
        uint64_t v58 = 48;
      }
LABEL_117:
      *(_DWORD *)(a1 + v5_Block_object_dispose(&STACK[0x2A0], 8) = v20;
      goto LABEL_118;
    }
    uint64_t v36 = objc_alloc_init(SGMIMetricsRegexSignatureStat);
    [(id)a1 addStats:v36];
    if (!PBReaderPlaceMark() || (SGMIMetricsRegexSignatureStatReadFrom((uint64_t)v36, a2) & 1) == 0) {
      goto LABEL_120;
    }
    goto LABEL_79;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA7AF134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B02BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA7B057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B07A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B0AD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23660(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__23661(uint64_t a1)
{
}

void sub_1CA7B0C60(_Unwind_Exception *exception_object, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v3 = objc_begin_catch(exception_object);
  uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4re2::Compiler::Compile(this, 0) = 0;

  xpc_transaction_exit_clean();
  objc_end_catch();
  JUMPOUT(0x1CA7B0BA4);
}

void sub_1CA7B0CB8()
{
}

void sub_1CA7B10D8(_Unwind_Exception *a1)
{
}

void sub_1CA7B137C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B1474(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    BOOL v14 = sgLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      sqlite3_int64 v15 = sqlite3_column_int64(v12, 0);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_1CA650000, v14, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact: %lld", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v16 = *(void *)(*(void *)(v11 + 32) + 8);
    unint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 4re2::Compiler::Compile(this, 0) = 0;

    xpc_transaction_exit_clean();
    objc_end_catch();
    JUMPOUT(0x1CA7B1440);
  }
  _Unwind_Resume(a1);
}

uint64_t SGUnarchiverZip(NSURL *a1, NSURL *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  if (!v3 || !v4) {
    goto LABEL_14;
  }
  if (![(NSURL *)v3 isFileURL])
  {
    uint64_t v11 = sgLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_13:

      uint64_t v6 = 0;
      goto LABEL_14;
    }
    int v20 = 138412290;
    *(void *)uint64_t v21 = v3;
    unint64_t v12 = "SGUnarchiver: unable to open non-file URL %@.";
    id v13 = v11;
    uint32_t v14 = 12;
LABEL_16:
    _os_log_error_impl(&dword_1CA650000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v20, v14);
    goto LABEL_13;
  }
  BOOL v7 = v3;
  int v8 = open([(NSURL *)v7 fileSystemRepresentation], 4);
  if (v8 < 0)
  {
    uint64_t v11 = sgLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    char v18 = __error();
    unsigned int v19 = strerror(*v18);
    int v20 = 138412546;
    *(void *)uint64_t v21 = v7;
    *(_WORD *)&v21[8] = 2082;
    *(void *)&v21[10] = v19;
    unint64_t v12 = "SGUnarchiver: unable to open file %@ - %{public}s.";
    id v13 = v11;
    uint32_t v14 = 22;
    goto LABEL_16;
  }
  int v9 = v8;
  uint64_t v6 = SGUnarchiverZip(v8, v5);
  if (close(v9))
  {
    unint64_t v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      uint64_t v16 = __error();
      unint64_t v17 = strerror(*v16);
      int v20 = 67240706;
      *(_DWORD *)uint64_t v21 = v9;
      *(_WORD *)&v21[4] = 2112;
      *(void *)&v21[6] = v7;
      *(_WORD *)&v21[14] = 2082;
      *(void *)&v21[16] = v17;
      _os_log_fault_impl(&dword_1CA650000, v10, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to close file descriptor %{public}d for %@ (leaking) - %{public}s.", (uint8_t *)&v20, 0x1Cu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
LABEL_14:

  return v6;
}

uint64_t SGUnarchiverZip(int a1, NSURL *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  if (a1 < 0 || !v3) {
    goto LABEL_17;
  }
  uint64_t Archive = SGCreateReadArchive();
  if (!Archive)
  {
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  uint64_t v7 = Archive;
  NSPageSize();
  if (archive_read_open_fd())
  {
    int v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136446210;
      uint64_t v13 = archive_error_string();
      _os_log_error_impl(&dword_1CA650000, v8, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to open archive_read - %{public}s.", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = SGZipUnarchive(v7, v4);
    if (!archive_read_close()) {
      goto LABEL_13;
    }
    int v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136446210;
      uint64_t v13 = archive_error_string();
      _os_log_error_impl(&dword_1CA650000, v8, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_read - %{public}s.", (uint8_t *)&v12, 0xCu);
    }
  }

LABEL_13:
  if (archive_read_free())
  {
    int v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = archive_error_string();
      int v12 = 136446210;
      uint64_t v13 = v11;
      _os_log_fault_impl(&dword_1CA650000, v9, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v12, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
LABEL_17:

  return v5;
}

uint64_t SGCreateReadArchive()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = archive_read_new();
  if (!v0) {
    return v0;
  }
  if (archive_read_support_format_zip())
  {
    uint64_t v1 = sgLogHandle();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = archive_error_string();
      _os_log_impl(&dword_1CA650000, v1, OS_LOG_TYPE_DEFAULT, "SGUnarchiver: archive_read unable to set supported formats - %{public}s.", (uint8_t *)&v8, 0xCu);
    }

LABEL_6:
    if (archive_read_free())
    {
      uint64_t v2 = sgLogHandle();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = archive_error_string();
        int v8 = 136446210;
        uint64_t v9 = v7;
        _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v8, 0xCu);
      }
    }
    return 0;
  }
  int support_filter_all = archive_read_support_filter_all();
  if (support_filter_all != -20)
  {
    int v5 = support_filter_all;
    if (support_filter_all)
    {
      uint64_t v6 = sgLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136446210;
        uint64_t v9 = archive_error_string();
        _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_read unable to set supported compression formats - %{public}s.", (uint8_t *)&v8, 0xCu);
      }

      if (v5) {
        goto LABEL_6;
      }
    }
  }
  return v0;
}

uint64_t SGZipUnarchive(uint64_t a1, void *a2)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v63 = *MEMORY[0x1E4F28330];
  v64[0] = &unk_1F2535EF8;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 forKeys:&v63 count:1];
  v58[0] = 0;
  char v5 = [v3 createDirectoryAtURL:v2 withIntermediateDirectories:0 attributes:v4 error:v58];
  uint64_t v6 = v58[0];

  if ((v5 & 1) == 0)
  {
    uint64_t v7 = [v6 domain];
    if ([v7 isEqualToString:*MEMORY[0x1E4F281F8]])
    {
      uint64_t v8 = [v6 code];

      if (v8 == 516) {
        goto LABEL_4;
      }
    }
    else
    {
    }
    int v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v60 = (uint64_t)v2;
      __int16 v61 = 2112;
      size_t v62 = (size_t)v6;
      _os_log_error_impl(&dword_1CA650000, v12, OS_LOG_TYPE_ERROR, "SGUnarchiver: failed to create directory at %@ - %@.", buf, 0x16u);
    }

    goto LABEL_17;
  }
LABEL_4:

  if (!archive_write_disk_new())
  {
LABEL_19:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  if (archive_write_disk_set_standard_lookup())
  {
    uint64_t v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    uint64_t v10 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = v10;
    uint64_t v11 = "SGUnarchiver: archive_write_disk unable to set lookup functions - %{public}s.";
    goto LABEL_65;
  }
  if (!archive_write_disk_set_options())
  {
    sqlite3_int64 v15 = [v2 path];
    if (v15)
    {
      uint64_t v6 = v15;
      unint64_t v17 = realpath_DARWIN_EXTSN((const char *)[v6 fileSystemRepresentation], 0);
      if (v17)
      {
        char v18 = v17;
        uint64_t v19 = [[NSString alloc] initWithUTF8String:v17];

        free(v18);
        uint64_t v6 = v19;
      }
      else
      {
        int v20 = sgLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          unint64_t v55 = __error();
          char v56 = strerror(*v55);
          *(_DWORD *)buf = 138412546;
          uint64_t v60 = (uint64_t)v6;
          __int16 v61 = 2080;
          size_t v62 = (size_t)v56;
          _os_log_error_impl(&dword_1CA650000, v20, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to resolve physical path for destination path %@ - %s.", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(void *)&long long v16 = 134218240;
    long long v57 = v16;
    while (1)
    {
      int next_header = archive_read_next_header();
      if (next_header) {
        break;
      }
      int v22 = archive_entry_filetype();
      char v23 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v24 = archive_entry_pathname_utf8();
      if (!v24)
      {
        unint64_t v45 = sgLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1CA650000, v45, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with no path encountered.", buf, 2u);
        }

LABEL_74:
        goto LABEL_53;
      }
      unsigned int v25 = (const char *)v24;
      uint64_t v26 = 0;
      do
      {
        unint64_t v27 = v26;
        int v28 = (v26++)[v24];
      }
      while (v28 == 47);
      if (v27)
      {
        uint64_t v29 = sgLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          size_t v35 = strlen(v25);
          *(_DWORD *)buf = v57;
          uint64_t v60 = (uint64_t)v27;
          __int16 v61 = 2048;
          size_t v62 = v35;
          _os_log_error_impl(&dword_1CA650000, v29, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with absolute path encountered...ignoring leading %zu of %zu bytes.", buf, 0x16u);
        }
      }
      uint64_t v30 = (void *)[[NSString alloc] initWithUTF8String:&v27[(void)v25]];
      uint64_t v31 = [v30 length];
      if (!v31 && v22 != 0x4000)
      {
        char v46 = sgLogHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1CA650000, v46, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with no path after sanitization encountered.", buf, 2u);
        }

        goto LABEL_74;
      }
      unsigned int v32 = -[NSObject stringByAppendingPathComponent:](v6, "stringByAppendingPathComponent:", v30, v57);

      id v33 = v32;
      [v33 fileSystemRepresentation];
      archive_entry_update_pathname_utf8();

      archive_entry_perm();
      archive_entry_set_perm();
      if (v31)
      {
        if (archive_write_header())
        {
          char v51 = sgLogHandle();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v47 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            uint64_t v60 = v47;
            unsigned int v48 = "SGUnarchiver: archive_write_header failed - %{public}s.";
            goto LABEL_79;
          }
LABEL_80:

          goto LABEL_53;
        }
        if (!archive_entry_size_is_set() || archive_entry_size() >= 1)
        {
          do
          {
            memset(&v58[1], 0, 24);
            data_blocuint64_t k = archive_read_data_block();
            if (data_block)
            {
              if (data_block == 1) {
                goto LABEL_47;
              }
              unsigned int v38 = sgLogHandle();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                uint64_t v36 = archive_error_string();
                *(_DWORD *)buf = 136446210;
                uint64_t v60 = v36;
                char v37 = "SGUnarchiver: archive_read_data_block failed - %{public}s.";
                goto LABEL_82;
              }
              goto LABEL_52;
            }
          }
          while ((archive_write_data_block() & 0x8000000000000000) == 0);
          unsigned int v38 = sgLogHandle();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            uint64_t v54 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            uint64_t v60 = v54;
            char v37 = "SGUnarchiver: archive_write_data_block failed - %{public}s.";
            goto LABEL_82;
          }
LABEL_52:

LABEL_53:
          uint64_t v13 = 0;
          goto LABEL_54;
        }
LABEL_47:
        if (archive_write_finish_entry())
        {
          char v51 = sgLogHandle();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v53 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            uint64_t v60 = v53;
            unsigned int v48 = "SGUnarchiver: archive_write_finish_entry failed - %{public}s.";
LABEL_79:
            _os_log_impl(&dword_1CA650000, v51, OS_LOG_TYPE_DEFAULT, v48, buf, 0xCu);
          }
          goto LABEL_80;
        }
      }
    }
    if (next_header != 1)
    {
      unsigned int v38 = sgLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = v44;
        char v37 = "SGUnarchiver: archive_read_next_header failed - %{public}s.";
LABEL_82:
        _os_log_error_impl(&dword_1CA650000, v38, OS_LOG_TYPE_ERROR, v37, buf, 0xCu);
      }
      goto LABEL_52;
    }
    uint64_t v13 = 1;
LABEL_54:
    if (archive_write_close())
    {
      unint64_t v40 = sgLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = v49;
        _os_log_error_impl(&dword_1CA650000, v40, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_write_disk - %{public}s.", buf, 0xCu);
      }

      uint64_t v13 = 0;
    }
    if (archive_write_free())
    {
      char v41 = sgLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v50 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        uint64_t v60 = v50;
        _os_log_error_impl(&dword_1CA650000, v41, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_write_disk (leaking) - %{public}s.", buf, 0xCu);
      }
    }
    goto LABEL_18;
  }
  uint64_t v9 = sgLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v43 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = v43;
    uint64_t v11 = "SGUnarchiver: archive_write_disk unable to set options - %{public}s.";
LABEL_65:
    _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_14:

  if (!archive_write_free()) {
    goto LABEL_19;
  }
  uint64_t v6 = sgLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v42 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = v42;
    _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_write_disk (leaking) - %{public}s.", buf, 0xCu);
  }
LABEL_17:
  uint64_t v13 = 0;
LABEL_18:

LABEL_20:
  return v13;
}

uint64_t SGUnarchiverZip(NSData *a1, NSURL *a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = a2;
  char v5 = v3;
  uint64_t v6 = [(NSData *)v5 bytes];
  unint64_t v7 = [(NSData *)v5 length];

  uint64_t v8 = SGUnarchiverZip(v6, v7, v4);
  return v8;
}

uint64_t SGUnarchiverZip(const void *a1, unint64_t a2, NSURL *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  char v5 = v4;
  uint64_t v6 = 0;
  if (!a1 || !v4) {
    goto LABEL_17;
  }
  uint64_t Archive = SGCreateReadArchive();
  if (!Archive)
  {
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  uint64_t v8 = Archive;
  if (archive_read_open_memory())
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136446210;
      uint64_t v14 = archive_error_string();
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to open archive_read - %{public}s.", (uint8_t *)&v13, 0xCu);
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = SGZipUnarchive(v8, v5);
    if (!archive_read_close()) {
      goto LABEL_13;
    }
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136446210;
      uint64_t v14 = archive_error_string();
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_read - %{public}s.", (uint8_t *)&v13, 0xCu);
    }
  }

LABEL_13:
  if (archive_read_free())
  {
    uint64_t v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = archive_error_string();
      int v13 = 136446210;
      uint64_t v14 = v12;
      _os_log_fault_impl(&dword_1CA650000, v10, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v13, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
LABEL_17:

  return v6;
}

void sub_1CA7B5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Block_object_dispose((const void *)(v37 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24033(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__24034(uint64_t a1)
{
}

id patterns_24035()
{
  if (patterns_onceToken_24045 != -1) {
    dispatch_once(&patterns_onceToken_24045, &__block_literal_global_24046);
  }
  uint64_t v0 = (void *)patterns_patterns_24047;
  return v0;
}

uint64_t __patterns_block_invoke_24050()
{
  patterns_patterns_24047 = +[SGPatterns patternsForIdentifier:@"SGMailQuoteDissector"];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA7B6E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B6FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24105(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__24106(uint64_t a1)
{
}

void sub_1CA7B7418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B77A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B7950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B7AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B7C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7B898C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _createITSListForFTSQuery(void *a1)
{
  id v1 = a1;
  uint64_t v2 = ITSTokenListCreate();
  uint64_t v3 = v2;
  if (v1 && v2)
  {
    if (_createITSListForFTSQuery__pasOnceToken3 != -1) {
      dispatch_once(&_createITSListForFTSQuery__pasOnceToken3, &__block_literal_global_24396);
    }
    id v4 = (id)_createITSListForFTSQuery__pasExprOnceResult;
    char v5 = [v4 result];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = ___createITSListForFTSQuery_block_invoke_3;
    _OWORD v7[3] = &unk_1E65BA0D8;
    id v9 = v1;
    id v8 = v1;
    uint64_t v10 = v3;
    [v5 runWithLockAcquired:v7];
  }
  return v3;
}

void ___createITSListForFTSQuery_block_invoke_3(uint64_t a1, void *a2)
{
  tokenizer = a2;
  CFStringRef v3 = *(const __CFString **)(a1 + 40);
  v6.length = [*(id *)(a1 + 32) length];
  v6.id location = 0;
  CFStringTokenizerSetString(tokenizer, v3, v6);
  ITSTokenListPopulateFromString();
  v7.id location = 0;
  v7.length = 1;
  CFStringTokenizerSetString(tokenizer, @"⌘", v7);
  CFRelease(tokenizer);
}

void ___createITSListForFTSQuery_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_58 idleTimeout:1.0];
  uint64_t v2 = (void *)_createITSListForFTSQuery__pasExprOnceResult;
  _createITSListForFTSQuery__pasExprOnceResult = v1;
}

id ___createITSListForFTSQuery_block_invoke_2()
{
  v6.id location = 0;
  v6.length = 0;
  CFStringTokenizerRef v0 = CFStringTokenizerCreate(0, 0, v6, 0x810000uLL, 0);
  if (!v0)
  {
    CFStringRef v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"ITSTokenListRef _createITSListForFTSQuery(NSString *__strong)_block_invoke_2"];
    [v3 handleFailureInFunction:v4, @"SGTokenizer.m", 111, @"Invalid parameter not satisfying: %@", @"tokenizer" file lineNumber description];
  }
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x1E4F93B70]) initWithGuardedData:v0];

  return v1;
}

void sub_1CA7BBA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t __Block_byref_object_copy__24531(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__24532(uint64_t a1)
{
}

void sub_1CA7BCF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BD2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BDA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BE28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BF1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BF488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BF73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7BFE98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7C036C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7C04EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getHKHealthStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!HealthKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __HealthKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E65BA2D8;
    uint64_t v8 = 0;
    HealthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HealthKitLibraryCore_frameworkLibrary)
  {
    CFStringRef v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *HealthKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGDetectedAttributeDissector.m", 73, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("HKHealthStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x1E4F28B00] currentHandler];
    char v5 = [NSString stringWithUTF8String:"Class getHKHealthStoreClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGDetectedAttributeDissector.m", 74, @"Unable to find class %s", "HKHealthStore");

LABEL_10:
    __break(1u);
  }
  getHKHealthStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HealthKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HealthKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1CA7C0A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24821(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__24822(uint64_t a1)
{
}

id regex2ForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[SGDetectedAttributeDissector patterns];
  CFStringRef v3 = [v2 regex2ForKey:v1];

  return v3;
}

id textToMatch(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v7 = a3;
  if (a4 >= 4)
  {
    int v22 = [MEMORY[0x1E4F28B00] currentHandler];
    char v23 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *textToMatch(long, long, NSString *__strong, SGDataDetectorMatchType)");
    [v22 handleFailureInFunction:v23, @"SGDetectedAttributeDissector.m", 125, @"Invalid parameter not satisfying: %@", @"type == SGDDMatchPhone || type == SGDDMatchPostalAddress || type == SGDDMatchEmailAddress || type == SGDDMatchDate" file lineNumber description];
  }
  uint64_t v8 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v9 = 100;
  if (a1 > 100) {
    uint64_t v9 = a1;
  }
  uint64_t v10 = objc_msgSend(v7, "substringWithRange:", v9 - 100, a1 - (v9 - 100));
  unint64_t v11 = [v7 length];
  unint64_t v12 = a2 + 100;
  if (v11 < a2 + 100) {
    unint64_t v12 = v11;
  }
  int v13 = objc_msgSend(v7, "substringWithRange:", a2, v12 - a2);
  if (a4 > 3) {
    uint64_t v14 = @"%WRONG_MATCH_TYPE";
  }
  else {
    uint64_t v14 = off_1E65BA2F0[a4];
  }
  uint64_t v15 = (objc_class *)NSString;
  id v16 = v10;
  id v17 = [v15 alloc];
  char v18 = _PASNormalizeUnicodeString();

  uint64_t v19 = _PASNormalizeUnicodeString();
  int v20 = (void *)[v17 initWithFormat:@"%@%@%@", v18, v14, v19];

  return v20;
}

void sub_1CA7C38D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1CA7C4794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1CA7C5ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL attributionRegexpMatches(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = regex2ForKey(a1);
  char v5 = [v4 existsInString:v3];

  if (v5) {
    +[SGAggregateLogging reMatched:v5];
  }

  return v5 != 0;
}

BOOL attributionPatternMatches(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9 = a3;
  id v10 = a2;
  id v11 = a1;
  uint64_t v12 = [v11 rangeOfString:a4 options:2];
  uint64_t v14 = textToMatch(v12, v12 + v13, v11, a5);

  BOOL v15 = attributionRegexpMatches(v10, v14);
  if (v15) {
    BOOL v15 = !attributionRegexpMatches(v9, v14);
  }

  return v15;
}

id patterns_25310()
{
  if (patterns_onceToken_25314 != -1) {
    dispatch_once(&patterns_onceToken_25314, &__block_literal_global_25315);
  }
  CFStringTokenizerRef v0 = (void *)patterns_patterns_25316;
  return v0;
}

uint64_t __patterns_block_invoke_25319()
{
  patterns_patterns_25316 = +[SGPatterns patternsForClass:objc_opt_class()];
  return MEMORY[0x1F41817F8]();
}

double re2::PrefilterTree::PrefilterTree(re2::PrefilterTree *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  return result;
}

void re2::PrefilterTree::~PrefilterTree(re2::PrefilterTree *this)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v2 = *((void *)this + 10);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      char v5 = *(re2::Prefilter **)(v3 + 8 * v4);
      if (v5)
      {
        re2::Prefilter::~Prefilter(v5);
        MEMORY[0x1CB79A8C0]();
        uint64_t v3 = *((void *)this + 9);
        uint64_t v2 = *((void *)this + 10);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v7 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  if (v6 != *(void *)this)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 8;
    do
    {
      uint64_t v10 = *(void *)(v7 + v9);
      if (v10)
      {
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(void **)(v10 + 8));
        MEMORY[0x1CB79A8C0](v10, 0x1020C4062D53EE8);
        uint64_t v7 = *(void *)this;
        uint64_t v6 = *((void *)this + 1);
      }
      ++v8;
      v9 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) > v8);
  }
  id v11 = (void *)*((void *)this + 12);
  if (v11)
  {
    *((void *)this + 13) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 9);
  if (v12)
  {
    *((void *)this + 1re2::Compiler::Compile(this, 0) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 6);
  if (v13)
  {
    *((void *)this + 7) = v13;
    operator delete(v13);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 4));
  uint64_t v14 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v15 = *((void *)this + 1);
    id v16 = *(void **)this;
    if (v15 != v14)
    {
      do
      {
        id v17 = *(void **)(v15 - 24);
        if (v17)
        {
          *(void *)(v15 - 16) = v17;
          operator delete(v17);
        }
        v15 -= 40;
      }
      while (v15 != v14);
      id v16 = *(void **)this;
    }
    *((void *)this + 1) = v14;
    operator delete(v16);
  }
}

void re2::PrefilterTree::Add(re2::PrefilterTree *this, re2::Prefilter *a2, int a3)
{
  if (*((unsigned char *)this + 120))
  {
    LOBYTE(v24) = 0;
    uint64_t v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Add after Compile.", 18);
    LogMessage::~LogMessage(&v24);
  }
  else
  {
    unint64_t v4 = a2;
    if (a2 && !re2::KeepPart((BOOL)a2, 0, a3))
    {
      re2::Prefilter::~Prefilter(v4);
      MEMORY[0x1CB79A8C0]();
      unint64_t v4 = 0;
    }
    uint64_t v7 = (char *)*((void *)this + 10);
    unint64_t v6 = *((void *)this + 11);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = (char *)*((void *)this + 9);
      uint64_t v10 = (v7 - v9) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v14 = operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (re2::Prefilter **)&v14[8 * v10];
      id v16 = &v14[8 * v13];
      *uint64_t v15 = v4;
      unint64_t v8 = v15 + 1;
      if (v7 == v9)
      {
        uint64_t v9 = v7;
      }
      else
      {
        unint64_t v17 = v7 - v9 - 8;
        if (v17 < 0x58) {
          goto LABEL_35;
        }
        if ((unint64_t)(v9 - v14) < 0x20) {
          goto LABEL_35;
        }
        uint64_t v18 = (v17 >> 3) + 1;
        uint64_t v19 = &v14[8 * v10 - 16];
        int v20 = v7 - 16;
        uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *uint64_t v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v7 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          do
          {
            char v23 = (re2::Prefilter *)*((void *)v7 - 1);
            v7 -= 8;
            *--uint64_t v15 = v23;
          }
          while (v7 != v9);
          uint64_t v9 = (char *)*((void *)this + 9);
        }
      }
      *((void *)this + 9) = v15;
      *((void *)this + 1re2::Compiler::Compile(this, 0) = v8;
      *((void *)this + 11) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)uint64_t v7 = v4;
      unint64_t v8 = v7 + 8;
    }
    *((void *)this + 1re2::Compiler::Compile(this, 0) = v8;
  }
}

void sub_1CA7C8A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL re2::KeepPart(BOOL this, re2::Prefilter *a2, int a3)
{
  if (this)
  {
    uint64_t v3 = this;
    int v4 = *(_DWORD *)this;
    this = 0;
    switch(v4)
    {
      case 0:
        return this;
      case 2:
        if (*(char *)(v3 + 39) < 0) {
          unint64_t v5 = *(void *)(v3 + 24);
        }
        else {
          unint64_t v5 = *(unsigned __int8 *)(v3 + 39);
        }
        return v5 >= re2::FLAGS_filtered_re2_min_atom_len;
      case 3:
        unint64_t v6 = *(re2 ****)(v3 + 8);
        uint64_t v7 = v6[1];
        if (v7 == *v6)
        {
          int v9 = 0;
          unint64_t v12 = v7 - *v6;
          unint64_t v11 = v6[1];
        }
        else
        {
          unint64_t v8 = 0;
          int v9 = 0;
          uint64_t v10 = (re2::Prefilter *)(a2 + 1);
          uint64_t v7 = *v6;
          do
          {
            int v13 = re2::KeepPart(v7[v8], v10, a3);
            uint64_t v14 = (*v6)[v8];
            if (v13)
            {
              (*v6)[v9++] = v14;
            }
            else if (v14)
            {
              re2::Prefilter::~Prefilter(v14);
              MEMORY[0x1CB79A8C0]();
            }
            ++v8;
            uint64_t v7 = *v6;
            unint64_t v11 = v6[1];
            unint64_t v12 = v11 - *v6;
          }
          while (v12 > v8);
        }
        int v20 = v9;
        unint64_t v21 = v9 - v12;
        if (v9 <= v12)
        {
          if (v9 >= v12) {
            return v20 > 0;
          }
          int v28 = &v7[v9];
        }
        else
        {
          long long v22 = v6[2];
          if (v21 > v22 - v11)
          {
            uint64_t v23 = v11 - v7;
            unint64_t v24 = v23 + v21;
            if ((v23 + v21) >> 61) {
              std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = (char *)v22 - (char *)v7;
            if (v25 >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              if (v26 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v27 = operator new(8 * v26);
            }
            else
            {
              unint64_t v27 = 0;
            }
            uint64_t v29 = &v27[8 * v23];
            size_t v30 = 8 * v21;
            uint64_t v31 = (re2 **)&v27[8 * v26];
            bzero(v29, v30);
            unsigned int v32 = (re2 **)&v29[v30];
            if (v11 == v7) {
              goto LABEL_48;
            }
            unint64_t v33 = (char *)v11 - (char *)v7 - 8;
            if (v33 >= 0x58)
            {
              if ((unint64_t)((char *)v7 - v27) >= 0x20)
              {
                uint64_t v35 = (v33 >> 3) + 1;
                unint64_t v34 = &v11[-(v35 & 0x3FFFFFFFFFFFFFFCLL)];
                uint64_t v36 = &v27[8 * v23 - 16];
                uint64_t v37 = v11 - 2;
                uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v39 = *(_OWORD *)v37;
                  *(v36 - 1) = *((_OWORD *)v37 - 1);
                  *uint64_t v36 = v39;
                  v36 -= 2;
                  v37 -= 4;
                  v38 -= 4;
                }
                while (v38);
                v29 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
                if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_48;
                }
              }
              else
              {
                unint64_t v34 = v11;
              }
            }
            else
            {
              unint64_t v34 = v11;
            }
            do
            {
              uint64_t v40 = (uint64_t)*--v34;
              *((void *)v29 - 1) = v40;
              v29 -= 8;
            }
            while (v34 != v7);
            uint64_t v7 = *v6;
LABEL_48:
            *unint64_t v6 = (re2 **)v29;
            v6[1] = v32;
            v6[2] = v31;
            if (v7) {
              operator delete(v7);
            }
            return v20 > 0;
          }
          bzero(v11, 8 * v21);
          int v28 = &v11[v21];
        }
        v6[1] = v28;
        return v20 > 0;
      case 4:
        unint64_t v15 = 0;
        id v16 = (re2::Prefilter *)(a2 + 1);
        while (1)
        {
          uint64_t v17 = **(void **)(v3 + 8);
          unint64_t v18 = (*(void *)(*(void *)(v3 + 8) + 8) - v17) >> 3;
          this = v18 <= v15;
          if (v18 <= v15) {
            break;
          }
          if ((re2::KeepPart(*(re2 **)(v17 + 8 * v15), v16, a3) & 1) == 0) {
            return 0;
          }
          ++v15;
          if ((*(_DWORD *)v3 - 3) >= 2)
          {
            LogMessage::LogMessage((LogMessage *)&v41, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
            LogMessage::Flush((LogMessage *)&v41);
            abort();
          }
        }
        return this;
      default:
        LOBYTE(v41) = 0;
        uint64_t v19 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unexpected op in KeepPart: ", 27);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v41);
        return 0;
    }
  }
  return this;
}

void sub_1CA7C8DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::PrefilterTree::CanonicalNode(re2::PrefilterTree *this, re2::Prefilter *a2)
{
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  re2::PrefilterTree::NodeString(a2, &__p);
  unint64_t v6 = (char *)*((void *)this + 4);
  int v4 = (char *)this + 32;
  unint64_t v5 = v6;
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v6)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v9 = v4;
    do
    {
      int v10 = v5[55];
      if (v10 >= 0) {
        size_t v11 = v5[55];
      }
      else {
        size_t v11 = *((void *)v5 + 5);
      }
      if (v10 >= 0) {
        unint64_t v12 = v5 + 32;
      }
      else {
        unint64_t v12 = (const void *)*((void *)v5 + 4);
      }
      if (size >= v11) {
        size_t v13 = v11;
      }
      else {
        size_t v13 = size;
      }
      int v14 = memcmp(v12, p_p, v13);
      BOOL v15 = v11 < size;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      BOOL v16 = !v15;
      if (v15) {
        uint64_t v17 = (char **)(v5 + 8);
      }
      else {
        uint64_t v17 = (char **)v5;
      }
      if (v16) {
        int v9 = v5;
      }
      unint64_t v5 = *v17;
    }
    while (*v17);
    if (v9 != v4)
    {
      int v18 = v9[55];
      std::string::size_type v19 = v18 >= 0 ? v9[55] : *((void *)v9 + 5);
      int v20 = v18 >= 0 ? v9 + 32 : (char *)*((void *)v9 + 4);
      size_t v21 = v19 >= size ? size : v19;
      int v22 = memcmp(p_p, v20, v21);
      BOOL v23 = size < v19;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (!v23)
      {
        uint64_t v24 = *((void *)v9 + 7);
        if ((v7 & 0x80) == 0) {
          return v24;
        }
        goto LABEL_40;
      }
    }
  }
  uint64_t v24 = 0;
  if (v7 < 0) {
LABEL_40:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v24;
}

void re2::PrefilterTree::NodeString(re2::Prefilter *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v5 = *(_DWORD *)a1;
  int v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)__str = 0u;
  long long v39 = 0u;
  snprintf(__str, 0x64uLL, "%d", v5);
  size_t v6 = strlen(__str);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __str, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  size_t v11 = std::string::append(&__dst, ":");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)a1 != 2)
  {
    if ((*(_DWORD *)a1 - 3) > 1) {
      goto LABEL_59;
    }
    uint64_t v19 = **((void **)a1 + 1);
    if (*(void *)(*((void *)a1 + 1) + 8) == v19) {
      return;
    }
    int v20 = *(_DWORD *)(*(void *)v19 + 40);
    int v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    *(_OWORD *)__str = 0u;
    long long v39 = 0u;
    snprintf(__str, 0x64uLL, "%d", v20);
    size_t v21 = strlen(__str);
    if (v21 > 0x7FFFFFFFFFFFFFF7) {
LABEL_60:
    }
      std::string::__throw_length_error[abi:ne180100]();
    std::string::size_type v22 = v21;
    if (v21 >= 0x17)
    {
      uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v24 = v21 | 7;
      }
      uint64_t v25 = v24 + 1;
      BOOL v23 = (std::string *)operator new(v24 + 1);
      __dst.__r_.__value_.__l.__size_ = v22;
      __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
      BOOL v23 = &__dst;
      if (!v21)
      {
LABEL_29:
        v23->__r_.__value_.__s.__data_[v22] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v26 = &__dst;
        }
        else {
          unint64_t v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        std::string::append(a2, (const std::string::value_type *)v26, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)a1 - 3) <= 1)
        {
          unint64_t v28 = 1;
          do
          {
            if (v28 >= (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 3) {
              return;
            }
            std::string::push_back(a2, 44);
            if ((*(_DWORD *)a1 - 3) >= 2)
            {
              LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
              LogMessage::Flush((LogMessage *)__str);
              abort();
            }
            int v29 = *(_DWORD *)(*(void *)(**((void **)a1 + 1) + 8 * v28) + 40);
            int v44 = 0;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            *(_OWORD *)__str = 0u;
            long long v39 = 0u;
            snprintf(__str, 0x64uLL, "%d", v29);
            size_t v30 = strlen(__str);
            if (v30 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_60;
            }
            std::string::size_type v31 = v30;
            if (v30 >= 0x17)
            {
              uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v33 = v30 | 7;
              }
              uint64_t v34 = v33 + 1;
              unsigned int v32 = (std::string *)operator new(v33 + 1);
              __dst.__r_.__value_.__l.__size_ = v31;
              __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
              unsigned int v32 = &__dst;
              if (!v30) {
                goto LABEL_50;
              }
            }
            memcpy(v32, __str, v31);
LABEL_50:
            v32->__r_.__value_.__s.__data_[v31] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v35 = &__dst;
            }
            else {
              uint64_t v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v36 = __dst.__r_.__value_.__l.__size_;
            }
            std::string::append(a2, (const std::string::value_type *)v35, v36);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            ++v28;
          }
          while ((*(_DWORD *)a1 - 3) < 2);
        }
LABEL_59:
        LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)__str);
        abort();
      }
    }
    memcpy(v23, __str, v22);
    goto LABEL_29;
  }
  BOOL v15 = (const std::string::value_type *)*((void *)a1 + 2);
  int v14 = (char *)a1 + 16;
  size_t v13 = v15;
  int v16 = v14[23];
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = v14[23];
  }
  else {
    std::string::size_type v18 = *((void *)v14 + 1);
  }
  std::string::append(a2, v17, v18);
}

void sub_1CA7C93B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void re2::PrefilterTree::PrintPrefilter(re2::PrefilterTree *this, int a2)
{
  LOBYTE(v7) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  re2::PrefilterTree::DebugNodeString(this, *(re2::Prefilter **)(*((void *)this + 9) + 8 * a2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LogMessage::~LogMessage(&v7);
}

void sub_1CA7C94D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

std::string *re2::PrefilterTree::DebugNodeString@<X0>(re2::PrefilterTree *this@<X0>, re2::Prefilter *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a2 != 2)
  {
    if (*(_DWORD *)a2 == 3) {
      size_t v11 = "AND";
    }
    else {
      size_t v11 = "OR";
    }
    std::string::append(a3, v11);
    std::string::append(a3, "(");
    if ((*(_DWORD *)a2 - 3) > 1) {
      goto LABEL_70;
    }
    uint64_t v12 = **((void **)a2 + 1);
    if (*(void *)(*((void *)a2 + 1) + 8) == v12) {
      return std::string::append(a3, ")");
    }
    int v13 = *(_DWORD *)(*(void *)v12 + 40);
    int v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    *(_OWORD *)__str = 0u;
    long long v36 = 0u;
    snprintf(__str, 0x64uLL, "%d", v13);
    size_t v14 = strlen(__str);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
LABEL_72:
    }
      std::string::__throw_length_error[abi:ne180100]();
    std::string::size_type v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v15;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_22:
        p_dst[v15] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &__dst;
        }
        else {
          uint64_t v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v19, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::string::append(a3, ":");
        if ((*(_DWORD *)a2 - 3) > 1)
        {
LABEL_71:
          LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
          LogMessage::Flush((LogMessage *)__str);
          abort();
        }
        re2::PrefilterTree::DebugNodeString((uint64_t *)&__dst, this, ***((re2::Prefilter ****)a2 + 1));
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v21 = &__dst;
        }
        else {
          size_t v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v21, v22);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)a2 - 3) <= 1)
        {
          unint64_t v23 = 1;
          while (1)
          {
            if (v23 >= (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 3) {
              return std::string::append(a3, ")");
            }
            std::string::push_back(a3, 44);
            if ((*(_DWORD *)a2 - 3) >= 2)
            {
              LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
              LogMessage::Flush((LogMessage *)__str);
              abort();
            }
            int v24 = *(_DWORD *)(*(void *)(**((void **)a2 + 1) + 8 * v23) + 40);
            int v41 = 0;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            *(_OWORD *)__str = 0u;
            long long v36 = 0u;
            snprintf(__str, 0x64uLL, "%d", v24);
            size_t v25 = strlen(__str);
            if (v25 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_72;
            }
            std::string::size_type v26 = v25;
            if (v25 >= 0x17) {
              break;
            }
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25;
            unint64_t v27 = &__dst;
            if (v25) {
              goto LABEL_51;
            }
LABEL_52:
            v27[v26] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v30 = &__dst;
            }
            else {
              size_t v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v31 = __dst.__r_.__value_.__l.__size_;
            }
            std::string::append(a3, (const std::string::value_type *)v30, v31);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            std::string::append(a3, ":");
            if ((*(_DWORD *)a2 - 3) >= 2) {
              goto LABEL_71;
            }
            re2::PrefilterTree::DebugNodeString((uint64_t *)&__dst, this, *(re2::Prefilter **)(**((void **)a2 + 1) + 8 * v23));
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v32 = &__dst;
            }
            else {
              unsigned int v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v33 = __dst.__r_.__value_.__l.__size_;
            }
            std::string::append(a3, (const std::string::value_type *)v32, v33);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            ++v23;
            if ((*(_DWORD *)a2 - 3) >= 2) {
              goto LABEL_70;
            }
          }
          uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17) {
            uint64_t v28 = v25 | 7;
          }
          uint64_t v29 = v28 + 1;
          unint64_t v27 = operator new(v28 + 1);
          __dst.__r_.__value_.__l.__size_ = v26;
          __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
LABEL_51:
          memcpy(v27, __str, v26);
          goto LABEL_52;
        }
LABEL_70:
        LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)__str);
        abort();
      }
    }
    memcpy(p_dst, __str, v15);
    goto LABEL_22;
  }
  int v5 = (char *)a2 + 16;
  int v6 = *((char *)a2 + 39);
  if (v6 >= 0) {
    std::string::size_type v7 = (char *)a2 + 16;
  }
  else {
    std::string::size_type v7 = (const std::string::value_type *)*((void *)a2 + 2);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v5[23];
  }
  else {
    std::string::size_type v8 = *((void *)v5 + 1);
  }
  return std::string::append(a3, v7, v8);
}

void sub_1CA7C99DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void fastIncrementBy(atomic_uint *a1, unsigned int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a2 && !atomic_fetch_add(a1, a2))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 3221225472;
    size_t v14 = __fastIncrementBy_block_invoke;
    std::string::size_type v15 = &unk_1E65BF1A8;
    uint64_t v19 = a1;
    id v16 = 0;
    id v17 = v7;
    id v18 = v8;
    uint64_t v9 = (void *)MEMORY[0x1CB79B4C0](&v12);
    uint64_t v10 = (void *)MEMORY[0x1E4F93B18];
    size_t v11 = dispatch_get_global_queue(-32768, 0);
    objc_msgSend(v10, "runAsyncOnQueue:afterDelaySeconds:block:", v11, v9, 1.0, v12, v13, v14, v15);
  }
}

uint64_t __fastIncrementBy_block_invoke(uint64_t a1)
{
  return +[SGAggregateLogging incrementKeyWithDomain:*(void *)(a1 + 32) subdomain:*(void *)(a1 + 40) suffix:*(void *)(a1 + 48) by:(int)atomic_exchange(*(atomic_uint *volatile *)(a1 + 56), 0)];
}

uint64_t SGEntityTypeToContactDetailType(uint64_t a1)
{
  if ((SGEntityTypeIsContactDetail() & 1) == 0)
  {
    int v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"SGContactDetailType SGEntityTypeToContactDetailType(SGEntityType)"];
    [v6 handleFailureInFunction:v7, @"SGContactDetail.m", 86, @"Invalid parameter not satisfying: %@", @"SGEntityTypeIsContactDetail(entityType)" file lineNumber description];
  }
  uint64_t v2 = a1 - 6;
  if (unint64_t)(a1 - 6) < 0x12 && ((0x2E23Fu >> v2)) {
    return qword_1CA8D0C90[v2];
  }
  uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
  int v4 = [NSString stringWithUTF8String:"SGContactDetailType SGEntityTypeToContactDetailType(SGEntityType)"];
  [v3 handleFailureInFunction:v4 file:@"SGContactDetail.m" lineNumber:113 description:@"This should never happen. The param assert should hit if this is the case."];

  return -1;
}

__CFString *SGContactDetailTypeDescription(unint64_t a1)
{
  if (a1 < 7) {
    return off_1E65BA4B8[a1];
  }
  uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
  int v4 = [NSString stringWithUTF8String:"NSString * _Nonnull SGContactDetailTypeDescription(SGContactDetailType)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGContactDetail.m", 40, @"Unknown contact detail type: %lu", a1);

  return 0;
}

uint64_t SGContactDetailTypeToEntityTypes(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_1CA8D0C58[a1];
  }
}

void sub_1CA7D0718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA7D13E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1CA7D1778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7D1CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA7D1E10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7D2A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26503(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__26504(uint64_t a1)
{
}

void sub_1CA7D3004(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7D3AC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7D3D80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7D44E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA7D7190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26827(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__26828(uint64_t a1)
{
}

void sub_1CA7D72FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7D9E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DA0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DA53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26977(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__26978(uint64_t a1)
{
}

void sub_1CA7DA7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DAF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DC1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DC7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DC960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DD59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DD840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DDF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DE62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7DF6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E1DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E24E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E43E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E48C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E4D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E5458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E5594(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E56E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E5818(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E58DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E5BDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E5DEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7E63E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E6BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  if (a2 == 1)
  {
    uint64_t v9 = [objc_begin_catch(exception_object) userInfo];
    uint64_t v10 = [v9 objectForKeyedSubscript:@"sqliteCode"];
    [v10 isEqual:&unk_1F2536000];

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _moveOrRemoveDbFile(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v11 = 0;
  int v6 = [v5 moveItemAtPath:v3 toPath:v4 error:&v11];
  id v7 = v11;

  id v8 = sgLogHandle();
  uint64_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_INFO, "Corrupt database file moved to \"%@\".", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [v7 localizedDescription];
      *(_DWORD *)buf = 138412546;
      id v13 = v4;
      __int16 v14 = 2112;
      std::string::size_type v15 = v10;
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "Unable to move corrupt database file to \"%@\": %@", buf, 0x16u);
    }
    uint64_t v9 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v9 removeItemAtPath:v3 error:0];
  }
}

void sub_1CA7E7FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7E849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SGMurmurhashString(void *a1, uint64_t a2, uint64_t *a3)
{
  CFStringRef theString = a1;
  CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  [(__CFString *)theString length];
  if (!CStringPtr)
  {
    CFDataRef v5 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF90], theString, 0x8000100u, 0);
    [(__CFData *)v5 bytes];
    [(__CFData *)v5 length];
  }
  *a3 = _PASMurmur3_x86_128();
  a3[1] = v6;
}

void sub_1CA7EB750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27714(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__27715(uint64_t a1)
{
}

void sub_1CA7EC3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EC508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EEB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EEEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EF060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EF3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EF524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7EF66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F15B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F4114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F42FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F44E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F4688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F8204(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA7F82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F84D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA7F9EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA7FAC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

void addAddressResultsToComponents(uint64_t a1, void *a2)
{
  id v16 = a2;
  uint64_t SubResults = DDResultGetSubResults();
  CFArrayRef v3 = (const __CFArray *)SubResults;
  if (addAddressResultsToComponents_subTypesToKeysDictionary)
  {
    if (!SubResults) {
      goto LABEL_12;
    }
  }
  else
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", @"Contact", *MEMORY[0x1E4F28940], @"ContactName", *MEMORY[0x1E4F28940], @"AddressBookContactName", *MEMORY[0x1E4F28938], @"JobTitle", *MEMORY[0x1E4F28948], @"CompanyName", *MEMORY[0x1E4F28958], @"Street", *MEMORY[0x1E4F28920], @"City", *MEMORY[0x1E4F28950], @"State", *MEMORY[0x1E4F28960], @"ZipCode",
           *MEMORY[0x1E4F28928],
           @"Country",
           *MEMORY[0x1E4F28918],
           @"AirlineName",
           *MEMORY[0x1E4F28930],
           @"FlightNumber",
           0);
    uint64_t v6 = (void *)addAddressResultsToComponents_subTypesToKeysDictionary;
    addAddressResultsToComponents_subTypesToKeysDictionary = v5;

    if (!v3) {
      goto LABEL_12;
    }
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (CFIndex i = 0; i != v8; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
      id v11 = DDResultGetType();
      uint64_t v12 = [(id)addAddressResultsToComponents_subTypesToKeysDictionary objectForKey:v11];
      if (v12)
      {
        uint64_t Value = DDResultGetValue();
        if (Value)
        {
          __int16 v14 = (const void *)Value;
          CFTypeID TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v14)) {
            [v16 setObject:v14 forKey:v12];
          }
        }
      }
      addAddressResultsToComponents(ValueAtIndex, v16);
    }
  }
LABEL_12:
}

uint64_t SGDCKLocationReadFrom(uint64_t a1, uint64_t a2)
{
  CFArrayRef v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = 0;
              unsigned int v19 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 76) |= 0x10u;
              break;
            case 2u:
              uint64_t v26 = PBReaderReadString();
              uint64_t v27 = 64;
              goto LABEL_44;
            case 3u:
              uint64_t v26 = PBReaderReadString();
              uint64_t v27 = 40;
              goto LABEL_44;
            case 4u:
              *(unsigned char *)(a1 + 76) |= 2u;
              uint64_t v28 = *v3;
              unint64_t v29 = *(void *)(a2 + v28);
              if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
                *(void *)(a2 + v2_Block_object_dispose(&STACK[0x2A0], 8) = v29 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v30 = 0;
              }
              uint64_t v38 = 16;
              goto LABEL_57;
            case 5u:
              *(unsigned char *)(a1 + 76) |= 4u;
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v32);
                *(void *)(a2 + v31) = v32 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v30 = 0;
              }
              uint64_t v38 = 24;
              goto LABEL_57;
            case 6u:
              *(unsigned char *)(a1 + 76) |= 1u;
              uint64_t v33 = *v3;
              unint64_t v34 = *(void *)(a2 + v33);
              if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v34);
                *(void *)(a2 + v33) = v34 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v30 = 0;
              }
              uint64_t v38 = 8;
              goto LABEL_57;
            case 7u:
              *(unsigned char *)(a1 + 76) |= 8u;
              uint64_t v35 = *v3;
              unint64_t v36 = *(void *)(a2 + v35);
              if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v36);
                *(void *)(a2 + v35) = v36 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v30 = 0;
              }
              uint64_t v38 = 32;
LABEL_57:
              *(void *)(a1 + v3_Block_object_dispose(&STACK[0x2A0], 8) = v30;
              goto LABEL_58;
            case 8u:
              uint64_t v26 = PBReaderReadData();
              uint64_t v27 = 56;
              goto LABEL_44;
            case 9u:
              uint64_t v26 = PBReaderReadString();
              uint64_t v27 = 48;
LABEL_44:
              long long v37 = *(void **)(a1 + v27);
              *(void *)(a1 + v27) = v26;

              goto LABEL_58;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_58:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_46;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              goto LABEL_48;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
          }
LABEL_48:
          *(_DWORD *)(a1 + 72) = v20;
          goto LABEL_58;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL initGraph(void *a1)
{
  *a1 = 0x400000000;
  uint64_t v2 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  a1[1] = v2;
  return v2 == 0;
}

BOOL newVertex(int *a1, uint64_t a2)
{
  if (!a1 || (CFArrayRef v3 = (char *)*((void *)a1 + 1)) == 0) {
    __assert_rtn("newVertex", "mincut.m", 59, "g && g->vertices");
  }
  int v5 = *a1;
  if (*a1 != a1[1]) {
    goto LABEL_6;
  }
  unsigned int v6 = 2 * v5;
  a1[1] = v6;
  CFArrayRef v3 = (char *)safeRealloc(v3, 24 * v6);
  *((void *)a1 + 1) = v3;
  if (v3)
  {
    int v5 = *a1;
LABEL_6:
    *a1 = v5 + 1;
    id v7 = &v3[24 * v5];
    *(void *)id v7 = a2;
    *((void *)v7 + 2) = 0x400000000;
    char v8 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    *((void *)v7 + 1) = v8;
    return v8 == 0;
  }
  return 1;
}

void *safeRealloc(void *a1, size_t a2)
{
  CFArrayRef v3 = malloc_type_realloc(a1, a2, 0xE7C72B35uLL);
  if (!v3) {
    free(a1);
  }
  return v3;
}

uint64_t addEdge(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1)
  {
    unsigned int v9 = "u";
    goto LABEL_14;
  }
  if (!a2)
  {
    unsigned int v9 = "v";
    goto LABEL_14;
  }
  if (a3 <= 0.0)
  {
    unsigned int v9 = "capacity > 0.0";
LABEL_14:
    __assert_rtn("newEdge", "mincut.m", 76, v9);
  }
  unsigned int v6 = malloc_type_malloc(0x18uLL, 0x102004062D53EE8uLL);
  if (v6)
  {
    id v7 = v6;
    *unsigned int v6 = a1;
    v6[1] = a2;
    *((double *)v6 + 2) = a3;
    if (!addEdgeToIncidenceList(a1, (uint64_t)v6))
    {
      uint64_t result = addEdgeToIncidenceList(a2, (uint64_t)v7);
      if (!result) {
        return result;
      }
      --*(_DWORD *)(a1 + 16);
    }
    free(v7);
  }
  return 1;
}

uint64_t addEdgeToIncidenceList(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 == *(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 2re2::Compiler::Compile(this, 0) = 2 * v4;
    int v5 = safeRealloc(*(void **)(a1 + 8), 8 * (2 * v4));
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v5;
    if (!v5) {
      return 1;
    }
    int v4 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    int v5 = *(void **)(a1 + 8);
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 16) = v4 + 1;
  v5[v4] = a2;
  return v6;
}

void freeGraph(unsigned int *a1)
{
  if (*a1)
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)a1 + 1);
      uint64_t v4 = v3 + 24 * v2;
      unsigned int v7 = *(_DWORD *)(v4 + 16);
      uint64_t v6 = (unsigned int *)(v4 + 16);
      unint64_t v5 = v7;
      if (v7)
      {
        unint64_t v8 = 0;
        do
        {
          unsigned int v9 = *(void **)(*(void *)(v3 + 24 * v2 + 8) + 8 * v8);
          if (*v9)
          {
            *unsigned int v9 = 0;
          }
          else
          {
            free(v9);
            unint64_t v5 = *v6;
          }
          ++v8;
        }
        while (v8 < v5);
      }
      free(*(void **)(v3 + 24 * v2++ + 8));
    }
    while (v2 < *a1);
  }
  free(*((void **)a1 + 1));
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
}

size_t printDot(unsigned int *a1, FILE *__stream)
{
  fwrite("digraph g {\n", 0xCuLL, 1uLL, __stream);
  unint64_t v4 = *a1;
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *((void *)a1 + 1);
      uint64_t v7 = v6 + 24 * i;
      unint64_t v8 = *(unsigned int *)(v7 + 16);
      if (*(_DWORD *)(v7 + 16))
      {
        unint64_t v9 = 0;
        unint64_t v10 = (void *)(v6 + 24 * i + 8);
        do
        {
          uint64_t v11 = *(void *)(*v10 + 8 * v9);
          if (*(void *)v11 == v7)
          {
            fprintf(__stream, "    V%u -> V%u [label=\"%0.2f\"];\n",
              -1431655765 * ((v7 - *((void *)a1 + 1)) >> 3),
              -1431655765 * ((uint64_t)(*(void *)(v11 + 8) - *((void *)a1 + 1)) >> 3),
              *(double *)(v11 + 16));
            unint64_t v8 = *(unsigned int *)(v7 + 16);
          }
          ++v9;
        }
        while (v9 < v8);
        unint64_t v4 = *a1;
      }
    }
  }
  return fwrite("}\n", 2uLL, 1uLL, __stream);
}

void *mincut(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *a1;
  if (!v3) {
    goto LABEL_60;
  }
  uint64_t v7 = (unsigned int *)malloc_type_malloc(4 * v3, 0x100004052888210uLL);
  if (!v7) {
    goto LABEL_60;
  }
  unint64_t v8 = v7;
  unint64_t v9 = malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
  if (!v9)
  {
    unint64_t v10 = v8;
LABEL_59:
    free(v10);
    goto LABEL_60;
  }
  unint64_t v10 = v9;
  uint64_t v11 = malloc_type_malloc(4 * *a1, 0x100004052888210uLL);
  if (!v11)
  {
    free(v8);
    goto LABEL_59;
  }
  if (!*a1) {
    goto LABEL_35;
  }
  uint64_t v12 = v11;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = *((void *)a1 + 1);
  uint64_t v16 = v15 + 24 * a3;
  uint64_t v17 = 10000000;
  double v18 = 0.0;
  while (2)
  {
    unint64_t v19 = 0;
    do
      v8[v19++] = -1;
    while (v19 < *a1);
    signed int v20 = 0;
    v8[v13] = -2;
    *((void *)v10 + v13) = 0x7FF0000000000000;
    *uint64_t v12 = v13;
    uint64_t v21 = *a1;
    signed int v22 = 1;
    int v23 = 1;
    while (1)
    {
      uint64_t v24 = v12[v20];
      --v23;
      uint64_t v25 = v15 + 24 * v24;
      unsigned int v28 = *(_DWORD *)(v25 + 16);
      uint64_t v26 = (unsigned int *)(v25 + 16);
      unint64_t v27 = v28;
      if (v28) {
        break;
      }
      uint64_t v31 = v21;
LABEL_22:
      signed int v20 = (v20 + 1) % v21;
      uint64_t v21 = v31;
      if (v23 < 1) {
        goto LABEL_39;
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = *(void *)(v15 + 24 * v24 + 8);
    uint64_t v31 = v21;
    while (1)
    {
      uint64_t v32 = *(void *)(v30 + 8 * v29);
      if (v15 + 24 * v24 != *(void *)v32) {
        goto LABEL_19;
      }
      double v33 = *(double *)(v32 + 16);
      if (v33 == 0.0) {
        goto LABEL_19;
      }
      uint64_t v34 = *(void *)(v32 + 8);
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v15) >> 3);
      if (v8[v35] != -1) {
        goto LABEL_19;
      }
      v8[-1431655765 * ((v34 - v15) >> 3)] = v24;
      if (*((double *)v10 + v24) < v33) {
        double v33 = *((double *)v10 + v24);
      }
      *((double *)v10 - 1431655765 * ((v34 - v15) >> 3)) = v33;
      if (v34 == v16) {
        break;
      }
      v12[v22] = v35;
      uint64_t v31 = *a1;
      signed int v22 = (v22 + 1) % v31;
      ++v23;
      unint64_t v27 = *v26;
LABEL_19:
      if (++v29 >= v27) {
        goto LABEL_22;
      }
    }
    double v36 = *((double *)v10 + v14);
    if (v36 != 0.0)
    {
      if (--v17)
      {
        uint64_t v37 = v14;
        while (v37 != v13)
        {
          uint64_t v38 = v37;
          uint64_t v37 = v8[v37];
          uint64_t v39 = v15 + 24 * v37;
          uint64_t v40 = *(unsigned int *)(v39 + 16);
          if (v40)
          {
            int v41 = *(double ***)(v15 + 24 * v37 + 8);
            uint64_t v42 = v15 + 24 * v38;
            do
            {
              long long v43 = *v41;
              if (*(void *)*v41 == v39 && *((void *)v43 + 1) == v42) {
                v43[2] = v43[2] - v36;
              }
              ++v41;
              --v40;
            }
            while (v40);
          }
        }
        double v18 = v18 + v36;
        if (!*a1) {
LABEL_35:
        }
          __assert_rtn("findAugmentingPathWithPreallocatedInternalState", "mincut.m", 147, "g->count > 0");
        continue;
      }
      int v44 = sgLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
      {
        v61[0] = 0;
        _os_log_fault_impl(&dword_1CA650000, v44, OS_LOG_TYPE_FAULT, "out of iterations", (uint8_t *)v61, 2u);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
        abort();
      }
    }
    break;
  }
LABEL_39:
  free(v8);
  free(v10);
  free(v12);
  if (v18 <= 0.0) {
LABEL_60:
  }
    __assert_rtn("mincut", "mincut.m", 273, "maxflow > 0");
  size_t v45 = *a1;
  if (!v45) {
    return 0;
  }
  char v46 = malloc_type_calloc(v45, 1uLL, 0x100004077774924uLL);
  if (!v46) {
    return v46;
  }
  uint64_t v47 = malloc_type_malloc(4 * *a1, 0x100004052888210uLL);
  if (!v47)
  {
    free(v46);
    return 0;
  }
  signed int v48 = 0;
  *uint64_t v47 = v14;
  *((unsigned char *)v46 + v14) = 1;
  int v49 = 1;
  signed int v50 = 1;
  do
  {
    unsigned int v51 = v47[v48];
    unsigned int v52 = *a1;
    --v49;
    uint64_t v53 = *((void *)a1 + 1);
    uint64_t v54 = v53 + 24 * v51;
    unint64_t v55 = *(unsigned int *)(v54 + 16);
    if (*(_DWORD *)(v54 + 16))
    {
      unint64_t v56 = 0;
      long long v57 = (void *)(v53 + 24 * v51 + 8);
      do
      {
        uint64_t v58 = *(void *)(*v57 + 8 * v56);
        if (*(void *)(v58 + 8) == v54 && *(double *)(v58 + 16) > 0.0)
        {
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v58 - *((void *)a1 + 1)) >> 3);
          if (!*((unsigned char *)v46 + v59))
          {
            v47[v50] = v59;
            signed int v50 = (v50 + 1) % *a1;
            ++v49;
            *((unsigned char *)v46 + v59) = 1;
            unint64_t v55 = *(unsigned int *)(v54 + 16);
          }
        }
        ++v56;
      }
      while (v56 < v55);
    }
    signed int v48 = (v48 + 1) % v52;
  }
  while (v49 >= 1);
  free(v47);
  return v46;
}

void sub_1CA804850(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1CA8049D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28961(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__28962(uint64_t a1)
{
}

id SGCleavePhoneNumberAndExtension(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    unint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v10 = [NSString stringWithUTF8String:"_PASTuple2<NSString *,NSString *> *SGCleavePhoneNumberAndExtension(NSString *__strong)"];
    [v9 handleFailureInFunction:v10, @"SGDataNormalization.m", 113, @"Invalid parameter not satisfying: %@", @"phoneNumber" file lineNumber description];
  }
  id v2 = v1;
  uint64_t v3 = [v2 rangeOfString:@";" options:2];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v4 = &stru_1F24EEF20;
    unint64_t v5 = v2;
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v4 = [v2 substringFromIndex:v3];
    unint64_t v5 = [v2 substringToIndex:v6];
  }
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F93BB8]) initWithFirst:v5 second:v4];

  return v7;
}

uint64_t SGPhoneNumberMatchInSet(void *a1, void *a2, void *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    unint64_t v8 = v6;
  }
  else
  {
    uint64_t v34 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v35 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL SGPhoneNumberMatchInSet(NSMutableDictionary<NSString *,NSString<SGNormalizedPhoneNumber> *> *__strong, NSString *__strong, NSArray<NSString<SGNormalizedPhoneNumber> *> *__strong)");
    [v34 handleFailureInFunction:v35, @"SGDataNormalization.m", 142, @"Invalid parameter not satisfying: %@", @"needle" file lineNumber description];

    unint64_t v8 = 0;
  }
  unint64_t v9 = SGCleavePhoneNumberAndExtension(v8);
  unint64_t v10 = [v9 first];
  uint64_t v11 = SGNormalizePhoneNumberCached();

  uint64_t v39 = [v9 second];
  if (v11)
  {
    if ([v7 containsObject:v11])
    {
      uint64_t v12 = 1;
    }
    else
    {
      double v36 = v9;
      id v37 = v7;
      uint64_t v38 = v6;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v13 = v7;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v45;
        while (2)
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v45 != v16) {
              objc_enumerationMutation(v13);
            }
            double v18 = *(void **)(*((void *)&v44 + 1) + 8 * i);
            unint64_t v19 = (void *)MEMORY[0x1CB79B230]();
            signed int v20 = SGCleavePhoneNumberAndExtension(v18);
            uint64_t v21 = [v20 first];
            signed int v22 = SGNormalizePhoneNumberCached();

            int v23 = [v20 second];
            if ([v23 length]
              && [v22 isEqualToString:v11]
              && (![v39 length] || (objc_msgSend(v39, "isEqualToString:", v23) & 1) != 0))
            {

              uint64_t v12 = 1;
              uint64_t v24 = v13;
              id v6 = v38;
              goto LABEL_34;
            }
          }
          uint64_t v15 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }

      id v6 = v38;
      uint64_t v24 = digitsOnly(v38);
      if ((unint64_t)[v24 length] < 5)
      {
        uint64_t v12 = 0;
      }
      else
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        id v25 = v13;
        uint64_t v12 = [v25 countByEnumeratingWithState:&v40 objects:v48 count:16];
        if (v12)
        {
          uint64_t v26 = *(void *)v41;
          while (2)
          {
            for (uint64_t j = 0; j != v12; ++j)
            {
              if (*(void *)v41 != v26) {
                objc_enumerationMutation(v25);
              }
              unsigned int v28 = *(void **)(*((void *)&v40 + 1) + 8 * j);
              uint64_t v29 = (void *)MEMORY[0x1CB79B230]();
              uint64_t v30 = digitsOnly(v28);
              if ((unint64_t)[v30 length] >= 5)
              {
                [v24 rangeOfString:v30];
                if (v31 || ([v30 rangeOfString:v24], v32))
                {

                  uint64_t v12 = 1;
                  goto LABEL_33;
                }
              }
            }
            uint64_t v12 = [v25 countByEnumeratingWithState:&v40 objects:v48 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
LABEL_33:
      }
LABEL_34:
      unint64_t v9 = v36;
      id v7 = v37;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

id digitsOnly(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_malloc([v1 length] + 1, 0xB1DC1DF8uLL);
  uint64_t v3 = (__CFString *)v1;
  unint64_t v4 = self;

  id v5 = v2;
  if (v4)
  {
    memset(v23, 0, sizeof(v23));
    CFIndex Length = CFStringGetLength(v3);
    CFStringRef theString = v3;
    uint64_t v27 = 0;
    CFIndex v28 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    id v25 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    }
    int64_t v29 = 0;
    int64_t v30 = 0;
    id v5 = v2;
    uint64_t v26 = CStringPtr;
    if (Length >= 1)
    {
      uint64_t v9 = 0;
      int64_t v10 = 0;
      uint64_t v11 = 64;
      id v5 = v2;
      do
      {
        if ((unint64_t)v10 >= 4) {
          uint64_t v12 = 4;
        }
        else {
          uint64_t v12 = v10;
        }
        CFIndex v13 = v28;
        if (v28 > v10)
        {
          if (v25)
          {
            UniChar v14 = v25[v10 + v27];
          }
          else if (v26)
          {
            UniChar v14 = v26[v27 + v10];
          }
          else
          {
            int64_t v15 = v29;
            if (v30 <= v10 || v29 > v10)
            {
              uint64_t v17 = v12 + v9;
              uint64_t v18 = v11 - v12;
              int64_t v19 = v10 - v12;
              CFIndex v20 = v19 + 64;
              if (v19 + 64 >= v28) {
                CFIndex v20 = v28;
              }
              int64_t v29 = v19;
              int64_t v30 = v20;
              if (v28 >= v18) {
                CFIndex v13 = v18;
              }
              v32.length = v13 + v17;
              v32.id location = v19 + v27;
              CFStringGetCharacters(theString, v32, (UniChar *)v23);
              int64_t v15 = v29;
            }
            UniChar v14 = *((_WORD *)v23 + v10 - v15);
          }
          if (v14 - 48 <= 9) {
            *v5++ = v14;
          }
        }
        ++v10;
        --v9;
        ++v11;
      }
      while (Length != v10);
    }
  }

  unsigned char *v5 = 0;
  uint64_t v21 = (void *)[[NSString alloc] initWithUTF8String:v2];
  free(v2);

  return v21;
}

uint64_t SGIsPhoneNumberWithRangeBlocked(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = a1;
  if (a3 < 5)
  {
    uint64_t v6 = 1;
    goto LABEL_39;
  }
  id v7 = (void *)MEMORY[0x1CB79B230]();
  if (a3 >= [v5 length])
  {
    id v9 = v5;
  }
  else
  {
    unint64_t v8 = (void *)MEMORY[0x1CB79B230]();
    objc_msgSend(v5, "substringWithRange:", a2, a3);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  int64_t v10 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
  uint64_t v11 = (__CFString *)v9;
  uint64_t v12 = self;

  if (!v12) {
    goto LABEL_36;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  CFIndex Length = CFStringGetLength(v11);
  CFStringRef theString = v11;
  uint64_t v42 = 0;
  CFIndex v43 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v11);
  CStringPtr = 0;
  long long v40 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v11, 0x600u);
  }
  int64_t v44 = 0;
  int64_t v45 = 0;
  long long v41 = CStringPtr;
  if (Length <= 0)
  {
LABEL_36:

LABEL_37:
    uint64_t v6 = 1;
    goto LABEL_38;
  }
  uint64_t v16 = 0;
  int64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 64;
  do
  {
    if ((unint64_t)v17 >= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = v17;
    }
    CFIndex v21 = v43;
    if (v43 <= v17)
    {
      UniChar v22 = 0;
LABEL_31:
      if (!objc_msgSend(v10, "characterIsMember:", v22, v31, v32, v33, v34, v35, v36, v37, v38)) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if (v40)
    {
      UniChar v22 = v40[v17 + v42];
    }
    else if (v41)
    {
      UniChar v22 = v41[v42 + v17];
    }
    else
    {
      int64_t v23 = v44;
      if (v45 <= v17 || v44 > v17)
      {
        uint64_t v25 = v20 + v16;
        uint64_t v26 = v19 - v20;
        int64_t v27 = v17 - v20;
        CFIndex v28 = v27 + 64;
        if (v27 + 64 >= v43) {
          CFIndex v28 = v43;
        }
        int64_t v44 = v27;
        int64_t v45 = v28;
        if (v43 >= v26) {
          CFIndex v21 = v26;
        }
        v46.length = v21 + v25;
        v46.id location = v27 + v42;
        CFStringGetCharacters(theString, v46, (UniChar *)&v31);
        int64_t v23 = v44;
      }
      UniChar v22 = *((_WORD *)&v31 + v17 - v23);
    }
    if (v22 - 48 >= 0xA) {
      goto LABEL_31;
    }
LABEL_32:
    ++v18;
LABEL_33:
    ++v17;
    --v16;
    ++v19;
  }
  while (Length != v17);

  if (v18 > 5)
  {
    uint64_t v6 = 0;
    goto LABEL_38;
  }
  if (v18 != 5) {
    goto LABEL_37;
  }
  CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  int64_t v30 = _PASKeepOnlyCharacterSet();
  if ([v30 isEqualToString:@"10111"]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = [v30 isEqualToString:@"10177"];
  }

LABEL_38:
LABEL_39:

  return v6;
}

id SGNormalizeAddress(void *a1)
{
  id v1 = preprocess(a1);
  CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  id v2 = _PASRemoveCharacterSet();

  uint64_t v3 = _PASCollapseWhitespaceAndStrip();

  return v3;
}

__CFString *preprocess(void *a1)
{
  id v1 = a1;
  if ([(__CFString *)v1 length])
  {
    MutableCopy = CFStringCreateMutableCopy(0, 0, v1);
    uint64_t v3 = MutableCopy;
    if (MutableCopy)
    {
      CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
      CFStringLowercase(v3, 0);
    }
  }
  else
  {
    uint64_t v3 = &stru_1F24EEF20;
  }

  return v3;
}

id SGNormalizeCNAddress(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  id v26 = [v1 alloc];
  uint64_t v3 = [v2 street];
  unint64_t v4 = (void *)v3;
  if (v3) {
    id v5 = (__CFString *)v3;
  }
  else {
    id v5 = &stru_1F24EEF20;
  }
  uint64_t v25 = v5;
  uint64_t v6 = [v2 city];
  id v7 = (void *)v6;
  if (v6) {
    unint64_t v8 = (__CFString *)v6;
  }
  else {
    unint64_t v8 = &stru_1F24EEF20;
  }
  uint64_t v24 = v8;
  uint64_t v9 = [v2 state];
  int64_t v10 = (void *)v9;
  if (v9) {
    uint64_t v11 = (__CFString *)v9;
  }
  else {
    uint64_t v11 = &stru_1F24EEF20;
  }
  int64_t v23 = v11;
  uint64_t v12 = [v2 postalCode];
  CFIndex v13 = (void *)v12;
  if (v12) {
    UniChar v14 = (__CFString *)v12;
  }
  else {
    UniChar v14 = &stru_1F24EEF20;
  }
  uint64_t v15 = [v2 country];
  uint64_t v16 = (void *)v15;
  if (v15) {
    int64_t v17 = (__CFString *)v15;
  }
  else {
    int64_t v17 = &stru_1F24EEF20;
  }
  unint64_t v18 = [v2 ISOCountryCode];

  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = &stru_1F24EEF20;
  }
  uint64_t v20 = (void *)[v26 initWithFormat:@"%@ %@ %@ %@ %@ %@", v25, v24, v23, v14, v17, v19];
  CFIndex v21 = SGNormalizeAddress(v20);

  return v21;
}

id SGNormalizeInstantMessageAddress(void *a1)
{
  id v2 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v3 = (void *)MEMORY[0x1E4F28B88];
  id v4 = a1;
  id v5 = [v3 whitespaceAndNewlineCharacterSet];
  uint64_t v6 = [v4 stringByTrimmingCharactersInSet:v5];

  id v7 = v6;

  return v7;
}

id SGNormalizeSocialProfile(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = v1;

  return v3;
}

id SGNormalizeSocialProfileIdentifier(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = [[SGSocialProfileDetails alloc] initWithSerialized:v1];
  id v4 = v3;
  if (v3)
  {
    id v5 = [(SGSocialProfileDetails *)v3 preferredUniqueIdentifier];
  }
  else
  {
    uint64_t v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v9 = 138412290;
      id v10 = v1;
      _os_log_fault_impl(&dword_1CA650000, v6, OS_LOG_TYPE_FAULT, "Unexpectedly could not deserialize a serializedSocialProfile: %@", (uint8_t *)&v9, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
    id v5 = v1;
  }
  id v7 = v5;

  return v7;
}

id SGNormalizeBirthday(void *a1)
{
  id v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = (void *)MEMORY[0x1E4F28B88];
  id v4 = a1;
  id v5 = [v3 whitespaceAndNewlineCharacterSet];
  uint64_t v6 = [v4 stringByTrimmingCharactersInSet:v5];

  id v7 = v6;

  return v7;
}

id SGDateComponentsFromNormalizeBirthday(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1CB79B230]();
  unint64_t v3 = [v1 length];
  id v4 = @"dd-MM";
  if (v3 > 5) {
    id v4 = @"dd-MM-yyyy";
  }
  id v5 = v4;
  uint64_t v6 = objc_opt_new();
  [v6 setDateFormat:v5];

  id v7 = [v6 dateFromString:v1];
  if (v7)
  {
    if (v3 <= 5) {
      uint64_t v8 = 24;
    }
    else {
      uint64_t v8 = 28;
    }
    int v9 = [MEMORY[0x1E4F1C9A8] currentCalendar];
    id v10 = [v9 components:v8 fromDate:v7];
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id SGNormalizeName(uint64_t a1)
{
  id v1 = +[SGNames cleanName:a1];
  id v2 = +[SGNames stripHonorifics:v1];

  unint64_t v3 = +[SGNames handleLastNameFirstOrder:v2];

  id v4 = +[SGNames stripHonorifics:v3];

  id v5 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v6 = [v4 lowercaseString];

  return v6;
}

void SGDataNormalizationClearCaches()
{
  parsedAddressCache();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  [v0 runWithLockAcquired:&__block_literal_global_29092];
}

uint64_t parsedAddressCache()
{
  if (parsedAddressCache__pasOnceToken12 != -1) {
    dispatch_once(&parsedAddressCache__pasOnceToken12, &__block_literal_global_66);
  }
  id v0 = (void *)parsedAddressCache__pasExprOnceResult;
  return [v0 result];
}

uint64_t __SGDataNormalizationClearCaches_block_invoke(uint64_t a1, void *a2)
{
  return [a2 removeAllObjects];
}

void __parsedAddressCache_block_invoke()
{
  id v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_70_29094];
  id v2 = (void *)parsedAddressCache__pasExprOnceResult;
  parsedAddressCache__pasExprOnceResult = v1;
}

id __parsedAddressCache_block_invoke_2()
{
  id v0 = objc_alloc(MEMORY[0x1E4F93B70]);
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)[v0 initWithGuardedData:v1];

  return v2;
}

id SGPostalAddressParseCNPostalAddress(void *a1)
{
  v19[5] = *MEMORY[0x1E4F143B8];
  v18[0] = @"Street";
  id v1 = a1;
  uint64_t v2 = [v1 street];
  unint64_t v3 = (void *)v2;
  if (v2) {
    id v4 = (__CFString *)v2;
  }
  else {
    id v4 = &stru_1F24EEF20;
  }
  v19[0] = v4;
  v18[1] = @"City";
  uint64_t v5 = [v1 city];
  uint64_t v6 = (void *)v5;
  if (v5) {
    id v7 = (__CFString *)v5;
  }
  else {
    id v7 = &stru_1F24EEF20;
  }
  v19[1] = v7;
  id v18[2] = @"State";
  uint64_t v8 = [v1 state];
  int v9 = (void *)v8;
  if (v8) {
    id v10 = (__CFString *)v8;
  }
  else {
    id v10 = &stru_1F24EEF20;
  }
  v19[2] = v10;
  void v18[3] = @"ZIP";
  uint64_t v11 = [v1 postalCode];
  uint64_t v12 = (void *)v11;
  if (v11) {
    CFIndex v13 = (__CFString *)v11;
  }
  else {
    CFIndex v13 = &stru_1F24EEF20;
  }
  v19[3] = v13;
  void v18[4] = @"Country";
  UniChar v14 = [v1 country];

  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = &stru_1F24EEF20;
  }
  v19[4] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:5];

  return v16;
}

id SGPostalAddressParse(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28B88];
  id v2 = a1;
  unint64_t v3 = [v1 newlineCharacterSet];
  id v4 = [v2 componentsSeparatedByCharactersInSet:v3];

  uint64_t v5 = objc_msgSend(v4, "_pas_componentsJoinedByString:", @" ");

  uint64_t v13 = 0;
  UniChar v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = __Block_byref_object_copy__29114;
  int64_t v17 = __Block_byref_object_dispose__29115;
  id v18 = 0;
  uint64_t v6 = parsedAddressCache();
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __SGPostalAddressParse_block_invoke;
  v10[3] = &unk_1E65BB4E8;
  id v7 = v5;
  id v11 = v7;
  uint64_t v12 = &v13;
  [v6 runWithLockAcquired:v10];

  id v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_1CA806B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__29115(uint64_t a1)
{
}

void __SGPostalAddressParse_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKey:*(void *)(a1 + 32)];
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v4);
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "_pas_retainsConmingledBackingStore")) {
      id v5 = (id)[[NSString alloc] initWithString:*(void *)(a1 + 32)];
    }
    else {
      id v5 = *(id *)(a1 + 32);
    }
    uint64_t v13 = 0;
    UniChar v14 = &v13;
    uint64_t v15 = 0x3032000000;
    uint64_t v16 = __Block_byref_object_copy__29114;
    int64_t v17 = __Block_byref_object_dispose__29115;
    id v18 = &unk_1F2537728;
    uint64_t v7 = MEMORY[0x1E4F143A8];
    uint64_t v8 = 3221225472;
    int v9 = __SGPostalAddressParse_block_invoke_2;
    id v10 = &unk_1E65BB4C0;
    id v6 = v5;
    id v11 = v6;
    uint64_t v12 = &v13;
    SGDataDetectorsRunWithSharedScanner(&v7);
    if ((unint64_t)objc_msgSend(v6, "length", v7, v8, v9, v10) <= 0x400)
    {
      if ((unint64_t)[v3 count] >= 0x64) {
        [v3 removeAllObjects];
      }
      [v3 setObject:v14[5] forKeyedSubscript:v6];
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (id)v14[5]);

    _Block_object_dispose(&v13, 8);
  }
}

void sub_1CA806D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __SGPostalAddressParse_block_invoke_2(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _DWORD v4[2] = __SGPostalAddressParse_block_invoke_3;
  v4[3] = &unk_1E65BB498;
  id v3 = *(void **)(a1 + 32);
  v4[4] = *(void *)(a1 + 40);
  SGDataDetectorsScan(a2, v3, 0, v4);
}

uint64_t __SGPostalAddressParse_block_invoke_3(uint64_t a1)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  if (DDResultHasType())
  {
    buf[0] = 0;
    DDResultCopyFullAddressComponents();
    v8[0] = @"Street";
    v8[1] = @"City";
    v9[0] = &stru_1F24EEF20;
    v9[1] = &stru_1F24EEF20;
    v8[2] = @"State";
    v8[3] = @"ZIP";
    v9[2] = &stru_1F24EEF20;
    v9[3] = &stru_1F24EEF20;
    void v8[4] = @"Country";
    v9[4] = &stru_1F24EEF20;
    uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v9, v8, 5, 0);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 4re2::Compiler::Compile(this, 0) = v2;
  }
  else
  {
    id v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 138412290;
      *(void *)((char *)buf + 4) = DDResultGetType();
      id v6 = *(id *)((char *)buf + 4);
      _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEFAULT, "Scanning address string, expected to only find addresses, but found %@", (uint8_t *)buf, 0xCu);
    }
  }
  return 1;
}

uint64_t SGPostalAddressParsedCompare(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x1CB79B230]();
  id v6 = [v3 objectForKeyedSubscript:@"Street"];
  uint64_t v7 = [v6 lowercaseString];

  uint64_t v8 = [v4 objectForKeyedSubscript:@"Street"];
  int v9 = [v8 lowercaseString];

  if (existsSignificantPrefixRelation(v7, v9))
  {
LABEL_2:
    id v26 = v5;
    id v10 = [v3 objectForKeyedSubscript:@"State"];
    id v11 = [v4 objectForKeyedSubscript:@"State"];
    if ([v10 length] == 2 && objc_msgSend(v11, "length") == 2)
    {
      uint64_t v12 = [v10 uppercaseString];
      uint64_t v13 = [v11 uppercaseString];
      int v14 = [v12 isEqualToString:v13];

      if (!v14)
      {
        uint64_t v22 = 0;
        goto LABEL_19;
      }
    }
    uint64_t v15 = [v3 objectForKeyedSubscript:@"ZIP"];
    uint64_t v16 = squish(v15);

    int64_t v17 = [v4 objectForKeyedSubscript:@"ZIP"];
    id v18 = squish(v17);

    if (![v16 length] || !objc_msgSend(v18, "length"))
    {
      uint64_t v22 = 2;
      goto LABEL_18;
    }
    id v19 = v16;
    id v20 = v18;
    uint64_t v25 = v19;
    if (([v19 isEqualToString:&stru_1F24EEF20] & 1) != 0
      || (objc_msgSend(v20, "isEqualToString:", &stru_1F24EEF20, v19) & 1) != 0)
    {
      CFIndex v21 = v20;
    }
    else
    {
      if ([v19 rangeOfString:v20] == 0x7FFFFFFFFFFFFFFFLL)
      {
        id v24 = v19;
        CFIndex v21 = v20;
        uint64_t v22 = [v20 rangeOfString:v24] != 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_11;
      }
      CFIndex v21 = v20;
    }
    uint64_t v22 = 1;
LABEL_11:

LABEL_18:
LABEL_19:
    id v5 = v26;
    goto LABEL_20;
  }
  id v10 = longestDigitalSubstringOrInitialNumber(v7);
  id v11 = longestDigitalSubstringOrInitialNumber(v9);
  if ([v10 length]
    && [v10 length]
    && [v10 isEqualToString:v11])
  {

    goto LABEL_2;
  }
  uint64_t v22 = 0;
LABEL_20:

  return v22;
}

uint64_t existsSignificantPrefixRelation(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((unint64_t)[v3 length] >= 5 && (unint64_t)objc_msgSend(v4, "length") >= 5)
  {
    if ([v3 hasPrefix:v4]) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = [v4 hasPrefix:v3];
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

__CFString *longestDigitalSubstringOrInitialNumber(void *a1)
{
  id v1 = a1;
  if (![v1 length]) {
    goto LABEL_49;
  }
  uint64_t v2 = (__CFString *)v1;
  id v3 = self;

  if (v3)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)long long buffer = 0u;
    long long v33 = 0u;
    CFIndex Length = CFStringGetLength(v2);
    CFStringRef theString = v2;
    uint64_t v43 = 0;
    CFIndex v44 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v2);
    CStringPtr = 0;
    long long v41 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
    }
    int64_t v30 = v2;
    id v31 = v1;
    int64_t v45 = 0;
    int64_t v46 = 0;
    uint64_t v42 = CStringPtr;
    if (Length >= 1)
    {
      uint64_t v7 = 0;
      int64_t v8 = 0;
      int64_t v9 = 0;
      int64_t v10 = 0;
      unint64_t v11 = 0;
      int64_t v12 = 0;
      char v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = 64;
      while (1)
      {
        if ((unint64_t)v10 >= 4) {
          uint64_t v16 = 4;
        }
        else {
          uint64_t v16 = v10;
        }
        CFIndex v17 = v44;
        if (v44 <= v10) {
          goto LABEL_32;
        }
        if (v41)
        {
          UniChar v18 = v41[v10 + v43];
        }
        else if (v42)
        {
          UniChar v18 = v42[v43 + v10];
        }
        else
        {
          if (v46 <= v10 || v8 > v10)
          {
            uint64_t v20 = v16 + v7;
            uint64_t v21 = v15 - v16;
            int64_t v22 = v10 - v16;
            CFIndex v23 = v22 + 64;
            if (v22 + 64 >= v44) {
              CFIndex v23 = v44;
            }
            int64_t v45 = v22;
            int64_t v46 = v23;
            if (v44 >= v21) {
              CFIndex v17 = v21;
            }
            v48.length = v17 + v20;
            v48.id location = v22 + v43;
            CFStringGetCharacters(theString, v48, buffer);
            int64_t v8 = v45;
          }
          UniChar v18 = buffer[v10 - v8];
        }
        if (v18 - 48 > 9)
        {
LABEL_32:
          if (v14 <= v11)
          {
            char v13 = 0;
            unint64_t v25 = v14;
          }
          else
          {
            if (!v12)
            {
              uint64_t v2 = v30;

              int64_t v26 = 0;
              id v1 = v31;
              goto LABEL_48;
            }
            char v13 = 0;
            unint64_t v25 = 0;
            unint64_t v11 = v14;
            int64_t v9 = v12;
          }
        }
        else
        {
          BOOL v24 = (v13 & 1) == 0;
          char v13 = 1;
          if (v24) {
            unint64_t v25 = 1;
          }
          else {
            unint64_t v25 = v14 + 1;
          }
          if (v24) {
            int64_t v12 = v10;
          }
        }
        ++v10;
        --v7;
        ++v15;
        unint64_t v14 = v25;
        if (Length == v10) {
          goto LABEL_40;
        }
      }
    }
    unint64_t v25 = 0;
    int64_t v12 = 0;
    unint64_t v11 = 0;
    int64_t v9 = 0;
LABEL_40:
    uint64_t v2 = v30;
    id v1 = v31;
  }
  else
  {
    unint64_t v25 = 0;
    int64_t v12 = 0;
    unint64_t v11 = 0;
    int64_t v9 = 0;
  }

  unint64_t v14 = v25 <= v11 ? v11 : v25;
  int64_t v26 = v25 <= v11 ? v9 : v12;
  if (v14)
  {
LABEL_48:
    int64_t v27 = (void *)MEMORY[0x1CB79B230]();
    -[__CFString substringWithRange:](v2, "substringWithRange:", v26, v14);
    CFIndex v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_49:
    CFIndex v28 = &stru_1F24EEF20;
  }

  return v28;
}

id squish(void *a1)
{
  id v1 = preprocess(a1);
  uint64_t v2 = _PASRemoveWhitespace();

  return v2;
}

uint64_t SGPostalAddressesMatchWithParsed(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  if (v13) {
    BOOL v19 = v14 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  int v20 = !v19;
  if (!v19)
  {
    int v21 = postalAddressStringsCompare(v13, v14, v15, v16);
    if (v21 != 2) {
      goto LABEL_16;
    }
  }
  if (v17)
  {
    if (v18) {
      goto LABEL_11;
    }
  }
  else
  {
    SGPostalAddressParse(v13);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    if (v18) {
      goto LABEL_11;
    }
  }
  SGPostalAddressParse(v14);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  int v21 = SGPostalAddressParsedCompare(v17, v18);
  if (v21 != 2)
  {
LABEL_16:
    a7 = v21 == 1;
    goto LABEL_17;
  }
  if (v20)
  {
    int v22 = postalAddressStringsCompare(v13, v14, v15, v16);
    if (v22 == 2) {
      a7 = a7;
    }
    else {
      a7 = v22 == 1;
    }
  }
LABEL_17:

  return a7;
}

uint64_t postalAddressStringsCompare(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (([v7 isEqualToString:v8] & 1) == 0)
  {
    int64_t v12 = heuristicZipCode(v7);
    uint64_t v13 = heuristicZipCode(v8);
    id v14 = (void *)v13;
    if (v12 && v13 && ![v12 isEqualToString:v13])
    {
      uint64_t v11 = 0;
LABEL_16:

      goto LABEL_17;
    }
    if (v9)
    {
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      SGNormalizeAddress(v7);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
LABEL_9:
        uint64_t v11 = 1;
        if (([v9 isEqualToString:v10] & 1) == 0)
        {
          if (existsSignificantPrefixRelation(v9, v10)) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = 2;
          }
        }
        goto LABEL_16;
      }
    }
    SGNormalizeAddress(v8);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  uint64_t v11 = 1;
LABEL_17:

  return v11;
}

id heuristicZipCode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [(__CFString *)v1 length];
  if (v2 < 10) {
    goto LABEL_23;
  }
  int64_t v3 = v2;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  CFStringRef theString = v1;
  uint64_t v37 = 0;
  int64_t v38 = v2;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  long long v35 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  }
  int64_t v13 = 0;
  int64_t v39 = 0;
  int64_t v40 = 0;
  long long v36 = CStringPtr;
  int64_t v14 = 5 - v3;
  int64_t v15 = v3 + 59;
  int64_t v16 = v3;
  do
  {
    int64_t v17 = v16;
    if ((unint64_t)v16 < 0xC || v38 < v16) {
      break;
    }
    if (v35)
    {
      UniChar v18 = v35[v16 - 1 + v37];
    }
    else if (v36)
    {
      UniChar v18 = v36[v37 - 1 + v16];
    }
    else
    {
      if (v40 < v16 || v13 >= v16)
      {
        int64_t v19 = v16 + 59;
        if (v16 + 59 >= v38) {
          int64_t v19 = v38;
        }
        int64_t v39 = v16 - 5;
        int64_t v40 = v19;
        if (v38 >= v15) {
          int64_t v20 = v15;
        }
        else {
          int64_t v20 = v38;
        }
        v42.length = v20 + v14;
        v42.id location = v16 - 5 + v37;
        CFStringGetCharacters(theString, v42, (UniChar *)&v26);
        int64_t v13 = v39;
      }
      UniChar v18 = *((_WORD *)&v26 + v17 - v13 - 1);
    }
    unsigned int v21 = v18 - 48;
    ++v14;
    --v15;
    int64_t v16 = v17 - 1;
  }
  while (v21 < 0xA);
  unint64_t v22 = v3 - v17;
  if (v22 < 5)
  {
LABEL_23:
    BOOL v24 = 0;
  }
  else
  {
    CFIndex v23 = (void *)MEMORY[0x1CB79B230](CStringPtr, v4, v5, v6, v7, v8, v9, v10, v26, *((void *)&v26 + 1), v27, *((void *)&v27 + 1), v28, *((void *)&v28 + 1), v29, *((void *)&v29 + 1));
    BOOL v24 = -[__CFString substringWithRange:](v1, "substringWithRange:", v17, v22);
  }

  return v24;
}

id SGPostalAddressUnparse(void *a1)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 objectForKeyedSubscript:@"Street"];
  int64_t v3 = (void *)v2;
  if (!v2)
  {
    uint64_t v2 = [MEMORY[0x1E4F1CA98] null];
  }
  uint64_t v4 = objc_msgSend(v1, "objectForKeyedSubscript:", @"City", v2, v2);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA98] null];
  }
  v18[1] = v5;
  uint64_t v6 = [v1 objectForKeyedSubscript:@"State"];
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v7 = [MEMORY[0x1E4F1CA98] null];
  }
  id v18[2] = v7;
  uint64_t v8 = [v1 objectForKeyedSubscript:@"ZIP"];
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
  }
  void v18[3] = v9;
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:4];
  uint64_t v11 = (void *)[v10 mutableCopy];

  if (!v8) {
  if (!v6)
  }

  if (!v4) {
  if (!v3)
  }

  int64_t v12 = [MEMORY[0x1E4F1CA98] null];
  [v11 removeObject:v12];

  int64_t v13 = (void *)MEMORY[0x1CB79B230]();
  int64_t v14 = objc_msgSend(v11, "_pas_componentsJoinedByString:", @" ");
  int64_t v15 = _PASCollapseWhitespaceAndStrip();

  return v15;
}

uint64_t SGPostalAddressesMatch(void *a1, void *a2)
{
  return SGPostalAddressesMatchWithParsed(a1, a2, 0, 0, 0, 0, 1);
}

BOOL SGDCKInteractionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_28;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_28;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_28;
        case 5u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 56;
          goto LABEL_28;
        case 6u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 48;
          goto LABEL_28;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_28;
        case 8u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
LABEL_28:
          int64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x2A0], 8) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_29:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SGM2HarvestBudgetStatusTransitionReadFrom(uint64_t a1, uint64_t a2)
{
  int64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2re2::Compiler::Compile(this, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
            goto LABEL_41;
          }
        }
        BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
        goto LABEL_41;
      }
    }
    BOOL v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

std::string *re2::StringPrintf@<X0>(re2 *this@<X0>, std::string *a2@<X8>, ...)
{
  va_start(va, a2);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return re2::StringAppendV(a2, (const char *)this, va);
}

void sub_1CA809C44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *re2::StringAppendV(std::string *a1, const char *a2, va_list a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(__str, 0x400uLL);
  unsigned int v5 = vsnprintf(__str, 0x400uLL, a2, a3);
  if (v5 >= 0x400) {
    operator new[]();
  }
  return std::string::append(a1, __str, v5);
}

std::string *re2::StringAppendF(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return re2::StringAppendV(a1, a2, &a9);
}

uint64_t re2::hashword(re2 *this, const unsigned int *a2, int a3)
{
  uint64_t v3 = (a3 + 4 * a2 - 559038737);
  if ((unint64_t)a2 < 4)
  {
    int v5 = a3 + 4 * a2 - 559038737;
    int v4 = v5;
    if (a2 == (const unsigned int *)1)
    {
LABEL_11:
      HIDWORD(v17) = v4;
      LODWORD(v17) = v4;
      int v18 = (v3 ^ v4) - (v17 >> 18);
      HIDWORD(v17) = v18;
      LODWORD(v17) = v18;
      int v19 = ((*(_DWORD *)this + v5) ^ v18) - (v17 >> 21);
      HIDWORD(v17) = v19;
      LODWORD(v17) = v19;
      int v20 = (v19 ^ v4) - (v17 >> 7);
      HIDWORD(v17) = v20;
      LODWORD(v17) = v20;
      int v21 = (v20 ^ v18) - (v17 >> 16);
      HIDWORD(v17) = v21;
      LODWORD(v17) = v21;
      HIDWORD(v17) = (v21 ^ v19) - (v17 >> 28);
      LODWORD(v17) = HIDWORD(v17);
      HIDWORD(v17) = (HIDWORD(v17) ^ v20) - (v17 >> 18);
      LODWORD(v17) = HIDWORD(v17);
      return (HIDWORD(v17) ^ v21) - (v17 >> 8);
    }
  }
  else
  {
    int v4 = a3 + 4 * a2 - 559038737;
    int v5 = v4;
    do
    {
      int v6 = *((_DWORD *)this + 1) + v4;
      int v7 = *((_DWORD *)this + 2) + v3;
      int v8 = (*(_DWORD *)this + v5 - v7) ^ __ROR4__(v7, 28);
      int v9 = v7 + v6;
      int v10 = (v6 - v8) ^ __ROR4__(v8, 26);
      int v11 = v8 + v9;
      int v12 = (v9 - v10) ^ __ROR4__(v10, 24);
      int v13 = v10 + v11;
      int v14 = (v11 - v12) ^ __ROR4__(v12, 16);
      int v15 = v12 + v13;
      int v16 = (v13 - v14) ^ __ROR4__(v14, 13);
      int v5 = v14 + v15;
      uint64_t v3 = (v15 - v16) ^ __ROR4__(v16, 28);
      int v4 = v16 + v5;
      a2 = (const unsigned int *)((char *)a2 - 3);
      this = (re2 *)((char *)this + 12);
    }
    while ((unint64_t)a2 > 3);
    if (a2 == (const unsigned int *)1) {
      goto LABEL_11;
    }
  }
  if (a2 == (const unsigned int *)2)
  {
LABEL_10:
    v4 += *((_DWORD *)this + 1);
    goto LABEL_11;
  }
  if (a2 == (const unsigned int *)3)
  {
    LODWORD(v3) = *((_DWORD *)this + 2) + v3;
    goto LABEL_10;
  }
  return v3;
}

_DWORD *re2::hashword2(_DWORD *this, const unsigned int *a2, int *a3, unsigned int *a4, unsigned int *a5)
{
  int v5 = *a3 + 4 * a2 - 559038737;
  int v6 = v5 + *a4;
  int v7 = v5;
  if ((unint64_t)a2 >= 4)
  {
    do
    {
      int v8 = this[1] + v5;
      int v9 = this[2] + v6;
      int v10 = (*this + v7 - v9) ^ __ROR4__(v9, 28);
      int v11 = v9 + v8;
      int v12 = (v8 - v10) ^ __ROR4__(v10, 26);
      int v13 = v10 + v11;
      int v14 = (v11 - v12) ^ __ROR4__(v12, 24);
      int v15 = v12 + v13;
      int v16 = (v13 - v14) ^ __ROR4__(v14, 16);
      int v17 = v14 + v15;
      int v18 = (v15 - v16) ^ __ROR4__(v16, 13);
      int v7 = v16 + v17;
      int v6 = (v17 - v18) ^ __ROR4__(v18, 28);
      int v5 = v18 + v7;
      a2 = (const unsigned int *)((char *)a2 - 3);
      this += 3;
    }
    while ((unint64_t)a2 > 3);
  }
  if (a2 == (const unsigned int *)1) {
    goto LABEL_8;
  }
  if (a2 == (const unsigned int *)2)
  {
LABEL_7:
    v5 += this[1];
LABEL_8:
    HIDWORD(v19) = v5;
    LODWORD(v19) = v5;
    int v20 = (v6 ^ v5) - (v19 >> 18);
    HIDWORD(v19) = v20;
    LODWORD(v19) = v20;
    int v21 = ((*this + v7) ^ v20) - (v19 >> 21);
    HIDWORD(v19) = v21;
    LODWORD(v19) = v21;
    int v22 = (v21 ^ v5) - (v19 >> 7);
    HIDWORD(v19) = v22;
    LODWORD(v19) = v22;
    int v23 = (v22 ^ v20) - (v19 >> 16);
    HIDWORD(v19) = v23;
    LODWORD(v19) = v23;
    HIDWORD(v19) = (v23 ^ v21) - (v19 >> 28);
    LODWORD(v19) = HIDWORD(v19);
    int v5 = (HIDWORD(v19) ^ v22) - (v19 >> 18);
    HIDWORD(v19) = v5;
    LODWORD(v19) = v5;
    int v6 = (v5 ^ v23) - (v19 >> 8);
    goto LABEL_9;
  }
  if (a2 == (const unsigned int *)3)
  {
    v6 += this[2];
    goto LABEL_7;
  }
LABEL_9:
  *a3 = v6;
  *a4 = v5;
  return this;
}

void sub_1CA80A240(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA80A47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA80BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__29531(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__29532(uint64_t a1)
{
}

void sub_1CA80C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA80CB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1CA80D048(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1CA80D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1CA80F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id tokenizeNameAfterWhitespaceNormalization(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = malloc_type_malloc(2 * [v1 length], 0x1000040BDFB0063uLL);
    if (!v2)
    {
      id v29 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v29);
    }
    uint64_t v3 = v2;
    int v4 = objc_opt_new();
    int v5 = (__CFString *)v1;
    int v6 = self;

    if (v6)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      CFIndex Length = CFStringGetLength(v5);
      CFStringRef theString = v5;
      uint64_t v41 = 0;
      CFIndex v42 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v5);
      CStringPtr = 0;
      int64_t v39 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
      }
      int64_t v43 = 0;
      int64_t v44 = 0;
      int64_t v40 = CStringPtr;
      if (Length > 0)
      {
        uint64_t v10 = 0;
        int64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 64;
        do
        {
          if ((unint64_t)v11 >= 4) {
            uint64_t v14 = 4;
          }
          else {
            uint64_t v14 = v11;
          }
          CFIndex v15 = v42;
          if (v42 <= v11)
          {
            v3[v12++] = 0;
          }
          else
          {
            if (v39)
            {
              UniChar v16 = v39[v11 + v41];
            }
            else if (v40)
            {
              UniChar v16 = v40[v41 + v11];
            }
            else
            {
              int64_t v17 = v43;
              if (v44 <= v11 || v43 > v11)
              {
                uint64_t v19 = v14 + v10;
                uint64_t v20 = v13 - v14;
                int64_t v21 = v11 - v14;
                CFIndex v22 = v21 + 64;
                if (v21 + 64 >= v42) {
                  CFIndex v22 = v42;
                }
                int64_t v43 = v21;
                int64_t v44 = v22;
                if (v42 >= v20) {
                  CFIndex v15 = v20;
                }
                v46.length = v15 + v19;
                v46.id location = v21 + v41;
                CFStringGetCharacters(theString, v46, (UniChar *)&v30);
                int64_t v17 = v43;
              }
              UniChar v16 = *((_WORD *)&v30 + v11 - v17);
            }
            unsigned int v23 = v16;
            if (v16 == 32
              || ((v3[v12] = v16, ++v12, uint64_t v24 = (1 << v16) & 0xD00000000000, v23 <= 0x2F)
                ? (BOOL v25 = v24 == 0)
                : (BOOL v25 = 1),
                  !v25))
            {
              if (v12)
              {
                id v26 = [NSString alloc];
                uint64_t v27 = objc_msgSend(v26, "initWithCharacters:length:", v3, v12, v30, v31, v32, v33, v34, v35, v36, v37);
                [v4 addObject:v27];

                uint64_t v12 = 0;
              }
            }
          }
          ++v11;
          --v10;
          ++v13;
        }
        while (Length != v11);

        if (!v12) {
          goto LABEL_38;
        }
        int v5 = (__CFString *)[[NSString alloc] initWithCharacters:v3 length:v12];
        [v4 addObject:v5];
      }
    }

LABEL_38:
    free(v3);
    goto LABEL_40;
  }
  int v4 = 0;
LABEL_40:

  return v4;
}

uint64_t letterLength(void *a1)
{
  id v1 = a1;
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  uint64_t v3 = (__CFString *)v1;
  int v4 = self;

  if (!v4) {
    goto LABEL_29;
  }
  memset(v22, 0, sizeof(v22));
  CFIndex Length = CFStringGetLength(v3);
  CFStringRef theString = v3;
  uint64_t v26 = 0;
  CFIndex v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  uint64_t v24 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  int64_t v28 = 0;
  int64_t v29 = 0;
  BOOL v25 = CStringPtr;
  if (Length >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int64_t v10 = 0;
    uint64_t v11 = 64;
    do
    {
      if ((unint64_t)v10 >= 4) {
        uint64_t v12 = 4;
      }
      else {
        uint64_t v12 = v10;
      }
      CFIndex v13 = v27;
      if (v27 <= v10)
      {
        UniChar v14 = 0;
      }
      else if (v24)
      {
        UniChar v14 = v24[v10 + v26];
      }
      else if (v25)
      {
        UniChar v14 = v25[v26 + v10];
      }
      else
      {
        int64_t v15 = v28;
        if (v29 <= v10 || v28 > v10)
        {
          uint64_t v17 = v12 + v8;
          uint64_t v18 = v11 - v12;
          int64_t v19 = v10 - v12;
          CFIndex v20 = v19 + 64;
          if (v19 + 64 >= v27) {
            CFIndex v20 = v27;
          }
          int64_t v28 = v19;
          int64_t v29 = v20;
          if (v27 >= v18) {
            CFIndex v13 = v18;
          }
          v30.length = v13 + v17;
          v30.id location = v19 + v26;
          CFStringGetCharacters(theString, v30, (UniChar *)v22);
          int64_t v15 = v28;
        }
        UniChar v14 = *((_WORD *)v22 + v10 - v15);
      }
      if (CFCharacterSetIsCharacterMember(Predefined, v14)) {
        ++v9;
      }
      ++v10;
      --v8;
      ++v11;
    }
    while (Length != v10);
  }
  else
  {
LABEL_29:
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t isCapitalized(void *a1)
{
  id v1 = a1;
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  uint64_t v3 = (__CFString *)v1;
  int v4 = self;

  if (v4)
  {
    memset(v25, 0, sizeof(v25));
    CFIndex Length = CFStringGetLength(v3);
    CFStringRef theString = v3;
    uint64_t v29 = 0;
    CFIndex v30 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    CFIndex v27 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    }
    int64_t v31 = 0;
    int64_t v32 = 0;
    int64_t v28 = CStringPtr;
    if (Length >= 1)
    {
      uint64_t v8 = 0;
      int64_t v9 = 0;
      int v10 = 0;
      char v11 = 0;
      uint64_t v12 = 64;
      while (1)
      {
        if ((unint64_t)v9 >= 4) {
          uint64_t v13 = 4;
        }
        else {
          uint64_t v13 = v9;
        }
        CFIndex v14 = v30;
        if (v30 <= v9)
        {
          UniChar v15 = 0;
        }
        else if (v27)
        {
          UniChar v15 = v27[v9 + v29];
        }
        else if (v28)
        {
          UniChar v15 = v28[v29 + v9];
        }
        else
        {
          int64_t v17 = v31;
          if (v32 <= v9 || v31 > v9)
          {
            uint64_t v19 = v13 + v8;
            uint64_t v20 = v12 - v13;
            int64_t v21 = v9 - v13;
            CFIndex v22 = v21 + 64;
            if (v21 + 64 >= v30) {
              CFIndex v22 = v30;
            }
            int64_t v31 = v21;
            int64_t v32 = v22;
            if (v30 >= v20) {
              CFIndex v14 = v20;
            }
            v33.length = v14 + v19;
            v33.id location = v21 + v29;
            CFStringGetCharacters(theString, v33, (UniChar *)v25);
            int64_t v17 = v31;
          }
          UniChar v15 = *((_WORD *)v25 + v9 - v17);
        }
        int IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, v15);
        if (v11)
        {
          if (!IsCharacterMember) {
            ++v10;
          }
        }
        else if (!IsCharacterMember)
        {
          LODWORD(v23) = 0;
          goto LABEL_34;
        }
        ++v9;
        --v8;
        ++v12;
        char v11 = 1;
        if (Length == v9) {
          goto LABEL_33;
        }
      }
    }
  }
  int v10 = 0;
LABEL_33:
  LODWORD(v23) = 1;
LABEL_34:

  if (v10 > 0) {
    uint64_t v23 = v23;
  }
  else {
    uint64_t v23 = 0;
  }

  return v23;
}

BOOL fixedWidthStringSetContains(void *a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  int v7 = v6;
  BOOL v8 = 0;
  if (v5 && v6)
  {
    if ([v6 length] == a2)
    {
      MEMORY[0x1F4188790]();
      bzero((char *)__compar - ((2 * a2 + 16) & 0xFFFFFFFFFFFFFFF0), v9);
      [v7 getCharacters:(char *)__compar - ((2 * a2 + 16) & 0xFFFFFFFFFFFFFFF0)];
      id v10 = v5;
      char v11 = (const void *)[v10 bytes];
      unint64_t v12 = [v10 length];
      __compar[0] = MEMORY[0x1E4F143A8];
      __compar[1] = 3221225472;
      __compar[2] = __fixedWidthStringSetContains_block_invoke;
      __compar[3] = &__block_descriptor_40_e15_i24__0r_v8r_v16l;
      size_t v15 = 2 * a2;
      BOOL v8 = bsearch_b((char *)__compar - ((v15 + 16) & 0xFFFFFFFFFFFFFFF0), v11, v12 / v15, v15, __compar) != 0;
    }
    else
    {
      BOOL v8 = 0;
    }
  }

  return v8;
}

uint64_t __fixedWidthStringSetContains_block_invoke(uint64_t a1, void *__s1, void *__s2)
{
  return memcmp(__s1, __s2, *(void *)(a1 + 32));
}

void sub_1CA813BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA814DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30271(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__30272(uint64_t a1)
{
}

void sub_1CA815168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2BirthdayExtractionWithSupervisionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 20) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2re2::Compiler::Compile(this, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          BOOL v53 = v19 != 0;
          uint64_t v54 = 16;
          goto LABEL_88;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 20) |= 0x20u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_70:
          BOOL v53 = v26 != 0;
          uint64_t v54 = 19;
          goto LABEL_88;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_74:
          uint64_t v55 = 8;
          goto LABEL_83;
        case 4u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 20) |= 8u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  uint64_t v38 = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v38 = 0;
          }
LABEL_78:
          BOOL v53 = v38 != 0;
          uint64_t v54 = 17;
          goto LABEL_88;
        case 5u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 20) |= 2u;
          while (2)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
              *(void *)(a2 + v44) = v45 + 1;
              v32 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_82:
          uint64_t v55 = 12;
LABEL_83:
          *(_DWORD *)(a1 + v55) = v32;
          continue;
        case 6u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          *(unsigned char *)(a1 + 20) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v50 = *v3;
        unint64_t v51 = *(void *)(a2 + v50);
        if (v51 == -1 || v51 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
        *(void *)(a2 + v5re2::Compiler::Compile(this, 0) = v51 + 1;
        v49 |= (unint64_t)(v52 & 0x7F) << v47;
        if ((v52 & 0x80) == 0) {
          goto LABEL_85;
        }
        v47 += 7;
        BOOL v14 = v48++ >= 9;
        if (v14)
        {
          uint64_t v49 = 0;
          goto LABEL_87;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_85:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v49 = 0;
      }
LABEL_87:
      BOOL v53 = v49 != 0;
      uint64_t v54 = 18;
LABEL_88:
      *(unsigned char *)(a1 + v54) = v53;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA81DD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA81E82C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA81FE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CA8217C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA821898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA821E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31651(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__31652(uint64_t a1)
{
}

uint64_t re2::BitState::BitState(uint64_t this, re2::Prog *a2)
{
  *(void *)this = a2;
  *(void *)(this + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 4re2::Compiler::Compile(this, 0) = 0;
  *(unsigned char *)(this + 42) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(void *)(this + 8re2::Compiler::Compile(this, 0) = 0;
  *(_DWORD *)(this + 8_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = 0;
  return this;
}

{
  *(void *)this = a2;
  *(void *)(this + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 4re2::Compiler::Compile(this, 0) = 0;
  *(unsigned char *)(this + 42) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(void *)(this + 8re2::Compiler::Compile(this, 0) = 0;
  *(_DWORD *)(this + 8_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = 0;
  return this;
}

void re2::BitState::~BitState(re2::BitState *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    MEMORY[0x1CB79A8A0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1050C80606E6C2FLL);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    MEMORY[0x1CB79A8A0](v4, 0x50C80EE9192B6);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    MEMORY[0x1CB79A8A0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    MEMORY[0x1CB79A8A0](v3, 0x1050C80606E6C2FLL);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    MEMORY[0x1CB79A8A0](v4, 0x50C80EE9192B6);
  }
}

void re2::BitState::GrowStack(re2::BitState *this)
{
  *((_DWORD *)this + 27) *= 2;
  operator new[]();
}

void sub_1CA822578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::BitState::Push(uint64_t this, int a2, const char *a3, int a4)
{
  if (*(_DWORD *)(this + 104) >= *(_DWORD *)(this + 108)) {
    re2::BitState::GrowStack((re2::BitState *)this);
  }
  if ((~*(_DWORD *)(*(void *)(*(void *)this + 32) + 8 * a2) & 7) != 0)
  {
    if (a4)
    {
LABEL_5:
      uint64_t v4 = *(void *)(this + 96);
      uint64_t v5 = *(int *)(this + 104);
      *(_DWORD *)(this + 104) = v5 + 1;
      uint64_t v6 = v4 + 16 * v5;
      *(void *)(v6 + _Block_object_dispose(&STACK[0x2A0], 8) = a3;
      *(_DWORD *)uint64_t v6 = a2;
      *(_DWORD *)(v6 + 4) = a4;
      return this;
    }
    unsigned int v7 = a2 + a2 * *(_DWORD *)(this + 16) + a3 - *(_DWORD *)(this + 8);
    uint64_t v8 = *(void *)(this + 80);
    uint64_t v9 = v7 >> 5;
    int v10 = *(_DWORD *)(v8 + 4 * v9);
    int v11 = 1 << v7;
    if ((v11 & v10) == 0)
    {
      *(_DWORD *)(v8 + 4 * v9) = v11 | v10;
      goto LABEL_5;
    }
  }
  return this;
}

uint64_t re2::BitState::TrySearch(re2::BitState *this, int a2, const char *a3)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((int *)this + 4);
  *((_DWORD *)this + 26) = 0;
  if (*((int *)this + 27) <= 0) {
    re2::BitState::GrowStack(this);
  }
  if ((~*(_DWORD *)(*(void *)(*(void *)this + 32) + 8 * a2) & 7) != 0)
  {
    unsigned int v6 = a2 + a2 * *((_DWORD *)this + 4) + a3 - *((_DWORD *)this + 2);
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = v6 >> 5;
    int v9 = *(_DWORD *)(v7 + 4 * v8);
    int v10 = 1 << v6;
    if ((v10 & v9) == 0)
    {
      *(_DWORD *)(v7 + 4 * v_Block_object_dispose(&STACK[0x2A0], 8) = v10 | v9;
      uint64_t v11 = *((void *)this + 12);
      uint64_t v12 = *((int *)this + 26);
      *((_DWORD *)this + 26) = v12 + 1;
      uint64_t v13 = v11 + 16 * v12;
      *(void *)(v13 + _Block_object_dispose(&STACK[0x2A0], 8) = a3;
      *(_DWORD *)uint64_t v13 = a2;
      *(_DWORD *)(v13 + 4) = 0;
    }
  }
  int v14 = *((_DWORD *)this + 26);
  if (v14 < 1)
  {
LABEL_76:
    char v79 = 0;
    return v79 & 1;
  }
  char v79 = 0;
  int v15 = (unsigned char *)(v4 + v5);
LABEL_10:
  unsigned int v16 = v14 - 1;
  *((_DWORD *)this + 26) = v16;
  uint64_t v17 = *((void *)this + 12) + 16 * v16;
  unsigned int v18 = *(unsigned char **)(v17 + 8);
  signed int v19 = *(_DWORD *)v17;
  int v20 = *(_DWORD *)(v17 + 4);
  while (2)
  {
    uint64_t v21 = *(void *)(*(void *)this + 32);
    char v22 = (unsigned int *)(v21 + 8 * v19);
    unint64_t v23 = *v22;
    uint64_t v24 = v19;
    switch(v23 & 7)
    {
      case 0uLL:
        if (v20 == 1)
        {
          int v20 = 0;
          signed int v19 = *(_DWORD *)(v21 + 8 * v19 + 4);
        }
        else
        {
          if (v20) {
            goto LABEL_68;
          }
          int v25 = *((_DWORD *)this + 26);
          if (v25 >= *((_DWORD *)this + 27)) {
            re2::BitState::GrowStack(this);
          }
          uint64_t v26 = *((void *)this + 12);
          *((_DWORD *)this + 26) = v25 + 1;
          uint64_t v27 = v26 + 16 * v25;
          *(void *)(v27 + _Block_object_dispose(&STACK[0x2A0], 8) = v18;
          *(_DWORD *)uint64_t v27 = v19;
          *(_DWORD *)(v27 + 4) = 1;
          int v20 = 0;
LABEL_38:
          signed int v19 = *v22 >> 3;
        }
        goto LABEL_53;
      case 1uLL:
        unint64_t v28 = v23 >> 3;
        int v29 = *(_DWORD *)(v21 + 8 * (v23 >> 3)) & 7;
        if (v29 == 2)
        {
          uint64_t v30 = v21 + 8 * v24;
          int v33 = *(_DWORD *)(v30 + 4);
          unsigned int v31 = (signed int *)(v30 + 4);
          int v32 = v33;
          if (*((_DWORD *)this + 26) >= *((_DWORD *)this + 27)) {
            re2::BitState::GrowStack(this);
          }
          if ((~*(_DWORD *)(v21 + 8 * v32) & 7) != 0)
          {
            unsigned int v34 = v32 + v32 * *((_DWORD *)this + 4) + v18 - *((_DWORD *)this + 2);
            uint64_t v35 = *((void *)this + 10);
            uint64_t v36 = v34 >> 5;
            int v37 = *(_DWORD *)(v35 + 4 * v36);
            int v38 = 1 << v34;
            if ((v38 & v37) == 0)
            {
              *(_DWORD *)(v35 + 4 * v36) = v38 | v37;
              uint64_t v39 = *((void *)this + 12);
              uint64_t v40 = *((int *)this + 26);
              *((_DWORD *)this + 26) = v40 + 1;
              uint64_t v41 = v39 + 16 * v40;
              *(void *)(v41 + _Block_object_dispose(&STACK[0x2A0], 8) = v18;
              *(_DWORD *)uint64_t v41 = v32;
              *(_DWORD *)(v41 + 4) = 0;
            }
          }
          signed int v19 = *v31;
          unsigned int v18 = v15;
          goto LABEL_53;
        }
        if (*((_DWORD *)this + 26) >= *((_DWORD *)this + 27)) {
          re2::BitState::GrowStack(this);
        }
        if (v29 != 7)
        {
          unsigned int v51 = v28 + v28 * *((_DWORD *)this + 4) + v15 - *((_DWORD *)this + 2);
          uint64_t v52 = *((void *)this + 10);
          uint64_t v53 = v51 >> 5;
          int v54 = *(_DWORD *)(v52 + 4 * v53);
          int v55 = 1 << v51;
          if ((v55 & v54) == 0)
          {
            *(_DWORD *)(v52 + 4 * v53) = v55 | v54;
            uint64_t v56 = *((void *)this + 12);
            uint64_t v57 = *((int *)this + 26);
            *((_DWORD *)this + 26) = v57 + 1;
            uint64_t v58 = (void *)(v56 + 16 * v57);
            v58[1] = v15;
            *uint64_t v58 = v28;
          }
        }
        goto LABEL_38;
      case 2uLL:
        if (v18 >= v15) {
          int v42 = -1;
        }
        else {
          int v42 = *v18;
        }
        uint64_t v59 = v21 + 8 * v19;
        if (*((unsigned char *)v22 + 6)) {
          BOOL v60 = (v42 - 65) >= 0x1A;
        }
        else {
          BOOL v60 = 1;
        }
        int v61 = v42 + 32;
        if (v60) {
          int v61 = v42;
        }
        if (v61 < *(unsigned __int8 *)(v59 + 4) || v61 > *((unsigned __int8 *)v22 + 5)) {
          goto LABEL_9;
        }
        signed int v19 = v23 >> 3;
        ++v18;
        goto LABEL_53;
      case 3uLL:
        if (!v20)
        {
          uint64_t v43 = v21 + 8 * v19;
          unsigned int v46 = *(_DWORD *)(v43 + 4);
          unint64_t v45 = (int *)(v43 + 4);
          uint64_t v44 = v46;
          if ((v46 & 0x80000000) == 0 && (int)v44 < *((_DWORD *)this + 18))
          {
            unint64_t v23 = *(void *)(*((void *)this + 8) + 8 * v44);
            int v47 = *((_DWORD *)this + 26);
            if (v47 >= *((_DWORD *)this + 27)) {
              re2::BitState::GrowStack(this);
            }
            uint64_t v48 = *((void *)this + 12);
            *((_DWORD *)this + 26) = v47 + 1;
            uint64_t v49 = v48 + 16 * v47;
            *(void *)(v49 + _Block_object_dispose(&STACK[0x2A0], 8) = v23;
            *(_DWORD *)uint64_t v49 = v19;
            *(_DWORD *)(v49 + 4) = 1;
            *(void *)(*((void *)this + 8) + 8 * *v45) = v18;
            LODWORD(v23) = *v22;
          }
          int v20 = 0;
LABEL_52:
          signed int v19 = v23 >> 3;
LABEL_53:
          unsigned int v62 = v19 + v19 * *((_DWORD *)this + 4) + v18 - *((_DWORD *)this + 2);
          uint64_t v63 = *((void *)this + 10);
          uint64_t v64 = v62 >> 5;
          int v65 = *(_DWORD *)(v63 + 4 * v64);
          int v66 = 1 << v62;
          if ((v66 & v65) != 0) {
            goto LABEL_9;
          }
          *(_DWORD *)(v63 + 4 * v64) = v66 | v65;
          continue;
        }
        if (v20 == 1)
        {
          *(void *)(*((void *)this + 8) + 8 * *(int *)(v21 + 8 * v19 + 4)) = v18;
        }
        else
        {
LABEL_68:
          LOBYTE(v8re2::Compiler::Compile(this, 0) = 0;
          int64_t v70 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v81);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Bad arg in kInstCapture: ", 25);
          std::ostream::operator<<();
          LogMessage::~LogMessage(&v80);
        }
LABEL_9:
        int v14 = *((_DWORD *)this + 26);
        if (v14 <= 0) {
          return v79 & 1;
        }
        goto LABEL_10;
      case 4uLL:
        int v50 = *(_DWORD *)(v21 + 8 * v19 + 4);
        if ((v50 & ~re2::Prog::EmptyFlags((uint64_t)this + 24, v18)) != 0) {
          goto LABEL_9;
        }
        goto LABEL_52;
      case 5uLL:
        if (*((unsigned char *)this + 42) && v18 != (unsigned char *)(*((void *)this + 1) + *((int *)this + 4))) {
          goto LABEL_9;
        }
        int v67 = *((_DWORD *)this + 14);
        if (!v67) {
          goto LABEL_78;
        }
        *(void *)(*((void *)this + 8) + _Block_object_dispose(&STACK[0x2A0], 8) = v18;
        uint64_t v68 = *((void *)this + 6);
        if (!*(void *)v68)
        {
          if (v67 < 1) {
            goto LABEL_72;
          }
          goto LABEL_70;
        }
        if (!*((unsigned char *)this + 41))
        {
LABEL_78:
          char v79 = 1;
          return v79 & 1;
        }
        if ((unint64_t)v18 > *(void *)v68 + *(int *)(v68 + 8) && v67 > 0)
        {
LABEL_70:
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          do
          {
            long long v73 = (uint64_t *)(*((void *)this + 8) + v71);
            uint64_t v74 = *v73;
            LODWORD(v73) = *((_DWORD *)v73 + 2) - *v73;
            uint64_t v75 = *((void *)this + 6) + v71;
            *(void *)uint64_t v75 = v74;
            *(_DWORD *)(v75 + _Block_object_dispose(&STACK[0x2A0], 8) = v73;
            ++v72;
            v71 += 16;
          }
          while (v72 < *((int *)this + 14));
        }
LABEL_72:
        if (!*((unsigned char *)this + 41)) {
          goto LABEL_78;
        }
        char v79 = 1;
        if (v18 != (unsigned char *)(*((void *)this + 1) + *((int *)this + 4))) {
          goto LABEL_9;
        }
        return v79 & 1;
      case 6uLL:
        goto LABEL_52;
      default:
        LOBYTE(v8re2::Compiler::Compile(this, 0) = 0;
        long long v76 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Unexpected opcode: ", 19);
        long long v77 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" arg ", 5);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v80);
        goto LABEL_76;
    }
  }
}

void sub_1CA822C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::BitState::Search(re2::BitState *this, const re2::StringPiece *a2, const re2::StringPiece *a3, char a4, char a5, re2::StringPiece *a6, int a7)
{
  uint64_t v7 = *(void *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 2);
  *((void *)this + 1) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  uint64_t v8 = *(void *)a3;
  *((void *)this + 3) = *(void *)a3;
  int v9 = (void *)((char *)this + 24);
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x2A0], 8) = v7;
  if (!v8)
  {
    uint64_t v10 = *(void *)a2;
    *((_DWORD *)this + _Block_object_dispose(&STACK[0x2A0], 8) = *((_DWORD *)a2 + 2);
    *int v9 = v10;
  }
  uint64_t v11 = *(void *)this;
  if (!**(unsigned char **)this || *v9 == *(void *)a2)
  {
    int v12 = *(unsigned __int8 *)(v11 + 1);
    if (!*(unsigned char *)(v11 + 1) || *((void *)this + 3) + *((int *)this + 8) == *(void *)a2 + *((int *)a2 + 2))
    {
      if (**(unsigned char **)this) {
        a4 = 1;
      }
      *((unsigned char *)this + 4re2::Compiler::Compile(this, 0) = a4;
      if (v12) {
        a5 = 1;
      }
      *((unsigned char *)this + 41) = a5;
      *((unsigned char *)this + 42) = v12;
      *((void *)this + 6) = a6;
      *((_DWORD *)this + 14) = a7;
      if (a7 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = *((void *)this + 6) + v16;
          *(void *)uint64_t v18 = 0;
          *(_DWORD *)(v18 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
          ++v17;
          v16 += 16;
        }
        while (v17 < *((int *)this + 14));
        uint64_t v11 = *(void *)this;
      }
      uint64_t v19 = *(int *)(v11 + 12) + *(int *)(v11 + 12) * (uint64_t)*((int *)a2 + 2);
      uint64_t v21 = v19 + 31;
      BOOL v20 = v19 < -31;
      uint64_t v22 = v19 + 62;
      if (!v20) {
        uint64_t v22 = v21;
      }
      *((_DWORD *)this + 22) = v22 >> 5;
      operator new[]();
    }
  }
  return 0;
}

uint64_t re2::Prog::SearchBitState(uint64_t a1, int *a2, const re2::StringPiece *a3, int a4, int a5, re2::StringPiece *a6, int a7)
{
  int v7 = a7;
  uint64_t v8 = a6;
  v26[0] = 0;
  v26[1] = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  if (a7 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a7;
  }
  long long v20 = 0uLL;
  long long v21 = 0uLL;
  if (a7 >= 1) {
    int v12 = a6;
  }
  else {
    int v12 = (re2::StringPiece *)v26;
  }
  long long v19 = 0uLL;
  if (a5 == 2)
  {
    a7 = v11;
    a6 = v12;
  }
  v18[0] = a1;
  v18[1] = 0;
  BYTE8(v2re2::Compiler::Compile(this, 0) = 0;
  DWORD2(v21) = 0;
  DWORD2(v23) = 0;
  char v13 = a5 == 2 || a4 == 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if ((re2::BitState::Search((re2::BitState *)v18, (const re2::StringPiece *)a2, a3, v13, a5 != 0, a6, a7) & 1) == 0) {
    goto LABEL_17;
  }
  if (a5 == 2)
  {
    int v14 = (re2::StringPiece *)v26;
    if (v7 >= 1) {
      int v14 = v8;
    }
    if (*(void *)v12 + *((int *)v14 + 2) != *(void *)a2 + a2[2])
    {
LABEL_17:
      uint64_t v15 = 0;
      uint64_t v16 = v23;
      if (!(void)v23) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  uint64_t v15 = 1;
  uint64_t v16 = v23;
  if ((void)v23) {
LABEL_18:
  }
    MEMORY[0x1CB79A8A0](v16, 0x1000C8052888210);
LABEL_19:
  if (v24) {
    MEMORY[0x1CB79A8A0](v24, 0x1050C80606E6C2FLL);
  }
  if ((void)v22) {
    MEMORY[0x1CB79A8A0](v22, 0x50C80EE9192B6);
  }
  return v15;
}

void sub_1CA82302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __sortLocations_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 compare:a2];
}

Class __getPSUSummarizationPipelineClass_block_invoke(uint64_t a1)
{
  if (!ProactiveSummarizationLibraryCore_frameworkLibrary_32693) {
    ProactiveSummarizationLibraryCore_frameworkLibrary_32693 = _sl_dlopen();
  }
  Class result = objc_getClass("PSUSummarizationPipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPSUSummarizationPipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ProactiveSummarizationLibraryCore_block_invoke_32694()
{
  uint64_t result = _sl_dlopen();
  ProactiveSummarizationLibraryCore_frameworkLibrary_32693 = result;
  return result;
}

uint64_t __Block_byref_object_copy__32703(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__32704(uint64_t a1)
{
}

void sub_1CA83124C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  objc_begin_catch(a1);
  JUMPOUT(0x1CA831200);
}

uint64_t __Block_byref_object_copy__32811(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__32812(uint64_t a1)
{
}

void sub_1CA836830(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SGDCKEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
        goto LABEL_73;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_73;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_73;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 120;
        goto LABEL_73;
      case 5u:
        *(unsigned char *)(a1 + 140) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v58 = 8;
        goto LABEL_97;
      case 6u:
        *(unsigned char *)(a1 + 140) |= 2u;
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v58 = 16;
LABEL_97:
        *(void *)(a1 + v5_Block_object_dispose(&STACK[0x2A0], 8) = v23;
        goto LABEL_74;
      case 7u:
        uint64_t v26 = objc_alloc_init(SGDCKTimeRange);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (SGDCKTimeRangeReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_99;
        }
        goto LABEL_64;
      case 8u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 140) |= 0x10u;
        while (2)
        {
          uint64_t v30 = *v3;
          uint64_t v31 = *(void *)(a2 + v30);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v3re2::Compiler::Compile(this, 0) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              BOOL v15 = v28++ >= 9;
              if (v15)
              {
                uint64_t v29 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_79:
        BOOL v56 = v29 != 0;
        uint64_t v57 = 136;
        goto LABEL_84;
      case 9u:
        uint64_t v26 = objc_alloc_init(SGDCKLocation);
        [(id)a1 addLocations:v26];
        if (!PBReaderPlaceMark() || (SGDCKLocationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_99;
        }
        goto LABEL_64;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_73;
      case 0xBu:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 140) |= 0x20u;
        while (2)
        {
          uint64_t v37 = *v3;
          uint64_t v38 = *(void *)(a2 + v37);
          unint64_t v39 = v38 + 1;
          if (v38 == -1 || v39 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                uint64_t v36 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v36 = 0;
        }
LABEL_83:
        BOOL v56 = v36 != 0;
        uint64_t v57 = 137;
LABEL_84:
        *(unsigned char *)(a1 + v57) = v56;
        goto LABEL_74;
      case 0xCu:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 96;
        goto LABEL_73;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_73;
      case 0xEu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 112;
        goto LABEL_73;
      case 0xFu:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(unsigned char *)(a1 + 140) |= 8u;
        while (2)
        {
          uint64_t v44 = *v3;
          uint64_t v45 = *(void *)(a2 + v44);
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              BOOL v15 = v42++ >= 9;
              if (v15)
              {
                LODWORD(v43) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v43) = 0;
        }
LABEL_88:
        *(_DWORD *)(a1 + 32) = v43;
        goto LABEL_74;
      case 0x10u:
        uint64_t v26 = objc_alloc_init(SGDCKInteractionInfo);
        objc_storeStrong((id *)(a1 + 72), v26);
        if (PBReaderPlaceMark() && SGDCKInteractionInfoReadFrom((uint64_t)v26, a2))
        {
LABEL_64:
          PBReaderRecallMark();

LABEL_74:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_99:

        return 0;
      case 0x11u:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(unsigned char *)(a1 + 140) |= 4u;
        while (2)
        {
          uint64_t v51 = *v3;
          uint64_t v52 = *(void *)(a2 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v15 = v49++ >= 9;
              if (v15)
              {
                uint64_t v50 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v50 = 0;
        }
LABEL_92:
        *(void *)(a1 + 24) = -(v50 & 1) ^ (v50 >> 1);
        goto LABEL_74;
      case 0x12u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 88;
LABEL_73:
        int v55 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_74;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_74;
    }
  }
}

void sub_1CA83A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

Class __getFKSuggestionsWalletOrderAttachmentClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!FinanceKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __FinanceKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E65BC140;
    uint64_t v8 = 0;
    FinanceKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!FinanceKitLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FinanceKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"SGWalletOrderAttachmentDissector.m", 27, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FKSuggestionsWalletOrderAttachment");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getFKSuggestionsWalletOrderAttachmentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"SGWalletOrderAttachmentDissector.m", 28, @"Unable to find class %s", "FKSuggestionsWalletOrderAttachment");

LABEL_10:
    __break(1u);
  }
  getFKSuggestionsWalletOrderAttachmentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *walletOrderStateDescription(int a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  Class result = @"SGRealtimeWalletOrderStateNew";
  switch(a1)
  {
    case 0:
      uint64_t v3 = sgLogHandle();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = (objc_class *)objc_opt_class();
        uint64_t v5 = NSStringFromClass(v4);
        int v6 = 138412546;
        long long v7 = v5;
        __int16 v8 = 1024;
        int v9 = 0;
        _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "%@, Error in returning string for wallet order state %u:", (uint8_t *)&v6, 0x12u);
      }
      Class result = @"SGRealtimeWalletOrderStateUnknown";
      break;
    case 2:
      Class result = @"SGRealtimeWalletOrderStateUpdate";
      break;
    case 3:
      Class result = @"SGRealtimeWalletOrderStateDuplicate";
      break;
    case 4:
      Class result = @"SGRealtimeWalletOrderStateCancellation";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __FinanceKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FinanceKitLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t stateForWalletOrderString(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isEqualToString:@"SGRealtimeWalletOrderStateNew"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletOrderStateUpdate"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletOrderStateCancellation"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"SGRealtimeWalletOrderStateDuplicate"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = (objc_class *)objc_opt_class();
      int v6 = NSStringFromClass(v5);
      int v7 = 138412546;
      __int16 v8 = v6;
      __int16 v9 = 2112;
      id v10 = v1;
      _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "%@, Error in returning wallet order state for string %@:", (uint8_t *)&v7, 0x16u);
    }
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1CA83C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33696(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__33697(uint64_t a1)
{
}

void sub_1CA83C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA83CAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33765(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__33766(uint64_t a1)
{
}

id getTokenizerDispatchQueue()
{
  if (getTokenizerDispatchQueue__pasOnceToken2 != -1) {
    dispatch_once(&getTokenizerDispatchQueue__pasOnceToken2, &__block_literal_global_326_33929);
  }
  id v0 = (void *)getTokenizerDispatchQueue__pasExprOnceResult;
  return v0;
}

void __getTokenizerDispatchQueue_block_invoke()
{
  id v0 = (void *)MEMORY[0x1CB79B230]();
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_BACKGROUND, 0);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.suggestions.ml.tokenizing", v2);
  uint64_t v4 = (void *)getTokenizerDispatchQueue__pasExprOnceResult;
  getTokenizerDispatchQueue__pasExprOnceResult = (uint64_t)v3;
}

void ___enumerateTokensInRange_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = (void *)MEMORY[0x1CB79B230]();
  int v6 = (void *)NLTaggerCopyTagForCurrentToken();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (a3) {
    *a3 = 0;
  }
}

uint64_t _createNLPTagger(int a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v1 = (void *)MEMORY[0x1E4F5C910];
  if (!a1) {
    id v1 = (void *)MEMORY[0x1E4F5C920];
  }
  v9[0] = *v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
  uint64_t v3 = *MEMORY[0x1E4F5C960];
  v7[0] = *MEMORY[0x1E4F5C958];
  v7[1] = v3;
  v8[0] = MEMORY[0x1E4F1CC38];
  v8[1] = MEMORY[0x1E4F1CC38];
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  uint64_t v5 = NLTaggerCreate();

  return v5;
}

void sub_1CA83EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34061(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__34062(uint64_t a1)
{
}

void sub_1CA83EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::ParseState::ParseState(uint64_t result, int a2, _OWORD *a3, uint64_t a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2A0], 8) = *a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = 0;
  if ((a2 & 0x20) != 0) {
    int v4 = 255;
  }
  else {
    int v4 = 1114111;
  }
  *(_DWORD *)(result + 4re2::Compiler::Compile(this, 0) = 0;
  *(_DWORD *)(result + 44) = v4;
  return result;
}

{
  int v4;

  *(_DWORD *)uint64_t result = a2;
  *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2A0], 8) = *a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = 0;
  if ((a2 & 0x20) != 0) {
    int v4 = 255;
  }
  else {
    int v4 = 1114111;
  }
  *(_DWORD *)(result + 4re2::Compiler::Compile(this, 0) = 0;
  *(_DWORD *)(result + 44) = v4;
  return result;
}

void re2::Regexp::ParseState::~ParseState(re2::Regexp::ParseState *this)
{
  for (uint64_t i = (re2::Regexp *)*((void *)this + 4); i; uint64_t i = v2)
  {
    uint64_t v2 = (re2::Regexp *)*((void *)i + 2);
    *((void *)i + 2) = 0;
    if (*(unsigned char *)i == 22)
    {
      uint64_t v3 = *((void *)i + 4);
      if (v3)
      {
        if (*(char *)(v3 + 23) < 0) {
          operator delete(*(void **)v3);
        }
        MEMORY[0x1CB79A8C0](v3, 0x1012C40EC159624);
      }
    }
    re2::Regexp::Decref(i);
  }
}

{
  re2::Regexp *i;
  re2::Regexp *v2;
  uint64_t v3;

  for (uint64_t i = (re2::Regexp *)*((void *)this + 4); i; uint64_t i = v2)
  {
    uint64_t v2 = (re2::Regexp *)*((void *)i + 2);
    *((void *)i + 2) = 0;
    if (*(unsigned char *)i == 22)
    {
      uint64_t v3 = *((void *)i + 4);
      if (v3)
      {
        if (*(char *)(v3 + 23) < 0) {
          operator delete(*(void **)v3);
        }
        MEMORY[0x1CB79A8C0](v3, 0x1012C40EC159624);
      }
    }
    re2::Regexp::Decref(i);
  }
}

re2::Regexp *re2::Regexp::ParseState::FinishRegexp(re2::Regexp::ParseState *this, re2::Regexp *a2)
{
  if (a2)
  {
    *((void *)a2 + 2) = 0;
    if (*(unsigned char *)a2 == 20)
    {
      if (*((void *)a2 + 4))
      {
        *((void *)a2 + 4) = 0;
        operator new[]();
      }
    }
  }
  return a2;
}

uint64_t re2::Regexp::ParseState::PushRegexp(re2::Regexp::ParseState *this, re2::Regexp *a2)
{
  re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, -1, 0);
  unsigned int v4 = *(unsigned __int8 *)a2;
  if (v4 != 20)
  {
    if (v4 > 0x15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v5 = *((void *)a2 + 4);
  int v6 = *(_DWORD *)(v5 + 8);
  if (v6 == 2)
  {
    int v10 = *(_DWORD *)(*(void *)(v5 + 16) + 28);
    if ((v10 - 65) > 0x19) {
      goto LABEL_19;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    uint64_t v11 = v5 + 24;
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_19;
    }
    int v7 = v10 + 32;
    uint64_t v14 = v11;
    do
    {
      int v15 = *(_DWORD *)(v12 + 32);
      BOOL v16 = v15 < v7;
      if (v15 >= v7) {
        uint64_t v17 = (uint64_t *)v12;
      }
      else {
        uint64_t v17 = (uint64_t *)(v12 + 8);
      }
      if (!v16) {
        uint64_t v14 = v12;
      }
      uint64_t v12 = *v17;
    }
    while (*v17);
    if (v14 == v11 || *(_DWORD *)(v14 + 28) > v7) {
      goto LABEL_19;
    }
    re2::Regexp::Decref(a2);
    __int16 v8 = (re2::Regexp *)mallocRegexp();
    a2 = v8;
    LOWORD(v9) = *(_WORD *)this;
    *(_WORD *)__int16 v8 = 3;
    LOWORD(v9) = v9 | 1;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    int v7 = *(_DWORD *)(*(void *)(v5 + 16) + 28);
    re2::Regexp::Decref(a2);
    __int16 v8 = (re2::Regexp *)mallocRegexp();
    a2 = v8;
    int v9 = *(_DWORD *)this;
    *(_WORD *)__int16 v8 = 3;
LABEL_5:
    *((_WORD *)v8 + 1) = v9;
    *((_WORD *)a2 + 2) = 1;
    *(_OWORD *)((char *)a2 + 22) = 0u;
    *(_OWORD *)((char *)a2 + 6) = 0u;
    *((_WORD *)a2 + 19) = 0;
    *((_DWORD *)a2 + 6) = v7;
  }
LABEL_19:
  *((unsigned char *)a2 + 1) = re2::Regexp::ComputeSimple(a2);
LABEL_20:
  *((void *)a2 + 2) = *((void *)this + 4);
  *((void *)this + 4) = a2;
  return 1;
}

uint64_t re2::Regexp::ParseState::MaybeConcatString(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
  if (v3)
  {
    unsigned int v4 = (unsigned __int8 *)*((void *)v3 + 2);
    if (v4)
    {
      int v5 = *v3;
      if ((v5 - 3) <= 1)
      {
        int v6 = *v4;
        if ((v6 - 3) <= 1 && ((*((unsigned __int16 *)v4 + 1) ^ *((unsigned __int16 *)v3 + 1)) & 1) == 0)
        {
          if (v6 == 3)
          {
            int v10 = *((_DWORD *)v4 + 6);
            unsigned __int8 *v4 = 4;
            *((_DWORD *)v4 + 6) = 0;
            *((void *)v4 + 4) = 0;
            re2::Regexp::AddRuneToString((uint64_t)v4, v10);
            int v5 = *v3;
          }
          int v11 = *((_DWORD *)v3 + 6);
          if (v5 == 3)
          {
            re2::Regexp::AddRuneToString((uint64_t)v4, v11);
          }
          else
          {
            if (v11 >= 1)
            {
              uint64_t v12 = 0;
              do
                re2::Regexp::AddRuneToString((uint64_t)v4, *(_DWORD *)(*((void *)v3 + 4) + 4 * v12++));
              while (v12 < *((int *)v3 + 6));
            }
            *((_DWORD *)v3 + 6) = 0;
            uint64_t v13 = *((void *)v3 + 4);
            if (v13) {
              MEMORY[0x1CB79A8A0](v13, 0x1000C8052888210);
            }
            *((void *)v3 + 4) = 0;
          }
          if ((a2 & 0x80000000) == 0)
          {
            *uint64_t v3 = 3;
            *((_DWORD *)v3 + 6) = a2;
            *((_WORD *)v3 + 1) = a3;
            return 1;
          }
          *(void *)(a1 + 32) = v4;
          re2::Regexp::Decref((re2::Regexp *)v3);
        }
      }
    }
  }
  return 0;
}

BOOL re2::Regexp::ParseState::IsMarker(uint64_t a1, int a2)
{
  return a2 > 21;
}

unint64_t re2::LookupCaseFold(unint64_t a1, int a2, unsigned int a3)
{
  unint64_t v3 = a1;
  if (a2 < 1)
  {
LABEL_13:
    if (v3 >= a1 + 12 * a2) {
      return 0;
    }
    else {
      return v3;
    }
  }
  else
  {
    int v4 = a2;
    unint64_t v3 = a1;
    while (1)
    {
      unsigned int v7 = v4 >> 1;
      unsigned int v8 = *(_DWORD *)(v3 + 12 * (v4 >> 1));
      if (v8 <= a3 && *(_DWORD *)(v3 + 12 * v7 + 4) >= a3) {
        return v3 + 12 * v7;
      }
      int v5 = v4 - (v7 + 1);
      if (v8 <= a3) {
        unsigned int v6 = v7 + 1;
      }
      else {
        unsigned int v6 = 0;
      }
      v3 += 12 * v6;
      if (v8 <= a3) {
        int v4 = v5;
      }
      else {
        int v4 = v7;
      }
      if (v4 <= 0) {
        goto LABEL_13;
      }
    }
  }
}

uint64_t re2::ApplyFold(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  if (v2 <= 0x3FFFFFFF)
  {
    if (v2 != -1)
    {
      if (v2 != 1) {
        return (v2 + a2);
      }
      goto LABEL_13;
    }
LABEL_8:
    if ((a2 & 0x80000001) == 1) {
      return (a2 + 1);
    }
    else {
      return (a2 - 1);
    }
  }
  if (v2 != 0x40000000)
  {
    if (v2 != 1073741825) {
      return (v2 + a2);
    }
    if ((a2 - *a1)) {
      return a2;
    }
    goto LABEL_8;
  }
  if ((a2 - *a1)) {
    return a2;
  }
LABEL_13:
  if (a2) {
    return (a2 - 1);
  }
  else {
    return (a2 + 1);
  }
}

uint64_t re2::CycleFoldRune(uint64_t this)
{
  int v1 = 289;
  int v2 = (unsigned int *)&re2::unicode_casefold;
  do
  {
    int v5 = v2;
    unsigned int v6 = v1 >> 1;
    unsigned int v7 = v2[3 * (v1 >> 1)];
    if (v7 <= this && v5[3 * v6 + 1] >= this)
    {
      char v8 = this - v7;
      if (this < v7) {
        return this;
      }
LABEL_14:
      int v10 = v5[3 * v6 + 2];
      if (v10 > 0x3FFFFFFF)
      {
        if (v10 == 0x40000000)
        {
          if (v8) {
            return this;
          }
          goto LABEL_25;
        }
        if (v10 != 1073741825) {
          return (v10 + this);
        }
        if (v8) {
          return this;
        }
      }
      else if (v10 != -1)
      {
        if (v10 != 1) {
          return (v10 + this);
        }
LABEL_25:
        if (this) {
          return (this - 1);
        }
        else {
          return (this + 1);
        }
      }
      if ((this & 0x80000001) == 1) {
        return (this + 1);
      }
      else {
        return (this - 1);
      }
    }
    v1 -= v6 + 1;
    BOOL v3 = v7 > this;
    if (v7 <= this) {
      unsigned int v4 = v6 + 1;
    }
    else {
      unsigned int v4 = 0;
    }
    int v2 = &v5[3 * v4];
    if (v3) {
      int v1 = v6;
    }
  }
  while (v1 > 0);
  if (v2 < &re2::num_unicode_casefold)
  {
    unsigned int v9 = *v2;
    unsigned int v6 = v4;
    char v8 = this - v9;
    if (this >= v9) {
      goto LABEL_14;
    }
  }
  return this;
}

uint64_t re2::Regexp::ParseState::PushLiteral(re2::Regexp::ParseState *this, re2 *a2)
{
  int v2 = (int)a2;
  int v4 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 1) != 0 && re2::CycleFoldRune((uint64_t)a2) != a2)
  {
    char v8 = (char *)mallocRegexp();
    __int16 v9 = *(_WORD *)this;
    *(_WORD *)char v8 = 20;
    *((_WORD *)v8 + 1) = v9 & 0xFFFE;
    *((_WORD *)v8 + 2) = 1;
    *((_WORD *)v8 + 19) = 0;
    *(_OWORD *)(v8 + 22) = 0u;
    *(_OWORD *)(v8 + 6) = 0u;
    operator new();
  }
  if (v2 == 10 && (v4 & 0x800) != 0)
  {
    int v5 = (char *)mallocRegexp();
    int v6 = *(_DWORD *)this;
    *(_WORD *)int v5 = 1;
    *((_WORD *)v5 + 1) = v6;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
LABEL_9:
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v5);
    return 1;
  }
  if ((re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, v2, v4) & 1) == 0)
  {
    int v5 = (char *)mallocRegexp();
    __int16 v7 = *(_DWORD *)this;
    *(_WORD *)int v5 = 3;
    *((_WORD *)v5 + 1) = v7;
    *((_WORD *)v5 + 2) = 1;
    *(_OWORD *)(v5 + 22) = 0u;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 6) = 0u;
    *((_DWORD *)v5 + 6) = v2;
    goto LABEL_9;
  }
  return 1;
}

uint64_t re2::Regexp::ParseState::PushCarat(re2::Regexp::ParseState *this)
{
  int v2 = *(_DWORD *)this;
  BOOL v3 = (char *)mallocRegexp();
  int v4 = *(_DWORD *)this;
  *(_OWORD *)(v3 + 6) = 0u;
  *(_OWORD *)(v3 + 22) = 0u;
  *((_WORD *)v3 + 19) = 0;
  if ((v2 & 0x10) != 0) {
    char v5 = 18;
  }
  else {
    char v5 = 14;
  }
  *BOOL v3 = v5;
  v3[1] = 0;
  *((_WORD *)v3 + 1) = v4;
  *((_WORD *)v3 + 2) = 1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushSimpleOp(re2::Regexp::ParseState *a1, char a2)
{
  int v4 = (char *)mallocRegexp();
  __int16 v5 = *(_DWORD *)a1;
  char *v4 = a2;
  v4[1] = 0;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  re2::Regexp::ParseState::PushRegexp(a1, (re2::Regexp *)v4);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushWordBoundary(re2::Regexp::ParseState *this, int a2)
{
  int v4 = (char *)mallocRegexp();
  int v5 = *(_DWORD *)this;
  *(_OWORD *)(v4 + 6) = 0u;
  *(_OWORD *)(v4 + 22) = 0u;
  *((_WORD *)v4 + 19) = 0;
  if (a2) {
    char v6 = 16;
  }
  else {
    char v6 = 17;
  }
  char *v4 = v6;
  v4[1] = 0;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v4);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushDollar(re2::Regexp::ParseState *this)
{
  int v2 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x10) != 0)
  {
    *(_DWORD *)this = v2 | 0x8000;
    int v5 = (char *)mallocRegexp();
    __int16 v6 = *(_DWORD *)this;
    *(_WORD *)int v5 = 19;
    *((_WORD *)v5 + 1) = v6;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v5);
    *(_DWORD *)this = v2;
  }
  else
  {
    BOOL v3 = (char *)mallocRegexp();
    __int16 v4 = *(_DWORD *)this;
    *(_WORD *)BOOL v3 = 15;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  return 1;
}

uint64_t re2::Regexp::ParseState::PushDot(re2::Regexp::ParseState *this)
{
  int v2 = *(_DWORD *)this & 0x808;
  BOOL v3 = (char *)mallocRegexp();
  int v4 = *(_DWORD *)this;
  if (v2 != 8)
  {
    *(_WORD *)BOOL v3 = 20;
    *((_WORD *)v3 + 1) = v4 & 0xFFFE;
    *((_WORD *)v3 + 2) = 1;
    *(_OWORD *)(v3 + 6) = 0u;
    *(_OWORD *)(v3 + 22) = 0u;
    *((_WORD *)v3 + 19) = 0;
    operator new();
  }
  *(_WORD *)BOOL v3 = 12;
  *((_WORD *)v3 + 1) = v4;
  *((_WORD *)v3 + 2) = 1;
  *(_OWORD *)(v3 + 6) = 0u;
  *(_OWORD *)(v3 + 22) = 0u;
  *((_WORD *)v3 + 19) = 0;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushRepeatOp(uint64_t a1, char a2, uint64_t *a3, int a4)
{
  int v5 = *(unsigned __int8 **)(a1 + 32);
  if (v5 && *v5 < 0x16u)
  {
    if (a4) {
      __int16 v10 = *(_WORD *)a1 ^ 0x40;
    }
    else {
      __int16 v10 = *(_DWORD *)a1;
    }
    int v11 = (char *)mallocRegexp();
    *int v11 = a2;
    v11[1] = 0;
    *((_WORD *)v11 + 1) = v10;
    *((_DWORD *)v11 + 1) = 65537;
    *(_OWORD *)(v11 + _Block_object_dispose(&STACK[0x2A0], 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    uint64_t v12 = *(void *)(a1 + 32);
    *((void *)v11 + 2) = *(void *)(v12 + 16);
    *(void *)(v12 + 16) = 0;
    if (*(unsigned char *)v12 == 20)
    {
      if (*(void *)(v12 + 32))
      {
        *(void *)(v12 + 32) = 0;
        operator new[]();
      }
    }
    *((void *)v11 + 1) = v12;
    v11[1] = re2::Regexp::ComputeSimple((re2::Regexp *)v11);
    *(void *)(a1 + 32) = v11;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v7 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v7 = 8;
    uint64_t v8 = *a3;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a3 + 2);
    *(void *)(v7 + _Block_object_dispose(&STACK[0x2A0], 8) = v8;
  }
  return result;
}

uint64_t re2::Regexp::ParseState::PushRepetition(re2::Regexp::ParseState *this, int a2, int a3, const re2::StringPiece *a4, int a5)
{
  if (a3 == -1)
  {
    if (a2 < 1001) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t result = 0;
    uint64_t v10 = *((void *)this + 3);
    int v11 = 9;
    goto LABEL_10;
  }
  if (a3 > 1000 || a2 > 1000 || a3 < a2) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v8 = (unsigned __int8 *)*((void *)this + 4);
  if (!v8 || *v8 >= 0x16u)
  {
    uint64_t result = 0;
    uint64_t v10 = *((void *)this + 3);
    int v11 = 8;
LABEL_10:
    *(_DWORD *)uint64_t v10 = v11;
    uint64_t v12 = *(void *)a4;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a4 + 2);
    *(void *)(v10 + _Block_object_dispose(&STACK[0x2A0], 8) = v12;
    return result;
  }
  if (a5) {
    __int16 v13 = *(_WORD *)this ^ 0x40;
  }
  else {
    __int16 v13 = *(_DWORD *)this;
  }
  uint64_t v14 = (char *)mallocRegexp();
  *(_WORD *)uint64_t v14 = 10;
  *((_WORD *)v14 + 1) = v13;
  *((_DWORD *)v14 + 1) = 65537;
  *(_OWORD *)(v14 + _Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 6) = a3;
  *((_DWORD *)v14 + 7) = a2;
  uint64_t v15 = *((void *)this + 4);
  *((void *)v14 + 2) = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (*(unsigned char *)v15 == 20)
  {
    if (*(void *)(v15 + 32))
    {
      *(void *)(v15 + 32) = 0;
      operator new[]();
    }
  }
  *((void *)v14 + 1) = v15;
  v14[1] = re2::Regexp::ComputeSimple((re2::Regexp *)v14);
  *((void *)this + 4) = v14;
  return 1;
}

uint64_t re2::Regexp::ParseState::DoLeftParen(re2::Regexp::ParseState *this, const re2::StringPiece *a2)
{
  int v4 = (char *)mallocRegexp();
  __int16 v5 = *(_DWORD *)this;
  *(_WORD *)int v4 = 22;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  int v6 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 1re2::Compiler::Compile(this, 0) = v6;
  *((_DWORD *)v4 + 6) = v6;
  if (*(void *)a2) {
    operator new();
  }
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v4);
  return 1;
}

void sub_1CA840E5C(_Unwind_Exception *a1)
{
  MEMORY[0x1CB79A8C0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::ParseState::DoLeftParenNoCapture(re2::Regexp::ParseState *this)
{
  int v2 = (char *)mallocRegexp();
  __int16 v3 = *(_DWORD *)this;
  *(_WORD *)int v2 = 22;
  *((_WORD *)v2 + 1) = v3;
  *((_WORD *)v2 + 2) = 1;
  *(_OWORD *)(v2 + 22) = 0u;
  *((_WORD *)v2 + 19) = 0;
  *(_OWORD *)(v2 + 6) = 0u;
  *((_DWORD *)v2 + 6) = -1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v2);
  return 1;
}

uint64_t re2::Regexp::ParseState::DoVerticalBar(re2::Regexp::ParseState *this)
{
  re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, -1, 0);
  int v2 = (unsigned __int8 *)*((void *)this + 4);
  if (!v2 || *v2 >= 0x16u)
  {
    __int16 v3 = (char *)mallocRegexp();
    __int16 v4 = *(_DWORD *)this;
    *(_WORD *)__int16 v3 = 2;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  re2::Regexp::ParseState::DoCollapse((uint64_t)this, 5);
  __int16 v5 = (unsigned __int8 *)*((void *)this + 4);
  if (v5)
  {
    uint64_t v6 = *((void *)v5 + 2);
    if (v6)
    {
      if (*(unsigned char *)v6 == 23)
      {
        unsigned int v7 = *v5;
        BOOL v8 = v7 > 0x14;
        int v9 = (1 << v7) & 0x101008;
        if (v8 || v9 == 0)
        {
          int v11 = *(unsigned __int8 **)(v6 + 16);
        }
        else
        {
          int v11 = *(unsigned __int8 **)(v6 + 16);
          if (v11)
          {
            int v12 = *v11;
            if (v12 != 20)
            {
              if (v12 != 12)
              {
                if (v12 == 3)
                {
                  *int v11 = 20;
                  *((void *)v11 + 3) = 0;
                  operator new();
                }
                goto LABEL_24;
              }
LABEL_33:
              *((void *)this + 4) = v6;
              re2::Regexp::Decref((re2::Regexp *)v5);
              return 1;
            }
            int v13 = *v5;
            if (v13 == 20)
            {
              re2::CharClassBuilder::AddCharClass(*((re2::CharClassBuilder **)v11 + 4), *((re2::CharClassBuilder **)v5 + 4));
            }
            else
            {
              if (v13 != 3) {
                goto LABEL_27;
              }
              uint64_t v14 = (re2::CharClassBuilder *)*((void *)v11 + 4);
              unsigned int v15 = *((_DWORD *)v5 + 6);
              __int16 v16 = *((_WORD *)v5 + 1);
              re2::CharClassBuilder::AddRange(v14, v15, v15);
              if (v15 - 97 <= 0x19 && (v16 & 1) != 0) {
                re2::CharClassBuilder::AddRange(v14, v15 - 32, v15 - 32);
              }
            }
            int v13 = *v5;
LABEL_27:
            uint64_t v20 = *((void *)v11 + 4);
            if (v13 == 12)
            {
              if (!v20) {
                goto LABEL_32;
              }
            }
            else if (*(_DWORD *)(v20 + 8) != 1114112)
            {
              goto LABEL_33;
            }
            std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(void **)(v20 + 24));
            MEMORY[0x1CB79A8C0](v20, 0x1020C4098A2B122);
LABEL_32:
            *((void *)v11 + 4) = 0;
            *int v11 = 12;
            goto LABEL_33;
          }
        }
LABEL_24:
        *((void *)v5 + 2) = v11;
        *(void *)(v6 + 16) = v5;
        *((void *)this + 4) = v6;
        return 1;
      }
    }
  }
  uint64_t v17 = (char *)mallocRegexp();
  __int16 v18 = *(_DWORD *)this;
  *(_WORD *)uint64_t v17 = 23;
  *((_WORD *)v17 + 1) = v18;
  *((_WORD *)v17 + 2) = 1;
  *((_WORD *)v17 + 19) = 0;
  *(_OWORD *)(v17 + 22) = 0u;
  *(_OWORD *)(v17 + 6) = 0u;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v17);
  return 1;
}

uint64_t re2::Regexp::ParseState::DoCollapse(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 ***)(result + 32);
  if (!v2) {
    goto LABEL_12;
  }
  unsigned int v3 = *(unsigned __int8 *)v2;
  if (v3 <= 0x15)
  {
    int v5 = 0;
    __int16 v4 = *(unsigned __int8 **)(result + 32);
    do
    {
      if (v3 == a2) {
        int v6 = *((unsigned __int16 *)v4 + 3);
      }
      else {
        int v6 = 1;
      }
      __int16 v4 = (unsigned __int8 *)*((void *)v4 + 2);
      v5 += v6;
      if (!v4) {
        break;
      }
      unsigned int v3 = *v4;
    }
    while (v3 <= 0x15);
  }
  else
  {
    __int16 v4 = 0;
  }
  if (v2[2] != v4) {
LABEL_12:
  }
    operator new[]();
  return result;
}

uint64_t re2::Regexp::ParseState::DoConcatenation(re2::Regexp::ParseState *this)
{
  int v2 = (unsigned __int8 *)*((void *)this + 4);
  if (!v2 || *v2 >= 0x16u)
  {
    unsigned int v3 = (char *)mallocRegexp();
    __int16 v4 = *(_DWORD *)this;
    *(_WORD *)unsigned int v3 = 2;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  return re2::Regexp::ParseState::DoCollapse((uint64_t)this, 5);
}

uint64_t re2::Regexp::ParseState::DoRightParen(re2::Regexp **this)
{
  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  int v2 = this[4];
  this[4] = (re2::Regexp *)*((void *)v2 + 2);
  re2::Regexp::Decref(v2);
  re2::Regexp::ParseState::DoCollapse((uint64_t)this, 6);
  unsigned int v3 = this[4];
  if (v3 && (__int16 v4 = (re2::Regexp *)*((void *)v3 + 2)) != 0 && *(unsigned char *)v4 == 22)
  {
    this[4] = (re2::Regexp *)*((void *)v4 + 2);
    *(_DWORD *)this = *((unsigned __int16 *)v4 + 1);
    if (*((int *)v4 + 6) < 1)
    {
      re2::Regexp::Decref(v4);
      __int16 v4 = v3;
    }
    else
    {
      *(unsigned char *)__int16 v4 = 11;
      *((_WORD *)v4 + 3) = 1;
      *((void *)v3 + 2) = 0;
      if (*(unsigned char *)v3 == 20)
      {
        if (*((void *)v3 + 4))
        {
          *((void *)v3 + 4) = 0;
          operator new[]();
        }
      }
      *((void *)v4 + 1) = v3;
      *((unsigned char *)v4 + 1) = re2::Regexp::ComputeSimple(v4);
    }
    re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)this, v4);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    int v6 = this[3];
    *(_DWORD *)int v6 = 6;
    unsigned int v7 = this[1];
    *((_DWORD *)v6 + 4) = *((_DWORD *)this + 4);
    *((void *)v6 + 1) = v7;
  }
  return result;
}

uint64_t re2::Regexp::ParseState::DoAlternation(re2::Regexp **this)
{
  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  int v2 = this[4];
  this[4] = (re2::Regexp *)*((void *)v2 + 2);
  re2::Regexp::Decref(v2);
  return re2::Regexp::ParseState::DoCollapse((uint64_t)this, 6);
}

re2::Regexp *re2::Regexp::ParseState::DoFinish(re2::Regexp **this)
{
  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  int v2 = this[4];
  this[4] = (re2::Regexp *)*((void *)v2 + 2);
  re2::Regexp::Decref(v2);
  re2::Regexp::ParseState::DoCollapse((uint64_t)this, 6);
  unsigned int v3 = this[4];
  if (v3)
  {
    if (*((void *)v3 + 2))
    {
      unsigned int v3 = 0;
      __int16 v4 = this[3];
      *(_DWORD *)__int16 v4 = 6;
      int v5 = this[1];
      *((_DWORD *)v4 + 4) = *((_DWORD *)this + 4);
      *((void *)v4 + 1) = v5;
    }
    else
    {
      this[4] = 0;
      *((void *)v3 + 2) = 0;
      if (*(unsigned char *)v3 == 20 && *((void *)v3 + 4))
      {
        *((void *)v3 + 4) = 0;
        operator new[]();
      }
    }
  }
  else
  {
    this[4] = 0;
  }
  return v3;
}

unsigned __int8 *re2::Regexp::LeadingRegexp(unsigned __int8 *this, re2::Regexp *a2)
{
  int v2 = *this;
  if (v2 == 2) {
    return 0;
  }
  if (v2 == 5 && *((unsigned __int16 *)this + 3) >= 2u)
  {
    if (***((unsigned char ***)this + 1) == 2) {
      return 0;
    }
    else {
      return (unsigned __int8 *)**((void **)this + 1);
    }
  }
  return this;
}

re2::Regexp *re2::Regexp::RemoveLeadingRegexp(re2::Regexp *this, re2::Regexp *a2)
{
  int v2 = this;
  int v3 = *(unsigned __int8 *)this;
  if (v3 != 2)
  {
    if (v3 == 5 && *((unsigned __int16 *)this + 3) >= 2u)
    {
      uint64_t v4 = *((void *)this + 1);
      if (**(unsigned char **)v4 != 2)
      {
        re2::Regexp::Decref(*(re2::Regexp **)v4);
        *(void *)uint64_t v4 = 0;
        int v5 = *((unsigned __int16 *)v2 + 3);
        if (v5 == 2)
        {
          uint64_t v6 = *(void *)(v4 + 8);
          *(void *)(v4 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
          re2::Regexp::Decref(v2);
          return (re2::Regexp *)v6;
        }
        else
        {
          unsigned __int16 v9 = v5 - 1;
          *((_WORD *)v2 + 3) = v9;
          memmove((void *)v4, (const void *)(v4 + 8), 8 * v9);
        }
      }
    }
    else
    {
      __int16 v7 = *((_WORD *)this + 1);
      re2::Regexp::Decref(this);
      int v2 = (re2::Regexp *)mallocRegexp();
      *(_WORD *)int v2 = 2;
      *((_WORD *)v2 + 1) = v7;
      *((_WORD *)v2 + 2) = 1;
      *(_OWORD *)((char *)v2 + 6) = 0u;
      *(_OWORD *)((char *)v2 + 22) = 0u;
      *((_WORD *)v2 + 19) = 0;
    }
  }
  return v2;
}

unsigned __int8 *re2::Regexp::LeadingString(unsigned __int8 *a1, _DWORD *a2, int *a3)
{
  while (1)
  {
    int v3 = *a1;
    if (v3 != 5) {
      break;
    }
    if (!*((_WORD *)a1 + 3))
    {
      *a3 = *((_WORD *)a1 + 1) & 1;
LABEL_11:
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    uint64_t v4 = a1 + 8;
    if (*((_WORD *)a1 + 3) != 1) {
      uint64_t v4 = *(unsigned __int8 **)v4;
    }
    a1 = *(unsigned __int8 **)v4;
  }
  *a3 = *((_WORD *)a1 + 1) & 1;
  if (v3 != 4)
  {
    if (v3 == 3)
    {
      *a2 = 1;
      return a1 + 24;
    }
    goto LABEL_11;
  }
  *a2 = *((_DWORD *)a1 + 6);
  return (unsigned __int8 *)*((void *)a1 + 4);
}

void re2::Regexp::RemoveLeadingString(re2::Regexp *this, re2::Regexp *a2)
{
  unint64_t v3 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(v23, 0, 32);
  while (1)
  {
    int v4 = *(unsigned __int8 *)this;
    if (v4 != 5) {
      break;
    }
    if (v3 <= 3) {
      *((void *)v23 + v3++) = this;
    }
    int v5 = (re2::Regexp *)((char *)this + 8);
    if (*((unsigned __int16 *)this + 3) >= 2u) {
      int v5 = *(re2::Regexp **)v5;
    }
    this = *(re2::Regexp **)v5;
  }
  if (v4 == 3)
  {
LABEL_17:
    *((_DWORD *)this + 6) = 0;
    *(unsigned char *)this = 2;
LABEL_18:
    if ((int)v3 < 1) {
      return;
    }
    goto LABEL_19;
  }
  if (v4 != 4) {
    goto LABEL_18;
  }
  int v6 = *((_DWORD *)this + 6);
  int v7 = v6 - a2;
  if (v6 <= (int)a2)
  {
    uint64_t v9 = *((void *)this + 4);
    if (v9) {
      MEMORY[0x1CB79A8A0](v9, 0x1000C8052888210);
    }
    *((void *)this + 4) = 0;
    goto LABEL_17;
  }
  if (v6 - 1 == a2)
  {
    int v8 = *(_DWORD *)(*((void *)this + 4) + 4 * (int)a2);
    MEMORY[0x1CB79A8A0]();
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 6) = v8;
    *(unsigned char *)this = 3;
    if ((int)v3 < 1) {
      return;
    }
  }
  else
  {
    *((_DWORD *)this + 6) = v7;
    memmove(*((void **)this + 4), (const void *)(*((void *)this + 4) + 4 * (int)a2), 4 * v7);
    if ((int)v3 < 1) {
      return;
    }
  }
LABEL_19:
  unint64_t v10 = v3 + 1;
  do
  {
    int v12 = (long long *)*((void *)v23 + (v10 - 2));
    int v13 = (re2::Regexp *)((char *)v12 + 8);
    if (*((unsigned __int16 *)v12 + 3) >= 2u) {
      int v13 = *(re2::Regexp **)v13;
    }
    if (**(unsigned char **)v13 == 2)
    {
      re2::Regexp::Decref(*(re2::Regexp **)v13);
      *(void *)int v13 = 0;
      unsigned int v14 = *((unsigned __int16 *)v12 + 3);
      if (v14 >= 2)
      {
        if (v14 == 2)
        {
          unsigned int v15 = (long long *)*((void *)v13 + 1);
          *((void *)v13 + 1) = 0;
          long long v16 = *v12;
          long long v17 = v12[1];
          uint64_t v18 = *((void *)v12 + 4);
          uint64_t v19 = *((void *)v15 + 4);
          long long v20 = v15[1];
          *int v12 = *v15;
          v12[1] = v20;
          *((void *)v12 + 4) = v19;
          *((void *)v15 + 4) = v18;
          *unsigned int v15 = v16;
          v15[1] = v17;
          re2::Regexp::Decref((re2::Regexp *)v15);
        }
        else
        {
          unsigned __int16 v11 = v14 - 1;
          *((_WORD *)v12 + 3) = v11;
          memmove(v13, (char *)v13 + 8, 8 * v11);
        }
      }
      else
      {
        LOBYTE(v21) = 0;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Concat of ", 10);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v21);
        *((void *)v12 + 1) = 0;
        *(unsigned char *)int v12 = 2;
      }
    }
    --v10;
  }
  while (v10 > 1);
}

void sub_1CA841C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::FactorAlternation(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return re2::Regexp::FactorAlternationRecursive(a1, a2, a3, 8);
}

uint64_t re2::Regexp::FactorAlternationRecursive(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unsigned int v62 = a3;
  uint64_t v4 = a2;
  unsigned int v61 = a4 - 1;
  if (a4 < 1) {
    return v4;
  }
  if ((a2 & 0x80000000) != 0)
  {
    unsigned int v7 = 0;
    goto LABEL_50;
  }
  unint64_t v6 = 0;
  unsigned int v7 = 0;
  int v8 = 0;
  a3 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    if (v6 >= a2)
    {
      unsigned int v18 = 0;
      unsigned int v19 = 0;
      long long v20 = 0;
      if (v6 == v8) {
        goto LABEL_5;
      }
      goto LABEL_42;
    }
    for (uint64_t i = *(unsigned __int8 ***)(a1 + 8 * v6); ; uint64_t i = (unsigned __int8 **)*v17)
    {
      int v15 = *(unsigned __int8 *)i;
      if (v15 != 5) {
        break;
      }
      int v16 = *((unsigned __int16 *)i + 3);
      if (!*((_WORD *)i + 3))
      {
        unsigned int v18 = 0;
        long long v20 = 0;
        __int16 v21 = *((_WORD *)i + 1);
        goto LABEL_29;
      }
      long long v17 = i + 1;
      if (v16 != 1) {
        long long v17 = (unsigned __int8 **)*v17;
      }
    }
    __int16 v21 = *((_WORD *)i + 1);
    if (v15 == 4)
    {
      unsigned int v18 = *((_DWORD *)i + 6);
      long long v20 = (int *)i[4];
    }
    else
    {
      unint64_t v22 = (unsigned __int8 *)(i + 3);
      unsigned int v18 = v15 == 3;
      if (v15 == 3) {
        long long v20 = (int *)v22;
      }
      else {
        long long v20 = 0;
      }
    }
LABEL_29:
    unsigned int v19 = v21 & 1;
    if (a3 != v19)
    {
LABEL_41:
      if (v6 == v8) {
        goto LABEL_5;
      }
LABEL_42:
      if (v6 != v8 + 1)
      {
        re2::Regexp::LiteralString(v10, (int)v9, a3);
        uint64_t v24 = v8;
        if ((uint64_t)v6 > v8)
        {
          do
            re2::Regexp::RemoveLeadingString(*(re2::Regexp **)(a1 + 8 * v24++), v9);
          while (v6 != v24);
        }
        uint64_t v11 = re2::Regexp::FactorAlternationRecursive(a1 + 8 * v8, (v6 - v8), v62, v61);
        re2::Regexp::ConcatOrAlternate(6, a1 + 8 * v8, v11, v62, 0);
        int v12 = (char *)mallocRegexp();
        *(_WORD *)int v12 = 5;
        *((_WORD *)v12 + 1) = v62;
        *((_WORD *)v12 + 2) = 1;
        *(_OWORD *)(v12 + 6) = 0u;
        *(_OWORD *)(v12 + 22) = 0u;
        *((_WORD *)v12 + 19) = 0;
        operator new[]();
      }
      *(void *)(a1 + 8 * (int)v7++) = *(void *)(a1 + 8 * v8);
      goto LABEL_5;
    }
    if ((int)v9 >= (int)v18) {
      unint64_t v13 = v18;
    }
    else {
      unint64_t v13 = v9;
    }
    if ((int)v13 < 1)
    {
      unsigned int v19 = a3;
      if (v6 != v8) {
        goto LABEL_42;
      }
LABEL_5:
      if (v6 >= a2)
      {
        unint64_t v13 = v9;
      }
      else
      {
        unint64_t v10 = v20;
        unint64_t v13 = v18;
      }
      if (v6 < a2) {
        a3 = v19;
      }
      else {
        a3 = a3;
      }
      if (v6 < a2) {
        int v8 = v6;
      }
      goto LABEL_13;
    }
    uint64_t v23 = 0;
    while (v10[(void)v23] == v20[(void)v23])
    {
      uint64_t v23 = (re2::Regexp *)((char *)v23 + 1);
      if ((re2::Regexp *)v13 == v23) {
        goto LABEL_13;
      }
    }
    unint64_t v13 = (unint64_t)v23;
    unsigned int v19 = a3;
    if (!v23) {
      goto LABEL_41;
    }
LABEL_13:
    ++v6;
    uint64_t v9 = (re2::Regexp *)v13;
  }
  while (v6 != a2 + 1);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_50:
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    int v28 = 0;
    uint64_t v29 = v7 + 1;
    unint64_t v30 = v7;
    while (1)
    {
      uint64_t v31 = v27;
      if (v26 >= v30) {
        break;
      }
      uint64_t v31 = *(re2::Regexp **)(a1 + 8 * v26);
      int v32 = *(unsigned __int8 *)v31;
      if (v32 == 2)
      {
        uint64_t v31 = 0;
        if (!v27) {
          break;
        }
      }
      else
      {
        if (v32 == 5 && *((unsigned __int16 *)v31 + 3) >= 2u)
        {
          if (***((unsigned char ***)v31 + 1) == 2) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = (re2::Regexp *)**((void **)v31 + 1);
          }
        }
        if (!v27) {
          break;
        }
      }
      if (!re2::Regexp::Equal(v27, v31, (re2::Regexp *)a3)) {
        break;
      }
LABEL_55:
      if (++v26 == v29)
      {
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_81;
        }
        return 0;
      }
    }
    if (v26 != v28)
    {
      if (v26 != v28 + 1)
      {
        re2::Regexp::Incref(v27);
        uint64_t v33 = v28;
        uint64_t v34 = v28;
        if ((uint64_t)v26 > v28)
        {
          do
          {
            uint64_t v38 = *(unsigned __int8 **)(a1 + 8 * v34);
            int v39 = *v38;
            if (v39 != 2)
            {
              if (v39 == 5 && *((unsigned __int16 *)v38 + 3) >= 2u)
              {
                uint64_t v40 = *((void *)v38 + 1);
                if (**(unsigned char **)v40 != 2)
                {
                  re2::Regexp::Decref(*(re2::Regexp **)v40);
                  *(void *)uint64_t v40 = 0;
                  int v41 = *((unsigned __int16 *)v38 + 3);
                  if (v41 == 2)
                  {
                    uint64_t v60 = v33;
                    uint64_t v42 = v25;
                    uint64_t v43 = *(unsigned __int8 **)(v40 + 8);
                    *(void *)(v40 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
                    re2::Regexp::Decref((re2::Regexp *)v38);
                    uint64_t v38 = v43;
                    uint64_t v25 = v42;
                    uint64_t v33 = v60;
                  }
                  else
                  {
                    unsigned __int16 v44 = v41 - 1;
                    *((_WORD *)v38 + 3) = v44;
                    memmove((void *)v40, (const void *)(v40 + 8), 8 * v44);
                  }
                }
              }
              else
              {
                __int16 v37 = *((_WORD *)v38 + 1);
                re2::Regexp::Decref(*(re2::Regexp **)(a1 + 8 * v34));
                uint64_t v38 = (unsigned __int8 *)mallocRegexp();
                *(_WORD *)uint64_t v38 = 2;
                *((_WORD *)v38 + 1) = v37;
                *((_WORD *)v38 + 2) = 1;
                *(_OWORD *)(v38 + 6) = 0u;
                *(_OWORD *)(v38 + 22) = 0u;
                *((_WORD *)v38 + 19) = 0;
              }
            }
            *(void *)(a1 + 8 * v34++) = v38;
          }
          while (v26 != v34);
        }
        uint64_t v35 = re2::Regexp::FactorAlternationRecursive(a1 + 8 * v33, (v26 - v28), v62, v61);
        re2::Regexp::ConcatOrAlternate(6, a1 + 8 * v33, v35, v62, 0);
        uint64_t v36 = (char *)mallocRegexp();
        *(_WORD *)uint64_t v36 = 5;
        *((_WORD *)v36 + 1) = v62;
        *((_WORD *)v36 + 2) = 1;
        *(_OWORD *)(v36 + 6) = 0u;
        *(_OWORD *)(v36 + 22) = 0u;
        *((_WORD *)v36 + 19) = 0;
        operator new[]();
      }
      *(void *)(a1 + 8 * (int)v25) = *(void *)(a1 + 8 * v28);
      uint64_t v25 = (v25 + 1);
    }
    if (v26 < v30) {
      int v28 = v26;
    }
    uint64_t v27 = v31;
    goto LABEL_55;
  }
  LODWORD(v25) = 0;
LABEL_81:
  unint64_t v45 = 0;
  int v46 = 0;
  int v47 = 0;
  do
  {
    if (v45 >= v25
      || ((int v48 = **(unsigned __int8 **)(a1 + 8 * v45), v48 != 3) ? (v49 = v48 == 20) : (v49 = 1), !v49))
    {
      if (v45 != v47)
      {
        if (v45 != v47 + 1)
        {
          v66[1] = 0;
          long long v67 = 0u;
          v66[2] = &v67;
          uint64_t v50 = v47;
          v66[0] = 0;
          if ((uint64_t)v45 > v47)
          {
            do
            {
              uint64_t v51 = *(unsigned __int8 **)(a1 + 8 * v50);
              int v52 = *v51;
              if (v52 == 3)
              {
                re2::CharClassBuilder::AddRangeFlags((re2 *)v66, *((unsigned int *)v51 + 6), *((unsigned int *)v51 + 6), *((_WORD *)v51 + 1));
              }
              else
              {
                if (v52 != 20)
                {
                  char v64 = 0;
                  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v65);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"RE2: unexpected op: ", 20);
                  int v55 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" ", 1);
                  re2::Regexp::ToString(&__p);
                }
                uint64_t v53 = *((void *)v51 + 3);
                if (*(_DWORD *)(v53 + 16))
                {
                  uint64_t v54 = *(void *)(v53 + 8);
                  do
                  {
                    re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v66, *(_DWORD *)v54, *(unsigned int *)(v54 + 4));
                    v54 += 8;
                  }
                  while (v54 != *(void *)(v53 + 8) + 8 * *(int *)(v53 + 16));
                }
              }
              re2::Regexp::Decref((re2::Regexp *)v51);
              ++v50;
            }
            while (v45 != v50);
          }
          operator new[]();
        }
        *(void *)(a1 + 8 * v46++) = *(void *)(a1 + 8 * v47);
      }
      if (v45 < v25) {
        *(void *)(a1 + 8 * v46++) = *(void *)(a1 + 8 * v45);
      }
      int v47 = v45 + 1;
    }
    ++v45;
  }
  while (v45 != v25 + 1);
  if (v46 < 1) {
    return 0;
  }
  uint64_t v56 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v57 = v56 + 1;
    uint64_t v58 = *(re2::Regexp **)(a1 + 8 * v56);
    if (v56 + 1 < (unint64_t)v46 && *(unsigned char *)v58 == 2 && **(unsigned char **)(a1 + 8 * v56 + 8) == 2)
    {
      re2::Regexp::Decref(v58);
    }
    else
    {
      *(void *)(a1 + 8 * (int)v4) = v58;
      uint64_t v4 = (v4 + 1);
    }
    uint64_t v56 = v57;
  }
  while (v46 != v57);
  return v4;
}

void sub_1CA8424D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(void **)(v24 - 104));
  _Unwind_Resume(a1);
}

void re2::CharClassBuilder::AddRangeFlags(re2 *this, uint64_t a2, uint64_t a3, __int16 a4)
{
  char v4 = a4;
  unint64_t v6 = this;
  if ((int)a3 < 10 || (int)a2 > 10 || (a4 & 0x804) == 4)
  {
    if (a4) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if ((int)a2 > 9) {
    goto LABEL_7;
  }
  if ((a4 & 1) == 0)
  {
    re2::CharClassBuilder::AddRange(this, a2, 9);
LABEL_7:
    if (a3 < 0xB) {
      return;
    }
    goto LABEL_8;
  }
  re2::AddFoldedRange(this, (re2::CharClassBuilder *)a2, 9, 0);
  if (a3 < 0xB) {
    return;
  }
LABEL_8:
  this = v6;
  a2 = 11;
  if (v4)
  {
LABEL_9:
    re2::AddFoldedRange(this, (re2::CharClassBuilder *)a2, a3, 0);
    return;
  }
LABEL_13:
  re2::CharClassBuilder::AddRange(this, a2, a3);
}

void re2::AddFoldedRange(re2 *this, re2::CharClassBuilder *a2, uint64_t a3, int a4)
{
  if (a4 < 11)
  {
    signed int v6 = a3;
    unsigned int v7 = a2;
    int v9 = re2::CharClassBuilder::AddRange(this, (int)a2, a3);
    if ((int)v7 <= v6 && v9)
    {
      int v11 = a4 + 1;
LABEL_7:
      int v12 = 289;
      unint64_t v13 = (unsigned int *)&re2::unicode_casefold;
      do
      {
        unsigned int v16 = v12 >> 1;
        unsigned int v17 = v13[3 * (v12 >> 1)];
        if (v17 <= v7 && v13[3 * v16 + 1] >= v7)
        {
          v13 += 3 * v16;
          if (v7 >= v17)
          {
LABEL_20:
            signed int v19 = v13[1];
            int v18 = v13[2];
            if (v19 >= v6) {
              int v20 = v6;
            }
            else {
              int v20 = v19;
            }
            if ((v20 & 0x80000001) == 1) {
              int v21 = v20 + 1;
            }
            else {
              int v21 = v20;
            }
            if ((v7 & 0x80000001) == 1) {
              int v22 = -1;
            }
            else {
              int v22 = 0;
            }
            int v23 = v20 | 1;
            int v24 = v20 + v18;
            if (v18 == 1) {
              int v24 = v23;
            }
            else {
              int v22 = v18;
            }
            BOOL v25 = v18 == -1;
            if (v18 == -1) {
              int v26 = (v7 & 1) - 1;
            }
            else {
              int v26 = v22;
            }
            if (v25) {
              int v27 = v21;
            }
            else {
              int v27 = v24;
            }
            re2::AddFoldedRange(this, (re2::CharClassBuilder *)(v26 + v7), v27, v11, v10);
            unsigned int v17 = v19 + 1;
          }
LABEL_6:
          unsigned int v7 = v17;
          if ((int)v17 > v6) {
            return;
          }
          goto LABEL_7;
        }
        v12 -= v16 + 1;
        BOOL v14 = v17 > v7;
        if (v17 <= v7) {
          unsigned int v15 = v16 + 1;
        }
        else {
          unsigned int v15 = 0;
        }
        v13 += 3 * v15;
        if (v14) {
          int v12 = v16;
        }
      }
      while (v12 > 0);
      if (v13 < &re2::num_unicode_casefold)
      {
        unsigned int v17 = *v13;
        if (v7 >= *v13) {
          goto LABEL_20;
        }
        goto LABEL_6;
      }
    }
  }
  else
  {
    LOBYTE(v2_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    char v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"AddFoldedRange recurses too much.", 33);
    LogMessage::~LogMessage(&v28);
  }
}

void sub_1CA842794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char **re2::MaybeParsePerlCCEscape(uint64_t a1, char a2)
{
  if ((a2 & 0x80) == 0) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = v2 - 2;
  if (v2 < 2) {
    return 0;
  }
  char v4 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 != 92) {
    return 0;
  }
  int v5 = v4[1];
  switch(v5)
  {
    case 'D':
      if (*v4 == 92)
      {
        signed int v6 = &off_1E65BC2F0;
        goto LABEL_23;
      }
      int v5 = v4[1];
      break;
    case 'd':
      signed int v6 = &re2::perl_groups;
LABEL_23:
      *(void *)a1 = v4 + 2;
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v3;
      return v6;
    case 's':
      if (*v4 == 92)
      {
        signed int v6 = &off_1E65BC320;
        goto LABEL_23;
      }
      break;
    case 'S':
      if (*v4 == 92)
      {
        signed int v6 = &off_1E65BC350;
        goto LABEL_23;
      }
      break;
    default:
      goto LABEL_17;
  }
  int v5 = v4[1];
LABEL_17:
  if (v5 == 119 && *v4 == 92)
  {
    signed int v6 = &off_1E65BC380;
    goto LABEL_23;
  }
  if (v4[1] == 87 && *v4 == 92)
  {
    signed int v6 = &off_1E65BC3B0;
    goto LABEL_23;
  }
  return 0;
}

uint64_t re2::ParseUnicodeGroup(unsigned __int8 **a1, __int16 a2, re2 *a3, re2::RegexpStatus *a4)
{
  if ((a2 & 0x400) == 0) {
    return 2;
  }
  signed int v6 = (const re2::StringPiece *)*((unsigned int *)a1 + 2);
  unsigned int v7 = v6 - 2;
  if ((int)v6 < 2) {
    return 2;
  }
  int v8 = *a1;
  if (**a1 != 92) {
    return 2;
  }
  int v9 = (char)v8[1];
  if ((v9 & 0xFFFFFFDF) != 0x50) {
    return 2;
  }
  if (v9 == 80) {
    int v12 = 1;
  }
  else {
    int v12 = -1;
  }
  if (v9 == 80) {
    int v13 = -1;
  }
  else {
    int v13 = 1;
  }
  BOOL v14 = (re2 *)(v8 + 2);
  *a1 = v8 + 2;
  *((_DWORD *)a1 + 2) = v7;
  if ((int)v6 >= 3)
  {
    unsigned int v15 = *(unsigned __int8 *)v14;
    if ((*(char *)v14 & 0x80000000) == 0)
    {
      *a1 = v8 + 3;
      *((_DWORD *)a1 + 2) = v6 - 3;
      int v9 = v15;
      goto LABEL_36;
    }
    if (v7 >= 2 && (v15 < 0xE0 || v7 >= 3 && (v6 != 5 || v15 <= 0xEF)))
    {
      unsigned int v16 = v8[3] ^ 0x80;
      if (v16 <= 0x3F)
      {
        if (v15 > 0xDF)
        {
          unsigned int v18 = v8[4] ^ 0x80;
          if (v18 <= 0x3F)
          {
            if (v15 > 0xEF)
            {
              int v9 = 65533;
              if (v15 > 0xF7 || (v8[5] ^ 0x80u) > 0x3F) {
                goto LABEL_35;
              }
              if ((unsigned __int16)((((_WORD)v16 << 6) | ((_WORD)v15 << 12) | v18) & 0x7FFF) << 6 >= 0x10000u)
              {
                unsigned int v17 = 4;
                goto LABEL_48;
              }
            }
            else if ((((v15 & 0xF) << 12) | (v16 << 6)) >= 0x800)
            {
              unsigned int v17 = 3;
              goto LABEL_48;
            }
          }
        }
        else if (v15 >= 0xC0 && (((v15 & 0x1F) << 6) | v16) >= 0x80)
        {
          unsigned int v17 = 2;
LABEL_48:
          *a1 = (unsigned __int8 *)v14 + v17;
          *((_DWORD *)a1 + 2) = v7 - v17;
          goto LABEL_49;
        }
      }
      int v9 = 65533;
    }
  }
LABEL_35:
  *(_DWORD *)a4 = 12;
  *((void *)a4 + 1) = 0;
  *((_DWORD *)a4 + 4) = 0;
LABEL_36:
  if (v9 == 123)
  {
    int v36 = v12;
    uint64_t v19 = *((unsigned int *)a1 + 2);
    if ((int)v19 < 1
      || ((BOOL v14 = (re2 *)*a1,
           int v20 = &(*a1)[v19],
           (int v21 = (unsigned __int8 *)memchr(*a1, 125, *((unsigned int *)a1 + 2))) != 0)
        ? (int v22 = v21)
        : (int v22 = v20),
          (int v23 = (const re2::StringPiece *)(v22 - (unsigned __int8 *)v14), v22 - (unsigned __int8 *)v14 == v19)
       || v23 == -1))
    {
      if (re2::IsValidUTF8((re2 *)v8, v6, a4))
      {
        *(_DWORD *)a4 = 4;
        *((void *)a4 + 1) = v8;
        *((_DWORD *)a4 + 4) = v6;
      }
    }
    else
    {
      *a1 = (unsigned __int8 *)v14 + (int)v23 + 1;
      *((_DWORD *)a1 + 2) = v19 - (v23 + 1);
      if (re2::IsValidUTF8(v14, v23, a4))
      {
        int v24 = *a1;
        int v12 = v36;
        goto LABEL_50;
      }
    }
    return 1;
  }
LABEL_49:
  int v24 = *a1;
  LODWORD(v23) = *a1 - v14;
LABEL_50:
  if ((int)v23 < 1)
  {
    int v34 = v13;
    goto LABEL_59;
  }
  if (*(unsigned char *)v14 == 94)
  {
    BOOL v14 = (re2 *)((char *)v14 + 1);
    LODWORD(v23) = v23 - 1;
    int v13 = v12;
  }
  int v34 = v13;
  if (v23 != 3 || *((unsigned char *)v14 + 2) != 121 || *(unsigned char *)v14 != 65 || *((unsigned char *)v14 + 1) != 110)
  {
LABEL_59:
    uint64_t v26 = 0;
    int v35 = v24 - v8;
    do
    {
      BOOL v25 = &(&re2::unicode_groups)[6 * v26];
      int v27 = *v25;
      if (*v25)
      {
        if (v23 == strlen(*v25))
        {
          if ((int)v23 < 1) {
            goto LABEL_73;
          }
          if (v27[v23 - 1] == *((unsigned __int8 *)v14 + (v23 - 1)))
          {
            int v28 = v27 + 1;
            uint64_t v29 = v14;
            do
            {
              int v30 = *((unsigned __int8 *)v28 - 1);
              int v32 = *(unsigned __int8 *)v29;
              uint64_t v29 = (re2 *)((char *)v29 + 1);
              int v31 = v32;
            }
            while (v30 == v32 && v28++ < &v27[v23]);
            if (v30 == v31)
            {
LABEL_73:
              int v13 = v34;
              goto LABEL_74;
            }
          }
        }
      }
      else if (!v23)
      {
        goto LABEL_73;
      }
      ++v26;
    }
    while (v26 != 138);
    *(_DWORD *)a4 = 4;
    *((void *)a4 + 1) = v8;
    *((_DWORD *)a4 + 4) = v35;
    return 1;
  }
  BOOL v25 = &re2::anygroup;
LABEL_74:
  re2::AddUGroup(a3, (uint64_t)v25, v13, a2);
  return 0;
}

BOOL re2::IsValidUTF8(re2 *this, const re2::StringPiece *a2, re2::RegexpStatus *a3)
{
  int v3 = a2 - 1;
  if ((int)a2 >= 1)
  {
    while (1)
    {
      while ((*(char *)this & 0x80000000) == 0)
      {
        this = (re2 *)((char *)this + 1);
        LODWORD(a2) = v3;
        BOOL v4 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v4) {
          return (int)a2 < 1;
        }
      }
      if (a2 < 2) {
        break;
      }
      unsigned int v5 = *(unsigned __int8 *)this;
      if (v5 >= 0xE0)
      {
        if (a2 < 3 || a2 == 3 && v5 >= 0xF0) {
          break;
        }
        unsigned int v8 = *((unsigned __int8 *)this + 1) ^ 0x80;
        if (v8 >= 0x40 || *((char *)this + 2) > -65) {
          break;
        }
        if (v5 > 0xEF)
        {
          if (v5 > 0xF7 || *((char *)this + 3) > -65 || (((v5 & 7) << 18) | (v8 << 12)) < 0x10000) {
            break;
          }
          unsigned int v7 = 4;
        }
        else
        {
          if ((((v5 & 0xF) << 12) | (v8 << 6)) < 0x800) {
            break;
          }
          unsigned int v7 = 3;
        }
      }
      else
      {
        unsigned int v6 = *((unsigned __int8 *)this + 1) ^ 0x80;
        if (v6 >= 0x40 || v5 < 0xC0 || ((v5 << 6) & 0x780 | v6) < 0x80) {
          break;
        }
        unsigned int v7 = 2;
      }
      this = (re2 *)((char *)this + v7);
      LODWORD(a2) = a2 - v7;
      int v3 = a2 - 1;
      if ((int)a2 < 1) {
        return (int)a2 < 1;
      }
    }
    *(_DWORD *)a3 = 12;
    *((void *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
  }
  return (int)a2 < 1;
}

void re2::AddUGroup(re2 *this, uint64_t a2, int a3, __int16 a4)
{
  if (a3 == 1)
  {
    if (*(int *)(a2 + 24) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags(this, *(unsigned __int16 *)(*(void *)(a2 + 16) + v7), *(unsigned __int16 *)(*(void *)(a2 + 16) + v7 + 2), a4);
        ++v8;
        v7 += 4;
      }
      while (v8 < *(int *)(a2 + 24));
    }
    if (*(int *)(a2 + 40) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags(this, *(unsigned int *)(*(void *)(a2 + 32) + v9), *(unsigned int *)(*(void *)(a2 + 32) + v9 + 4), a4);
        ++v10;
        v9 += 8;
      }
      while (v10 < *(int *)(a2 + 40));
    }
  }
  else if (a4)
  {
    v30[1] = 0;
    long long v32 = 0u;
    int v31 = &v32;
    v30[0] = 0;
    if (*(int *)(a2 + 24) >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags((re2 *)v30, *(unsigned __int16 *)(*(void *)(a2 + 16) + v17), *(unsigned __int16 *)(*(void *)(a2 + 16) + v17 + 2), a4);
        ++v18;
        v17 += 4;
      }
      while (v18 < *(int *)(a2 + 24));
    }
    if (*(int *)(a2 + 40) >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags((re2 *)v30, *(unsigned int *)(*(void *)(a2 + 32) + v19), *(unsigned int *)(*(void *)(a2 + 32) + v19 + 4), a4);
        ++v20;
        v19 += 8;
      }
      while (v20 < *(int *)(a2 + 40));
    }
    if ((a4 & 0x804) != 4) {
      re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v30, 10, 10);
    }
    re2::CharClassBuilder::Negate(v30);
    int v21 = v31;
    if (v31 != &v32)
    {
      do
      {
        re2::CharClassBuilder::AddRange(this, *((_DWORD *)v21 + 7), *((unsigned int *)v21 + 8));
        int v22 = (long long *)*((void *)v21 + 1);
        if (v22)
        {
          do
          {
            int v23 = v22;
            int v22 = *(long long **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            int v23 = (long long *)*((void *)v21 + 2);
            BOOL v24 = *(void *)v23 == (void)v21;
            int v21 = v23;
          }
          while (!v24);
        }
        int v21 = v23;
      }
      while (v23 != &v32);
    }
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy((void *)v32);
  }
  else
  {
    int v11 = *(_DWORD *)(a2 + 24);
    if (v11 < 1)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a2 + 16);
      do
      {
        unsigned int v16 = *(unsigned __int16 *)(v15 + v12);
        if (v14 < v16)
        {
          re2::CharClassBuilder::AddRangeFlags(this, v14, v16 - 1, a4);
          uint64_t v15 = *(void *)(a2 + 16);
          int v11 = *(_DWORD *)(a2 + 24);
        }
        uint64_t v14 = *(unsigned __int16 *)(v15 + v12 + 2) + 1;
        ++v13;
        v12 += 4;
      }
      while (v13 < v11);
    }
    int v25 = *(_DWORD *)(a2 + 40);
    if (v25 < 1) {
      goto LABEL_39;
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a2 + 32);
    do
    {
      unsigned int v29 = *(_DWORD *)(v28 + v26);
      if (v14 < v29)
      {
        re2::CharClassBuilder::AddRangeFlags(this, v14, v29 - 1, a4);
        uint64_t v28 = *(void *)(a2 + 32);
        int v25 = *(_DWORD *)(a2 + 40);
      }
      uint64_t v14 = (*(_DWORD *)(v28 + v26 + 4) + 1);
      ++v27;
      v26 += 8;
    }
    while (v27 < v25);
    if ((int)v14 < 1114112)
    {
LABEL_39:
      re2::CharClassBuilder::AddRangeFlags(this, v14, 1114111, a4);
    }
  }
}

void sub_1CA843064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t re2::Regexp::ParseState::ParseCCCharacter(re2::Regexp::ParseState *this, re2::StringPiece *a2, re2::StringPiece *a3, const re2::StringPiece *a4, re2::RegexpStatus *a5)
{
  int v5 = *((_DWORD *)a2 + 2);
  if (!v5)
  {
    uint64_t result = 0;
    *(_DWORD *)a5 = 5;
    uint64_t v9 = *(void *)a4;
    *((_DWORD *)a5 + 4) = *((_DWORD *)a4 + 2);
    *((void *)a5 + 1) = v9;
    return result;
  }
  if (v5 >= 1)
  {
    unsigned int v6 = *(unsigned __int8 **)a2;
    unsigned int v7 = **(unsigned __int8 **)a2;
    if (v7 == 92) {
      return re2::ParseEscape(a2, a3, a5, (re2::RegexpStatus *)*((unsigned int *)this + 11));
    }
    if ((v7 & 0x80) == 0)
    {
      *(_DWORD *)a3 = v7;
      *(void *)a2 = v6 + 1;
      int v10 = *((_DWORD *)a2 + 2) - 1;
LABEL_8:
      *((_DWORD *)a2 + 2) = v10;
      return 1;
    }
    if (v5 >= 2 && (v7 < 0xE0 || v5 >= 3 && (v5 != 3 || v7 <= 0xEF)))
    {
      unsigned int v11 = v6[1] ^ 0x80;
      if (v11 <= 0x3F)
      {
        if (v7 > 0xDF)
        {
          unsigned int v14 = v6[2] ^ 0x80;
          if (v14 <= 0x3F)
          {
            if (v7 > 0xEF)
            {
              if (v7 <= 0xF7)
              {
                unsigned int v16 = v6[3] ^ 0x80;
                if (v16 <= 0x3F)
                {
                  unsigned int v17 = (((unsigned __int16)(((_WORD)v11 << 6) | ((_WORD)v7 << 12)) | (unsigned __int16)v14) & 0x7FFF) << 6;
                  if (v17 >= 0x10000)
                  {
                    unsigned int v12 = v17 | v16;
                    unsigned int v13 = 4;
                    goto LABEL_30;
                  }
                }
              }
            }
            else
            {
              unsigned int v15 = ((v7 & 0xF) << 12) | (v11 << 6);
              if (v15 >= 0x800)
              {
                unsigned int v12 = v15 | v14;
                unsigned int v13 = 3;
                goto LABEL_30;
              }
            }
          }
        }
        else if (v7 >= 0xC0)
        {
          unsigned int v12 = ((v7 & 0x1F) << 6) | v11;
          if (v12 >= 0x80)
          {
            unsigned int v13 = 2;
LABEL_30:
            *(_DWORD *)a3 = v12;
            *(void *)a2 = &v6[v13];
            int v10 = *((_DWORD *)a2 + 2) - v13;
            goto LABEL_8;
          }
        }
      }
      *(_DWORD *)a3 = 65533;
    }
  }
  uint64_t result = 0;
  *(_DWORD *)a5 = 12;
  *((void *)a5 + 1) = 0;
  *((_DWORD *)a5 + 4) = 0;
  return result;
}

uint64_t re2::ParseEscape(re2 *this, re2::StringPiece *a2, re2::StringPiece *a3, re2::RegexpStatus *a4)
{
  int v5 = *((_DWORD *)this + 2);
  if (v5 < 1 || (unsigned int v7 = *(unsigned __int8 **)this, **(unsigned char **)this != 92))
  {
    uint64_t result = 0;
    int v10 = 1;
    goto LABEL_6;
  }
  unsigned int v8 = v5 - 1;
  if (v5 <= 1)
  {
    uint64_t result = 0;
    int v10 = 7;
LABEL_6:
    *(_DWORD *)a3 = v10;
    *((void *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
    return result;
  }
  int v11 = (int)a4;
  unsigned int v38 = 0;
  *(void *)this = v7 + 1;
  *((_DWORD *)this + 2) = v8;
  unsigned int v13 = v7[1];
  if ((v13 & 0x80) != 0)
  {
    if (v8 >= 2 && (v13 < 0xE0 || v8 >= 3 && (v5 != 4 || v13 <= 0xEF)))
    {
      unsigned int v19 = v7[2] ^ 0x80;
      if (v19 <= 0x3F)
      {
        if (v13 > 0xDF)
        {
          unsigned int v30 = v7[3] ^ 0x80;
          if (v30 <= 0x3F)
          {
            if (v13 > 0xEF)
            {
              if (v13 <= 0xF7)
              {
                unsigned int v34 = v7[4] ^ 0x80;
                if (v34 <= 0x3F)
                {
                  unsigned int v35 = (((unsigned __int16)(((_WORD)v19 << 6) | ((_WORD)v13 << 12)) | (unsigned __int16)v30) & 0x7FFF) << 6;
                  if (v35 >= 0x10000)
                  {
                    unsigned int v13 = v35 | v34;
                    unsigned int v20 = 4;
                    goto LABEL_72;
                  }
                }
              }
            }
            else
            {
              unsigned int v31 = ((v13 & 0xF) << 12) | (v19 << 6);
              if (v31 >= 0x800)
              {
                unsigned int v13 = v31 | v30;
                unsigned int v20 = 3;
                goto LABEL_72;
              }
            }
          }
        }
        else if (v13 >= 0xC0)
        {
          unsigned int v13 = ((v13 & 0x1F) << 6) | v19;
          if (v13 >= 0x80)
          {
            unsigned int v20 = 2;
LABEL_72:
            LODWORD(v39) = v13;
            unsigned int v14 = (char *)&v7[v20 + 1];
            *(void *)this = v14;
            int v15 = v8 - v20;
            goto LABEL_9;
          }
        }
      }
    }
    uint64_t result = 0;
    int v10 = 12;
    goto LABEL_6;
  }
  LODWORD(v39) = v7[1];
  unsigned int v14 = (char *)(v7 + 2);
  *(void *)this = v7 + 2;
  int v15 = v5 - 2;
LABEL_9:
  *((_DWORD *)this + 2) = v15;
  int v16 = v13 - 48;
  switch(v13)
  {
    case '0':
      goto LABEL_12;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      if (!v15 || *v14 - 56 < 0xFFFFFFF8) {
        goto LABEL_78;
      }
LABEL_12:
      if (v15 >= 1)
      {
        int v17 = *v14;
        if ((v17 & 0xFFFFFFF8) == 0x30)
        {
          int v16 = v17 + 8 * v16 - 48;
          *(void *)this = v14 + 1;
          *((_DWORD *)this + 2) = v15 - 1;
          if (v15 != 1)
          {
            int v18 = v14[1];
            if ((v18 & 0xFFFFFFF8) == 0x30)
            {
              int v16 = v18 + 8 * v16 - 48;
              *(void *)this = v14 + 2;
              *((_DWORD *)this + 2) = v15 - 2;
            }
          }
        }
      }
      if (v16 > (int)a4) {
        goto LABEL_78;
      }
      *(_DWORD *)a2 = v16;
      return 1;
    case 'a':
      int v22 = 7;
      goto LABEL_40;
    case 'f':
      int v22 = 12;
      goto LABEL_40;
    case 'n':
      int v22 = 10;
      goto LABEL_40;
    case 'r':
      int v22 = 13;
      goto LABEL_40;
    case 't':
      int v22 = 9;
      goto LABEL_40;
    case 'v':
      int v22 = 11;
      goto LABEL_40;
    case 'x':
      if (!v15) {
        goto LABEL_78;
      }
      if ((re2::StringPieceToRune((re2 *)&v39, (int *)this, a3, a4) & 0x80000000) != 0) {
        return 0;
      }
      BOOL v24 = (re2 *)v39;
      if (v39 == 123)
      {
        if ((re2::StringPieceToRune((re2 *)&v39, (int *)this, a3, v23) & 0x80000000) == 0)
        {
          int v25 = 0;
          int v26 = 0;
          while ((v39 - 58) > 0xFFFFFFF5 || (v39 & 0xFFFFFFDF) - 71 >= 0xFFFFFFFA)
          {
            int v25 = re2::UnHex((re2 *)v39) | (16 * v25);
            if (v25 > v11 || !*((_DWORD *)this + 2)) {
              goto LABEL_78;
            }
            int v29 = re2::StringPieceToRune((re2 *)&v39, (int *)this, a3, v28);
            uint64_t result = 0;
            ++v26;
            if (v29 < 0) {
              return result;
            }
          }
          if (v39 == 125 && v26 != 0)
          {
            *(_DWORD *)a2 = v25;
            return 1;
          }
          goto LABEL_78;
        }
        return 0;
      }
      if (!*((_DWORD *)this + 2)) {
        goto LABEL_78;
      }
      if ((re2::StringPieceToRune((re2 *)&v38, (int *)this, a3, v23) & 0x80000000) != 0) {
        return 0;
      }
      if ((v24 - 58) <= 0xFFFFFFF5 && (v24 & 0xFFFFFFDF) - 71 < 0xFFFFFFFA
        || (long long v32 = (re2 *)v38, v38 - 58 <= 0xFFFFFFF5) && (v38 & 0xFFFFFFDF) - 71 < 0xFFFFFFFA)
      {
LABEL_78:
        uint64_t result = 0;
        *(_DWORD *)a3 = 2;
        int v37 = *(_DWORD *)this - v7;
        *((void *)a3 + 1) = v7;
        *((_DWORD *)a3 + 4) = v37;
        return result;
      }
      int v33 = re2::UnHex(v24);
      int v22 = re2::UnHex(v32) | (16 * v33);
LABEL_40:
      *(_DWORD *)a2 = v22;
      return 1;
    default:
      if ((int)v13 > 127) {
        goto LABEL_78;
      }
      uint64_t v21 = MEMORY[0x1E4F14390] + 4 * v13;
      if ((*(_DWORD *)(v21 + 60) & 0x100) != 0 || (*(_DWORD *)(v21 + 60) & 0x400) != 0) {
        goto LABEL_78;
      }
      *(_DWORD *)a2 = v13;
      return 1;
  }
}

uint64_t re2::StringPieceToRune(re2 *this, int *a2, re2::StringPiece *a3, re2::RegexpStatus *a4)
{
  int v4 = a2[2];
  if (v4 < 1) {
    goto LABEL_23;
  }
  int v5 = *(unsigned __int8 **)a2;
  unsigned int v6 = **(unsigned __int8 **)a2;
  if ((**(char **)a2 & 0x80000000) == 0)
  {
    *(_DWORD *)this = v6;
    *(void *)a2 = v5 + 1;
    --a2[2];
    return 1;
  }
  if (v4 < 2 || v6 >= 0xE0 && (v4 < 3 || v4 == 3 && v6 > 0xEF)) {
    goto LABEL_23;
  }
  unsigned int v8 = v5[1] ^ 0x80;
  if (v8 > 0x3F) {
    goto LABEL_22;
  }
  if (v6 > 0xDF)
  {
    unsigned int v11 = v5[2] ^ 0x80;
    if (v11 <= 0x3F)
    {
      if (v6 > 0xEF)
      {
        if (v6 <= 0xF7)
        {
          unsigned int v13 = v5[3] ^ 0x80;
          if (v13 <= 0x3F)
          {
            unsigned int v14 = (((unsigned __int16)(((_WORD)v8 << 6) | ((_WORD)v6 << 12)) | (unsigned __int16)v11) & 0x7FFF) << 6;
            if (v14 >= 0x10000)
            {
              unsigned int v9 = v14 | v13;
              uint64_t v10 = 4;
              goto LABEL_25;
            }
          }
        }
      }
      else
      {
        unsigned int v12 = ((v6 & 0xF) << 12) | (v8 << 6);
        if (v12 >= 0x800)
        {
          unsigned int v9 = v12 | v11;
          uint64_t v10 = 3;
          goto LABEL_25;
        }
      }
    }
    goto LABEL_22;
  }
  if (v6 < 0xC0 || (unsigned int v9 = ((v6 & 0x1F) << 6) | v8, v9 < 0x80))
  {
LABEL_22:
    *(_DWORD *)this = 65533;
LABEL_23:
    *(_DWORD *)a3 = 12;
    *((void *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = 2;
LABEL_25:
  *(_DWORD *)this = v9;
  *(void *)a2 = &v5[v10];
  a2[2] -= v10;
  return v10;
}

uint64_t re2::UnHex(re2 *this)
{
  int v1 = (int)this;
  uint64_t result = (this - 48);
  if (result >= 0xA)
  {
    if ((v1 - 65) > 5)
    {
      if ((v1 - 97) > 5)
      {
        LOBYTE(v4) = 0;
        int v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Bad hex digit ", 14);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v4);
        return 0;
      }
      else
      {
        return (v1 - 87);
      }
    }
    else
    {
      return (v1 - 55);
    }
  }
  return result;
}

void sub_1CA84390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::ParseState::ParseCCRange(re2::Regexp::ParseState *a1, re2::StringPiece *a2, uint64_t a3, const re2::StringPiece *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)a2;
  uint64_t result = re2::Regexp::ParseState::ParseCCCharacter(a1, a2, (re2::StringPiece *)a3, a4, (re2::RegexpStatus *)a5);
  if (result)
  {
    int v12 = *((_DWORD *)a2 + 2);
    if (v12 < 2
      || (uint64_t v13 = *(void *)a2, **(unsigned char **)a2 != 45)
      || (v15 = *(unsigned __int8 *)(v13 + 1), uint64_t v14 = v13 + 1, v15 == 93))
    {
      *(_DWORD *)(a3 + 4) = *(_DWORD *)a3;
      return 1;
    }
    *(void *)a2 = v14;
    *((_DWORD *)a2 + 2) = v12 - 1;
    uint64_t result = re2::Regexp::ParseState::ParseCCCharacter(a1, a2, (re2::StringPiece *)(a3 + 4), a4, (re2::RegexpStatus *)a5);
    if (result)
    {
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)a3)
      {
        uint64_t result = 0;
        *(_DWORD *)a5 = 4;
        int v16 = *(_DWORD *)a2 - v10;
        *(void *)(a5 + _Block_object_dispose(&STACK[0x2A0], 8) = v10;
        *(_DWORD *)(a5 + 16) = v16;
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::Regexp::ParseState::ParseCharClass(re2::Regexp::ParseState *this, re2::StringPiece *a2, re2::Regexp **a3, re2::RegexpStatus *a4)
{
  if (*((_DWORD *)a2 + 2) && **(unsigned char **)a2 == 91)
  {
    uint64_t v5 = (char *)mallocRegexp();
    __int16 v6 = *(_WORD *)this;
    *(_WORD *)uint64_t v5 = 20;
    *((_WORD *)v5 + 1) = v6 & 0xFFFE;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
    operator new();
  }
  uint64_t result = 0;
  *(_DWORD *)a4 = 1;
  *((void *)a4 + 1) = 0;
  *((_DWORD *)a4 + 4) = 0;
  return result;
}

BOOL re2::Regexp::ParseState::ParsePerlFlags(re2::Regexp::ParseState *this, re2 **a2)
{
  long long v38 = *(_OWORD *)a2;
  unsigned int v3 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x200) == 0
    || (unsigned int v4 = DWORD2(v38) - 2, SDWORD2(v38) < 2)
    || (uint64_t v5 = v38, *(unsigned char *)v38 != 40)
    || *(unsigned char *)(v38 + 1) != 63)
  {
    LOBYTE(v36) = 0;
    int v15 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Bad call to ParseState::ParsePerlFlags", 38);
    LogMessage::~LogMessage(&v36);
    BOOL result = 0;
    **((_DWORD **)this + 3) = 1;
    return result;
  }
  unsigned int v7 = (char *)(v38 + 2);
  *(void *)&long long v38 = v38 + 2;
  DWORD2(v38) -= 2;
  if (v4 < 3)
  {
    int v17 = (uint64_t *)((char *)this + 24);
    uint64_t v16 = *((void *)this + 3);
    if (!v4) {
      goto LABEL_65;
    }
    goto LABEL_17;
  }
  if (*v7 != 80 || *(unsigned char *)(v5 + 3) != 60)
  {
    int v17 = (uint64_t *)((char *)this + 24);
    uint64_t v16 = *((void *)this + 3);
LABEL_17:
    BOOL v18 = 0;
    char v19 = 0;
    while (1)
    {
      while (1)
      {
        if ((int)v4 < 1)
        {
LABEL_55:
          BOOL result = 0;
          *(_DWORD *)uint64_t v16 = 12;
          *(void *)(v16 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
          *(_DWORD *)(v16 + 16) = 0;
          return result;
        }
        unsigned int v20 = *v7;
        if (*v7 < 0)
        {
          if (v4 < 2 || v20 >= 0xE0 && (v4 < 3 || v4 == 3 && v20 > 0xEF)) {
            goto LABEL_55;
          }
          unsigned int v21 = v7[1] ^ 0x80;
          if (v21 > 0x3F) {
            goto LABEL_55;
          }
          if (v20 > 0xDF)
          {
            unsigned int v23 = v7[2] ^ 0x80;
            if (v23 > 0x3F) {
              goto LABEL_55;
            }
            if (v20 > 0xEF)
            {
              if (v20 > 0xF7) {
                goto LABEL_55;
              }
              unsigned int v25 = v7[3] ^ 0x80;
              if (v25 > 0x3F) {
                goto LABEL_55;
              }
              unsigned int v26 = (((unsigned __int16)(((_WORD)v21 << 6) | ((_WORD)v20 << 12)) | (unsigned __int16)v23) & 0x7FFF) << 6;
              if (v26 < 0x10000) {
                goto LABEL_55;
              }
              unsigned int v20 = v26 | v25;
              unsigned int v22 = 4;
            }
            else
            {
              unsigned int v24 = ((v20 & 0xF) << 12) | (v21 << 6);
              if (v24 < 0x800) {
                goto LABEL_55;
              }
              unsigned int v20 = v24 | v23;
              unsigned int v22 = 3;
            }
          }
          else
          {
            if (v20 < 0xC0) {
              goto LABEL_55;
            }
            unsigned int v20 = ((v20 & 0x1F) << 6) | v21;
            if (v20 < 0x80) {
              goto LABEL_55;
            }
            unsigned int v22 = 2;
          }
          v7 += v22;
          *(void *)&long long v38 = v7;
          v4 -= v22;
        }
        else
        {
          *(void *)&long long v38 = ++v7;
          --v4;
        }
        DWORD2(v3_Block_object_dispose(&STACK[0x2A0], 8) = v4;
        if ((int)v20 <= 84) {
          break;
        }
        switch(v20)
        {
          case 'U':
            unsigned int v27 = v3 | 0x40;
            unsigned int v28 = v3 & 0xFFFFFFBF;
            break;
          case 'i':
            unsigned int v27 = v3 | 1;
            unsigned int v28 = v3 & 0xFFFFFFFE;
            break;
          case 'm':
            unsigned int v27 = v3 & 0xFFFFFFEF;
            unsigned int v28 = v3 | 0x10;
            break;
          case 's':
            unsigned int v27 = v3 | 8;
            unsigned int v28 = v3 & 0xFFFFFFF7;
            break;
          default:
            goto LABEL_65;
        }
        BOOL v29 = !v18;
        BOOL v18 = v18;
        char v19 = 1;
        if (v29) {
          unsigned int v3 = v27;
        }
        else {
          unsigned int v3 = v28;
        }
        if (!v4) {
          goto LABEL_65;
        }
      }
      if (v20 != 45) {
        break;
      }
      if (!v18)
      {
        char v19 = 0;
        BOOL v18 = 1;
        if (v4) {
          continue;
        }
      }
      goto LABEL_65;
    }
    if (v20 == 41) {
      goto LABEL_59;
    }
    if (v20 == 58)
    {
      unsigned int v30 = (char *)mallocRegexp();
      __int16 v31 = *(_DWORD *)this;
      *(_WORD *)unsigned int v30 = 22;
      *((_WORD *)v30 + 1) = v31;
      *((_WORD *)v30 + 2) = 1;
      *(_OWORD *)(v30 + 22) = 0u;
      *((_WORD *)v30 + 19) = 0;
      *(_OWORD *)(v30 + 6) = 0u;
      *((_DWORD *)v30 + 6) = -1;
      re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v30);
LABEL_59:
      if (v19 & 1 | !v18)
      {
        *(_DWORD *)this = v3;
        *a2 = (re2 *)v38;
        int v14 = DWORD2(v38);
        goto LABEL_61;
      }
      uint64_t v16 = *v17;
    }
LABEL_65:
    BOOL result = 0;
    *(_DWORD *)uint64_t v16 = 11;
    unsigned int v34 = v7 - *a2;
    *(void *)(v16 + _Block_object_dispose(&STACK[0x2A0], 8) = *a2;
    *(_DWORD *)(v16 + 16) = v34;
    return result;
  }
  int v8 = re2::StringPiece::find((re2::StringPiece *)&v38, 62, 2uLL);
  if (v8 == -1)
  {
    BOOL result = re2::IsValidUTF8(*a2, (const re2::StringPiece *)*((unsigned int *)a2 + 2), *((re2::RegexpStatus **)this + 3));
    if (result)
    {
      BOOL result = 0;
      uint64_t v32 = *((void *)this + 3);
      *(_DWORD *)uint64_t v32 = 13;
      int v33 = *a2;
      *(_DWORD *)(v32 + 16) = *((_DWORD *)a2 + 2);
      *(void *)(v32 + _Block_object_dispose(&STACK[0x2A0], 8) = v33;
    }
  }
  else
  {
    int v9 = v8;
    uint64_t v10 = (const re2::StringPiece *)(v8 - 2);
    int v36 = (void *)(v5 + 4);
    int v37 = v10;
    BOOL result = re2::IsValidUTF8((re2 *)(v5 + 4), v10, *((re2::RegexpStatus **)this + 3));
    if (result)
    {
      int v12 = v9 + 3;
      if (re2::IsValidCaptureName((re2 *)(v5 + 4), v10))
      {
        re2::Regexp::ParseState::DoLeftParen(this, (const re2::StringPiece *)&v36);
        int v13 = v5 + v12 - *a2;
        *a2 = (re2 *)((char *)*a2 + v13);
        int v14 = *((_DWORD *)a2 + 2) - v13;
LABEL_61:
        *((_DWORD *)a2 + 2) = v14;
        return 1;
      }
      BOOL result = 0;
      uint64_t v35 = *((void *)this + 3);
      *(_DWORD *)uint64_t v35 = 13;
      *(void *)(v35 + _Block_object_dispose(&STACK[0x2A0], 8) = v5;
      *(_DWORD *)(v35 + 16) = v12;
    }
  }
  return result;
}

void sub_1CA84446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL re2::IsValidCaptureName(re2 *this, const re2::StringPiece *a2)
{
  if (!a2) {
    return 0;
  }
  if ((int)a2 < 1) {
    return 1;
  }
  uint64_t v2 = 0;
  BOOL v3 = 0;
  do
  {
    int v4 = *((unsigned __int8 *)this + v2);
    if ((v4 - 48) >= 0xA && (v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) > 0x19) {
      break;
    }
    BOOL v3 = ++v2 >= (unint64_t)a2;
  }
  while (a2 != v2);
  return v3;
}

re2::Regexp *re2::Regexp::Parse(long long *a1, unsigned int a2, int *a3)
{
  *(_OWORD *)&v84[1] = 0u;
  long long v85 = 0u;
  if (a3) {
    int v4 = (re2::RegexpStatus *)a3;
  }
  else {
    int v4 = (re2::RegexpStatus *)&v84[1];
  }
  unint64_t v79 = a2;
  long long v80 = *a1;
  int64_t v81 = v4;
  CFRange v82 = 0;
  if ((a2 & 0x20) != 0) {
    int v5 = 255;
  }
  else {
    int v5 = 1114111;
  }
  int v83 = 0;
  v84[0] = v5;
  long long v78 = *a1;
  if ((a2 & 0x20) != 0) {
    operator new();
  }
  unsigned int v6 = DWORD2(v78);
  if ((a2 & 2) != 0)
  {
    if (SDWORD2(v78) >= 1)
    {
      uint64_t v10 = (unsigned __int8 *)v78;
      for (i = DWORD2(v78); i > 0; unsigned int v6 = i)
      {
        int v12 = (re2 *)*v10;
        if ((char)*v10 < 0)
        {
          if (v6 < 2
            || v12 >= 0xE0 && (v6 < 3 || v6 == 3 && v12 > 0xEF)
            || (unsigned int v13 = v10[1] ^ 0x80, v13 > 0x3F))
          {
LABEL_209:
            unsigned int v7 = 0;
            *(void *)&long long v78 = v10;
            DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = i;
            goto LABEL_210;
          }
          if (v12 > 0xDF)
          {
            unsigned int v15 = v10[2] ^ 0x80;
            if (v15 > 0x3F) {
              goto LABEL_209;
            }
            if (v12 > 0xEF)
            {
              if (v12 > 0xF7) {
                goto LABEL_209;
              }
              unsigned int v17 = v10[3] ^ 0x80;
              if (v17 > 0x3F) {
                goto LABEL_209;
              }
              unsigned int v18 = (((unsigned __int16)(((_WORD)v13 << 6) | ((_WORD)v12 << 12)) | (unsigned __int16)v15) & 0x7FFF) << 6;
              if (v18 < 0x10000) {
                goto LABEL_209;
              }
              int v12 = (re2 *)(v18 | v17);
              unsigned int v14 = 4;
            }
            else
            {
              unsigned int v16 = ((v12 & 0xF) << 12) | (v13 << 6);
              if (v16 < 0x800) {
                goto LABEL_209;
              }
              int v12 = (re2 *)(v16 | v15);
              unsigned int v14 = 3;
            }
          }
          else
          {
            if (v12 < 0xC0) {
              goto LABEL_209;
            }
            int v12 = (re2 *)(((v12 & 0x1F) << 6) | v13);
            if (v12 < 0x80) {
              goto LABEL_209;
            }
            unsigned int v14 = 2;
          }
          v10 += v14;
          int i = v6 - v14;
        }
        else
        {
          ++v10;
          int i = v6 - 1;
        }
        re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v79, v12);
      }
      *(void *)&long long v78 = v10;
      DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = i;
    }
    char v19 = re2::Regexp::ParseState::DoFinish((re2::Regexp **)&v79);
LABEL_220:
    unsigned int v7 = v19;
    goto LABEL_221;
  }
  if (SDWORD2(v78) < 1)
  {
LABEL_219:
    char v19 = re2::Regexp::ParseState::DoFinish((re2::Regexp **)&v79);
    goto LABEL_220;
  }
  unsigned int v7 = 0;
  int v8 = 0;
  uint64_t v9 = MEMORY[0x1E4F14390];
  while (2)
  {
    uint64_t v22 = v78;
    char v23 = 7;
    switch(*(unsigned char *)v78)
    {
      case '$':
        int v24 = v79;
        if ((v79 & 0x10) != 0)
        {
          LODWORD(v79) = v79 | 0x8000;
          int v41 = (char *)mallocRegexp();
          *(_WORD *)int v41 = 19;
          *((_WORD *)v41 + 1) = v24 | 0x8000;
          *((_WORD *)v41 + 2) = 1;
          *(_OWORD *)(v41 + 6) = 0u;
          *(_OWORD *)(v41 + 22) = 0u;
          *((_WORD *)v41 + 19) = 0;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v41);
          LODWORD(v79) = v24;
        }
        else
        {
          unsigned int v25 = (char *)mallocRegexp();
          *(_WORD *)unsigned int v25 = 15;
          *((_WORD *)v25 + 1) = v24;
          *((_WORD *)v25 + 2) = 1;
          *(_OWORD *)(v25 + 6) = 0u;
          *(_OWORD *)(v25 + 22) = 0u;
          *((_WORD *)v25 + 19) = 0;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v25);
        }
        goto LABEL_96;
      case '(':
        __int16 v31 = v79;
        if (v6 < 2 || (v79 & 0x200) == 0 || *(unsigned char *)(v78 + 1) != 63)
        {
          if ((v79 & 0x1000) != 0)
          {
            unint64_t v45 = (char *)mallocRegexp();
            *(_WORD *)unint64_t v45 = 22;
            *((_WORD *)v45 + 1) = v31;
            *((_WORD *)v45 + 2) = 1;
            *(_OWORD *)(v45 + 22) = 0u;
            *(_OWORD *)(v45 + 6) = 0u;
            *((_WORD *)v45 + 19) = 0;
            *((_DWORD *)v45 + 6) = -1;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v45);
          }
          else
          {
            *(void *)__s = 0;
            *(_DWORD *)&std::string::value_type __s[8] = 0;
            re2::Regexp::ParseState::DoLeftParen((re2::Regexp::ParseState *)&v79, (const re2::StringPiece *)__s);
          }
LABEL_96:
          int v8 = 0;
          unsigned int v7 = 0;
          *(void *)&long long v78 = v78 + 1;
          unsigned int v6 = DWORD2(v78) - 1;
          goto LABEL_97;
        }
        unsigned int v7 = 0;
        if (!re2::Regexp::ParseState::ParsePerlFlags((re2::Regexp::ParseState *)&v79, (re2 **)&v78)) {
          goto LABEL_221;
        }
        int v8 = 0;
        goto LABEL_42;
      case ')':
        if (!re2::Regexp::ParseState::DoRightParen((re2::Regexp **)&v79)) {
          goto LABEL_218;
        }
        goto LABEL_96;
      case '*':
        goto LABEL_65;
      case '+':
        char v23 = 8;
        goto LABEL_65;
      case '.':
        re2::Regexp::ParseState::PushDot((re2::Regexp::ParseState *)&v79);
        goto LABEL_96;
      case '?':
        char v23 = 9;
LABEL_65:
        *(_OWORD *)__s = v78;
        uint64_t v32 = (unsigned char *)(v78 + 1);
        *(void *)&long long v78 = v78 + 1;
        DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v6 - 1;
        if ((v79 & 0x200) == 0)
        {
          int v33 = 0;
LABEL_72:
          unsigned int v7 = *(re2::Regexp **)__s;
          int v8 = v32 - *(_DWORD *)__s;
          *(_DWORD *)&std::string::value_type __s[8] = v32 - *(_DWORD *)__s;
          int v34 = re2::Regexp::ParseState::PushRepeatOp((uint64_t)&v79, v23, (uint64_t *)__s, v33);
          goto LABEL_73;
        }
        if (v6 == 1 || *v32 != 63)
        {
          int v33 = 0;
          if (v8 < 1) {
            goto LABEL_72;
          }
        }
        else
        {
          LODWORD(v32) = v22 + 2;
          *(void *)&long long v78 = v22 + 2;
          DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v6 - 2;
          int v33 = 1;
          if (v8 < 1) {
            goto LABEL_72;
          }
        }
        *(_DWORD *)int v4 = 10;
        int v69 = v32 - v7;
        goto LABEL_215;
      case '[':
        *(void *)__s = 0;
        if ((re2::Regexp::ParseState::ParseCharClass((re2::Regexp::ParseState *)&v79, (re2::StringPiece *)&v78, (re2::Regexp **)__s, v4) & 1) == 0)goto LABEL_218; {
        re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, *(re2::Regexp **)__s);
        }
        goto LABEL_41;
      case '\\':
        __int16 v38 = v79;
        if ((v79 & 0x100) == 0) {
          goto LABEL_80;
        }
        if (v6 < 2) {
          goto LABEL_138;
        }
        int v42 = *(unsigned __int8 *)(v78 + 1);
        if ((v42 | 0x20) == 0x62)
        {
          uint64_t v43 = (char *)mallocRegexp();
          *((_WORD *)v43 + 19) = 0;
          *(_OWORD *)(v43 + 22) = 0u;
          *(_OWORD *)(v43 + 6) = 0u;
          if (v42 == 98) {
            char v44 = 16;
          }
          else {
            char v44 = 17;
          }
          *uint64_t v43 = v44;
          v43[1] = 0;
          *((_WORD *)v43 + 1) = v38;
          *((_WORD *)v43 + 2) = 1;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v43);
LABEL_94:
          int v8 = 0;
          unsigned int v7 = 0;
          *(void *)&long long v78 = v78 + 2;
          unsigned int v6 = DWORD2(v78) - 2;
LABEL_97:
          DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v6;
          goto LABEL_43;
        }
LABEL_80:
        if ((v79 & 0x200) == 0)
        {
          if (v6 < 2) {
            goto LABEL_138;
          }
          unsigned int v39 = *(unsigned __int8 *)(v78 + 1);
LABEL_83:
          if ((v39 | 0x20) == 0x70)
          {
            uint64_t v40 = (char *)mallocRegexp();
            *(_WORD *)uint64_t v40 = 20;
            *((_WORD *)v40 + 1) = v38 & 0xFFFE;
            *((_WORD *)v40 + 2) = 1;
            *(_OWORD *)(v40 + 6) = 0u;
            *(_OWORD *)(v40 + 22) = 0u;
            *((_WORD *)v40 + 19) = 0;
            operator new();
          }
LABEL_138:
          if ((v79 & 0x80) == 0 || SDWORD2(v78) < 2 || *(unsigned char *)v78 != 92)
          {
LABEL_188:
            *(_DWORD *)__s = 0;
            if ((re2::ParseEscape((re2 *)&v78, (re2::StringPiece *)__s, v4, (re2::RegexpStatus *)v84[0]) & 1) == 0) {
              goto LABEL_218;
            }
            re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v79, (re2 *)*(unsigned int *)__s);
            goto LABEL_41;
          }
          int v55 = *(unsigned __int8 *)(v78 + 1);
          switch(v55)
          {
            case 'D':
              if (*(unsigned char *)v78 == 92) {
                goto LABEL_187;
              }
              int v55 = *(unsigned __int8 *)(v78 + 1);
              break;
            case 'd':
              goto LABEL_187;
            case 's':
              if (*(unsigned char *)v78 == 92) {
                goto LABEL_187;
              }
              break;
            case 'S':
              if (*(unsigned char *)v78 == 92) {
                goto LABEL_187;
              }
              break;
            default:
              goto LABEL_183;
          }
          int v55 = *(unsigned __int8 *)(v78 + 1);
LABEL_183:
          if (v55 == 119 && *(unsigned char *)v78 == 92 || *(unsigned char *)(v78 + 1) == 87 && *(unsigned char *)v78 == 92)
          {
LABEL_187:
            *(void *)&long long v78 = v78 + 2;
            DWORD2(v78) -= 2;
            int v65 = (char *)mallocRegexp();
            *(_WORD *)int v65 = 20;
            *((_WORD *)v65 + 1) = v38 & 0xFFFE;
            *((_WORD *)v65 + 2) = 1;
            *(_OWORD *)(v65 + 6) = 0u;
            *(_OWORD *)(v65 + 22) = 0u;
            *((_WORD *)v65 + 19) = 0;
            operator new();
          }
          goto LABEL_188;
        }
        int v48 = v6 - 2;
        if (v6 < 2) {
          goto LABEL_138;
        }
        unsigned int v39 = *(unsigned __int8 *)(v78 + 1);
        if (v39 <= 0x50)
        {
          if (v39 == 65)
          {
            uint64_t v56 = (char *)mallocRegexp();
            *(_WORD *)uint64_t v56 = 18;
            *((_WORD *)v56 + 1) = v38;
            *((_WORD *)v56 + 2) = 1;
            *(_OWORD *)(v56 + 6) = 0u;
            *(_OWORD *)(v56 + 22) = 0u;
            *((_WORD *)v56 + 19) = 0;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v56);
            goto LABEL_94;
          }
          if (v39 == 67)
          {
            re2::Regexp::ParseState::PushSimpleOp((re2::Regexp::ParseState *)&v79, 13);
            goto LABEL_94;
          }
          goto LABEL_83;
        }
        if (v39 != 81)
        {
          if (v39 == 122)
          {
            uint64_t v53 = (char *)mallocRegexp();
            *(_WORD *)uint64_t v53 = 19;
            *((_WORD *)v53 + 1) = v38;
            *((_WORD *)v53 + 2) = 1;
            *(_OWORD *)(v53 + 6) = 0u;
            *(_OWORD *)(v53 + 22) = 0u;
            *((_WORD *)v53 + 19) = 0;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v53);
            goto LABEL_94;
          }
          goto LABEL_83;
        }
        *(void *)&long long v78 = v78 + 2;
        if (v6 < 3) {
          goto LABEL_219;
        }
        uint64_t v57 = (unsigned __int8 *)v78;
        while (2)
        {
          uint64_t v58 = (re2 *)*v57;
          if (v48 != 1 && v58 == 92)
          {
            if (v57[1] == 69)
            {
              int v8 = 0;
              unsigned int v7 = 0;
              *(void *)&long long v78 = v57 + 2;
              unsigned int v6 = v48 - 2;
              DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v48 - 2;
              goto LABEL_43;
            }
            goto LABEL_154;
          }
          if ((v58 & 0x80) == 0)
          {
LABEL_154:
            ++v57;
            --v48;
            goto LABEL_155;
          }
          if (v48 >= 2
            && (v58 < 0xE0 || v48 >= 3 && (v48 != 3 || v58 <= 0xEF)))
          {
            unsigned int v59 = v57[1] ^ 0x80;
            if (v59 <= 0x3F)
            {
              if (v58 > 0xDF)
              {
                unsigned int v61 = v57[2] ^ 0x80;
                if (v61 > 0x3F) {
                  break;
                }
                if (v58 > 0xEF)
                {
                  if (v58 > 0xF7) {
                    break;
                  }
                  unsigned int v63 = v57[3] ^ 0x80;
                  if (v63 > 0x3F) {
                    break;
                  }
                  unsigned int v64 = (((unsigned __int16)(((_WORD)v59 << 6) | ((_WORD)v58 << 12)) | (unsigned __int16)v61) & 0x7FFF) << 6;
                  if (v64 < 0x10000) {
                    break;
                  }
                  uint64_t v58 = (re2 *)(v64 | v63);
                  unsigned int v60 = 4;
                }
                else
                {
                  unsigned int v62 = ((v58 & 0xF) << 12) | (v59 << 6);
                  if (v62 < 0x800) {
                    break;
                  }
                  uint64_t v58 = (re2 *)(v62 | v61);
                  unsigned int v60 = 3;
                }
              }
              else
              {
                if (v58 < 0xC0) {
                  break;
                }
                uint64_t v58 = (re2 *)(((v58 & 0x1F) << 6) | v59);
                if (v58 < 0x80) {
                  break;
                }
                unsigned int v60 = 2;
              }
              v57 += v60;
              v48 -= v60;
LABEL_155:
              DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v48;
              re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v79, v58);
              if (v48 < 1)
              {
                *(void *)&long long v78 = v57;
                goto LABEL_219;
              }
              continue;
            }
          }
          break;
        }
        unsigned int v7 = 0;
        *(void *)&long long v78 = v57;
LABEL_210:
        *(_DWORD *)int v4 = 12;
        uint64_t v68 = &v84[1];
        if (a3) {
          uint64_t v68 = a3;
        }
        *((void *)v68 + 1) = 0;
        v68[4] = 0;
LABEL_221:
        for (uint64_t j = v82; j; uint64_t j = v72)
        {
          uint64_t v72 = (re2::Regexp *)*((void *)j + 2);
          *((void *)j + 2) = 0;
          if (*(unsigned char *)j == 22)
          {
            uint64_t v73 = *((void *)j + 4);
            if (v73)
            {
              if (*(char *)(v73 + 23) < 0) {
                operator delete(*(void **)v73);
              }
              MEMORY[0x1CB79A8C0](v73, 0x1012C40EC159624);
            }
          }
          re2::Regexp::Decref(j);
        }
        uint64_t v74 = *((void *)&v85 + 1);
        if (*((void *)&v85 + 1))
        {
          if (*(char *)(*((void *)&v85 + 1) + 23) < 0) {
            operator delete(**((void ***)&v85 + 1));
          }
          MEMORY[0x1CB79A8C0](v74, 0x1012C40EC159624);
        }
        return v7;
      case '^':
        __int16 v35 = v79;
        int v36 = (char *)mallocRegexp();
        *((_WORD *)v36 + 19) = 0;
        *(_OWORD *)(v36 + 22) = 0u;
        *(_OWORD *)(v36 + 6) = 0u;
        if ((v35 & 0x10) != 0) {
          char v37 = 18;
        }
        else {
          char v37 = 14;
        }
        *int v36 = v37;
        v36[1] = 0;
        *((_WORD *)v36 + 1) = v35;
        *((_WORD *)v36 + 2) = 1;
        re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v79, (re2::Regexp *)v36);
        goto LABEL_96;
      case '{':
        int v77 = 0;
        long long v76 = v78;
        *(_OWORD *)__s = v78;
        int v26 = DWORD2(v78);
        if (!DWORD2(v78)) {
          goto LABEL_51;
        }
        uint64_t v27 = *(void *)__s;
        if (**(unsigned char **)__s != 123) {
          goto LABEL_51;
        }
        unsigned int v28 = (unsigned char *)++*(void *)__s;
        int v29 = DWORD2(v78) - 1;
        *(_DWORD *)&std::string::value_type __s[8] = DWORD2(v78) - 1;
        if (DWORD2(v78) == 1) {
          goto LABEL_51;
        }
        int v30 = *v28;
        if ((*(_DWORD *)(v9 + 4 * *v28 + 60) & 0x400) == 0) {
          goto LABEL_51;
        }
        if (SDWORD2(v78) > 2 && v30 == 48)
        {
          if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v27 + 2) + 60) & 0x400) != 0) {
            goto LABEL_51;
          }
        }
        else if (SDWORD2(v78) < 2)
        {
          int v54 = 0;
          goto LABEL_192;
        }
        int v54 = 0;
        if (v29 >= 1) {
          int v29 = 1;
        }
        --v29;
        do
        {
          --v26;
          int v30 = *v28;
          if ((*(_DWORD *)(v9 + 4 * *v28 + 60) & 0x400) == 0)
          {
            *(void *)__s = v28;
            *(_DWORD *)&std::string::value_type __s[8] = v26;
            int v29 = v26;
LABEL_192:
            if (v30 == 44)
            {
              *(void *)__s = ++v28;
              *(_DWORD *)&std::string::value_type __s[8] = --v29;
              if (!v29) {
                goto LABEL_51;
              }
              if (*v28 == 125)
              {
                int v77 = -1;
              }
              else
              {
                if (!re2::ParseInteger((re2 *)__s, (re2::StringPiece *)&v77, a3)) {
                  goto LABEL_51;
                }
                int v29 = *(_DWORD *)&__s[8];
                if (!*(_DWORD *)&__s[8]) {
                  goto LABEL_51;
                }
                unsigned int v28 = *(unsigned char **)__s;
              }
            }
            else
            {
              int v77 = v54;
            }
            if (*v28 != 125) {
              goto LABEL_51;
            }
            *(void *)&long long v78 = v28 + 1;
            DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v29 - 1;
            if ((v79 & 0x200) == 0)
            {
              int v66 = 0;
              int v67 = v78;
              goto LABEL_208;
            }
            int v67 = v78;
            if (SDWORD2(v78) >= 1 && *(unsigned char *)v78 == 63)
            {
              int v67 = v78 + 1;
              *(void *)&long long v78 = v78 + 1;
              --DWORD2(v78);
              int v66 = 1;
            }
            else
            {
              int v66 = 0;
            }
            if (v8 < 1)
            {
LABEL_208:
              unsigned int v7 = (re2::Regexp *)v76;
              int v8 = v67 - v76;
              DWORD2(v76) = v67 - v76;
              int v34 = re2::Regexp::ParseState::PushRepetition((re2::Regexp::ParseState *)&v79, v54, v77, (const re2::StringPiece *)&v76, v66);
LABEL_73:
              if (!v34)
              {
LABEL_218:
                unsigned int v7 = 0;
                goto LABEL_221;
              }
LABEL_42:
              unsigned int v6 = DWORD2(v78);
              goto LABEL_43;
            }
            *(_DWORD *)int v4 = 10;
            int v69 = v67 - v7;
LABEL_215:
            int64_t v70 = &v84[1];
            if (a3) {
              int64_t v70 = a3;
            }
            *((void *)v70 + 1) = v7;
            v70[4] = v69;
            goto LABEL_218;
          }
          if (v54 > 99999999) {
            goto LABEL_51;
          }
          int v54 = v30 + 10 * v54 - 48;
          ++v28;
        }
        while (v26 > 1);
        *(void *)__s = v28;
        *(_DWORD *)&std::string::value_type __s[8] = v29;
        if (v29)
        {
          int v30 = *v28;
          goto LABEL_192;
        }
LABEL_51:
        re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v79, (re2 *)0x7B);
        int v8 = 0;
        unsigned int v7 = 0;
        *(void *)&long long v78 = v78 + 1;
        unsigned int v6 = --DWORD2(v78);
LABEL_43:
        if ((int)v6 <= 0) {
          goto LABEL_219;
        }
        continue;
      case '|':
        re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)&v79);
        goto LABEL_96;
      default:
        unsigned int v20 = (re2 *)*(unsigned __int8 *)v78;
        if ((*(unsigned char *)v78 & 0x80) == 0)
        {
          *(void *)&long long v78 = v78 + 1;
          unsigned int v21 = v6 - 1;
LABEL_40:
          DWORD2(v7_Block_object_dispose(&STACK[0x2A0], 8) = v21;
          re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v79, v20);
LABEL_41:
          int v8 = 0;
          unsigned int v7 = 0;
          goto LABEL_42;
        }
        if (v6 < 2 || v20 >= 0xE0 && (v6 < 3 || v6 == 3 && v20 > 0xEF)) {
          goto LABEL_213;
        }
        unsigned int v46 = *(unsigned __int8 *)(v78 + 1) ^ 0x80;
        if (v46 > 0x3F) {
          goto LABEL_213;
        }
        if (v20 > 0xDF)
        {
          unsigned int v49 = *(unsigned __int8 *)(v78 + 2) ^ 0x80;
          if (v49 <= 0x3F)
          {
            if (v20 > 0xEF)
            {
              if (v20 <= 0xF7)
              {
                unsigned int v51 = *(unsigned __int8 *)(v78 + 3) ^ 0x80;
                if (v51 <= 0x3F)
                {
                  unsigned int v52 = (((unsigned __int16)(((_WORD)v46 << 6) | ((_WORD)v20 << 12)) | (unsigned __int16)v49) & 0x7FFF) << 6;
                  if (v52 >= 0x10000)
                  {
                    unsigned int v20 = (re2 *)(v52 | v51);
                    unsigned int v47 = 4;
                    goto LABEL_125;
                  }
                }
              }
            }
            else
            {
              unsigned int v50 = ((v20 & 0xF) << 12) | (v46 << 6);
              if (v50 >= 0x800)
              {
                unsigned int v20 = (re2 *)(v50 | v49);
                unsigned int v47 = 3;
                goto LABEL_125;
              }
            }
          }
        }
        else if (v20 >= 0xC0)
        {
          unsigned int v20 = (re2 *)(((v20 & 0x1F) << 6) | v46);
          if (v20 >= 0x80)
          {
            unsigned int v47 = 2;
LABEL_125:
            *(void *)&long long v78 = v78 + v47;
            unsigned int v21 = v6 - v47;
            goto LABEL_40;
          }
        }
LABEL_213:
        unsigned int v7 = 0;
        goto LABEL_210;
    }
  }
}

void sub_1CA845418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  re2::Regexp::ParseState::~ParseState((re2::Regexp::ParseState *)va);
  re2::RegexpStatus::~RegexpStatus((re2::RegexpStatus *)va1);
  _Unwind_Resume(a1);
}

uint64_t re2::ParseInteger(re2 *this, re2::StringPiece *a2, int *a3)
{
  int v3 = *((_DWORD *)this + 2);
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 **)this;
  uint64_t v5 = **(unsigned __int8 **)this;
  uint64_t v6 = MEMORY[0x1E4F14390];
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x400) == 0) {
    return 0;
  }
  if (v3 > 1 && v5 == 48)
  {
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4[1] + 60) & 0x400) != 0) {
      return 0;
    }
    goto LABEL_9;
  }
  if (v3 >= 1)
  {
LABEL_9:
    int v8 = 0;
    uint64_t v9 = v4 + 1;
    int v10 = v3 + 1;
    do
    {
      uint64_t v11 = *(v9 - 1);
      if ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x400) == 0) {
        break;
      }
      if (v8 > 99999999) {
        return 0;
      }
      int v8 = v11 + 10 * v8 - 48;
      *(void *)this = v9;
      *((_DWORD *)this + 2) = v10 - 2;
      ++v9;
      --v10;
    }
    while (v10 > 1);
    goto LABEL_15;
  }
  int v8 = 0;
LABEL_15:
  *(_DWORD *)a2 = v8;
  return 1;
}

void sub_1CA846B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA847018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34329(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__34330(uint64_t a1)
{
}

void sub_1CA8472D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA847B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA847D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CA848320(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA848B98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA8491D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA849784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA849994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA849CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void hashHexToBlob(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 != 1)
  {
    unsigned int v7 = [MEMORY[0x1E4F28B00] currentHandler];
    int v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void hashHexToBlob(sqlite3_context *, int, sqlite3_value **)");
    [v7 handleFailureInFunction:v8, @"SGSqlEntityStore+DatabaseMigrator.m", 1187, @"Invalid parameter not satisfying: %@", @"argc == 1" file lineNumber description];
  }
  uint64_t v5 = sqlite3_value_text(*a3);
  if (v5 && strlen((const char *)v5))
  {
    uint64_t v6 = (void *)_PASHexToBytes();
    sqlite3_result_blob(a1, v6, 0, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    free(v6);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void sub_1CA849FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA84AABC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA84B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

void sub_1CA84B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA84BB7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___detachSnippets_block_invoke()
{
  id v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_1CA650000, v0, OS_LOG_TYPE_ERROR, "unable to detach snippets after trying to migrate content data", v2, 2u);
  }

  return 1;
}

void sub_1CA84C790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
}

void sub_1CA84CAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CA84D9B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA84DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA84DE60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA84E390(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1CA84E9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA84F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA84F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8505A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL hasMessageAndValidAuthorsName(void *a1)
{
  uint64_t v2 = [a1 author];
  int v3 = [v2 displayName];

  BOOL v4 = 0;
  if (a1 && v3)
  {
    if ((unint64_t)[v3 length] >= 2
      && [v3 rangeOfString:@"@"] == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v5 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
      BOOL v4 = [v3 rangeOfCharacterFromSet:v5] == 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      BOOL v4 = 0;
    }
  }

  return v4;
}

void sub_1CA851B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1CA851E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35027(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__35028(uint64_t a1)
{
}

void sub_1CA852518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1CA853034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t firstPersonContactSharingLabelFromMatchType(unsigned int a1)
{
  if (a1 - 3 >= 7)
  {
    uint64_t v5 = 1;
    if (a1 == 2) {
      uint64_t v5 = 2;
    }
    if (a1 == 1) {
      return 3;
    }
    else {
      return v5;
    }
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"SGContactSharingLabel firstPersonContactSharingLabelFromMatchType(SGDataDetectorMatchType)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDetectedAttributeML.m", 115, @"Contact sharing model doesn't support matchType = %lu", a1);

    return -1;
  }
}

uint64_t thirdPersonContactSharingLabelFromMatchType(unsigned int a1)
{
  if (a1 - 3 >= 7)
  {
    uint64_t v5 = 4;
    if (a1 == 2) {
      uint64_t v5 = 5;
    }
    if (a1 == 1) {
      return 6;
    }
    else {
      return v5;
    }
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"SGContactSharingLabel thirdPersonContactSharingLabelFromMatchType(SGDataDetectorMatchType)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGDetectedAttributeML.m", 132, @"Contact sharing model doesn't support matchType = %lu", a1);

    return -1;
  }
}

void sub_1CA853DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_1CA854B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1CA855960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose((const void *)(v61 - 256), 8);
  _Block_object_dispose((const void *)(v61 - 224), 8);
  _Block_object_dispose((const void *)(v61 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1CA858828(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35319(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__35320(uint64_t a1)
{
}

void sub_1CA858D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA858E58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1CA85967C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA8597E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1CA8598A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1CA859950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1CA859AE8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x1CB79A8C0](v4, 0x1072C4099187B91);

  _Unwind_Resume(a1);
}

void sub_1CA859BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA859CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CA859D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1CA859E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CA859F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA859F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85A010(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1CA85A078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id getLazyRe2Cache(void)
{
  if (getLazyRe2Cache(void)::onceToken != -1) {
    dispatch_once(&getLazyRe2Cache(void)::onceToken, &__block_literal_global_101_35404);
  }
  id v0 = (void *)getLazyRe2Cache(void)::cache;
  return v0;
}

uint64_t ___ZL15getLazyRe2Cachev_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)getLazyRe2Cache(void)::cache;
  getLazyRe2Cache(void)::cache = v0;

  uint64_t v2 = (void *)getLazyRe2Cache(void)::cache;
  return [v2 setCountLimit:50];
}

void sub_1CA85A188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85A274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85A4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85A57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85A7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__35419(uint64_t a1)
{
}

void sub_1CA85A8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85AAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85ABB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85ACC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85AD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85ADC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85AE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

SGRe2Basic *getInternal(NSData *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = getLazyRe2Cache();
  uint64_t v3 = [v2 objectForKey:v1];
  if (!v3)
  {
    uint64_t v3 = [[SGRe2Basic alloc] initWithRegexpData:v1];
    [v2 setObject:v3 forKey:v1];
    if (!v3)
    {
      uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"SGRe2 *getInternal(NSData *__strong)"];
      [v5 handleFailureInFunction:v6, @"SGRe2.mm", 677, @"Could not initialize regexp: %@", v1 file lineNumber description];

      uint64_t v3 = 0;
    }
  }

  return v3;
}

void sub_1CA85AF60(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1CA85B04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85B4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CA85BFD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1CA85C6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__CFString *descriptionForIdentityKeyType(unint64_t a1)
{
  if (a1 > 5) {
    return @"UNKNOWN IDENTITY KEY TYPE!";
  }
  else {
    return off_1E65BE9F8[a1];
  }
}

void charactersSAX_36020(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = (objc_class *)NSString;
  id v6 = a1;
  id v7 = (id)[[v5 alloc] initWithBytes:a2 length:a3 encoding:4];
  [v6 textContent:v7];
}

void startElementSAX(void *a1, uint64_t a2, uint64_t a3)
{
  id v12 = a1;
  if (startElementSAX_onceToken != -1) {
    dispatch_once(&startElementSAX_onceToken, &__block_literal_global_36022);
  }
  uint64_t v4 = 0;
  if (a3)
  {
    uint64_t v5 = (uint64_t *)(a3 + 16);
    do
    {
      id v6 = (void *)MEMORY[0x1CB79B230]();
      id v7 = [NSString stringWithUTF8String:*(v5 - 2)];
      if ([(id)startElementSAX_attrWhitelist containsObject:v7])
      {
        if (!v4)
        {
          uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionaryWithSharedKeySet:startElementSAX_sharedKeySet];
        }
        if (*(v5 - 1))
        {
          int v8 = objc_msgSend(NSString, "stringWithUTF8String:");
          [v4 setObject:v8 forKeyedSubscript:v7];
        }
        else
        {
          [v4 setObject:&stru_1F24EEF20 forKeyedSubscript:v7];
        }
      }

      uint64_t v9 = *v5;
      v5 += 2;
    }
    while (v9);
  }
  int v10 = objc_msgSend(NSString, "stringWithUTF8String:", a2, a2);
  [v12 startElement:v10 withAttributes:v4];
}

uint64_t __startElementSAX_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:&unk_1F2536C08];
  uint64_t v1 = (void *)startElementSAX_attrWhitelist;
  startElementSAX_attrWhitelist = v0;

  startElementSAX_sharedKeySet = [MEMORY[0x1E4F1C9E8] sharedKeySetForKeys:&unk_1F2536C08];
  return MEMORY[0x1F41817F8]();
}

void sub_1CA85FA2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA8601E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA860DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA8615A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA861E24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA862CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t __Block_byref_object_copy__36201(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__36202(uint64_t a1)
{
}

void sub_1CA862E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1CA865460(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CA86667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA867F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA868434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36558(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__36559(uint64_t a1)
{
}

void sub_1CA868A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA868CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8690F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CA869F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86AE40(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 256), 8);
  _Unwind_Resume(a1);
}

void sub_1CA86B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36771(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__36772(uint64_t a1)
{
}

void sub_1CA86C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86C608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1CA86D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86DB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86EF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA86F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA870C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA872380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA872A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8731E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_1CA8744FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA874868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA874AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA874FB8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CA875FE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CA876E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA877974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA878688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA87A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 232), 8);
  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Block_object_dispose((const void *)(v38 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CA87B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA87B9C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    if (v2) {
      JUMPOUT(0x1CA87B940);
    }
    JUMPOUT(0x1CA87B938);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA87BB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA87BEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA87C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1CA87C4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CA87FAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37569(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__37570(uint64_t a1)
{
}

void sub_1CA880414(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id _PASValidatedFormat_37767(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  v20[1] = &a9;
  int v10 = (objc_class *)NSString;
  id v11 = a2;
  id v12 = a1;
  v20[0] = 0;
  uint64_t v13 = (void *)[[v10 alloc] initWithValidatedFormat:v12 validFormatSpecifiers:v11 locale:0 arguments:&a9 error:v20];

  id v14 = v20[0];
  if (!v13)
  {
    id v15 = objc_alloc(MEMORY[0x1E4F1CA00]);
    uint64_t v16 = *MEMORY[0x1E4F1C3C8];
    uint64_t v21 = *MEMORY[0x1E4F28A50];
    v22[0] = v14;
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v21 count:1];
    unsigned int v18 = (void *)[v15 initWithName:v16 reason:@"An error occurred while formatting the string." userInfo:v17];

    [v18 raise];
  }

  return v13;
}

void sub_1CA881DF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA881F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37885(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__37886(uint64_t a1)
{
}

void sub_1CA8821E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CA8822D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id escapedTagForEntityExtraction(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F5D9F0] containsEntityExtraction:a1];
  char v2 = [v1 name];
  uint64_t v3 = SGDelimitedStringsSerialize();

  return v3;
}

void sub_1CA886A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38135(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__38136(uint64_t a1)
{
}

void sub_1CA887B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA887D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA888160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38292(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__38293(uint64_t a1)
{
}

void sub_1CA888BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA88900C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t re2::PCREWalker::ShortVisit(re2::PCREWalker *this, re2::Regexp *a2, uint64_t a3)
{
  LOBYTE(v6) = 0;
  uint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EmptyStringWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v6);
  return a3;
}

void sub_1CA8896A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::Walker<BOOL>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::PCREWalker::PostVisit(re2::PCREWalker *this, re2::Regexp *a2, BOOL a3, BOOL a4, BOOL *a5, int a6)
{
  if (a6 < 1)
  {
LABEL_5:
    uint64_t result = 0;
    switch(*(unsigned char *)a2)
    {
      case 2:
      case 0x13:
        if (*((__int16 *)a2 + 1) < 0) {
          return 0;
        }
        goto LABEL_14;
      case 3:
        if (*((_DWORD *)a2 + 6) == 11) {
          return 0;
        }
        goto LABEL_14;
      case 7:
      case 8:
      case 9:
        goto LABEL_6;
      case 0xA:
        if (*((_DWORD *)a2 + 6) != -1) {
          goto LABEL_14;
        }
LABEL_6:
        uint64_t v9 = (re2 **)((char *)a2 + 8);
        if (*((unsigned __int16 *)a2 + 3) >= 2u) {
          uint64_t v9 = (re2 **)*v9;
        }
        re2::CanBeEmptyString(*v9, a2);
      case 0xE:
        return result;
      default:
LABEL_14:
        uint64_t result = 1;
        break;
    }
  }
  else
  {
    uint64_t v6 = a6;
    while (*a5++)
    {
      if (!--v6) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  return result;
}

void re2::CanBeEmptyString(re2 *this, re2::Regexp *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v2 = &unk_1F24EE060;
  operator new();
}

void sub_1CA8898B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re2::EmptyStringWalker::~EmptyStringWalker((re2::EmptyStringWalker *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<BOOL>::WalkInternal(uint64_t *a1, uint64_t a2)
{
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)a1);
  if (a2)
  {
    uint64_t v4 = (void *)a1[1];
    uint64_t v5 = v4[2];
    uint64_t v6 = v4[1];
    uint64_t v7 = -1;
    if (v5 == v6) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 170 * ((v5 - v6) >> 3) - 1;
    }
    uint64_t v9 = v4[5];
    unint64_t v10 = v9 + v4[4];
    if (v8 == v10)
    {
      std::deque<re2::WalkState<BOOL>>::__add_back_capacity(a1[1]);
      uint64_t v6 = v4[1];
      uint64_t v9 = v4[5];
      unint64_t v10 = v9 + v4[4];
    }
    unint64_t v11 = *(void *)(v6 + 8 * (v10 / 0xAA)) + 24 * (v10 % 0xAA);
    *(void *)unint64_t v11 = a2;
    *(_DWORD *)(v11 + _Block_object_dispose(&STACK[0x2A0], 8) = -1;
    *(unsigned char *)(v11 + 12) = 1;
    *(void *)(v11 + 16) = 0;
    void v4[5] = v9 + 1;
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (void *)a1[1];
        unint64_t v14 = v13[5] + v13[4] - 1;
        uint64_t v15 = *(void *)(v13[1] + 8 * (v14 / 0xAA));
        unint64_t v16 = v14 % 0xAA;
        uint64_t v17 = (uint64_t *)(v15 + 24 * (v14 % 0xAA));
        uint64_t v18 = *v17;
        int v20 = *((_DWORD *)v17 + 2);
        char v19 = v17 + 1;
        if (v20 == -1)
        {
          int v33 = *((_DWORD *)a1 + 5);
          *((_DWORD *)a1 + 5) = v33 - 1;
          if (v33 <= 0)
          {
            *((unsigned char *)a1 + 16) = 1;
            uint64_t v37 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 40))(a1, v18, *(unsigned __int8 *)(v15 + 24 * v16 + 12));
            goto LABEL_30;
          }
          uint64_t v34 = v7;
          LOBYTE(v5_Block_object_dispose(&STACK[0x2A0], 8) = 0;
          uint64_t v35 = v15 + 24 * v16;
          uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void **))(*a1 + 16))(a1, v18, *(unsigned __int8 *)(v35 + 12), &v58);
          *(unsigned char *)(v35 + 13) = v36;
          if ((_BYTE)v58)
          {
            uint64_t v37 = v36;
            uint64_t v7 = v34;
            goto LABEL_30;
          }
          *char v19 = 0;
          uint64_t v51 = v15 + 24 * v16;
          *(void *)(v51 + 16) = 0;
          unsigned int v52 = (void *)(v51 + 16);
          uint64_t v7 = v34;
          if (*(_WORD *)(v18 + 6))
          {
            if (*(_WORD *)(v18 + 6) != 1) {
              operator new[]();
            }
            *unsigned int v52 = v15 + 24 * v16 + 14;
          }
        }
        int v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6)) {
          break;
        }
        uint64_t v23 = *v19;
LABEL_26:
        uint64_t v38 = v15 + 24 * v16;
        uint64_t v40 = *(void *)(v38 + 16);
        unsigned int v39 = (void *)(v38 + 16);
        uint64_t v37 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 24))(a1, v18, *((unsigned __int8 *)v39 - 4), *((unsigned __int8 *)v39 - 3), v40, v23);
        if (*(unsigned __int16 *)(v18 + 6) >= 2u && *v39) {
          MEMORY[0x1CB79A8A0](*v39, 0x1000C8077774924);
        }
LABEL_30:
        int v41 = (void *)a1[1];
        uint64_t v42 = v41[2];
        uint64_t v44 = v41[4];
        uint64_t v43 = v41[5];
        if (v42 == v41[1]) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v7 + 170 * ((v42 - v41[1]) >> 3);
        }
        uint64_t v46 = v43 - 1;
        v41[5] = v43 - 1;
        if ((unint64_t)(v45 - (v43 + v44) + 1) >= 0x154)
        {
          operator delete(*(void **)(v42 - 8));
          v41[2] -= 8;
          int v41 = (void *)a1[1];
          uint64_t v46 = v41[5];
        }
        if (!v46) {
          return v37;
        }
        unint64_t v47 = v46 + v41[4] - 1;
        uint64_t v48 = *(void *)(v41[1] + 8 * (v47 / 0xAA));
        unint64_t v49 = v47 % 0xAA;
        uint64_t v50 = *(void *)(v48 + 24 * v49 + 16);
        if (v50)
        {
          uint64_t v12 = *(int *)(v48 + 24 * v49 + 8);
          *(unsigned char *)(v50 + v12) = v37;
        }
        else
        {
          uint64_t v12 = v48 + 24 * v49;
          *(unsigned char *)(v12 + 14) = v37;
          LODWORD(v12) = *(_DWORD *)(v12 + 8);
        }
        *(_DWORD *)(v48 + 24 * v49 + _Block_object_dispose(&STACK[0x2A0], 8) = v12 + 1;
      }
      uint64_t v22 = (void *)(v18 + 8);
      if (v21 != 1) {
        uint64_t v22 = (void *)*v22;
      }
      uint64_t v23 = *v19;
      if ((int)v23 >= v21) {
        goto LABEL_26;
      }
      uint64_t v24 = (v23 - 1);
      if ((int)v23 >= 1 && v22[v24] == v22[v23])
      {
        uint64_t v53 = v15 + 24 * v16;
        char v54 = (*(uint64_t (**)(uint64_t *, void))(*a1 + 32))(a1, *(unsigned __int8 *)(*(void *)(v53 + 16) + v24));
        uint64_t v55 = (int)*v19;
        *(unsigned char *)(*(void *)(v53 + 16) + v55) = v54;
        *char v19 = v55 + 1;
      }
      else
      {
        unsigned int v25 = (void *)a1[1];
        uint64_t v26 = v25[1];
        uint64_t v27 = v7 + 170 * ((v25[2] - v26) >> 3);
        uint64_t v28 = v22[(int)v23];
        char v29 = *(unsigned char *)(v15 + 24 * v16 + 13);
        if (v25[2] == v26) {
          uint64_t v27 = 0;
        }
        uint64_t v30 = v25[5];
        unint64_t v31 = v30 + v25[4];
        if (v27 == v31)
        {
          std::deque<re2::WalkState<BOOL>>::__add_back_capacity(a1[1]);
          uint64_t v26 = v25[1];
          uint64_t v30 = v25[5];
          unint64_t v31 = v30 + v25[4];
        }
        unint64_t v32 = *(void *)(v26 + 8 * (v31 / 0xAA)) + 24 * (v31 % 0xAA);
        *(void *)unint64_t v32 = v28;
        *(_DWORD *)(v32 + _Block_object_dispose(&STACK[0x2A0], 8) = -1;
        *(unsigned char *)(v32 + 12) = v29;
        *(void *)(v32 + 16) = 0;
        v25[5] = v30 + 1;
      }
    }
  }
  LOBYTE(v5_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  uint64_t v56 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v58);
  return 1;
}

void sub_1CA889D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<BOOL>::Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(v1 + 40))
    {
      LOBYTE(v16) = 0;
      uint64_t v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v16);
      uint64_t v4 = *(void **)(a1 + 8);
      uint64_t v5 = v4[5];
      while (v5)
      {
        uint64_t v6 = v4[4];
        unint64_t v7 = v5 + v6 - 1;
        uint64_t v8 = v4[1];
        uint64_t v9 = *(void *)(*(void *)(v8 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16);
        if (v9)
        {
          MEMORY[0x1CB79A8C0](v9, 0x1000C4077774924);
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v6 = v4[4];
          uint64_t v8 = v4[1];
        }
        uint64_t v10 = v4[2];
        uint64_t v12 = v10 - v8;
        BOOL v11 = v12 == 0;
        uint64_t v13 = 170 * (v12 >> 3) - 1;
        uint64_t v14 = v4[5];
        if (v11) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v13;
        }
        uint64_t v5 = v14 - 1;
        void v4[5] = v14 - 1;
        if ((unint64_t)(v15 - (v14 + v6) + 1) >= 0x154)
        {
          operator delete(*(void **)(v10 - 8));
          v4[2] -= 8;
          uint64_t v4 = *(void **)(a1 + 8);
          uint64_t v5 = v4[5];
        }
      }
    }
  }
}

void sub_1CA889EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](uint64_t a1)
{
  char v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4re2::Compiler::Compile(this, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      char v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void re2::EmptyStringWalker::~EmptyStringWalker(re2::EmptyStringWalker *this)
{
  *(void *)this = &unk_1F24EE060;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F24EE060;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

void std::deque<re2::WalkState<BOOL>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)unint64_t v5 = v8;
      goto LABEL_89;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        uint64_t v37 = (char *)operator new(8 * v34);
        uint64_t v38 = &v37[8 * v35];
        unsigned int v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        unint64_t v5 = v38;
        if (!v40)
        {
          unint64_t v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            uint64_t v84 = &v37[8 * v35];
            uint64_t v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v42 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v43 = &v38[v86];
              int64_t v87 = (long long *)(v6 + 3);
              CFRange v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *CFRange v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v86;
            }
          }
          else
          {
            uint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  uint64_t v17 = *(char **)(a1 + 24);
  int v20 = *(char **)a1;
  char v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0xFF0uLL);
    unsigned int v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      uint64_t v44 = v19;
      goto LABEL_87;
    }
    unint64_t v69 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v69 = 1;
    }
    if (v69 >> 61) {
      goto LABEL_106;
    }
    unint64_t v70 = (v69 + 3) >> 2;
    uint64_t v71 = 8 * v69;
    uint64_t v72 = (char *)operator new(8 * v69);
    uint64_t v44 = &v72[8 * v70];
    uint64_t v73 = &v72[v71];
    uint64_t v74 = v44;
    if (v18 != v19)
    {
      uint64_t v74 = &v44[8 * v22];
      uint64_t v75 = &v72[8 * v70];
      long long v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        int v77 = &v72[8 * v70];
        uint64_t v75 = v77;
        long long v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          unint64_t v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v75 = &v44[v79];
          long long v80 = (long long *)(v19 + 16);
          int64_t v81 = v77 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *int64_t v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v72;
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
            *(void *)(a1 + 16) = v74;
            *(void *)(a1 + 24) = v73;
LABEL_86:
            operator delete(v19);
            uint64_t v44 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v44 - 1) = v25;
            unint64_t v7 = *(char **)(a1 + 8);
            unint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            uint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v93 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v93 = 1;
              }
              if (!(v93 >> 61))
              {
                unint64_t v94 = v93 >> 2;
                uint64_t v95 = 8 * v93;
                uint64_t v37 = (char *)operator new(8 * v93);
                uint64_t v38 = &v37[8 * v94];
                unsigned int v39 = &v37[v95];
                int64_t v96 = v5 - v7;
                BOOL v40 = v5 == v7;
                unint64_t v5 = v38;
                if (!v40)
                {
                  unint64_t v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    unint64_t v99 = &v37[8 * v94];
                    int v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      uint64_t v100 = (v97 >> 3) + 1;
                      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      int v98 = &v38[v101];
                      char v102 = (long long *)(v7 + 16);
                      uint64_t v103 = v99 + 16;
                      uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *uint64_t v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v101;
                    }
                  }
                  else
                  {
                    int v98 = &v37[8 * v94];
                  }
                  do
                  {
                    uint64_t v106 = *(void *)v7;
                    v7 += 8;
                    *(void *)int v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_81:
                *(void *)a1 = v37;
                *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v38;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  unint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          long long v76 = &v19[v79];
        }
      }
      do
      {
        uint64_t v92 = *(void *)v76;
        v76 += 8;
        *(void *)uint64_t v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(void *)a1 = v72;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
    *(void *)(a1 + 16) = v74;
    *(void *)(a1 + 24) = v73;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  char v29 = operator new(0xFF0uLL);
  uint64_t v30 = &v28[8 * v22];
  unint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    unint64_t v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      unint64_t v31 = &v30[8 * v45];
      operator delete(v28);
      char v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      uint64_t v28 = v30;
    }
    else
    {
      unint64_t v33 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v33 = v22 + 1;
      }
      v30 -= 8 * (v33 >> 1);
    }
    char v29 = v32;
  }
  *(void *)uint64_t v30 = v29;
  uint64_t v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28) {
        goto LABEL_43;
      }
      if (v46 < v31)
      {
        uint64_t v49 = (v31 - v46) >> 3;
        if (v49 >= -1) {
          uint64_t v50 = v49 + 1;
        }
        else {
          uint64_t v50 = v49 + 2;
        }
        uint64_t v51 = v50 >> 1;
        uint64_t v30 = &v28[8 * (v50 >> 1)];
        unsigned int v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          unsigned int v52 = v46;
        }
        uint64_t v46 = (char *)v52 + 8 * v51;
        goto LABEL_43;
      }
      if (v31 == v28) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = (v31 - v28) >> 2;
      }
      if (v53 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v54 = (char *)operator new(8 * v53);
      uint64_t v55 = v54;
      unint64_t v56 = (v53 + 3) >> 2;
      uint64_t v30 = &v54[8 * v56];
      int64_t v57 = v46 - v28;
      BOOL v40 = v46 == v28;
      uint64_t v46 = v30;
      if (!v40)
      {
        uint64_t v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v58 = v57 - 8;
        uint64_t v59 = &v54[8 * v56];
        unsigned int v60 = v28;
        if (v58 >= 0x38)
        {
          uint64_t v61 = 8 * v56;
          uint64_t v59 = &v54[8 * v56];
          unsigned int v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            unsigned int v64 = (long long *)(v28 + 16);
            int v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)int v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_42;
            }
            unsigned int v60 = &v28[v63];
          }
        }
        do
        {
          uint64_t v68 = *(void *)v60;
          v60 += 8;
          *(void *)uint64_t v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_42:
      unint64_t v31 = &v54[8 * v53];
      operator delete(v28);
      uint64_t v28 = v55;
LABEL_43:
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  unint64_t v47 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v30;
  *(void *)(a1 + 16) = v46;
  *(void *)(a1 + 24) = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1CA88A604(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::EmptyStringWalker::ShortVisit(re2::EmptyStringWalker *this, re2::Regexp *a2, uint64_t a3)
{
  LOBYTE(v6) = 0;
  unint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EmptyStringWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v6);
  return a3;
}

void sub_1CA88A68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL re2::EmptyStringWalker::PostVisit(re2::EmptyStringWalker *this, re2::Regexp *a2, BOOL a3, BOOL a4, BOOL *a5, unsigned int a6)
{
  BOOL result = 0;
  switch(*(unsigned char *)a2)
  {
    case 2:
    case 7:
    case 9:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
      return 1;
    case 5:
      if ((int)a6 < 1) {
        return 1;
      }
      if (!*a5) {
        return 0;
      }
      unint64_t v7 = 0;
      while (a6 - 1 != v7)
      {
        if (!a5[++v7]) {
          return v7 >= a6;
        }
      }
      unint64_t v7 = a6;
      return v7 >= a6;
    case 6:
      if ((int)a6 < 1) {
        return 0;
      }
      if (*a5) {
        return 1;
      }
      unint64_t v9 = 0;
      break;
    case 8:
    case 0xB:
      if (!a5) {
        return 0;
      }
      return *a5;
    case 0xA:
      if (!a5) {
        return 0;
      }
      return *a5 || *((_DWORD *)a2 + 7) == 0;
    default:
      return result;
  }
  while (a6 - 1 != v9)
  {
    if (a5[++v9]) {
      return v9 < a6;
    }
  }
  unint64_t v9 = a6;
  return v9 < a6;
}

uint64_t re2::Regexp::Walker<BOOL>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::Regexp::Walker<BOOL>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void re2::PCREWalker::~PCREWalker(re2::PCREWalker *this)
{
  *(void *)this = &unk_1F24EE060;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F24EE060;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

void re2::Regexp::MimicsPCRE(re2::Regexp *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v1 = &unk_1F24EE060;
  operator new();
}

void sub_1CA88AA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re2::PCREWalker::~PCREWalker((re2::PCREWalker *)va);
  _Unwind_Resume(a1);
}

void sub_1CA88BEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t levenshtein<char>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = a3;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a3 >= a4) {
    unsigned int v10 = a4;
  }
  else {
    unsigned int v10 = a3;
  }
  if (a4 <= a3) {
    unsigned int v11 = a3;
  }
  else {
    unsigned int v11 = a4;
  }
  while (*(unsigned __int8 *)(a1 + v9) == *(unsigned __int8 *)(a2 + v9))
  {
    ++v9;
    --v8;
    if (!(v10 + v8))
    {
      int v12 = 0;
      return v11 - v10 + v12;
    }
  }
  int v13 = 0;
  unsigned int v14 = a3 + v8;
  int v15 = v10 + v8;
  int v12 = -v15;
  unsigned int v16 = a4 - 1;
  for (unsigned int i = a3 - 1; *(unsigned __int8 *)(a1 + i) == *(unsigned __int8 *)(a2 + v16); --i)
  {
    --v14;
    ++v13;
    --v16;
    if (v15 == v13)
    {
      unsigned int v10 = v9;
      return v11 - v10 + v12;
    }
  }
  int v20 = v9 + v13;
  size_t v21 = v11 - (v9 + v13) + 1;
  int v22 = a4 + v8;
  uint64_t v37 = v11 + v8 - v13;
  uint64_t v38 = (4 * v21);
  if (v38 <= 0x7CF)
  {
    MEMORY[0x1F4188790]();
    uint64_t v23 = (_DWORD *)((char *)&v36 - ((v24 + 15) & 0x1FFFFFFF0));
    bzero(v23, v24);
  }
  else
  {
    uint64_t v23 = malloc_type_calloc(4uLL, v21, 0x88A251CFuLL);
  }
  uint64_t v25 = 0;
  unint64_t v26 = (v22 - v13);
  uint64_t v27 = v37 + 1;
  do
  {
    v23[v25] = v25;
    ++v25;
  }
  while (v27 != v25);
  if (v20 != v5)
  {
    uint64_t v28 = 0;
    if (v14 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v14;
    }
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    uint64_t v30 = v23 + 1;
    do
    {
      int v31 = *(unsigned __int8 *)(a1 + (v9 + v28));
      uint64_t v32 = v28 + 1;
      *uint64_t v23 = v28 + 1;
      if (v20 != a4)
      {
        uint64_t v33 = 0;
        unsigned int v34 = v28 + 1;
        do
        {
          if (*(unsigned __int8 *)(a2 + (v9 + v33)) != v31) {
            LODWORD(v2_Block_object_dispose(&STACK[0x2A0], 8) = v28 + 1;
          }
          int v35 = v30[v33];
          if (v35 + 1 >= v34 + 1) {
            ++v34;
          }
          else {
            unsigned int v34 = v35 + 1;
          }
          if (v34 >= v28) {
            unsigned int v34 = v28;
          }
          v30[v33++] = v34;
          LODWORD(v2_Block_object_dispose(&STACK[0x2A0], 8) = v35;
        }
        while (v26 != v33);
      }
      uint64_t v28 = v32;
    }
    while (v32 != v29);
    unsigned int v5 = v9 + v13;
  }
  uint64_t v18 = v23[a4 - v5];
  if (v38 > 0x7CF) {
    free(v23);
  }
  return v18;
}

uint64_t levenshtein<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = a3;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a3 >= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  if (v6)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    if (a4 <= a3) {
      unsigned int v11 = a3;
    }
    else {
      unsigned int v11 = a4;
    }
    while (*(_DWORD *)(a1 + 4 * v10) == *(_DWORD *)(a2 + 4 * v10))
    {
      ++v10;
      --v9;
      if (!(v6 + v9)) {
        goto LABEL_10;
      }
    }
    int v16 = 0;
    unsigned int v17 = a3 + v9;
    int v18 = v6 + v9;
    int v12 = -v18;
    unsigned int v19 = a4 - 1;
    unsigned int v20 = a3 - 1;
    while (*(_DWORD *)(a1 + 4 * v20) == *(_DWORD *)(a2 + 4 * v19))
    {
      --v17;
      ++v16;
      --v19;
      --v20;
      if (v18 == v16)
      {
        unsigned int v6 = v10;
        goto LABEL_11;
      }
    }
    int v21 = v10 + v16;
    size_t v22 = v11 - (v10 + v16) + 1;
    int v23 = a4 + v9;
    uint64_t v38 = v11 + v9 - v16;
    uint64_t v39 = (4 * v22);
    if (v39 <= 0x7CF)
    {
      MEMORY[0x1F4188790]();
      size_t v24 = (_DWORD *)((char *)&v37 - ((v25 + 15) & 0x1FFFFFFF0));
      bzero(v24, v25);
    }
    else
    {
      size_t v24 = malloc_type_calloc(4uLL, v22, 0x88A251CFuLL);
    }
    uint64_t v26 = 0;
    unint64_t v27 = (v23 - v16);
    uint64_t v28 = v38 + 1;
    do
    {
      v24[v26] = v26;
      ++v26;
    }
    while (v28 != v26);
    if (v21 != v5)
    {
      uint64_t v29 = 0;
      if (v17 <= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v17;
      }
      if (v27 <= 1) {
        unint64_t v27 = 1;
      }
      int v31 = v24 + 1;
      do
      {
        int v32 = *(_DWORD *)(a1 + 4 * (v10 + v29));
        uint64_t v33 = v29 + 1;
        *size_t v24 = v29 + 1;
        if (v21 != a4)
        {
          uint64_t v34 = 0;
          unsigned int v35 = v29 + 1;
          do
          {
            if (*(_DWORD *)(a2 + 4 * (v10 + v34)) != v32) {
              LODWORD(v29) = v29 + 1;
            }
            int v36 = v31[v34];
            if (v36 + 1 >= v35 + 1) {
              ++v35;
            }
            else {
              unsigned int v35 = v36 + 1;
            }
            if (v35 >= v29) {
              unsigned int v35 = v29;
            }
            v31[v34++] = v35;
            LODWORD(v29) = v36;
          }
          while (v27 != v34);
        }
        uint64_t v29 = v33;
      }
      while (v33 != v30);
      unsigned int v5 = v10 + v16;
    }
    uint64_t v14 = v24[a4 - v5];
    if (v39 > 0x7CF) {
      free(v24);
    }
  }
  else
  {
LABEL_10:
    int v12 = 0;
LABEL_11:
    if (a3 <= a4) {
      unsigned int v13 = a4;
    }
    else {
      unsigned int v13 = a3;
    }
    return v13 - v6 + v12;
  }
  return v14;
}

uint64_t SGDCKTimeRangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 4u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x2A0], 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v47 = 24;
          goto LABEL_65;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 1u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v47 = 8;
LABEL_65:
          *(void *)(a1 + v47) = v20;
          continue;
        case 3u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  uint64_t v26 = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_51:
          uint64_t v45 = -(v26 & 1) ^ (v26 >> 1);
          uint64_t v46 = 32;
          goto LABEL_56;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v34 = *v3;
            uint64_t v35 = *(void *)(a2 + v34);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v36;
              v33 |= (unint64_t)(v37 & 0x7F) << v31;
              if (v37 < 0)
              {
                v31 += 7;
                BOOL v15 = v32++ >= 9;
                if (v15)
                {
                  uint64_t v33 = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v33 = 0;
          }
LABEL_55:
          uint64_t v45 = -(v33 & 1) ^ (v33 >> 1);
          uint64_t v46 = 16;
LABEL_56:
          *(void *)(a1 + v46) = v45;
          continue;
        case 5u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          *(unsigned char *)(a1 + 44) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v41 = *v3;
        uint64_t v42 = *(void *)(a2 + v41);
        unint64_t v43 = v42 + 1;
        if (v42 == -1 || v43 > *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
        *(void *)(a2 + v41) = v43;
        v40 |= (unint64_t)(v44 & 0x7F) << v38;
        if ((v44 & 0x80) == 0) {
          goto LABEL_58;
        }
        v38 += 7;
        BOOL v15 = v39++ >= 9;
        if (v15)
        {
          uint64_t v40 = 0;
          goto LABEL_60;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v40 = 0;
      }
LABEL_60:
      *(unsigned char *)(a1 + 4re2::Compiler::Compile(this, 0) = v40 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

re2::Regexp *re2::SimplifyWalker::ShortVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3)
{
  LOBYTE(v6) = 0;
  unint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"SimplifyWalker::ShortVisit called", 33);
  LogMessage::~LogMessage(&v6);
  return re2::Regexp::Incref(a2);
}

void sub_1CA88E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

re2::Regexp *re2::SimplifyWalker::Copy(re2::SimplifyWalker *this, re2::Regexp *a2)
{
  return re2::Regexp::Incref(a2);
}

re2::Regexp *re2::SimplifyWalker::PostVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3, re2::Regexp *a4, re2::Regexp **a5)
{
  unsigned int v5 = (unsigned __int16 *)a2;
  switch(*(unsigned char *)a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
      goto LABEL_2;
    case 5:
    case 6:
      uint64_t v13 = *((unsigned __int16 *)a2 + 3);
      char v14 = (re2::Regexp *)((char *)a2 + 8);
      if (v13 >= 2)
      {
        char v14 = *(re2::Regexp **)v14;
      }
      else if (!*((_WORD *)a2 + 3))
      {
        goto LABEL_2;
      }
      uint64_t v18 = a5;
      do
      {
        if (*v18 != *(re2::Regexp **)v14)
        {
          uint64_t v7 = (re2::Regexp *)mallocRegexp();
          unsigned __int16 v24 = v5[1];
          *(unsigned char *)uint64_t v7 = *(unsigned char *)v5;
          *((unsigned char *)v7 + 1) = 0;
          *((_WORD *)v7 + 1) = v24;
          *((_WORD *)v7 + 2) = 1;
          *(_OWORD *)((char *)v7 + 22) = 0u;
          *(_OWORD *)((char *)v7 + 6) = 0u;
          *((_WORD *)v7 + 19) = 0;
          re2::Regexp::AllocSub((uint64_t)v7, v5[3]);
          unsigned int v25 = (void *)((char *)v7 + 8);
          if (*((unsigned __int16 *)v7 + 3) >= 2u) {
            unsigned int v25 = (void *)*v25;
          }
          uint64_t v26 = v5[3];
          if (v5[3])
          {
            uint64_t v27 = 0;
            if (v26 < 4) {
              goto LABEL_41;
            }
            if ((unint64_t)((char *)v25 - (char *)a5) <= 0x1F) {
              goto LABEL_41;
            }
            uint64_t v27 = (unsigned __int16)v26 & 0xFFFC;
            uint64_t v28 = v25 + 2;
            unint64_t v29 = a5 + 2;
            uint64_t v30 = v27;
            do
            {
              long long v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *uint64_t v28 = v31;
              v28 += 2;
              v29 += 4;
              v30 -= 4;
            }
            while (v30);
            if (v27 != v26)
            {
LABEL_41:
              uint64_t v32 = v26 - v27;
              uint64_t v33 = v27;
              uint64_t v34 = &v25[v33];
              uint64_t v35 = &a5[v33];
              do
              {
                uint64_t v36 = (uint64_t)*v35++;
                *v34++ = v36;
                --v32;
              }
              while (v32);
            }
          }
          *((unsigned char *)v7 + 1) = 1;
          return v7;
        }
        ++v18;
        char v14 = (re2::Regexp *)((char *)v14 + 8);
        --v13;
      }
      while (v13);
      unint64_t v19 = 0;
      do
        re2::Regexp::Decref(a5[v19++]);
      while (v19 < v5[3]);
LABEL_2:
      *((unsigned char *)v5 + 1) = 1;
LABEL_3:
      re2::Regexp::Incref((re2::Regexp *)v5);
      return (re2::Regexp *)v5;
    case 7:
    case 8:
    case 9:
      uint64_t v7 = *a5;
      int v9 = *(unsigned __int8 *)*a5;
      if (v9 == 2) {
        return v7;
      }
      unint64_t v10 = (re2::Regexp *)((char *)a2 + 8);
      if (*((unsigned __int16 *)a2 + 3) >= 2u) {
        unint64_t v10 = *(re2::Regexp **)v10;
      }
      if (v7 == *(re2::Regexp **)v10)
      {
        char v37 = *a5;
        goto LABEL_46;
      }
      if (*(unsigned __int8 *)a2 != v9 || *((unsigned __int16 *)a2 + 1) != *((unsigned __int16 *)v7 + 1))
      {
        uint64_t v11 = mallocRegexp();
        unsigned __int16 v12 = v5[1];
        *(unsigned char *)uint64_t v11 = *(unsigned char *)v5;
        v11[1] = v12;
        *((_DWORD *)v11 + 1) = 65537;
        *((void *)v11 + 3) = 0;
        *((void *)v11 + 4) = 0;
        *((void *)v11 + 1) = v7;
        *((void *)v11 + 2) = 0;
        *((unsigned char *)v11 + 1) = 1;
        return (re2::Regexp *)v11;
      }
      return v7;
    case 0xA:
      uint64_t v7 = *a5;
      if (*(unsigned char *)*a5 == 2) {
        return v7;
      }
      unsigned int v5 = re2::SimplifyWalker::SimplifyRepeat(*a5, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 6), *((unsigned __int16 *)a2 + 1));
      re2::Regexp::Decref(v7);
      goto LABEL_50;
    case 0xB:
      int v21 = *a5;
      uint64_t v22 = (re2::Regexp *)((char *)a2 + 8);
      if (*((unsigned __int16 *)a2 + 3) >= 2u) {
        uint64_t v22 = *(re2::Regexp **)v22;
      }
      if (v21 != *(re2::Regexp **)v22)
      {
        uint64_t v7 = (re2::Regexp *)mallocRegexp();
        unsigned __int16 v23 = v5[1];
        *(_WORD *)uint64_t v7 = 11;
        *((_WORD *)v7 + 1) = v23;
        *((_DWORD *)v7 + 1) = 65537;
        *((void *)v7 + 3) = 0;
        *((void *)v7 + 4) = 0;
        *((void *)v7 + 1) = v21;
        *((void *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = *((_DWORD *)v5 + 6);
        *((unsigned char *)v7 + 1) = 1;
        return v7;
      }
      char v37 = *a5;
LABEL_46:
      re2::Regexp::Decref(v37);
      goto LABEL_2;
    case 0x14:
      int v15 = *(_DWORD *)(*((void *)a2 + 3) + 4);
      if (v15 == 1114112)
      {
        int v16 = (char *)mallocRegexp();
        unsigned __int16 v38 = v5[1];
        *(_WORD *)int v16 = 12;
        *((_WORD *)v16 + 1) = v38;
        *((_WORD *)v16 + 2) = 1;
        goto LABEL_48;
      }
      if (!v15)
      {
        int v16 = (char *)mallocRegexp();
        unsigned __int16 v17 = v5[1];
        *(_WORD *)int v16 = 1;
        *((_WORD *)v16 + 1) = v17;
        *((_WORD *)v16 + 2) = 1;
LABEL_48:
        *((_WORD *)v16 + 19) = 0;
        *(_OWORD *)(v16 + 22) = 0u;
        *(_OWORD *)(v16 + 6) = 0u;
        unsigned int v5 = (unsigned __int16 *)v16;
        goto LABEL_50;
      }
      re2::Regexp::Incref(a2);
LABEL_50:
      *((unsigned char *)v5 + 1) = 1;
      return (re2::Regexp *)v5;
    default:
      LOBYTE(v39) = 0;
      uint64_t v20 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Simplify case not handled: ", 27);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v39);
      goto LABEL_3;
  }
}

void sub_1CA88EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unsigned __int16 *re2::SimplifyWalker::SimplifyRepeat(re2::Regexp *this, signed int a2, signed int a3, int a4)
{
  unsigned int v6 = (unsigned __int16 *)this;
  if (a3 == -1)
  {
    uint64_t v8 = (a2 - 1);
    if (a2 == 1)
    {
      re2::Regexp::Incref(this);
      if (*(unsigned char *)v6 == 8 && v6[1] == a4) {
        return v6;
      }
      int v9 = (char *)mallocRegexp();
      unint64_t v10 = v9;
      __int16 v11 = 8;
    }
    else
    {
      if (a2)
      {
        unint64_t v10 = (char *)mallocRegexp();
        *(_WORD *)unint64_t v10 = 5;
        *((_WORD *)v10 + 1) = a4;
        *((_WORD *)v10 + 2) = 1;
        *(_OWORD *)(v10 + 6) = 0u;
        *(_OWORD *)(v10 + 22) = 0u;
        *((_WORD *)v10 + 19) = 0;
        re2::Regexp::AllocSub((uint64_t)v10, a2);
        char v14 = (unsigned __int16 *)(v10 + 8);
        if (*((unsigned __int16 *)v10 + 3) >= 2u) {
          char v14 = *(unsigned __int16 **)v14;
        }
        if (a2 >= 2)
        {
          int v15 = (unsigned __int16 **)v14;
          uint64_t v16 = v8;
          do
          {
            re2::Regexp::Incref((re2::Regexp *)v6);
            *v15++ = v6;
            --v16;
          }
          while (v16);
        }
        re2::Regexp::Incref((re2::Regexp *)v6);
        if (*(unsigned char *)v6 != 8 || v6[1] != a4)
        {
          unsigned __int16 v17 = mallocRegexp();
          *unsigned __int16 v17 = 8;
          v17[1] = a4;
          *((_DWORD *)v17 + 1) = 65537;
          *((void *)v17 + 1) = v6;
          *((void *)v17 + 2) = 0;
          unsigned int v6 = v17;
          *((void *)v17 + 3) = 0;
          *((void *)v17 + 4) = 0;
        }
        *(void *)&v14[4 * (int)v8] = v6;
        return (unsigned __int16 *)v10;
      }
      re2::Regexp::Incref(this);
      if (*(unsigned char *)v6 == 7 && v6[1] == a4) {
        return v6;
      }
      int v9 = (char *)mallocRegexp();
      unint64_t v10 = v9;
      __int16 v11 = 7;
    }
    *(_WORD *)int v9 = v11;
    *((_WORD *)v9 + 1) = a4;
    *((_DWORD *)v9 + 1) = 65537;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 1) = v6;
    *((void *)v9 + 2) = 0;
    return (unsigned __int16 *)v10;
  }
  if (!(a3 | a2))
  {
    unint64_t v10 = (char *)mallocRegexp();
    *(_WORD *)unint64_t v10 = 2;
    *((_WORD *)v10 + 1) = a4;
    *((_WORD *)v10 + 2) = 1;
    *(_OWORD *)(v10 + 6) = 0u;
    *(_OWORD *)(v10 + 22) = 0u;
    *((_WORD *)v10 + 19) = 0;
    return (unsigned __int16 *)v10;
  }
  if (a2 == 1 && a3 == 1)
  {
    re2::Regexp::Incref(this);
    return v6;
  }
  if (a2 < 1)
  {
    if (a3 <= a2) {
      goto LABEL_40;
    }
    unint64_t v10 = 0;
    goto LABEL_35;
  }
  unint64_t v10 = (char *)mallocRegexp();
  *(_WORD *)unint64_t v10 = 5;
  *((_WORD *)v10 + 1) = a4;
  *((_WORD *)v10 + 2) = 1;
  *(_OWORD *)(v10 + 6) = 0u;
  *(_OWORD *)(v10 + 22) = 0u;
  *((_WORD *)v10 + 19) = 0;
  re2::Regexp::AllocSub((uint64_t)v10, a2);
  unsigned __int16 v12 = (unsigned __int16 **)(v10 + 8);
  if (*((unsigned __int16 *)v10 + 3) >= 2u) {
    unsigned __int16 v12 = (unsigned __int16 **)*v12;
  }
  uint64_t v13 = a2;
  do
  {
    re2::Regexp::Incref((re2::Regexp *)v6);
    *v12++ = v6;
    --v13;
  }
  while (v13);
  if (a3 > a2)
  {
LABEL_35:
    re2::Regexp::Incref((re2::Regexp *)v6);
    if (*(unsigned char *)v6 != 9 || (uint64_t v18 = v6, v6[1] != a4))
    {
      uint64_t v18 = mallocRegexp();
      _WORD *v18 = 9;
      v18[1] = a4;
      *((_DWORD *)v18 + 1) = 65537;
      *((void *)v18 + 3) = 0;
      *((void *)v18 + 4) = 0;
      *((void *)v18 + 1) = v6;
      *((void *)v18 + 2) = 0;
    }
    if (a2 + 1 < a3)
    {
      re2::Regexp::Incref((re2::Regexp *)v6);
      unint64_t v19 = (char *)mallocRegexp();
      *(_WORD *)unint64_t v19 = 5;
      *((_WORD *)v19 + 1) = a4;
      *((_WORD *)v19 + 2) = 1;
      *(_OWORD *)(v19 + 6) = 0u;
      *(_OWORD *)(v19 + 22) = 0u;
      *((_WORD *)v19 + 19) = 0;
      operator new[]();
    }
    if (v10)
    {
      int v21 = (char *)mallocRegexp();
      *(_WORD *)int v21 = 5;
      *((_WORD *)v21 + 1) = a4;
      *((_WORD *)v21 + 2) = 1;
      *(_OWORD *)(v21 + 6) = 0u;
      *(_OWORD *)(v21 + 22) = 0u;
      *((_WORD *)v21 + 19) = 0;
      operator new[]();
    }
    return v18;
  }
  if (!v10)
  {
LABEL_40:
    char v24 = 0;
    uint64_t v20 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Malformed repeat ", 17);
    re2::Regexp::ToString(&__p);
  }
  return (unsigned __int16 *)v10;
}

void sub_1CA88EFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
}

re2::SimplifyWalker *re2::SimplifyWalker::SimplifyCharClass(re2::SimplifyWalker *this, re2::Regexp *a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(*((void *)this + 3) + 4);
  if (v3 == 1114112)
  {
    unint64_t v4 = (char *)mallocRegexp();
    __int16 v6 = *((_WORD *)v2 + 1);
    *(_WORD *)unint64_t v4 = 12;
    *((_WORD *)v4 + 1) = v6;
    *((_WORD *)v4 + 2) = 1;
  }
  else
  {
    if (v3)
    {
      re2::Regexp::Incref(this);
      return v2;
    }
    unint64_t v4 = (char *)mallocRegexp();
    __int16 v5 = *((_WORD *)v2 + 1);
    *(_WORD *)unint64_t v4 = 1;
    *((_WORD *)v4 + 1) = v5;
    *((_WORD *)v4 + 2) = 1;
  }
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  return (re2::SimplifyWalker *)v4;
}

re2::Regexp *re2::SimplifyWalker::PreVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3, BOOL *a4)
{
  if (!*((unsigned char *)a2 + 1)) {
    return 0;
  }
  *a4 = 1;
  return re2::Regexp::Incref(a2);
}

void re2::SimplifyWalker::~SimplifyWalker(re2::SimplifyWalker *this)
{
  *(void *)this = &unk_1F24EE108;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F24EE108;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

void re2::Regexp::Walker<re2::Regexp*>::Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(v1 + 40))
    {
      LOBYTE(v16) = 0;
      uint64_t v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v16);
      unint64_t v4 = *(void **)(a1 + 8);
      uint64_t v5 = v4[5];
      while (v5)
      {
        uint64_t v6 = v4[4];
        unint64_t v7 = v5 + v6 - 1;
        uint64_t v8 = v4[1];
        uint64_t v9 = *(void *)(*(void *)(v8 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55) + 40);
        if (v9)
        {
          MEMORY[0x1CB79A8C0](v9, 0x20C4093837F09);
          unint64_t v4 = *(void **)(a1 + 8);
          uint64_t v6 = v4[4];
          uint64_t v8 = v4[1];
        }
        uint64_t v10 = v4[2];
        uint64_t v12 = v10 - v8;
        BOOL v11 = v12 == 0;
        uint64_t v13 = 85 * (v12 >> 3) - 1;
        uint64_t v14 = v4[5];
        if (v11) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v13;
        }
        uint64_t v5 = v14 - 1;
        void v4[5] = v14 - 1;
        if ((unint64_t)(v15 - (v14 + v6) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v10 - 8));
          v4[2] -= 8;
          unint64_t v4 = *(void **)(a1 + 8);
          uint64_t v5 = v4[5];
        }
      }
    }
  }
}

void sub_1CA88F278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

re2::Regexp *re2::Regexp::Simplify(re2::Regexp *this)
{
  if (!*((unsigned char *)this + 1))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v3 = &unk_1F24EE108;
    operator new();
  }
  re2::Regexp::Incref(this);
  return this;
}

void sub_1CA88F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  re2::SimplifyWalker::~SimplifyWalker((re2::SimplifyWalker *)va);
  _Unwind_Resume(a1);
}

void std::deque<re2::WalkState<re2::Regexp *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)uint64_t v5 = v8;
      goto LABEL_89;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        char v37 = (char *)operator new(8 * v34);
        unsigned __int16 v38 = &v37[8 * v35];
        unsigned int v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        uint64_t v5 = v38;
        if (!v40)
        {
          uint64_t v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            uint64_t v84 = &v37[8 * v35];
            unint64_t v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v42 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v43 = &v38[v86];
              int64_t v87 = (long long *)(v6 + 3);
              CFRange v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *CFRange v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v86;
            }
          }
          else
          {
            unint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  uint64_t v17 = *(char **)(a1 + 24);
  uint64_t v20 = *(char **)a1;
  unint64_t v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    char v24 = operator new(0xFF0uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      char v44 = v19;
      goto LABEL_87;
    }
    unint64_t v69 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v69 = 1;
    }
    if (v69 >> 61) {
      goto LABEL_106;
    }
    unint64_t v70 = (v69 + 3) >> 2;
    uint64_t v71 = 8 * v69;
    uint64_t v72 = (char *)operator new(8 * v69);
    char v44 = &v72[8 * v70];
    uint64_t v73 = &v72[v71];
    uint64_t v74 = v44;
    if (v18 != v19)
    {
      uint64_t v74 = &v44[8 * v22];
      uint64_t v75 = &v72[8 * v70];
      long long v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        int v77 = &v72[8 * v70];
        uint64_t v75 = v77;
        long long v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          unint64_t v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v75 = &v44[v79];
          long long v80 = (long long *)(v19 + 16);
          int64_t v81 = v77 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *int64_t v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v72;
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
            *(void *)(a1 + 16) = v74;
            *(void *)(a1 + 24) = v73;
LABEL_86:
            operator delete(v19);
            char v44 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v44 - 1) = v25;
            unint64_t v7 = *(char **)(a1 + 8);
            uint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            uint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v93 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v93 = 1;
              }
              if (!(v93 >> 61))
              {
                unint64_t v94 = v93 >> 2;
                uint64_t v95 = 8 * v93;
                char v37 = (char *)operator new(8 * v93);
                unsigned __int16 v38 = &v37[8 * v94];
                unsigned int v39 = &v37[v95];
                int64_t v96 = v5 - v7;
                BOOL v40 = v5 == v7;
                uint64_t v5 = v38;
                if (!v40)
                {
                  uint64_t v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    unint64_t v99 = &v37[8 * v94];
                    int v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      uint64_t v100 = (v97 >> 3) + 1;
                      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      int v98 = &v38[v101];
                      char v102 = (long long *)(v7 + 16);
                      uint64_t v103 = v99 + 16;
                      uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *uint64_t v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v101;
                    }
                  }
                  else
                  {
                    int v98 = &v37[8 * v94];
                  }
                  do
                  {
                    uint64_t v106 = *(void *)v7;
                    v7 += 8;
                    *(void *)int v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_81:
                *(void *)a1 = v37;
                *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v38;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  uint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          long long v76 = &v19[v79];
        }
      }
      do
      {
        uint64_t v92 = *(void *)v76;
        v76 += 8;
        *(void *)uint64_t v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(void *)a1 = v72;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
    *(void *)(a1 + 16) = v74;
    *(void *)(a1 + 24) = v73;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  unint64_t v29 = operator new(0xFF0uLL);
  uint64_t v30 = &v28[8 * v22];
  long long v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    uint64_t v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      long long v31 = &v30[8 * v45];
      operator delete(v28);
      unint64_t v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      uint64_t v28 = v30;
    }
    else
    {
      unint64_t v33 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v33 = v22 + 1;
      }
      v30 -= 8 * (v33 >> 1);
    }
    unint64_t v29 = v32;
  }
  *(void *)uint64_t v30 = v29;
  uint64_t v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28) {
        goto LABEL_43;
      }
      if (v46 < v31)
      {
        uint64_t v49 = (v31 - v46) >> 3;
        if (v49 >= -1) {
          uint64_t v50 = v49 + 1;
        }
        else {
          uint64_t v50 = v49 + 2;
        }
        uint64_t v51 = v50 >> 1;
        uint64_t v30 = &v28[8 * (v50 >> 1)];
        unsigned int v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          unsigned int v52 = v46;
        }
        uint64_t v46 = (char *)v52 + 8 * v51;
        goto LABEL_43;
      }
      if (v31 == v28) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = (v31 - v28) >> 2;
      }
      if (v53 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v54 = (char *)operator new(8 * v53);
      uint64_t v55 = v54;
      unint64_t v56 = (v53 + 3) >> 2;
      uint64_t v30 = &v54[8 * v56];
      int64_t v57 = v46 - v28;
      BOOL v40 = v46 == v28;
      uint64_t v46 = v30;
      if (!v40)
      {
        uint64_t v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v58 = v57 - 8;
        uint64_t v59 = &v54[8 * v56];
        unsigned int v60 = v28;
        if (v58 >= 0x38)
        {
          uint64_t v61 = 8 * v56;
          uint64_t v59 = &v54[8 * v56];
          unsigned int v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            unsigned int v64 = (long long *)(v28 + 16);
            int v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)int v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_42;
            }
            unsigned int v60 = &v28[v63];
          }
        }
        do
        {
          uint64_t v68 = *(void *)v60;
          v60 += 8;
          *(void *)uint64_t v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_42:
      long long v31 = &v54[8 * v53];
      operator delete(v28);
      uint64_t v28 = v55;
LABEL_43:
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  uint64_t v47 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v30;
  *(void *)(a1 + 16) = v46;
  *(void *)(a1 + 24) = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1CA88FE50(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL re2::Regexp::ComputeSimple(re2::Regexp *this)
{
  int v2 = *(unsigned __int8 *)this - 1;
  BOOL result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
      return result;
    case 4:
    case 5:
      unint64_t v7 = *((unsigned __int16 *)this + 3);
      uint64_t v8 = (char *)this + 8;
      if (v7 >= 2)
      {
        uint64_t v8 = *(char **)v8;
      }
      else if (!*((_WORD *)this + 3))
      {
        return result;
      }
      if (!*(unsigned char *)(*(void *)v8 + 1)) {
        return 0;
      }
      unint64_t v11 = 0;
      uint64_t v12 = v8 + 8;
      break;
    case 6:
    case 7:
    case 8:
      unint64_t v4 = (unsigned __int8 *)this + 8;
      if (*((unsigned __int16 *)this + 3) >= 2u) {
        unint64_t v4 = *(unsigned __int8 **)v4;
      }
      uint64_t v5 = *(unsigned __int8 **)v4;
      if (!v5[1]) {
        return 0;
      }
      unsigned int v6 = *v5;
      if (v6 < 0xA) {
        return (0x79u >> v6) & 1;
      }
      return result;
    case 9:
      return 0;
    case 10:
      int64_t v16 = (char *)this + 8;
      if (*((unsigned __int16 *)this + 3) >= 2u) {
        int64_t v16 = *(char **)v16;
      }
      return *(unsigned __int8 *)(*(void *)v16 + 1) != 0;
    case 19:
      uint64_t v9 = *((void *)this + 4);
      if (v9) {
        int v10 = *(_DWORD *)(v9 + 8);
      }
      else {
        int v10 = *(_DWORD *)(*((void *)this + 3) + 4);
      }
      if (v10) {
        BOOL v17 = v10 == 1114112;
      }
      else {
        BOOL v17 = 1;
      }
      return !v17;
    default:
      LOBYTE(v1_Block_object_dispose(&STACK[0x2A0], 8) = 0;
      uint64_t v14 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Case not handled in ComputeSimple: ", 35);
      char v20 = *(unsigned char *)this;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v20, 1);
      LogMessage::~LogMessage(&v18);
      return 0;
  }
  while (v7 - 1 != v11)
  {
    if (!*(unsigned __int8 *)(*(void *)&v12[8 * v11++] + 1)) {
      return v11 >= v7;
    }
  }
  unint64_t v11 = *((unsigned __int16 *)this + 3);
  return v11 >= v7;
}

void sub_1CA890010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void re2::SimplifyWalker::Concat2(uint64_t a1, uint64_t a2, __int16 a3)
{
  unint64_t v4 = (char *)mallocRegexp();
  *(_WORD *)unint64_t v4 = 5;
  *((_WORD *)v4 + 1) = a3;
  *((_WORD *)v4 + 2) = 1;
  *(_OWORD *)(v4 + 6) = 0u;
  *(_OWORD *)(v4 + 22) = 0u;
  *((_WORD *)v4 + 19) = 0;
  operator new[]();
}

void re2::Prefilter::Info::Walker::ShortVisit(re2::Prefilter::Info::Walker *this, re2::Regexp *a2, re2::Prefilter::Info *a3)
{
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

re2::Prefilter::Info *re2::Prefilter::Info::Walker::PostVisit(re2::Prefilter::Info::Walker *this, re2::Regexp *a2, re2::Prefilter::Info *a3, re2::Prefilter::Info *a4, re2::Prefilter::Info **a5, int a6)
{
  unint64_t v7 = a5;
  switch(*(unsigned char *)a2)
  {
    case 1:
      operator new();
    case 2:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
      operator new();
    case 3:
      uint64_t v8 = (re2::Prefilter::Info *)*((unsigned int *)a2 + 6);
      if (*((unsigned char *)this + 24)) {
        operator new();
      }
      re2::Prefilter::Info::Literal(v8);
    case 4:
      if (*((_DWORD *)a2 + 6))
      {
        int v9 = *((unsigned __int8 *)this + 24);
        int v10 = (re2::Prefilter::Info *)**((unsigned int **)a2 + 4);
        if (v9) {
          re2::Prefilter::Info::LiteralLatin1(v10);
        }
        re2::Prefilter::Info::Literal(v10);
      }
      re2::Prefilter::Info::NoMatch(this);
    case 5:
      if (a6 >= 1)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = a6;
        while (1)
        {
          int64_t v16 = *v7;
          if (*((unsigned char *)*v7 + 24))
          {
            if (!v11) {
              goto LABEL_12;
            }
            if (*((void *)v11 + 2) * *((void *)v16 + 2) <= 0x10uLL)
            {
              int64_t v16 = re2::Prefilter::Info::Concat(v11, *v7, a3);
              goto LABEL_12;
            }
          }
          uint64_t v14 = re2::Prefilter::Info::And(v12, v11, a3);
          uint64_t v12 = re2::Prefilter::Info::And(v14, v16, v15);
          int64_t v16 = 0;
LABEL_12:
          ++v7;
          unint64_t v11 = v16;
          if (!--v13) {
            goto LABEL_42;
          }
        }
      }
      uint64_t v12 = 0;
      int64_t v16 = 0;
LABEL_42:
      return re2::Prefilter::Info::And(v12, v16, a3);
    case 6:
      if (a5)
      {
        BOOL v17 = *a5;
        if (a6 >= 2) {
          re2::Prefilter::Info::Alt(v17, a5[1], a3);
        }
        return v17;
      }
      LOBYTE(__p) = 0;
      char v24 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"kRegexpAlternate child_args is NULL", 35);
      goto LABEL_49;
    case 7:
      if (a5) {
        goto LABEL_25;
      }
      LOBYTE(__p) = 0;
      uint64_t v18 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"kRegexpStar child_args is NULL", 30);
      goto LABEL_49;
    case 8:
      if (a5) {
        operator new();
      }
      LOBYTE(__p) = 0;
      unint64_t v27 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"kRegexpPlus child_args is NULL", 30);
      goto LABEL_49;
    case 9:
      if (a5)
      {
LABEL_25:
        uint64_t v19 = *a5;
        re2::Prefilter::Info::Quest(v19, a2);
      }
      LOBYTE(__p) = 0;
      uint64_t v25 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"kRegexpQuest child_args is NULL", 31);
      goto LABEL_49;
    case 0xB:
      if (!a5)
      {
        LOBYTE(__p) = 0;
        uint64_t v26 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"kRegexpCapture child_args is NULL", 33);
LABEL_49:
        LogMessage::~LogMessage(&__p);
        re2::Prefilter::Info::EmptyString(v28);
      }
      return *a5;
    case 0xC:
      operator new();
    case 0x14:
      uint64_t v21 = (re2::CharClass *)*((unsigned __int8 *)this + 24);
      uint64_t v22 = (re2::Prefilter::Info *)*((void *)a2 + 3);
      re2::Prefilter::Info::CClass(v22, v21);
    default:
      LOBYTE(__p) = 0;
      char v20 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bad regexp op ", 14);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&__p);
      operator new();
  }
}

void sub_1CA890BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1CA890C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          int64_t v16 = v11;
        }
        else {
          int64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        unsigned int v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      BOOL result = (uint64_t *)memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (result) {
        BOOL v21 = (int)result < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        unsigned int v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v10 = a1 + 1;
LABEL_27:
    uint64_t v22 = operator new(0x38uLL);
    void v22[2] = *(_OWORD *)a3;
    *((void *)v22 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v10;
    *unsigned int v6 = (uint64_t *)v22;
    uint64_t v23 = (uint64_t *)**a1;
    if (v23)
    {
      *a1 = v23;
      char v24 = *v6;
    }
    else
    {
      char v24 = (uint64_t *)v22;
    }
    BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void re2::Prefilter::Info::Literal(re2::Prefilter::Info *this)
{
}

void sub_1CA891068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void re2::Prefilter::Info::NoMatch(re2::Prefilter::Info *this)
{
}

void re2::Prefilter::Info::LiteralLatin1(re2::Prefilter::Info *this)
{
}

void sub_1CA8911BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

re2::Prefilter::Info *re2::Prefilter::Info::Concat(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
  if (this) {
    operator new();
  }
  return a2;
}

void sub_1CA891764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

re2::Prefilter::Info *re2::Prefilter::Info::And(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
  if (!this) {
    return a2;
  }
  if (a2) {
    operator new();
  }
  return this;
}

void re2::Prefilter::Info::EmptyString(re2::Prefilter::Info *this)
{
}

void sub_1CA89195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void re2::Prefilter::Info::Alt(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
}

void re2::Prefilter::Info::Quest(re2::Prefilter::Info *this, re2::Prefilter::Info *a2)
{
}

uint64_t re2::Prefilter::OrStrings(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v28 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      int v2 = (void *)v1[1];
      BOOL v3 = v2;
      unint64_t v4 = v1;
      if (v2)
      {
        do
        {
          uint64_t v5 = v3;
          BOOL v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v4[2];
          BOOL v6 = *v5 == (void)v4;
          unint64_t v4 = v5;
        }
        while (!v6);
      }
      if (v5 != v28)
      {
        do
        {
          int v7 = v5;
          size_t v8 = (void *)v5[1];
          int v9 = v8;
          int v10 = v5;
          if (v8)
          {
            do
            {
              uint64_t v5 = v9;
              int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v5 = (void *)v10[2];
              BOOL v6 = *v5 == (void)v10;
              int v10 = v5;
            }
            while (!v6);
          }
          unint64_t v11 = (char *)(v7 + 4);
          if (*((char *)v7 + 55) < 0)
          {
            unint64_t v11 = (char *)v7[4];
            uint64_t v12 = v7[5];
          }
          else
          {
            uint64_t v12 = *((unsigned __int8 *)v7 + 55);
          }
          char v13 = *((unsigned char *)v1 + 55);
          if (v13 >= 0) {
            int v14 = (char *)(v1 + 4);
          }
          else {
            int v14 = (char *)v1[4];
          }
          if (v13 >= 0) {
            int64_t v15 = *((unsigned __int8 *)v1 + 55);
          }
          else {
            int64_t v15 = v1[5];
          }
          if (v15)
          {
            if (v12 >= v15)
            {
              int64_t v16 = &v11[v12];
              int v17 = *v14;
              int v18 = v11;
              do
              {
                uint64_t v19 = v12 - v15;
                if (v19 == -1) {
                  break;
                }
                char v20 = (char *)memchr(v18, v17, v19 + 1);
                if (!v20) {
                  break;
                }
                BOOL v21 = v20;
                if (!memcmp(v20, v14, v15))
                {
                  if (v21 == v16 || v21 - v11 == -1) {
                    break;
                  }
                  goto LABEL_38;
                }
                int v18 = v21 + 1;
                uint64_t v12 = v16 - (v21 + 1);
              }
              while (v12 >= v15);
            }
          }
          else
          {
LABEL_38:
            uint64_t v22 = v7;
            if (v8)
            {
              do
              {
                uint64_t v23 = v8;
                size_t v8 = (void *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                uint64_t v23 = (void *)v22[2];
                BOOL v6 = *v23 == (void)v22;
                uint64_t v22 = v23;
              }
              while (!v6);
            }
            if ((void *)*a1 == v7) {
              *a1 = v23;
            }
            char v24 = (uint64_t *)a1[1];
            --a1[2];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v24, v7);
            if (*((char *)v7 + 55) < 0) {
              operator delete((void *)v7[4]);
            }
            operator delete(v7);
          }
        }
        while (v5 != v28);
        int v2 = (void *)v1[1];
      }
      if (v2)
      {
        do
        {
          uint64_t v25 = v2;
          int v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v1[2];
          BOOL v6 = *v25 == (void)v1;
          uint64_t v1 = v25;
        }
        while (!v6);
      }
      uint64_t v1 = v25;
    }
    while (v25 != v28);
  }
  if (a1[2]) {
    operator new();
  }
  return 0;
}

void re2::Prefilter::Info::CClass(re2::Prefilter::Info *this, re2::CharClass *a2)
{
}

void sub_1CA8928B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

re2::Prefilter *re2::Prefilter::AndOr(int a1, re2::Prefilter *this, re2::Prefilter *a3)
{
  unint64_t v4 = this;
  int v6 = *(_DWORD *)this;
  if ((*(_DWORD *)this - 3) <= 1)
  {
    while (1)
    {
      uint64_t v7 = *((void *)v4 + 1);
      size_t v8 = *(re2::Prefilter ***)v7;
      uint64_t v9 = (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3;
      if (v9 != 1) {
        break;
      }
      int v10 = *v8;
      *(void *)(v7 + _Block_object_dispose(&STACK[0x2A0], 8) = v8;
      re2::Prefilter::~Prefilter(v4);
      MEMORY[0x1CB79A8C0]();
      int v6 = *(_DWORD *)v10;
      unint64_t v4 = v10;
      if ((*(_DWORD *)v10 - 3) >= 2) {
        goto LABEL_8;
      }
    }
    if (!v9) {
      *(_DWORD *)unint64_t v4 = v6 != 3;
    }
  }
  int v10 = v4;
LABEL_8:
  int v11 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 - 3) <= 1)
  {
    while (1)
    {
      uint64_t v12 = *((void *)a3 + 1);
      char v13 = *(int ***)v12;
      uint64_t v14 = (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3;
      if (v14 != 1) {
        break;
      }
      int64_t v15 = *v13;
      *(void *)(v12 + _Block_object_dispose(&STACK[0x2A0], 8) = v13;
      re2::Prefilter::~Prefilter(a3);
      MEMORY[0x1CB79A8C0]();
      int v11 = *v15;
      a3 = (re2::Prefilter *)v15;
      if ((*v15 - 3) >= 2) {
        goto LABEL_15;
      }
    }
    if (!v14)
    {
      int v11 = v11 != 3;
      *(_DWORD *)a3 = v11;
    }
  }
  int64_t v15 = (int *)a3;
LABEL_15:
  BOOL v16 = *(_DWORD *)v10 <= v11;
  if (*(_DWORD *)v10 < v11) {
    int v11 = *(_DWORD *)v10;
  }
  if (v16) {
    int v17 = v10;
  }
  else {
    int v17 = (re2::Prefilter *)v15;
  }
  if (v16) {
    int v18 = (re2::Prefilter *)v15;
  }
  else {
    int v18 = v10;
  }
  if (v11 == 1)
  {
    if (a1 != 4) {
      goto LABEL_72;
    }
LABEL_28:
    re2::Prefilter::~Prefilter(v17);
    MEMORY[0x1CB79A8C0]();
    return v18;
  }
  if (!v11)
  {
    if (a1 != 3)
    {
LABEL_72:
      re2::Prefilter::~Prefilter(v18);
      MEMORY[0x1CB79A8C0]();
      return v17;
    }
    goto LABEL_28;
  }
  int v20 = *(_DWORD *)v18;
  if (v11 == a1 && v20 == a1)
  {
    if ((a1 - 3) > 1)
    {
LABEL_97:
      LogMessage::LogMessage((LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
      LogMessage::Flush((LogMessage *)v69);
      abort();
    }
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v28 = (uint64_t *)*((void *)v18 + 1);
      uint64_t v29 = *v28;
      if (v26 >= (v28[1] - *v28) >> 3)
      {
        v28[1] = v29;
        goto LABEL_72;
      }
      if ((*(_DWORD *)v17 - 3) >= 2)
      {
        LogMessage::LogMessage((LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)v69);
        abort();
      }
      uint64_t v30 = *(void *)(v29 + 8 * v26);
      long long v31 = (char **)*((void *)v17 + 1);
      unint64_t v33 = v31[1];
      unint64_t v32 = (unint64_t)v31[2];
      if ((unint64_t)v33 >= v32) {
        break;
      }
      *(void *)unint64_t v33 = v30;
      unint64_t v27 = v33 + 8;
LABEL_46:
      v31[1] = v27;
      ++v26;
      if ((*(_DWORD *)v18 - 3) >= 2) {
        goto LABEL_97;
      }
    }
    unint64_t v34 = v17;
    unint64_t v35 = *v31;
    uint64_t v36 = v33 - *v31;
    uint64_t v37 = v36 >> 3;
    unint64_t v38 = (v36 >> 3) + 1;
    if (v38 >> 61) {
      goto LABEL_99;
    }
    uint64_t v39 = v32 - (void)v35;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
    }
    unint64_t v68 = v38;
    if (v38)
    {
      if (v38 >> 61) {
        goto LABEL_100;
      }
      BOOL v40 = operator new(8 * v38);
    }
    else
    {
      BOOL v40 = 0;
    }
    int64_t v41 = &v40[8 * v37];
    *(void *)int64_t v41 = v30;
    unint64_t v27 = v41 + 8;
    if (v33 == v35)
    {
      int v17 = v34;
      goto LABEL_69;
    }
    unint64_t v42 = v33 - 8 - v35;
    if (v42 >= 0x58)
    {
      unint64_t v43 = v33 - &v40[v36];
      int v17 = v34;
      if (v43 >= 0x20)
      {
        uint64_t v44 = (v42 >> 3) + 1;
        unint64_t v45 = &v40[8 * v37 - 16];
        uint64_t v46 = v33 - 16;
        uint64_t v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v48 = *(_OWORD *)v46;
          *(v45 - 1) = *((_OWORD *)v46 - 1);
          *unint64_t v45 = v48;
          v45 -= 2;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        v41 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v33 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_68;
        }
      }
    }
    else
    {
      int v17 = v34;
    }
    do
    {
      uint64_t v49 = *((void *)v33 - 1);
      v33 -= 8;
      *((void *)v41 - 1) = v49;
      v41 -= 8;
    }
    while (v33 != v35);
LABEL_68:
    unint64_t v33 = *v31;
LABEL_69:
    *long long v31 = v41;
    v31[1] = v27;
    v31[2] = &v40[8 * v68];
    if (v33) {
      operator delete(v33);
    }
    goto LABEL_46;
  }
  if (v20 == a1) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v17;
  }
  if (v20 == a1) {
    uint64_t v22 = v17;
  }
  else {
    uint64_t v22 = v18;
  }
  if (*(_DWORD *)v19 != a1) {
    operator new();
  }
  if ((a1 - 3) >= 2)
  {
    LogMessage::LogMessage((LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
    LogMessage::Flush((LogMessage *)v69);
    abort();
  }
  uint64_t v23 = *((void *)v19 + 1);
  uint64_t v25 = *(re2::Prefilter ***)(v23 + 8);
  unint64_t v24 = *(void *)(v23 + 16);
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v51 = *(re2::Prefilter ***)v23;
    uint64_t v52 = (uint64_t)v25 - *(void *)v23;
    uint64_t v53 = v52 >> 3;
    unint64_t v54 = (v52 >> 3) + 1;
    if (v54 >> 61) {
LABEL_99:
    }
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    uint64_t v55 = v24 - (void)v51;
    if (v55 >> 2 > v54) {
      unint64_t v54 = v55 >> 2;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v54;
    }
    if (v56)
    {
      if (v56 >> 61) {
LABEL_100:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int64_t v57 = operator new(8 * v56);
    }
    else
    {
      int64_t v57 = 0;
    }
    unint64_t v58 = (re2::Prefilter **)&v57[8 * v53];
    uint64_t v59 = &v57[8 * v56];
    *unint64_t v58 = v22;
    unsigned int v60 = v58 + 1;
    if (v25 == v51)
    {
      uint64_t v51 = v25;
    }
    else
    {
      unint64_t v61 = (char *)v25 - (char *)v51 - 8;
      if (v61 < 0x58) {
        goto LABEL_104;
      }
      if ((unint64_t)((char *)v25 - v57 - v52) < 0x20) {
        goto LABEL_104;
      }
      uint64_t v62 = (v61 >> 3) + 1;
      uint64_t v63 = &v57[8 * v53 - 16];
      unsigned int v64 = v25 - 2;
      uint64_t v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v66 = *(_OWORD *)v64;
        *(v63 - 1) = *((_OWORD *)v64 - 1);
        *uint64_t v63 = v66;
        v63 -= 2;
        v64 -= 4;
        v65 -= 4;
      }
      while (v65);
      v58 -= v62 & 0x3FFFFFFFFFFFFFFCLL;
      v25 -= v62 & 0x3FFFFFFFFFFFFFFCLL;
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_104:
        do
        {
          long long v67 = *--v25;
          *--unint64_t v58 = v67;
        }
        while (v25 != v51);
        uint64_t v51 = *(re2::Prefilter ***)v23;
      }
    }
    *(void *)uint64_t v23 = v58;
    *(void *)(v23 + _Block_object_dispose(&STACK[0x2A0], 8) = v60;
    *(void *)(v23 + 16) = v59;
    if (v51) {
      operator delete(v51);
    }
    *(void *)(v23 + _Block_object_dispose(&STACK[0x2A0], 8) = v60;
  }
  else
  {
    *uint64_t v25 = v22;
    *(void *)(v23 + _Block_object_dispose(&STACK[0x2A0], 8) = v25 + 1;
  }
  return v19;
}

void sub_1CA892F78(uint64_t a1, ...)
{
  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1CA892F84(uint64_t a1, ...)
{
  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1CA892F8C(_Unwind_Exception *a1)
{
  MEMORY[0x1CB79A8C0](v1, 0x1032C40B307CA0FLL);
  _Unwind_Resume(a1);
}

void sub_1CA892FB4(uint64_t a1, ...)
{
  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1CA892FC0(uint64_t a1, ...)
{
  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void re2::Prefilter::~Prefilter(re2::Prefilter *this)
{
  int v2 = (re2::Prefilter ***)*((void *)this + 1);
  if (v2)
  {
    BOOL v3 = v2[1];
    if (v3 != *v2)
    {
      unint64_t v4 = 0;
      BOOL v3 = *v2;
      do
      {
        if (v3[v4])
        {
          re2::Prefilter::~Prefilter(v3[v4]);
          MEMORY[0x1CB79A8C0]();
          int v2 = (re2::Prefilter ***)*((void *)this + 1);
          BOOL v3 = *v2;
        }
        ++v4;
      }
      while (v4 < v2[1] - v3);
    }
    if (v3)
    {
      v2[1] = v3;
      operator delete(v3);
    }
    MEMORY[0x1CB79A8C0](v2, 0x80C40D6874129);
    *((void *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v5;
        char v13 = (const void *)v5[4];
        int v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          BOOL v16 = v11;
        }
        else {
          BOOL v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        int v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      BOOL result = (uint64_t *)memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (result) {
        BOOL v21 = (int)result < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        int v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v10 = a1 + 1;
LABEL_27:
    uint64_t v22 = (uint64_t *)operator new(0x38uLL);
    uint64_t v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v22[6] = *(void *)(a3 + 16);
    }
    *uint64_t v22 = 0;
    v22[1] = 0;
    void v22[2] = (uint64_t)v10;
    *int v6 = v22;
    unint64_t v24 = (uint64_t *)**a1;
    if (v24)
    {
      *a1 = v24;
      uint64_t v22 = *v6;
    }
    BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_1CA893200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void re2::Prefilter::Info::Walker::~Walker(re2::Prefilter::Info::Walker *this)
{
  *(void *)this = &unk_1F24EE1B0;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1CB79A8C0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F24EE1B0;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1CB79A8C0](v3, 0x1080C40BE8D5F09);
  }
}

void re2::Regexp::Walker<re2::Prefilter::Info *>::Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(v1 + 40))
    {
      LOBYTE(v16) = 0;
      uint64_t v3 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v16);
      unint64_t v4 = *(void **)(a1 + 8);
      uint64_t v5 = v4[5];
      while (v5)
      {
        uint64_t v6 = v4[4];
        unint64_t v7 = v5 + v6 - 1;
        uint64_t v8 = v4[1];
        uint64_t v9 = *(void *)(*(void *)(v8 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55) + 40);
        if (v9)
        {
          MEMORY[0x1CB79A8C0](v9, 0x20C4093837F09);
          unint64_t v4 = *(void **)(a1 + 8);
          uint64_t v6 = v4[4];
          uint64_t v8 = v4[1];
        }
        uint64_t v10 = v4[2];
        uint64_t v12 = v10 - v8;
        BOOL v11 = v12 == 0;
        uint64_t v13 = 85 * (v12 >> 3) - 1;
        uint64_t v14 = v4[5];
        if (v11) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v13;
        }
        uint64_t v5 = v14 - 1;
        void v4[5] = v14 - 1;
        if ((unint64_t)(v15 - (v14 + v6) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v10 - 8));
          v4[2] -= 8;
          unint64_t v4 = *(void **)(a1 + 8);
          uint64_t v5 = v4[5];
        }
      }
    }
  }
}

void sub_1CA8933E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Prefilter::Prefilter(uint64_t result, int a2)
{
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)BOOL result = a2;
  *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  if ((a2 - 3) <= 1) {
    operator new();
  }
  int v2 = re2::alloc_id++;
  *(_DWORD *)(result + 44) = v2;
  return result;
}

{
  int v2;

  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)BOOL result = a2;
  *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  if ((a2 - 3) <= 1) {
    operator new();
  }
  int v2 = re2::alloc_id++;
  *(_DWORD *)(result + 44) = v2;
  return result;
}

void sub_1CA8934F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA893598(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

re2::Prefilter *re2::Prefilter::Simplify(re2::Prefilter *this)
{
  int v1 = *(_DWORD *)this;
  if ((*(_DWORD *)this - 3) <= 1)
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *(re2::Prefilter ***)v2;
      uint64_t v4 = (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3;
      if (v4 != 1) {
        break;
      }
      uint64_t v5 = *v3;
      *(void *)(v2 + _Block_object_dispose(&STACK[0x2A0], 8) = v3;
      re2::Prefilter::~Prefilter(this);
      MEMORY[0x1CB79A8C0]();
      int v1 = *(_DWORD *)v5;
      this = v5;
      if ((*(_DWORD *)v5 - 3) >= 2) {
        return v5;
      }
    }
    if (!v4) {
      *(_DWORD *)this = v1 != 3;
    }
  }
  return this;
}

re2::Prefilter *re2::Prefilter::And(re2::Prefilter *this, re2::Prefilter *a2, re2::Prefilter *a3)
{
  return re2::Prefilter::AndOr(3, this, a2);
}

re2::Prefilter *re2::Prefilter::Or(re2::Prefilter *this, re2::Prefilter *a2, re2::Prefilter *a3)
{
  return re2::Prefilter::AndOr(4, this, a2);
}

uint64_t re2::Prefilter::Info::Info(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(void *)this = this + 8;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
  *(void *)this = this + 8;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

void re2::Prefilter::Info::~Info(re2::Prefilter::Info *this)
{
  uint64_t v2 = (re2::Prefilter *)*((void *)this + 4);
  if (v2)
  {
    re2::Prefilter::~Prefilter(v2);
    MEMORY[0x1CB79A8C0]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

{
  re2::Prefilter *v2;

  uint64_t v2 = (re2::Prefilter *)*((void *)this + 4);
  if (v2)
  {
    re2::Prefilter::~Prefilter(v2);
    MEMORY[0x1CB79A8C0]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

uint64_t re2::Prefilter::Info::TakeMatch(re2::Prefilter::Info *this)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t result = re2::Prefilter::OrStrings(this);
    *((unsigned char *)this + 24) = 0;
  }
  else
  {
    uint64_t result = *((void *)this + 4);
  }
  *((void *)this + 4) = 0;
  return result;
}

void re2::Prefilter::Info::ToString(re2::Prefilter::Info **this@<X0>, uint64_t a2@<X8>)
{
  if (!this) {
    goto LABEL_24;
  }
  if (*((unsigned char *)this + 24))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v3 = this + 1;
    uint64_t v4 = *this;
    if (*this != (re2::Prefilter::Info *)(this + 1))
    {
      int v5 = 0;
      do
      {
        if (v5) {
          std::string::append((std::string *)a2, ",");
        }
        int v6 = *((char *)v4 + 55);
        if (v6 >= 0) {
          unint64_t v7 = (char *)v4 + 32;
        }
        else {
          unint64_t v7 = (const std::string::value_type *)*((void *)v4 + 4);
        }
        if (v6 >= 0) {
          std::string::size_type v8 = *((unsigned __int8 *)v4 + 55);
        }
        else {
          std::string::size_type v8 = *((void *)v4 + 5);
        }
        std::string::append((std::string *)a2, v7, v8);
        uint64_t v9 = (re2::Prefilter::Info *)*((void *)v4 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = (re2::Prefilter::Info **)v9;
            uint64_t v9 = *(re2::Prefilter::Info **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (re2::Prefilter::Info **)*((void *)v4 + 2);
            BOOL v11 = *v10 == v4;
            uint64_t v4 = (re2::Prefilter::Info *)v10;
          }
          while (!v11);
        }
        ++v5;
        uint64_t v4 = (re2::Prefilter::Info *)v10;
      }
      while (v10 != v3);
    }
    return;
  }
  uint64_t v12 = this[4];
  if (!v12)
  {
LABEL_24:
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    return;
  }
  re2::Prefilter::DebugString(v12, a2);
}

void sub_1CA893890(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void re2::Prefilter::DebugString(re2::Prefilter *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    switch(*(_DWORD *)this)
    {
      case 0:
        *(unsigned char *)(a2 + 23) = 0;
        *(unsigned char *)a2 = 0;
        break;
      case 1:
        *(unsigned char *)(a2 + 23) = 12;
        strcpy((char *)a2, "*no-matches*");
        break;
      case 2:
        if (*((char *)this + 39) < 0)
        {
          uint64_t v17 = (const std::string::value_type *)*((void *)this + 2);
          std::string::size_type v18 = *((void *)this + 3);
          std::string::__init_copy_ctor_external((std::string *)a2, v17, v18);
        }
        else
        {
          *(_OWORD *)a2 = *((_OWORD *)this + 1);
          *(void *)(a2 + 16) = *((void *)this + 4);
        }
        break;
      case 3:
        *(void *)a2 = 0;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
        *(void *)(a2 + 16) = 0;
        int v5 = (re2::Prefilter **)**((void **)this + 1);
        if (*(re2::Prefilter ***)(*((void *)this + 1) + 8) != v5)
        {
          re2::Prefilter::DebugString((uint64_t *)&__p, *v5);
          if ((v21 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v21 & 0x80u) == 0) {
            std::string::size_type v7 = v21;
          }
          else {
            std::string::size_type v7 = v20;
          }
          std::string::append((std::string *)a2, p_p, v7);
          if ((char)v21 < 0) {
            operator delete(__p);
          }
          if (*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1) >= 9uLL)
          {
            unint64_t v8 = 1;
            do
            {
              std::string::append((std::string *)a2, " ");
              re2::Prefilter::DebugString((uint64_t *)&__p, *(re2::Prefilter **)(**((void **)this + 1) + 8 * v8));
              if ((v21 & 0x80u) == 0) {
                uint64_t v9 = (const std::string::value_type *)&__p;
              }
              else {
                uint64_t v9 = (const std::string::value_type *)__p;
              }
              if ((v21 & 0x80u) == 0) {
                std::string::size_type v10 = v21;
              }
              else {
                std::string::size_type v10 = v20;
              }
              std::string::append((std::string *)a2, v9, v10);
              if ((char)v21 < 0) {
                operator delete(__p);
              }
              ++v8;
            }
            while (v8 < (uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 3);
          }
        }
        break;
      case 4:
        *(void *)(a2 + _Block_object_dispose(&STACK[0x2A0], 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        *(unsigned char *)(a2 + 23) = 1;
        *(unsigned char *)a2 = 40;
        BOOL v11 = (re2::Prefilter **)**((void **)this + 1);
        if (*(re2::Prefilter ***)(*((void *)this + 1) + 8) != v11)
        {
          re2::Prefilter::DebugString((uint64_t *)&__p, *v11);
          if ((v21 & 0x80u) == 0) {
            uint64_t v12 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v12 = (const std::string::value_type *)__p;
          }
          if ((v21 & 0x80u) == 0) {
            std::string::size_type v13 = v21;
          }
          else {
            std::string::size_type v13 = v20;
          }
          std::string::append((std::string *)a2, v12, v13);
          if ((char)v21 < 0) {
            operator delete(__p);
          }
          if (*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1) >= 9uLL)
          {
            unint64_t v14 = 1;
            do
            {
              std::string::append((std::string *)a2, "|");
              re2::Prefilter::DebugString((uint64_t *)&__p, *(re2::Prefilter **)(**((void **)this + 1) + 8 * v14));
              if ((v21 & 0x80u) == 0) {
                uint64_t v15 = (const std::string::value_type *)&__p;
              }
              else {
                uint64_t v15 = (const std::string::value_type *)__p;
              }
              if ((v21 & 0x80u) == 0) {
                std::string::size_type v16 = v21;
              }
              else {
                std::string::size_type v16 = v20;
              }
              std::string::append((std::string *)a2, v15, v16);
              if ((char)v21 < 0) {
                operator delete(__p);
              }
              ++v14;
            }
            while (v14 < (uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 3);
          }
        }
        std::string::append((std::string *)a2, ")");
        break;
      default:
        LOBYTE(__p) = 0;
        uint64_t v4 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Bad op in Prefilter::DebugString: ", 34);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&__p);
        re2::StringPrintf((re2 *)"op%d", (std::string *)a2, *(unsigned int *)this);
        break;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 5;
    strcpy((char *)a2, "<nil>");
  }
}

void sub_1CA893C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void re2::Prefilter::Info::Plus(re2::Prefilter::Info *this, re2::Prefilter::Info *a2)
{
}

void re2::Prefilter::Info::AnyChar(re2::Prefilter::Info *this)
{
}

void re2::Prefilter::Info::AnyMatch(re2::Prefilter::Info *this)
{
}

void re2::Prefilter::BuildInfo(re2::Prefilter *this, re2::Regexp *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v2 = &unk_1F24EE1B0;
  operator new();
}

void sub_1CA89434C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re2::Prefilter::Info::Walker::~Walker((re2::Prefilter::Info::Walker *)va);
  _Unwind_Resume(a1);
}

void std::deque<re2::WalkState<re2::Prefilter::Info *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    std::string::size_type v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)uint64_t v5 = v8;
      goto LABEL_89;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        uint64_t v37 = (char *)operator new(8 * v34);
        unint64_t v38 = &v37[8 * v35];
        uint64_t v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        uint64_t v5 = v38;
        if (!v40)
        {
          uint64_t v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            uint64_t v84 = &v37[8 * v35];
            unint64_t v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v42 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v43 = &v38[v86];
              int64_t v87 = (long long *)(v6 + 3);
              CFRange v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *CFRange v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v86;
            }
          }
          else
          {
            unint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      std::string::size_type v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  std::string::size_type v18 = *(char **)(a1 + 16);
  uint64_t v17 = *(char **)(a1 + 24);
  std::string::size_type v20 = *(char **)a1;
  BOOL v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    unint64_t v24 = operator new(0xFF0uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)std::string::size_type v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      uint64_t v44 = v19;
      goto LABEL_87;
    }
    unint64_t v69 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v69 = 1;
    }
    if (v69 >> 61) {
      goto LABEL_106;
    }
    unint64_t v70 = (v69 + 3) >> 2;
    uint64_t v71 = 8 * v69;
    uint64_t v72 = (char *)operator new(8 * v69);
    uint64_t v44 = &v72[8 * v70];
    uint64_t v73 = &v72[v71];
    uint64_t v74 = v44;
    if (v18 != v19)
    {
      uint64_t v74 = &v44[8 * v22];
      uint64_t v75 = &v72[8 * v70];
      long long v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        int v77 = &v72[8 * v70];
        uint64_t v75 = v77;
        long long v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          unint64_t v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v75 = &v44[v79];
          long long v80 = (long long *)(v19 + 16);
          int64_t v81 = v77 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *int64_t v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v72;
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
            *(void *)(a1 + 16) = v74;
            *(void *)(a1 + 24) = v73;
LABEL_86:
            operator delete(v19);
            uint64_t v44 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v44 - 1) = v25;
            std::string::size_type v7 = *(char **)(a1 + 8);
            uint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            uint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v93 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v93 = 1;
              }
              if (!(v93 >> 61))
              {
                unint64_t v94 = v93 >> 2;
                uint64_t v95 = 8 * v93;
                uint64_t v37 = (char *)operator new(8 * v93);
                unint64_t v38 = &v37[8 * v94];
                uint64_t v39 = &v37[v95];
                int64_t v96 = v5 - v7;
                BOOL v40 = v5 == v7;
                uint64_t v5 = v38;
                if (!v40)
                {
                  uint64_t v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    unint64_t v99 = &v37[8 * v94];
                    int v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      uint64_t v100 = (v97 >> 3) + 1;
                      uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      int v98 = &v38[v101];
                      char v102 = (long long *)(v7 + 16);
                      uint64_t v103 = v99 + 16;
                      uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *uint64_t v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v101;
                    }
                  }
                  else
                  {
                    int v98 = &v37[8 * v94];
                  }
                  do
                  {
                    uint64_t v106 = *(void *)v7;
                    v7 += 8;
                    *(void *)int v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_81:
                *(void *)a1 = v37;
                *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v38;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  uint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          long long v76 = &v19[v79];
        }
      }
      do
      {
        uint64_t v92 = *(void *)v76;
        v76 += 8;
        *(void *)uint64_t v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(void *)a1 = v72;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v44;
    *(void *)(a1 + 16) = v74;
    *(void *)(a1 + 24) = v73;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0xFF0uLL);
  uint64_t v30 = &v28[8 * v22];
  long long v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    unint64_t v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      long long v31 = &v30[8 * v45];
      operator delete(v28);
      BOOL v19 = *(char **)(a1 + 8);
      std::string::size_type v18 = *(char **)(a1 + 16);
      uint64_t v28 = v30;
    }
    else
    {
      unint64_t v33 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v33 = v22 + 1;
      }
      v30 -= 8 * (v33 >> 1);
    }
    uint64_t v29 = v32;
  }
  *(void *)uint64_t v30 = v29;
  uint64_t v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28) {
        goto LABEL_43;
      }
      if (v46 < v31)
      {
        uint64_t v49 = (v31 - v46) >> 3;
        if (v49 >= -1) {
          uint64_t v50 = v49 + 1;
        }
        else {
          uint64_t v50 = v49 + 2;
        }
        uint64_t v51 = v50 >> 1;
        uint64_t v30 = &v28[8 * (v50 >> 1)];
        uint64_t v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          uint64_t v52 = v46;
        }
        uint64_t v46 = (char *)v52 + 8 * v51;
        goto LABEL_43;
      }
      if (v31 == v28) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = (v31 - v28) >> 2;
      }
      if (v53 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v54 = (char *)operator new(8 * v53);
      uint64_t v55 = v54;
      unint64_t v56 = (v53 + 3) >> 2;
      uint64_t v30 = &v54[8 * v56];
      int64_t v57 = v46 - v28;
      BOOL v40 = v46 == v28;
      uint64_t v46 = v30;
      if (!v40)
      {
        uint64_t v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v58 = v57 - 8;
        uint64_t v59 = &v54[8 * v56];
        unsigned int v60 = v28;
        if (v58 >= 0x38)
        {
          uint64_t v61 = 8 * v56;
          uint64_t v59 = &v54[8 * v56];
          unsigned int v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            unsigned int v64 = (long long *)(v28 + 16);
            uint64_t v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)uint64_t v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_42;
            }
            unsigned int v60 = &v28[v63];
          }
        }
        do
        {
          uint64_t v68 = *(void *)v60;
          v60 += 8;
          *(void *)uint64_t v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_42:
      long long v31 = &v54[8 * v53];
      operator delete(v28);
      uint64_t v28 = v55;
LABEL_43:
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  uint64_t v47 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v30;
  *(void *)(a1 + 16) = v46;
  *(void *)(a1 + 24) = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1CA894978(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::Prefilter::FromRegexp(re2::Prefilter *this, re2::Regexp *a2)
{
  if (this)
  {
    unint64_t v2 = re2::Regexp::Simplify(this);
    re2::Prefilter::BuildInfo(v2, v3);
  }
  return 0;
}

uint64_t re2::Prefilter::FromRE2(re2::Prefilter *this, const re2::RE2 *a2)
{
  if (this)
  {
    unint64_t v2 = (re2::Regexp *)*((void *)this + 10);
    if (v2)
    {
      BOOL v3 = re2::Regexp::Simplify(v2);
      re2::Prefilter::BuildInfo(v3, v4);
    }
  }
  return 0;
}

void sub_1CA89603C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CA896378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40137(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__40138(uint64_t a1)
{
}

void sub_1CA896DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getQueue()
{
  if (getQueue__pasOnceToken1 != -1) {
    dispatch_once(&getQueue__pasOnceToken1, &__block_literal_global_40172);
  }
  uint64_t v0 = (void *)getQueue__pasExprOnceResult;
  return v0;
}

void __getQueue_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("SGDNotificationBroadcaster", v1);
  BOOL v3 = (void *)getQueue__pasExprOnceResult;
  getQueue__pasExprOnceResult = (uint64_t)v2;
}

void ___notifyURLs_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_1CA650000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting SGURL changed notification", (uint8_t *)v4, 2u);
  }

  ++_notificationCount;
  uint32_t v1 = notify_post((const char *)*MEMORY[0x1E4F5DF38]);
  if (v1)
  {
    uint32_t v2 = v1;
    BOOL v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "SGDNotificationBroadcaster failed to post SGURL change notification: error %u", (uint8_t *)v4, 8u);
    }
  }
  atomic_store(0, (unsigned __int8 *)_notifyURLs_pending);
}

void _notifyReminders()
{
  if ((atomic_exchange(_notifyReminders_pending, 1u) & 1) == 0)
  {
    uint64_t v0 = (void *)MEMORY[0x1E4F93B18];
    getQueue();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    [v0 runAsyncOnQueue:v1 afterDelaySeconds:&__block_literal_global_21_40178 block:0.3];
  }
}

void ___notifyReminders_block_invoke()
{
  uint64_t v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint32_t v2 = 0;
    _os_log_impl(&dword_1CA650000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting reminder notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, @"com.apple.suggestions.remindersDidChange", @"com.apple.suggestions.remindersDidChange", 0, 1u);
  atomic_store(0, (unsigned __int8 *)_notifyReminders_pending);
}

void _notifyEvents()
{
  if ((atomic_exchange(_notifyEvents_pending, 1u) & 1) == 0)
  {
    uint64_t v0 = (void *)MEMORY[0x1E4F93B18];
    getQueue();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    [v0 runAsyncOnQueue:v1 afterDelaySeconds:&__block_literal_global_13_40184 block:0.3];
  }
}

void ___notifyEvents_block_invoke()
{
  uint64_t v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint32_t v2 = 0;
    _os_log_impl(&dword_1CA650000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting event notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, @"com.apple.suggestions.eventsDidChange", @"com.apple.suggestions.eventsDidChange", 0, 1u);
  atomic_store(0, (unsigned __int8 *)_notifyEvents_pending);
}

void _notifyContacts()
{
  if ((atomic_exchange(_notifyContacts_pending, 1u) & 1) == 0)
  {
    uint64_t v0 = (void *)MEMORY[0x1E4F93B18];
    getQueue();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    [v0 runAsyncOnQueue:v1 afterDelaySeconds:&__block_literal_global_16 block:0.3];
  }
}

void ___notifyContacts_block_invoke()
{
  uint64_t v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint32_t v2 = 0;
    _os_log_impl(&dword_1CA650000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting contact notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, @"com.apple.suggestions.contactsDidChange", @"com.apple.suggestions.contactsDidChange", 0, 0);
  atomic_store(0, (unsigned __int8 *)_notifyContacts_pending);
}

BOOL SGMIMetricsSubmodelAgeVectorReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    std::string::size_type v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 36) |= 8u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x2A0], 8) = v19 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personFromSenderAge;
          goto LABEL_56;
        case 2u:
          *(unsigned char *)(a1 + 36) |= 0x10u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personFromSenderInDyadicConversationAge;
          goto LABEL_56;
        case 3u:
          *(unsigned char *)(a1 + 36) |= 0x40u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__subjectContentAge;
          goto LABEL_56;
        case 4u:
          *(unsigned char *)(a1 + 36) |= 0x20u;
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personToRecipientsAge;
          goto LABEL_56;
        case 5u:
          *(unsigned char *)(a1 + 36) |= 4u;
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personCCRecipientsAge;
          goto LABEL_56;
        case 6u:
          *(unsigned char *)(a1 + 36) |= 2u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__domainFromSenderAge;
          goto LABEL_56;
        case 7u:
          *(unsigned char *)(a1 + 36) |= 1u;
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          unint64_t v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__conversationAge;
LABEL_56:
          *(_DWORD *)(a1 + *v33) = v20;
          goto LABEL_57;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_57:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA8991B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__40479(uint64_t a1)
{
}

void sub_1CA899370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8996B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA899F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89A9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89ABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89AF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89B9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89BB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89BD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89BF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89C9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89CE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA89D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8A013C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void SGJSWatchdogTimerMakeVMWithTimeout(void *a1, double a2)
{
  id v3 = a1;
  unint64_t v4 = (void *)[v3 copy];

  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v5 = (uint64_t (*)(void))getJSContextGroupCreateSymbolLoc(void)::ptr;
  uint64_t v31 = getJSContextGroupCreateSymbolLoc(void)::ptr;
  if (!getJSContextGroupCreateSymbolLoc(void)::ptr)
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL32getJSContextGroupCreateSymbolLocv_block_invoke;
    unint64_t v26 = &unk_1E65C0148;
    uint64_t v27 = &v28;
    int v6 = JavaScriptCoreLibrary();
    v29[3] = (uint64_t)dlsym(v6, "JSContextGroupCreate");
    getJSContextGroupCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(v27[1] + 24);
    uint64_t v5 = (uint64_t (*)(void))v29[3];
  }
  _Block_object_dispose(&v28, 8);
  if (!v5)
  {
    unint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
    int v20 = [NSString stringWithUTF8String:"JSContextGroupRef SGJSContextGroupCreate()"];
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, @"SGJSWatchdogTimer.mm", 21, @"%s", dlerror());

    __break(1u);
LABEL_21:
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "void SGJSContextGroupSetExecutionTimeLimit(JSContextGroupRef, double, JSShouldTerminateCallback, void *)");
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, @"SGJSWatchdogTimer.mm", 22, @"%s", dlerror());
LABEL_23:

    __break(1u);
    return;
  }
  uint64_t v7 = v5();
  if (!v7)
  {
    unint64_t v10 = 0;
    goto LABEL_17;
  }
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2050000000;
  char v8 = (void *)getJSVirtualMachineClass(void)::softClass;
  uint64_t v31 = (void *)getJSVirtualMachineClass(void)::softClass;
  if (!getJSVirtualMachineClass(void)::softClass)
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL24getJSVirtualMachineClassv_block_invoke;
    unint64_t v26 = &unk_1E65C0148;
    uint64_t v27 = &v28;
    ___ZL24getJSVirtualMachineClassv_block_invoke((uint64_t)&v23);
    char v8 = (void *)v29[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v28, 8);
  unint64_t v10 = [v9 virtualMachineWithContextGroupRef:v7];
  if (v4)
  {
    uint64_t v11 = (void *)MEMORY[0x1CB79B4C0](v4);
    objc_setAssociatedObject(v10, "SGJSWatchdogTimerCallback", v11, (void *)0x301);
  }
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v12 = (void (*)(uint64_t, void (*)(const OpaqueJSContext *, void *), void *, double))getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr;
  uint64_t v31 = getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr;
  if (!getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr)
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL47getJSContextGroupSetExecutionTimeLimitSymbolLocv_block_invoke;
    unint64_t v26 = &unk_1E65C0148;
    uint64_t v27 = &v28;
    unint64_t v13 = JavaScriptCoreLibrary();
    char v14 = dlsym(v13, "JSContextGroupSetExecutionTimeLimit");
    *(void *)(v27[1] + 24) = v14;
    getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr = *(_UNKNOWN **)(v27[1] + 24);
    uint64_t v12 = (void (*)(uint64_t, void (*)(const OpaqueJSContext *, void *), void *, double))v29[3];
  }
  _Block_object_dispose(&v28, 8);
  if (!v12) {
    goto LABEL_21;
  }
  v12(v7, shouldTerminateCallback, v4, a2);
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v15 = (void (*)(uint64_t))getJSContextGroupReleaseSymbolLoc(void)::ptr;
  uint64_t v31 = getJSContextGroupReleaseSymbolLoc(void)::ptr;
  if (!getJSContextGroupReleaseSymbolLoc(void)::ptr)
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL33getJSContextGroupReleaseSymbolLocv_block_invoke;
    unint64_t v26 = &unk_1E65C0148;
    uint64_t v27 = &v28;
    int v16 = JavaScriptCoreLibrary();
    uint64_t v17 = dlsym(v16, "JSContextGroupRelease");
    *(void *)(v27[1] + 24) = v17;
    getJSContextGroupReleaseSymbolLoc(void)::ptr = *(_UNKNOWN **)(v27[1] + 24);
    uint64_t v15 = (void (*)(uint64_t))v29[3];
  }
  _Block_object_dispose(&v28, 8);
  if (!v15)
  {
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v22 = [NSString stringWithUTF8String:"void SGJSContextGroupRelease(JSContextGroupRef)"];
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, @"SGJSWatchdogTimer.mm", 23, @"%s", dlerror());
    goto LABEL_23;
  }
  v15(v7);
LABEL_17:

  id v18 = v10;
}

void sub_1CA8A0D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void *___ZL32getJSContextGroupCreateSymbolLocv_block_invoke(uint64_t a1)
{
  uint32_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSContextGroupCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSContextGroupCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *JavaScriptCoreLibrary(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!JavaScriptCoreLibraryCore(char **)::frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _DWORD v4[2] = (void *)3221225472;
    v4[3] = ___ZL25JavaScriptCoreLibraryCorePPc_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E65C0168;
    uint64_t v6 = 0;
    JavaScriptCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)JavaScriptCoreLibraryCore(char **)::frameworkLibrary;
  if (!JavaScriptCoreLibraryCore(char **)::frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *JavaScriptCoreLibrary()"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGJSWatchdogTimer.mm", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_1CA8A0FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void ___ZL24getJSVirtualMachineClassv_block_invoke(uint64_t a1)
{
  JavaScriptCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("JSVirtualMachine");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getJSVirtualMachineClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint32_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getJSVirtualMachineClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"SGJSWatchdogTimer.mm", 18, @"Unable to find class %s", "JSVirtualMachine");

    __break(1u);
  }
}

void sub_1CA8A10B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL47getJSContextGroupSetExecutionTimeLimitSymbolLocv_block_invoke(uint64_t a1)
{
  uint32_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSContextGroupSetExecutionTimeLimit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *___ZL33getJSContextGroupReleaseSymbolLocv_block_invoke(uint64_t a1)
{
  uint32_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSContextGroupRelease");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSContextGroupReleaseSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void shouldTerminateCallback(const OpaqueJSContext *a1, void *a2)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  unint64_t v4 = (uint64_t (*)(const OpaqueJSContext *, uint64_t))getJSContextCreateBacktraceSymbolLoc(void)::ptr;
  uint64_t v15 = getJSContextCreateBacktraceSymbolLoc(void)::ptr;
  if (!getJSContextCreateBacktraceSymbolLoc(void)::ptr)
  {
    long long v5 = JavaScriptCoreLibrary();
    v13[3] = (uint64_t)dlsym(v5, "JSContextCreateBacktrace");
    getJSContextCreateBacktraceSymbolLoc(void)::ptr = (_UNKNOWN *)v13[3];
    unint64_t v4 = (uint64_t (*)(const OpaqueJSContext *, uint64_t))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v4)
  {
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "JSStringRef SGJSContextCreateBacktrace(JSContextRef, unsigned int)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"SGJSWatchdogTimer.mm", 19, @"%s", dlerror());
    goto LABEL_14;
  }
  uint64_t v6 = (void *)v4(a1, 100);
  if (v6)
  {
    uint64_t v12 = 0;
    unint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v7 = (uint64_t (*)(void, void *))getJSStringCopyCFStringSymbolLoc(void)::ptr;
    uint64_t v15 = getJSStringCopyCFStringSymbolLoc(void)::ptr;
    if (!getJSStringCopyCFStringSymbolLoc(void)::ptr)
    {
      char v8 = JavaScriptCoreLibrary();
      v13[3] = (uint64_t)dlsym(v8, "JSStringCopyCFString");
      getJSStringCopyCFStringSymbolLoc(void)::ptr = (_UNKNOWN *)v13[3];
      uint64_t v7 = (uint64_t (*)(void, void *))v13[3];
    }
    _Block_object_dispose(&v12, 8);
    if (v7)
    {
      uint64_t v6 = (void *)v7(0, v6);
      goto LABEL_9;
    }
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef SGJSStringCopyCFString(CFAllocatorRef, JSStringRef)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"SGJSWatchdogTimer.mm", 20, @"%s", dlerror());
LABEL_14:

    __break(1u);
    return;
  }
LABEL_9:
  if (a2)
  {
    id v9 = (void (**)(void, void))MEMORY[0x1CB79B4C0](a2);
    ((void (**)(void, void *))v9)[2](v9, v6);
  }
}

void sub_1CA8A1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL36getJSContextCreateBacktraceSymbolLocv_block_invoke(uint64_t a1)
{
  uint32_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSContextCreateBacktrace");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSContextCreateBacktraceSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL32getJSStringCopyCFStringSymbolLocv_block_invoke(uint64_t a1)
{
  uint32_t v2 = JavaScriptCoreLibrary();
  uint64_t result = dlsym(v2, "JSStringCopyCFString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getJSStringCopyCFStringSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL25JavaScriptCoreLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  JavaScriptCoreLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_1CA8A1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41037(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__41038(uint64_t a1)
{
}

void sub_1CA8A3328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *mallocRegexp()
{
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  uint64_t v0 = 0;
  id v1 = &superblocks;
  do
  {
    if (!*v1 || *((int *)v1 + 3) >= 1)
    {
      unsigned int v4 = v0;
      long long v5 = (vm_address_t *)((char *)&superblocks + 20 * v0);
      vm_address_t v6 = *v5;
      if (*v5)
      {
        uint64_t v7 = (char *)&superblocks + 20 * v4;
        int v10 = *((_DWORD *)v7 + 3);
        char v8 = v7 + 12;
        int v9 = v10;
        if (!v10)
        {
          id v3 = 0;
          goto LABEL_14;
        }
        uint64_t v11 = (char *)&superblocks + 20 * v4;
        int v14 = *((_DWORD *)v11 + 2);
        uint64_t v12 = v11 + 8;
        int v13 = v14;
        int v15 = v12[2];
        _DWORD *v8 = v9 - 1;
        if (v14 != v15)
        {
          int v16 = *(_DWORD *)(v6 + 40 * v13);
          goto LABEL_13;
        }
      }
      else
      {
        if (vm_allocate(*MEMORY[0x1E4F14960], v5, 0x82000uLL, 1))
        {
          [MEMORY[0x1E4F28B00] currentHandler];
          v19 = unsigned int v21 = v4;
          int v20 = [NSString stringWithUTF8String:"void *superblockMalloc(int)"];
          [v19 handleFailureInFunction:v20 file:@"SGChunkPool.m" lineNumber:43 description:@"Could not allocate memory for mallocRegexp"];

          unsigned int v4 = v21;
        }
        int v13 = 0;
        id v18 = (char *)&superblocks + 20 * v4;
        *((void *)v18 + 1) = 0x33FE00000000;
        uint64_t v12 = v18 + 8;
        vm_address_t v6 = *v5;
      }
      int v16 = v13 + 1;
      *((_DWORD *)&superblocks + 5 * v4 + 4) = v13 + 1;
LABEL_13:
      *uint64_t v12 = v16;
      id v3 = (void *)(v6 + 40 * v13);
      goto LABEL_14;
    }
    ++v0;
    id v1 = (uint64_t *)((char *)v1 + 20);
  }
  while (v0 != 197);
  uint32_t v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "Error: could not mallocRegexp!", buf, 2u);
  }

  id v3 = malloc_type_malloc(0x28uLL, 0xB81C9F1AuLL);
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v3;
}

void freeRegexp(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&lock);
    uint64_t v2 = 0;
    id v3 = &superblocks;
    while (1)
    {
      uint64_t v4 = *v3;
      if (*v3 <= (unint64_t)a1 && *v3 + 532480 > (unint64_t)a1) {
        break;
      }
      ++v2;
      id v3 = (uint64_t *)((char *)v3 + 20);
      if (v2 == 197)
      {
        vm_address_t v6 = sgLogHandle();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          int v14 = a1;
          _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "Memory not allocated by mallocRegexp: %llu", buf, 0xCu);
        }

        free(a1);
        goto LABEL_15;
      }
    }
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a1 - v4) >> 3);
    char v8 = (char *)&superblocks + 20 * v2;
    *(_DWORD *)(v4 + 40 * (int)v7) = *((_DWORD *)v8 + 2);
    int v9 = *((_DWORD *)v8 + 3) + 1;
    *((_DWORD *)v8 + 2) = v7;
    *((_DWORD *)v8 + 3) = v9;
    if (v9 == 13312)
    {
      if (MEMORY[0x1CB79BDE0](*MEMORY[0x1E4F14960], *v3, 532480))
      {
        int v10 = [MEMORY[0x1E4F28B00] currentHandler];
        [NSString stringWithUTF8String:"void freeRegexp(void *)"];
        uint64_t v11 = v12 = v3;
        [v10 handleFailureInFunction:v11 file:@"SGChunkPool.m" lineNumber:94 description:@"Could not deallocate memory from mallocRegexp"];

        id v3 = v12;
      }
      *id v3 = 0;
    }
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  }
}

uint64_t SGMIMetricsRegexSignatureStatReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100) {
        break;
      }
      if ((int)v17 <= 29)
      {
        if (v17 == 10)
        {
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 16;
        }
        else
        {
          if (v17 != 20) {
            goto LABEL_76;
          }
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 40;
        }
LABEL_68:
        uint64_t v47 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_103;
      }
      if (v17 == 30)
      {
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 64) |= 0x10u;
        while (1)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
          *(void *)(a2 + v5re2::Compiler::Compile(this, 0) = v51 + 1;
          v20 |= (unint64_t)(v52 & 0x7F) << v48;
          if ((v52 & 0x80) == 0) {
            goto LABEL_99;
          }
          v48 += 7;
          BOOL v14 = v49++ >= 9;
          if (v14)
          {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            goto LABEL_101;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_99:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_101:
        uint64_t v54 = 56;
LABEL_102:
        *(_DWORD *)(a1 + v54) = v20;
        goto LABEL_103;
      }
      if (v17 != 40)
      {
LABEL_76:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_103;
      }
      char v31 = 0;
      unsigned int v32 = 0;
      uint64_t v33 = 0;
      *(unsigned char *)(a1 + 64) |= 0x20u;
      while (1)
      {
        uint64_t v34 = *v3;
        unint64_t v35 = *(void *)(a2 + v34);
        if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v35 + 1;
        v33 |= (unint64_t)(v36 & 0x7F) << v31;
        if ((v36 & 0x80) == 0) {
          goto LABEL_87;
        }
        v31 += 7;
        BOOL v14 = v32++ >= 9;
        if (v14)
        {
          uint64_t v33 = 0;
          goto LABEL_89;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_87:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v33 = 0;
      }
LABEL_89:
      *(unsigned char *)(a1 + 6re2::Compiler::Compile(this, 0) = v33 != 0;
LABEL_103:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if ((int)v17 > 209)
    {
      switch(v17)
      {
        case 0xD2:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 64) |= 4u;
          while (1)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v20 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0) {
              goto LABEL_91;
            }
            v37 += 7;
            BOOL v14 = v38++ >= 9;
            if (v14)
            {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              goto LABEL_93;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_91:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
          }
LABEL_93:
          uint64_t v54 = 28;
          break;
        case 0xDC:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 64) |= 8u;
          while (1)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v20 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0) {
              goto LABEL_95;
            }
            v42 += 7;
            BOOL v14 = v43++ >= 9;
            if (v14)
            {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              goto LABEL_97;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
          }
LABEL_97:
          uint64_t v54 = 32;
          break;
        case 0x12C:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 64) |= 1u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_79;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
              goto LABEL_81;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_79:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
          }
LABEL_81:
          uint64_t v54 = 8;
          break;
        default:
          goto LABEL_76;
      }
      goto LABEL_102;
    }
    if (v17 != 101)
    {
      if (v17 != 200) {
        goto LABEL_76;
      }
      char v26 = 0;
      unsigned int v27 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 64) |= 2u;
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v2_Block_object_dispose(&STACK[0x2A0], 8) = v29 + 1;
        v20 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_83;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
          goto LABEL_85;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_83:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
      }
LABEL_85:
      uint64_t v54 = 24;
      goto LABEL_102;
    }
    uint64_t v24 = PBReaderReadData();
    uint64_t v25 = 48;
    goto LABEL_68;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SGMIMetricsInferenceAndGroundTruthReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 29)
      {
        if ((int)v18 <= 50)
        {
          if (v18 == 30)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            *(unsigned char *)(a1 + 76) |= 0x20u;
            while (1)
            {
              uint64_t v52 = *v3;
              uint64_t v53 = *(void *)(a2 + v52);
              unint64_t v54 = v53 + 1;
              if (v53 == -1 || v54 > *(void *)(a2 + *v4)) {
                break;
              }
              char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
              *(void *)(a2 + v52) = v54;
              v51 |= (unint64_t)(v55 & 0x7F) << v49;
              if ((v55 & 0x80) == 0) {
                goto LABEL_100;
              }
              v49 += 7;
              BOOL v15 = v50++ >= 9;
              if (v15)
              {
                uint64_t v51 = 0;
                goto LABEL_102;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_100:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v51 = 0;
            }
LABEL_102:
            *(unsigned char *)(a1 + 72) = v51 != 0;
            continue;
          }
          if (v18 != 50)
          {
LABEL_80:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          unsigned int v32 = objc_alloc_init(SGMIMetricsMissingElementPrediction);
          [(id)a1 addMissingAttachment:v32];
        }
        else
        {
          if (v18 == 51)
          {
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 76) |= 1u;
            while (1)
            {
              uint64_t v45 = *v3;
              uint64_t v46 = *(void *)(a2 + v45);
              unint64_t v47 = v46 + 1;
              if (v46 == -1 || v47 > *(void *)(a2 + *v4)) {
                break;
              }
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v47;
              v21 |= (unint64_t)(v48 & 0x7F) << v43;
              if ((v48 & 0x80) == 0) {
                goto LABEL_95;
              }
              v43 += 7;
              BOOL v15 = v44++ >= 9;
              if (v15)
              {
                uint64_t v21 = 0;
                goto LABEL_97;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v21 = 0;
            }
LABEL_97:
            uint64_t v57 = 8;
LABEL_98:
            *(void *)(a1 + v57) = v21;
            continue;
          }
          if (v18 != 60)
          {
            if (v18 != 61) {
              goto LABEL_80;
            }
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 76) |= 2u;
            while (1)
            {
              uint64_t v28 = *v3;
              uint64_t v29 = *(void *)(a2 + v28);
              unint64_t v30 = v29 + 1;
              if (v29 == -1 || v30 > *(void *)(a2 + *v4)) {
                break;
              }
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x2A0], 8) = v30;
              v21 |= (unint64_t)(v31 & 0x7F) << v26;
              if ((v31 & 0x80) == 0) {
                goto LABEL_87;
              }
              v26 += 7;
              BOOL v15 = v27++ >= 9;
              if (v15)
              {
                uint64_t v21 = 0;
                goto LABEL_89;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_87:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v21 = 0;
            }
LABEL_89:
            uint64_t v57 = 16;
            goto LABEL_98;
          }
          unsigned int v32 = objc_alloc_init(SGMIMetricsMissingElementPrediction);
          [(id)a1 addMissingRecipient:v32];
        }
        if (!PBReaderPlaceMark()
          || (SGMIMetricsMissingElementPredictionReadFrom((uint64_t)v32, a2) & 1) == 0)
        {
LABEL_107:

          return 0;
        }
      }
      else
      {
        if ((int)v18 > 19)
        {
          if (v18 == 20)
          {
            *(unsigned char *)(a1 + 76) |= 0x10u;
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(void *)(a2 + *v4))
            {
              int v35 = *(_DWORD *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 4;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              int v35 = 0;
            }
            *(_DWORD *)(a1 + 52) = v35;
            continue;
          }
          if (v18 == 21)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            *(unsigned char *)(a1 + 76) |= 8u;
            while (1)
            {
              uint64_t v39 = *v3;
              uint64_t v40 = *(void *)(a2 + v39);
              unint64_t v41 = v40 + 1;
              if (v40 == -1 || v41 > *(void *)(a2 + *v4)) {
                break;
              }
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v41;
              v38 |= (unint64_t)(v42 & 0x7F) << v36;
              if ((v42 & 0x80) == 0) {
                goto LABEL_91;
              }
              v36 += 7;
              BOOL v15 = v37++ >= 9;
              if (v15)
              {
                LODWORD(v3_Block_object_dispose(&STACK[0x2A0], 8) = 0;
                goto LABEL_93;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_91:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v3_Block_object_dispose(&STACK[0x2A0], 8) = 0;
            }
LABEL_93:
            *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2A0], 8) = v38;
            continue;
          }
          if (v18 != 22) {
            goto LABEL_80;
          }
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 76) |= 4u;
          while (1)
          {
            uint64_t v22 = *v3;
            uint64_t v23 = *(void *)(a2 + v22);
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_83;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              uint64_t v21 = 0;
              goto LABEL_85;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_83:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v21 = 0;
          }
LABEL_85:
          uint64_t v57 = 24;
          goto LABEL_98;
        }
        if (v18 == 1)
        {
          unsigned int v32 = objc_alloc_init(SGMIMetricsTrialMetadata);
          objc_storeStrong((id *)(a1 + 64), v32);
          if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v32, a2) & 1) == 0) {
            goto LABEL_107;
          }
        }
        else
        {
          if (v18 != 11) {
            goto LABEL_80;
          }
          unsigned int v32 = objc_alloc_init(SGMIMetricsSubmodelsProbabilities);
          objc_storeStrong((id *)(a1 + 56), v32);
          if (!PBReaderPlaceMark() || !SGMIMetricsSubmodelsProbabilitiesReadFrom((uint64_t)v32, a2)) {
            goto LABEL_107;
          }
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA8AAF60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __setup_block_invoke()
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  dispatch_queue_t v1 = dispatch_queue_create("SGAsset-notifications", 0);
  uint64_t v2 = (void *)notificationQueue;
  notificationQueue = (uint64_t)v1;

  id v3 = objc_alloc(MEMORY[0x1E4F93AA8]);
  uint64_t v4 = [v0 pathForResource:@"Assets" ofType:@"suggestionsassets"];
  unint64_t v30 = @"SGAssetIdentifier";
  v31[0] = @"common";
  long long v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  uint64_t v6 = MEMORY[0x1E4F14500];
  uint64_t v7 = [v3 initWithAssetTypeDescriptorPath:@"/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist" defaultBundlePath:v4 matchingKeysAndValues:v5 notificationQueue:notificationQueue logHandle:MEMORY[0x1E4F14500] enableAssetUpdates:1];
  char v8 = (void *)assetInstance;
  assetid Instance = v7;

  uint64_t v9 = [MEMORY[0x1E4F5DFA0] defaultLanguage];
  unint64_t v10 = (void *)v9;
  if (v9) {
    uint64_t v11 = (__CFString *)v9;
  }
  else {
    uint64_t v11 = @"unknown";
  }
  objc_storeStrong((id *)&localeAssetIdentifier, v11);

  id v12 = objc_alloc(MEMORY[0x1E4F93AA8]);
  unint64_t v13 = [v0 pathForResource:localeAssetIdentifier ofType:@"suggestionsassets"];
  uint64_t v28 = @"SGAssetIdentifier";
  uint64_t v29 = localeAssetIdentifier;
  char v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
  uint64_t v15 = [v12 initWithAssetTypeDescriptorPath:@"/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist" defaultBundlePath:v13 matchingKeysAndValues:v14 notificationQueue:notificationQueue logHandle:v6 enableAssetUpdates:1];
  int v16 = (void *)localeAssetInstance;
  localeAssetid Instance = v15;

  unint64_t v17 = [MEMORY[0x1E4F1CA20] currentLocale];
  uint64_t v18 = [v17 localeIdentifier];
  char v19 = (void *)regionAssetIdentifier;
  regionAssetIdentifier = v18;

  if (+[SGMessageEventDissector mobileAssetsEnabled])
  {
    id v20 = objc_alloc(MEMORY[0x1E4F93AA8]);
    uint64_t v21 = [v0 pathForResource:regionAssetIdentifier ofType:@"suggestionsassets"];
    char v26 = @"SGAssetIdentifier";
    uint64_t v27 = regionAssetIdentifier;
    uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    LOBYTE(v25) = 1;
    uint64_t v23 = [v20 initWithAssetTypeDescriptorPath:@"/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist" defaultBundlePath:v21 matchingKeysAndValues:v22 notificationQueue:notificationQueue logHandle:MEMORY[0x1E4F14500] enableAssetUpdates:1 purgeObsoleteInstalledAssets:v25];
    unint64_t v24 = (void *)regionAssetInstance;
    regionAssetid Instance = v23;
  }
}

void sub_1CA8AB86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42175(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re2::Compiler::Compile(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4re2::Compiler::Compile(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__42176(uint64_t a1)
{
}

void sub_1CA8ABA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2HarvestCostBreakdownReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_43;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            uint64_t v26 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 2re2::Compiler::Compile(this, 0) = v26 != 0;
      }
      else if (v17 == 2)
      {
        uint64_t v30 = PBReaderReadString();
        char v31 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x2A0], 8) = v30;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2re2::Compiler::Compile(this, 0) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1CA8B24CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CA8B2DB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long buf,uint64_t a24,uint64_t a25,__CFString *a26,__CFString *a27,__CFString *a28)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x1CA8B29ECLL);
  }
  id v31 = objc_begin_catch(a1);
  if (os_variant_has_internal_diagnostics())
  {
    *(unsigned char *)(a20 + 24) = 0;
  }
  else if (*(unsigned char *)(a20 + 24))
  {
    uint64_t v33 = sgLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v28;
      _os_log_debug_impl(&dword_1CA650000, v33, OS_LOG_TYPE_DEBUG, "A bogus or corrupt journal file was found and has been cleaned up. Suggestd will relaunch and continue: %@", (uint8_t *)&buf, 0xCu);
    }

    unint64_t v34 = (void *)MEMORY[0x1E4F1CA00];
    *(void *)(v30 - 12re2::Compiler::Compile(this, 0) = v28;
    a26 = @"fullPath";
    a27 = @"query";
    int v35 = [v29 objectForKeyedSubscript:@"__query"];
    a28 = @"originalException";
    *(void *)(v30 - 112) = v35;
    *(void *)(v30 - 104) = v31;
    char v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 - 120 forKeys:&a26 count:3];
    id v32 = [v34 exceptionWithName:@"SGDatabaseJournalWillRecoverOnNextLaunch" reason:@"A bogus or corrupt journal file was found and has been cleaned up. Suggestd will relaunch and continue." userInfo:v36];

LABEL_8:
    objc_exception_throw(v32);
  }
  id v32 = v31;
  goto LABEL_8;
}

void sub_1CA8B2F74(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1CA8B2E28);
  }
  JUMPOUT(0x1CA8B2F8CLL);
}

BOOL _sqliteErrorIndicatesDeviceBecameLocked(void *a1)
{
  dispatch_queue_t v1 = [a1 userInfo];
  uint64_t v2 = [v1 objectForKeyedSubscript:@"sqliteCode"];

  if (v2) {
    BOOL v3 = [v2 integerValue] == 778;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_1CA8B34C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1F41138A0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C38]();
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D18]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D83A8](*(void *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1F40D83B8](theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.id location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCopyDefault(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86E8]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D8708](allocator, ti);
}

uint64_t CKCanRetryForError()
{
  return MEMORY[0x1F40D6270]();
}

uint64_t DDAddressResultCanBeMergedWith()
{
  return MEMORY[0x1F4117148]();
}

uint64_t DDForce24HrsFormatProcessWideForExtraction()
{
  return MEMORY[0x1F4117158]();
}

uint64_t DDResultCopyExtractedDateFromReferenceDate()
{
  return MEMORY[0x1F4117188]();
}

uint64_t DDResultCopyExtractedDateFromReferenceDateWithLocale()
{
  return MEMORY[0x1F4117190]();
}

uint64_t DDResultCopyExtractedStartDateEndDateWithLocale()
{
  return MEMORY[0x1F41171A0]();
}

uint64_t DDResultCopyExtractedURL()
{
  return MEMORY[0x1F41171A8]();
}

uint64_t DDResultCopyFullAddressComponents()
{
  return MEMORY[0x1F41171B8]();
}

uint64_t DDResultCopyIMScreenNameValue()
{
  return MEMORY[0x1F41171C0]();
}

uint64_t DDResultCopyMailValue()
{
  return MEMORY[0x1F41171C8]();
}

uint64_t DDResultCopyPhoneValue()
{
  return MEMORY[0x1F41171D0]();
}

uint64_t DDResultGetCategory()
{
  return MEMORY[0x1F4117208]();
}

uint64_t DDResultGetParsecDomain()
{
  return MEMORY[0x1F4117220]();
}

uint64_t DDResultGetParsecUUID()
{
  return MEMORY[0x1F4117230]();
}

uint64_t DDResultGetRange()
{
  return MEMORY[0x1F4117248]();
}

uint64_t DDResultGetRangeForURLification()
{
  return MEMORY[0x1F4117250]();
}

uint64_t DDResultGetSubResults()
{
  return MEMORY[0x1F4117268]();
}

uint64_t DDResultGetSubresultWithType()
{
  return MEMORY[0x1F4117270]();
}

uint64_t DDResultGetType()
{
  return MEMORY[0x1F4117278]();
}

uint64_t DDResultGetValue()
{
  return MEMORY[0x1F4117280]();
}

uint64_t DDResultHasType()
{
  return MEMORY[0x1F4117290]();
}

uint64_t DDResultTimeIsApprox()
{
  return MEMORY[0x1F41172D0]();
}

uint64_t DDScannerCopyResultsWithOptions()
{
  return MEMORY[0x1F4117318]();
}

uint64_t DDScannerCreate()
{
  return MEMORY[0x1F4117320]();
}

uint64_t DDScannerCreateWithLocale()
{
  return MEMORY[0x1F4117330]();
}

uint64_t DDScannerEnableOptionalSource()
{
  return MEMORY[0x1F4117340]();
}

uint64_t DDScannerReset()
{
  return MEMORY[0x1F4117348]();
}

uint64_t DDScannerScanString()
{
  return MEMORY[0x1F4117350]();
}

uint64_t DDScannerScanStringWithRange()
{
  return MEMORY[0x1F4117358]();
}

uint64_t DDScannerSetScannerTimeout()
{
  return MEMORY[0x1F4117378]();
}

uint64_t HVBatteryMonitoringStart()
{
  return MEMORY[0x1F4146018]();
}

uint64_t HVDataSourceFileProtection()
{
  return MEMORY[0x1F4146020]();
}

uint64_t HVDataSourceForBundleIdentifier()
{
  return MEMORY[0x1F4146028]();
}

uint64_t HVIsConnectedToPower()
{
  return MEMORY[0x1F4146030]();
}

uint64_t ITSCopyFTSTableCreateStatementUsingCurrentLanguage()
{
  return MEMORY[0x1F41276A0]();
}

uint64_t ITSCopyUserLanguage()
{
  return MEMORY[0x1F41276A8]();
}

uint64_t ITSTokenListCopyEscapedTokenAtIndex()
{
  return MEMORY[0x1F41276B8]();
}

uint64_t ITSTokenListCreate()
{
  return MEMORY[0x1F41276C0]();
}

uint64_t ITSTokenListGetCount()
{
  return MEMORY[0x1F41276C8]();
}

uint64_t ITSTokenListPopulateFromString()
{
  return MEMORY[0x1F41276D0]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1F412A6A8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1F412A6D8]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1F412A700]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1F412A750]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1F412A788]();
}

uint64_t NLTaggerCopyTagForCurrentToken()
{
  return MEMORY[0x1F4114100]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1F4114108]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1F4114110]();
}

uint64_t NLTaggerSetLocaleForRange()
{
  return MEMORY[0x1F4114128]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1F4114130]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FD8](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.id location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSUInteger NSPageSize(void)
{
  return MEMORY[0x1F40E71C8]();
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1 = MEMORY[0x1F40E71F8](aString);
  result.length = v2;
  result.id location = v1;
  return result;
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.id location = v2;
  return result;
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1F41471D8]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteSint64Field()
{
  return MEMORY[0x1F4147218]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1F4147360]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1F4147368]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1F4147370]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1F4147378]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1F4147380]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t PMLReadChunkFile()
{
  return MEMORY[0x1F4146048]();
}

uint64_t SGDelimitedStringsDeserialize()
{
  return MEMORY[0x1F4115470]();
}

uint64_t SGDelimitedStringsDeserializeSet()
{
  return MEMORY[0x1F4115478]();
}

uint64_t SGDelimitedStringsDeserializeWithBlock()
{
  return MEMORY[0x1F4115480]();
}

uint64_t SGDelimitedStringsSerialize()
{
  return MEMORY[0x1F4115488]();
}

uint64_t SGDelimitedStringsSerializeArray()
{
  return MEMORY[0x1F4115490]();
}

uint64_t SGEntityTypeDescription()
{
  return MEMORY[0x1F4115498]();
}

uint64_t SGEntityTypeHasSnippetData()
{
  return MEMORY[0x1F41154A0]();
}

uint64_t SGEntityTypeIsContact()
{
  return MEMORY[0x1F41154A8]();
}

uint64_t SGEntityTypeIsContactDetail()
{
  return MEMORY[0x1F41154B0]();
}

uint64_t SGEntityTypeIsCurated()
{
  return MEMORY[0x1F41154B8]();
}

uint64_t SGEntityTypeIsDelivery()
{
  return MEMORY[0x1F41154C0]();
}

uint64_t SGEntityTypeIsEvent()
{
  return MEMORY[0x1F41154C8]();
}

uint64_t SGEntityTypeIsMessage()
{
  return MEMORY[0x1F41154D0]();
}

uint64_t SGExtractionTypeDescription()
{
  return MEMORY[0x1F41154D8]();
}

uint64_t SGNormalizeEmailAddress()
{
  return MEMORY[0x1F41154E0]();
}

uint64_t SGNormalizePhoneNumber()
{
  return MEMORY[0x1F41154E8]();
}

uint64_t SGNormalizePhoneNumberCached()
{
  return MEMORY[0x1F41154F0]();
}

uint64_t SGParseNamedEmailAddress()
{
  return MEMORY[0x1F41154F8]();
}

uint64_t SGPrettifyPhoneNumber()
{
  return MEMORY[0x1F4115500]();
}

uint64_t SGThrottle()
{
  return MEMORY[0x1F4115508]();
}

uint64_t SGWeakLinkStringConstant()
{
  return MEMORY[0x1F4115510]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t SpotlightReceiverRegister()
{
  return MEMORY[0x1F415BAB8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1F40D8D00]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _LSCopyAdvertisementStringForTeamIdentifierAndActivityType()
{
  return MEMORY[0x1F40DEE98]();
}

uint64_t _PASBytesToHex()
{
  return MEMORY[0x1F4146218]();
}

uint64_t _PASCollapseWhitespaceAndStrip()
{
  return MEMORY[0x1F4146220]();
}

uint64_t _PASEnumerateSimpleLinesInString()
{
  return MEMORY[0x1F4146228]();
}

uint64_t _PASEnumerateSimpleLinesInUTF8Data()
{
  return MEMORY[0x1F4146230]();
}

uint64_t _PASEvaluateLogFaultAndProbCrashCriteria()
{
  return MEMORY[0x1F4146238]();
}

uint64_t _PASGetNameCharacterSet()
{
  return MEMORY[0x1F4146248]();
}

uint64_t _PASGetNounsAndNames()
{
  return MEMORY[0x1F4146250]();
}

uint64_t _PASGetQuotationMarkCharacterSet()
{
  return MEMORY[0x1F4146258]();
}

uint64_t _PASHexToBytes()
{
  return MEMORY[0x1F4146260]();
}

uint64_t _PASIsAllDigits()
{
  return MEMORY[0x1F4146270]();
}

uint64_t _PASIsAllUppercase()
{
  return MEMORY[0x1F4146278]();
}

uint64_t _PASKeepOnlyCharacterSet()
{
  return MEMORY[0x1F4146298]();
}

uint64_t _PASLooksLikeNumber()
{
  return MEMORY[0x1F41462A0]();
}

uint64_t _PASMemoryHeavyOperation()
{
  return MEMORY[0x1F41462A8]();
}

uint64_t _PASMurmur3_x86_128()
{
  return MEMORY[0x1F41462B8]();
}

uint64_t _PASNormalizeUnicodeString()
{
  return MEMORY[0x1F41462C8]();
}

uint64_t _PASNormalizeUnicodeStringMinimally()
{
  return MEMORY[0x1F41462D0]();
}

uint64_t _PASRemoveCharacterSet()
{
  return MEMORY[0x1F41462E0]();
}

uint64_t _PASRemoveSomePunctuation()
{
  return MEMORY[0x1F41462E8]();
}

uint64_t _PASRemoveWhitespace()
{
  return MEMORY[0x1F41462F0]();
}

uint64_t _PASRepairString()
{
  return MEMORY[0x1F41462F8]();
}

uint64_t _PASSimpleICUClearCache()
{
  return MEMORY[0x1F4146300]();
}

uint64_t _PASSimpleICUTransform()
{
  return MEMORY[0x1F4146308]();
}

uint64_t _PASStripQuotationMarks()
{
  return MEMORY[0x1F4146310]();
}

uint64_t _PASTrimTrailingWhitespace()
{
  return MEMORY[0x1F4146318]();
}

uint64_t _PASUtfNCursorAdvance()
{
  return MEMORY[0x1F4146328]();
}

uint64_t _PASUtfNCursorInit()
{
  return MEMORY[0x1F4146330]();
}

uint64_t _PNCopyIndexStringsForAddressBookSearch()
{
  return MEMORY[0x1F413F2F8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1F417EC50]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40C9CA0](a1, *(void *)&a2, a3, a4);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

void _exit(int a1)
{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _sqlite3_system_busy_handler()
{
  return MEMORY[0x1F4181F58]();
}

void abort(void)
{
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return MEMORY[0x1F4182BA0](adler, buf, *(void *)&len);
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1F417DFE8]();
}

uint64_t archive_entry_pathname_utf8()
{
  return MEMORY[0x1F417E008]();
}

uint64_t archive_entry_perm()
{
  return MEMORY[0x1F417E010]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x1F417E048]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x1F417E058]();
}

uint64_t archive_entry_size_is_set()
{
  return MEMORY[0x1F417E060]();
}

uint64_t archive_entry_update_pathname_utf8()
{
  return MEMORY[0x1F417E070]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1F417E080]();
}

uint64_t archive_read_append_filter()
{
  return MEMORY[0x1F417E090]();
}

uint64_t archive_read_close()
{
  return MEMORY[0x1F417E098]();
}

uint64_t archive_read_data()
{
  return MEMORY[0x1F417E0A0]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1F417E0A8]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1F417E110]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1F417E118]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1F417E120]();
}

uint64_t archive_read_open_fd()
{
  return MEMORY[0x1F417E138]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x1F417E148]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1F417E158]();
}

uint64_t archive_read_support_filter_uu()
{
  return MEMORY[0x1F417E178]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x1F417E190]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1F417E1A0]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x1F417E1D0]();
}

uint64_t archive_write_data_block()
{
  return MEMORY[0x1F417E1E0]();
}

uint64_t archive_write_disk_new()
{
  return MEMORY[0x1F417E1E8]();
}

uint64_t archive_write_disk_set_options()
{
  return MEMORY[0x1F417E1F0]();
}

uint64_t archive_write_disk_set_standard_lookup()
{
  return MEMORY[0x1F417E1F8]();
}

uint64_t archive_write_finish_entry()
{
  return MEMORY[0x1F417E200]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1F417E208]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1F417E210]();
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1F41814F8](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1F4181530](cls);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1F4181550](cls, name);
}

clock_t clock(void)
{
  return MEMORY[0x1F40CB3B8]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1F417A378]();
}

uint64_t ct_green_tea_logger_destroy()
{
  return MEMORY[0x1F417A388]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1F417A398]();
}

htmlParserCtxtPtr htmlCreatePushParserCtxt(htmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename, xmlCharEncoding enc)
{
  return (htmlParserCtxtPtr)MEMORY[0x1F4182580](sax, user_data, chunk, *(void *)&size, filename, *(void *)&enc);
}

int htmlCtxtUseOptions(htmlParserCtxtPtr ctxt, int options)
{
  return MEMORY[0x1F4182588](ctxt, *(void *)&options);
}

void htmlFreeParserCtxt(htmlParserCtxtPtr ctxt)
{
}

int htmlParseChunk(htmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x1F4182598](ctxt, chunk, *(void *)&size, *(void *)&terminate);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40CCBA0](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1F4181690](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

uint64_t os_transaction_needs_more_time()
{
  return MEMORY[0x1F40CD5B0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int pause(void)
{
  return MEMORY[0x1F40CD738]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return (char *)MEMORY[0x1F4181AC0](property, attributeName);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1F4181AD0](property);
}

BOOL protocol_isEqual(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1F4181B20](proto, other);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int scandir(const char *a1, dirent ***a2, int (__cdecl *a3)(const dirent *), int (__cdecl *a4)(const dirent **, const dirent **))
{
  return MEMORY[0x1F40CDEA8](a1, a2, a3, a4);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

uint64_t sgDeveloperLogHandle()
{
  return MEMORY[0x1F4115518]();
}

uint64_t sgEventsLogHandle()
{
  return MEMORY[0x1F4115520]();
}

uint64_t sgFilter()
{
  return MEMORY[0x1F4115528]();
}

uint64_t sgLogHandle()
{
  return MEMORY[0x1F4115530]();
}

uint64_t sgMailIntelligenceLogHandle()
{
  return MEMORY[0x1F4115538]();
}

uint64_t sgMap()
{
  return MEMORY[0x1F4115540]();
}

uint64_t sgMapAndFilter()
{
  return MEMORY[0x1F4115548]();
}

uint64_t sgMapSelector()
{
  return MEMORY[0x1F4115550]();
}

uint64_t sgQuicktypeLogHandle()
{
  return MEMORY[0x1F4115558]();
}

uint64_t sgRemindersLogHandle()
{
  return MEMORY[0x1F4115560]();
}

uint64_t sgSignpostHandle()
{
  return MEMORY[0x1F4115568]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F98](a1, *(void *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  return MEMORY[0x1F4182040](a1, a2, a3);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1F4182048](a1, *(void *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1F4182050](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1F4182120](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1F4182148](a1, *(void *)&op);
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  return (sqlite3 *)MEMORY[0x1F4182158](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1F41821A0](*(void *)&a1);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1F41821D0](a1, zDbName, *(void *)&op, a4);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1F4182230](a1);
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  return MEMORY[0x1F4182240](a1, *(void *)&id, *(void *)&newVal);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_zeroblob(sqlite3_context *a1, int n)
{
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1F41823A0](pStmt);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41823C0](pStmt);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1F4182418](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1F4182440](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  return (char *)MEMORY[0x1F40CE228](a1, a2, a3, a4);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1F4182678](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1F4182700](node, name);
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x1F41827B8](cur);
}

int xmlStrEqual(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x1F4182930](str1, str2);
}

int xmlStrlen(const xmlChar *str)
{
  return MEMORY[0x1F4182948](str);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1F40CE978](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1F40CED30]();
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1F40CF2F0]();
}