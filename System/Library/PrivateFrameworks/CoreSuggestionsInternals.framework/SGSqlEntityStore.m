@interface SGSqlEntityStore
+ (BOOL)canStoreEventsForAccountType:(id)a3;
+ (BOOL)contactContainsEphemeralId:(id)a3;
+ (BOOL)isEphemeralIdentifier:(int64_t)a3;
+ (BOOL)pathHasFutureDbSchema:(id)a3;
+ (SGSqlEntityStore)storeWithDefaultLocationAndExecuteJournals:(BOOL)a3;
+ (id)_cachedVIPEmailAddresses;
+ (id)_deserializeDateComponents:(id)a3;
+ (id)_fieldValuesClassWhitelist;
+ (id)_initializeDatabaseNolock:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6;
+ (id)_recreateCorruptDatabase:(id)a3 sharedLock:(id)a4 withProtection:(BOOL)a5;
+ (id)_serializeDate:(id)a3;
+ (id)cnContactIdentifiersForContact:(id)a3;
+ (id)cnContactIdentifiersSpotlightQueryStringForContact:(id)a3;
+ (id)defaultHarvestStore;
+ (id)defaultPath;
+ (id)defaultPathCreatingSuggestionsDirectoryIfNeeded:(BOOL)a3;
+ (id)defaultSnippetPath;
+ (id)defaultStore;
+ (id)escapeLike:(id)a3;
+ (id)globPrefix:(id)a3;
+ (id)initializeDatabase:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6;
+ (id)journalNameForDbPath:(id)a3;
+ (id)likePrefix:(id)a3;
+ (id)sqlStoreInMemory;
+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6;
+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7;
+ (id)sqlStoreWithEntityDbPathNoMigrate:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6;
+ (void)addPathToFutureDbSchemas:(id)a3;
+ (void)clearMigrationCompletedForPaths;
+ (void)deletePreparedSqlStoreInMemory;
+ (void)prepareSqlStoreInMemory;
+ (void)prepareSqlStoreInMemoryByClearingExistingStore:(id)a3;
+ (void)releaseInstanceAndWaitForDealloc:(id *)a3;
+ (void)setCachedVIPEmailAddresses:(id)a3;
- (BOOL)_analyzeMergeBlobsIncremental:(id)a3;
- (BOOL)_createEntityFTSTableWithName:(id)a3;
- (BOOL)_isBlobAnalysisQueueEmpty;
- (BOOL)_isIdentityStoreDirty;
- (BOOL)_isStringInNoContactsCache:(id)a3;
- (BOOL)_prepareToCopyFrom:(id)a3 toNewTableNamed:(id)a4;
- (BOOL)_processBatchOfSerializedContactJobs;
- (BOOL)_renameTable:(id)a3 to:(id)a4;
- (BOOL)_runInitMigrationTasks:(id)a3 noMigrate:(BOOL)a4;
- (BOOL)_shouldContinueReindex:(int)a3;
- (BOOL)_tombstoneExistsForBundleIdentifier:(id)a3;
- (BOOL)addSpotlightReferenceToEmailIfFullyDownloaded:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6;
- (BOOL)anyEmailAddressIsSignificant:(id)a3;
- (BOOL)anyHandleIsSignificant:(id)a3;
- (BOOL)areSubModelsEmpty;
- (BOOL)clearDatabases;
- (BOOL)confirm:(BOOL)a3 orRejectContactByRecordID:(id)a4 error:(id *)a5;
- (BOOL)confirmContactByRecordID:(id)a3 error:(id *)a4;
- (BOOL)confirmContactDetailByRecordID:(id)a3 error:(id *)a4;
- (BOOL)confirmEventByRecordId:(id)a3 error:(id *)a4;
- (BOOL)confirmRealtimeContact:(id)a3 error:(id *)a4;
- (BOOL)confirmRealtimeEvent:(id)a3 error:(id *)a4;
- (BOOL)confirmReminderByRecordId:(id)a3 error:(id *)a4;
- (BOOL)confirmStoredEvent:(id)a3 error:(id *)a4;
- (BOOL)confirmStoredReminder:(id)a3 error:(id *)a4;
- (BOOL)contactIsDisplayable:(id)a3;
- (BOOL)contactIsSignificant:(id)a3;
- (BOOL)contactIsSignificant:(id)a3 usingCoreRecents:(BOOL)a4;
- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3;
- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3 usingCoreRecents:(BOOL)a4;
- (BOOL)corruptionMarkerPresent;
- (BOOL)databasecheck_BrokenEntityIDReferences;
- (BOOL)databasecheck_IntegrityCheck;
- (BOOL)databasecheck_contactMergeGroupConsistency;
- (BOOL)deleteURLsFromBundleIdentifier:(id)a3;
- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 documentIdentifiers:(id)a4;
- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 groupIdentifierGlobs:(id)a4;
- (BOOL)deleteURLsOlderThanDate:(id)a3 deletionCount:(int64_t *)a4;
- (BOOL)entityWantsFullDownload:(id)a3;
- (BOOL)eventIsCancelled:(id)a3;
- (BOOL)hasSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4;
- (BOOL)historyHasContact:(id)a3;
- (BOOL)isEphemeral;
- (BOOL)isRecentlyDeleted:(id)a3;
- (BOOL)mayHaveSentMessageToEmail:(id)a3;
- (BOOL)mayHaveSentMessageToHandle:(id)a3;
- (BOOL)migrationNeeded;
- (BOOL)needsFullSync;
- (BOOL)performDatabaseCheck;
- (BOOL)performIntegrityCheckOnly;
- (BOOL)processContactEnrichment:(id)a3 recordId:(id)a4;
- (BOOL)processPseudoContactEntity:(id)a3 recordId:(id)a4;
- (BOOL)realtimeContactIsSignificant:(id)a3;
- (BOOL)realtimeContactIsSignificantOrSignificanceIsDisabled:(id)a3;
- (BOOL)rebuildIdentityTables;
- (BOOL)recentsContainSomeOfEmails:(id)a3 phoneNumbers:(id)a4 instantMessageAddresses:(id)a5;
- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8;
- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8 isSent:(BOOL)a9;
- (BOOL)registerURLFeedback:(unsigned __int8)a3 absoluteURL:(id)a4;
- (BOOL)reimportRequestsContainBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4;
- (BOOL)rejectContactByRecordID:(id)a3 error:(id *)a4;
- (BOOL)rejectContactDetailByRecordID:(id)a3 error:(id *)a4;
- (BOOL)rejectEventByRecordId:(id)a3 error:(id *)a4;
- (BOOL)rejectRealtimeContact:(id)a3 error:(id *)a4;
- (BOOL)rejectRealtimeEvent:(id)a3 error:(id *)a4;
- (BOOL)rejectReminderByKey:(id)a3 error:(id *)a4;
- (BOOL)rejectReminderByRecordId:(id)a3 error:(id *)a4;
- (BOOL)rejectStoredEvent:(id)a3 error:(id *)a4;
- (BOOL)rejectStoredReminder:(id)a3 error:(id *)a4;
- (BOOL)reminderAlarmTriggeredForRecordId:(id)a3 error:(id *)a4;
- (BOOL)reminderAlarmTriggeredForStorageReminder:(id)a3 error:(id *)a4;
- (BOOL)syncNewBlobsIfChanged;
- (BOOL)tombstoneExistsForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4 domainIdentifier:(id)a5;
- (BOOL)trimURLTableDownToLimit:(int64_t)a3 deletionCount:(int64_t *)a4;
- (BOOL)trimURLs;
- (BOOL)waitForMigrations;
- (BOOL)writeURL:(id)a3;
- (SGKeyValueCacheManager)kvCacheManager;
- (SGSGtoCNContactsCacheUpdateAdapter)sgToCNContactsCacheUpdateAdapter;
- (SGSpotlightContactsAdapter)spotlightContactsAdapter;
- (SGSqlEntityStore)initWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7 noMigrate:(BOOL)a8;
- (SGUnixTimestamp_)lastSeenTimestampForKey:(id)a3;
- (_PASDBIterAction_)_processContactMatchWithContacts:(id)a3 matches:(id)a4 limit:(int64_t)a5 masterEntityId:(id)a6 detailEntityId:(id)a7 contactEntityId:(id)a8 matchinfoData:(id)a9 tokens:(id)a10 requireName:(BOOL)a11;
- (_PASDBIterAction_)_updateURLs:(id)a3 stmt:(id)a4;
- (double)_scoreSGContact:(id)a3 bySimilarityToContact:(id)a4 cnContactFullname:(id)a5;
- (double)incStatsCounterWithKey:(id)a3;
- (double)incStatsCounterWithKey:(id)a3 byValue:(double)a4;
- (float)_scoreContactDetail:(id)a3;
- (id)_computeBlobsRaw:(id *)a3;
- (id)_computePseudoContactContentHash:(id)a3 contactDetails:(id)a4;
- (id)_contactForMasterEntityId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5;
- (id)_contactIdForInteractionContactIdentifierMatch:(id)a3;
- (id)_contactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4;
- (id)_deleteChildEntitiesByRecordIdsInTable:(id)a3;
- (id)_deleteEntitiesByDuplicateKeyNoRecurse:(id)a3;
- (id)_deleteMessageMetadataByDuplicateKeyNoRecurse:(id)a3;
- (id)_derefChildrenOf:(id)a3;
- (id)_deserializeRange:(id)a3;
- (id)_duplicateKeysWithZeroSpotlightReferencesFromRecordIds:(id)a3;
- (id)_filterOutAllButAcceptedWithUpdatedFields:(id)a3;
- (id)_filterOutCancelledEvents:(id)a3;
- (id)_filterOutOlderVersionsOfPseudoEvents:(id)a3;
- (id)_hashWithDuplicateKeysMatchingTags:(id)a3;
- (id)_journalEntryFromEntity:(id)a3;
- (id)_journalEntryFromReminderEntity:(id)a3;
- (id)_labelIdentityBlobs:(id)a3;
- (id)_loadIdentityBlobs;
- (id)_loadMessageByKey:(id)a3;
- (id)_loadReimportRequestsWithWhereClause:(id)a3;
- (id)_makeBlobsFromConnectedComponents:(id)a3 edges:(id)a4;
- (id)_matchableUTF8TokenRangesInMatchExpression:(id)a3;
- (id)_popBatchOfCNContactIds;
- (id)_popMergeBlobForAnalysis;
- (id)_queryForAllContactsWithExtractionDates;
- (id)_queryForAllContactsWithLimit;
- (id)_rankSGContacts:(id)a3 bySimilarityToContact:(id)a4;
- (id)_recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4;
- (id)_selectingDomainsForDomainIdentifier:(id)a3;
- (id)_serializeRange:(id)a3;
- (id)_uniqueGoodDetailMatchFrom:(id)a3 toDetails:(id)a4 nonUnique:(BOOL *)a5;
- (id)allContactsMasterEntityIdsLimitedTo:(unint64_t)a3;
- (id)allContactsWithEntityType:(unint64_t)a3;
- (id)allContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4;
- (id)allContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4;
- (id)allDeliveriesWithLimit:(unint64_t)a3;
- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4;
- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4 onlyMLExtractions:(BOOL)a5;
- (id)allPseudoContacts;
- (id)allRemindersLimitedTo:(unint64_t)a3;
- (id)batch:(id)a3;
- (id)batchOf:(unint64_t)a3 contactsStartingAtEntityId:(unint64_t)a4;
- (id)childrenFromParentKey:(id)a3;
- (id)cnContactMatchesForRecordId:(id)a3 found:(BOOL *)a4;
- (id)columnQueryPrefixSelect;
- (id)computeBlobs;
- (id)confirmedFieldValuesForEntity:(id)a3;
- (id)confirmedFieldValuesForEvent:(id)a3;
- (id)contactDetailEntityIdForDuplicateKey:(id)a3;
- (id)contactIdsMergedWithMasterEntityId:(id)a3;
- (id)contactsWithIdentifiers:(id)a3;
- (id)curatedRecordIds;
- (id)dbHandleForTesting;
- (id)dbStats;
- (id)displayableEntities:(id)a3;
- (id)domainIdentifierForSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4;
- (id)dumpTables:(id)a3 columns:(id)a4;
- (id)duplicateKeysFromMailMessageKeys:(id)a3;
- (id)duplicateKeysFromRecordIds:(id)a3;
- (id)duplicateKeysMatchingAnyEventHash:(id)a3;
- (id)duplicateKeysMatchingAnyReminderHash:(id)a3;
- (id)duplicateKeysMatchingAnyTag:(id)a3;
- (id)duplicateKeysMatchingInteractionBundleId:(id)a3 andTags:(id)a4;
- (id)emailsPendingVerification;
- (id)entityFromSqlResult:(sqlite3_stmt *)a3;
- (id)entityFromSqlResult:(sqlite3_stmt *)a3 withSnippets:(BOOL)a4;
- (id)entityKeyCountsForEntityType:(int64_t)a3 startDate:(id)a4 endDate:(id)a5;
- (id)eventFromSqlResult:(sqlite3_stmt *)a3;
- (id)filterOutUndisplayableEntities:(id)a3;
- (id)getAllLinks;
- (id)getDoubleNSNumberForKey:(id)a3;
- (id)getForKey:(id)a3 binder:(id)a4;
- (id)getInt64NSNumberForKey:(id)a3;
- (id)getNSDateForKey:(id)a3;
- (id)getNSStringForKey:(id)a3;
- (id)getNewBlobsIfChanged;
- (id)getReminder:(int64_t)a3;
- (id)getReminderWithDuplicateKey:(id)a3;
- (id)getReminderWithRecordId:(id)a3;
- (id)getSGMIStoredAddresses;
- (id)getUnsubscriptionOpportunitiesSuggestionsDenyListForField:(int64_t)a3;
- (id)getViolationsToTokenCountsPolicy:(id)a3;
- (id)highlyDiscriminantTokensForFeature:(int64_t)a3 minCount:(unint64_t)a4 minRatio:(double)a5;
- (id)historyForTesting;
- (id)initForDbStatsOnlyWithError:(id *)a3;
- (id)initForMigratorTestWithEntityDb:(id)a3 snippetDb:(id)a4;
- (id)initForRawDatabaseAccessWithEntityPath:(id)a3 snippetsPath:(id)a4 error:(id *)a5;
- (id)journal;
- (id)languageToUpdateEntityFTSTo;
- (id)loadAllContactDetailsForRecordId:(id)a3;
- (id)loadAllContactDetailsFromTableForRecordId:(id)a3;
- (id)loadAllContactDetailsFromTableForRecordId:(id)a3 type:(unint64_t)a4;
- (id)loadAllContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 dedupeAgainst:(id)a5;
- (id)loadAllPrecomputedContactMatches;
- (id)loadAllReimportRequests;
- (id)loadAllSerializedContacts;
- (id)loadCNContactMatchesForContact:(id)a3 andGetMaxEntityId:(int64_t *)a4;
- (id)loadContactDetailsForRecordId:(id)a3 type:(unint64_t)a4;
- (id)loadContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 type:(unint64_t)a5 dedupeAgainst:(id)a6 recordId:(id)a7;
- (id)loadContactForStorageContact:(id)a3 usingSerializedContactCache:(BOOL)a4;
- (id)loadDuplicateKeyByRecordId:(id)a3;
- (id)loadEntitiesByEntityKey:(id)a3 entityType:(int64_t)a4 resolveDuplicates:(id)a5;
- (id)loadEntitiesFoundInEmail:(id)a3 entityType:(int64_t)a4;
- (id)loadEntityByKey:(id)a3;
- (id)loadEntityByRecordId:(id)a3;
- (id)loadEventByDuplicateKey:(id)a3;
- (id)loadEventByKeyForOldCodePathTesting:(id)a3;
- (id)loadEventForDuplicateKey:(id)a3;
- (id)loadEventForPrimaryKey:(int64_t)a3;
- (id)loadEventForRecordId:(id)a3;
- (id)loadEventsWithInteractionIdentifiers:(id)a3 fromBundleIdentifier:(id)a4;
- (id)loadExtractionInfoForPrimaryKey:(int64_t)a3;
- (id)loadFullDownloadRequestBatch:(unint64_t)a3;
- (id)loadInterdicts;
- (id)loadMessagesToRefresh;
- (id)loadOriginByRecordId:(id)a3;
- (id)loadReminderByKeyOld:(id)a3;
- (id)loadReminderByRecordIdOld:(id)a3;
- (id)loadSerializedContactForId:(int64_t)a3;
- (id)loadSourceKeyByRecordId:(id)a3;
- (id)loadStatsCounterWithKey:(id)a3;
- (id)loadStorageContactByRecordId:(id)a3;
- (id)loadStorageContactByRecordId:(id)a3 error:(id *)a4;
- (id)loadTagForPrimaryKey:(int64_t)a3;
- (id)loadUnexecutedReimportRequests;
- (id)loadUnqueriedReimportRequests;
- (id)loadUnseenReimportItemsForRequest:(unint64_t)a3;
- (id)mailIntelligenceStagedLogsForMessageId:(id)a3;
- (id)makeInterdictsForBlob:(id)a3 withContactStore:(id)a4;
- (id)masterEntityIDsForMasterEntityQuery:(id)a3 bindings:(id)a4;
- (id)masterEntityIdForContactOrContactDetailRecord:(id)a3;
- (id)messageIdForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4;
- (id)messageIdsForBundleIdentifier:(id)a3 domainIdentifierGlobs:(id)a4 limit:(unint64_t)a5;
- (id)messageIdsForBundleIdentifier:(id)a3 limit:(unint64_t)a4;
- (id)messageIdsForBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4;
- (id)mostRecentParentKeyForDuplicateKey:(id)a3;
- (id)naiveBayesModelQueryResultForFeature:(int64_t)a3 unigramTokens:(id)a4 bigramTokens:(id)a5;
- (id)nextPendingGeocode;
- (id)normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:(id)a3;
- (id)parentKeysForDuplicateKey:(id)a3;
- (id)prematchedContactIdentifiers;
- (id)recentURLsWithLimit:(int64_t)a3;
- (id)recordIdForKey:(id)a3;
- (id)reimportRequestDBStats;
- (id)rejectFieldValuesForRecordId:(id)a3;
- (id)reminderDuplicateKeyForEntityId:(id)a3;
- (id)reminderEntityIdForDuplicateKey:(id)a3;
- (id)reminderEntityIdForPrimaryKey:(int64_t)a3;
- (id)reminderOriginForPrimaryKey:(int64_t)a3;
- (id)reminderSourceKeyForDuplicateKey:(id)a3;
- (id)saliencyForMessageId:(id)a3;
- (id)selectEntityQuery:(id)a3;
- (id)selectMigrationQueue;
- (id)serializedEntityIds;
- (id)sgmiFeatureStore;
- (id)snippetsDbHandleForTesting;
- (id)sortedSaliencyResultsRestrictedToMailboxTypes:(id)a3 mailboxIds:(id)a4 receivedOnOrAfter:(id)a5 ascending:(BOOL)a6 limit:(unint64_t)a7;
- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 limit:(unint64_t)a4;
- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 minCount:(unint64_t)a4 minScore:(double)a5 limit:(unint64_t)a6;
- (id)splitBlob:(id)a3 withInterdicts:(id)a4 edges:(id)a5 curatedRecordIds:(id)a6;
- (id)splitNeededFor:(id)a3 withInterdicts:(id)a4 curatedRecordIds:(id)a5;
- (id)spotlightUniqueIdentifierForBundleIdentifier:(id)a3 messageId:(id)a4;
- (id)storageContactByKey:(id)a3;
- (id)storageContactByMasterEntityId:(int64_t)a3 withSnippets:(BOOL)a4;
- (id)storageContactByRecordId:(id)a3 withSnippets:(BOOL)a4;
- (id)storageLocationWithPrimaryKey:(int64_t)a3;
- (id)subModelsStats;
- (id)suggestContactByIdentityKey:(id)a3 parentKey:(id)a4;
- (id)suggestContactByKey:(id)a3;
- (id)suggestContactByRecordId:(id)a3;
- (id)suggestContactByRecordId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5;
- (id)suggestContactMatchesByContactDetailTag:(id)a3;
- (id)suggestContactMatchesByContactDetailTag:(id)a3 matchType:(int64_t)a4;
- (id)suggestContactMatchesByEmailAddress:(id)a3;
- (id)suggestContactMatchesByEmailAddress:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5;
- (id)suggestContactMatchesByPhoneNumber:(id)a3;
- (id)suggestContactMatchesByPhoneNumber:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5;
- (id)suggestContactMatchesBySocialProfile:(id)a3;
- (id)suggestContactMatchesBySocialProfile:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5;
- (id)suggestContactMatchesByType:(int64_t)a3 searchString:(id)a4 isMaybe:(BOOL)a5 onlySignificant:(BOOL)a6;
- (id)suggestContactMatchesWithContact:(id)a3 limitTo:(unint64_t)a4;
- (id)suggestContactMatchesWithFullTextSearch:(id)a3 limitTo:(unint64_t)a4;
- (id)suggestContactMatchesWithMessagingPrefix:(id)a3 limitTo:(unint64_t)a4;
- (id)suggestContactsByMasterEntityQuery:(id)a3 limit:(unint64_t)a4 bindings:(id)a5;
- (id)suggestContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6;
- (id)suggestContactsWithContact:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 limitTo:(unint64_t)a6;
- (id)suggestContactsWithPrefix:(id)a3 limitTo:(unint64_t)a4;
- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5;
- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 additionalWhereClause:(id)a6 options:(unsigned int)a7 onPrep:(id)a8;
- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 options:(unsigned int)a6;
- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6;
- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6 options:(unsigned int)a7;
- (id)topSalienciesForMailboxId:(id)a3 limit:(int64_t)a4;
- (id)uniqueIdentifierForMessageId:(id)a3;
- (id)unmergedCandidatesLimitedTo:(int)a3;
- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 bundleIdentifier:(id)a5;
- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 excludingBundleIdentifiers:(id)a5 containingSubstring:(id)a6 flagFilter:(unsigned __int8)a7 limit:(int64_t)a8;
- (int64_t)_popQueuedSerializedContactId;
- (int64_t)_writeEnrichmentToDb:(id)a3;
- (int64_t)_writeMessageEntityToDb:(id)a3;
- (int64_t)_writeOneEntityToDb:(id)a3;
- (int64_t)checkExistsEventForDuplicateKey:(id)a3;
- (int64_t)checkExistsSaliencyForMessageId:(id)a3;
- (int64_t)clearDatabase:(id)a3;
- (int64_t)commitContactDetail:(id)a3;
- (int64_t)commitEvent:(id)a3;
- (int64_t)commitSaliency:(id)a3;
- (int64_t)commitSpotlightMapping:(id)a3 bundleIdentifier:(id)a4 domainIdentifier:(id)a5 uniqueIdentifier:(id)a6;
- (int64_t)commitStorageLocation:(id)a3;
- (int64_t)commitStorageLocation:(id)a3 withEventId:(int64_t)a4;
- (int64_t)commitStorageReminder:(id)a3;
- (int64_t)commitTag:(id)a3;
- (int64_t)configureMigratorThenMigrateToVersion:(unint64_t)a3;
- (int64_t)contactDetailPrimaryKeyForDuplicateKey:(id)a3;
- (int64_t)contactMatchedRecordTypeFromEntityType:(int64_t)a3;
- (int64_t)contactMatchedRecordTypeFromIdentityKeyType:(unint64_t)a3;
- (int64_t)entityTypeFromIdentityKeyType:(unint64_t)a3;
- (int64_t)fixupVersionMismatch;
- (int64_t)getMaxEntityId;
- (int64_t)insertEvent:(id)a3;
- (int64_t)insertSaliency:(id)a3;
- (int64_t)migrate;
- (int64_t)migrateDatabases;
- (int64_t)migrateToVersion:(unint64_t)a3;
- (int64_t)migration_AddAuthorColumnIfMissing;
- (int64_t)migration_AddNewishTablesIfMissing;
- (int64_t)migration_ConvertContentAndDupKeyHashesToBlobs;
- (int64_t)migration_CreateFTSTableWithITS;
- (int64_t)migration_DeduplicateIdentityPhones;
- (int64_t)migration_DropMessagingTermsWithPhoneExtensions;
- (int64_t)migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration;
- (int64_t)migration_FixupMergeGroups;
- (int64_t)migration_MoveContentToSnippets;
- (int64_t)migration_RebuildIdentityTables;
- (int64_t)migration_RecreateFTSTableWithITS;
- (int64_t)migration_RemoveEntityReferencesWithoutBundleIdentifier;
- (int64_t)migration_addAppleMailMessageIdToEvents;
- (int64_t)migration_deleteEmergencyExtractions;
- (int64_t)migration_deleteInteractions;
- (int64_t)migration_deleteInternalExtractionsFromML;
- (int64_t)migration_deleteLegacyMessages;
- (int64_t)migration_deleteNilDateEvents;
- (int64_t)migration_deleteSerializedContacts;
- (int64_t)migration_newContactDetailsSchema;
- (int64_t)migration_newEventsSchema;
- (int64_t)migration_newRemindersSchema;
- (int64_t)migration_rebuildFTSWithDetailEntityIDDocIDs;
- (int64_t)migration_reimport;
- (int64_t)migration_separateMessageEntities;
- (int64_t)migration_separateMessageSnippets;
- (int64_t)reminderPrimaryKeyForEntityId:(id)a3;
- (int64_t)runQueries:(id)a3 forVersion:(unsigned int)a4 inTransactionOnDb:(id)a5;
- (int64_t)runQuery:(id)a3 onDb:(id)a4;
- (int64_t)skipFromZeroSchema;
- (int64_t)unmigrateDatabases;
- (int64_t)updateEvent:(id)a3 primaryKey:(int64_t)a4;
- (int64_t)updateSaliency:(int64_t)a3 saliency:(id)a4;
- (int64_t)updateSaliencyCreationTimestampForTesting:(int64_t)a3 timestamp:(SGUnixTimestamp_)a4;
- (int64_t)writeEnrichment:(id)a3;
- (int64_t)writeEntity:(id)a3;
- (int64_t)writeEntity:(id)a3 withSpotlightReferenceForBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6;
- (unint64_t)_minEntityIdFromMinEntityId:(unint64_t)a3 withContactIdentifiers:(id)a4;
- (unint64_t)commitExtractionInfo:(id)a3;
- (unint64_t)entityCount;
- (unint64_t)maxKnownDbVersion;
- (unint64_t)numberOfRowsInTable:(id)a3;
- (unint64_t)serializedContactsLimit;
- (unint64_t)storeReimportRequest:(id)a3;
- (void)_addIndexingTagsTo:(id)a3;
- (void)_addIndexingTagsToParent:(id)a3;
- (void)_addLocations:(id)a3 toEntityWriteDictionary:(id)a4;
- (void)_addStringToNoContactsCache:(id)a3;
- (void)_addTimeRange:(id)a3 toEntityWriteDictionary:(id)a4;
- (void)_clearPendingJobs;
- (void)_contactIdsForContactDetailMatches:(id)a3 detailContactIds:(id)a4 socialProfileContactIds:(id)a5;
- (void)_contactIdsForContactNameMatches:(id)a3 strongNameIds:(id)a4 weakNameIds:(id)a5;
- (void)_contentWriteEnrichmentToDb:(id)a3;
- (void)_deleteContactDetailsByRecordIds:(id)a3;
- (void)_deleteEventsByRecordIds:(id)a3;
- (void)_deleteIfNoSpotlightReferences:(id)a3 addToRecentlyDeletedCache:(BOOL)a4;
- (void)_deleteOldInteractionContactDetails:(id)a3 currentIdentifiers:(id)a4;
- (void)_deleteOrphanedItems;
- (void)_deleteRemindersByRecordIds:(id)a3;
- (void)_deltaSyncContactsWithChangeHistory:(id)a3;
- (void)_dumpTable:(id)a3 columns:(id)a4 limitTo:(int)a5;
- (void)_emitChangeNotificationForEnrichment:(id)a3;
- (void)_emitChangeNotifications:(id)a3;
- (void)_enqueueBatchOfCNContactIds:(id)a3;
- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 usingBlock:(id)a6;
- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 usingBlock:(id)a5;
- (void)_fullSyncContactsWithStore:(id)a3;
- (void)_hashAttachedPseudoContacts:(id)a3;
- (void)_joinIncompleteIdentityEmailWithOthersOfItsIlk:(id)a3 name:(id)a4 recordId:(id)a5;
- (void)_joinIncompleteIdentityPhonesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5;
- (void)_joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5;
- (void)_linkNamelessEmailsIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6;
- (void)_linkNamelessPhonesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6;
- (void)_linkNamelessSocialProfilesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6;
- (void)_logConfirmPercentWithConfirmCount:(double)a3 rejectCount:(double)a4 domain:(id)a5 suffix:(id)a6;
- (void)_markIdentityStoreClean;
- (void)_markIdentityStoreDirty;
- (void)_markRecordsLostIfNoSpotlightReferences:(id)a3;
- (void)_prunePseudoContactGeneratingEmails:(id)a3;
- (void)_recordPseudoContactsWithDeletedDetailsInTable:(id)a3 deletedChildrenTable:(id)a4;
- (void)_removeCorruptionMarker;
- (void)_removeSnippetsForEmails:(id)a3;
- (void)_reportDbStatsBackground;
- (void)_slowCopyFromTable:(id)a3 toTable:(id)a4 startingAtEntityId:(unint64_t)a5;
- (void)_trimSerializedContacts;
- (void)_writeContactDetails:(id)a3;
- (void)_writeContactEntityToJournal:(id)a3;
- (void)_writeEnrichmentToSnippetsDb:(id)a3;
- (void)_writeEntityParentageFor:(id)a3 entityId:(int64_t)a4;
- (void)_writeEventEntitiesToJournal:(id)a3;
- (void)_writeEventEntityToJournal:(id)a3;
- (void)_writeFTSTermsForEnrichment:(id)a3 entityId:(int64_t)a4;
- (void)_writeLabeledBlobs:(id)a3 deletedMasterEntityIds:(id)a4;
- (void)_writeMergeBlobSnapshotForAnalysis:(id)a3;
- (void)_writeMessageEntityToSnippetsDb:(id)a3;
- (void)_writeReminderEntitiesToJournal:(id)a3;
- (void)addDeallocNotification:(id)a3;
- (void)addInterdictFrom:(id)a3 with:(id)a4;
- (void)addSpotlightReferenceToEmailRecordId:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6;
- (void)analyzeDatabase;
- (void)analyzeMergeBlobs:(id)a3;
- (void)applyCappingPolicy:(id)a3 byDiscardingTokensCounts:(id)a4 withMargin:(float)a5;
- (void)bindCheckContactRow:(id)a3 isMe:(BOOL)a4;
- (void)bindStatementsForCommit:(id)a3 storageEvent:(id)a4;
- (void)clearAllTables;
- (void)clearAllTombstonesForSpotlightReferencesIf:(id)a3;
- (void)clearCaches;
- (void)clearChangeHistory:(id)a3;
- (void)clearMailIntelligence;
- (void)clearMailIntelligenceSaliencyDetection;
- (void)clearMasterEntityCache;
- (void)clearNoContactsCache;
- (void)clearSaliencyTable;
- (void)closeDatabases;
- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4;
- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4 updateDate:(id)a5;
- (void)confirmFieldValues:(id)a3 forEntity:(id)a4;
- (void)dealloc;
- (void)deleteAllCNContactMatches;
- (void)deleteAllCNContactMatchesForEntityID:(int64_t)a3;
- (void)deleteAllCNContactMatchesForIdSet:(id)a3;
- (void)deleteAllReimportRequestsOlderThanDate:(id)a3;
- (void)deleteByRecordId:(id)a3;
- (void)deleteCNContactMatchForContactId:(id)a3;
- (void)deleteCompletedReimportRequests;
- (void)deleteEntitiesByDuplicateKey:(id)a3 emitChangeNotifications:(BOOL)a4;
- (void)deleteEntitiesByDuplicateKey:(id)a3 preserveEventConfirmationHistory:(BOOL)a4 emitChangeNotifications:(BOOL)a5;
- (void)deleteInteractionEntitiesExceedingLimit:(id)a3 withSuspensionHandler:(id)a4;
- (void)deleteInteractionsWithBundleId:(id)a3;
- (void)deleteInteractionsWithBundleId:(id)a3 groupIdentifiers:(id)a4;
- (void)deleteInteractionsWithBundleId:(id)a3 identifiers:(id)a4;
- (void)deleteItemsWithEntityTag:(id)a3;
- (void)deleteItemsWithEntityTag:(id)a3 preserveEventConfirmationHistory:(BOOL)a4;
- (void)deleteMailIntelligenceForMessageIds:(id)a3;
- (void)deleteMessages:(id)a3;
- (void)deleteMessagesByDuplicateKey:(id)a3;
- (void)deleteNaiveBayesModelForProbabilityFeatureName:(int64_t)a3;
- (void)deleteSerializedContactForId:(int64_t)a3;
- (void)deleteSerializedContactsForIdSet:(id)a3;
- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3;
- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4;
- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4;
- (void)deleteSpotlightReferencesWithNoBundleIdentifier;
- (void)deleteTokensForDeletedEmailAddresses:(id)a3;
- (void)deleteValueForKey:(id)a3;
- (void)enumerateAllContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4 withSnippets:(BOOL)a5 limitTo:(unint64_t)a6 usingBlock:(id)a7;
- (void)enumerateAllContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4 usingBlock:(id)a5;
- (void)enumerateContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6 usingBlock:(id)a7;
- (void)filterOutRejectedDetailsFromContact:(id)a3;
- (void)forceBlobSync;
- (void)handleDeviceLockStateEvent:(int)a3;
- (void)incrementInt64NSNumber:(id)a3 forKey:(id)a4;
- (void)initRefreshSuggestionsContactDropBox;
- (void)insertEventTagsAndLocations:(id)a3 primaryKey:(int64_t)a4;
- (void)link:(id)a3 to:(id)a4 type:(unsigned int)a5 strength:(double)a6;
- (void)logConfirmPercentAfterContactConfirmation;
- (void)logConfirmPercentAfterContactDetailConfirmation;
- (void)logConfirmPercentAfterContactDetailRejection;
- (void)logConfirmPercentAfterContactRejection;
- (void)markEntityAsDupeByRecordId:(id)a3;
- (void)markLostSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4;
- (void)markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId:(id)a3;
- (void)markMessagesFound:(id)a3;
- (void)markMessagesLost:(id)a3;
- (void)markMessagesUndisplayablyLost:(id)a3;
- (void)markReimportItemAsSeenByReceiverWithBundleId:(id)a3 uniqueId:(id)a4;
- (void)markReimportItemsAsSeenByReceiverWithBundleId:(id)a3 items:(id)a4;
- (void)markReimportRequestAsExecutedWithRequestId:(unint64_t)a3;
- (void)prepMigrator;
- (void)preventUnsubscriptionOpportunitiesSuggestionsForField:(int64_t)a3 toValues:(id)a4;
- (void)pruneDuplicateEventExtractions:(id)a3;
- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4;
- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4 batchSize:(unint64_t)a5;
- (void)pruneEntitiesOlderThanOneYearWithSuspensionHandler:(id)a3;
- (void)pruneLostMessagesWithSource:(id)a3 count:(unint64_t)a4;
- (void)pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler:(id)a3;
- (void)pruneNLEventEntitiesOlderThan:(SGUnixTimestamp_)a3;
- (void)pruneNLEventEntitiesOlderThanTwoWeeks;
- (void)pruneReminders;
- (void)purgeTokensWhichLastUpdateWasBefore:(id)a3;
- (void)rebuildContactDetailsCacheWithShouldContinueBlock:(id)a3;
- (void)refreshSuggestionsContact:(id)a3;
- (void)registerCachePrecomputationWithCTS;
- (void)registerJournalUnlockHandler;
- (void)registerSentMailMessage:(id)a3;
- (void)registerSentTextMessage:(id)a3;
- (void)reindexSearchableItemsWithMinimumEntityId:(unint64_t)a3 searchableIndex:(id)a4 acknowledgementHandler:(id)a5 reindexCount:(int)a6;
- (void)removeSnippetsForEntities:(id)a3;
- (void)removeStringFromNoContactsCache:(id)a3;
- (void)reportDbStats;
- (void)resolveFullDownloadRequests:(id)a3;
- (void)runWithWriteLockAcquired:(id)a3;
- (void)searchableIndex:(id)a3 reindexAllSearchableItemsWithAcknowledgementHandler:(id)a4;
- (void)searchableIndex:(id)a3 reindexSearchableItemsWithIdentifiers:(id)a4 acknowledgementHandler:(id)a5;
- (void)selectAuthoritativeDetailsForContactWithId:(int64_t)a3;
- (void)setAllMailIntelligenceAsNotSalient;
- (void)setAllMailIntelligenceAsSalient;
- (void)setCRLookupForTesting:(id)a3;
- (void)setDoubleNSNumber:(id)a3 forKey:(id)a4;
- (void)setHasFullSync;
- (void)setInt64NSNumber:(id)a3 forKey:(id)a4;
- (void)setLostMessageOverflow:(unint64_t)a3;
- (void)setMailIntelligenceStagedLogs:(id)a3 forMessageId:(id)a4;
- (void)setMalformedEventWhenRangeForTesting;
- (void)setNSDate:(id)a3 forKey:(id)a4;
- (void)setNSString:(id)a3 forKey:(id)a4;
- (void)setParentMessagesLimitForTesting:(unint64_t)a3;
- (void)setSerializedContactsLimit:(unint64_t)a3;
- (void)setValue:(id)a3 forKey:(id)a4 binder:(id)a5;
- (void)startJournaling;
- (void)stopJournaling;
- (void)storeReimportItems:(id)a3 requestId:(unint64_t)a4;
- (void)storeStatsCounterWithKey:(id)a3 value:(double)a4;
- (void)syncContactsWithStore:(id)a3;
- (void)truncateContactDetailTable;
- (void)tryExecuteSnippetsJournal;
- (void)unsafeMigrateToVersionForTesting:(unint64_t)a3;
- (void)updateCNContactMatches:(id)a3;
- (void)updateLanguageForFTSTablesToLanguage:(id)a3;
- (void)updateMessages:(id)a3 state:(unint64_t)a4;
- (void)updateReimportItemUniqueIdForBundleId:(id)a3 oldValue:(id)a4 newValue:(id)a5;
- (void)updateSerializedContacts:(id)a3;
- (void)vacuum;
- (void)writeCNContactMatchAndUpdateSetForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5;
- (void)writeCNContactMatchForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5;
- (void)writeCNContactMissForRecordId:(id)a3;
- (void)writeEmailVerificationResultForEmailWithKey:(id)a3 eventEntities:(id)a4;
- (void)writeEntityGeocodeResultToDb:(id)a3;
- (void)writeIdentityBlobs:(id)a3 forceRewrite:(BOOL)a4;
- (void)writeInteractionEventEntities:(id)a3;
- (void)writeSerializedContact:(id)a3;
- (void)writeSerializedContactPlaceholder:(int64_t)a3;
- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3;
- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifier:(id)a4;
- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4;
- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4;
- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4;
@end

@implementation SGSqlEntityStore

+ (id)defaultStore
{
  pthread_mutex_lock(&defaultStore_defaultStoreInitLock);
  if (!defaultStore_instance)
  {
    v2 = sgLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_INFO, "Attempting to instantiate the shared default store", v7, 2u);
    }

    uint64_t v3 = +[SGSqlEntityStore storeWithDefaultLocationAndExecuteJournals:1];
    v4 = (void *)defaultStore_instance;
    defaultStore_instance = v3;
  }
  pthread_mutex_unlock(&defaultStore_defaultStoreInitLock);
  v5 = (void *)defaultStore_instance;
  return v5;
}

- (SGKeyValueCacheManager)kvCacheManager
{
  return (SGKeyValueCacheManager *)objc_getProperty(self, a2, 264, 1);
}

- (BOOL)isEphemeral
{
  return self->_isEphemeral;
}

void __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = v3;
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(v3, "bindNamedParam:toNSSet:", ":excludingBundleIdentifiers");
  }
  else
  {
    v5 = [MEMORY[0x1E4F1CAD0] set];
    [v4 bindNamedParam:":excludingBundleIdentifiers" toNSSet:v5];
  }
  [*(id *)(a1 + 40) timeIntervalSince1970];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":startDate");
  [*(id *)(a1 + 48) timeIntervalSince1970];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":endDate");
  [v4 bindNamedParam:":limit" toInt64:*(void *)(a1 + 64)];
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_3;
    v7[3] = &unk_1E65B5300;
    id v8 = v6;
    [v4 bindNamedParam:":containingSubstringBlock" toBlock:v7];
  }
  if (*(unsigned char *)(a1 + 72)) {
    objc_msgSend(v4, "bindNamedParam:toInt64:", ":flagFilter");
  }
}

uint64_t __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":limit" toInt64:*(void *)(a1 + 32)];
}

void __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke(uint64_t a1)
{
  v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = (void *)[[NSString alloc] initWithFormat:@"SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls WHERE bundle_id NOT IN _pas_nsset(:excludingBundleIdentifiers)   AND (seconds_from_1970 BETWEEN :startDate AND :endDate        OR document_seconds_from_1970 BETWEEN :startDate AND :endDate)   %@ %@ ORDER BY seconds_from_1970 DESC LIMIT :limit", *(void *)(a1 + 40), *(void *)(a1 + 48)];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_2;
  v8[3] = &unk_1E65B5328;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v4 = *(id *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  id v11 = v4;
  uint64_t v13 = v5;
  id v12 = *(id *)(a1 + 80);
  char v14 = *(unsigned char *)(a1 + 104);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_4;
  v6[3] = &unk_1E65BFED8;
  v6[4] = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 88);
  [v2 prepAndRunSQL:v3 onPrep:v8 onRow:v6 onError:0];
}

- (id)recentURLsWithLimit:(int64_t)a3
{
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke;
  v13[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v13[4] = a3;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke_2;
  v11[3] = &unk_1E65BFED8;
  v11[4] = self;
  id v7 = v5;
  id v12 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls ORDER BY seconds_from_1970 DESC LIMIT :limit" onPrep:v13 onRow:v11 onError:0];
  id v8 = v12;
  id v9 = v7;

  return v9;
}

- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 excludingBundleIdentifiers:(id)a5 containingSubstring:(id)a6 flagFilter:(unsigned __int8)a7 limit:(int64_t)a8
{
  int v8 = a7;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  v17 = objc_opt_new();
  if (v16) {
    v18 = @" AND _pas_block(:containingSubstringBlock, url) ";
  }
  else {
    v18 = &stru_1F24EEF20;
  }
  if (v8) {
    v19 = @" AND (flags & :flagFilter) = 0 ";
  }
  else {
    v19 = &stru_1F24EEF20;
  }
  v20 = sgLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    [v13 timeIntervalSince1970];
    v32 = v31;
    [v14 timeIntervalSince1970];
    *(_DWORD *)buf = 134218240;
    id v46 = v32;
    __int16 v47 = 2048;
    uint64_t v48 = v33;
    _os_log_debug_impl(&dword_1CA650000, v20, OS_LOG_TYPE_DEBUG, "SGURL: query: %f - %f ", buf, 0x16u);
  }

  db = self->_db;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke;
  v35[3] = &unk_1E65B5350;
  v35[4] = self;
  v36 = v18;
  v37 = v19;
  id v38 = v15;
  id v39 = v13;
  id v40 = v14;
  int64_t v43 = a8;
  id v41 = v16;
  char v44 = v8;
  id v22 = v17;
  id v42 = v22;
  id v23 = v16;
  id v24 = v14;
  id v25 = v13;
  id v26 = v15;
  [(SGSqliteDatabase *)db readTransaction:v35];
  v27 = sgLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138739971;
    id v46 = v22;
    _os_log_debug_impl(&dword_1CA650000, v27, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate results: %{sensitive}@", buf, 0xCu);
  }

  v28 = v42;
  id v29 = v22;

  return v29;
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 documentIdentifiers:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  uint64_t v18 = 0;
  v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  db = self->_db;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke;
  v13[3] = &unk_1E65B7938;
  id v16 = &v22;
  v13[4] = self;
  id v9 = v6;
  id v14 = v9;
  id v10 = v7;
  id v15 = v10;
  v17 = &v18;
  [(SGSqliteDatabase *)db writeTransaction:v13];
  if (v19[3]) {
    +[SGDNotificationBroadcaster emitURLChanged];
  }
  char v11 = *((unsigned char *)v23 + 24);

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke(uint64_t a1)
{
  v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 3221225472;
  uint64_t v5 = __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke_2;
  id v6 = &unk_1E65BFF28;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v2 prepAndRunSQL:@"DELETE FROM urls WHERE bundle_id = :bundleIdentifier AND doc_id IN _pas_nsarray(:documentIdentifiers)" onPrep:&v3 onRow:0 onError:0];
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "handle", v3, v4, v5, v6));
}

void __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleIdentifier" toNonnullNSString:v3];
  [v4 bindNamedParam:":documentIdentifiers" toNSArray:*(void *)(a1 + 40)];
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 groupIdentifierGlobs:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithString:", @"DELETE FROM urls WHERE bundle_id = ? AND ((group_id GLOB ?) ");
  if ((unint64_t)[v7 count] >= 2)
  {
    unint64_t v9 = 1;
    do
    {
      [v8 appendString:@"OR (group_id GLOB ?) "];
      ++v9;
    }
    while ([v7 count] > v9);
  }
  [v8 appendString:@""]);
  uint64_t v30 = 0;
  v31 = &v30;
  uint64_t v32 = 0x2020000000;
  char v33 = 0;
  uint64_t v26 = 0;
  v27 = &v26;
  uint64_t v28 = 0x2020000000;
  uint64_t v29 = 0;
  db = self->_db;
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  uint64_t v18 = __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke;
  v19 = &unk_1E65B53C8;
  uint64_t v24 = &v30;
  uint64_t v20 = self;
  id v11 = v8;
  id v21 = v11;
  id v12 = v6;
  id v22 = v12;
  id v13 = v7;
  id v23 = v13;
  char v25 = &v26;
  [(SGSqliteDatabase *)db writeTransaction:&v16];
  if (v27[3]) {
    +[SGDNotificationBroadcaster emitURLChanged];
  }
  char v14 = *((unsigned char *)v31 + 24);

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  return v14;
}

void __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = MEMORY[0x1E4F143A8];
  uint64_t v5 = 3221225472;
  id v6 = __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke_2;
  id v7 = &unk_1E65BFF28;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 prepAndRunSQL:v2 onPrep:&v4 onRow:0 onError:0];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "handle", v4, v5, v6, v7));
}

void __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [v3 bindParam:1 toNonnullNSString:*(void *)(a1 + 32)];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "bindParam:toNonnullNSString:", v8 + v9, *(void *)(*((void *)&v10 + 1) + 8 * v9), (void)v10);
        ++v9;
      }
      while (v6 != v9);
      uint64_t v8 = (v8 + v9);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  db = self->_db;
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  long long v11 = __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke;
  long long v12 = &unk_1E65C06D8;
  uint64_t v15 = &v21;
  long long v13 = self;
  id v6 = v4;
  id v14 = v6;
  uint64_t v16 = &v17;
  [(SGSqliteDatabase *)db writeTransaction:&v9];
  if (v18[3]) {
    +[SGDNotificationBroadcaster emitURLChanged];
  }
  char v7 = *((unsigned char *)v22 + 24);

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);

  return v7;
}

void __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke_2;
  v3[3] = &unk_1E65C0388;
  id v4 = *(id *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 prepAndRunSQL:@"DELETE FROM urls WHERE bundle_id = :bundleIdentifier" onPrep:v3 onRow:0 onError:0];
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
}

uint64_t __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":bundleIdentifier" toNonnullNSString:*(void *)(a1 + 32)];
}

- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 bundleIdentifier:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  long long v11 = objc_opt_new();
  long long v12 = sgLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    [v8 timeIntervalSince1970];
    uint64_t v23 = v22;
    [v9 timeIntervalSince1970];
    *(_DWORD *)buf = 134218754;
    id v31 = v23;
    __int16 v32 = 2048;
    uint64_t v33 = v24;
    __int16 v34 = 2112;
    id v35 = v8;
    __int16 v36 = 2112;
    id v37 = v9;
    _os_log_debug_impl(&dword_1CA650000, v12, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate+bundle query: %f - %f (%@ - %@)", buf, 0x2Au);
  }

  db = self->_db;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke;
  v25[3] = &unk_1E65BF020;
  v25[4] = self;
  id v26 = v10;
  id v27 = v8;
  id v28 = v9;
  id v14 = v11;
  id v29 = v14;
  id v15 = v9;
  id v16 = v8;
  id v17 = v10;
  [(SGSqliteDatabase *)db readTransaction:v25];
  uint64_t v18 = sgLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138739971;
    id v31 = v14;
    _os_log_debug_impl(&dword_1CA650000, v18, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate+bundle results: %{sensitive}@", buf, 0xCu);
  }

  uint64_t v19 = v29;
  id v20 = v14;

  return v20;
}

void __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_2;
  v5[3] = &unk_1E65BF998;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_3;
  v3[3] = &unk_1E65BFED8;
  void v3[4] = *(void *)(a1 + 32);
  id v4 = *(id *)(a1 + 64);
  [v2 prepAndRunSQL:@"SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls WHERE bundle_id = :bundleId AND COALESCE(document_seconds_from_1970, seconds_from_1970) BETWEEN :startDate AND :endDate", v5, v3, 0 onPrep onRow onError];
}

void __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleId" toNonnullNSString:v3];
  [*(id *)(a1 + 40) timeIntervalSince1970];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":startDate");
  [*(id *)(a1 + 48) timeIntervalSince1970];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":endDate");
}

uint64_t __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateURLs:*(void *)(a1 + 40) stmt:a2];
}

- (BOOL)deleteURLsOlderThanDate:(id)a3 deletionCount:(int64_t *)a4
{
  id v6 = a3;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke;
  v10[3] = &unk_1E65BECB0;
  long long v12 = &v14;
  v10[4] = self;
  id v8 = v6;
  id v11 = v8;
  long long v13 = a4;
  [(SGSqliteDatabase *)db writeTransaction:v10];
  LOBYTE(a4) = *((unsigned char *)v15 + 24);

  _Block_object_dispose(&v14, 8);
  return (char)a4;
}

void __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke_2;
  v5[3] = &unk_1E65C0388;
  id v6 = *(id *)(a1 + 40);
  char v3 = [v2 prepAndRunSQL:@"DELETE FROM urls WHERE seconds_from_1970 < :seconds" onPrep:v5 onRow:0 onError:0];
  uint64_t v4 = *(void *)(a1 + 56);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3;
  if (v4) {
    **(void **)(a1 + 56) = sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
  }
}

void __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 timeIntervalSince1970];
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":seconds");
}

- (BOOL)trimURLTableDownToLimit:(int64_t)a3 deletionCount:(int64_t *)a4
{
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke;
  v7[3] = &unk_1E65B53A0;
  void v7[4] = self;
  v7[5] = &v8;
  v7[6] = a3;
  v7[7] = a4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
  char v5 = *((unsigned char *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke_2;
  v4[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v4[4] = *(void *)(a1 + 48);
  uint64_t result = [v2 prepAndRunSQL:@"DELETE FROM urls ORDER BY id DESC LIMIT -1 OFFSET :keepThisMany" onPrep:v4 onRow:0 onError:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  if (*(void *)(a1 + 56))
  {
    uint64_t result = sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
    **(void **)(a1 + 56) = (int)result;
  }
  return result;
}

uint64_t __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":keepThisMany" toInt64:*(void *)(a1 + 32)];
}

- (BOOL)trimURLs
{
  uint64_t v8 = 0;
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceNow:-2592000.0];
  BOOL v4 = [(SGSqlEntityStore *)self deleteURLsOlderThanDate:v3 deletionCount:&v8];
  uint64_t v7 = 0;
  BOOL v5 = [(SGSqlEntityStore *)self trimURLTableDownToLimit:64 deletionCount:&v7];
  if (v8 + v7) {
    +[SGDNotificationBroadcaster emitURLChanged];
  }

  return v4 && v5;
}

- (BOOL)writeURL:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __35__SGSqlEntityStore_URLs__writeURL___block_invoke;
  v9[3] = &unk_1E65BFD88;
  v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  uint64_t v7 = sgLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138739971;
    id v12 = v6;
    _os_log_debug_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEBUG, "SGURL: written: %{sensitive}@", buf, 0xCu);
  }

  return 1;
}

void __35__SGSqlEntityStore_URLs__writeURL___block_invoke(uint64_t a1)
{
  v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __35__SGSqlEntityStore_URLs__writeURL___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"INSERT OR REPLACE INTO urls (url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags) VALUES (:url, :title, :receivedFromHandle, :bundleIdentifier, :groupIdentifier, :documentIdentifier, :secondsFrom1970, :documentTitle, :documentDate, :documentTimeInterval, :flags)", v2, 0, 0 onPrep onRow onError];
}

void __35__SGSqlEntityStore_URLs__writeURL___block_invoke_2(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = [*(id *)(a1 + 32) url];
  id v4 = [v3 absoluteString];
  [v14 bindNamedParam:":url" toNSString:v4];

  BOOL v5 = [*(id *)(a1 + 32) title];
  [v14 bindNamedParam:":title" toNSString:v5];

  id v6 = [*(id *)(a1 + 32) receivedFromHandle];
  [v14 bindNamedParam:":receivedFromHandle" toNSString:v6];

  uint64_t v7 = [*(id *)(a1 + 32) bundleIdentifier];
  [v14 bindNamedParam:":bundleIdentifier" toNSString:v7];

  uint64_t v8 = [*(id *)(a1 + 32) groupIdentifier];
  [v14 bindNamedParam:":groupIdentifier" toNSString:v8];

  id v9 = [*(id *)(a1 + 32) documentIdentifier];
  [v14 bindNamedParam:":documentIdentifier" toNSString:v9];

  id v10 = [*(id *)(a1 + 32) receivedAt];
  [v10 timeIntervalSince1970];
  objc_msgSend(v14, "bindNamedParam:toDouble:", ":secondsFrom1970");

  char v11 = [*(id *)(a1 + 32) documentTitle];
  [v14 bindNamedParam:":documentTitle" toNSString:v11];

  id v12 = [*(id *)(a1 + 32) documentDate];

  if (v12)
  {
    uint64_t v13 = [*(id *)(a1 + 32) documentDate];
    [v13 timeIntervalSince1970];
    objc_msgSend(v14, "bindNamedParam:toDouble:", ":documentDate");
  }
  [*(id *)(a1 + 32) documentTimeInterval];
  objc_msgSend(v14, "bindNamedParam:toDouble:", ":documentTimeInterval");
  objc_msgSend(v14, "bindNamedParam:toInteger:", ":flags", objc_msgSend(*(id *)(a1 + 32), "flags"));
}

- (_PASDBIterAction_)_updateURLs:(id)a3 stmt:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v7 = [v6 nonnullNSStringForColumnName:"url" table:"urls"];
  uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:v7];
  if (v8)
  {
    char v25 = v7;
    id v9 = objc_alloc(MEMORY[0x1E4F1C9C8]);
    [v6 getDoubleForColumnName:"seconds_from_1970" table:"urls"];
    id v26 = objc_msgSend(v9, "initWithTimeIntervalSince1970:");
    if ([v6 isNullForColumnName:"document_seconds_from_1970" table:"urls"])
    {
      uint64_t v24 = 0;
    }
    else
    {
      id v11 = objc_alloc(MEMORY[0x1E4F1C9C8]);
      [v6 getDoubleForColumnName:"document_seconds_from_1970" table:"urls"];
      uint64_t v24 = objc_msgSend(v11, "initWithTimeIntervalSince1970:");
    }
    [v6 getDoubleForColumnName:"document_time_interval" table:"urls"];
    double v13 = v12;
    uint64_t v23 = [v6 nonnullNSStringForColumnName:"bundle_id" table:"urls"];
    id v22 = [v6 nonnullNSStringForColumnName:"doc_id" table:"urls"];
    id v14 = objc_alloc(MEMORY[0x1E4F5DB80]);
    uint64_t v21 = [v6 getNSStringForColumnName:"title" table:"urls"];
    id v15 = [v6 getNSStringForColumnName:"received_from_handle" table:"urls"];
    uint64_t v16 = [v6 getNSStringForColumnName:"group_id" table:"urls"];
    char v17 = [v6 getNSStringForColumnName:"document_title" table:"urls"];
    LOBYTE(v20) = [v6 getIntegerForColumnName:"flags" table:"urls"];
    uint64_t v18 = (void *)[v14 initWithURL:v8 title:v21 receivedFromHandle:v15 bundleIdentifier:v23 groupIdentifier:v16 documentIdentifier:v22 documentTitle:v13 documentDate:v17 documentTimeInterval:v24 receivedAt:v26 flags:v20];
    [v5 addObject:v18];

    v10.var0 = *MEMORY[0x1E4F93C08];
    uint64_t v7 = v25;
  }
  else
  {
    v10.var0 = *MEMORY[0x1E4F93C08];
  }

  return v10;
}

- (BOOL)registerURLFeedback:(unsigned __int8)a3 absoluteURL:(id)a4
{
  unsigned int v4 = a3;
  id v6 = a4;
  unsigned int v7 = 0x80204u >> (8 * v4);
  BOOL v8 = v4 >= 3;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke;
  v12[3] = &unk_1E65B6088;
  if (v8) {
    LOBYTE(v7) = 0;
  }
  char v14 = v7;
  v12[4] = self;
  id v13 = v6;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v12];

  return 1;
}

void __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke(uint64_t a1)
{
  v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_2;
  v2[3] = &unk_1E65B5378;
  char v4 = *(unsigned char *)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"UPDATE urls SET flags = (flags | :flagsToSet) WHERE _pas_block(:block, url)", v2, 0, 0 onPrep onRow onError];
}

void __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
  id v4 = a2;
  [v4 bindNamedParam:":flagsToSet" toInt64:v3];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_3;
  v5[3] = &unk_1E65B5300;
  id v6 = *(id *)(a1 + 32);
  [v4 bindNamedParam:":block" toBlock:v5];
}

id __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectAtIndexedSubscript:0];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "compare:options:", v3, 1) == 0);
  }
  else
  {
    id v4 = (void *)MEMORY[0x1E4F1CC28];
  }

  return v4;
}

uint64_t __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateURLs:*(void *)(a1 + 40) stmt:a2];
}

id __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectAtIndexedSubscript:0];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v4 = [v3 rangeOfString:*(void *)(a1 + 32) options:1] != 0x7FFFFFFFFFFFFFFFLL;
    id v5 = [NSNumber numberWithBool:v4];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1E4F1CC28];
  }

  return v5;
}

uint64_t __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateURLs:*(void *)(a1 + 40) stmt:a2];
}

- (int64_t)reminderPrimaryKeyForEntityId:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 numericValue];
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke;
  v10[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v10[4] = v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  v9[4] = &v11;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id FROM reminders WHERE entityId = ?" onPrep:v10 onRow:v9 onError:0];
  int64_t v7 = v12[3];
  _Block_object_dispose(&v11, 8);

  return v7;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 integerValue];

  return 1;
}

- (id)reminderEntityIdForPrimaryKey:(int64_t)a3
{
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke;
  v10[3] = &unk_1E65BEBB0;
  v10[4] = &v11;
  uint64_t v5 = (void *)MEMORY[0x1CB79B4C0](v10, a2);
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke_2;
  v9[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v9[4] = a3;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT entityId FROM reminders WHERE id = ?" onPrep:v9 onRow:v5 onError:0];
  int64_t v7 = [MEMORY[0x1E4F5DB20] recordIdWithNumericValue:v12[3]];

  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

- (id)reminderOriginForPrimaryKey:(int64_t)a3
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  uint64_t v20 = __Block_byref_object_copy__1158;
  uint64_t v21 = __Block_byref_object_dispose__1159;
  id v22 = 0;
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = __Block_byref_object_copy__1158;
  id v15 = __Block_byref_object_dispose__1159;
  id v16 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke;
  v10[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v10[4] = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke_2;
  v9[3] = &unk_1E65BE440;
  v9[4] = &v17;
  void v9[5] = &v11;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT duplicateKey, sourceKey FROM reminders WHERE id = :primaryKey" onPrep:v10 onRow:v9 onError:0];
  id v6 = [MEMORY[0x1E4F5DAC8] originForDuplicateKey:v18[5] sourceKey:v12[5] store:self];
  if (!v6)
  {
    BOOL v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Reminders.m", 259, @"Invalid parameter not satisfying: %@", @"origin" object file lineNumber description];
  }
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v6;
}

uint64_t __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"duplicateKey" table:0];
  uint64_t v5 = [[SGDuplicateKey alloc] initWithSerialized:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  int64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = [v3 getNSStringForColumnName:"sourceKey" table:0];

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
  return *v11;
}

- (id)reminderEntityIdForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  id v15 = __Block_byref_object_copy__1158;
  id v16 = __Block_byref_object_dispose__1159;
  id v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke;
  v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT entityId FROM reminders WHERE duplicateKey = ?" onPrep:v10 onRow:v9 onError:0];
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = [*(id *)(a1 + 32) serialize];
  sqlite3_bind_text(a2, 1, (const char *)[v3 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithNumericValue:", sqlite3_column_int64(a2, 0));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)reminderDuplicateKeyForEntityId:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  id v16 = __Block_byref_object_copy__1158;
  id v17 = __Block_byref_object_dispose__1159;
  id v18 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke;
  v11[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v12 = v6;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke_2;
  v10[3] = &unk_1E65BEBB0;
  void v10[4] = &v13;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT duplicateKey FROM reminders WHERE entityId = ?" onPrep:v11 onRow:v10 onError:0];
  id v7 = [SGDuplicateKey alloc];
  uint64_t v8 = [(SGDuplicateKey *)v7 initWithSerialized:v14[5]];

  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  int v3 = [*(id *)(a1 + 32) numericValue];
  return sqlite3_bind_int(a2, 1, v3);
}

uint64_t __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)reminderSourceKeyForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = __Block_byref_object_copy__1158;
  id v16 = __Block_byref_object_dispose__1159;
  id v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke;
  v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT sourceKey FROM reminders WHERE duplicateKey = ?" onPrep:v10 onRow:v9 onError:0];
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = [*(id *)(a1 + 32) serialize];
  sqlite3_bind_text(a2, 1, (const char *)[v3 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (int64_t)commitStorageReminder:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 duplicateKey];
  if (v5
    && ([(SGSqlEntityStore *)self reminderEntityIdForDuplicateKey:v5],
        (uint64_t v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v7 = (id)v6;
    int64_t v8 = [(SGSqlEntityStore *)self reminderPrimaryKeyForEntityId:v6];
  }
  else
  {
    uint64_t v9 = [v4 toReminder];
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke;
    v22[3] = &unk_1E65B8148;
    id v23 = v4;
    id v7 = v9;
    id v24 = v7;
    char v25 = self;
    id v10 = (void *)MEMORY[0x1CB79B4C0](v22);
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x2020000000;
    uint64_t v21 = -1;
    db = self->_db;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke_27;
    v14[3] = &unk_1E65C03B0;
    v14[4] = self;
    uint64_t v15 = @"INSERT INTO reminders (entityId, duplicateKey, sourceKey, title, dueDateComponents, dueLocationId, dueLocationType, dueLocationTrigger, sourceUrl, creationDate, opaqueKey, uniqueKey, contactIdentifier, reminderStatus) VALUES (:entityId, :duplicateKey, :sourceKey, :title, :dueDateComponents, :dueLocationId, :dueLocationType, :dueLocationTrigger, :sourceUrl, :creationDate, :opaqueKey, :uniqueKey, :contactIdentifier, :reminderStatus)";
    id v12 = v10;
    id v16 = v12;
    id v17 = &v18;
    [(SGSqliteDatabase *)db writeTransaction:v14];
    int64_t v8 = v19[3];

    _Block_object_dispose(&v18, 8);
  }

  return v8;
}

void __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke(id *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = [a1[4] recordId];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityId", [v4 numericValue]);

  uint64_t v5 = [a1[4] duplicateKey];
  uint64_t v6 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":duplicateKey" nsstring:v6];

  id v7 = [a1[4] origin];
  int64_t v8 = [v7 sourceKey];

  if (v8)
  {
    uint64_t v9 = [a1[4] origin];
    id v10 = [v9 sourceKey];
    +[SGSqliteDatabase bindParam:a2 name:":sourceKey" nsstring:v10];
  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:a2 name:":sourceKey"];
  }
  id v11 = [a1[4] title];
  +[SGSqliteDatabase bindParam:a2 name:":title" nsstring:v11];

  id v12 = [a1[5] dueDateComponents];

  if (v12)
  {
    uint64_t v13 = [a1[5] dueDateComponents];
    uint64_t v14 = [v13 date];

    if (v14)
    {
      uint64_t v15 = +[SGSqlEntityStore _serializeDate:v14];
      +[SGSqliteDatabase bindParam:a2 name:":dueDateComponents" nsstring:v15];
    }
    else
    {
      id v16 = sgLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        id v24 = [a1[5] dueDateComponents];
        int v25 = 138412290;
        id v26 = v24;
        _os_log_fault_impl(&dword_1CA650000, v16, OS_LOG_TYPE_FAULT, "null date derived from reminder.dueDateComponents is unexpected: %@", (uint8_t *)&v25, 0xCu);
      }
      if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
        abort();
      }
      +[SGSqliteDatabase bindParamToNull:a2 name:":dueDateComponents"];
    }
  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:a2 name:":dueDateComponents"];
  }
  id v17 = [a1[4] dueStorageLocation];
  if (v17) {
    +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationId", [a1[6] commitStorageLocation:v17]);
  }
  else {
    +[SGSqliteDatabase bindParamToNull:a2 name:":dueLocationId"];
  }
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationType", [a1[4] dueLocationType]);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationTrigger", [a1[4] dueLocationTrigger]);
  uint64_t v18 = [a1[4] sourceURL];
  uint64_t v19 = [v18 absoluteString];
  +[SGSqliteDatabase bindParam:a2 name:":sourceUrl" nsstring:v19];

  uint64_t v20 = [a1[4] creationDate];
  [v20 timeIntervalSince1970];
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":creationDate");

  uint64_t v21 = [a1[4] opaqueKey];
  +[SGSqliteDatabase bindParam:a2 name:":opaqueKey" nsstring:v21];

  id v22 = [a1[4] uniqueKey];
  +[SGSqliteDatabase bindParam:a2 name:":uniqueKey" nsstring:v22];

  id v23 = [a1[4] contactIdentifier];
  +[SGSqliteDatabase bindParam:a2 name:":contactIdentifier" nsstring:v23];

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":reminderStatus", [a1[4] reminderStatus]);
}

sqlite3_int64 __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke_27(void *a1)
{
  [*(id *)(a1[4] + 8) prepAndRunQuery:a1[5] onPrep:a1[6] onRow:0 onError:0];
  sqlite3_int64 result = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(a1[4] + 8) handle]);
  *(void *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

- (id)getReminder:(int64_t)a3
{
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __43__SGSqlEntityStore_Reminders__getReminder___block_invoke;
  v16[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v16[4] = a3;
  uint64_t v5 = (void *)MEMORY[0x1CB79B4C0](v16, a2);
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x3032000000;
  uint64_t v13 = __Block_byref_object_copy__1158;
  uint64_t v14 = __Block_byref_object_dispose__1159;
  id v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __43__SGSqlEntityStore_Reminders__getReminder___block_invoke_5;
  v9[3] = &unk_1E65B5588;
  void v9[5] = &v10;
  void v9[6] = a3;
  v9[4] = self;
  uint64_t v6 = (void *)MEMORY[0x1CB79B4C0](v9);
  [(SGSqliteDatabase *)self->_db prepAndRunQuery:@"SELECT title, dueDateComponents, dueLocationId, dueLocationType, dueLocationTrigger, creationDate, contactIdentifier, reminderStatus FROM reminders WHERE id = ?" onPrep:v5 onRow:v6 onError:0];
  id v7 = (id)v11[5];

  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t __43__SGSqlEntityStore_Reminders__getReminder___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

uint64_t __43__SGSqlEntityStore_Reminders__getReminder___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = [*(id *)(a1 + 32) reminderEntityIdForPrimaryKey:*(void *)(a1 + 48)];
  uint64_t v5 = [*(id *)(a1 + 32) reminderDuplicateKeyForEntityId:v4];
  uint64_t v6 = [*(id *)(a1 + 32) reminderSourceKeyForDuplicateKey:v5];
  id v7 = [*(id *)(a1 + 32) reminderOriginForPrimaryKey:*(void *)(a1 + 48)];
  int64_t v8 = sqlite3_column_nsstring(a2, 0);
  uint64_t v9 = sqlite3_column_nsstring(a2, 1);
  uint64_t v10 = +[SGSqlEntityStore _deserializeDateComponents:v9];

  if (!v10)
  {
    id v11 = sgLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    __int16 v29 = 0;
    uint64_t v12 = "SGSQLEntityStore+Reminders: unable to deserialize date components.";
    uint64_t v13 = (uint8_t *)&v29;
LABEL_9:
    _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
    goto LABEL_12;
  }
  if (!v8)
  {
    id v11 = sgLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_WORD *)buf = 0;
    uint64_t v12 = "SGSQLEntityStore+Reminders: unable to fetch title.";
    uint64_t v13 = buf;
    goto LABEL_9;
  }
  id v26 = v7;
  uint64_t v27 = v6;
  if (sqlite3_column_type(a2, 2) == 5)
  {
    id v11 = 0;
  }
  else
  {
    id v11 = objc_msgSend(*(id *)(a1 + 32), "storageLocationWithPrimaryKey:", sqlite3_column_int64(a2, 2));
  }
  unsigned __int8 v25 = sqlite3_column_int(a2, 3);
  char v14 = sqlite3_column_int(a2, 4);
  double v15 = sqlite3_column_double(a2, 5);
  id v16 = (void *)MEMORY[0x1CB79B230]();
  id v17 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:v15];
  uint64_t v18 = sqlite3_column_nsstring(a2, 6);
  LOBYTE(v24) = sqlite3_column_int(a2, 7);
  LOBYTE(v23) = v14;
  uint64_t v6 = v27;
  uint64_t v19 = [[SGStorageReminder alloc] initWithRecordId:v4 duplicateKey:v5 sourceKey:v27 origin:v26 dueDate:v10 dueLocationType:v25 dueLocation:v11 dueLocationTrigger:v23 title:v8 reminderStatus:v24 contactIdentifier:v18 creationDate:v17];
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;

  id v7 = v26;
LABEL_12:

  return 1;
}

- (id)getReminderWithDuplicateKey:(id)a3
{
  id v4 = [(SGSqlEntityStore *)self reminderEntityIdForDuplicateKey:a3];
  uint64_t v5 = [(SGSqlEntityStore *)self getReminder:[(SGSqlEntityStore *)self reminderPrimaryKeyForEntityId:v4]];

  return v5;
}

- (id)getReminderWithRecordId:(id)a3
{
  int64_t v4 = [(SGSqlEntityStore *)self reminderPrimaryKeyForEntityId:a3];
  return [(SGSqlEntityStore *)self getReminder:v4];
}

+ (id)_deserializeDateComponents:(id)a3
{
  return (id)objc_msgSend(MEMORY[0x1E4F1C9D8], "sg_dateComponentsFromISO8601String:", a3);
}

+ (id)_serializeDate:(id)a3
{
  id v3 = a3;
  int64_t v4 = objc_opt_new();
  uint64_t v5 = [v4 stringFromDate:v3];

  return v5;
}

- (id)getNSDateForKey:(id)a3
{
  id v3 = [(SGSqlEntityStore *)self getForKey:a3 binder:&__block_literal_global_23];
  if (v3)
  {
    int64_t v4 = objc_opt_new();
    uint64_t v5 = [v4 dateFromString:v3];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t __45__SGSqlEntityStore_KVStore__getNSDateForKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 getNSStringForColumn:0];
}

- (void)setNSDate:(id)a3 forKey:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  int64_t v8 = objc_opt_new();
  uint64_t v9 = [v8 stringFromDate:v7];

  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __46__SGSqlEntityStore_KVStore__setNSDate_forKey___block_invoke;
  v11[3] = &unk_1E65C0388;
  id v12 = v9;
  id v10 = v9;
  [(SGSqlEntityStore *)self setValue:v10 forKey:v6 binder:v11];
}

uint64_t __46__SGSqlEntityStore_KVStore__setNSDate_forKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":value" toNSString:*(void *)(a1 + 32)];
}

- (id)getNSStringForKey:(id)a3
{
  return [(SGSqlEntityStore *)self getForKey:a3 binder:&__block_literal_global_20];
}

uint64_t __47__SGSqlEntityStore_KVStore__getNSStringForKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 getNSStringForColumn:0];
}

- (void)setNSString:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __48__SGSqlEntityStore_KVStore__setNSString_forKey___block_invoke;
  v8[3] = &unk_1E65C0388;
  id v9 = v6;
  id v7 = v6;
  [(SGSqlEntityStore *)self setValue:v7 forKey:a4 binder:v8];
}

uint64_t __48__SGSqlEntityStore_KVStore__setNSString_forKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":value" toNSString:*(void *)(a1 + 32)];
}

- (id)getDoubleNSNumberForKey:(id)a3
{
  return [(SGSqlEntityStore *)self getForKey:a3 binder:&__block_literal_global_18];
}

uint64_t __53__SGSqlEntityStore_KVStore__getDoubleNSNumberForKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 getDoubleAsNSNumberForColumn:0];
}

- (void)setDoubleNSNumber:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __54__SGSqlEntityStore_KVStore__setDoubleNSNumber_forKey___block_invoke;
  v8[3] = &unk_1E65C0388;
  id v9 = v6;
  id v7 = v6;
  [(SGSqlEntityStore *)self setValue:v7 forKey:a4 binder:v8];
}

uint64_t __54__SGSqlEntityStore_KVStore__setDoubleNSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":value" toDoubleAsNSNumber:*(void *)(a1 + 32)];
}

- (void)incrementInt64NSNumber:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(SGSqlEntityStore *)self getInt64NSNumberForKey:v7];
  id v9 = (void *)v8;
  id v10 = &unk_1F25355F8;
  if (v8) {
    id v10 = (void *)v8;
  }
  id v11 = v10;

  id v12 = NSNumber;
  int v13 = [v11 intValue];

  char v14 = objc_msgSend(v12, "numberWithInt:", objc_msgSend(v6, "intValue") + v13);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __59__SGSqlEntityStore_KVStore__incrementInt64NSNumber_forKey___block_invoke;
  v16[3] = &unk_1E65C0388;
  id v17 = v6;
  id v15 = v6;
  [(SGSqlEntityStore *)self setValue:v14 forKey:v7 binder:v16];
}

uint64_t __59__SGSqlEntityStore_KVStore__incrementInt64NSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":value" toInt64AsNSNumber:*(void *)(a1 + 32)];
}

- (id)getInt64NSNumberForKey:(id)a3
{
  return [(SGSqlEntityStore *)self getForKey:a3 binder:&__block_literal_global_1463];
}

uint64_t __52__SGSqlEntityStore_KVStore__getInt64NSNumberForKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 getInt64AsNSNumberForColumn:0];
}

- (void)setInt64NSNumber:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __53__SGSqlEntityStore_KVStore__setInt64NSNumber_forKey___block_invoke;
  v8[3] = &unk_1E65C0388;
  id v9 = v6;
  id v7 = v6;
  [(SGSqlEntityStore *)self setValue:v7 forKey:a4 binder:v8];
}

uint64_t __53__SGSqlEntityStore_KVStore__setInt64NSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":value" toInt64AsNSNumber:*(void *)(a1 + 32)];
}

- (id)getForKey:(id)a3 binder:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  id v22 = __Block_byref_object_copy__1465;
  uint64_t v23 = __Block_byref_object_dispose__1466;
  id v24 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke;
  v17[3] = &unk_1E65C0388;
  id v8 = v6;
  id v18 = v8;
  id v9 = (void *)MEMORY[0x1CB79B4C0](v17);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke_2;
  v14[3] = &unk_1E65BFA10;
  id v16 = &v19;
  id v10 = v7;
  id v15 = v10;
  id v11 = (void *)MEMORY[0x1CB79B4C0](v14);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT value FROM metadata WHERE key = :key LIMIT 1" onPrep:v9 onRow:v11 onError:0];
  id v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v12;
}

uint64_t __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":key" toNSString:*(void *)(a1 + 32)];
}

uint64_t __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *MEMORY[0x1E4F93C10];
}

- (void)deleteValueForKey:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke;
  v7[3] = &unk_1E65BFD88;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke_2;
  v3[3] = &unk_1E65C0388;
  id v4 = *(id *)(a1 + 32);
  uint64_t v2 = (void *)MEMORY[0x1CB79B4C0](v3);
  [*(id *)(*(void *)(a1 + 40) + 8) prepAndRunSQL:@"DELETE FROM metadata WHERE key = :key" onPrep:v2 onRow:0 onError:0];
}

uint64_t __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":key" toNSString:*(void *)(a1 + 32)];
}

- (void)setValue:(id)a3 forKey:(id)a4 binder:(id)a5
{
  id v7 = a4;
  id v8 = a5;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke;
  v12[3] = &unk_1E65BFFF0;
  char v14 = self;
  id v15 = v8;
  id v13 = v7;
  id v10 = v8;
  id v11 = v7;
  [(SGSqliteDatabase *)db writeTransaction:v12];
}

void __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 3221225472;
  uint64_t v5 = __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke_2;
  id v6 = &unk_1E65BF9E8;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  uint64_t v2 = (void *)MEMORY[0x1CB79B4C0](&v3);
  [*(id *)(*(void *)(a1 + 40) + 8) prepAndRunSQL:@"INSERT OR REPLACE INTO metadata (key, value) VALUES (:key, :value)", v2, 0, 0, v3, v4, v5, v6 onPrep onRow onError];
}

void __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":key" toNSString:v3];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (void)markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke;
  v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke(uint64_t a1)
{
  v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"UPDATE mailIntelligence_saliency SET isLogged = TRUE, stagedLog = NULL WHERE messageId = :messageId", v2, 0, 0 onPrep onRow onError];
}

uint64_t __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageId" toNSString:*(void *)(a1 + 32)];
}

- (void)setMailIntelligenceStagedLogs:(id)a3 forMessageId:(id)a4
{
  id v6 = a4;
  id v7 = [a3 data];
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke;
  v11[3] = &unk_1E65C0688;
  void v11[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v11];
}

void __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke_2;
  v3[3] = &unk_1E65BFF28;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 prepAndRunSQL:@"UPDATE mailIntelligence_saliency SET stagedLog=:stagedLog WHERE messageId = :messageId" onPrep:v3 onRow:0 onError:0];
}

void __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":messageId" toNSString:v3];
  [v4 bindNamedParam:":stagedLog" toNSData:*(void *)(a1 + 40)];
}

- (id)mailIntelligenceStagedLogsForMessageId:(id)a3
{
  id v4 = a3;
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x3032000000;
  uint64_t v33 = __Block_byref_object_copy__2596;
  __int16 v34 = __Block_byref_object_dispose__2597;
  id v35 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  db = self->_db;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke;
  v24[3] = &unk_1E65C0388;
  id v6 = v4;
  id v25 = v6;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke_2;
  v23[3] = &unk_1E65BE440;
  v23[4] = &v30;
  v23[5] = &v26;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT stagedLog, isLogged FROM mailIntelligence_saliency WHERE messageId = :messageId" onPrep:v24 onRow:v23 onError:0];
  if (*((unsigned char *)v27 + 24))
  {
    id v7 = [SGMIStagedLogRecord alloc];
    id v8 = [(SGMIStagedLogRecord *)v7 initWithLog:0 isLogged:*((unsigned __int8 *)v27 + 24)];
  }
  else
  {
    if (v31[5])
    {
      id v9 = [SGMIMetricsMailIntelligenceForMessage alloc];
      id v10 = [(SGMIMetricsMailIntelligenceForMessage *)v9 initWithData:v31[5]];
    }
    else
    {
      id v10 = (SGMIMetricsMailIntelligenceForMessage *)objc_opt_new();
      id v11 = objc_opt_new();
      [(SGMIMetricsMailIntelligenceForMessage *)v10 setActive:v11];

      id v12 = objc_opt_new();
      id v13 = [(SGMIMetricsMailIntelligenceForMessage *)v10 active];
      [v13 setMissingAttachments:v12];

      char v14 = objc_opt_new();
      id v15 = [(SGMIMetricsMailIntelligenceForMessage *)v10 active];
      [v15 setMissingRecipients:v14];

      id v16 = objc_opt_new();
      id v17 = [(SGMIMetricsMailIntelligenceForMessage *)v10 active];
      [v17 setSubmodelsProbabilities:v16];

      id v18 = objc_opt_new();
      uint64_t v19 = [v18 trialMetadata];
      uint64_t v20 = [(SGMIMetricsMailIntelligenceForMessage *)v10 active];
      [v20 setTrialMetadata:v19];
    }
    uint64_t v21 = [SGMIStagedLogRecord alloc];
    id v8 = [(SGMIStagedLogRecord *)v21 initWithLog:v10 isLogged:*((unsigned __int8 *)v27 + 24)];
  }
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  return v8;
}

uint64_t __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageId" toNSString:*(void *)(a1 + 32)];
}

uint64_t __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getNSDataForColumnName:"stagedLog" table:"mailIntelligence_saliency"];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = [v3 getIntegerForColumnName:"isLogged" table:"mailIntelligence_saliency"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7 != 0;
  return *MEMORY[0x1E4F93C10];
}

- (void)setAllMailIntelligenceAsNotSalient
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __64__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsNotSalient__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __64__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsNotSalient__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"UPDATE mailIntelligence_saliency SET isSalient=0, score=0", 0, 0, 0 onPrep onRow onError];
}

- (void)setAllMailIntelligenceAsSalient
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __61__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsSalient__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __61__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsSalient__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"UPDATE mailIntelligence_saliency SET isSalient=1, score=1", 0, 0, 0 onPrep onRow onError];
}

- (void)clearSaliencyTable
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __48__SGSqlEntityStore_Saliency__clearSaliencyTable__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __48__SGSqlEntityStore_Saliency__clearSaliencyTable__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"DELETE FROM mailIntelligence_saliency" onPrep:0 onRow:0 onError:0];
}

- (int64_t)updateSaliencyCreationTimestampForTesting:(int64_t)a3 timestamp:(SGUnixTimestamp_)a4
{
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = -1;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke;
  v10[3] = &__block_descriptor_48_e29_v16__0___PASSqliteStatement_8l;
  void v10[4] = a3;
  void v10[5] = *(SGUnixTimestamp_ *)&a4.secondsFromUnixEpoch;
  uint64_t v5 = (void *)MEMORY[0x1CB79B4C0](v10, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke_2;
  v9[3] = &unk_1E65C03F8;
  v9[4] = &v11;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v9);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"UPDATE mailIntelligence_saliency SET creationTimestamp = :creationTimestamp WHERE id = :id" onPrep:v5 onRow:v6 onError:0];
  int64_t v7 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v7;
}

void __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":id" toInt64:v3];
  [v4 bindNamedParam:":creationTimestamp" toDouble:*(double *)(a1 + 40)];
}

uint64_t __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E4F93C10];
}

- (int64_t)commitSaliency:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __45__SGSqlEntityStore_Saliency__commitSaliency___block_invoke;
  v9[3] = &unk_1E65C0700;
  uint64_t v11 = &v12;
  v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

uint64_t __45__SGSqlEntityStore_Saliency__commitSaliency___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) messageId];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 checkExistsSaliencyForMessageId:v3];

  id v4 = *(void **)(a1 + 32);
  if ((*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) & 0x8000000000000000) != 0)
  {
    uint64_t result = [v4 insertSaliency:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  else
  {
    uint64_t result = objc_msgSend(v4, "updateSaliency:saliency:");
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    if (result != -1) {
      uint64_t result = *(void *)(v6 + 24);
    }
  }
  *(void *)(v6 + 24) = result;
  return result;
}

- (int64_t)insertSaliency:(id)a3
{
  id v4 = a3;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke;
  v18[3] = &unk_1E65C0388;
  id v19 = v4;
  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x1CB79B4C0](v18);
  db = self->_db;
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  uint64_t v13 = __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke_2;
  uint64_t v14 = &unk_1E65BFFF0;
  uint64_t v15 = self;
  id v16 = @"INSERT INTO mailIntelligence_saliency (creationTimestamp, messageId, mailboxId, score, isSalient, isGteSalient, isCounted) VALUES (:creationTimestamp, :messageId, :mailboxId, :score, :isSalient, :isGteSalient, :isCounted)";
  id v17 = v6;
  id v8 = v6;
  [(SGSqliteDatabase *)db writeTransaction:&v11];
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid([(SGSqliteDatabase *)self->_db handle]);

  return insert_rowid;
}

void __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v11 = a2;
  id v4 = [v3 creationDate];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) creationDate];
    [v5 timeIntervalSinceReferenceDate];
    double Current = v6;
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
  }

  [v11 bindNamedParam:":creationTimestamp" toDouble:Current];
  id v8 = [*(id *)(a1 + 32) messageId];
  [v11 bindNamedParam:":messageId" toNSString:v8];

  id v9 = [*(id *)(a1 + 32) mailboxId];
  [v11 bindNamedParam:":mailboxId" toNSString:v9];

  id v10 = [*(id *)(a1 + 32) score];
  [v11 bindNamedParam:":score" toDoubleAsNSNumber:v10];

  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isSalient", objc_msgSend(*(id *)(a1 + 32), "isSalient"));
  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isGteSalient", (int)objc_msgSend(*(id *)(a1 + 32), "gteSaliency"));
  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isCounted", objc_msgSend(*(id *)(a1 + 32), "isCounted"));
}

uint64_t __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke_2(void *a1)
{
  return [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[6] onRow:0 onError:0];
}

- (int64_t)updateSaliency:(int64_t)a3 saliency:(id)a4
{
  id v6 = a4;
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = -1;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke;
  v20[3] = &unk_1E65BFF50;
  int64_t v22 = a3;
  id v7 = v6;
  id v21 = v7;
  id v8 = (void *)MEMORY[0x1CB79B4C0](v20);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_2;
  v19[3] = &unk_1E65C03F8;
  v19[4] = &v23;
  id v9 = (void *)MEMORY[0x1CB79B4C0](v19);
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_3;
  v15[3] = &unk_1E65B61A0;
  v15[4] = self;
  id v16 = @"UPDATE mailIntelligence_saliency SET messageId = :messageId, mailboxId = :mailboxId, score = :score, isSalient = :isSalient, isGteSalient = :isGteSalient, isCounted = :isCounted WHERE id = :id";
  id v11 = v8;
  id v17 = v11;
  id v12 = v9;
  id v18 = v12;
  [(SGSqliteDatabase *)db writeTransaction:v15];
  int64_t v13 = v24[3];

  _Block_object_dispose(&v23, 8);
  return v13;
}

void __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 bindNamedParam:":id" toInt64:v3];
  id v5 = [*(id *)(a1 + 32) score];
  [v5 doubleValue];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":score");

  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isSalient", objc_msgSend(*(id *)(a1 + 32), "isSalient"));
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isGteSalient", (int)objc_msgSend(*(id *)(a1 + 32), "gteSaliency"));
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isCounted", objc_msgSend(*(id *)(a1 + 32), "isCounted"));
  id v6 = [*(id *)(a1 + 32) messageId];
  [v4 bindNamedParam:":messageId" toNSString:v6];

  id v7 = [*(id *)(a1 + 32) mailboxId];
  [v4 bindNamedParam:":mailboxId" toNSString:v7];
}

uint64_t __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E4F93C10];
}

uint64_t __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_3(void *a1)
{
  return [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[6] onRow:a1[7] onError:0];
}

- (int64_t)checkExistsSaliencyForMessageId:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = -1;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke;
  v11[3] = &unk_1E65C0388;
  id v5 = v4;
  id v12 = v5;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v11);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke_2;
  v10[3] = &unk_1E65C03F8;
  void v10[4] = &v13;
  id v7 = (void *)MEMORY[0x1CB79B4C0](v10);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT id FROM mailIntelligence_saliency WHERE messageId = :messageId" onPrep:v6 onRow:v7 onError:0];
  int64_t v8 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageId" toNSString:*(void *)(a1 + 32)];
}

uint64_t __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumnName:"id" table:"mailIntelligence_saliency"];
  return *MEMORY[0x1E4F93C10];
}

- (id)sortedSaliencyResultsRestrictedToMailboxTypes:(id)a3 mailboxIds:(id)a4 receivedOnOrAfter:(id)a5 ascending:(BOOL)a6 limit:(unint64_t)a7
{
  BOOL v8 = a6;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:a7];
  if (v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1CB79B230]();
    id v17 = sgMailIntelligenceLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CA650000, v17, OS_LOG_TYPE_DEFAULT, "SGMI SGSqlEntityStore+Saliency: The sortedSaliencyResults method do not currently use mailboxType", buf, 2u);
    }
  }
  if (v13)
  {
    id v18 = (void *)MEMORY[0x1CB79B230]();
    objc_msgSend(@"SELECT messageId, mailboxId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE 1", "stringByAppendingString:", @" AND mailboxId IN _pas_nsarray(:mailboxIds)");
    id v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v14) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  id v19 = @"SELECT messageId, mailboxId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE 1";
  if (v14)
  {
LABEL_7:
    uint64_t v20 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v21 = [(__CFString *)v19 stringByAppendingString:@" AND creationTimestamp > :minDate"];

    id v19 = (__CFString *)v21;
  }
LABEL_8:
  id v22 = [NSString alloc];
  uint64_t v23 = @"DESC";
  if (v8) {
    uint64_t v23 = @"ASC";
  }
  id v24 = (void *)[v22 initWithFormat:@"%@ ORDER BY score %@ LIMIT :limit", v19, v23];

  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke;
  v35[3] = &unk_1E65B5A18;
  id v36 = v12;
  id v37 = v13;
  id v38 = v14;
  unint64_t v39 = a7;
  id v25 = v14;
  id v26 = v13;
  id v27 = v12;
  uint64_t v28 = (void *)MEMORY[0x1CB79B4C0](v35);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke_2;
  v33[3] = &unk_1E65BFF78;
  id v29 = v15;
  id v34 = v29;
  uint64_t v30 = (void *)MEMORY[0x1CB79B4C0](v33);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:v24 onPrep:v28 onRow:v30 onError:0];
  id v31 = v29;

  return v31;
}

void __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v6 = v3;
  if (a1[4])
  {
    objc_msgSend(v3, "bindNamedParam:toNSArray:", ":mailboxTypes");
    id v4 = v6;
  }
  if (a1[5])
  {
    objc_msgSend(v4, "bindNamedParam:toNSArray:", ":mailboxIds");
    id v4 = v6;
  }
  id v5 = (void *)a1[6];
  if (v5)
  {
    [v5 timeIntervalSinceReferenceDate];
    objc_msgSend(v6, "bindNamedParam:toDouble:", ":minDate");
    id v4 = v6;
  }
  [v4 bindNamedParam:":limit" toInteger:a1[7]];
}

uint64_t __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"messageId" table:"mailIntelligence_saliency"];
  id v5 = [v3 getNSStringForColumnName:"mailboxId" table:"mailIntelligence_saliency"];
  id v6 = [v3 doubleAsNonnullNSNumberForColumnName:"score" table:"mailIntelligence_saliency"];
  BOOL v7 = [v3 getIntegerForColumnName:"isSalient" table:"mailIntelligence_saliency"] != 0;
  [v3 getDoubleForColumnName:"creationTimestamp" table:"mailIntelligence_saliency"];
  double v9 = v8;

  id v10 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v9];
  id v11 = *(void **)(a1 + 32);
  id v12 = objc_alloc(MEMORY[0x1E4F5DA80]);
  if (v5) {
    id v13 = v5;
  }
  else {
    id v13 = @"Unknown Mailbox";
  }
  id v14 = (void *)[v12 initWithMessageId:v4 mailboxId:v13 score:v6 isSalient:v7 creationDate:v10];
  [v11 addObject:v14];

  uint64_t v15 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v15;
}

- (id)topSalienciesForMailboxId:(id)a3 limit:(int64_t)a4
{
  id v6 = a3;
  BOOL v7 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:a4];
  if (v6)
  {
    objc_msgSend(@"SELECT messageId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE isSalient != 0", "stringByAppendingString:", @" AND mailboxId = :mailboxId");
    double v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    double v8 = @"SELECT messageId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE isSalient != 0";
  }
  double v9 = [(__CFString *)v8 stringByAppendingString:@" ORDER BY creationTimestamp DESC LIMIT :limit"];

  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke;
  v23[3] = &unk_1E65BFF50;
  id v10 = v6;
  id v24 = v10;
  int64_t v25 = a4;
  id v11 = (void *)MEMORY[0x1CB79B4C0](v23);
  uint64_t v17 = MEMORY[0x1E4F143A8];
  uint64_t v18 = 3221225472;
  id v19 = __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke_2;
  uint64_t v20 = &unk_1E65BFED8;
  id v12 = v7;
  id v21 = v12;
  id v22 = v10;
  id v13 = v10;
  id v14 = (void *)MEMORY[0x1CB79B4C0](&v17);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", v9, v11, v14, 0, v17, v18, v19, v20);
  id v15 = v12;

  return v15;
}

void __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(v3, "bindNamedParam:toNSString:", ":mailboxId");
    id v3 = v4;
  }
  [v3 bindNamedParam:":limit" toInteger:*(void *)(a1 + 40)];
}

uint64_t __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"messageId" table:"mailIntelligence_saliency"];
  id v5 = [v3 doubleAsNonnullNSNumberForColumnName:"score" table:"mailIntelligence_saliency"];
  BOOL v6 = [v3 getIntegerForColumnName:"isSalient" table:"mailIntelligence_saliency"] != 0;
  [v3 getDoubleForColumnName:"creationTimestamp" table:"mailIntelligence_saliency"];
  double v8 = v7;

  double v9 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v8];
  id v10 = *(void **)(a1 + 32);
  id v11 = objc_alloc(MEMORY[0x1E4F5DA80]);
  if (*(void *)(a1 + 40)) {
    id v12 = *(__CFString **)(a1 + 40);
  }
  else {
    id v12 = @"All Mailboxes";
  }
  id v13 = (void *)[v11 initWithMessageId:v4 mailboxId:v12 score:v5 isSalient:v6 creationDate:v9];
  [v10 addObject:v13];

  id v14 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v14;
}

- (id)saliencyForMessageId:(id)a3
{
  id v4 = a3;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke;
  v20[3] = &unk_1E65C0388;
  id v5 = v4;
  id v21 = v5;
  BOOL v6 = (void *)MEMORY[0x1CB79B4C0](v20);
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = __Block_byref_object_copy__2596;
  uint64_t v18 = __Block_byref_object_dispose__2597;
  id v19 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke_21;
  v11[3] = &unk_1E65B8828;
  id v13 = &v14;
  id v7 = v5;
  id v12 = v7;
  double v8 = (void *)MEMORY[0x1CB79B4C0](v11);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT score, mailboxId, isSalient, isGteSalient, isCounted, creationTimestamp FROM mailIntelligence_saliency WHERE messageId = :messageId" onPrep:v6 onRow:v8 onError:0];
  id v9 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v9;
}

uint64_t __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageId" toNSString:*(void *)(a1 + 32)];
}

uint64_t __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke_21(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 doubleAsNonnullNSNumberForColumnName:"score" table:"mailIntelligence_saliency"];
  BOOL v5 = [v3 getIntegerForColumnName:"isSalient" table:"mailIntelligence_saliency"] != 0;
  BOOL v6 = [v3 getIntegerForColumnName:"isGteSalient" table:"mailIntelligence_saliency"] != 0;
  BOOL v7 = [v3 getIntegerForColumnName:"isCounted" table:"mailIntelligence_saliency"] != 0;
  double v8 = [v3 nonnullNSStringForColumnName:"mailboxId" table:"mailIntelligence_saliency"];
  [v3 getDoubleForColumnName:"creationTimestamp" table:"mailIntelligence_saliency"];
  double v10 = v9;

  id v11 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v10];
  uint64_t v12 = [objc_alloc(MEMORY[0x1E4F5DA80]) initWithMessageId:*(void *)(a1 + 32) mailboxId:v8 score:v4 isSalient:v5 gteSaliency:v6 isCounted:v7 creationDate:v11];
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  id v15 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
  return *v15;
}

- (id)uniqueIdentifierForMessageId:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = __Block_byref_object_copy__3348;
  uint64_t v17 = __Block_byref_object_dispose__3349;
  id v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke;
  v11[3] = &unk_1E65C0388;
  id v5 = v4;
  id v12 = v5;
  BOOL v6 = (void *)MEMORY[0x1CB79B4C0](v11);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke_2;
  v10[3] = &unk_1E65C03F8;
  void v10[4] = &v13;
  BOOL v7 = (void *)MEMORY[0x1CB79B4C0](v10);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT uniqueIdentifier FROM mailIntelligence_spotlightMapping WHERE messageId = :messageId" onPrep:v6 onRow:v7 onError:0];
  id v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageId" toNSString:*(void *)(a1 + 32)];
}

uint64_t __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumnName:"uniqueIdentifier" table:"mailIntelligence_spotlightMapping"];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *MEMORY[0x1E4F93C10];
}

- (void)logConfirmPercentAfterContactDetailRejection
{
  [(SGSqlEntityStore *)self incStatsCounterWithKey:@"contactDetailRejections"];
  id v3 = [(SGSqlEntityStore *)self loadStatsCounterWithKey:@"contactDetailConfirmations"];
  [v3 doubleValue];
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", @"behavior.scalar.confirmPercent", @"contacts.detail");
}

- (void)logConfirmPercentAfterContactDetailConfirmation
{
  [(SGSqlEntityStore *)self incStatsCounterWithKey:@"contactDetailConfirmations"];
  double v4 = v3;
  id v6 = [(SGSqlEntityStore *)self loadStatsCounterWithKey:@"contactDetailRejections"];
  [v6 doubleValue];
  [(SGSqlEntityStore *)self _logConfirmPercentWithConfirmCount:@"behavior.scalar.confirmPercent" rejectCount:@"contacts.detail" domain:v4 suffix:v5];
}

- (void)logConfirmPercentAfterContactRejection
{
  [(SGSqlEntityStore *)self incStatsCounterWithKey:@"contactRejections"];
  id v3 = [(SGSqlEntityStore *)self loadStatsCounterWithKey:@"contactConfirmations"];
  [v3 doubleValue];
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", @"behavior.scalar.confirmPercent", @"contacts.contact");
}

- (void)logConfirmPercentAfterContactConfirmation
{
  [(SGSqlEntityStore *)self incStatsCounterWithKey:@"contactConfirmations"];
  double v4 = v3;
  id v6 = [(SGSqlEntityStore *)self loadStatsCounterWithKey:@"contactRejections"];
  [v6 doubleValue];
  [(SGSqlEntityStore *)self _logConfirmPercentWithConfirmCount:@"behavior.scalar.confirmPercent" rejectCount:@"contacts.contact" domain:v4 suffix:v5];
}

- (void)_logConfirmPercentWithConfirmCount:(double)a3 rejectCount:(double)a4 domain:(id)a5 suffix:(id)a6
{
  double v6 = a3 + a4;
  if (v6 > 15.0) {
    +[SGAggregateLogging setKeyWithDomain:a5 suffix:a6 toValue:(unint64_t)(a3 * 100.0 / v6)];
  }
}

- (double)incStatsCounterWithKey:(id)a3
{
  [(SGSqlEntityStore *)self incStatsCounterWithKey:a3 byValue:1.0];
  return result;
}

- (double)incStatsCounterWithKey:(id)a3 byValue:(double)a4
{
  id v6 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = (double *)&v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __66__SGSqlEntityStore_StatsCounters__incStatsCounterWithKey_byValue___block_invoke;
  v11[3] = &unk_1E65BECB0;
  void v11[4] = self;
  id v8 = v6;
  id v12 = v8;
  uint64_t v13 = &v15;
  double v14 = a4;
  [(SGSqliteDatabase *)db writeTransaction:v11];
  double v9 = v16[3];

  _Block_object_dispose(&v15, 8);
  return v9;
}

void __66__SGSqlEntityStore_StatsCounters__incStatsCounterWithKey_byValue___block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) loadStatsCounterWithKey:*(void *)(a1 + 40)];
  id v5 = v2;
  if (v2)
  {
    [v2 doubleValue];
    double v4 = v3 + *(double *)(a1 + 56);
  }
  else
  {
    double v4 = *(double *)(a1 + 56);
  }
  *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;
  [*(id *)(a1 + 32) storeStatsCounterWithKey:*(void *)(a1 + 40) value:*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
}

- (id)loadStatsCounterWithKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = __Block_byref_object_copy__6596;
  uint64_t v16 = __Block_byref_object_dispose__6597;
  id v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke;
  v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT value FROM statsCounters WHERE key = :key" onPrep:v10 onRow:v9 onError:0];
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

uint64_t __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:*(void *)(a1 + 32)];
}

uint64_t __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithDouble:", sqlite3_column_double(a2, 0));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (void)storeStatsCounterWithKey:(id)a3 value:(double)a4
{
  id v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __66__SGSqlEntityStore_StatsCounters__storeStatsCounterWithKey_value___block_invoke;
  v9[3] = &unk_1E65BFEB0;
  v9[4] = self;
  id v10 = v6;
  double v11 = a4;
  id v8 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
}

void __66__SGSqlEntityStore_StatsCounters__storeStatsCounterWithKey_value___block_invoke(uint64_t a1)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[1] = @"value";
  v6[0] = v1;
  v5[0] = @"key";
  uint64_t v3 = [NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v6[1] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:v5 count:2];
  [v2 insertOrReplaceIntoTable:@"statsCounters" dictionary:v4 onError:0];
}

- (void)analyzeMergeBlobs:(id)a3
{
  id v17 = self;
  uint64_t v3 = (_xpc_activity_s *)a3;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_INFO, "Starting identity blob analysis.", buf, 2u);
  }

  uint64_t v18 = +[SGContactStoreFactory contactStore];
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  id v6 = v21;
  id v7 = off_1E65B4000;
LABEL_4:
  uint64_t v8 = MEMORY[0x1CB79B230]();
  double v9 = v7[275];
  context = (void *)v8;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  id v10 = v6;
  v21[0] = __53__SGSqlEntityStore_IdentityStore__analyzeMergeBlobs___block_invoke;
  v21[1] = &unk_1E65BEF88;
  double v11 = v5;
  id v22 = v11;
  [(__objc2_class *)v9 notifyWhenFlushed:v20];
  while (1)
  {
    if (v3)
    {
      uint64_t v12 = +[SGXPCActivityManager sharedInstance];
      char v13 = [v12 shouldDefer:v3];

      if (v13) {
        break;
      }
    }
    if (objc_msgSend(MEMORY[0x1E4F93B18], "waitForSemaphore:timeoutSeconds:", v11, 0.5, v17) != 1)
    {
      if (![(SGSqlEntityStore *)v17 _analyzeMergeBlobsIncremental:v18])
      {

        id v7 = off_1E65B4000;
        id v6 = v10;
        goto LABEL_4;
      }
      uint64_t v16 = sgLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1CA650000, v16, OS_LOG_TYPE_INFO, "Blob analysis complete.", buf, 2u);
      }
      uint64_t v15 = context;
      goto LABEL_15;
    }
  }
  uint64_t v14 = sgLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CA650000, v14, OS_LOG_TYPE_INFO, "Blob analysis deferring.", buf, 2u);
  }

  uint64_t v15 = context;
  if (!xpc_activity_set_state(v3, 3))
  {
    uint64_t v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1CA650000, v16, OS_LOG_TYPE_ERROR, "Could not defer blob analysis.", buf, 2u);
    }
LABEL_15:
  }
}

intptr_t __53__SGSqlEntityStore_IdentityStore__analyzeMergeBlobs___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

- (BOOL)_analyzeMergeBlobsIncremental:(id)a3
{
  id v4 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke;
  v12[3] = &unk_1E65C0700;
  void v12[4] = self;
  id v6 = v4;
  id v13 = v6;
  uint64_t v14 = &v15;
  [(SGSqliteDatabase *)db writeTransaction:v12];
  if (*((unsigned char *)v16 + 24))
  {
    id v7 = [(SGSqlEntityStore *)self _computeBlobsRaw:0];
    [(SGSqlEntityStore *)self _writeMergeBlobSnapshotForAnalysis:v7];
  }
  BOOL v8 = [(SGSqlEntityStore *)self _isBlobAnalysisQueueEmpty];
  if (v8)
  {
    double v9 = self->_db;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_5;
    v11[3] = &unk_1E65BEF88;
    void v11[4] = self;
    [(SGSqliteDatabase *)v9 writeTransaction:v11];
  }

  _Block_object_dispose(&v15, 8);
  return v8;
}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) _popMergeBlobForAnalysis];
  if (v2)
  {
    uint64_t v21 = a1;
    id v19 = v2;
    [*(id *)(a1 + 32) makeInterdictsForBlob:v2 withContactStore:*(void *)(a1 + 40)];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v26 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          BOOL v8 = [v7 first];
          double v9 = sgMap();
          id v10 = [v9 sortedArrayUsingSelector:sel_compare_];
          double v11 = SGDelimitedStringsSerializeArray();

          uint64_t v12 = [v7 second];
          id v13 = sgMap();
          uint64_t v14 = [v13 sortedArrayUsingSelector:sel_compare_];
          uint64_t v15 = SGDelimitedStringsSerializeArray();

          uint64_t v16 = *(void **)(*(void *)(v21 + 32) + 8);
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          v22[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_4;
          v22[3] = &unk_1E65BEB88;
          id v23 = v11;
          id v24 = v15;
          id v17 = v15;
          id v18 = v11;
          [v16 prepAndRunQuery:@"INSERT INTO identityInterdictNext (a, b) VALUES (?, ?)", v22, 0, 0 onPrep onRow onError];
        }
        uint64_t v4 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v4);
    }

    uint64_t v2 = v19;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_5(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"DROP TABLE identityInterdict" onPrep:0 onRow:0 onError:0];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"CREATE TABLE identityInterdict (a TEXT NOT NULL, b TEXT NOT NULL)", 0, 0, 0 onPrep onRow onError];
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_6;
  v20[3] = &unk_1E65BFF78;
  id v5 = v2;
  id v21 = v5;
  [v4 prepAndRunSQL:@"SELECT a, b FROM identityInterdictNext", 0, v20, 0 onPrep onRow onError];
  do
  {
    do
    {
      char v6 = simplifyInterdicts(v5, v3);
      [v5 removeAllObjects];
      char v7 = simplifyInterdicts(v3, v5);
      [v3 removeAllObjects];
    }
    while ((v6 & 1) != 0);
  }
  while ((v7 & 1) != 0);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v8 = v5;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8 * v12);
        uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 8);
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 3221225472;
        v15[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_7;
        v15[3] = &unk_1E65C05C8;
        v15[4] = v13;
        [v14 prepAndRunQuery:@"INSERT INTO identityInterdict (a, b) VALUES (?, ?)", v15, 0, 0 onPrep onRow onError];
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v10);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identityInterdictNext" onPrep:0 onRow:0 onError:0];
  [*(id *)(a1 + 32) _markIdentityStoreDirty];
  [*(id *)(a1 + 32) syncNewBlobsIfChanged];
}

uint64_t __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_6(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 nonnullNSStringForColumnName:"a" table:0];
  uint64_t v5 = [v3 nonnullNSStringForColumnName:"b" table:0];

  uint64_t v6 = [v4 compare:v5];
  if (v6 == 1) {
    char v7 = v4;
  }
  else {
    char v7 = (void *)v5;
  }
  if (v6 == 1) {
    uint64_t v4 = (void *)v5;
  }
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F93BB8]) initWithFirst:v4 second:v7];
  [v8 addObject:v9];

  uint64_t v10 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v10;
}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_7(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = [*(id *)(a1 + 32) first];
  sqlite3_bind_text(a2, 1, (const char *)[v4 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  id v5 = [*(id *)(a1 + 32) second];
  sqlite3_bind_text(a2, 2, (const char *)[v5 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  id v4 = (const char *)[*(id *)(a1 + 40) UTF8String];
  return sqlite3_bind_text(a2, 2, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v5 = [v3 numericValue];

  uint64_t v6 = objc_msgSend(v4, "initWithFormat:", @"%lld", v5);
  return v6;
}

id __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v5 = [v3 numericValue];

  uint64_t v6 = objc_msgSend(v4, "initWithFormat:", @"%lld", v5);
  return v6;
}

- (BOOL)_isBlobAnalysisQueueEmpty
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __60__SGSqlEntityStore_IdentityStore___isBlobAnalysisQueueEmpty__block_invoke;
  v5[3] = &unk_1E65BEBB0;
  void v5[4] = &v6;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT 1 FROM identityBlobAnalysisJobs LIMIT 1" onPrep:0 onRow:v5 onError:0];
  char v3 = *((unsigned char *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __60__SGSqlEntityStore_IdentityStore___isBlobAnalysisQueueEmpty__block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

- (id)_popMergeBlobForAnalysis
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x3032000000;
  char v9 = __Block_byref_object_copy__9925;
  uint64_t v10 = __Block_byref_object_dispose__9926;
  id v11 = 0;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  [(SGSqliteDatabase *)db writeTransaction:v5];
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = -1;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_2;
  void v6[3] = &unk_1E65B8AB8;
  uint64_t v3 = *(void *)(a1 + 40);
  v6[4] = &v7;
  void v6[5] = v3;
  [v2 prepAndRunQuery:@"SELECT id, mergeBlob FROM identityBlobAnalysisJobs", 0, v6, 0 onPrep onRow onError];
  if (v8[3] != -1)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 8);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_3;
    v5[3] = &unk_1E65B9C48;
    void v5[4] = &v7;
    [v4 prepAndRunQuery:@"DELETE FROM identityBlobAnalysisJobs WHERE id = :blobId" onPrep:v5 onRow:0 onError:0];
  }
  _Block_object_dispose(&v7, 8);
}

uint64_t __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  id v4 = (void *)MEMORY[0x1CB79B230]();
  id v5 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v5, "initWithObjects:", v6, objc_opt_class(), 0);
  uint64_t v8 = sqlite3_column_nssecurecoding(a2, 1, v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  return 1;
}

uint64_t __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_3(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":blobId" int64:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

- (void)_writeMergeBlobSnapshotForAnalysis:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke;
  v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identityBlobAnalysisJobs" onPrep:0 onRow:0 onError:0];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)v17;
    *(void *)&long long v4 = 138412290;
    long long v13 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28DB0], "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, 0, v13);
        uint64_t v10 = v9;
        if (v9)
        {
          id v11 = *(void **)(*(void *)(a1 + 32) + 8);
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 3221225472;
          v14[2] = __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke_296;
          v14[3] = &unk_1E65C05C8;
          id v15 = v9;
          [v11 prepAndRunQuery:@"INSERT INTO identityBlobAnalysisJobs (mergeBlob) VALUES (:mergeBlob)" onPrep:v14 onRow:0 onError:0];
        }
        else
        {
          uint64_t v12 = sgLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v13;
            uint64_t v21 = v8;
            _os_log_fault_impl(&dword_1CA650000, v12, OS_LOG_TYPE_FAULT, "Failed to encode mergeBlob: %@", buf, 0xCu);
          }

          if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
            abort();
          }
        }
      }
      uint64_t v5 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v5);
  }
}

uint64_t __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke_296(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":mergeBlob" nsdata:*(void *)(a1 + 32)];
}

- (id)makeInterdictsForBlob:(id)a3 withContactStore:(id)a4
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  if (![v5 count])
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_48;
  }
  if ((unint64_t)[v5 count] >= 0x65)
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v77 = [v5 count];
      _os_log_debug_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEBUG, "Can't create interdicts for blob of size %lu; skipping.",
        buf,
        0xCu);
    }
    uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_47;
  }
  uint64_t v9 = objc_opt_new();
  uint64_t v10 = sgMap();
  db = self->_db;
  v71[0] = MEMORY[0x1E4F143A8];
  v71[1] = 3221225472;
  v71[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2;
  v71[3] = &unk_1E65C0388;
  id v12 = v10;
  id v72 = v12;
  v69[0] = MEMORY[0x1E4F143A8];
  v69[1] = 3221225472;
  v69[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_3;
  v69[3] = &unk_1E65BFF78;
  uint64_t v7 = v9;
  v70 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT recordId, fullname, phones, email, socialProfileIdentifiers FROM identityPerson WHERE recordId IN _pas_nsarray(:ids)" onPrep:v71 onRow:v69 onError:0];
  if ((unint64_t)[v7 count] >= 6)
  {
    long long v13 = sgLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = [v7 count];
      *(_DWORD *)buf = 134218240;
      uint64_t v77 = v43;
      __int16 v78 = 2048;
      uint64_t v79 = 5;
      _os_log_debug_impl(&dword_1CA650000, v13, OS_LOG_TYPE_DEBUG, "Merge group containing %lu names exceeds limit of %lu; skipping interdict construction.",
        buf,
        0x16u);
    }
    uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_46;
  }
  id v46 = v12;
  id v47 = v5;
  uint64_t v14 = *MEMORY[0x1E4F1AEE0];
  v75[0] = *MEMORY[0x1E4F1AE08];
  v75[1] = v14;
  uint64_t v15 = *MEMORY[0x1E4F1AE60];
  v75[2] = *MEMORY[0x1E4F1ADC8];
  v75[3] = v15;
  v75[4] = *MEMORY[0x1E4F1AF78];
  long long v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v75 count:5];
  long long v16 = objc_opt_new();
  v67[0] = MEMORY[0x1E4F143A8];
  v67[1] = 3221225472;
  v67[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_284;
  v67[3] = &unk_1E65B7550;
  id v48 = v16;
  id v68 = v48;
  long long v17 = (void (**)(void, void, void))MEMORY[0x1CB79B4C0](v67);
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  v45 = v7;
  long long v18 = v7;
  uint64_t v53 = [v18 countByEnumeratingWithState:&v63 objects:v74 count:16];
  v50 = v13;
  id v51 = v6;
  if (v53)
  {
    uint64_t v52 = *(void *)v64;
    uint64_t v49 = v18;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v64 != v52) {
          objc_enumerationMutation(v18);
        }
        uint64_t v55 = v19;
        uint64_t v20 = *(void *)(*((void *)&v63 + 1) + 8 * v19);
        context = (void *)MEMORY[0x1CB79B230]();
        uint64_t v21 = objc_opt_new();
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2_287;
        v61[3] = &unk_1E65BE608;
        id v22 = v21;
        id v62 = v22;
        +[SGContactsInterface enumerateContactsMatchingName:v20 withKeysToFetch:v13 usingContactStore:v6 error:0 usingBlock:v61];
        if ([v22 count] && (unint64_t)objc_msgSend(v22, "count") <= 4)
        {
          uint64_t v23 = [v18 objectForKeyedSubscript:v20];
          long long v57 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          id v24 = v23;
          uint64_t v25 = [v24 countByEnumeratingWithState:&v57 objects:v73 count:16];
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = *(void *)v58;
            do
            {
              for (uint64_t i = 0; i != v26; ++i)
              {
                if (*(void *)v58 != v27) {
                  objc_enumerationMutation(v24);
                }
                uint64_t v29 = *(void *)(*((void *)&v57 + 1) + 8 * i);
                uint64_t v30 = (void *)MEMORY[0x1CB79B230]();
                if ([v22 count] == 1)
                {
                  id v31 = [v22 objectAtIndexedSubscript:0];
                  ((void (**)(void, void *, uint64_t))v17)[2](v17, v31, v29);
                }
                else
                {
                  id v31 = [v24 objectForKeyedSubscript:v29];
                  buf[0] = 0;
                  uint64_t v32 = [(SGSqlEntityStore *)self _uniqueGoodDetailMatchFrom:v22 toDetails:v31 nonUnique:buf];
                  if (v32) {
                    ((void (**)(void, void *, uint64_t))v17)[2](v17, v32, v29);
                  }
                }
              }
              uint64_t v26 = [v24 countByEnumeratingWithState:&v57 objects:v73 count:16];
            }
            while (v26);
          }

          long long v13 = v50;
          id v6 = v51;
          long long v18 = v49;
        }

        uint64_t v19 = v55 + 1;
      }
      while (v55 + 1 != v53);
      uint64_t v53 = [v18 countByEnumeratingWithState:&v63 objects:v74 count:16];
    }
    while (v53);
  }

  uint64_t v33 = v48;
  if ((unint64_t)[v48 count] < 6)
  {
    id v35 = (void *)MEMORY[0x1CB79B230]();
    id v34 = [v48 allValues];
    uint64_t v8 = objc_opt_new();
    if ([v34 count])
    {
      unint64_t v36 = 0;
      do
      {
        id v37 = (void *)MEMORY[0x1CB79B230]();
        id v38 = [v34 objectAtIndexedSubscript:v36];
        if (v36)
        {
          for (uint64_t j = 0; j != v36; ++j)
          {
            id v40 = -[NSObject objectAtIndexedSubscript:](v34, "objectAtIndexedSubscript:", j, v45);
            id v41 = [MEMORY[0x1E4F93BB8] tupleWithFirst:v38 second:v40];
            [v8 addObject:v41];
          }
        }

        ++v36;
      }
      while (v36 < [v34 count]);
      long long v13 = v50;
      id v6 = v51;
      uint64_t v7 = v45;
      uint64_t v33 = v48;
      goto LABEL_45;
    }
  }
  else
  {
    id v34 = sgLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = [v48 count];
      *(_DWORD *)buf = 134218240;
      uint64_t v77 = v44;
      __int16 v78 = 2048;
      uint64_t v79 = 5;
      _os_log_debug_impl(&dword_1CA650000, v34, OS_LOG_TYPE_DEBUG, "Merge group mapping to %lu CNContacts exceeds limit of %lu; skipping interdict construction.",
        buf,
        0x16u);
    }
    uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
  }
  uint64_t v7 = v45;
LABEL_45:

  id v12 = v46;
  id v5 = v47;
LABEL_46:

LABEL_47:
LABEL_48:

  return v8;
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_3(uint64_t a1, void *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = (void *)MEMORY[0x1CB79B230]();
  id v5 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(v3, "getInt64ForColumnName:table:", "recordId", "identityPerson"));
  id v6 = [v3 getNSStringForColumnName:"fullname" table:"identityPerson"];
  uint64_t v7 = objc_opt_new();
  uint64_t v8 = [v3 getNSStringForColumnName:"phones" table:"identityPerson"];
  uint64_t v9 = SGDelimitedStringsDeserialize();
  [v7 setPhones:v9];

  uint64_t v10 = [v3 getNSStringForColumnName:"email" table:"identityPerson"];
  [v7 setEmail:v10];

  id v11 = [v3 getNSStringForColumnName:"socialProfileIdentifiers" table:"identityPerson"];
  id v12 = SGDelimitedStringsDeserialize();
  [v7 setSocialProfileIdentifiers:v12];

  if (v6)
  {
    long long v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = v7;
      long long v16 = v5;
    }
    else
    {
      uint64_t v19 = v5;
      v20[0] = v7;
      long long v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
      uint64_t v14 = (void *)[v17 mutableCopy];

      long long v13 = *(void **)(a1 + 32);
      uint64_t v15 = v14;
      long long v16 = v6;
    }
    [v13 setObject:v15 forKeyedSubscript:v16];
  }

  return *MEMORY[0x1E4F93C08];
}

void __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_284(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  uint64_t v7 = [v5 objectForKeyedSubscript:v10];

  if (!v7)
  {
    uint64_t v8 = objc_opt_new();
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v10];
  }
  uint64_t v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];
  [v9 addObject:v6];
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2_287(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = [a2 rowId];
  return [v2 numberWithLongLong:v3];
}

- (id)_uniqueGoodDetailMatchFrom:(id)a3 toDetails:(id)a4 nonUnique:(BOOL *)a5
{
  id v7 = a3;
  id v8 = a4;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke;
  v22[3] = &unk_1E65B7500;
  id v9 = v8;
  id v23 = v9;
  id v10 = (void *)MEMORY[0x1CB79B4C0](v22);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_4;
  v19[3] = &unk_1E65B7528;
  uint64_t v21 = a5;
  id v11 = v7;
  id v20 = v11;
  id v12 = (void (**)(void, void, void))MEMORY[0x1CB79B4C0](v19);
  long long v13 = [MEMORY[0x1E4F5DA28] map:v11 f:v10];
  *a5 = 0;
  uint64_t v14 = ((void (**)(void, void, void *))v12)[2](v12, 0, v13);
  uint64_t v15 = v14;
  if (v14)
  {
    id v16 = v14;
LABEL_5:
    long long v17 = v16;
    goto LABEL_6;
  }
  if (*a5)
  {
    *a5 = 0;
    ((void (**)(void, uint64_t, void *))v12)[2](v12, 1, v13);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  long long v17 = 0;
LABEL_6:

  return v17;
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) phones];
  if (![v4 count])
  {

    goto LABEL_12;
  }
  id v5 = [v3 phoneNumbers];
  uint64_t v6 = [v5 count];

  if (!v6)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  id v7 = (void *)MEMORY[0x1E4F5DA28];
  id v8 = [v3 phoneNumbers];
  id v9 = [v7 map:v8 f:&__block_literal_global_268];

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v10 = [*(id *)(a1 + 32) phones];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v60 objects:v67 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)v61;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v61 != v14) {
          objc_enumerationMutation(v10);
        }
        v13 += [v9 containsObject:*(void *)(*((void *)&v60 + 1) + 8 * i)];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v60 objects:v67 count:16];
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = 0;
  }

LABEL_15:
  id v16 = [*(id *)(a1 + 32) email];
  if ([v16 length])
  {
    long long v17 = [v3 emailAddresses];
    uint64_t v18 = [v17 count];

    if (!v18) {
      goto LABEL_19;
    }
    uint64_t v19 = (void *)MEMORY[0x1E4F5DA28];
    id v20 = [v3 emailAddresses];
    id v16 = [v19 map:v20 f:&__block_literal_global_271];

    uint64_t v21 = [*(id *)(a1 + 32) email];
    unsigned int v22 = [v16 containsObject:v21];

    v13 += v22;
  }

LABEL_19:
  id v23 = [*(id *)(a1 + 32) socialProfileIdentifiers];
  if ([v23 count])
  {
    id v24 = [v3 socialProfiles];
    uint64_t v25 = [v24 count];

    if (!v25) {
      goto LABEL_45;
    }
    uint64_t v45 = a1;
    id v46 = v3;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id obj = [v3 socialProfiles];
    uint64_t v26 = [obj countByEnumeratingWithState:&v56 objects:v66 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v57;
      do
      {
        for (uint64_t j = 0; j != v27; ++j)
        {
          if (*(void *)v57 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v56 + 1) + 8 * j);
          id v31 = [SGSocialProfileDetails alloc];
          uint64_t v32 = [v30 value];
          uint64_t v33 = [(SGSocialProfileDetails *)v31 initWithCNSocialProfile:v32];

          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          id v34 = [(SGSocialProfileDetails *)v33 uniqueIdentifiers];
          uint64_t v35 = [v34 countByEnumeratingWithState:&v52 objects:v65 count:16];
          if (v35)
          {
            uint64_t v36 = v35;
            uint64_t v37 = *(void *)v53;
            do
            {
              for (uint64_t k = 0; k != v36; ++k)
              {
                if (*(void *)v53 != v37) {
                  objc_enumerationMutation(v34);
                }
                [0 addObject:*(void *)(*((void *)&v52 + 1) + 8 * k)];
              }
              uint64_t v36 = [v34 countByEnumeratingWithState:&v52 objects:v65 count:16];
            }
            while (v36);
          }
        }
        uint64_t v27 = [obj countByEnumeratingWithState:&v56 objects:v66 count:16];
      }
      while (v27);
    }

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v23 = [*(id *)(v45 + 32) socialProfileIdentifiers];
    uint64_t v39 = [v23 countByEnumeratingWithState:&v48 objects:v64 count:16];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)v49;
      id v3 = v46;
      do
      {
        for (uint64_t m = 0; m != v40; ++m)
        {
          if (*(void *)v49 != v41) {
            objc_enumerationMutation(v23);
          }
          v13 += [0 containsObject:*(void *)(*((void *)&v48 + 1) + 8 * m)];
        }
        uint64_t v40 = [v23 countByEnumeratingWithState:&v48 objects:v64 count:16];
      }
      while (v40);
    }
    else
    {
      id v3 = v46;
    }
  }

LABEL_45:
  uint64_t v43 = [NSNumber numberWithUnsignedInteger:v13];

  return v43;
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if ([v5 count])
  {
    uint64_t v6 = 0;
    id v7 = 0;
    while (1)
    {
      id v8 = [v5 objectAtIndexedSubscript:v6];
      unint64_t v9 = [v8 unsignedIntegerValue];

      if (v9 > a2)
      {
        if (v7)
        {
          id v10 = 0;
          **(unsigned char **)(a1 + 40) = 1;
          goto LABEL_11;
        }
        id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v6];
      }
      if (++v6 >= (unint64_t)[v5 count]) {
        goto LABEL_9;
      }
    }
  }
  id v7 = 0;
LABEL_9:
  id v7 = v7;
  id v10 = v7;
LABEL_11:

  return v10;
}

uint64_t __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 value];
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 value];
  id v3 = [v2 stringValue];
  long long v4 = SGNormalizePhoneNumber();

  return v4;
}

- (id)unmergedCandidatesLimitedTo:(int)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = objc_opt_new();
  db = self->_db;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke;
  v43[3] = &__block_descriptor_36_e23_v16__0__sqlite3_stmt__8l;
  int v44 = a3;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke_2;
  v41[3] = &unk_1E65BEC60;
  id v7 = v5;
  id v42 = v7;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT (CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId ELSE e.id END), i.nameSketches FROM entity AS e INNER JOIN identityPerson AS i ON e.id = i.recordId LIMIT :limit" onPrep:v43 onRow:v41 onError:0];
  id v8 = objc_opt_new();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v38 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v37 + 1) + 8 * i);
        uint64_t v15 = (void *)MEMORY[0x1E4F93BB8];
        id v16 = [v9 objectForKeyedSubscript:v14];
        long long v17 = [v15 tupleWithFirst:v14 second:v16];
        [v8 addObject:v17];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v11);
  }

  uint64_t v18 = objc_opt_new();
  if ([v8 count])
  {
    unint64_t v19 = 0;
    uint64_t v36 = 1;
    do
    {
      unint64_t v34 = v19 + 1;
      if ([v8 count] > v19 + 1)
      {
        unint64_t v20 = v36;
        do
        {
          uint64_t v21 = objc_msgSend(v8, "objectAtIndexedSubscript:", v19, v34);
          unsigned int v22 = [v21 second];
          id v23 = [v8 objectAtIndexedSubscript:v20];
          id v24 = [v23 second];
          int v25 = [v22 intersectsSet:v24];

          if (v25)
          {
            uint64_t v26 = (void *)MEMORY[0x1E4F93BB8];
            uint64_t v27 = [v8 objectAtIndexedSubscript:v19];
            uint64_t v28 = [v27 first];
            uint64_t v29 = [v8 objectAtIndexedSubscript:v20];
            uint64_t v30 = [v29 first];
            id v31 = [v26 tupleWithFirst:v28 second:v30];
            [v18 addObject:v31];
          }
          ++v20;
        }
        while ([v8 count] > v20);
      }
      unint64_t v32 = objc_msgSend(v8, "count", v34);
      ++v36;
      unint64_t v19 = v35;
    }
    while (v32 > v35);
  }

  return v18;
}

uint64_t __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":limit" int64:*(int *)(a1 + 32)];
}

uint64_t __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  long long v4 = (void *)MEMORY[0x1CB79B230]();
  id v5 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  uint64_t v6 = sqlite3_column_nsstring(a2, 1);
  id v7 = SGDelimitedStringsDeserializeSet();

  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v9 = v8;
  if (v8)
  {
    [v8 unionSet:v7];
  }
  else
  {
    uint64_t v10 = (void *)[v7 mutableCopy];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v5];
  }
  return 0;
}

- (id)splitBlob:(id)a3 withInterdicts:(id)a4 edges:(id)a5 curatedRecordIds:(id)a6
{
  v113[1] = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  v76 = self;
  id v77 = a6;
  __int16 v78 = v11;
  uint64_t v13 = -[SGSqlEntityStore splitNeededFor:withInterdicts:curatedRecordIds:](self, "splitNeededFor:withInterdicts:curatedRecordIds:", v10, v11);
  uint64_t v14 = v13;
  if (v13)
  {
    id v74 = [v13 objectAtIndexedSubscript:0];
    uint64_t v68 = v14;
    id v72 = [v14 objectAtIndexedSubscript:1];
    uint64_t v105 = 0x400000000;
    v106 = (char *)malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
    if (!v106)
    {
      freeGraph((unsigned int *)&v105);
      [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1144 format];
    }
    v83 = objc_opt_new();
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    id v70 = v10;
    id obj = v10;
    uint64_t v15 = [obj countByEnumeratingWithState:&v101 objects:v112 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v102;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v102 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v101 + 1) + 8 * i);
          if (newVertex((int *)&v105, v19))
          {
            freeGraph((unsigned int *)&v105);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1149 format];
          }
          unint64_t v20 = [NSNumber numberWithUnsignedInt:(v105 - 1)];
          [v83 setObject:v20 forKeyedSubscript:v19];
        }
        uint64_t v16 = [obj countByEnumeratingWithState:&v101 objects:v112 count:16];
      }
      while (v16);
    }

    if (newVertex((int *)&v105, 0))
    {
      freeGraph((unsigned int *)&v105);
      [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1153 format];
    }
    if (newVertex((int *)&v105, 0))
    {
      freeGraph((unsigned int *)&v105);
      [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1153 format];
    }
    int v79 = v105;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    id v69 = v12;
    id v82 = v12;
    uint64_t v21 = [v82 countByEnumeratingWithState:&v97 objects:v111 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v98;
      do
      {
        for (uint64_t j = 0; j != v22; ++j)
        {
          if (*(void *)v98 != v23) {
            objc_enumerationMutation(v82);
          }
          uint64_t v25 = *(void *)(*((void *)&v97 + 1) + 8 * j);
          if ([obj containsObject:*(void *)(v25 + 8)]
            && [obj containsObject:*(void *)(v25 + 16)])
          {
            uint64_t v26 = v106;
            uint64_t v27 = [v83 objectForKeyedSubscript:*(void *)(v25 + 8)];
            uint64_t v28 = (uint64_t)&v26[24 * (int)[v27 intValue]];

            uint64_t v29 = v106;
            uint64_t v30 = [v83 objectForKeyedSubscript:*(void *)(v25 + 16)];
            uint64_t v31 = (uint64_t)&v29[24 * (int)[v30 intValue]];

            if (addEdge(v28, v31, *(double *)(v25 + 24)))
            {
              freeGraph((unsigned int *)&v105);
              [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1161 format];
            }
            if (addEdge(v31, v28, *(double *)(v25 + 24)))
            {
              freeGraph((unsigned int *)&v105);
              [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1162 format];
            }
          }
        }
        uint64_t v22 = [v82 countByEnumeratingWithState:&v97 objects:v111 count:16];
      }
      while (v22);
    }
    unsigned int v81 = v79 - 2;
    unsigned int v80 = v79 - 1;

    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    id v75 = v74;
    uint64_t v32 = [v75 countByEnumeratingWithState:&v93 objects:v110 count:16];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v94;
      do
      {
        for (uint64_t k = 0; k != v33; ++k)
        {
          if (*(void *)v94 != v34) {
            objc_enumerationMutation(v75);
          }
          uint64_t v36 = v106;
          uint64_t v37 = (uint64_t)&v106[24 * v81];
          long long v38 = [v83 objectForKeyedSubscript:*(void *)(*((void *)&v93 + 1) + 8 * k)];
          uint64_t v39 = (uint64_t)&v36[24 * (int)[v38 intValue]];

          if (addEdge(v37, v39, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1171 format];
          }
          if (addEdge(v39, v37, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1172 format];
          }
        }
        uint64_t v33 = [v75 countByEnumeratingWithState:&v93 objects:v110 count:16];
      }
      while (v33);
    }

    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v73 = v72;
    uint64_t v40 = [v73 countByEnumeratingWithState:&v89 objects:v109 count:16];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = *(void *)v90;
      do
      {
        for (uint64_t m = 0; m != v41; ++m)
        {
          if (*(void *)v90 != v42) {
            objc_enumerationMutation(v73);
          }
          int v44 = v106;
          uint64_t v45 = (uint64_t)&v106[24 * v80];
          uint64_t v46 = [v83 objectForKeyedSubscript:*(void *)(*((void *)&v89 + 1) + 8 * m)];
          uint64_t v47 = (uint64_t)&v44[24 * (int)[v46 intValue]];

          if (addEdge(v45, v47, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1177 format];
          }
          if (addEdge(v47, v45, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1178 format];
          }
        }
        uint64_t v41 = [v73 countByEnumeratingWithState:&v89 objects:v109 count:16];
      }
      while (v41);
    }

    long long v48 = (unsigned __int8 *)mincut((unsigned int *)&v105, v81, v80);
    if (v48)
    {
      long long v49 = v48;
      long long v50 = objc_opt_new();
      long long v51 = objc_opt_new();
      id v12 = v69;
      if (v81)
      {
        uint64_t v52 = 0;
        long long v53 = v49;
        do
        {
          if (*v53++) {
            long long v55 = v50;
          }
          else {
            long long v55 = v51;
          }
          [v55 addObject:*(void *)&v106[v52]];
          v52 += 24;
        }
        while (24 * v81 != v52);
      }
      free(v49);
      freeGraph((unsigned int *)&v105);
      long long v56 = objc_opt_new();
      long long v57 = [(SGSqlEntityStore *)v76 _makeBlobsFromConnectedComponents:v50 edges:v82];
      [v56 addObjectsFromArray:v57];

      long long v58 = [(SGSqlEntityStore *)v76 _makeBlobsFromConnectedComponents:v51 edges:v82];
      [v56 addObjectsFromArray:v58];

      long long v59 = objc_opt_new();
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      id v60 = v56;
      uint64_t v61 = [v60 countByEnumeratingWithState:&v84 objects:v107 count:16];
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = *(void *)v85;
        do
        {
          for (uint64_t n = 0; n != v62; ++n)
          {
            if (*(void *)v85 != v63) {
              objc_enumerationMutation(v60);
            }
            long long v65 = [(SGSqlEntityStore *)v76 splitBlob:*(void *)(*((void *)&v84 + 1) + 8 * n) withInterdicts:v78 edges:v82 curatedRecordIds:v77];
            [v59 addObjectsFromArray:v65];
          }
          uint64_t v62 = [v60 countByEnumeratingWithState:&v84 objects:v107 count:16];
        }
        while (v62);
      }

      id v10 = v70;
      uint64_t v14 = v68;
    }
    else
    {
      long long v66 = sgLogHandle();
      id v12 = v69;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1CA650000, v66, OS_LOG_TYPE_FAULT, "mincut returned NULL, will not split blob even though we want to", buf, 2u);
      }

      id v10 = v70;
      uint64_t v14 = v68;
      if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
        abort();
      }
      freeGraph((unsigned int *)&v105);
      id v108 = obj;
      long long v59 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v108 count:1];
    }
  }
  else
  {
    v113[0] = v10;
    long long v59 = [MEMORY[0x1E4F1C978] arrayWithObjects:v113 count:1];
  }

  return v59;
}

- (id)_makeBlobsFromConnectedComponents:(id)a3 edges:(id)a4
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id obj = a4;
  uint64_t v34 = 0x400000000;
  unint64_t v35 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  if (!v35)
  {
    freeGraph((unsigned int *)&v34);
    [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1100 format];
  }
  uint64_t v6 = objc_opt_new();
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v31 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        if (newVertex((int *)&v34, v11))
        {
          freeGraph((unsigned int *)&v34);
          [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1104 format];
        }
        id v12 = [NSNumber numberWithUnsignedInt:(v34 - 1)];
        [v6 setObject:v12 forKeyedSubscript:v11];
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v37 count:16];
    }
    while (v8);
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obja = obj;
  uint64_t v13 = [obja countByEnumeratingWithState:&v26 objects:v36 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v27;
    do
    {
      for (uint64_t j = 0; j != v13; ++j)
      {
        if (*(void *)v27 != v14) {
          objc_enumerationMutation(obja);
        }
        uint64_t v16 = *(void *)(*((void *)&v26 + 1) + 8 * j);
        if ([v7 containsObject:*(void *)(v16 + 8)]
          && [v7 containsObject:*(void *)(v16 + 16)])
        {
          uint64_t v17 = v35;
          uint64_t v18 = [v6 objectForKeyedSubscript:*(void *)(v16 + 8)];
          int v19 = [v18 intValue];

          unint64_t v20 = v35;
          uint64_t v21 = [v6 objectForKeyedSubscript:*(void *)(v16 + 16)];
          int v22 = [v21 intValue];

          if (addEdge((uint64_t)v17 + 24 * v19, (uint64_t)v20 + 24 * v22, 1.0))
          {
            freeGraph((unsigned int *)&v34);
            [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1112 format];
          }
        }
      }
      uint64_t v13 = [obja countByEnumeratingWithState:&v26 objects:v36 count:16];
    }
    while (v13);
  }

  findConnectedComponents();
}

void __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:");
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
    id v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
  }
}

void __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke_2(uint64_t a1, id *a2)
{
  id v3 = *a2;
  long long v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v8 = v3;
  if (!v4)
  {
    uint64_t v5 = objc_opt_new();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v3 = v8;
    long long v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  [v4 addObject:v3];
}

- (id)computeBlobs
{
  v13[2] = 0;
  v13[0] = @"computeBlobs";
  v13[1] = mach_absolute_time();
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x3032000000;
  id v10 = __Block_byref_object_copy__9925;
  uint64_t v11 = __Block_byref_object_dispose__9926;
  id v12 = 0;
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __47__SGSqlEntityStore_IdentityStore__computeBlobs__block_invoke;
  void v6[3] = &unk_1E65C0728;
  v6[4] = self;
  void v6[5] = &v7;
  [(SGSqliteDatabase *)db readTransaction:v6];
  SGRecordMeasurementState(v13);
  id v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  SGRecordMeasurementState(v13);
  return v4;
}

void __47__SGSqlEntityStore_IdentityStore__computeBlobs__block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v27 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) _computeBlobsRaw:&v27];
  id v3 = [*(id *)(a1 + 32) loadInterdicts];
  id v4 = [*(id *)(a1 + 32) curatedRecordIds];
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = v2;
  uint64_t v8 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v24;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v24 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v23 + 1) + 8 * v11);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        uint64_t v13 = [*(id *)(a1 + 32) splitBlob:v12 withInterdicts:v3 edges:v27 curatedRecordIds:v4];
        uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v28 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v20;
          do
          {
            uint64_t v17 = 0;
            do
            {
              if (*(void *)v20 != v16) {
                objc_enumerationMutation(v13);
              }
              [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:*(void *)(*((void *)&v19 + 1) + 8 * v17++)];
            }
            while (v15 != v17);
            uint64_t v15 = [v13 countByEnumeratingWithState:&v19 objects:v28 count:16];
          }
          while (v15);
        }

        ++v11;
      }
      while (v11 != v9);
      uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
    }
    while (v9);
  }
}

- (id)_computeBlobsRaw:(id *)a3
{
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke;
  v11[3] = &unk_1E65BFEB0;
  void v11[4] = self;
  id v7 = v5;
  id v12 = v7;
  uint64_t v13 = a3;
  [(SGSqliteDatabase *)db readTransaction:v11];
  uint64_t v8 = v12;
  id v9 = v7;

  return v9;
}

void __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke(uint64_t a1)
{
  v48[16] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0x400000000;
  uint64_t v40 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  if (!v40)
  {
    freeGraph((unsigned int *)&v39);
    [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1005 format];
  }
  uint64_t v2 = objc_opt_new();
  id v3 = objc_opt_new();
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_2;
  v38[3] = &unk_1E65BA178;
  id v5 = v2;
  v38[4] = v5;
  v38[6] = &v39;
  id v6 = v3;
  v38[5] = v6;
  [v4 prepAndRunQuery:@"SELECT recordId1, recordId2, strength FROM identityLink", 0, v38, 0 onPrep onRow onError];
  id v7 = *(void **)(*(void *)(a1 + 32) + 8);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_3;
  v37[3] = &unk_1E65B7338;
  id v32 = v5;
  v37[4] = v32;
  v37[5] = &v39;
  [v7 prepAndRunQuery:@"SELECT recordId FROM IdentityPerson" onPrep:0 onRow:v37 onError:0];
  id v8 = v6;
  id v9 = objc_opt_new();
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = v8;
  uint64_t v10 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v42 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v41 + 1) + 8 * i);
        uint64_t v47 = 0;
        uint64_t v46 = 0;
        uint64_t v46 = [*(id *)(v13 + 8) rowId];
        uint64_t v47 = [*(id *)(v13 + 16) rowId];
        uint64_t v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v46 length:16];
        uint64_t v15 = [v9 objectForKeyedSubscript:v14];
        uint64_t v16 = (void *)v15;
        if (v15) {
          *(double *)(v15 + 24) = *(double *)(v13 + 24) + *(double *)(v15 + 24);
        }
        else {
          [v9 setObject:v13 forKeyedSubscript:v14];
        }
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
    }
    while (v10);
  }

  uint64_t v17 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v18 = [v9 allValues];

  id v28 = (id)[v18 mutableCopy];
  long long v36 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  id v30 = v28;
  uint64_t v19 = [v30 countByEnumeratingWithState:&v33 objects:v45 count:16];
  if (v19)
  {
    uint64_t v31 = *(void *)v34;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v34 != v31) {
          objc_enumerationMutation(v30);
        }
        uint64_t v21 = *(void *)(*((void *)&v33 + 1) + 8 * j);
        long long v22 = v40;
        long long v23 = [v32 objectForKeyedSubscript:*(void *)(v21 + 8)];
        int v24 = [v23 intValue];

        long long v25 = v40;
        long long v26 = [v32 objectForKeyedSubscript:*(void *)(v21 + 16)];
        int v27 = [v26 intValue];

        if (addEdge((uint64_t)v22 + 24 * v24, (uint64_t)v25 + 24 * v27, *(double *)(v21 + 24)))
        {
          freeGraph((unsigned int *)&v39);
          [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1043 format];
        }
      }
      uint64_t v19 = [v30 countByEnumeratingWithState:&v33 objects:v45 count:16];
    }
    while (v19);
  }

  findConnectedComponents();
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  id v5 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 1));
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  uint64_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v8 = (void *)v7;
  if (v6)
  {
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (newVertex(*(int **)(a1 + 48), (uint64_t)v4))
  {
    freeGraph(*(unsigned int **)(a1 + 48));
    [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1014 format];
  }
  id v9 = [NSNumber numberWithUnsignedInt:(**(_DWORD **)(a1 + 48) - 1)];
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:v4];

  if (!v8)
  {
LABEL_7:
    if (newVertex(*(int **)(a1 + 48), (uint64_t)v5))
    {
      freeGraph(*(unsigned int **)(a1 + 48));
      [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1018 format];
    }
    uint64_t v10 = [NSNumber numberWithUnsignedInt:(**(_DWORD **)(a1 + 48) - 1)];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v5];
  }
LABEL_10:
  double v11 = sqlite3_column_double(a2, 2);
  id v12 = *(void **)(a1 + 40);
  id v13 = v4;
  id v14 = v5;
  uint64_t v15 = (double *)objc_opt_new();
  uint64_t v16 = (void *)*((void *)v15 + 1);
  *((void *)v15 + 1) = v13;
  id v17 = v13;

  uint64_t v18 = (void *)*((void *)v15 + 2);
  *((void *)v15 + 2) = v14;

  v15[3] = v11;
  [v12 addObject:v15];

  return 0;
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    if (newVertex(*(int **)(a1 + 40), (uint64_t)v3))
    {
      freeGraph(*(unsigned int **)(a1 + 40));
      [MEMORY[0x1E4F1CA00] raise:@"graph error", @"SGIStore.h, line %i", 1032 format];
    }
    id v5 = [NSNumber numberWithUnsignedInt:(**(_DWORD **)(a1 + 40) - 1)];
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v3];
  }
  return 0;
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_4(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count]) {
    [*(id *)(a1 + 32) addObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_5(uint64_t a1, void *a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:*a2];
}

- (void)_linkNamelessSocialProfilesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v42 = a4;
  id v34 = a6;
  long long v41 = a3;
  if (!a3)
  {
    uint64_t v31 = [MEMORY[0x1E4F28B00] currentHandler];
    [v31 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 933, @"Invalid parameter not satisfying: %@", @"graph" object file lineNumber description];
  }
  if (!v42)
  {
    id v32 = [MEMORY[0x1E4F28B00] currentHandler];
    [v32 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 934, @"Invalid parameter not satisfying: %@", @"nameToVertex" object file lineNumber description];
  }
  if (!a5)
  {
    long long v33 = [MEMORY[0x1E4F28B00] currentHandler];
    [v33 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 935, @"Invalid parameter not satisfying: %@", @"disjointSets" object file lineNumber description];
  }
  id v8 = objc_opt_new();
  db = self->_db;
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 3221225472;
  v65[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v65[3] = &unk_1E65BEC60;
  id v10 = v8;
  id v66 = v10;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT recordId, socialProfileIdentifiers FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(socialProfileIdentifiers) > 0" onPrep:0 onRow:v65 onError:0];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = v10;
  uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v38)
  {
    uint64_t v35 = *(void *)v62;
    uint64_t v11 = MEMORY[0x1E4F143A8];
    do
    {
      for (uint64_t i = 0; i != v38; ++i)
      {
        if (*(void *)v62 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v61 + 1) + 8 * i);
        id v14 = [obj objectForKeyedSubscript:v13];
        uint64_t v15 = [v42 objectForKeyedSubscript:v13];
        if (!v15)
        {
          long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
          [v29 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:950 description:@"Vertex not found in lookup table"];
        }
        var2 = v41->var2;
        uint64_t v17 = [v15 integerValue];
        uint64_t v57 = 0;
        long long v58 = &v57;
        uint64_t v59 = 0x2020000000;
        uint64_t v60 = 0;
        uint64_t v53 = 0;
        long long v54 = &v53;
        uint64_t v55 = 0x2020000000;
        char v56 = 1;
        uint64_t v18 = self->_db;
        v51[0] = v11;
        v51[1] = 3221225472;
        v51[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v51[3] = &unk_1E65C0388;
        id v19 = v14;
        id v52 = v19;
        v43[0] = v11;
        v43[1] = 3221225472;
        v43[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v43[3] = &unk_1E65B7470;
        id v44 = v42;
        uint64_t v45 = self;
        SEL v48 = a2;
        long long v49 = v41;
        long long v50 = a5;
        uint64_t v46 = &v57;
        uint64_t v47 = &v53;
        [(SGSqliteDatabase *)v18 prepAndRunSQL:@"SELECT recordId FROM identityPerson    WHERE fullname IS NOT NULL        AND recordId IN(           SELECT recordId from identitySocialProfileIdentifiers                WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers)       )" onPrep:v51 onRow:v43 onError:0];
        uint64_t v20 = v58[3];
        if (v20 && *((unsigned char *)v54 + 24))
        {
          uint64_t v21 = (id *)((char *)var2 + 24 * v17);
          if (addEdge((uint64_t)v21, v20, 1.0))
          {
            id v30 = [MEMORY[0x1E4F28B00] currentHandler];
            [v30 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:985 description:@"OOM while adding edge to graph"];
          }
          long long v22 = *(void **)v58[3];
          id v23 = *v21;
          id v24 = v22;
          long long v25 = objc_opt_new();
          long long v26 = (void *)v25[1];
          v25[1] = v23;
          id v27 = v23;

          id v28 = (void *)v25[2];
          v25[2] = v24;

          v25[3] = 0x3FF0000000000000;
          [v34 addObject:v25];
        }
        _Block_object_dispose(&v53, 8);
        _Block_object_dispose(&v57, 8);
      }
      uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }
    while (v38);
  }
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  id v5 = sqlite3_column_nsstring(a2, 1);
  id v6 = SGDelimitedStringsDeserialize();

  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
  return 0;
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":socialProfileIdentifiers" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumn:", 0));
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"SGSqlEntityStore+Identity.m" lineNumber:969 description:@"Vertex not found in lookup table"];
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
  unint64_t v6 = v5 + 24 * [v4 integerValue];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v8 = *(void *)(v7 + 24);
  if (!v8)
  {
    *(void *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(void *)(a1 + 80), v8, v6))
  {
LABEL_7:
    id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
    goto LABEL_8;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
LABEL_8:

  return *v9;
}

- (void)_linkNamelessPhonesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v42 = a4;
  id v34 = a6;
  long long v41 = a3;
  if (!a3)
  {
    uint64_t v31 = [MEMORY[0x1E4F28B00] currentHandler];
    [v31 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 865, @"Invalid parameter not satisfying: %@", @"graph" object file lineNumber description];
  }
  if (!v42)
  {
    id v32 = [MEMORY[0x1E4F28B00] currentHandler];
    [v32 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 866, @"Invalid parameter not satisfying: %@", @"nameToVertex" object file lineNumber description];
  }
  if (!a5)
  {
    long long v33 = [MEMORY[0x1E4F28B00] currentHandler];
    [v33 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 867, @"Invalid parameter not satisfying: %@", @"disjointSets" object file lineNumber description];
  }
  unint64_t v8 = objc_opt_new();
  db = self->_db;
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 3221225472;
  v65[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v65[3] = &unk_1E65BEC60;
  id v10 = v8;
  id v66 = v10;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT recordId, phones FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(phones) > 0" onPrep:0 onRow:v65 onError:0];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = v10;
  uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v38)
  {
    uint64_t v35 = *(void *)v62;
    uint64_t v11 = MEMORY[0x1E4F143A8];
    do
    {
      for (uint64_t i = 0; i != v38; ++i)
      {
        if (*(void *)v62 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v61 + 1) + 8 * i);
        id v14 = [obj objectForKeyedSubscript:v13];
        uint64_t v15 = [v42 objectForKeyedSubscript:v13];
        if (!v15)
        {
          long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
          [v29 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:881 description:@"Vertex not found in lookup table"];
        }
        var2 = v41->var2;
        uint64_t v17 = [v15 integerValue];
        uint64_t v57 = 0;
        long long v58 = &v57;
        uint64_t v59 = 0x2020000000;
        uint64_t v60 = 0;
        uint64_t v53 = 0;
        long long v54 = &v53;
        uint64_t v55 = 0x2020000000;
        char v56 = 1;
        uint64_t v18 = self->_db;
        v51[0] = v11;
        v51[1] = 3221225472;
        v51[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v51[3] = &unk_1E65C0388;
        id v19 = v14;
        id v52 = v19;
        v43[0] = v11;
        v43[1] = 3221225472;
        v43[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v43[3] = &unk_1E65B7470;
        id v44 = v42;
        uint64_t v45 = self;
        SEL v48 = a2;
        long long v49 = v41;
        long long v50 = a5;
        uint64_t v46 = &v57;
        uint64_t v47 = &v53;
        [(SGSqliteDatabase *)v18 prepAndRunSQL:@"SELECT recordId FROM identityPerson    WHERE fullname IS NOT NULL        AND recordId IN(           SELECT recordId from identityPhones                WHERE phone IN _pas_nsarray(:phones)       )" onPrep:v51 onRow:v43 onError:0];
        uint64_t v20 = v58[3];
        if (v20 && *((unsigned char *)v54 + 24))
        {
          uint64_t v21 = (id *)((char *)var2 + 24 * v17);
          if (addEdge((uint64_t)v21, v20, 1.0))
          {
            id v30 = [MEMORY[0x1E4F28B00] currentHandler];
            [v30 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:916 description:@"OOM while adding edge to graph"];
          }
          long long v22 = *(void **)v58[3];
          id v23 = *v21;
          id v24 = v22;
          long long v25 = objc_opt_new();
          long long v26 = (void *)v25[1];
          v25[1] = v23;
          id v27 = v23;

          id v28 = (void *)v25[2];
          v25[2] = v24;

          v25[3] = 0x3FF0000000000000;
          [v34 addObject:v25];
        }
        _Block_object_dispose(&v53, 8);
        _Block_object_dispose(&v57, 8);
      }
      uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }
    while (v38);
  }
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  uint64_t v5 = sqlite3_column_nsstring(a2, 1);
  unint64_t v6 = SGDelimitedStringsDeserialize();

  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
  return 0;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":phones" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumn:", 0));
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"SGSqlEntityStore+Identity.m" lineNumber:900 description:@"Vertex not found in lookup table"];
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
  unint64_t v6 = v5 + 24 * [v4 integerValue];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v8 = *(void *)(v7 + 24);
  if (!v8)
  {
    *(void *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(void *)(a1 + 80), v8, v6))
  {
LABEL_7:
    id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
    goto LABEL_8;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
LABEL_8:

  return *v9;
}

- (void)_linkNamelessEmailsIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v41 = a4;
  id v33 = a6;
  uint64_t v40 = a3;
  if (!a3)
  {
    id v30 = [MEMORY[0x1E4F28B00] currentHandler];
    [v30 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 800, @"Invalid parameter not satisfying: %@", @"graph" object file lineNumber description];
  }
  if (!v41)
  {
    uint64_t v31 = [MEMORY[0x1E4F28B00] currentHandler];
    [v31 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 801, @"Invalid parameter not satisfying: %@", @"nameToVertex" object file lineNumber description];
  }
  if (!a5)
  {
    id v32 = [MEMORY[0x1E4F28B00] currentHandler];
    [v32 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 802, @"Invalid parameter not satisfying: %@", @"disjointSets" object file lineNumber description];
  }
  unint64_t v8 = objc_opt_new();
  db = self->_db;
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 3221225472;
  v63[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v63[3] = &unk_1E65BFF78;
  id v10 = v8;
  id v64 = v10;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT recordId, email FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(email) > 0" onPrep:0 onRow:v63 onError:0];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = v10;
  uint64_t v37 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v37)
  {
    uint64_t v34 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v37; ++i)
      {
        if (*(void *)v60 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v59 + 1) + 8 * i);
        uint64_t v13 = [obj objectForKeyedSubscript:v12];
        id v14 = [v41 objectForKeyedSubscript:v13];
        if (!v14)
        {
          id v28 = [MEMORY[0x1E4F28B00] currentHandler];
          [v28 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:816 description:@"Vertex not found in lookup table"];
        }
        var2 = v40->var2;
        uint64_t v16 = [v14 integerValue];
        uint64_t v55 = 0;
        char v56 = &v55;
        uint64_t v57 = 0x2020000000;
        uint64_t v58 = 0;
        uint64_t v51 = 0;
        id v52 = &v51;
        uint64_t v53 = 0x2020000000;
        char v54 = 1;
        uint64_t v17 = self->_db;
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v50[3] = &unk_1E65C0388;
        v50[4] = v12;
        v42[0] = MEMORY[0x1E4F143A8];
        v42[1] = 3221225472;
        v42[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v42[3] = &unk_1E65B7470;
        id v43 = v41;
        id v44 = self;
        SEL v47 = a2;
        SEL v48 = v40;
        long long v49 = a5;
        uint64_t v45 = &v55;
        uint64_t v46 = &v51;
        [(SGSqliteDatabase *)v17 prepAndRunSQL:@"SELECT recordId FROM identityPerson WHERE email = :email AND fullname IS NOT NULL" onPrep:v50 onRow:v42 onError:0];
        uint64_t v18 = v56[3];
        id v19 = (void *)v13;
        if (v18 && *((unsigned char *)v52 + 24))
        {
          uint64_t v20 = (id *)((char *)var2 + 24 * v16);
          if (addEdge((uint64_t)v20, v18, 1.0))
          {
            long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
            [v29 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:847 description:@"OOM while adding edge to graph"];
          }
          uint64_t v21 = *(void **)v56[3];
          id v22 = *v20;
          id v23 = v21;
          id v24 = objc_opt_new();
          long long v25 = (void *)v24[1];
          v24[1] = v22;
          id v26 = v22;

          id v27 = (void *)v24[2];
          v24[2] = v23;

          v24[3] = 0x3FF0000000000000;
          [v33 addObject:v24];
        }
        _Block_object_dispose(&v51, 8);
        _Block_object_dispose(&v55, 8);
      }
      uint64_t v37 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v37);
  }
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"email" table:0];
  uint64_t v5 = (void *)MEMORY[0x1E4F5DB20];
  uint64_t v6 = [v3 getInt64ForColumnName:"recordId" table:0];

  uint64_t v7 = [v5 recordIdForContactWithRowId:v6];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v4];

  unint64_t v8 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v8;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":email" toNonnullNSString:*(void *)(a1 + 32)];
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "recordId", 0));
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"SGSqlEntityStore+Identity.m" lineNumber:831 description:@"Vertex not found in lookup table"];
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
  unint64_t v6 = v5 + 24 * [v4 integerValue];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v8 = *(void *)(v7 + 24);
  if (!v8)
  {
    *(void *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(void *)(a1 + 80), v8, v6))
  {
LABEL_7:
    id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
    goto LABEL_8;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
LABEL_8:

  return *v9;
}

- (id)curatedRecordIds
{
  id v3 = objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __51__SGSqlEntityStore_IdentityStore__curatedRecordIds__block_invoke;
  v7[3] = &unk_1E65BEC60;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT recordId FROM identityPerson WHERE curated" onPrep:0 onRow:v7 onError:0];

  return v5;
}

uint64_t __51__SGSqlEntityStore_IdentityStore__curatedRecordIds__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  [v2 addObject:v3];

  return 0;
}

- (id)getAllLinks
{
  id v3 = objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __46__SGSqlEntityStore_IdentityStore__getAllLinks__block_invoke;
  v7[3] = &unk_1E65BEC60;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT recordId1, recordId2, type, strength FROM identityLink" onPrep:0 onRow:v7 onError:0];

  return v5;
}

uint64_t __46__SGSqlEntityStore_IdentityStore__getAllLinks__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  id v4 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v10[0] = v4;
  id v5 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 1));
  v10[1] = v5;
  unint64_t v6 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 2));
  v10[2] = v6;
  uint64_t v7 = objc_msgSend(NSNumber, "numberWithDouble:", sqlite3_column_double(a2, 3));
  v10[3] = v7;
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:4];
  [v3 addObject:v8];

  return 0;
}

- (void)deleteByRecordId:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke;
  v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke(uint64_t a1)
{
  uint64_t v35 = 0;
  long long v36 = &v35;
  uint64_t v37 = 0x2020000000;
  char v38 = 0;
  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x3032000000;
  id v32 = __Block_byref_object_copy__9925;
  id v33 = __Block_byref_object_dispose__9926;
  id v34 = 0;
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x3032000000;
  id v26 = __Block_byref_object_copy__9925;
  id v27 = __Block_byref_object_dispose__9926;
  id v28 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_190;
  v21[3] = &unk_1E65C0388;
  id v22 = *(id *)(a1 + 40);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_2;
  v20[3] = &unk_1E65B7448;
  void v20[4] = &v29;
  v20[5] = &v23;
  v20[6] = &v35;
  [v2 prepAndRunSQL:@"SELECT phones, socialProfileIdentifiers FROM identityPerson WHERE recordId = :recordId", v21, v20, 0 onPrep onRow onError];
  if ([(id)v30[5] count])
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_3;
    v17[3] = &unk_1E65B9838;
    id v19 = &v29;
    id v18 = *(id *)(a1 + 40);
    [v3 prepAndRunSQL:@"DELETE FROM identityPhones WHERE phone IN _pas_nsarray(:phones) AND recordId=:recordId" onPrep:v17 onRow:0 onError:0];
  }
  if ([(id)v24[5] count])
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 8);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_4;
    v14[3] = &unk_1E65B9838;
    uint64_t v16 = &v23;
    id v15 = *(id *)(a1 + 40);
    [v4 prepAndRunSQL:@"DELETE FROM identitySocialProfileIdentifiers WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers) AND recordId=:recordId" onPrep:v14 onRow:0 onError:0];
  }
  id v5 = *(void **)(*(void *)(a1 + 32) + 8);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_5;
  v12[3] = &unk_1E65C05C8;
  id v13 = *(id *)(a1 + 40);
  [v5 prepAndRunQuery:@"DELETE FROM identityPerson WHERE recordId = ?" onPrep:v12 onRow:0 onError:0];
  id v6 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_6;
  id v10 = &unk_1E65C05C8;
  id v11 = *(id *)(a1 + 40);
  [v6 prepAndRunQuery:@"DELETE FROM identityLink WHERE recordId1 = ?1 OR recordId2 = ?1" onPrep:&v7 onRow:0 onError:0];
  if (*((unsigned char *)v36 + 24)) {
    objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty", v7, v8, v9, v10);
  }

  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v29, 8);

  _Block_object_dispose(&v35, 8);
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_190(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(v2, "rowId"));
}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_2(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 getNSStringForColumnName:"phones" table:"identityPerson"];
  uint64_t v5 = SGDelimitedStringsDeserialize();
  uint64_t v6 = *(void *)(a1[4] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = [v3 getNSStringForColumnName:"socialProfileIdentifiers" table:"identityPerson"];

  uint64_t v9 = SGDelimitedStringsDeserialize();
  uint64_t v10 = *(void *)(a1[5] + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return *MEMORY[0x1E4F93C08];
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v4 = a2;
  [v4 bindNamedParam:":phones" toNSArray:v3];
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v4 = a2;
  [v4 bindNamedParam:":socialProfileIdentifiers" toNSArray:v3];
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = [*(id *)(a1 + 32) rowId];
  return sqlite3_bind_int64(a2, 1, v3);
}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_6(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = [*(id *)(a1 + 32) rowId];
  return sqlite3_bind_int64(a2, 1, v3);
}

- (void)link:(id)a3 to:(id)a4 type:(unsigned int)a5 strength:(double)a6
{
  id v10 = a3;
  id v11 = a4;
  if (([v10 isEqualToRecordId:v11] & 1) == 0)
  {
    uint64_t v12 = [v10 rowId];
    uint64_t v13 = [v11 rowId];
    if (v12 >= v13) {
      id v14 = v11;
    }
    else {
      id v14 = v10;
    }
    if (v12 >= v13) {
      id v15 = v10;
    }
    else {
      id v15 = v11;
    }
    db = self->_db;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke;
    v17[3] = &unk_1E65B7420;
    void v17[4] = self;
    id v10 = v15;
    id v18 = v10;
    id v11 = v14;
    id v19 = v11;
    unsigned int v21 = a5;
    double v20 = a6;
    [(SGSqliteDatabase *)db writeTransaction:v17];
  }
}

void __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke(uint64_t a1)
{
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 1;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_2;
  void v13[3] = &unk_1E65B73D0;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  int v16 = *(_DWORD *)(a1 + 64);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_3;
  v12[3] = &unk_1E65BEBB0;
  void v12[4] = &v17;
  [v2 prepAndRunQuery:@"SELECT 1 FROM identityLink WHERE recordId1=? AND recordId2=? AND type=?" onPrep:v13 onRow:v12 onError:0];
  sqlite3_int64 v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = MEMORY[0x1E4F143A8];
  uint64_t v5 = 3221225472;
  uint64_t v6 = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_4;
  uint64_t v7 = &unk_1E65B73F8;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  int v11 = *(_DWORD *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 56);
  [v3 prepAndRunQuery:@"INSERT OR IGNORE INTO identityLink (recordId1, recordId2, type, strength) VALUES (?,?,?,?)", &v4, 0, 0 onPrep onRow onError];
  if (*((unsigned char *)v18 + 24)) {
    objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty", v4, v5, v6, v7, v8);
  }

  _Block_object_dispose(&v17, 8);
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, [*(id *)(a1 + 32) rowId]);
  sqlite3_bind_int64(a2, 2, [*(id *)(a1 + 40) rowId]);
  int v4 = *(_DWORD *)(a1 + 48);
  return sqlite3_bind_int(a2, 3, v4);
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_3(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, [*(id *)(a1 + 32) rowId]);
  sqlite3_bind_int64(a2, 2, [*(id *)(a1 + 40) rowId]);
  sqlite3_bind_int(a2, 3, *(_DWORD *)(a1 + 56));
  double v4 = *(double *)(a1 + 48);
  return sqlite3_bind_double(a2, 4, v4);
}

- (void)_joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = v11;
  if (v9)
  {
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v25 = [MEMORY[0x1E4F28B00] currentHandler];
    [v25 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 640, @"Invalid parameter not satisfying: %@", @"socialProfiles" object file lineNumber description];

    if (v12) {
      goto LABEL_3;
    }
  }
  id v26 = [MEMORY[0x1E4F28B00] currentHandler];
  [v26 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 641, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];

LABEL_3:
  if (![v9 count])
  {
    id v27 = [MEMORY[0x1E4F28B00] currentHandler];
    [v27 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:642 description:@"Expected nonzero number of socialProfiles"];
  }
  uint64_t v13 = objc_opt_new();
  if (v10) {
    id v14 = @"fullname=:fullname";
  }
  else {
    id v14 = @"(surname = '' OR surname IS NULL) AND fullname IS NULL";
  }
  id v15 = (void *)[[NSString alloc] initWithFormat:@"SELECT recordId FROM identityPerson   WHERE %@ AND recordId IN(      SELECT recordId from identitySocialProfileIdentifiers           WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers)  )   LIMIT :limit", v14];
  db = self->_db;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke;
  v34[3] = &unk_1E65BFF28;
  id v17 = v10;
  id v35 = v17;
  id v18 = v9;
  id v36 = v18;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_3;
  v32[3] = &unk_1E65BFF78;
  id v19 = v13;
  id v33 = v19;
  [(SGSqliteDatabase *)db prepAndRunSQL:v15 onPrep:v34 onRow:v32 onError:0];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v20 = v19;
  uint64_t v21 = [v20 countByEnumeratingWithState:&v28 objects:v37 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v29;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(v20);
        }
        [(SGSqlEntityStore *)self link:v12 to:*(void *)(*((void *)&v28 + 1) + 8 * v24++) type:3 strength:1.0];
      }
      while (v22 != v24);
      uint64_t v22 = [v20 countByEnumeratingWithState:&v28 objects:v37 count:16];
    }
    while (v22);
  }
}

void __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "bindNamedParam:toNSString:", ":fullname");
  }
  sqlite3_int64 v3 = objc_msgSend(*(id *)(a1 + 40), "_pas_mappedArrayWithTransform:", &__block_literal_global_179);
  [v4 bindNamedParam:":socialProfileIdentifiers" toNSArray:v3];
  [v4 bindNamedParam:":limit" toInteger:10];
}

uint64_t __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getInt64ForColumnName:"recordId" table:"identityPerson"];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v3];
  [v4 addObject:v5];

  return *MEMORY[0x1E4F93C08];
}

id __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 value];
  uint64_t v3 = SGNormalizeSocialProfileIdentifier(v2);
  id v4 = SGDelimitedStringsSerialize();

  return v4;
}

- (void)_joinIncompleteIdentityPhonesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = v11;
  if (v9)
  {
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v25 = [MEMORY[0x1E4F28B00] currentHandler];
    [v25 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 598, @"Invalid parameter not satisfying: %@", @"phones" object file lineNumber description];

    if (v12) {
      goto LABEL_3;
    }
  }
  id v26 = [MEMORY[0x1E4F28B00] currentHandler];
  [v26 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 599, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];

LABEL_3:
  if (![v9 count])
  {
    id v27 = [MEMORY[0x1E4F28B00] currentHandler];
    [v27 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Identity.m" lineNumber:600 description:@"Expected nonzero number of phones"];
  }
  uint64_t v13 = objc_opt_new();
  if (v10) {
    id v14 = @"fullname=:fullname";
  }
  else {
    id v14 = @"(surname = '' OR surname IS NULL) AND fullname IS NULL";
  }
  id v15 = (void *)[[NSString alloc] initWithFormat:@"SELECT recordId FROM identityPerson   WHERE %@ AND recordId IN(      SELECT recordId from identityPhones           WHERE phone IN _pas_nsarray(:phones)  )   LIMIT :limit", v14];
  db = self->_db;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke;
  v34[3] = &unk_1E65BFF28;
  id v17 = v10;
  id v35 = v17;
  id v18 = v9;
  id v36 = v18;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_3;
  v32[3] = &unk_1E65BFF78;
  id v19 = v13;
  id v33 = v19;
  [(SGSqliteDatabase *)db prepAndRunSQL:v15 onPrep:v34 onRow:v32 onError:0];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v20 = v19;
  uint64_t v21 = [v20 countByEnumeratingWithState:&v28 objects:v37 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v29;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(v20);
        }
        [(SGSqlEntityStore *)self link:v12 to:*(void *)(*((void *)&v28 + 1) + 8 * v24++) type:1 strength:1.0];
      }
      while (v22 != v24);
      uint64_t v22 = [v20 countByEnumeratingWithState:&v28 objects:v37 count:16];
    }
    while (v22);
  }
}

void __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "bindNamedParam:toNSString:", ":fullname");
  }
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 40), "_pas_mappedArrayWithTransform:", &__block_literal_global_166_10049);
  [v4 bindNamedParam:":phones" toNSArray:v3];
  [v4 bindNamedParam:":limit" toInteger:10];
}

uint64_t __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getInt64ForColumnName:"recordId" table:"identityPerson"];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v3];
  [v4 addObject:v5];

  return *MEMORY[0x1E4F93C08];
}

id __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 value];
  uint64_t v3 = SGNormalizePhoneNumber();

  return v3;
}

- (void)_joinIncompleteIdentityEmailWithOthersOfItsIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = v11;
  if (v9)
  {
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    id v26 = [MEMORY[0x1E4F28B00] currentHandler];
    [v26 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 567, @"Invalid parameter not satisfying: %@", @"email" object file lineNumber description];

    if (v12) {
      goto LABEL_3;
    }
  }
  id v27 = [MEMORY[0x1E4F28B00] currentHandler];
  [v27 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 568, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];

LABEL_3:
  uint64_t v13 = objc_opt_new();
  id v14 = [NSString alloc];
  if (v10) {
    id v15 = @"SELECT recordId FROM identityPerson WHERE email=? AND fullname=? LIMIT %d";
  }
  else {
    id v15 = @"SELECT recordId FROM identityPerson WHERE email=? AND fullname IS NULL LIMIT %d";
  }
  int v16 = objc_msgSend(v14, "initWithFormat:", v15, 10);
  db = self->_db;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke;
  v34[3] = &unk_1E65BEB88;
  id v18 = v9;
  id v35 = v18;
  id v19 = v10;
  id v36 = v19;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke_2;
  v32[3] = &unk_1E65BEC60;
  id v20 = v13;
  id v33 = v20;
  [(SGSqliteDatabase *)db prepAndRunQuery:v16 onPrep:v34 onRow:v32 onError:0];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v21 = v20;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v28 objects:v37 count:16];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)v29;
    do
    {
      uint64_t v25 = 0;
      do
      {
        if (*(void *)v29 != v24) {
          objc_enumerationMutation(v21);
        }
        [(SGSqlEntityStore *)self link:v12 to:*(void *)(*((void *)&v28 + 1) + 8 * v25++) type:2 strength:1.0];
      }
      while (v23 != v25);
      uint64_t v23 = [v21 countByEnumeratingWithState:&v28 objects:v37 count:16];
    }
    while (v23);
  }
}

void *__96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  double result = *(void **)(a1 + 40);
  if (result)
  {
    uint64_t v5 = (const char *)[result UTF8String];
    return (void *)sqlite3_bind_text(a2, 2, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  [v2 addObject:v3];

  return 0;
}

- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8 isSent:(BOOL)a9
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = (void *)MEMORY[0x1CB79B230]();
  if (![v18 length]
    || !+[SGInhumans isInhumanEmailAddress:v18])
  {
    if ([v14 length]) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = [v18 length] != 0;
    }
    long long v95 = v19;
    if ([v14 length]) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = [v16 count] != 0;
    }
    id v108 = self;
    if ([v14 length])
    {
      BOOL v23 = 0;
      if (!v21) {
        goto LABEL_13;
      }
    }
    else
    {
      BOOL v23 = [v17 count] != 0;
      if (!v21)
      {
LABEL_13:
        if (v22) {
          [(SGSqlEntityStore *)v108 _joinIncompleteIdentityPhonesWithOthersOfTheirIlk:v16 name:0 recordId:v15];
        }
        if (v23) {
          [(SGSqlEntityStore *)v108 _joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:v17 name:0 recordId:v15];
        }
        v128[0] = MEMORY[0x1E4F143A8];
        v128[1] = 3221225472;
        v128[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke;
        v128[3] = &unk_1E65B7360;
        id v25 = v16;
        id v129 = v25;
        id v98 = v17;
        id v130 = v98;
        v131 = v108;
        id v101 = v18;
        id v132 = v101;
        id v100 = v15;
        id v133 = v100;
        BOOL v134 = a8;
        BOOL v135 = a9;
        uint64_t v94 = MEMORY[0x1CB79B4C0](v128);
        if ([v14 length])
        {
          if (!+[SGInhumans isInhumanName:v14])
          {
            id v26 = +[SGIdentityName nameWithString:v14];
            id v27 = [v26 surname];
            long long v28 = [v26 middlename];
            id v18 = v101;
            if ([v27 length])
            {
              v106 = SGNamesAsciify(v27);

              id v86 = v16;
              id v87 = v15;
              long long v84 = v26;
              id v85 = v17;
              if (v28)
              {
                long long v29 = SGNamesAsciify(v28);
              }
              else
              {
                long long v29 = 0;
              }
              long long v31 = objc_opt_new();
              id v32 = objc_opt_new();
              id v33 = objc_opt_new();
              id v34 = objc_opt_new();
              id v35 = objc_opt_new();
              id v36 = objc_opt_new();
              db = v108->_db;
              v124[0] = MEMORY[0x1E4F143A8];
              v124[1] = 3221225472;
              v124[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_2;
              v124[3] = &unk_1E65B9998;
              id v90 = v29;
              id v125 = v90;
              id v89 = v106;
              id v126 = v89;
              BOOL v127 = a9;
              v117[0] = MEMORY[0x1E4F143A8];
              v117[1] = 3221225472;
              v117[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_3;
              v117[3] = &unk_1E65B7388;
              id v103 = v31;
              id v118 = v103;
              id v105 = v32;
              id v119 = v105;
              id v104 = v33;
              id v120 = v104;
              id v93 = v34;
              id v121 = v93;
              id v92 = v35;
              id v122 = v92;
              id v91 = v36;
              id v123 = v91;
              [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT fullname, recordId, nameSketches, phones, socialProfileIdentifiers, email FROM identityPerson WHERE (surname IN _pas_nsarray(:middleNameAndSurname) OR middlename = :surname) AND isSent = :isSent LIMIT :limit" onPrep:v124 onRow:v117 onError:0];
              id v38 = objc_alloc(MEMORY[0x1E4F1CAD0]);
              uint64_t v39 = +[SGNames sketchesForName:v14];
              v107 = (void *)[v38 initWithArray:v39];

              uint64_t v40 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v25, "count"));
              long long v113 = 0u;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              id v41 = v25;
              uint64_t v42 = [v41 countByEnumeratingWithState:&v113 objects:v137 count:16];
              if (v42)
              {
                uint64_t v43 = v42;
                uint64_t v44 = *(void *)v114;
                do
                {
                  for (uint64_t i = 0; i != v43; ++i)
                  {
                    if (*(void *)v114 != v44) {
                      objc_enumerationMutation(v41);
                    }
                    uint64_t v46 = [*(id *)(*((void *)&v113 + 1) + 8 * i) value];
                    SEL v47 = SGNormalizePhoneNumber();
                    [v40 addObject:v47];
                  }
                  uint64_t v43 = [v41 countByEnumeratingWithState:&v113 objects:v137 count:16];
                }
                while (v43);
              }

              SEL v48 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v98, "count"));
              long long v109 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              id v49 = v98;
              uint64_t v50 = [v49 countByEnumeratingWithState:&v109 objects:v136 count:16];
              uint64_t v51 = (uint64_t)v101;
              if (v50)
              {
                uint64_t v52 = v50;
                uint64_t v53 = *(void *)v110;
                do
                {
                  for (uint64_t j = 0; j != v52; ++j)
                  {
                    if (*(void *)v110 != v53) {
                      objc_enumerationMutation(v49);
                    }
                    uint64_t v55 = [*(id *)(*((void *)&v109 + 1) + 8 * j) value];
                    char v56 = SGNormalizeSocialProfileIdentifier(v55);
                    [v48 addObject:v56];
                  }
                  uint64_t v52 = [v49 countByEnumeratingWithState:&v109 objects:v136 count:16];
                }
                while (v52);
              }

              uint64_t v57 = v103;
              if (!v101)
              {
                id v58 = v14;
                long long v59 = [(SGSqlEntityStore *)v108 loadEntityByRecordId:v100];
                long long v60 = [v59 duplicateKey];
                uint64_t v61 = [v60 entityType];

                if (v61 == 4)
                {
                  long long v62 = [v59 duplicateKey];
                  long long v63 = [v62 identityKey];

                  if ([v63 hasEmailAddress])
                  {
                    id v64 = [v59 duplicateKey];
                    long long v65 = [v64 identityKey];
                    uint64_t v51 = [v65 emailAddress];
                  }
                  else
                  {
                    uint64_t v51 = 0;
                  }
                  id v14 = v58;
                }
                else
                {
                  uint64_t v51 = 0;
                  id v14 = v58;
                }
              }
              long long v102 = (void *)v51;
              id v88 = v14;
              long long v96 = SGNormalizeName((uint64_t)v14);
              if ([v103 count])
              {
                unint64_t v68 = 0;
                int v99 = 0;
                int v69 = 0;
                int v70 = 0;
                int v71 = 0;
                do
                {
                  id v72 = [v57 objectAtIndexedSubscript:v68];
                  id v73 = [v105 objectAtIndexedSubscript:v68];
                  if (v71 <= 9)
                  {
                    +[SGNames nameSimilarity:v96 and:v72];
                    if (v74 > 4.0)
                    {
                      -[SGSqlEntityStore link:to:type:strength:](v108, "link:to:type:strength:", v100, v73, 0);
                      ++v71;
                    }
                  }
                  id v75 = [v104 objectAtIndexedSubscript:v68];
                  int v76 = [v107 intersectsSet:v75];

                  if (v76)
                  {
                    if (v70 <= 9)
                    {
                      id v77 = [v93 objectAtIndexedSubscript:v68];
                      int v78 = [v40 intersectsSet:v77];

                      if (v78)
                      {
                        [(SGSqlEntityStore *)v108 link:v100 to:v73 type:1 strength:2.0];
                        ++v70;
                      }
                    }
                    if (v69 <= 9)
                    {
                      if (v102)
                      {
                        int v79 = [v91 objectAtIndexedSubscript:v68];
                        int v80 = [v102 isEqualToString:v79];

                        if (v80)
                        {
                          [(SGSqlEntityStore *)v108 link:v100 to:v73 type:2 strength:4.0];
                          ++v69;
                        }
                      }
                    }
                    if (v99 <= 9)
                    {
                      unsigned int v81 = [v92 objectAtIndexedSubscript:v68];
                      int v82 = [v48 intersectsSet:v81];

                      if (v82)
                      {
                        [(SGSqlEntityStore *)v108 link:v100 to:v73 type:3 strength:4.0];
                        ++v99;
                      }
                    }
                  }
                  uint64_t v57 = v103;

                  ++v68;
                }
                while ([v103 count] > v68);
              }
              id v18 = v102;
              if (writeIdentity(v108->_db, v89, v90, v96, v107, v40, v48, v102, v100, a8, a9)) {
                [(SGSqlEntityStore *)v108 _markIdentityStoreDirty];
              }

              BOOL v20 = 1;
              id v15 = v87;
              id v14 = v88;
              id v17 = v85;
              id v16 = v86;
              long long v30 = (void *)v94;
              id v19 = v95;
              id v26 = v84;
              goto LABEL_85;
            }
            id v89 = v27;
            id v90 = v28;
            if ([v101 length] || objc_msgSend(v25, "count") || objc_msgSend(v98, "count"))
            {
              if (v21)
              {
                long long v30 = (void *)v94;
                (*(void (**)(uint64_t, void))(v94 + 16))(v94, 0);
LABEL_59:
                BOOL v20 = 1;
                id v19 = v95;
LABEL_85:

                goto LABEL_86;
              }
              uint64_t v66 = [v26 firstname];

              if (v66)
              {
                v67 = SGNormalizeName((uint64_t)v14);
                if ([v101 length]) {
                  [(SGSqlEntityStore *)v108 _joinIncompleteIdentityEmailWithOthersOfItsIlk:v101 name:v67 recordId:v100];
                }
                long long v30 = (void *)v94;
                if ([v25 count]) {
                  [(SGSqlEntityStore *)v108 _joinIncompleteIdentityPhonesWithOthersOfTheirIlk:v25 name:v67 recordId:v100];
                }
                if ([v98 count]) {
                  [(SGSqlEntityStore *)v108 _joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:v98 name:v67 recordId:v100];
                }
                (*(void (**)(uint64_t, void *))(v94 + 16))(v94, v67);

                goto LABEL_59;
              }
            }
            BOOL v20 = 0;
            long long v30 = (void *)v94;
            id v19 = v95;
            goto LABEL_85;
          }
        }
        else if (v21 || v22 || v23)
        {
          long long v30 = (void *)v94;
          (*(void (**)(uint64_t, void))(v94 + 16))(v94, 0);
          BOOL v20 = 1;
          id v18 = v101;
          id v19 = v95;
LABEL_86:

          goto LABEL_87;
        }
        BOOL v20 = 0;
        id v18 = v101;
        long long v30 = (void *)v94;
        id v19 = v95;
        goto LABEL_86;
      }
    }
    [(SGSqlEntityStore *)v108 _joinIncompleteIdentityEmailWithOthersOfItsIlk:v18 name:0 recordId:v15];
    uint64_t v24 = +[SGNames nameFromEmail:v18];

    id v14 = (id)v24;
    goto LABEL_13;
  }
  BOOL v20 = 0;
LABEL_87:

  return v20;
}

void __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v25;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v24 + 1) + 8 * v9) value];
        id v11 = SGNormalizePhoneNumber();
        [v4 addObject:v11];

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v7);
  }

  uint64_t v12 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v21;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v21 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = [*(id *)(*((void *)&v20 + 1) + 8 * v17) value];
        id v19 = SGNormalizeSocialProfileIdentifier(v18);
        [v12 addObject:v19];

        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v15);
  }

  if (writeIdentity(*(void **)(*(void *)(a1 + 48) + 8), 0, 0, v3, 0, v4, v12, *(void **)(a1 + 56), *(void **)(a1 + 64), *(_WORD *)(a1 + 72), HIBYTE(*(_WORD *)(a1 + 72))))[*(id *)(a1 + 48) _markIdentityStoreDirty]; {
}
  }

void __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = v4;
    id v5 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v6 = &v10;
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v5 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v6 = &v9;
    uint64_t v7 = 1;
  }
  uint64_t v8 = objc_msgSend(v5, "arrayWithObjects:count:", v6, v7, v9, v10, v11, v12);
  [v3 bindNamedParam:":middleNameAndSurname" toNSArray:v8];

  [v3 bindNamedParam:":surname" toNonnullNSString:*(void *)(a1 + 40)];
  [v3 bindNamedParam:":isSent" toInteger:*(unsigned __int8 *)(a1 + 48)];
  [v3 bindNamedParam:":limit" toInteger:100];
}

uint64_t __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getNSStringForColumnName:"fullname" table:0];
  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(v3, "getInt64ForColumnName:table:", "recordId", 0));
  [v5 addObject:v6];

  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = [v3 nonnullNSStringForColumnName:"nameSketches" table:0];
  uint64_t v9 = SGDelimitedStringsDeserializeSet();
  [v7 addObject:v9];

  uint64_t v10 = *(void **)(a1 + 56);
  uint64_t v11 = [v3 nonnullNSStringForColumnName:"phones" table:0];
  uint64_t v12 = SGDelimitedStringsDeserializeSet();
  [v10 addObject:v12];

  id v13 = *(void **)(a1 + 64);
  uint64_t v14 = [v3 nonnullNSStringForColumnName:"socialProfileIdentifiers" table:0];
  uint64_t v15 = SGDelimitedStringsDeserializeSet();
  [v13 addObject:v15];

  uint64_t v16 = *(void **)(a1 + 72);
  uint64_t v17 = [v3 nonnullNSStringForColumnName:"email" table:0];

  [v16 addObject:v17];
  id v18 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v18;
}

- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8
{
  LOBYTE(v9) = 0;
  return [(SGSqlEntityStore *)self registerAndLinkIdentity:a3 recordId:a4 phones:a5 socialProfiles:a6 email:a7 curated:a8 isSent:v9];
}

- (BOOL)rebuildIdentityTables
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 1;
  v7[2] = 0;
  v7[0] = @"rebuildIdentityTables";
  v7[1] = mach_absolute_time();
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke;
  void v6[3] = &unk_1E65BF380;
  void v6[5] = &v8;
  void v6[6] = a2;
  v6[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v6];
  SGRecordMeasurementState(v7);
  LODWORD(a2) = *((unsigned __int8 *)v9 + 24);
  SGRecordMeasurementState(v7);
  _Block_object_dispose(&v8, 8);
  return a2 != 0;
}

void __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identityPerson" onPrep:0 onRow:0 onError:0];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identityLink" onPrep:0 onRow:0 onError:0];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identityPhones" onPrep:0 onRow:0 onError:0];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM identitySocialProfileIdentifiers" onPrep:0 onRow:0 onError:0];
  uint64_t v2 = [*(id *)(a1 + 32) selectEntityQuery:@"WHERE e.entityType = :pseudo OR e.entityType = :unrec"];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_3;
  void v7[3] = &unk_1E65B7338;
  uint64_t v5 = *(void *)(a1 + 48);
  void v7[4] = v3;
  void v7[5] = v5;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_4;
  void v6[3] = &unk_1E65BE468;
  v6[4] = *(void *)(a1 + 40);
  [v4 prepAndRunQuery:v2 onPrep:&__block_literal_global_109 onRow:v7 onError:v6];
}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_3(uint64_t a1, uint64_t a2)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v5 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  uint64_t v6 = [v5 duplicateKey];
  uint64_t v7 = [v6 entityType];

  if (v7 == 12)
  {
    uint64_t v10 = [v5 duplicateKey];
    char v11 = [v10 identityKey];

    if ([v11 hasPhone])
    {
      uint64_t v12 = [v11 phone];
      id v13 = [[SGLabeledValue alloc] initWithLabel:&stru_1F24EEF20 value:v12];
      v31[0] = v13;
      long long v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:1];
    }
    else
    {
      long long v29 = 0;
    }
    if ([v11 hasEmailAddress])
    {
      id v18 = [v11 emailAddress];
    }
    else
    {
      id v18 = 0;
    }
    if ([v11 hasSocialProfile])
    {
      id v19 = [v11 socialProfile];
      long long v20 = [[SGLabeledValue alloc] initWithLabel:&stru_1F24EEF20 value:v19];
      uint64_t v30 = v20;
      long long v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v30 count:1];
    }
    else
    {
      long long v21 = 0;
    }
    long long v22 = *(void **)(a1 + 32);
    long long v23 = [v5 title];
    long long v24 = [v5 recordId];
    long long v25 = [v5 tags];
    long long v26 = [MEMORY[0x1E4F5D9F0] isSent];
    LOBYTE(v28) = [v25 containsObject:v26];
    [v22 registerAndLinkIdentity:v23 recordId:v24 phones:v29 socialProfiles:v21 email:v18 curated:0 isSent:v28];

    goto LABEL_15;
  }
  if (v7 != 4)
  {
    char v11 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v16 = a1 + 32;
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(v16 + 8);
    uint64_t v17 = [v5 duplicateKey];
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", v15, v14, @"SGSqlEntityStore+Identity.m", 298, @"Unexpected entity type: %lld", objc_msgSend(v17, "entityType"));

LABEL_15:
    goto LABEL_16;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = [v5 recordId];
  [v8 processPseudoContactEntity:v5 recordId:v9];

LABEL_16:
  return 0;
}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = [v3 description];
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Sqlite error while rebuilding identity tables: %@", (uint8_t *)&v7, 0xCu);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;

  return 1;
}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
  return +[SGSqliteDatabase bindParam:a2 name:":unrec" int64:12];
}

- (BOOL)processContactEnrichment:(id)a3 recordId:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (!v7)
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 247, @"Invalid parameter not satisfying: %@", @"entity" object file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Identity.m", 248, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];

    goto LABEL_3;
  }
  if (!v8) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v10 = [v7 duplicateKey];
  [v10 entityType];
  int IsContact = SGEntityTypeIsContact();

  BOOL v12 = IsContact
     && ([v7 isInhuman] & 1) == 0
     && [(SGSqlEntityStore *)self processPseudoContactEntity:v7 recordId:v9];

  return v12;
}

- (BOOL)processPseudoContactEntity:(id)a3 recordId:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  long long v26 = [(SGSqlEntityStore *)self loadAllContactDetailsForRecordId:v7];
  id v8 = +[SGDeduper splitContactDetailsByType:](SGDeduper, "splitContactDetailsByType:");
  uint64_t v9 = (void *)MEMORY[0x1E4F5DA28];
  uint64_t v10 = [v8 objectForKey:&unk_1F25358C8];
  long long v27 = [v9 map:v10 f:&__block_literal_global_65];

  char v11 = (void *)MEMORY[0x1E4F5DA28];
  BOOL v12 = [v8 objectForKey:&unk_1F25358E0];
  id v13 = [v11 map:v12 f:&__block_literal_global_70];

  uint64_t v14 = (void *)MEMORY[0x1E4F5DA28];
  uint64_t v15 = [v8 objectForKey:&unk_1F25358F8];
  uint64_t v16 = [v14 map:v15 f:&__block_literal_global_75];

  uint64_t v28 = v6;
  uint64_t v17 = [v6 title];
  uint64_t v18 = [v13 count];
  if (v18)
  {
    long long v25 = [v13 objectAtIndexedSubscript:0];
    id v19 = [v25 value];
  }
  else
  {
    id v19 = 0;
  }
  long long v20 = [v28 tags];
  long long v21 = [MEMORY[0x1E4F5D9F0] isSent];
  LOBYTE(v24) = [v20 containsObject:v21];
  BOOL v22 = [(SGSqlEntityStore *)self registerAndLinkIdentity:v17 recordId:v7 phones:v27 socialProfiles:v16 email:v19 curated:0 isSent:v24];

  if (v18)
  {
  }
  return v22;
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke_73(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 label];
  uint64_t v4 = [v2 value];

  SGNormalizeSocialProfile(v4);
  objc_claimAutoreleasedReturnValue();
  id v5 = v3;
  id v6 = [[SGLabeledValue alloc] initWithLabel:v5 value:v4];

  return v6;
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke_68(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 label];
  uint64_t v4 = [v2 value];

  id v5 = v3;
  id v6 = [[SGLabeledValue alloc] initWithLabel:v5 value:v4];

  return v6;
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 label];
  uint64_t v4 = [v2 value];

  id v5 = v3;
  id v6 = [[SGLabeledValue alloc] initWithLabel:v5 value:v4];

  return v6;
}

- (id)splitNeededFor:(id)a3 withInterdicts:(id)a4 curatedRecordIds:(id)a5
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  if ((unint64_t)[v7 count] >= 2 && (unint64_t)objc_msgSend(v7, "count") <= 0x64)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v30 = v8;
    id v11 = v8;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v35 objects:v41 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v36 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          uint64_t v17 = [v16 first];
          if ([v7 intersectsSet:v17])
          {
            uint64_t v18 = [v16 second];
            char v19 = [v7 intersectsSet:v18];

            if (v19)
            {
              id v25 = (id)[v7 mutableCopy];
              long long v26 = [v16 first];
              [v25 intersectSet:v26];

              long long v27 = (void *)[v7 mutableCopy];
              uint64_t v28 = [v16 second];
              [v27 intersectSet:v28];

              v40[0] = v25;
              v40[1] = v27;
              uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:2];

              goto LABEL_26;
            }
          }
          else
          {
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v35 objects:v41 count:16];
      }
      while (v13);
    }

    id v11 = (id)objc_opt_new();
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v25 = v7;
    uint64_t v10 = (void *)[v25 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v10)
    {
      uint64_t v20 = *(void *)v32;
      while (2)
      {
        for (uint64_t j = 0; j != v10; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v32 != v20) {
            objc_enumerationMutation(v25);
          }
          uint64_t v22 = *(void *)(*((void *)&v31 + 1) + 8 * (void)j);
          if ([v9 containsObject:v22])
          {
            long long v23 = (void *)MEMORY[0x1CB79B230]();
            uint64_t v24 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", v22, 0);
            [v11 addObject:v24];

            if ([v11 count] == 2)
            {
              id v11 = v11;
              uint64_t v10 = v11;
              goto LABEL_26;
            }
          }
        }
        uint64_t v10 = (void *)[v25 countByEnumeratingWithState:&v31 objects:v39 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_26:

    id v8 = v30;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

- (id)loadInterdicts
{
  id v3 = objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke;
  void v7[3] = &unk_1E65BEC60;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT a, b FROM identityInterdict" onPrep:0 onRow:v7 onError:0];

  return v5;
}

uint64_t __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = objc_opt_new();
  id v5 = objc_opt_new();
  id v6 = sqlite3_column_nsstring(a2, 0);
  uint64_t v15 = v4;
  id v7 = v4;
  SGDelimitedStringsDeserializeWithBlock();

  id v8 = sqlite3_column_nsstring(a2, 1);
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = v5;
  id v9 = v5;
  SGDelimitedStringsDeserializeWithBlock();

  uint64_t v10 = *(void **)(a1 + 32);
  id v11 = objc_msgSend(MEMORY[0x1E4F93BB8], "tupleWithFirst:second:", v7, v9, v13, 3221225472, __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_3, &unk_1E65B8A90);
  [v10 addObject:v11];

  return 0;
}

void __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(a2, "longLongValue"));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 addObject:v3];
}

void __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(a2, "longLongValue"));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 addObject:v3];
}

- (void)addInterdictFrom:(id)a3 with:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v6 intersectsSet:v7]) {
    [MEMORY[0x1E4F1CA00] raise:@"SGIStore error", @"Can not add interdict between non-disjoint sets %@ and %@", v6, v7 format];
  }
  id v8 = sgMap();
  id v9 = SGDelimitedStringsSerializeArray();

  uint64_t v10 = sgMap();
  id v11 = SGDelimitedStringsSerializeArray();

  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_3;
  v15[3] = &unk_1E65C0688;
  v15[4] = self;
  id v16 = v9;
  id v17 = v11;
  id v13 = v11;
  id v14 = v9;
  [(SGSqliteDatabase *)db writeTransaction:v15];
}

void __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_3(id *a1)
{
  id v2 = (void *)*((void *)a1[4] + 1);
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 3221225472;
  id v5 = __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_4;
  id v6 = &unk_1E65BEB88;
  id v7 = a1[5];
  id v8 = a1[6];
  [v2 prepAndRunQuery:@"INSERT INTO identityInterdict (a, b) VALUES (?, ?)", &v3, 0, 0 onPrep onRow onError];
  objc_msgSend(a1[4], "_markIdentityStoreDirty", v3, v4, v5, v6);
}

uint64_t __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = (const char *)[*(id *)(a1 + 40) UTF8String];
  return sqlite3_bind_text(a2, 2, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v5 = [v3 rowId];

  id v6 = objc_msgSend(v4, "initWithFormat:", @"%lld", v5);
  return v6;
}

id __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v5 = [v3 rowId];

  id v6 = objc_msgSend(v4, "initWithFormat:", @"%lld", v5);
  return v6;
}

- (void)forceBlobSync
{
  id v3 = [(SGSqlEntityStore *)self computeBlobs];
  [(SGSqlEntityStore *)self writeIdentityBlobs:v3 forceRewrite:1];
}

- (BOOL)syncNewBlobsIfChanged
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __56__SGSqlEntityStore_IdentityStore__syncNewBlobsIfChanged__block_invoke;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  [(SGSqliteDatabase *)db writeTransaction:v5];
  char v3 = *((unsigned char *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __56__SGSqlEntityStore_IdentityStore__syncNewBlobsIfChanged__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) getNewBlobsIfChanged];
  if (v2)
  {
    [*(id *)(a1 + 32) writeIdentityBlobs:v2 forceRewrite:0];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return MEMORY[0x1F41817F8]();
}

- (id)getNewBlobsIfChanged
{
  if ([(SGSqlEntityStore *)self _isIdentityStoreDirty])
  {
    char v3 = [(SGSqlEntityStore *)self computeBlobs];
    [(SGSqlEntityStore *)self _markIdentityStoreClean];
  }
  else
  {
    char v3 = 0;
  }
  return v3;
}

- (id)batch:(id)a3
{
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  return [(SGSqlEntityStore *)self getNewBlobsIfChanged];
}

- (void)_markIdentityStoreClean
{
}

- (void)_markIdentityStoreDirty
{
}

- (BOOL)_isIdentityStoreDirty
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&self->_identityStoreDirty);
  return v2 & 1;
}

- (id)reimportRequestDBStats
{
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"reimportRequests"])
  {
    char v3 = objc_opt_new();
    uint64_t v40 = 0;
    id v41 = &v40;
    uint64_t v42 = 0x2020000000;
    int v43 = 0;
    uint64_t v36 = 0;
    long long v37 = &v36;
    uint64_t v38 = 0x2020000000;
    int v39 = 0;
    uint64_t v32 = 0;
    long long v33 = &v32;
    uint64_t v34 = 0x2020000000;
    int v35 = 0;
    uint64_t v28 = 0;
    long long v29 = (double *)&v28;
    uint64_t v30 = 0x2020000000;
    uint64_t v31 = 0x7FEFFFFFFFFFFFFFLL;
    uint64_t v24 = 0;
    id v25 = (double *)&v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0x7FEFFFFFFFFFFFFFLL;
    db = self->_db;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke;
    v23[3] = &unk_1E65B8170;
    void v23[4] = &v40;
    v23[5] = &v28;
    void v23[6] = &v24;
    v23[7] = &v36;
    v23[8] = &v32;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT creationTimestamp, queryTimestamp, executionTimestamp FROM reimportRequests" onPrep:0 onRow:v23 onError:&__block_literal_global_120];
    uint64_t v5 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v41 + 6)];
    [v3 setObject:v5 forKeyedSubscript:@"reimportRequests_total"];

    uint64_t v6 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v37 + 6)];
    [v3 setObject:v6 forKeyedSubscript:@"reimportRequests_unqueried"];

    id v7 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v33 + 6)];
    [v3 setObject:v7 forKeyedSubscript:@"reimportRequests_unexecuted"];

    uint64_t v8 = [NSNumber numberWithDouble:v29[3]];
    [v3 setObject:v8 forKeyedSubscript:@"reimportRequests_oldest"];

    char v9 = [NSNumber numberWithDouble:v25[3]];
    [v3 setObject:v9 forKeyedSubscript:@"reimportRequests_oldestOpen"];

    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2020000000;
    int v22 = 0;
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x2020000000;
    int v18 = 0;
    uint64_t v10 = self->_db;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_139;
    v14[3] = &unk_1E65B8AB8;
    void v14[4] = &v19;
    void v14[5] = &v15;
    [(SGSqliteDatabase *)v10 prepAndRunQuery:@"SELECT seenByReceiverTimestamp FROM reimportItems" onPrep:0 onRow:v14 onError:&__block_literal_global_142_14183];
    id v11 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v20 + 6)];
    [v3 setObject:v11 forKeyedSubscript:@"reimportItems_total"];

    uint64_t v12 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v16 + 6)];
    [v3 setObject:v12 forKeyedSubscript:@"reimportItems_unseen"];

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v24, 8);
    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v32, 8);
    _Block_object_dispose(&v36, 8);
    _Block_object_dispose(&v40, 8);
  }
  else
  {
    char v3 = (void *)MEMORY[0x1E4F1CC08];
  }
  return v3;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke(void *a1, sqlite3_stmt *a2)
{
  ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  double v4 = sqlite3_column_double(a2, 0);
  uint64_t v5 = *(void *)(a1[5] + 8);
  if (*(double *)(v5 + 24) > v4) {
    *(double *)(v5 + 24) = v4;
  }
  double v6 = sqlite3_column_double(a2, 1);
  double v7 = sqlite3_column_double(a2, 2);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    uint64_t v8 = *(void *)(a1[6] + 8);
    if (*(double *)(v8 + 24) > v4) {
      *(double *)(v8 + 24) = v4;
    }
    if (v6 == 0.0)
    {
      char v9 = a1 + 7;
LABEL_11:
      ++*(_DWORD *)(*(void *)(*v9 + 8) + 24);
      return 0;
    }
    if (v7 == 0.0)
    {
      char v9 = a1 + 8;
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_139(uint64_t a1, sqlite3_stmt *a2)
{
  if (sqlite3_column_double(a2, 0) == 0.0) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return 0;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_2_140(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  char v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "error during reimportRequestDBStats query of reimportItems: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  char v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "error during reimportRequestDBStats query of reimportRequests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (void)_deleteOrphanedItems
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM reimportItems WHERE reimportRequestId NOT IN (SELECT id FROM reimportRequests)" onPrep:0 onRow:0 onError:&__block_literal_global_115_14212];
}

uint64_t __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  char v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "failed to delete orphaned reimport items: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (void)deleteCompletedReimportRequests
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM reimportRequests WHERE executionTimestamp IS NOT NULL AND id NOT IN(    SELECT DISTINCT reimportRequestId FROM reimportItems     WHERE seenByReceiverTimestamp IS NULL)" onPrep:0 onRow:0 onError:&__block_literal_global_110];
  id v2 = *(void **)(a1 + 32);
  return [v2 _deleteOrphanedItems];
}

uint64_t __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  char v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "failed to delete completed reimport requests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (void)deleteAllReimportRequestsOlderThanDate:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke;
  void v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_2;
  v8[3] = &unk_1E65C05C8;
  id v9 = *(id *)(a1 + 40);
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 3221225472;
  int v5 = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_3;
  id v6 = &unk_1E65C0660;
  id v7 = *(id *)(a1 + 40);
  [v2 prepAndRunQuery:@"DELETE FROM reimportRequests WHERE creationTimestamp < :date" onPrep:v8 onRow:0 onError:&v3];
  objc_msgSend(*(id *)(a1 + 32), "_deleteOrphanedItems", v3, v4, v5, v6);
}

uint64_t __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_2(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) timeIntervalSince1970];
  return +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":date");
}

uint64_t __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to delete reimport requests older than: %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (BOOL)reimportRequestsContainBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (reimportRequestsContainBundleIdentifier_uniqueIdentifier__onceToken != -1) {
    dispatch_once(&reimportRequestsContainBundleIdentifier_uniqueIdentifier__onceToken, &__block_literal_global_86);
  }
  [(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock lock];
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  char v8 = [(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache containsObject:v6];
  char v9 = v8 ^ 1;
  if (v7) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    *((unsigned char *)v27 + 24) = 1;
    goto LABEL_29;
  }
  if ([(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache containsObject:v6]) {
    goto LABEL_29;
  }
  if (!v7)
  {
    db = self->_db;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_5;
    v20[3] = &unk_1E65C05C8;
    id v12 = v6;
    id v21 = v12;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_6;
    v19[3] = &unk_1E65BEBB0;
    void v19[4] = &v26;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT 1 FROM reimportItems WHERE bundleId = :bid" onPrep:v20 onRow:v19 onError:&__block_literal_global_101];
    if (*((unsigned char *)v27 + 24)) {
      id v13 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
    }
    else {
      id v13 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache;
    }
    [(id)*v13 addObject:v12];
    id v10 = v21;
    goto LABEL_23;
  }
  id v10 = (void *)[[NSString alloc] initWithFormat:@"%@:%@", v6, v7];
  if ([(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache containsObject:v10])
  {
    *((unsigned char *)v27 + 24) = 1;
LABEL_16:

    goto LABEL_29;
  }
  if ([(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache containsObject:v10]) {
    goto LABEL_16;
  }
  id v14 = self->_db;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v23[3] = &unk_1E65BEB88;
  id v15 = v6;
  id v24 = v15;
  id v25 = v7;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_3;
  v22[3] = &unk_1E65BEBB0;
  void v22[4] = &v26;
  [(SGSqliteDatabase *)v14 prepAndRunQuery:@"SELECT 1 FROM reimportItems WHERE bundleId = :bid AND uniqueId = :uid" onPrep:v23 onRow:v22 onError:&__block_literal_global_96];
  if (!*((unsigned char *)v27 + 24))
  {
    id v16 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache;
    id v15 = v10;
    goto LABEL_21;
  }
  [(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache addObject:v10];
  if ((v8 & 1) == 0)
  {
    id v16 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
LABEL_21:
    [(id)*v16 addObject:v15];
  }

LABEL_23:
  if (*((unsigned char *)v27 + 24)
    && (unint64_t)[(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache count] >= 0x1A)
  {
    objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "removeObjectsInRange:", 0, objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "count") - 25);
  }
  if (!*((unsigned char *)v27 + 24)
    && (unint64_t)[(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache count] >= 0x1A)
  {
    objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "removeObjectsInRange:", 0, objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "count") - 25);
  }
LABEL_29:
  [(id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock unlock];
  char v17 = *((unsigned char *)v27 + 24);
  _Block_object_dispose(&v26, 8);

  return v17;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":uid" nsstring:v4];
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_5(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_6(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_7()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_4()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock;
  reimportRequestsContainBundleIdentifier_uniqueIdentifier__locuint64_t k = v0;

  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:25];
  id v3 = (void *)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
  reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache = v2;

  reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:25];
  return MEMORY[0x1F41817F8]();
}

- (id)loadUnseenReimportItemsForRequest:(unint64_t)a3
{
  int v5 = objc_opt_new();
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke;
  v12[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v12[4] = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_2;
  v10[3] = &unk_1E65BEC60;
  id v7 = v5;
  id v11 = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_3;
  v9[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  v9[4] = a3;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT bundleId, uniqueId FROM reimportItems WHERE reimportRequestId = :id AND seenByReceiverTimestamp IS NULL" onPrep:v12 onRow:v10 onError:v9];

  return v7;
}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":id" int64:*(void *)(a1 + 32)];
}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_column_nsstring(a2, 0);
  uint64_t v5 = sqlite3_column_nsstring(a2, 1);
  id v6 = (void *)v5;
  if (v4 && v5)
  {
    id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];

    if (!v7)
    {
      char v8 = objc_opt_new();
      [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v4];
    }
    char v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
    [v9 addObject:v6];
  }
  return 0;
}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to load unseen reimport items for request: %llu: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (id)_loadReimportRequestsWithWhereClause:(id)a3
{
  id v4 = a3;
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  int v7 = (void *)[[NSString alloc] initWithFormat:@"SELECT id, plugin, personHandle, startDateTimestamp, endDateTimestamp FROM reimportRequests WHERE %@", v4];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke;
  v10[3] = &unk_1E65BEC60;
  id v8 = v5;
  id v11 = v8;
  [(SGSqliteDatabase *)db prepAndRunQuery:v7 onPrep:0 onRow:v10 onError:&__block_literal_global_80];

  return v8;
}

uint64_t __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4 = sqlite3_column_int64(a2, 0);
  uint64_t v5 = sqlite3_column_nsstring(a2, 1);
  uint64_t v6 = sqlite3_column_nsstring(a2, 2);
  double v7 = sqlite3_column_double(a2, 3);
  if (v7 == 0.0) {
    id v8 = 0;
  }
  else {
    id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:v7];
  }
  double v9 = sqlite3_column_double(a2, 4);
  if (v9 == 0.0) {
    id v10 = 0;
  }
  else {
    id v10 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:v9];
  }
  id v11 = +[FIAPHistoricalDataRequest historicalDataRequestWithPersonHandle:v6 startDate:v8 endDate:v10];
  [v11 setRequestId:v4];
  [v11 setPluginIdentifier:v5];
  [*(id *)(a1 + 32) addObject:v11];

  return 0;
}

uint64_t __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "failed to load unqueried reimport requests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)loadAllReimportRequests
{
  return [(SGSqlEntityStore *)self _loadReimportRequestsWithWhereClause:@" 1 "];
}

- (id)loadUnexecutedReimportRequests
{
  return [(SGSqlEntityStore *)self _loadReimportRequestsWithWhereClause:@"queryTimestamp IS NOT NULL AND executionTimestamp IS NULL"];
}

- (id)loadUnqueriedReimportRequests
{
  return [(SGSqlEntityStore *)self _loadReimportRequestsWithWhereClause:@"queryTimestamp IS NULL"];
}

- (void)updateReimportItemUniqueIdForBundleId:(id)a3 oldValue:(id)a4 newValue:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke;
  v15[3] = &unk_1E65C0638;
  v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  [(SGSqliteDatabase *)db writeTransaction:v15];
}

void __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_2;
  void v6[3] = &unk_1E65B8148;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_3;
  v3[3] = &unk_1E65B8120;
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 prepAndRunQuery:@"UPDATE reimportItems SET uniqueId = :newValue WHERE bundleId = :bundleId AND uniqueId = :oldValue" onPrep:v6 onRow:0 onError:v3];
}

uint64_t __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_2(void *a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":bundleId" nsstring:a1[4]];
  +[SGSqliteDatabase bindParam:a2 name:":oldValue" nsstring:a1[5]];
  uint64_t v4 = a1[6];
  return +[SGSqliteDatabase bindParam:a2 name:":newValue" nsstring:v4];
}

uint64_t __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to update reimport uniqueId item from %@ to %@: %@", (uint8_t *)&v8, 0x20u);
  }

  return 1;
}

- (void)markReimportItemAsSeenByReceiverWithBundleId:(id)a3 uniqueId:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke;
  v11[3] = &unk_1E65C0688;
  void v11[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v11];
}

void __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_2;
  void v6[3] = &unk_1E65BEB88;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_3;
  v3[3] = &unk_1E65B8120;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 prepAndRunQuery:@"UPDATE reimportItems SET seenByReceiverTimestamp = :time WHERE bundleId = :bundleId AND uniqueId = :uniqueId" onPrep:v6 onRow:0 onError:v3];
}

uint64_t __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v4 = objc_opt_new();
  [v4 timeIntervalSince1970];
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  +[SGSqliteDatabase bindParam:a2 name:":bundleId" nsstring:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":uniqueId" nsstring:v5];
}

uint64_t __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport item %@/%@ as seen: %@", (uint8_t *)&v8, 0x20u);
  }

  return 1;
}

- (void)markReimportItemsAsSeenByReceiverWithBundleId:(id)a3 items:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke;
  v11[3] = &unk_1E65C0688;
  void v11[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v11];
}

void __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_2;
  void v6[3] = &unk_1E65BFF28;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_4;
  v3[3] = &unk_1E65B8120;
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  [v2 prepAndRunSQL:@"UPDATE reimportItems SET seenByReceiverTimestamp = :time WHERE bundleId = :bundleId AND uniqueId IN _pas_nsarray(:uids)" onPrep:v6 onRow:0 onError:v3];
}

void __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  [v4 timeIntervalSince1970];
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":time");

  [v3 bindNamedParam:":bundleId" toNSString:*(void *)(a1 + 32)];
  objc_msgSend(*(id *)(a1 + 40), "_pas_proxyArrayWithMapping:", &__block_literal_global_14272);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindNamedParam:":uids" toNSArray:v5];
}

uint64_t __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = [*(id *)(a1 + 32) count];
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 134218498;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to mark %tu reimport items for %@ as seen: %@", (uint8_t *)&v8, 0x20u);
  }

  return *MEMORY[0x1E4F93C10];
}

uint64_t __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 uniqueIdentifier];
}

- (void)markReimportRequestAsExecutedWithRequestId:(unint64_t)a3
{
  db = self->_db;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke;
  v4[3] = &unk_1E65BF9C0;
  v4[4] = self;
  void v4[5] = a3;
  [(SGSqliteDatabase *)db writeTransaction:v4];
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_2;
  v4[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  uint64_t v5 = *(void *)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_3;
  v3[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  void v3[4] = v5;
  return [v1 prepAndRunQuery:@"UPDATE reimportRequests SET executionTimestamp = :time WHERE id = :id" onPrep:v4 onRow:0 onError:v3];
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v4 = objc_opt_new();
  [v4 timeIntervalSince1970];
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  uint64_t v5 = *(void *)(a1 + 32);
  return +[SGSqliteDatabase bindParam:a2 name:":id" int64:v5];
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport request %llu as executed: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (void)storeReimportItems:(id)a3 requestId:(unint64_t)a4
{
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke;
  v9[3] = &unk_1E65BF9C0;
  v9[4] = self;
  void v9[5] = a4;
  id v7 = a3;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_31;
  v8[3] = &unk_1E65B80D8;
  void v8[4] = self;
  v8[5] = a4;
  [v7 enumerateKeysAndObjectsUsingBlock:v8];
}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2;
  v4[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  uint64_t v5 = *(void *)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3;
  v3[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  void v3[4] = v5;
  return [v1 prepAndRunQuery:@"UPDATE reimportRequests SET queryTimestamp = :time WHERE id = :id" onPrep:v4 onRow:0 onError:v3];
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_31(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  char v16 = 1;
  id v7 = [v6 allObjects];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2_32;
  v11[3] = &unk_1E65B80B0;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v13 = v15;
  uint64_t v14 = v9;
  void v11[4] = v8;
  id v10 = v5;
  id v12 = v10;
  objc_msgSend(v7, "_pas_enumerateChunksOfSize:usingBlock:", 512, v11);

  _Block_object_dispose(v15, 8);
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2_32(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v4 + 24)) {
    *(unsigned char *)(v4 + 24) = 0;
  }
  else {
    usleep(0x1388u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3_33;
  v9[3] = &unk_1E65BF1A8;
  uint64_t v7 = *(void *)(a1 + 56);
  v9[4] = v5;
  uint64_t v12 = v7;
  id v10 = *(id *)(a1 + 40);
  id v11 = v3;
  id v8 = v3;
  [v6 writeTransaction:v9];
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3_33(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_4;
  v3[3] = &unk_1E65BFE18;
  uint64_t v6 = *(void *)(a1 + 56);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 prepAndRunSQL:@"INSERT OR REPLACE INTO reimportItems (reimportRequestId, bundleId, uniqueId) SELECT :rid, :bid, value FROM _pas_nsarray(:chunk)", v3, 0, 0 onPrep onRow onError];
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_4(void *a1, void *a2)
{
  id v3 = a2;
  if ((a1[6] & 0x8000000000000000) != 0) {
    __assert_rtn("-[SGSqlEntityStore(ReimportRequests) storeReimportItems:requestId:]_block_invoke_4", "SGSqlEntityStore+ReimportRequests.m", 77, "requestId <= INT64_MAX");
  }
  id v4 = v3;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":rid");
  [v4 bindNamedParam:":bid" toNSString:a1[4]];
  [v4 bindNamedParam:":chunk" toNSArray:a1[5]];
}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v4 = objc_opt_new();
  [v4 timeIntervalSince1970];
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  uint64_t v5 = *(void *)(a1 + 32);
  return +[SGSqliteDatabase bindParam:a2 name:":id" int64:v5];
}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport request %llu as queried: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (unint64_t)storeReimportRequest:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke;
  v9[3] = &unk_1E65C0700;
  id v6 = v4;
  id v10 = v6;
  uint64_t v11 = self;
  uint64_t v12 = &v13;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  unint64_t v7 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v7;
}

void __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke(uint64_t a1)
{
  id v2 = objc_opt_new();
  id v3 = [*(id *)(a1 + 32) pluginIdentifier];
  [v2 setValue:v3 forKey:@"plugin"];

  id v4 = NSNumber;
  uint64_t v5 = objc_opt_new();
  [v5 timeIntervalSince1970];
  id v6 = objc_msgSend(v4, "numberWithDouble:");
  [v2 setValue:v6 forKey:@"creationTimestamp"];

  unint64_t v7 = [*(id *)(a1 + 32) personHandle];

  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 32) personHandle];
    [v2 setValue:v8 forKey:@"personHandle"];
  }
  __int16 v9 = [*(id *)(a1 + 32) startDate];

  if (v9)
  {
    id v10 = NSNumber;
    uint64_t v11 = [*(id *)(a1 + 32) startDate];
    [v11 timeIntervalSince1970];
    uint64_t v12 = objc_msgSend(v10, "numberWithDouble:");
    [v2 setValue:v12 forKey:@"startDateTimestamp"];
  }
  uint64_t v13 = [*(id *)(a1 + 32) endDate];

  if (v13)
  {
    uint64_t v14 = NSNumber;
    uint64_t v15 = [*(id *)(a1 + 32) endDate];
    [v15 timeIntervalSince1970];
    uint64_t v16 = objc_msgSend(v14, "numberWithDouble:");
    [v2 setValue:v16 forKey:@"endDateTimestamp"];
  }
  id v17 = *(void **)(*(void *)(a1 + 40) + 8);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke_2;
  v18[3] = &unk_1E65C0660;
  id v19 = *(id *)(a1 + 32);
  [v17 insertOrReplaceIntoTable:@"reimportRequests" dictionary:v2 onError:v18];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(*(void *)(a1 + 40) + 8) lastInsertRowId];
}

uint64_t __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "failed to store reimport request: %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (int64_t)commitStorageLocation:(id)a3 withEventId:(int64_t)a4
{
  id v6 = a3;
  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __65__SGSqlEntityStore_Locations__commitStorageLocation_withEventId___block_invoke;
  v11[3] = &unk_1E65BECB0;
  int64_t v15 = a4;
  id v8 = v6;
  id v12 = v8;
  uint64_t v13 = self;
  uint64_t v14 = &v16;
  [(SGSqliteDatabase *)db writeTransaction:v11];
  int64_t v9 = v17[3];

  _Block_object_dispose(&v16, 8);
  return v9;
}

void __65__SGSqlEntityStore_Locations__commitStorageLocation_withEventId___block_invoke(uint64_t a1)
{
  id v20 = (id)objc_opt_new();
  if ((*(void *)(a1 + 56) & 0x8000000000000000) == 0)
  {
    id v2 = objc_msgSend(NSNumber, "numberWithLongLong:");
    [v20 setObject:v2 forKeyedSubscript:@"eventId"];
  }
  id v3 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "locationType"));
  [v20 setObject:v3 forKeyedSubscript:@"locationType"];

  id v4 = [*(id *)(a1 + 32) label];

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) label];
    [v20 setObject:v5 forKeyedSubscript:@"label"];
  }
  id v6 = [*(id *)(a1 + 32) address];

  if (v6)
  {
    int v7 = [*(id *)(a1 + 32) address];
    [v20 setObject:v7 forKeyedSubscript:@"address"];
  }
  id v8 = [*(id *)(a1 + 32) airportCode];

  if (v8)
  {
    int64_t v9 = [*(id *)(a1 + 32) airportCode];
    [v20 setObject:v9 forKeyedSubscript:@"airportCode"];
  }
  id v10 = NSNumber;
  [*(id *)(a1 + 32) latitude];
  uint64_t v11 = objc_msgSend(v10, "numberWithDouble:");
  [v20 setObject:v11 forKeyedSubscript:@"latitude"];

  id v12 = NSNumber;
  [*(id *)(a1 + 32) longitude];
  uint64_t v13 = objc_msgSend(v12, "numberWithDouble:");
  [v20 setObject:v13 forKeyedSubscript:@"longitude"];

  uint64_t v14 = NSNumber;
  [*(id *)(a1 + 32) accuracy];
  int64_t v15 = objc_msgSend(v14, "numberWithDouble:");
  [v20 setObject:v15 forKeyedSubscript:@"accuracy"];

  uint64_t v16 = NSNumber;
  [*(id *)(a1 + 32) quality];
  id v17 = objc_msgSend(v16, "numberWithDouble:");
  [v20 setObject:v17 forKeyedSubscript:@"quality"];

  uint64_t v18 = [*(id *)(a1 + 32) handle];

  if (v18)
  {
    uint64_t v19 = [*(id *)(a1 + 32) handle];
    [v20 setObject:v19 forKeyedSubscript:@"handle"];
  }
  [*(id *)(*(void *)(a1 + 40) + 8) insertOrReplaceIntoTable:@"locations" dictionary:v20 onError:0];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(*(void *)(a1 + 40) + 8) handle]);
}

- (int64_t)commitStorageLocation:(id)a3
{
  return [(SGSqlEntityStore *)self commitStorageLocation:a3 withEventId:-1];
}

- (id)storageLocationWithPrimaryKey:(int64_t)a3
{
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke;
  void v15[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v15[4] = a3;
  id v4 = (void *)MEMORY[0x1CB79B4C0](v15, a2);
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = __Block_byref_object_copy__16572;
  uint64_t v13 = __Block_byref_object_dispose__16573;
  id v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke_5;
  v8[3] = &unk_1E65BEBB0;
  void v8[4] = &v9;
  uint64_t v5 = (void *)MEMORY[0x1CB79B4C0](v8);
  [(SGSqliteDatabase *)self->_db prepAndRunQuery:@"SELECT locationType, label, address, airportCode, latitude, longitude, accuracy, quality, handle FROM locations WHERE id = ?" onPrep:v4 onRow:v5 onError:0];
  id v6 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

uint64_t __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_column_int(a2, 0);
  uint64_t v5 = sqlite3_column_nsstring(a2, 1);
  id v6 = sqlite3_column_nsstring(a2, 2);
  int v7 = sqlite3_column_nsstring(a2, 3);
  if (sqlite3_column_type(a2, 4) == 5)
  {
    double v8 = NAN;
    double v9 = NAN;
    if (sqlite3_column_type(a2, 5) == 5) {
      goto LABEL_13;
    }
LABEL_5:
    double v10 = sqlite3_column_double(a2, 5);
    double v9 = v10;
    if (v8 != 0.0 || v10 != 0.0) {
      goto LABEL_13;
    }
    uint64_t v11 = sgLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      __int16 v23 = 0;
      id v12 = "Retrieved location with latitude and longitude both 0";
      uint64_t v13 = (uint8_t *)&v23;
LABEL_15:
      _os_log_fault_impl(&dword_1CA650000, v11, OS_LOG_TYPE_FAULT, v12, v13, 2u);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  double v8 = sqlite3_column_double(a2, 4);
  if (sqlite3_column_type(a2, 5) != 5) {
    goto LABEL_5;
  }
  uint64_t v11 = sgLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    __int16 v22 = 0;
    id v12 = "Retrieved location has one valid and one NaN coodinate";
    uint64_t v13 = (uint8_t *)&v22;
    goto LABEL_15;
  }
LABEL_11:

  if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
    abort();
  }
  double v8 = NAN;
  double v9 = NAN;
LABEL_13:
  double v14 = sqlite3_column_double(a2, 6);
  double v15 = sqlite3_column_double(a2, 7);
  uint64_t v16 = sqlite3_column_blob(a2, 8);
  id v17 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9B8]), "initWithBytes:length:", v16, sqlite3_column_bytes(a2, 8));
  uint64_t v18 = [[SGStorageLocation alloc] initWithType:v4 label:v5 address:v6 airportCode:v7 latitude:v17 longitude:v8 accuracy:v9 quality:v14 handle:v15];
  uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  return 1;
}

- (void)deleteInteractionsWithBundleId:(id)a3 groupIdentifiers:(id)a4
{
  id v11 = a3;
  id v7 = a4;
  if (!v11)
  {
    double v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 887, @"Invalid parameter not satisfying: %@", @"bundleId" object file lineNumber description];
  }
  if ([v7 count])
  {
    double v8 = sgMap();
    double v9 = [(SGSqlEntityStore *)self duplicateKeysMatchingInteractionBundleId:v11 andTags:v8];
    [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v9 preserveEventConfirmationHistory:0 emitChangeNotifications:1];
  }
}

uint64_t __78__SGSqlEntityStore_Deleting__deleteInteractionsWithBundleId_groupIdentifiers___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9F0] interactionGroupId:a2];
}

- (void)deleteInteractionsWithBundleId:(id)a3 identifiers:(id)a4
{
  id v11 = a3;
  id v7 = a4;
  if (!v11)
  {
    double v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 874, @"Invalid parameter not satisfying: %@", @"bundleId" object file lineNumber description];
  }
  if ([v7 count])
  {
    double v8 = sgMap();
    double v9 = [(SGSqlEntityStore *)self duplicateKeysMatchingInteractionBundleId:v11 andTags:v8];
    [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v9 preserveEventConfirmationHistory:0 emitChangeNotifications:1];
  }
}

uint64_t __73__SGSqlEntityStore_Deleting__deleteInteractionsWithBundleId_identifiers___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9F0] interactionId:a2];
}

- (void)deleteInteractionsWithBundleId:(id)a3
{
  id v5 = a3;
  id v8 = v5;
  if (!v5)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 868, @"Invalid parameter not satisfying: %@", @"bundleId" object file lineNumber description];

    id v5 = 0;
  }
  id v6 = [MEMORY[0x1E4F5D9F0] interactionBundleId:v5];
  [(SGSqlEntityStore *)self deleteItemsWithEntityTag:v6 preserveEventConfirmationHistory:0];
}

- (void)deleteItemsWithEntityTag:(id)a3 preserveEventConfirmationHistory:(BOOL)a4
{
  BOOL v4 = a4;
  id v7 = a3;
  if (!v7)
  {
    id v12 = [MEMORY[0x1E4F28B00] currentHandler];
    [v12 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 847, @"Invalid parameter not satisfying: %@", @"tag" object file lineNumber description];
  }
  if (([v7 indexed] & 1) == 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 848, @"Invalid parameter not satisfying: %@", @"tag.indexed" object file lineNumber description];
  }
  id v8 = objc_opt_new();
  db = self->_db;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke;
  v16[3] = &unk_1E65C0388;
  id v17 = v7;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke_2;
  v14[3] = &unk_1E65BFF78;
  id v15 = v8;
  id v10 = v8;
  id v11 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT entityKey, entityType, parentKey FROM entityTags WHERE tag = :tag" onPrep:v16 onRow:v14 onError:0];
  [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v10 preserveEventConfirmationHistory:v4 emitChangeNotifications:1];
}

void __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 name];
  [v3 bindNamedParam:":tag" toNonnullNSString:v4];
}

uint64_t __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"entityKey" table:0];
  uint64_t v5 = [v3 getInt64ForColumnName:"entityType" table:0];
  id v6 = [v3 getNSStringForColumnName:"parentKey" table:0];

  id v7 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v4 entityType:v5 serializedParentKey:v6];
  [*(id *)(a1 + 32) addObject:v7];
  id v8 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v8;
}

- (void)deleteItemsWithEntityTag:(id)a3
{
}

- (void)deleteInteractionEntitiesExceedingLimit:(id)a3 withSuspensionHandler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_opt_new();
  db = self->_db;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke;
  v23[3] = &unk_1E65BEF88;
  void v23[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v23];
  id v10 = self->_db;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_3;
  v20[3] = &unk_1E65BED70;
  id v11 = v6;
  id v21 = v11;
  id v22 = v8;
  id v12 = v8;
  [(SGSqliteDatabase *)v10 prepAndRunQuery:@"SELECT bundleId, count(*) FROM interactionsByBundleId GROUP BY bundleId" onPrep:0 onRow:v20 onError:0];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_4;
  v17[3] = &unk_1E65B88D8;
  void v17[4] = self;
  id v18 = v11;
  id v19 = v7;
  id v13 = v7;
  id v14 = v11;
  [v12 enumerateObjectsUsingBlock:v17];
  id v15 = self->_db;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_7;
  v16[3] = &unk_1E65BEF88;
  void v16[4] = self;
  [(SGSqliteDatabase *)v15 writeTransaction:v16];
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunNonDataQueries:&unk_1F2536980 onError:0];
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"INSERT INTO interactionsByBundleId   SELECT delimitedString(key, 0), CASE WHEN updateTimestamp > 0 THEN updateTimestamp              WHEN creationTimestamp > 0 THEN creationTimestamp              ELSE lastSeenTimestamp END, key  FROM emailMetaData  WHERE type = ?", &__block_literal_global_277_16678, 0, 0 onPrep onRow onError];
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  return [v2 prepAndRunNonDataQueries:&unk_1F2536998 onError:0];
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = sqlite3_column_nsstring(a2, 0);
  int v5 = sqlite3_column_int(a2, 1);
  if (v4 && v5 > (int)[*(id *)(a1 + 32) intValue]) {
    [*(id *)(a1 + 40) addObject:v4];
  }

  return 0;
}

void __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  int v5 = *(void **)(*(void *)(a1 + 32) + 8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_5;
  v11[3] = &unk_1E65BFF28;
  id v6 = v3;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_6;
  v9[3] = &unk_1E65BFF78;
  id v7 = v4;
  id v10 = v7;
  [v5 prepAndRunSQL:@"SELECT key FROM interactionsByBundleId WHERE bundleId = :bundleID ORDER BY timestamp DESC LIMIT -1 OFFSET :limit" onPrep:v11 onRow:v9 onError:0];
  [*(id *)(a1 + 32) deleteEntitiesByDuplicateKey:v7 emitChangeNotifications:1];
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_7(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunNonDataQueries:&unk_1F25369B0 onError:0];
}

void __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleID" toNonnullNSString:v3];
  [v4 bindNamedParam:":limit" toInt64AsNonnullNSNumber:*(void *)(a1 + 40)];
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 nonnullNSStringForColumnName:"key" table:0];
  id v4 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v3 entityType:16 serializedParentKey:0];
  [*(id *)(a1 + 32) addObject:v4];
  int v5 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v5;
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindParam:1 toInt64:16];
}

- (void)deleteMessagesByDuplicateKey:(id)a3
{
  id v4 = a3;
  [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v4 emitChangeNotifications:1];
  uint64_t v5 = [v4 count];

  +[SGAggregateLogging messagesDeleted:v5];
}

- (void)deleteEntitiesByDuplicateKey:(id)a3 preserveEventConfirmationHistory:(BOOL)a4 emitChangeNotifications:(BOOL)a5
{
  BOOL v45 = a5;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v46 = a3;
  if ([v46 count])
  {
    SEL v44 = a2;
    SEL v47 = self;
    uint64_t v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218243;
      *(void *)&uint8_t buf[4] = [v46 count];
      *(_WORD *)&buf[12] = 2113;
      *(void *)&buf[14] = v46;
      _os_log_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEFAULT, "Deleting entities by duplicate key (duplicateKeys count = %tu): %{private}@", buf, 0x16u);
    }

    double v9 = objc_opt_new();
    id v10 = objc_opt_new();
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v11 = v46;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v63 objects:v73 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v64;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v64 != v13) {
            objc_enumerationMutation(v11);
          }
          id v15 = *(void **)(*((void *)&v63 + 1) + 8 * i);
          uint64_t v16 = [v15 parentKey];

          if (v16) {
            id v17 = v10;
          }
          else {
            id v17 = v9;
          }
          [v17 addObject:v15];
        }
        uint64_t v12 = [v11 countByEnumeratingWithState:&v63 objects:v73 count:16];
      }
      while (v12);
    }

    if (!a4)
    {
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      id v18 = v10;
      uint64_t v19 = [v18 countByEnumeratingWithState:&v59 objects:v72 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v60;
        do
        {
          for (uint64_t j = 0; j != v19; ++j)
          {
            if (*(void *)v60 != v20) {
              objc_enumerationMutation(v18);
            }
            id v22 = *(void **)(*((void *)&v59 + 1) + 8 * j);
            if ([v22 entityType] == 2)
            {
              __int16 v23 = [(SGSqlEntityStore *)v47 loadEventByDuplicateKey:v22];
              id v24 = v23;
              if (v23)
              {
                id v25 = [v23 convertToEvent:v47];
                if (v25)
                {
                  uint64_t v26 = +[SGSuggestHistory sharedSuggestHistory];
                  [v26 removeConfirmationHistoryForEvent:v25];
                }
              }
            }
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v59 objects:v72 count:16];
        }
        while (v19);
      }
    }
    uint64_t v27 = objc_opt_new();
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    int v69 = __Block_byref_object_copy__16690;
    int v70 = __Block_byref_object_dispose__16691;
    id v71 = 0;
    db = v47->_db;
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke;
    v52[3] = &unk_1E65B88B0;
    id v29 = v27;
    id v53 = v29;
    char v54 = v47;
    id v43 = v10;
    id v55 = v43;
    id v42 = v9;
    id v56 = v42;
    uint64_t v57 = buf;
    SEL v58 = v44;
    [(SGSqliteDatabase *)db writeTransaction:v52];
    uint64_t v30 = [(SGSqlEntityStore *)v47 kvCacheManager];
    [v30 deleteValueByRecordIdSet:v29];

    if (v45)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v31 = v11;
      uint64_t v32 = [v31 countByEnumeratingWithState:&v48 objects:v67 count:16];
      if (!v32)
      {

        goto LABEL_52;
      }
      char v33 = 0;
      char v34 = 0;
      char v35 = 0;
      uint64_t v36 = *(void *)v49;
LABEL_32:
      uint64_t v37 = 0;
      while (1)
      {
        if (*(void *)v49 != v36) {
          objc_enumerationMutation(v31);
        }
        uint64_t v38 = *(void **)(*((void *)&v48 + 1) + 8 * v37);
        int v39 = [v38 parentKey];
        BOOL v40 = v39 == 0;

        if (v40) {
          break;
        }
        uint64_t v41 = [v38 entityType];
        if (SGEntityTypeIsEvent())
        {
          char v34 = 1;
        }
        else if (SGEntityTypeIsContact())
        {
          char v33 = 1;
        }
        else
        {
          v35 |= v41 == 22;
        }
        if (v32 == ++v37)
        {
          uint64_t v32 = [v31 countByEnumeratingWithState:&v48 objects:v67 count:16];
          if (v32) {
            goto LABEL_32;
          }

          if ((v34 & 1) == 0)
          {
LABEL_47:
            if (v33) {
              +[SGDNotificationBroadcaster emitContactDeleted:0];
            }
            if (v35) {
              +[SGDNotificationBroadcaster emitReminderDeleted:0];
            }
            goto LABEL_52;
          }
LABEL_46:
          +[SGDNotificationBroadcaster emitEventDeleted:0];
          goto LABEL_47;
        }
      }

      char v35 = 1;
      char v33 = 1;
      goto LABEL_46;
    }
LABEL_52:

    _Block_object_dispose(buf, 8);
  }
}

void __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) _deleteEntitiesByDuplicateKeyNoRecurse:*(void *)(a1 + 48)];
  [v2 unionSet:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) _derefChildrenOf:*(void *)(a1 + 56)];
  [v4 unionSet:v5];

  uint64_t v6 = [*(id *)(a1 + 40) _deleteMessageMetadataByDuplicateKeyNoRecurse:*(void *)(a1 + 56)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 72);
  double v9 = sgMap();
  [*(id *)(a1 + 40) removeSnippetsForEntities:v9];
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 72);
  id v10 = sgMap();

  objc_msgSend(*(id *)(a1 + 40), "_removeSnippetsForEmails:", v10, v11, 3221225472, __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_3, &unk_1E65B8888, v12, v13, v14, 3221225472, __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_2, &unk_1E65B8888, v15, v16);
}

id __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 tableId])
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"SGSqlEntityStore+Deleting.m", 727, @"Unexpected tableId for record: %@", v3 object file lineNumber description];
  }
  id v4 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v3, "rowId"));

  return v4;
}

id __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 tableId] != 1)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"SGSqlEntityStore+Deleting.m", 734, @"Unexpected tableId for record: %@", v3 object file lineNumber description];
  }
  id v4 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v3, "rowId"));

  return v4;
}

- (void)deleteEntitiesByDuplicateKey:(id)a3 emitChangeNotifications:(BOOL)a4
{
}

- (id)_deleteMessageMetadataByDuplicateKeyNoRecurse:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    db = self->_db;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke;
    v17[3] = &unk_1E65C0388;
    id v18 = v4;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"DELETE FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:compositeHashes)" onPrep:v17 onRow:0 onError:0];
    uint64_t v6 = sgMap();
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_4;
    void v15[3] = &unk_1E65C0388;
    id v16 = v6;
    id v7 = v6;
    uint64_t v8 = (void *)MEMORY[0x1CB79B4C0](v15);
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM emailTags WHERE key IN _pas_nsarray(:keys)" onPrep:v8 onRow:0 onError:0];
    double v9 = objc_opt_new();
    id v10 = self->_db;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_5;
    void v13[3] = &unk_1E65BFF78;
    id v11 = v9;
    id v14 = v11;
    [(SGSqliteDatabase *)v10 prepAndRunSQL:@"SELECT id FROM emailMetadata WHERE key IN _pas_nsarray(:keys)" onPrep:v8 onRow:v13 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM emailMetadata WHERE key IN _pas_nsarray(:keys)" onPrep:v8 onRow:0 onError:0];
  }
  else
  {
    id v11 = (id)objc_opt_new();
  }

  return v11;
}

void __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v2, "_pas_proxyArrayWithMapping:", &__block_literal_global_242);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindNamedParam:":compositeHashes" toNSArray:v4];
}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_5(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForEmailWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "emailMetadata"));
  [v2 addObject:v3];

  return 0;
}

id __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = [a2 messageKey];
  id v3 = [v2 serialize];

  return v3;
}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 compositeHash];
}

- (void)_deleteEventsByRecordIds:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v5 = sgMap();
    db = self->_db;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_2;
    v16[3] = &unk_1E65C0388;
    id v7 = v5;
    id v17 = v7;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"DELETE FROM locations WHERE eventId IN (SELECT l2.eventId FROM locations AS l2 JOIN events AS e ON e.id = l2.eventId WHERE e.entityId IN _pas_nsarray(:recordIds))" onPrep:v16 onRow:0 onError:0];

    uint64_t v8 = self->_db;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_3;
    v14[3] = &unk_1E65C0388;
    id v9 = v7;
    id v15 = v9;
    [(SGSqliteDatabase *)v8 prepAndRunSQL:@"DELETE FROM eventTags AS et WHERE et.eventId IN (SELECT et2.eventId FROM eventTags AS et2 JOIN events AS e ON e.id = et2.eventId WHERE e.entityId IN _pas_nsarray(:recordIds))" onPrep:v14 onRow:0 onError:0];

    id v10 = self->_db;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_4;
    v12[3] = &unk_1E65C0388;
    id v13 = v9;
    id v11 = v9;
    [(SGSqliteDatabase *)v10 prepAndRunSQL:@"DELETE FROM events WHERE entityId IN _pas_nsarray(:recordIds)" onPrep:v12 onRow:0 onError:0];
  }
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = [a2 numericValue];
  return [v2 numberWithLongLong:v3];
}

- (void)_deleteContactDetailsByRecordIds:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v5 = sgMap();
    db = self->_db;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_2;
    v12[3] = &unk_1E65C0388;
    id v7 = v5;
    id v13 = v7;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"DELETE FROM extractionInfos WHERE id IN (SELECT extractionInfoId FROM contactDetails WHERE entityId IN _pas_nsarray(:recordIds))" onPrep:v12 onRow:0 onError:0];
    uint64_t v8 = self->_db;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_3;
    v10[3] = &unk_1E65C0388;
    id v11 = v7;
    id v9 = v7;
    [(SGSqliteDatabase *)v8 prepAndRunSQL:@"DELETE FROM contactDetails WHERE entityId IN _pas_nsarray(:recordIds)" onPrep:v10 onRow:0 onError:0];
  }
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = [a2 numericValue];
  return [v2 numberWithLongLong:v3];
}

- (void)_deleteRemindersByRecordIds:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v5 = sgMap();
    db = self->_db;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_2;
    v12[3] = &unk_1E65C0388;
    id v7 = v5;
    id v13 = v7;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"DELETE FROM locations WHERE id IN (SELECT dueLocationId FROM reminders WHERE entityId IN _pas_nsarray(:recordIds))" onPrep:v12 onRow:0 onError:0];
    uint64_t v8 = self->_db;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_3;
    v10[3] = &unk_1E65C0388;
    id v11 = v7;
    id v9 = v7;
    [(SGSqliteDatabase *)v8 prepAndRunSQL:@"DELETE FROM reminders WHERE entityId IN _pas_nsarray(:recordIds)" onPrep:v10 onRow:0 onError:0];
  }
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":recordIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = [a2 numericValue];
  return [v2 numberWithLongLong:v3];
}

- (id)_deleteEntitiesByDuplicateKeyNoRecurse:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v5 = sgMapSelector();
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __69__SGSqlEntityStore_Deleting___deleteEntitiesByDuplicateKeyNoRecurse___block_invoke;
    v10[3] = &unk_1E65C0388;
    id v11 = v5;
    id v6 = v5;
    id v7 = (void *)MEMORY[0x1CB79B4C0](v10);
    [(SGSqliteDatabase *)self->_db prepAndRunNonDataQueries:&unk_1F2536968 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"INSERT OR IGNORE INTO entitiesToRemove SELECT childId FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    uint64_t v8 = [(SGSqlEntityStore *)self _deleteChildEntitiesByRecordIdsInTable:@"entitiesToRemove"];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DROP TABLE entitiesToRemove" onPrep:0 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM entityTags WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
  }
  else
  {
    uint64_t v8 = objc_opt_new();
  }

  return v8;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteEntitiesByDuplicateKeyNoRecurse___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

- (id)_derefChildrenOf:(id)a3
{
  v14[3] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v5 = sgMapSelector();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __47__SGSqlEntityStore_Deleting___derefChildrenOf___block_invoke;
    v12[3] = &unk_1E65C0388;
    id v13 = v5;
    id v6 = v5;
    id v7 = (void *)MEMORY[0x1CB79B4C0](v12);
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DROP TABLE IF EXISTS childrenOfRemovedParents" onPrep:0 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"CREATE TEMP TABLE childrenOfRemovedParents (id INTEGER PRIMARY KEY)" onPrep:0 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"INSERT INTO childrenOfRemovedParents SELECT DISTINCT childId FROM entityParentage WHERE parentKey IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DROP TABLE IF EXISTS childrenWithRemainingParents" onPrep:0 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"CREATE TEMP TABLE childrenWithRemainingParents (id INTEGER PRIMARY KEY)" onPrep:0 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"INSERT INTO childrenWithRemainingParents SELECT DISTINCT cr.id FROM childrenOfRemovedParents AS cr CROSS JOIN entityParentage AS ep ON cr.id = ep.childId WHERE ep.parentKey NOT IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    db = self->_db;
    v14[0] = @"DROP TABLE IF EXISTS childrenToRemove";
    v14[1] = @"CREATE TEMP TABLE childrenToRemove (id INTEGER PRIMARY KEY)";
    v14[2] = @"INSERT INTO childrenToRemove SELECT id FROM childrenOfRemovedParents      WHERE id NOT IN (SELECT id FROM childrenWithRemainingParents)";
    id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:3];
    [(SGSqliteDatabase *)db prepAndRunNonDataQueries:v9 onError:0];

    id v10 = [(SGSqlEntityStore *)self _deleteChildEntitiesByRecordIdsInTable:@"childrenToRemove"];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM entityTags WHERE parentKey IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"DELETE FROM entityParentage WHERE parentKey IN _pas_nsarray(:keys)" onPrep:v7 onRow:0 onError:0];
    [(SGSqliteDatabase *)self->_db prepAndRunNonDataQueries:&unk_1F2536950 onError:0];
    [(SGSqlEntityStore *)self clearMasterEntityCache];
  }
  else
  {
    id v10 = objc_opt_new();
  }

  return v10;
}

uint64_t __47__SGSqlEntityStore_Deleting___derefChildrenOf___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

- (id)_deleteChildEntitiesByRecordIdsInTable:(id)a3
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  id v7 = (void *)[[NSString alloc] initWithFormat:@"SELECT DISTINCT id FROM %@", v4];
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke;
  v34[3] = &unk_1E65BEC60;
  id v8 = v5;
  id v35 = v8;
  [(SGSqliteDatabase *)db prepAndRunQuery:v7 onPrep:0 onRow:v34 onError:0];

  [(SGSqlEntityStore *)self _recordPseudoContactsWithDeletedDetailsInTable:@"pseudoContactsWithDeletedDetails" deletedChildrenTable:v4];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v9 = v8;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v31;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v31 != v12) {
          objc_enumerationMutation(v9);
        }
        [(SGSqlEntityStore *)self deleteByRecordId:*(void *)(*((void *)&v30 + 1) + 8 * v13++)];
      }
      while (v11 != v13);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v30 objects:v37 count:16];
    }
    while (v11);
  }

  [(SGSqlEntityStore *)self syncNewBlobsIfChanged];
  id v14 = [NSString alloc];
  id v15 = [(SGSqlEntityStore *)self columnQueryPrefixSelect];
  id v16 = (void *)[v14 initWithFormat:@"%@ FROM %@ AS c CROSS JOIN entity AS e ON c.id = e.id CROSS JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :pseudoevent OR e.entityType = :pseudoreminder", v15, v4];

  id v17 = self->_db;
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_3;
  v29[3] = &unk_1E65BEC60;
  v29[4] = self;
  [(SGSqliteDatabase *)v17 prepAndRunQuery:v16 onPrep:&__block_literal_global_115_16798 onRow:v29 onError:0];
  id v18 = self->_db;
  uint64_t v19 = (void *)[[NSString alloc] initWithFormat:@"DELETE FROM entity WHERE id IN (SELECT id FROM %@)", v4];
  v36[0] = v19;
  uint64_t v20 = (void *)[[NSString alloc] initWithFormat:@"DELETE FROM entity_fts WHERE docid IN (SELECT id FROM %@)", v4];
  v36[1] = v20;
  id v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:2];
  [(SGSqliteDatabase *)v18 prepAndRunNonDataQueries:v21 onError:0];

  [(SGSqlEntityStore *)self _deleteRemindersByRecordIds:v9];
  [(SGSqlEntityStore *)self _deleteContactDetailsByRecordIds:v9];
  [(SGSqlEntityStore *)self _deleteEventsByRecordIds:v9];
  id v22 = (void *)[[NSString alloc] initWithFormat:@"SELECT masterEntityId FROM %@", @"pseudoContactsWithDeletedDetails"];

  __int16 v23 = self->_db;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_4;
  v28[3] = &unk_1E65BEC60;
  v28[4] = self;
  [(SGSqliteDatabase *)v23 prepAndRunQuery:v22 onPrep:0 onRow:v28 onError:0];
  id v24 = self->_db;
  id v25 = (void *)[[NSString alloc] initWithFormat:@"DROP TABLE %@", @"pseudoContactsWithDeletedDetails"];
  [(SGSqliteDatabase *)v24 prepAndRunQuery:v25 onPrep:0 onRow:0 onError:0];

  id v26 = v9;
  return v26;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a2, 0));
  [v2 addObject:v3];

  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2 withSnippets:0];
  id v4 = [v3 duplicateKey];
  uint64_t v5 = [v4 entityType];

  if (v5 == 2)
  {
    id v6 = +[SGStorageEvent storageEventFromEntity:v3];
    id v7 = *(void **)(*(void *)(a1 + 32) + 120);
    id v8 = [[SGJournalEntry alloc] initWithOperation:10 event:v6];
LABEL_5:
    uint64_t v11 = v8;
    [v7 addEntry:v8];

    goto LABEL_6;
  }
  id v9 = [v3 duplicateKey];
  uint64_t v10 = [v9 entityType];

  if (v10 == 22)
  {
    id v6 = +[SGStorageReminder storageReminderFromEntity:v3 store:*(void *)(a1 + 32)];
    id v7 = *(void **)(*(void *)(a1 + 32) + 120);
    id v8 = [[SGJournalEntry alloc] initWithOperation:21 reminder:v6];
    goto LABEL_5;
  }
LABEL_6:

  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":pseudoevent" int64:2];
  return +[SGSqliteDatabase bindParam:a2 name:":pseudoreminder" int64:22];
}

- (void)_recordPseudoContactsWithDeletedDetailsInTable:(id)a3 deletedChildrenTable:(id)a4
{
  v15[2] = *MEMORY[0x1E4F143B8];
  db = self->_db;
  id v7 = (objc_class *)NSString;
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = (void *)[[v7 alloc] initWithFormat:@"DROP TABLE IF EXISTS %@", v9];
  v15[0] = v10;
  uint64_t v11 = (void *)[[NSString alloc] initWithFormat:@"CREATE TEMP TABLE %@ (masterEntityId INTEGER PRIMARY KEY)", v9];
  v15[1] = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:2];
  [(SGSqliteDatabase *)db prepAndRunNonDataQueries:v12 onError:0];

  id v13 = [NSString alloc];
  id v14 = (void *)[v13 initWithFormat:@"INSERT OR IGNORE INTO %@ SELECT e.masterEntityId FROM %@ AS cr CROSS JOIN entity AS e ON e.id = cr.id WHERE e.entityType IN (:email, :phone, :address, :birthday, :socialProfile)   AND e.masterEntityId > 0   AND e.masterEntityId NOT IN (SELECT id FROM %@)", v9, v8, v8, v15[0]];

  [(SGSqliteDatabase *)self->_db prepAndRunQuery:v14 onPrep:&__block_literal_global_97 onRow:0 onError:0];
}

uint64_t __98__SGSqlEntityStore_Deleting___recordPseudoContactsWithDeletedDetailsInTable_deletedChildrenTable___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":email" int64:8];
  +[SGSqliteDatabase bindParam:a2 name:":phone" int64:6];
  +[SGSqliteDatabase bindParam:a2 name:":address" int64:7];
  +[SGSqliteDatabase bindParam:a2 name:":birthday" int64:20];
  return +[SGSqliteDatabase bindParam:a2 name:":socialProfile" int64:19];
}

- (id)childrenFromParentKey:(id)a3
{
  id v4 = a3;
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  id v7 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE parentKey = ?"];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke;
  void v15[3] = &unk_1E65C05C8;
  id v16 = v4;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke_2;
  v12[3] = &unk_1E65BED70;
  id v8 = v5;
  id v13 = v8;
  id v14 = self;
  id v9 = v4;
  [(SGSqliteDatabase *)db prepAndRunQuery:v7 onPrep:v15 onRow:v12 onError:0];

  id v10 = v8;
  return v10;
}

void __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = [*(id *)(a1 + 32) serialize];
  sqlite3_bind_text(a2, 1, (const char *)[v3 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) entityFromSqlResult:a2];
  [v2 addObject:v3];

  return 0;
}

- (void)deleteMessages:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = sgMap();
  id v6 = objc_opt_new();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v5, 0);
  id v8 = [v7 allValues];

  uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = [*(id *)(*((void *)&v18 + 1) + 8 * v12) allObjects];
        [v6 addObjectsFromArray:v13];

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v10);
  }

  id v14 = [v4 allObjects];
  id v15 = objc_msgSend(v14, "_pas_mappedArrayWithTransform:", &__block_literal_global_82);

  if ([v15 count])
  {
    id v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = [v15 count];
      *(_DWORD *)buf = 134218242;
      uint64_t v23 = v17;
      __int16 v24 = 2112;
      id v25 = v15;
      _os_log_impl(&dword_1CA650000, v16, OS_LOG_TYPE_DEFAULT, "Deleting Mail Intelligence data for %tu messages (%@)", buf, 0x16u);
    }

    [(SGSqlEntityStore *)self deleteMailIntelligenceForMessageIds:v15];
  }
  [(SGSqlEntityStore *)self deleteMessagesByDuplicateKey:v6];
}

uint64_t __45__SGSqlEntityStore_Deleting__deleteMessages___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 messageId];
}

uint64_t __45__SGSqlEntityStore_Deleting__deleteMessages___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9F0] messageWithEmailKey:a2];
}

- (void)pruneNLEventEntitiesOlderThan:(SGUnixTimestamp_)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v5 = [MEMORY[0x1E4F5DAF0] showPastEvents];
  id v6 = sgLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:a3.secondsFromUnixEpoch];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEFAULT, "*** Not pruning NL Events older than %{public}@ because showPastEvents is enabled! ***", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:a3.secondsFromUnixEpoch];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEFAULT, "Pruning NL Events older than %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v22 = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__16690;
    __int16 v24 = __Block_byref_object_dispose__16691;
    id v25 = 0;
    id v25 = (id)objc_opt_new();
    uint64_t v10 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.timeRangeEnd < :timeRangeEnd AND e.entityType = :entityType"];
    db = self->_db;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke;
    v16[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    void v16[4] = *(SGUnixTimestamp_ *)&a3.secondsFromUnixEpoch;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke_2;
    void v15[3] = &unk_1E65BFDD0;
    void v15[4] = self;
    void v15[5] = &buf;
    [(SGSqliteDatabase *)db prepAndRunQuery:v10 onPrep:v16 onRow:v15 onError:0];
    uint64_t v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [*(id *)(*((void *)&buf + 1) + 40) count];
      uint64_t v14 = *(void *)(*((void *)&buf + 1) + 40);
      *(_DWORD *)uint64_t v17 = 134218243;
      uint64_t v18 = v13;
      __int16 v19 = 2113;
      uint64_t v20 = v14;
      _os_log_impl(&dword_1CA650000, v12, OS_LOG_TYPE_DEFAULT, "NL Event entities to delete (%tu) %{private}@", v17, 0x16u);
    }

    [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:*(void *)(*((void *)&buf + 1) + 40) emitChangeNotifications:1];
    _Block_object_dispose(&buf, 8);
  }
}

uint64_t __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":timeRangeEnd" double:*(double *)(a1 + 32)];
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int:2];
}

uint64_t __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2 withSnippets:0];
  if ([v3 isNaturalLanguageEvent])
  {
    id v4 = *(void **)(a1 + 32);
    int v5 = [v3 duplicateKey];
    id v6 = [v5 parentKey];
    BOOL v7 = [v4 childrenFromParentKey:v6];
    unint64_t v8 = [v7 count];

    uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v10 = [v3 duplicateKey];
    uint64_t v11 = v10;
    if (v8 < 2)
    {
      uint64_t v12 = [v10 parentKey];
      [v9 addObject:v12];
    }
    else
    {
      [v9 addObject:v10];
    }
  }
  return 0;
}

- (void)pruneReminders
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = objc_opt_new();
  id v4 = [MEMORY[0x1E4F1C9C8] date];
  [v4 timeIntervalSince1970];
  double v6 = v5;

  BOOL v7 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE ((e.timeRangeEnd < :timeRangeEnd AND e.timeRangeEnd != 0) OR (e.timeRangeEnd == 0 AND e.creationTimestamp < :creationTimestamp)) AND e.entityType = :entityType"];
  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke;
  v14[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  *(double *)&void v14[4] = v6 + -604800.0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke_2;
  v12[3] = &unk_1E65BED70;
  void v12[4] = self;
  id v9 = v3;
  id v13 = v9;
  [(SGSqliteDatabase *)db prepAndRunQuery:v7 onPrep:v14 onRow:v12 onError:0];
  uint64_t v10 = sgRemindersLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = [v9 count];
    *(_DWORD *)long long buf = 134218242;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    id v18 = v9;
    _os_log_impl(&dword_1CA650000, v10, OS_LOG_TYPE_INFO, "PseudoReminders to prune (%lu), %@", buf, 0x16u);
  }

  [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v9 emitChangeNotifications:1];
}

uint64_t __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":timeRangeEnd" double:*(double *)(a1 + 32)];
  +[SGSqliteDatabase bindParam:a2 name:":creationTimestamp" double:*(double *)(a1 + 32)];
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int:22];
}

uint64_t __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2 withSnippets:0];
  id v4 = *(void **)(a1 + 32);
  double v5 = [v3 duplicateKey];
  double v6 = [v5 parentKey];
  BOOL v7 = [v4 childrenFromParentKey:v6];
  unint64_t v8 = [v7 count];

  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = [v3 duplicateKey];
  uint64_t v11 = v10;
  if (v8 < 2)
  {
    uint64_t v12 = [v10 parentKey];
    [v9 addObject:v12];
  }
  else
  {
    [v9 addObject:v10];
  }

  return 0;
}

- (void)pruneNLEventEntitiesOlderThanTwoWeeks
{
  id v3 = objc_opt_new();
  [v3 timeIntervalSince1970];
  double v5 = v4;

  [(SGSqlEntityStore *)self pruneNLEventEntitiesOlderThan:v5 + -1209600.0];
}

- (void)pruneDuplicateEventExtractions:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "Pruning duplicate event entities from web-pages/interactions", buf, 2u);
  }

  double v6 = objc_opt_new();
  db = self->_db;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_2;
  v23[3] = &unk_1E65BFF78;
  id v8 = v6;
  id v24 = v8;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT entityKey FROM entity WHERE entityType = :entityType GROUP BY entityKey having(COUNT(entityKey) > 1)" onPrep:&__block_literal_global_16855 onRow:v23 onError:0];
  id v9 = objc_opt_new();
  uint64_t v10 = self->_db;
  uint64_t v11 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.entityKey in _pas_nsarray(:candidateEntityKeys) AND e.entityType = :entityType"];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_3;
  v21[3] = &unk_1E65C0388;
  id v22 = v8;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_4;
  v18[3] = &unk_1E65BAD60;
  void v18[4] = self;
  id v19 = v4;
  id v12 = v9;
  id v20 = v12;
  id v13 = v4;
  id v14 = v8;
  [(SGSqliteDatabase *)v10 prepAndRunSQL:v11 onPrep:v21 onRow:v18 onError:0];

  id v15 = sgLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v26 = (uint64_t)v12;
    _os_log_debug_impl(&dword_1CA650000, v15, OS_LOG_TYPE_DEBUG, "entities to delete %@", buf, 0xCu);
  }

  if ([v12 count])
  {
    uint64_t v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = [v12 count];
      *(_DWORD *)long long buf = 134349056;
      uint64_t v26 = v17;
      _os_log_impl(&dword_1CA650000, v16, OS_LOG_TYPE_DEFAULT, "Pruning duplicate Event entities: %{public}lu", buf, 0xCu);
    }

    [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v12 emitChangeNotifications:1];
  }
}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 nonnullNSStringForColumnName:"entityKey" table:0];
  [*(id *)(a1 + 32) addObject:v3];
  id v4 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v4;
}

void __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 bindNamedParam:":candidateEntityKeys" toNSArray:v2];
  [v3 bindNamedParam:":entityType" toInteger:2];
}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_4(uint64_t a1, id a2)
{
  uint64_t v2 = a1;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", objc_msgSend(a2, "stmt"), 0);
  id v4 = [v3 duplicateKey];
  double v5 = [v4 parentKey];
  if ([v5 entityType] == 18)
  {
  }
  else
  {
    double v6 = [v3 duplicateKey];
    BOOL v7 = [v6 parentKey];
    uint64_t v8 = [v7 entityType];

    if (v8 != 16) {
      goto LABEL_18;
    }
  }
  [*(id *)(v2 + 40) eventsWithSameOpaqueKeyAsPseudoEvent:v3 harvestStore:*(void *)(v2 + 32)];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [obj countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v10 = v9;
  uint64_t v26 = v2;
  uint64_t v11 = *(void *)v29;
  char v12 = 1;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v29 != v11) {
        objc_enumerationMutation(obj);
      }
      id v14 = [*(id *)(*((void *)&v28 + 1) + 8 * i) suggestionInfo];
      id v15 = [v14 uniqueKey];
      uint64_t v16 = [v3 duplicateKey];
      uint64_t v17 = [v16 serialize];
      int v18 = [v15 isEqualToString:v17];

      if (v18)
      {
        id v19 = sgLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          id v20 = [v3 duplicateKey];
          long long v21 = [v20 serialize];
          *(_DWORD *)long long buf = 138412290;
          long long v33 = v21;
          _os_log_debug_impl(&dword_1CA650000, v19, OS_LOG_TYPE_DEBUG, "web-page event entity exists on calendar, don't delete: %@", buf, 0xCu);
        }
        char v12 = 0;
      }
    }
    uint64_t v10 = [obj countByEnumeratingWithState:&v28 objects:v34 count:16];
  }
  while (v10);
  uint64_t v2 = v26;
  if (v12)
  {
LABEL_16:
    id v22 = *(void **)(v2 + 48);
    uint64_t v23 = [v3 duplicateKey];
    id v24 = [v23 parentKey];
    [v22 addObject:v24];
  }
LABEL_18:

  return *MEMORY[0x1E4F93C08];
}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":entityType" toInteger:2];
}

- (void)clearMailIntelligence
{
  id v3 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v3 reset];

  [(SGSqlEntityStore *)self clearMailIntelligenceSaliencyDetection];
}

- (void)clearMailIntelligenceSaliencyDetection
{
  id v3 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v3 clearMailIntelligenceSaliencyDetection];

  [(SGSqlEntityStore *)self deleteValueForKey:@"lastSGMIUpdaterProcessingDate"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"earliestNextSGMIUpdaterProcessingDate"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"lastMailboxCheckedForTopSGMISaliency"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"lastLimitCheckedForTopSGMISaliency"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"totalSGMIUpdaterMailsProcessed"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"kTotalSGMITruePositivePredictions"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"kTotalSGMIFalsePositivePredictions"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"kTotalSGMITrueNegativePredictions"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"kTotalSGMIFalseNegativePredictions"];
  [(SGSqlEntityStore *)self deleteValueForKey:@"lastSGMIFollowUpStatsAndSettingReportingDate"];
}

- (void)deleteMailIntelligenceForMessageIds:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke;
  void v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_2;
  v11[3] = &unk_1E65C0388;
  id v12 = *(id *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_3;
  v9[3] = &unk_1E65BFF78;
  id v10 = v2;
  id v4 = v2;
  [v3 prepAndRunSQL:@"DELETE FROM mailIntelligence_saliency WHERE messageId IN _pas_nsarray(:messageIds) RETURNING creationTimestamp" onPrep:v11 onRow:v9 onError:0];
  double v5 = [*(id *)(a1 + 32) sgmiFeatureStore];
  [v5 clearBucketsForDates:v4];

  id v6 = *(void **)(*(void *)(a1 + 32) + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_4;
  void v7[3] = &unk_1E65C0388;
  id v8 = *(id *)(a1 + 40);
  [v6 prepAndRunSQL:@"DELETE FROM mailIntelligence_spotlightMapping WHERE messageId IN _pas_nsarray(:messageIds)" onPrep:v7 onRow:0 onError:0];
}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageIds" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_3(uint64_t a1, void *a2)
{
  [a2 getDoubleForColumnName:"creationTimestamp" table:"mailIntelligence_saliency"];
  id v3 = *(void **)(a1 + 32);
  id v4 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
  [v3 addObject:v4];

  return *MEMORY[0x1E4F93C08];
}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":messageIds" toNSArray:*(void *)(a1 + 32)];
}

- (void)pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler:(id)a3
{
  id v14 = a3;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEFAULT, "Pruning mail intelligence data older than one year", buf, 2u);
  }

  *(void *)long long buf = 0;
  id v20 = buf;
  uint64_t v21 = 0x2810000000;
  id v22 = "";
  uint64_t v23 = 0;
  double v5 = objc_opt_new();
  [v5 timeIntervalSince1970];
  uint64_t v23 = v6;

  BOOL v7 = 0;
  *((double *)v20 + 4) = *((double *)v20 + 4) + -31536000.0;
  while (1)
  {
    id v8 = objc_opt_new();
    db = self->_db;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke;
    v18[3] = &unk_1E65BE490;
    void v18[4] = buf;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke_2;
    void v15[3] = &unk_1E65BFFA0;
    id v10 = v8;
    id v16 = v10;
    uint64_t v17 = 500;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT messageId FROM mailIntelligence_saliency WHERE creationTimestamp < :time" onPrep:v18 onRow:v15 onError:0];
    if (![v10 count]) {
      break;
    }
    if (v7)
    {
      if ([v10 containsObject:v7])
      {
        id v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Deleting.m" lineNumber:156 description:@"possible infinite loop"];
      }
    }
    [(SGSqlEntityStore *)self deleteMailIntelligenceForMessageIds:v10];
    uint64_t v11 = [v10 objectAtIndexedSubscript:0];

    BOOL v7 = (void *)v11;
  }

  _Block_object_dispose(buf, 8);
}

uint64_t __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":time" toDouble:*(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 32)];
}

uint64_t __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 nonnullNSStringForColumnName:"messageId" table:0];
  [*(id *)(a1 + 32) addObject:v3];
  unint64_t v4 = [*(id *)(a1 + 32) count];
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  BOOL v7 = (unsigned __int8 *)MEMORY[0x1E4F93C10];

  if (v4 >= v5) {
    id v8 = v7;
  }
  else {
    id v8 = v6;
  }
  return *v8;
}

- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4 batchSize:(unint64_t)a5
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t (**)(void))a4;
  if (!a5)
  {
    id v20 = [MEMORY[0x1E4F28B00] currentHandler];
    [v20 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Deleting.m", 94, @"Invalid parameter not satisfying: %@", @"batchSize > 0" object file lineNumber description];
  }
  int v10 = [MEMORY[0x1E4F5DAF0] showPastEvents];
  uint64_t v11 = sgLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      id v13 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:a3.secondsFromUnixEpoch];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, "*** Not pruning entities older than %{public}@ because showPastEvents is enabled! ***", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (v12)
    {
      id v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:a3.secondsFromUnixEpoch];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, "Pruning entities older than %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = -1;
    do
    {
      id v15 = (void *)MEMORY[0x1CB79B230]();
      id v16 = objc_opt_new();
      db = self->_db;
      p_long long buf = &buf;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke;
      v24[3] = &unk_1E65B8800;
      v24[5] = *(SGUnixTimestamp_ *)&a3.secondsFromUnixEpoch;
      void v24[4] = &buf;
      v24[6] = a5;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      void v21[2] = __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke_2;
      v21[3] = &unk_1E65B8828;
      id v18 = v16;
      id v22 = v18;
      [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT rowid AS minId, key FROM emailMetadata WHERE creationTimestamp < :time AND rowid > :minId ORDER BY rowid LIMIT :limit" onPrep:v24 onRow:v21 onError:0];
      [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v18 emitChangeNotifications:1];
      if (v9 && (v9[2](v9) & 1) != 0) {
        int v19 = 4;
      }
      else {
        int v19 = 4 * ([v18 count] < a5);
      }
    }
    while (!v19);
    _Block_object_dispose(&buf, 8);
  }
}

void __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke(double *a1, void *a2)
{
  double v3 = a1[5];
  id v4 = a2;
  [v4 bindNamedParam:":time" toDouble:v3];
  [v4 bindNamedParam:":minId" toInt64:*(void *)(*(void *)(*((void *)a1 + 4) + 8) + 24)];
  [v4 bindNamedParam:":limit" toInt64:*((void *)a1 + 6)];
}

uint64_t __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 getInt64ForColumnAlias:"minId"];
  id v4 = [v3 nonnullNSStringForColumnName:"key" table:0];

  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v4 entityType:5 serializedParentKey:0];
  [v5 addObject:v6];

  return 0;
}

- (void)pruneEntitiesOlderThanOneYearWithSuspensionHandler:(id)a3
{
  id v7 = a3;
  id v4 = objc_opt_new();
  [v4 timeIntervalSince1970];
  double v6 = v5;

  [(SGSqlEntityStore *)self pruneEntitiesOlderThan:v7 suspensionHandler:100 batchSize:v6 + -31536000.0];
}

- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4
{
}

- (void)_removeSnippetsForEmails:(id)a3
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [NSString alloc];
    double v6 = qmarksSeparatedByCommas([v4 count]);
    id v7 = (void *)[v5 initWithFormat:@"DELETE FROM emailSnippets WHERE emailId IN (%@)", v6];

    snippetsJournal = self->_snippetsJournal;
    int v10 = @"qmarksSeparatedByCommas";
    v11[0] = v4;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    [(SGDatabaseJournal *)snippetsJournal runQuery:v7 values:v9 onDb:self->_snippetDb];
  }
}

- (void)removeSnippetsForEntities:(id)a3
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [NSString alloc];
    double v6 = qmarksSeparatedByCommas([v4 count]);
    id v7 = (void *)[v5 initWithFormat:@"DELETE FROM snippets WHERE entityId IN (%@)", v6];

    snippetsJournal = self->_snippetsJournal;
    int v10 = @"qmarksSeparatedByCommas";
    v11[0] = v4;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    [(SGDatabaseJournal *)snippetsJournal runQuery:v7 values:v9 onDb:self->_snippetDb];
  }
}

- (void)applyCappingPolicy:(id)a3 byDiscardingTokensCounts:(id)a4 withMargin:(float)a5
{
  id v6 = a3;
  id v7 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v7 applyCappingPolicy:v6 shouldContinue:0];
}

- (id)getViolationsToTokenCountsPolicy:(id)a3
{
  return (id)MEMORY[0x1E4F1CC08];
}

- (void)deleteTokensForDeletedEmailAddresses:(id)a3
{
  id v4 = a3;
  id v5 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v5 deleteTokensForDeletedEmailAddresses:v4];
}

- (id)getSGMIStoredAddresses
{
  uint64_t v2 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  id v3 = [v2 getSGMIStoredAddresses];

  return v3;
}

- (void)purgeTokensWhichLastUpdateWasBefore:(id)a3
{
  id v4 = a3;
  id v5 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v5 purgeTokensWhichLastUpdateWasBefore:v4 shouldContinue:0];
}

- (id)subModelsStats
{
  uint64_t v2 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  id v3 = [v2 subModelsStats];

  return v3;
}

- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 minCount:(unint64_t)a4 minScore:(double)a5 limit:(unint64_t)a6
{
  int v10 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  uint64_t v11 = [v10 sortedUnsubscriptionOpportunitiesForField:a3 minCount:a4 minScore:a6 limit:a5];

  return v11;
}

- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 limit:(unint64_t)a4
{
  return [(SGSqlEntityStore *)self sortedUnsubscriptionOpportunitiesForField:a3 minCount:50 minScore:a4 limit:0.8];
}

- (BOOL)areSubModelsEmpty
{
  uint64_t v2 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  char v3 = [v2 areSubmodelsEmpty];

  return v3;
}

- (id)getUnsubscriptionOpportunitiesSuggestionsDenyListForField:(int64_t)a3
{
  id v4 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  id v5 = [v4 getUnsubscriptionOpportunitiesSuggestionsDenyListForField:a3];

  return v5;
}

- (void)preventUnsubscriptionOpportunitiesSuggestionsForField:(int64_t)a3 toValues:(id)a4
{
  id v6 = a4;
  id v7 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v7 setUnsubscriptionOpportunitiesSuggestionsDenyListForField:a3 toValues:v6];
}

- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4 updateDate:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v10 commitNaiveBayesModel:v9 probabilityFeatureName:a4 updateDate:v8];
}

- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4
{
  id v6 = (void *)MEMORY[0x1E4F1C9C8];
  id v7 = a3;
  id v8 = [v6 date];
  [(SGSqlEntityStore *)self commitNaiveBayesModel:v7 probabilityFeatureName:a4 updateDate:v8];
}

- (void)deleteNaiveBayesModelForProbabilityFeatureName:(int64_t)a3
{
  id v4 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  [v4 deleteNaiveBayesModelForProbabilityFeatureName:a3];
}

- (id)highlyDiscriminantTokensForFeature:(int64_t)a3 minCount:(unint64_t)a4 minRatio:(double)a5
{
  id v8 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  id v9 = [v8 highlyDiscriminantTokensForFeature:a3 minCount:a4 minRatio:a5];

  return v9;
}

- (id)naiveBayesModelQueryResultForFeature:(int64_t)a3 unigramTokens:(id)a4 bigramTokens:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = [(SGSqlEntityStore *)self sgmiFeatureStore];
  uint64_t v11 = [v10 naiveBayesModelQueryResultForFeature:a3 unigramTokens:v9 bigramTokens:v8];

  return v11;
}

- (float)_scoreContactDetail:(id)a3
{
  id v3 = a3;
  id v4 = [v3 label];
  uint64_t v5 = [v4 length];

  if (v5) {
    float v6 = 3.0;
  }
  else {
    float v6 = 0.0;
  }
  id v7 = [v3 extractionInfo];

  uint64_t v8 = [v7 extractionType];
  float result = v6 + 1.0;
  if (v8 == 2) {
    float result = v6 + 2.0;
  }
  if (!v8) {
    return v6;
  }
  return result;
}

- (id)columnQueryPrefixSelect
{
  if (self->_entityVersion <= 0x3D) {
    return @"SELECT e.id,e.entityKey,e.entityType,ep.extractionType,ep.sourceKey,e.author,e.title,e.creationTimestamp,e.updateTimestamp,e.indexTimestamp,e.tags,e.structuredData,e.quality,e.masterEntityId,e.groupId,e.state,ep.parentKey,e.timeRangeStart,e.timeRangeEnd,e.floatingRange,e.timeRangeStartUTCOffsetSeconds,e.timeRangeEndUTCOffsetSeconds,e.locations ";
  }
  else {
    return @"SELECT e.id,e.entityKey,e.entityType,ep.extractionType,ep.sourceKey,e.author,e.title,e.creationTimestamp,e.updateTimestamp,e.indexTimestamp,e.tags,e.structuredData,e.quality,e.masterEntityId,e.groupId,e.state,ep.parentKey,e.timeRangeStart,e.timeRangeEnd,e.floatingRange,e.timeRangeStartUTCOffsetSeconds,e.timeRangeEndUTCOffsetSeconds,e.locations,ep.modelVersion,ep.modelConfidence, e.harvestedOnBuild ";
  }
}

- (void)selectAuthoritativeDetailsForContactWithId:(int64_t)a3
{
  db = self->_db;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke;
  v4[3] = &unk_1E65BF9C0;
  void v4[4] = self;
  void v4[5] = a3;
  [(SGSqliteDatabase *)db writeTransaction:v4];
}

void __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  long long v29 = &v28;
  uint64_t v30 = 0x3032000000;
  long long v31 = __Block_byref_object_copy__17660;
  long long v32 = __Block_byref_object_dispose__17661;
  id v33 = 0;
  id v33 = (id)objc_opt_new();
  uint64_t v1 = [*(id *)(a1 + 32) selectEntityQuery:@"WHERE e.groupId = :groupId"];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 8);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_2;
  v27[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v27[4] = *(void *)(a1 + 40);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_3;
  v26[3] = &unk_1E65BFDD0;
  v26[4] = v2;
  v26[5] = &v28;
  [v3 prepAndRunQuery:v1 onPrep:v27 onRow:v26 onError:0];
  if ([(id)v29[5] count])
  {
    uint64_t v17 = v1;
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = [MEMORY[0x1E4F5DB20] recordIdWithNumericValue:*(void *)(a1 + 40)];
    id v18 = [v4 masterEntityIdForContactOrContactDetailRecord:v5];

    [*(id *)(a1 + 32) deleteSerializedContactForId:*(void *)(a1 + 40)];
    objc_msgSend(*(id *)(a1 + 32), "deleteSerializedContactForId:", objc_msgSend(v18, "rowId"));
    id v6 = objc_alloc(MEMORY[0x1E4F1CA48]);
    id v7 = objc_msgSend(v6, "initWithCapacity:", objc_msgSend((id)v29[5], "count") + 2);
    objc_msgSend(v7, "addObject:", @"UPDATE entity SET masterEntityId = (CASE id");
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = (id)v29[5];
    uint64_t v8 = [obj countByEnumeratingWithState:&v22 objects:v34 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v23;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v23 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = [(id)v29[5] objectForKeyedSubscript:*(void *)(*((void *)&v22 + 1) + 8 * v10)];
          id v12 = [NSString alloc];
          id v13 = [v11 first];
          id v14 = [v13 recordId];
          id v15 = objc_msgSend(v12, "initWithFormat:", @"WHEN %lld THEN %lld", objc_msgSend(v14, "rowId"), *(void *)(a1 + 40));
          [v7 addObject:v15];

          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [obj countByEnumeratingWithState:&v22 objects:v34 count:16];
      }
      while (v8);
    }

    [v7 addObject:@"ELSE -1 END WHERE groupId = :groupId"]);
    uint64_t v1 = objc_msgSend(v7, "_pas_componentsJoinedByString:", @" ");

    id v16 = *(void **)(*(void *)(a1 + 32) + 8);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_305;
    v21[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    void v21[4] = *(void *)(a1 + 40);
    [v16 prepAndRunQuery:v1 onPrep:v21 onRow:0 onError:0];
  }
  _Block_object_dispose(&v28, 8);
}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":groupId" int64:*(void *)(a1 + 32)];
}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  id v4 = +[SGContactDetail contactDetailFromEntity:v3];
  uint64_t v5 = [v3 duplicateKey];
  uint64_t v6 = [v5 entityType];

  switch(v6)
  {
    case 6:
    case 9:
      id v7 = [v4 value];
      uint64_t v8 = SGNormalizePhoneNumber();
      goto LABEL_10;
    case 7:
    case 10:
      id v7 = [v4 value];
      uint64_t v8 = SGNormalizeAddress(v7);
      goto LABEL_10;
    case 8:
    case 11:
      id v7 = [v4 value];
      uint64_t v8 = SGNormalizeEmailAddress();
      goto LABEL_10;
    case 15:
      id v7 = [v4 value];
      uint64_t v8 = SGNormalizeInstantMessageAddress(v7);
      goto LABEL_10;
    case 19:
      uint64_t v10 = [v4 value];
      SGNormalizeSocialProfile(v10);
      objc_claimAutoreleasedReturnValue();

      goto LABEL_11;
    case 20:
    case 21:
      id v7 = [v4 value];
      uint64_t v8 = SGNormalizeBirthday(v7);
LABEL_10:
      uint64_t v10 = (void *)v8;

      goto LABEL_11;
    case 23:
      uint64_t v10 = [v4 value];
LABEL_11:
      uint64_t v11 = NSNumber;
      [*(id *)(a1 + 32) _scoreContactDetail:v4];
      id v12 = objc_msgSend(v11, "numberWithFloat:");
      id v13 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:v10];
      id v14 = v13;
      if (!v13
        || ([v13 second],
            id v15 = objc_claimAutoreleasedReturnValue(),
            uint64_t v16 = [v12 compare:v15],
            v15,
            v16 == 1))
      {
        uint64_t v17 = [MEMORY[0x1E4F93BB8] tupleWithFirst:v3 second:v12];
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v17 forKeyedSubscript:v10];
      }
      break;
    default:
      uint64_t v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v19 = [v3 duplicateKey];
        [v19 entityType];
        id v20 = SGEntityTypeDescription();
        int v21 = 138412290;
        long long v22 = v20;
        _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "GroupID lookup found unexpected entity type for contact detail (%@)", (uint8_t *)&v21, 0xCu);
      }
      break;
  }

  return 0;
}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_305(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":groupId" int64:*(void *)(a1 + 32)];
}

- (BOOL)clearDatabases
{
  int64_t v3 = [(SGSqlEntityStore *)self unmigrateDatabases];
  [(SGSqlEntityStore *)self vacuum];
  return v3 == 1;
}

- (void)vacuum
{
  [(SGSqliteDatabase *)self->_db vacuum];
  snippetDb = self->_snippetDb;
  [(SGSqliteDatabase *)snippetDb vacuum];
}

- (void)clearAllTables
{
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke;
  void v6[3] = &unk_1E65BFD88;
  id v7 = &unk_1F25369F8;
  uint64_t v8 = self;
  [(SGSqliteDatabase *)db writeTransaction:v6];
  if ([(SGSqlEntityStore *)self isEphemeral])
  {
    id v4 = self->_db;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_2;
    v5[3] = &unk_1E65BEF88;
    void v5[4] = self;
    [(SGSqliteDatabase *)v4 writeTransaction:v5];
  }
}

uint64_t __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*(void *)(a1 + 40) + 8), "prepAndRunQuery:onPrep:onRow:onError:", *(void *)(*((void *)&v8 + 1) + 8 * v6++), 0, 0, 0, (void)v8);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return [*(id *)(*(void *)(a1 + 40) + 24) prepAndRunNonDataQueries:&unk_1F2536A10 onError:0];
}

uint64_t __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_2(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"INSERT INTO sqlite_sequence(name, seq) SELECT value, :minId FROM _pas_nsarray(:tableNames)", &__block_literal_global_281, 0, 0 onPrep onRow onError];
}

void __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 bindNamedParam:":minId" toInt64:30000000000000000];
  [v2 bindNamedParam:":tableNames" toNSArray:&unk_1F2536A28];
}

- (void)analyzeDatabase
{
}

- (id)dbStats
{
  uint64_t v48 = 0;
  long long v49 = &v48;
  uint64_t v50 = 0x3032000000;
  long long v51 = __Block_byref_object_copy__17660;
  uint64_t v52 = __Block_byref_object_dispose__17661;
  id v53 = 0;
  id v53 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:20];
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[SGSqliteDatabase userVersion](self->_db, "userVersion"));
  [(id)v49[5] setObject:v3 forKeyedSubscript:@"schema_version"];

  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"entity"]
    && [(SGSqliteDatabase *)self->_db hasTableNamed:@"emailMetadata"])
  {
    uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:5];
    [(id)v49[5] setObject:v4 forKeyedSubscript:@"entities"];

    uint64_t v44 = 0;
    BOOL v45 = &v44;
    uint64_t v46 = 0x2020000000;
    int v47 = 0;
    db = self->_db;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 3221225472;
    v43[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke;
    v43[3] = &unk_1E65B8AB8;
    void v43[4] = &v48;
    v43[5] = &v44;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT entityType, COUNT(*) FROM entity GROUP BY entityType UNION SELECT type, COUNT(*) FROM emailMetadata GROUP BY type" onPrep:0 onRow:v43 onError:&__block_literal_global_17743];
    uint64_t v6 = [NSNumber numberWithInt:*((unsigned int *)v45 + 6)];
    [(id)v49[5] setObject:v6 forKeyedSubscript:@"total_entities"];

    id v7 = self->_db;
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_82;
    v42[3] = &unk_1E65BEBB0;
    void v42[4] = &v48;
    [(SGSqliteDatabase *)v7 prepAndRunQuery:@"SELECT COUNT(id) FROM entity WHERE masterEntityId > 0 AND entityType = :entityType" onPrep:&__block_literal_global_81_17746 onRow:v42 onError:&__block_literal_global_87];
    _Block_object_dispose(&v44, 8);
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"serializedContacts"])
  {
    long long v8 = self->_db;
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_94;
    v41[3] = &unk_1E65BFDD0;
    void v41[4] = self;
    v41[5] = &v48;
    [(SGSqliteDatabase *)v8 prepAndRunQuery:@"SELECT count(*), MIN(entityId), MAX(entityId) FROM serializedContacts" onPrep:0 onRow:v41 onError:&__block_literal_global_109_17749];
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"entity_fts"])
  {
    long long v9 = self->_db;
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    void v40[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_116;
    v40[3] = &unk_1E65BEBB0;
    v40[4] = &v48;
    [(SGSqliteDatabase *)v9 prepAndRunQuery:@"SELECT count(*) FROM entity_fts" onPrep:0 onRow:v40 onError:&__block_literal_global_122_17752];
    long long v10 = self->_db;
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_126;
    v39[3] = &unk_1E65BEBB0;
    v39[4] = &v48;
    [(SGSqliteDatabase *)v10 prepAndRunQuery:@"SELECT count(*) FROM entity_fts WHERE docid != entityId" onPrep:0 onRow:v39 onError:&__block_literal_global_132];
    long long v11 = [(SGSqliteDatabase *)self->_db languageForFTSTable:@"entity_fts"];
    [(id)v49[5] setObject:v11 forKeyedSubscript:@"entity_fts_lang"];
  }
  if (![(SGDatabaseJournal *)self->_snippetsJournal journaling]
    && [(SGSqliteDatabase *)self->_snippetDb hasTableNamed:@"snippets"]
    && [(SGSqliteDatabase *)self->_snippetDb hasTableNamed:@"emailSnippets"])
  {
    snippetDb = self->_snippetDb;
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_145;
    v38[3] = &unk_1E65BEBB0;
    v38[4] = &v48;
    [(SGSqliteDatabase *)snippetDb prepAndRunQuery:@"SELECT (SELECT COUNT(*) FROM snippets) + (SELECT COUNT(*) FROM emailSnippets)" onPrep:0 onRow:v38 onError:&__block_literal_global_151];
    uint64_t v13 = self->_snippetDb;
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_155;
    v37[3] = &unk_1E65BEBB0;
    v37[4] = &v48;
    [(SGSqliteDatabase *)v13 prepAndRunQuery:@"SELECT (SELECT COUNT(*) FROM snippets WHERE title IS NOT NULL AND title != '') + (SELECT COUNT(*) FROM emailSnippets WHERE title IS NOT NULL AND title != '')" onPrep:0 onRow:v37 onError:&__block_literal_global_161];
    id v14 = self->_snippetDb;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    void v36[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_165;
    v36[3] = &unk_1E65BEBB0;
    v36[4] = &v48;
    [(SGSqliteDatabase *)v14 prepAndRunQuery:@"SELECT (SELECT COUNT(*) FROM snippets WHERE content IS NOT NULL AND content != '') + (SELECT COUNT(*) FROM emailSnippets WHERE content IS NOT NULL AND content != '')" onPrep:0 onRow:v36 onError:&__block_literal_global_171_17760];
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"harvestQueueTombstones"])
  {
    id v15 = self->_db;
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_178;
    v35[3] = &unk_1E65BEBB0;
    void v35[4] = &v48;
    [(SGSqliteDatabase *)v15 prepAndRunQuery:@"SELECT COUNT(*) FROM harvestQueueTombstones" onPrep:0 onRow:v35 onError:&__block_literal_global_184];
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"entityParentage"])
  {
    uint64_t v16 = self->_db;
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_191;
    v34[3] = &unk_1E65BEBB0;
    void v34[4] = &v48;
    [(SGSqliteDatabase *)v16 prepAndRunQuery:@"SELECT COUNT(*) FROM entity WHERE id NOT IN (SELECT DISTINCT childId FROM entityParentage)" onPrep:0 onRow:v34 onError:&__block_literal_global_197];
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"statsCounters"])
  {
    uint64_t v17 = objc_opt_new();
    id v18 = self->_db;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_204;
    v32[3] = &unk_1E65BFF78;
    id v19 = v17;
    id v33 = v19;
    [(SGSqliteDatabase *)v18 prepAndRunSQL:@"SELECT key, value FROM statsCounters" onPrep:0 onRow:v32 onError:&__block_literal_global_210];
    [(id)v49[5] setObject:v19 forKeyedSubscript:@"statsCounters"];
  }
  id v20 = (void *)v49[5];
  int v21 = [(SGSqlEntityStore *)self reimportRequestDBStats];
  [v20 addEntriesFromDictionary:v21];

  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"urls"])
  {
    long long v22 = objc_opt_new();
    uint64_t v23 = self->_db;
    uint64_t v27 = MEMORY[0x1E4F143A8];
    uint64_t v28 = 3221225472;
    long long v29 = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_217;
    uint64_t v30 = &unk_1E65BEC60;
    id v24 = v22;
    id v31 = v24;
    [(SGSqliteDatabase *)v23 prepAndRunQuery:@"SELECT COUNT(bundle_id), bundle_id FROM urls GROUP BY bundle_id" onPrep:0 onRow:&v27 onError:0];
    objc_msgSend((id)v49[5], "setObject:forKeyedSubscript:", v24, @"urlsCounters", v27, v28, v29, v30);
  }
  id v25 = (id)v49[5];
  _Block_object_dispose(&v48, 8);

  return v25;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v2 = a2;
  sqlite3_column_int(a2, 0);
  uint64_t v4 = sqlite3_column_int(v2, 1);
  LODWORD(v2) = v4;
  uint64_t v5 = [NSNumber numberWithInt:v4];
  uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:@"entities"];
  id v7 = SGEntityTypeDescription();
  [v6 setObject:v5 forKeyedSubscript:v7];

  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v2;
  return 0;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_82(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"merged_pseudocontacts"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_94(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 1));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v4 forKeyedSubscript:@"serialized_contacts_lowest"];

  uint64_t v5 = objc_msgSend(NSNumber, "numberWithLongLong:", sqlite3_column_int64(a2, 2));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v5 forKeyedSubscript:@"serialized_contacts_highest"];

  uint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "serializedContactsLimit"));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:@"serialized_contacts_limit"];

  id v7 = objc_msgSend(NSNumber, "numberWithLongLong:", sqlite3_column_int64(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v7 forKeyedSubscript:@"serialized_contacts_total"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_116(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"entity_fts_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_126(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"entity_fts_details"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_145(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"snippets_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_155(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"snippets_title_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_165(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"snippets_content_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_178(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"tombstones_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_191(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 0));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v3 forKeyedSubscript:@"orphaned_entity_count"];

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_204(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 nonnullNSStringForColumnName:"key" table:0];
  uint64_t v5 = [v3 doubleAsNonnullNSNumberForColumnName:"value" table:0];

  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
  uint64_t v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v6;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_217(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4 = sqlite3_column_int64(a2, 0);
  uint64_t v5 = sqlite3_column_nsstring(a2, 1);
  if (v5)
  {
    uint64_t v6 = [NSNumber numberWithLongLong:v4];
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
  return 0;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_208(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to dump stats: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E4F93C10];
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_195(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count orphaned entities: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_182(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count tombstones: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_169(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets with content: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_159(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets with titles: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_149(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_130(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count details in entity_fts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_120(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count entity_fts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_107(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to calculate stats from serializedContacts table: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count merged pseudocontacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_79(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:4];
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Unable to calculate stats from entity table: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)selectEntityQuery:(id)a3
{
  sqlite3_int64 v4 = (objc_class *)NSString;
  id v5 = a3;
  id v6 = [v4 alloc];
  uint64_t v7 = [(SGSqlEntityStore *)self columnQueryPrefixSelect];
  long long v8 = (void *)[v6 initWithFormat:@"%@ FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId %@ ", v7, v5];

  return v8;
}

- (unint64_t)entityCount
{
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke;
  v9[3] = &unk_1E65BEBB0;
  void v9[4] = &v10;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT COUNT(*) FROM entity" onPrep:0 onRow:v9 onError:0];
  uint64_t v4 = v11[3];
  v11[3] = 0;
  id v5 = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke_2;
  v8[3] = &unk_1E65BEBB0;
  void v8[4] = &v10;
  [(SGSqliteDatabase *)v5 prepAndRunQuery:@"SELECT COUNT(*) FROM emailMetadata" onPrep:0 onRow:v8 onError:0];
  unint64_t v6 = v11[3] + v4;
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

uint64_t __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

- (id)allPseudoContacts
{
  return [(SGSqlEntityStore *)self allContactsWithEntityType:4];
}

- (id)allContactsWithEntityType:(unint64_t)a3
{
  id v5 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE entityType = :entityType"];
  unint64_t v6 = objc_opt_new();
  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke;
  v14[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v14[4] = a3;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke_2;
  v12[3] = &unk_1E65BED70;
  void v12[4] = self;
  id v8 = v6;
  id v13 = v8;
  [(SGSqliteDatabase *)db prepAndRunQuery:v5 onPrep:v14 onRow:v12 onError:0];
  long long v9 = v13;
  id v10 = v8;

  return v10;
}

uint64_t __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:*(void *)(a1 + 32)];
}

uint64_t __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  uint64_t v4 = +[SGContactEntity contactEntityFromEntity:v3];
  id v5 = *(void **)(a1 + 40);
  unint64_t v6 = +[SGStorageContact contactFromContactEntity:v4];
  [v5 addObject:v6];

  return 0;
}

- (id)entityFromSqlResult:(sqlite3_stmt *)a3 withSnippets:(BOOL)a4
{
  BOOL v4 = a4;
  v74[1] = *MEMORY[0x1E4F143B8];
  id v8 = objc_opt_new();
  long long v9 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a3, 0));
  [v8 setRecordId:v9];

  uint64_t v10 = sqlite3_column_nsstring(a3, 16);
  long long v11 = sqlite3_column_nsstring(a3, 1);
  if (!v11)
  {
    long long v59 = [MEMORY[0x1E4F28B00] currentHandler];
    [v59 handleFailureInMethod:a2, self, @"SGSqlEntityStore+SqlHelpers.m", 104, @"Invalid parameter not satisfying: %@", @"serializedEntityKey" object file lineNumber description];
  }
  long long v62 = (void *)v10;
  uint64_t v12 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v11 entityType:sqlite3_column_int64(a3, 2) serializedParentKey:v10];
  [v8 setDuplicateKey:v12];

  id v13 = (void *)MEMORY[0x1E4F5DA20];
  uint64_t v14 = sqlite3_column_int(a3, 3);
  id v15 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a3, 23));
  uint64_t v16 = objc_msgSend(NSNumber, "numberWithDouble:", sqlite3_column_double(a3, 24));
  uint64_t v17 = [v13 extractionInfoWithExtractionType:v14 modelVersion:v15 confidence:v16];
  [v8 setExtractionInfo:v17];

  id v18 = sqlite3_column_nsstring(a3, 4);
  [v8 setSourceKey:v18];

  id v19 = sqlite3_column_nsstring(a3, 5);
  if ([v19 length])
  {
    id v20 = objc_alloc(MEMORY[0x1E4F23810]);
    int v21 = objc_msgSend(v20, "sg_initWithSerializedForm:", v19);

    if (!v21)
    {
      long long v22 = [MEMORY[0x1E4F5DB38] namedEmailAddressWithFieldValue:v19];
      int v21 = [v22 emailAddress];

      if (v21)
      {
        id v61 = objc_alloc(MEMORY[0x1E4F23810]);
        long long v60 = [v22 name];
        uint64_t v23 = [v22 emailAddress];
        v74[0] = v23;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v74 count:1];
        BOOL v24 = v4;
        id v25 = v11;
        v27 = uint64_t v26 = self;
        int v21 = (void *)[v61 initWithDisplayName:v60 handles:v27 handleIdentifier:*MEMORY[0x1E4F1ADC8]];

        self = v26;
        long long v11 = v25;
        BOOL v4 = v24;
      }
    }
    [v8 setAuthor:v21];
  }
  [v8 setContent:0];
  uint64_t v28 = sqlite3_column_nsstring(a3, 6);
  [v8 setTitle:v28];

  if (v4 && ![(SGDatabaseJournal *)self->_snippetsJournal journaling])
  {
    snippetDb = self->_snippetDb;
    v71[0] = MEMORY[0x1E4F143A8];
    v71[1] = 3221225472;
    v71[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke;
    v71[3] = &unk_1E65C05C8;
    id v72 = v8;
    v69[0] = MEMORY[0x1E4F143A8];
    v69[1] = 3221225472;
    v69[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_2;
    v69[3] = &unk_1E65BEC60;
    id v70 = v72;
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 3221225472;
    v67[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_3;
    v67[3] = &unk_1E65C0660;
    id v68 = v70;
    [(SGSqliteDatabase *)snippetDb prepAndRunQuery:@"SELECT title, content, contentRangeOfInterest FROM snippets WHERE entityId=?" onPrep:v71 onRow:v69 onError:v67];
  }
  double v30 = sqlite3_column_double(a3, 17);
  double v31 = sqlite3_column_double(a3, 18);
  sqlite3_int64 v32 = sqlite3_column_int64(a3, 20);
  sqlite3_int64 v33 = sqlite3_column_int64(a3, 21);
  int v34 = sqlite3_column_int(a3, 19);
  if (v30 != 0.0 && v31 != 0.0)
  {
    uint64_t v35 = (void *)MEMORY[0x1E4F5DB40];
    if (v34)
    {
      uint64_t v36 = [MEMORY[0x1E4F5DB40] floatingRangeWithUTCStart:v30 end:v31];
      [v8 setTimeRange:v36];
    }
    else
    {
      uint64_t v36 = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:v32];
      uint64_t v37 = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:v33];
      uint64_t v38 = [v35 rangeWithStart:v36 startTimeZone:v37 end:v30 endTimeZone:v31];
      [v8 setTimeRange:v38];
    }
  }
  objc_msgSend(v8, "setCreationTimestamp:", sqlite3_column_double(a3, 7));
  objc_msgSend(v8, "setLastModifiedTimestamp:", sqlite3_column_double(a3, 8));
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  int v39 = sqlite3_column_nsstring(a3, 10);
  BOOL v40 = SGEntityTagsFromStorage(v39);

  uint64_t v41 = [v40 countByEnumeratingWithState:&v63 objects:v73 count:16];
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        if (*(void *)v64 != v43) {
          objc_enumerationMutation(v40);
        }
        [v8 addTag:*(void *)(*((void *)&v63 + 1) + 8 * i)];
      }
      uint64_t v42 = [v40 countByEnumeratingWithState:&v63 objects:v73 count:16];
    }
    while (v42);
  }

  BOOL v45 = sqlite3_column_blob(a3, 11);
  uint64_t v46 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v45, sqlite3_column_bytes(a3, 11));
  [v8 setStructuredData:v46];

  objc_msgSend(v8, "setQuality:", sqlite3_column_double(a3, 12));
  objc_msgSend(v8, "setMasterEntityId:", sqlite3_column_int64(a3, 13));
  if ([v8 masterEntityId] < 0)
  {
    int v47 = [v8 recordId];
    objc_msgSend(v8, "setMasterEntityId:", objc_msgSend(v47, "rowId"));
  }
  objc_msgSend(v8, "setGroupId:", sqlite3_column_int64(a3, 14));
  uint64_t v48 = objc_msgSend(v8, "setState:", sqlite3_column_int(a3, 15));
  long long v49 = (void *)MEMORY[0x1CB79B230](v48);
  id v50 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v51 = objc_opt_class();
  uint64_t v52 = objc_msgSend(v50, "initWithObjects:", v51, objc_opt_class(), 0);
  id v53 = sqlite3_column_nssecurecoding(a3, 22, v52);
  if (v53)
  {
    [v8 setLocations:v53];
  }
  else
  {
    char v54 = objc_opt_new();
    [v8 setLocations:v54];
  }
  uint64_t v55 = sqlite3_column_nsstring(a3, 25);
  id v56 = (void *)v55;
  if (v55) {
    uint64_t v57 = (__CFString *)v55;
  }
  else {
    uint64_t v57 = &stru_1F24EEF20;
  }
  [v8 setOperatingSystemVersion:v57];

  return v8;
}

void __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = [*(id *)(a1 + 32) recordId];
  sqlite3_bind_int64(a2, 1, [v3 rowId]);
}

uint64_t __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  BOOL v4 = [*(id *)(a1 + 32) title];

  if (!v4)
  {
    id v5 = sqlite3_column_nsstring(a2, 0);
    [*(id *)(a1 + 32) setTitle:v5];
  }
  unint64_t v6 = sqlite3_column_nsstring(a2, 1);
  [*(id *)(a1 + 32) setContent:v6];

  sqlite3_column_nsstring(a2, 2);
  uint64_t v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  id v8 = v7;
  if (v7)
  {
    NSRange v9 = NSRangeFromString(v7);
    objc_msgSend(*(id *)(a1 + 32), "setContentRangeOfInterest:", v9.location, v9.length);
  }

  return 1;
}

uint64_t __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_3(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) recordId];
    int v5 = 138412290;
    unint64_t v6 = v3;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "failed to load snippet data for entity: %@", (uint8_t *)&v5, 0xCu);
  }
  return 1;
}

- (id)entityFromSqlResult:(sqlite3_stmt *)a3
{
  return [(SGSqlEntityStore *)self entityFromSqlResult:a3 withSnippets:1];
}

- (BOOL)databasecheck_contactMergeGroupConsistency
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke;
  v5[3] = &unk_1E65BF380;
  void v5[5] = &v6;
  void v5[6] = a2;
  void v5[4] = self;
  [(SGSqliteDatabase *)db readTransaction:v5];
  char v3 = *((unsigned char *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v2 = objc_opt_new();
  char v3 = *(void **)(a1[4] + 8);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_3;
  v39[3] = &unk_1E65BEC60;
  id v4 = v2;
  id v40 = v4;
  [v3 prepAndRunQuery:@"SELECT DISTINCT masterEntityId FROM entity WHERE masterEntityId >= 0 AND masterEntityId != id AND entityType = :pseudo" onPrep:&__block_literal_global_17983 onRow:v39 onError:0];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (v5)
  {
    uint64_t v22 = *(void *)v36;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v36 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v35 + 1) + 8 * v6);
        uint64_t v31 = 0;
        sqlite3_int64 v32 = &v31;
        uint64_t v33 = 0x2020000000;
        uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v8 = *(void **)(a1[4] + 8);
        v29[4] = &v31;
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 3221225472;
        v30[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_4;
        v30[3] = &unk_1E65C05C8;
        v30[4] = v7;
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 3221225472;
        v29[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_5;
        v29[3] = &unk_1E65BEBB0;
        [v8 prepAndRunQuery:@"SELECT MIN(id) FROM entity WHERE masterEntityId = :masterEntityId AND entityType = :pseudo" onPrep:v30 onRow:v29 onError:0];
        if (v32[3] == 0x7FFFFFFFFFFFFFFFLL)
        {
          id v20 = [MEMORY[0x1E4F28B00] currentHandler];
          [v20 handleFailureInMethod:a1[6] object:a1[4] file:@"SGSqlEntityStore+DatabaseCheck.m" lineNumber:155 description:@"Failed to find merge group minimal element"];
        }
        uint64_t v9 = [v7 rowId];
        if (v9 != v32[3])
        {
          id v10 = [NSString alloc];
          uint64_t v11 = [v7 rowId];
          id v12 = objc_msgSend(v10, "initWithFormat:", @" * merge group with masterEntityId %lld has unexpected minimal element %lld", v11, v32[3]);
          puts((const char *)[v12 UTF8String]);

          *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
        }
        uint64_t v25 = 0;
        uint64_t v26 = &v25;
        uint64_t v27 = 0x2020000000;
        uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        id v13 = *(void **)(a1[4] + 8);
        void v23[4] = &v25;
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_6;
        v24[3] = &unk_1E65C05C8;
        void v24[4] = v7;
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_7;
        v23[3] = &unk_1E65BEBB0;
        [v13 prepAndRunQuery:@"SELECT masterEntityId FROM entity WHERE id = :mergeId" onPrep:v24 onRow:v23 onError:0];
        uint64_t v14 = v26[3];
        if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        {
          id v15 = (id) [[NSString alloc] initWithFormat:@" * merge group has masterEntityId %lld, but there is no row with id == %lld", objc_msgSend(v7, "rowId"), objc_msgSend(v7, "rowId")];
          uint64_t v16 = (const char *)[v15 UTF8String];
        }
        else
        {
          if (v14 == v32[3]) {
            goto LABEL_15;
          }
          id v17 = [NSString alloc];
          uint64_t v18 = [v7 rowId];
          uint64_t v19 = [v7 rowId];
          id v15 = (id) [v17 initWithFormat:@" * merge group has masterEntityId %lld, but the row with entity.id == %lld has masterEntityId == %lld", v18, v19, v26[3]];
          uint64_t v16 = (const char *)[v15 UTF8String];
        }
        puts(v16);

        *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
LABEL_15:
        _Block_object_dispose(&v25, 8);
        _Block_object_dispose(&v31, 8);
        ++v6;
      }
      while (v5 != v6);
      uint64_t v5 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
    }
    while (v5);
  }
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = sqlite3_column_int64(a2, 0);
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v3];
  [v4 addObject:v5];

  return 0;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_4(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", [*(id *)(a1 + 32) rowId]);
  return +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":mergeId" int64:v3];
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_7(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
}

- (BOOL)databasecheck_BrokenEntityIDReferences
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v2 = [(SGSqliteDatabase *)self->_db tablesWithColumnNamed:@"entityId"];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v3)
  {
    uint64_t v15 = *(void *)v22;
    id obj = v2;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        id v6 = (id) [[NSString alloc] initWithFormat:@"Broken entityId reference check: %@", v5];
        puts((const char *)[v6 UTF8String]);

        uint64_t v7 = objc_opt_new();
        db = self->_db;
        uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"SELECT entityId, * FROM %@ WHERE entityId NOT IN (SELECT id FROM entity)", v5];
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        v18[2] = __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke;
        v18[3] = &unk_1E65BFDD0;
        id v10 = v7;
        id v19 = v10;
        id v20 = &v25;
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke_2;
        v17[3] = &unk_1E65C0610;
        uint8_t v17[4] = v5;
        void v17[5] = &v25;
        [(SGSqliteDatabase *)db prepAndRunQuery:v9 onPrep:0 onRow:v18 onError:v17];

        id v11 = (id) [[NSString alloc] initWithFormat:&stru_1F24EEF20];
        puts((const char *)[v11 UTF8String]);
      }
      id v2 = obj;
      uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v3);
  }

  char v12 = *((unsigned char *)v26 + 24);
  _Block_object_dispose(&v25, 8);
  return v12;
}

uint64_t __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke(uint64_t a1, sqlite3_stmt *pStmt)
{
  int v4 = sqlite3_column_count(pStmt);
  uint64_t v5 = sqlite3_column_nsstring(pStmt, 0);
  if (v4 >= 2)
  {
    uint64_t v6 = v4;
    for (uint64_t i = 1; i != v6; ++i)
    {
      uint64_t v8 = sqlite3_column_nsstring(pStmt, i);
      if (v8)
      {
        [*(id *)(a1 + 32) setObject:v8 atIndexedSubscript:i - 1];
      }
      else
      {
        uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
        [*(id *)(a1 + 32) setObject:v9 atIndexedSubscript:i - 1];
      }
    }
  }
  id v10 = [NSString alloc];
  id v11 = objc_msgSend(*(id *)(a1 + 32), "_pas_componentsJoinedByString:", @" | ");
  id v12 = (id) [v10 initWithFormat:@"[%@]\t%@", v5, v11];
  puts((const char *)[v12 UTF8String]);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

uint64_t __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke_2(uint64_t a1)
{
  id v2 = (id) [[NSString alloc] initWithFormat:@"Failed to check for entityId broken reference in %@", *(void *)(a1 + 32)];
  puts((const char *)[v2 UTF8String]);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

- (BOOL)databasecheck_IntegrityCheck
{
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 1;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke;
  v11[3] = &unk_1E65BEBB0;
  void v11[4] = &v12;
  uint64_t v3 = (void *)MEMORY[0x1CB79B4C0](v11, a2);
  id v4 = (id) [[NSString alloc] initWithFormat:@"Integrity check of entities.db"];
  puts((const char *)[v4 UTF8String]);

  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_2;
  v10[3] = &unk_1E65BE468;
  void v10[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"PRAGMA integrity_check" onPrep:0 onRow:v3 onError:v10];
  id v6 = (id) [[NSString alloc] initWithFormat:@"Integrity check of snippets.db"];
  puts((const char *)[v6 UTF8String]);

  snippetDb = self->_snippetDb;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_3;
  v9[3] = &unk_1E65BE468;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)snippetDb prepAndRunQuery:@"PRAGMA integrity_check" onPrep:0 onRow:v3 onError:v9];
  LOBYTE(self) = *((unsigned char *)v13 + 24);

  _Block_object_dispose(&v12, 8);
  return (char)self;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  id v4 = (id) [[NSString alloc] initWithFormat:@"%@", v3];
  puts((const char *)[v4 UTF8String]);

  if (([v3 isEqualToString:@"ok"] & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }

  return 0;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = (objc_class *)NSString;
  id v4 = a2;
  uint64_t v5 = (void *)[[v3 alloc] initWithFormat:@"Error: failed to run integrity_check on entities.db: %@", v4];

  id v6 = v5;
  puts((const char *)[v6 UTF8String]);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = (objc_class *)NSString;
  id v4 = a2;
  uint64_t v5 = (void *)[[v3 alloc] initWithFormat:@"Error: failed to run integrity_check on snippets.db: %@", v4];

  id v6 = v5;
  puts((const char *)[v6 UTF8String]);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

- (BOOL)performIntegrityCheckOnly
{
  id v3 = [NSString alloc];
  id v4 = _bold(@"**** Integrity check");
  id v5 = (id) [v3 initWithFormat:@"\n%@", v4];
  puts((const char *)[v5 UTF8String]);

  return [(SGSqlEntityStore *)self databasecheck_IntegrityCheck];
}

- (BOOL)performDatabaseCheck
{
  unsigned int outCount = 0;
  id v2 = (objc_class *)objc_opt_class();
  id v3 = class_copyMethodList(v2, &outCount);
  if (outCount)
  {
    id v4 = v3;
    unint64_t v5 = 0;
    int v6 = 1;
    do
    {
      Name = method_getName(v4[v5]);
      if (Name)
      {
        uint64_t v8 = Name;
        uint64_t v9 = sel_getName(Name);
        if (!strncmp(v9, "databasecheck_", 0xEuLL))
        {
          long long v24 = (uint64_t (*)(SGSqlEntityStore *, const char *))[(SGSqlEntityStore *)self methodForSelector:v8];
          id v10 = objc_msgSend([NSString alloc], "initWithFormat:", @"%s", v9 + 14);
          id v11 = [NSString alloc];
          uint64_t v12 = (void *)[[NSString alloc] initWithFormat:@"\n***** Database Check: %@", v10];
          _bold(v12);
          v14 = int v13 = v6;
          id v15 = (id) [v11 initWithFormat:@"%@", v14];
          puts((const char *)[v15 UTF8String]);

          int v6 = v24(self, v8) & v13;
        }
      }
      ++v5;
    }
    while (v5 < outCount);
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  id v16 = [NSString alloc];
  id v17 = [NSString alloc];
  uint64_t v18 = @"failure";
  if (v6) {
    uint64_t v18 = @"ok";
  }
  id v19 = (void *)[v17 initWithFormat:@"\n***** Overall Status: %@", v18];
  id v20 = _bold(v19);
  id v21 = (id) [v16 initWithFormat:@"%@", v20];
  puts((const char *)[v21 UTF8String]);

  return v6 & 1;
}

- (void)_reportDbStatsBackground
{
  id v3 = dispatch_get_global_queue(5, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __57__SGSqlEntityStore_Maintenance___reportDbStatsBackground__block_invoke;
  block[3] = &unk_1E65BEF88;
  block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __57__SGSqlEntityStore_Maintenance___reportDbStatsBackground__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) reportDbStats];
}

- (void)reportDbStats
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v2 = [(SGSqlEntityStore *)self dbStats];
  id v3 = v2;
  id v21 = v2;
  if (v2)
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __46__SGSqlEntityStore_Maintenance__reportDbStats__block_invoke;
    v26[3] = &unk_1E65B8B08;
    uint64_t v27 = @"dbstats";
    [v2 enumerateKeysAndObjectsUsingBlock:v26];
    id v4 = [v3 objectForKeyedSubscript:@"entities"];
    unint64_t v5 = SGEntityTypeDescription();
    int v6 = [v4 objectForKeyedSubscript:v5];
    uint64_t v7 = [v6 integerValue];

    if (v7 >= 1)
    {
      uint64_t v8 = [v21 objectForKeyedSubscript:@"merged_pseudocontacts"];
      +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", @"dbstats", @"merged_pseudocontact_percent", 100 * [v8 integerValue] / v7);
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = [v21 objectForKeyedSubscript:@"entities"];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v29 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v23;
      id obj = v9;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v23 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v14 = (void *)MEMORY[0x1CB79B230]();
          id v15 = [@"entityTypes." stringByAppendingString:v13];
          id v16 = [v21 objectForKeyedSubscript:@"entities"];
          id v17 = [v16 objectForKeyedSubscript:v13];
          +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", @"dbstats", v15, +[SGAggregateLogging twoSigFigs:v17]);
        }
        uint64_t v9 = obj;
        uint64_t v10 = [obj countByEnumeratingWithState:&v22 objects:v29 count:16];
      }
      while (v10);
    }

    uint64_t v18 = sgLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v18, OS_LOG_TYPE_INFO, "reported db stats to AggD", buf, 2u);
    }

    id v19 = v27;
  }
  else
  {
    id v19 = sgLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v19, OS_LOG_TYPE_DEFAULT, "dbStats returned nil during reportDbStats", buf, 2u);
    }
  }
}

void __46__SGSqlEntityStore_Maintenance__reportDbStats__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([v6 isEqualToString:@"entities"] & 1) == 0
    && ([v6 isEqualToString:@"statsCounters"] & 1) == 0
    && ([v6 isEqualToString:@"urlsCounters"] & 1) == 0
    && ([v6 hasPrefix:@"reimportRequests_oldest"] & 1) == 0)
  {
    +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", *(void *)(a1 + 32), v6, +[SGAggregateLogging twoSigFigs:v5]);
  }
}

- (void)registerCachePrecomputationWithCTS
{
  if ([(SGSqliteDatabase *)self->_db isInMemory])
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Maintenance.m" lineNumber:32 description:@"Tried to register cache computation task on an in-memory store"];
  }
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_INFO, "registering cache precomputation work with CTS", buf, 2u);
  }

  id v5 = +[SGXPCActivityManager sharedInstance];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke;
  void v7[3] = &unk_1E65B8AE0;
  void v7[4] = self;
  [v5 registerForActivity:2 handler:v7];
}

void __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _os_activity_create(&dword_1CA650000, "SGSqlEntityStore cache precomputation due to CTS", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v4, &state);
  id v5 = dispatch_group_create();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 192);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_2;
  block[3] = &unk_1E65BFD88;
  block[4] = v6;
  id v8 = v3;
  id v17 = v8;
  dispatch_group_async(v5, v7, block);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(NSObject **)(v9 + 192);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_10;
  v14[3] = &unk_1E65BFD88;
  void v14[4] = v9;
  id v11 = v8;
  id v15 = v11;
  dispatch_group_async(v5, v10, v14);
  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v12 = sgLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1CA650000, v12, OS_LOG_TYPE_INFO, "all async jobs for cache precomputation are done", v13, 2u);
  }

  [*(id *)(a1 + 32) _reportDbStatsBackground];
  [*(id *)(a1 + 32) clearCaches];

  os_activity_scope_leave(&state);
}

void __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_2(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_INFO, "serializing contacts due to CTS", (uint8_t *)&v6, 2u);
  }

  id v3 = objc_opt_new();
  [*(id *)(a1 + 32) updateSerializedContacts:*(void *)(a1 + 40)];
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    [v3 timeIntervalSinceNow];
    int v6 = 134217984;
    double v7 = -v5;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_INFO, "Finished updating serialized contacts in %0.3f seconds", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_10(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_INFO, "pre-calculating CN to SG contact matches due to CTS", v4, 2u);
  }

  return [*(id *)(a1 + 32) updateCNContactMatches:*(void *)(a1 + 40)];
}

- (void)registerSentTextMessage:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = [a3 recipients];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v20 + 1) + 8 * v8);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        uint64_t v10 = objc_msgSend(v9, "handles", 0);
        uint64_t v11 = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v17;
          do
          {
            uint64_t v14 = 0;
            do
            {
              if (*(void *)v17 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = [(SGSqlEntityStore *)self normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:*(void *)(*((void *)&v16 + 1) + 8 * v14)];
              if (v15) {
                [(SGBloomFilter *)self->_messageRecipients add:v15];
              }

              ++v14;
            }
            while (v12 != v14);
            uint64_t v12 = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }
          while (v12);
        }

        ++v8;
      }
      while (v8 != v6);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v6);
  }
}

- (BOOL)mayHaveSentMessageToHandle:(id)a3
{
  id v4 = [(SGSqlEntityStore *)self normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:a3];
  if (v4) {
    BOOL v5 = [(SGBloomFilter *)self->_messageRecipients exists:v4];
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

- (id)normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:(id)a3
{
  id v4 = a3;
  if ([v4 containsString:@"@"])
  {
    BOOL v5 = SGNormalizeEmailAddress();
    [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v5];
    goto LABEL_9;
  }
  if ((unint64_t)[v4 length] >= 5)
  {
    CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
    uint64_t v6 = _PASKeepOnlyCharacterSet();
    if ((unint64_t)[v6 length] >= 5)
    {
      uint64_t v7 = [v4 length];
      if ((unint64_t)(v7 - [v6 length]) < 8)
      {
        BOOL v5 = SGNormalizePhoneNumber();
        [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v5];

        goto LABEL_9;
      }
    }
  }
  BOOL v5 = 0;
LABEL_9:

  return v5;
}

- (void)registerSentMailMessage:(id)a3
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __58__SGSqlEntityStore_Significance__registerSentMailMessage___block_invoke;
  v8[3] = &unk_1E65BFB68;
  void v8[4] = self;
  id v3 = a3;
  id v4 = (void (**)(void, void))MEMORY[0x1CB79B4C0](v8);
  BOOL v5 = [v3 to];
  ((void (**)(void, void *))v4)[2](v4, v5);

  uint64_t v6 = [v3 cc];
  ((void (**)(void, void *))v4)[2](v4, v6);

  uint64_t v7 = [v3 bcc];

  ((void (**)(void, void *))v4)[2](v4, v7);
}

void __58__SGSqlEntityStore_Significance__registerSentMailMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        uint64_t v9 = (void *)MEMORY[0x1CB79B230](v4);
        uint64_t v10 = objc_msgSend(v8, "emailAddress", (void)v14);

        if (v10)
        {
          uint64_t v11 = *(void **)(a1 + 32);
          uint64_t v12 = [v8 emailAddress];
          uint64_t v13 = [v11 normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:v12];

          if (v13) {
            [*(id *)(*(void *)(a1 + 32) + 200) add:v13];
          }
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v5 = v4;
    }
    while (v4);
  }
}

- (BOOL)mayHaveSentMessageToEmail:(id)a3
{
  messageRecipients = self->_messageRecipients;
  uint64_t v4 = SGNormalizeEmailAddress();
  LOBYTE(messageRecipients) = [(SGBloomFilter *)messageRecipients exists:v4];

  return (char)messageRecipients;
}

- (BOOL)recentsContainSomeOfEmails:(id)a3 phoneNumbers:(id)a4 instantMessageAddresses:(id)a5
{
  v57[3] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!self->_crLookup)
  {
    uint64_t v42 = objc_opt_new();
    uint64_t v13 = *MEMORY[0x1E4F5CCC8];
    v57[0] = *MEMORY[0x1E4F5CCB8];
    v57[1] = v13;
    v57[2] = *MEMORY[0x1E4F5CCB0];
    long long v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v57 count:3];
    [v42 setDomains:v14];

    long long v15 = objc_opt_new();
    if ([v8 count])
    {
      long long v16 = (void *)MEMORY[0x1E4F5CCE8];
      uint64_t v55 = *MEMORY[0x1E4F5CC60];
      long long v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v55 count:1];
      long long v18 = [v16 predicateForKey:*MEMORY[0x1E4F5CC98] inCollection:v17];
      v56[0] = v18;
      uint64_t v19 = [MEMORY[0x1E4F5CCE8] predicateForKey:*MEMORY[0x1E4F5CC88] inCollection:v8];
      v56[1] = v19;
      long long v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:2];
      long long v21 = [v16 predicateSatisfyingAllSubpredicates:v20];
      [v15 addObject:v21];
    }
    if ([v9 count])
    {
      long long v22 = (void *)MEMORY[0x1E4F5CCE8];
      uint64_t v53 = *MEMORY[0x1E4F5CC80];
      long long v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v53 count:1];
      long long v24 = [v22 predicateForKey:*MEMORY[0x1E4F5CC98] inCollection:v23];
      v54[0] = v24;
      long long v25 = [MEMORY[0x1E4F5CCE8] predicateForKey:*MEMORY[0x1E4F5CC88] inCollection:v9];
      v54[1] = v25;
      uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v54 count:2];
      uint64_t v27 = [v22 predicateSatisfyingAllSubpredicates:v26];
      [v15 addObject:v27];
    }
    if ([v10 count])
    {
      char v28 = (void *)MEMORY[0x1E4F5CCE8];
      uint64_t v51 = *MEMORY[0x1E4F5CC70];
      long long v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v51 count:1];
      uint64_t v30 = [v28 predicateForKey:*MEMORY[0x1E4F5CC98] inCollection:v29];
      v52[0] = v30;
      uint64_t v31 = [MEMORY[0x1E4F5CCE8] predicateForKey:*MEMORY[0x1E4F5CC88] inCollection:v10];
      v52[1] = v31;
      sqlite3_int64 v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v52 count:2];
      uint64_t v33 = [v28 predicateSatisfyingAllSubpredicates:v32];
      [v15 addObject:v33];
    }
    if (![v15 count])
    {
      char v12 = 0;
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v34 = [MEMORY[0x1E4F5CCE8] predicateSatisfyingAnySubpredicate:v15];
    [v42 setSearchPredicate:v34];

    *(void *)long long buf = 0;
    uint64_t v48 = buf;
    uint64_t v49 = 0x2020000000;
    char v50 = 0;
    dispatch_semaphore_t v35 = dispatch_semaphore_create(0);
    long long v36 = [MEMORY[0x1E4F5CCE0] defaultInstance];
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    v44[2] = __98__SGSqlEntityStore_Significance__recentsContainSomeOfEmails_phoneNumbers_instantMessageAddresses___block_invoke;
    v44[3] = &unk_1E65B9170;
    uint64_t v46 = buf;
    long long v37 = v35;
    BOOL v45 = v37;
    [v36 performRecentsSearch:v42 queue:0 completion:v44];

    [MEMORY[0x1E4F93B18] waitForSemaphore:v37 timeoutSeconds:1.0];
    unsigned __int8 v38 = atomic_load(v48 + 24);
    if (v38)
    {
      int v39 = sgLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v43 = 0;
        id v40 = "Found email in recents";
LABEL_21:
        _os_log_debug_impl(&dword_1CA650000, v39, OS_LOG_TYPE_DEBUG, v40, v43, 2u);
      }
    }
    else
    {
      int v39 = sgLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v43 = 0;
        id v40 = "Email was not found in recents";
        goto LABEL_21;
      }
    }

    char v12 = v38 & 1;
    _Block_object_dispose(buf, 8);
    goto LABEL_18;
  }
  uint64_t v11 = sgLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEBUG, "Looking up in custom tester function instead of actually hitting recents", buf, 2u);
  }

  char v12 = (*((uint64_t (**)(void))self->_crLookup + 2))();
LABEL_19:

  return v12;
}

void __98__SGSqlEntityStore_Significance__recentsContainSomeOfEmails_phoneNumbers_instantMessageAddresses___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [v6 description];
      uint64_t v11 = (void *)v10;
      char v12 = @"(nil)";
      if (v10) {
        char v12 = (__CFString *)v10;
      }
      int v13 = 138412290;
      long long v14 = v12;
      _os_log_error_impl(&dword_1CA650000, v7, OS_LOG_TYPE_ERROR, "Unable to search recents; error: %@",
        (uint8_t *)&v13,
        0xCu);
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v5) {
    unsigned __int8 v9 = [v5 count] != 0;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  atomic_store(v9, (unsigned __int8 *)(v8 + 24));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

- (void)setCRLookupForTesting:(id)a3
{
  self->_crLookup = (id)MEMORY[0x1CB79B4C0](a3, a2);
  MEMORY[0x1F41817F8]();
}

- (BOOL)anyHandleIsSignificant:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v29;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        if ([(SGSqlEntityStore *)self mayHaveSentMessageToHandle:*(void *)(*((void *)&v28 + 1) + 8 * i)])
        {
          uint64_t v10 = sgLogHandle();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "Handle is significant: Found in bloom filter", buf, 2u);
          }
          LOBYTE(v18) = 1;
          unsigned __int8 v9 = v4;
          goto LABEL_27;
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  unsigned __int8 v9 = objc_opt_new();
  uint64_t v10 = objc_opt_new();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v11 = v4;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v23 objects:v32 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v13; ++j)
      {
        if (*(void *)v24 != v14) {
          objc_enumerationMutation(v11);
        }
        long long v16 = *(void **)(*((void *)&v23 + 1) + 8 * j);
        if (objc_msgSend(v16, "containsString:", @"@", (void)v23)) {
          long long v17 = v10;
        }
        else {
          long long v17 = v9;
        }
        [v17 addObject:v16];
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v23 objects:v32 count:16];
    }
    while (v13);
  }

  BOOL v18 = [(SGSqlEntityStore *)self recentsContainSomeOfEmails:v10 phoneNumbers:v9 instantMessageAddresses:v10];
  uint64_t v19 = sgLogHandle();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if (v18)
  {
    if (v20)
    {
      *(_WORD *)long long buf = 0;
      long long v21 = "Handle is significant: Found in recents";
LABEL_29:
      _os_log_debug_impl(&dword_1CA650000, v19, OS_LOG_TYPE_DEBUG, v21, buf, 2u);
    }
  }
  else if (v20)
  {
    *(_WORD *)long long buf = 0;
    long long v21 = "Handle is not significant";
    goto LABEL_29;
  }

LABEL_27:
  return v18;
}

- (BOOL)anyEmailAddressIsSignificant:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        if ([(SGSqlEntityStore *)self mayHaveSentMessageToEmail:*(void *)(*((void *)&v16 + 1) + 8 * i)])
        {
          uint64_t v13 = sgLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v15 = 0;
            _os_log_debug_impl(&dword_1CA650000, v13, OS_LOG_TYPE_DEBUG, "Email Address is significant: Found in bloom filter", v15, 2u);
          }

          BOOL v12 = 1;
          uint64_t v10 = v4;
          goto LABEL_19;
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  BOOL v9 = [(SGSqlEntityStore *)self recentsContainSomeOfEmails:v4 phoneNumbers:MEMORY[0x1E4F1CBF0] instantMessageAddresses:MEMORY[0x1E4F1CBF0]];
  uint64_t v10 = sgLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v11)
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "Email Address is significant: Found in recents", v15, 2u);
    }
    BOOL v12 = 1;
  }
  else
  {
    if (v11)
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "Email Address is not significant", v15, 2u);
    }
    BOOL v12 = 0;
  }
LABEL_19:

  return v12;
}

- (BOOL)realtimeContactIsSignificantOrSignificanceIsDisabled:(id)a3
{
  if (![(SGSqlEntityStore *)self realtimeContactIsSignificant:a3])
  {
    if ([MEMORY[0x1E4F5DAF0] onlyShowSignificantPseudoContacts]) {
      return 0;
    }
    uint64_t v4 = sgLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_debug_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEBUG, "Realtime contact is not significant, but selecting anyway due to preference setting", v5, 2u);
    }
  }
  return 1;
}

- (BOOL)realtimeContactIsSignificant:(id)a3
{
  id v4 = a3;
  if ([v4 state] == 2)
  {
    uint64_t v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)BOOL v9 = 0;
      _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "Contact is significant: Update to curated contact", v9, 2u);
    }

    BOOL v6 = 1;
  }
  else
  {
    uint64_t v7 = [v4 contact];
    BOOL v6 = [(SGSqlEntityStore *)self contactIsSignificant:v7];
  }
  return v6;
}

- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3 usingCoreRecents:(BOOL)a4
{
  if (![(SGSqlEntityStore *)self contactIsSignificant:a3 usingCoreRecents:a4])
  {
    if ([MEMORY[0x1E4F5DAF0] onlyShowSignificantPseudoContacts]) {
      return 0;
    }
    uint64_t v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "Contact is not significant, but selecting anyway due to preference setting", v6, 2u);
    }
  }
  return 1;
}

- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3
{
  return [(SGSqlEntityStore *)self contactIsSignificantOrSignificanceIsDisabled:a3 usingCoreRecents:1];
}

- (BOOL)contactIsSignificant:(id)a3 usingCoreRecents:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([v6 significance] == 1)
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEBUG, "contact.significance property is true. skipping all other check.", buf, 2u);
    }
LABEL_16:
    BOOL v16 = 1;
LABEL_17:

    goto LABEL_18;
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v7 = [v6 emailAddresses];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v47 objects:v54 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v48;
LABEL_6:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v48 != v10) {
        objc_enumerationMutation(v7);
      }
      BOOL v12 = [*(id *)(*((void *)&v47 + 1) + 8 * v11) emailAddress];
      BOOL v13 = [(SGSqlEntityStore *)self mayHaveSentMessageToEmail:v12];

      if (v13) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v47 objects:v54 count:16];
        if (v9) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }
    long long v17 = sgLogHandle();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_15;
    }
    *(_WORD *)long long buf = 0;
    long long v30 = "Contact is significant: Found in bloom filter (email)";
    goto LABEL_37;
  }
LABEL_12:

  uint64_t v14 = [v6 socialProfiles];
  uint64_t v15 = [v14 count];

  if (!v15)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v7 = [v6 phones];
    uint64_t v19 = [v7 countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (!v19)
    {
LABEL_27:

      if (v4)
      {
        long long v25 = sgLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl(&dword_1CA650000, v25, OS_LOG_TYPE_DEBUG, "Sender isn't in bloom filter, checking recents", buf, 2u);
        }

        long long v26 = [v6 emailAddresses];
        uint64_t v7 = sgMap();

        uint64_t v27 = [v6 phones];
        long long v28 = sgMap();

        if ([(SGSqlEntityStore *)self recentsContainSomeOfEmails:v7 phoneNumbers:v28 instantMessageAddresses:MEMORY[0x1E4F1CBF0]])
        {
          long long v29 = sgLogHandle();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_debug_impl(&dword_1CA650000, v29, OS_LOG_TYPE_DEBUG, "Contact is significant: Found in recents", buf, 2u);
          }

          goto LABEL_16;
        }
      }
      uint64_t v7 = +[SGSqlEntityStore _cachedVIPEmailAddresses];
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v31 = objc_msgSend(v6, "emailAddresses", 0);
      uint64_t v32 = [v31 countByEnumeratingWithState:&v39 objects:v52 count:16];
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v34 = *(void *)v40;
        while (2)
        {
          for (uint64_t i = 0; i != v33; ++i)
          {
            if (*(void *)v40 != v34) {
              objc_enumerationMutation(v31);
            }
            long long v36 = [*(id *)(*((void *)&v39 + 1) + 8 * i) emailAddress];
            int v37 = [v7 containsObject:v36];

            if (v37)
            {
              unsigned __int8 v38 = sgLogHandle();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_debug_impl(&dword_1CA650000, v38, OS_LOG_TYPE_DEBUG, "Contact is significant - VIP email address", buf, 2u);
              }

              BOOL v16 = 1;
              goto LABEL_53;
            }
          }
          uint64_t v33 = [v31 countByEnumeratingWithState:&v39 objects:v52 count:16];
          if (v33) {
            continue;
          }
          break;
        }
      }

      long long v31 = sgLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1CA650000, v31, OS_LOG_TYPE_DEBUG, "Contact is not significant", buf, 2u);
      }
      BOOL v16 = 0;
LABEL_53:

      goto LABEL_17;
    }
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v44;
LABEL_21:
    uint64_t v22 = 0;
    while (1)
    {
      if (*(void *)v44 != v21) {
        objc_enumerationMutation(v7);
      }
      long long v23 = [*(id *)(*((void *)&v43 + 1) + 8 * v22) phoneNumber];
      BOOL v24 = [(SGSqlEntityStore *)self mayHaveSentMessageToHandle:v23];

      if (v24) {
        break;
      }
      if (v20 == ++v22)
      {
        uint64_t v20 = [v7 countByEnumeratingWithState:&v43 objects:v53 count:16];
        if (v20) {
          goto LABEL_21;
        }
        goto LABEL_27;
      }
    }
    long long v17 = sgLogHandle();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_15;
    }
    *(_WORD *)long long buf = 0;
    long long v30 = "Contact is significant: Found in bloom filter (phone)";
LABEL_37:
    _os_log_debug_impl(&dword_1CA650000, v17, OS_LOG_TYPE_DEBUG, v30, buf, 2u);
LABEL_15:

    goto LABEL_16;
  }
  BOOL v16 = 1;
LABEL_18:

  return v16;
}

uint64_t __72__SGSqlEntityStore_Significance__contactIsSignificant_usingCoreRecents___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 phoneNumber];
}

uint64_t __72__SGSqlEntityStore_Significance__contactIsSignificant_usingCoreRecents___block_invoke(uint64_t a1, void *a2)
{
  return [a2 emailAddress];
}

- (BOOL)contactIsSignificant:(id)a3
{
  return [(SGSqlEntityStore *)self contactIsSignificant:a3 usingCoreRecents:1];
}

+ (void)setCachedVIPEmailAddresses:(id)a3
{
  _cachedVIPEmailAddresses = [a3 copy];
  MEMORY[0x1F41817F8]();
}

+ (id)_cachedVIPEmailAddresses
{
  if (_cachedVIPEmailAddresses)
  {
    id v2 = (id)_cachedVIPEmailAddresses;
  }
  else
  {
    id v3 = +[SGMailClientUtil sharedInstance];
    BOOL v4 = [v3 allVIPEmailAddresses];
    id v2 = (id)[v4 copy];
  }
  return v2;
}

- (id)loadAllContactDetailsFromTableForRecordId:(id)a3
{
  id v4 = a3;
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke;
  v29[3] = &unk_1E65C0388;
  id v5 = v4;
  id v30 = v5;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v29);
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = __Block_byref_object_copy__21851;
  v27[4] = __Block_byref_object_dispose__21852;
  id v28 = 0;
  snippetDb = self->_snippetDb;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_24;
  v26[3] = &unk_1E65C03F8;
  void v26[4] = v27;
  [(SGSqliteDatabase *)snippetDb prepAndRunSQL:@"SELECT content FROM snippets WHERE entityId = :entityId" onPrep:v6 onRow:v26 onError:0];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_2;
  v24[3] = &unk_1E65C0388;
  id v8 = v5;
  id v25 = v8;
  uint64_t v9 = (void *)MEMORY[0x1CB79B4C0](v24);
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = __Block_byref_object_copy__21851;
  uint64_t v22 = __Block_byref_object_dispose__21852;
  id v23 = 0;
  id v23 = (id)objc_opt_new();
  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_3;
  v14[3] = &unk_1E65B9620;
  void v14[4] = self;
  id v11 = v8;
  id v15 = v11;
  BOOL v16 = v27;
  long long v17 = &v18;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT value, label, type, duplicateKey, sourceKey, extractionInfoId FROM contactDetails WHERE entityId = :entityId OR entityId IN (SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.masterEntityId = :entityId)" onPrep:v9 onRow:v14 onError:0];
  id v12 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(v27, 8);

  return v12;
}

void __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));
}

uint64_t __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_24(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumn:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));
}

uint64_t __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 nonnullNSStringForColumnName:"value" table:0];
  id v5 = [v3 getNSStringForColumnName:"label" table:0];
  uint64_t v6 = [v3 getInt64ForColumnName:"type" table:0];
  uint64_t v7 = [v3 nonnullNSStringForColumnName:"duplicateKey" table:0];
  id v8 = [v3 getNSStringForColumnName:"sourceKey" table:0];
  uint64_t v9 = [v3 getInt64ForColumnName:"extractionInfoId" table:0];

  uint64_t v10 = [*(id *)(a1 + 32) loadExtractionInfoForPrimaryKey:v9];
  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = [[SGDuplicateKey alloc] initWithSerialized:v7];
  BOOL v13 = +[SGContactDetail contactDetail:v4 label:v5 type:v6 recordId:v11 duplicateKey:v12 sourceKey:v8 context:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) extractionInfo:v10];

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v13];
  uint64_t v14 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v14;
}

- (id)loadAllContactDetailsFromTableForRecordId:(id)a3 type:(unint64_t)a4
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = [(SGSqlEntityStore *)self loadAllContactDetailsFromTableForRecordId:a3];
  uint64_t v6 = objc_opt_new();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v12, "type", (void)v14) == a4) {
          [v6 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }

  return v6;
}

- (id)contactDetailEntityIdForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v16 = 0;
  long long v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t v12 = 0;
  BOOL v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke;
  v10[3] = &unk_1E65C0388;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65BE440;
  void v9[4] = &v16;
  void v9[5] = &v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT entityId FROM contactDetails WHERE duplicateKey = :duplicateKey" onPrep:v10 onRow:v9 onError:0];
  if (*((unsigned char *)v13 + 24))
  {
    id v7 = [MEMORY[0x1E4F5DB20] recordIdWithNumericValue:v17[3]];
  }
  else
  {
    id v7 = 0;
  }

  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);

  return v7;
}

void __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 serialize];
  [v3 bindNamedParam:":duplicateKey" toNSString:v4];
}

uint64_t __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getIntegerForColumn:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return 1;
}

- (int64_t)contactDetailPrimaryKeyForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  BOOL v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = -1;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke;
  v10[3] = &unk_1E65C0388;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65C03F8;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id FROM contactDetails WHERE duplicateKey = :duplicateKey" onPrep:v10 onRow:v9 onError:0];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 serialize];
  [v3 bindNamedParam:":duplicateKey" toNSString:v4];
}

uint64_t __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumn:0];
  return 1;
}

- (int64_t)commitContactDetail:(id)a3
{
  id v4 = a3;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke;
  v21[3] = &unk_1E65BFF28;
  id v5 = v4;
  id v22 = v5;
  id v23 = self;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v21);
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke_2;
  v12[3] = &unk_1E65BFE68;
  void v12[4] = self;
  id v8 = v5;
  uint64_t v16 = &v17;
  id v13 = v8;
  uint64_t v14 = @"INSERT INTO contactDetails (entityId, duplicateKey, sourceKey, label, value, type, extractionInfoId) VALUES (:entityId, :duplicateKey, :sourceKey, :label, :value, :type, :extractionInfoId)";
  id v9 = v6;
  id v15 = v9;
  [(SGSqliteDatabase *)db writeTransaction:v12];
  int64_t v10 = v18[3];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v13 = a2;
  id v4 = [v3 recordId];
  objc_msgSend(v13, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v4, "numericValue"));

  id v5 = [*(id *)(a1 + 32) duplicateKey];
  id v6 = [v5 serialize];
  [v13 bindNamedParam:":duplicateKey" toNSString:v6];

  int64_t v7 = [*(id *)(a1 + 32) sourceKey];
  [v13 bindNamedParam:":sourceKey" toNSString:v7];

  id v8 = [*(id *)(a1 + 32) label];
  [v13 bindNamedParam:":label" toNSString:v8];

  id v9 = [*(id *)(a1 + 32) value];
  [v13 bindNamedParam:":value" toNSString:v9];

  objc_msgSend(v13, "bindNamedParam:toInt64:", ":type", objc_msgSend(*(id *)(a1 + 32), "type"));
  int64_t v10 = *(void **)(a1 + 40);
  id v11 = [*(id *)(a1 + 32) extractionInfo];
  uint64_t v12 = [v10 commitExtractionInfo:v11];

  [v13 bindNamedParam:":extractionInfoId" toInt64:v12];
}

void __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) duplicateKey];
  sqlite3_int64 insert_rowid = [v2 contactDetailPrimaryKeyForDuplicateKey:v3];

  if (insert_rowid < 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:*(void *)(a1 + 48) onPrep:*(void *)(a1 + 56) onRow:0 onError:0];
    sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
  }
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = insert_rowid;
}

- (void)writeIdentityBlobs:(id)a3 forceRewrite:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  int64_t v7 = sgLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_INFO, "Writing identity blobs", buf, 2u);
  }

  uint64_t v64 = 0;
  uint64_t v65 = 0;
  long long v63 = @"writeIdentityBlobs";
  uint64_t v64 = mach_absolute_time();
  uint64_t v59 = 0;
  long long v60 = &v59;
  uint64_t v61 = 0x2020000000;
  char v62 = 0;
  *(void *)long long buf = 0;
  char v54 = buf;
  uint64_t v55 = 0x3032000000;
  id v56 = __Block_byref_object_copy__22368;
  uint64_t v57 = __Block_byref_object_dispose__22369;
  id v58 = 0;
  uint64_t v47 = 0;
  long long v48 = &v47;
  uint64_t v49 = 0x3032000000;
  long long v50 = __Block_byref_object_copy__22368;
  uint64_t v51 = __Block_byref_object_dispose__22369;
  id v52 = 0;
  uint64_t v41 = 0;
  long long v42 = &v41;
  uint64_t v43 = 0x3032000000;
  long long v44 = __Block_byref_object_copy__22368;
  long long v45 = __Block_byref_object_dispose__22369;
  id v46 = 0;
  db = self->_db;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke;
  v34[3] = &unk_1E65B99E0;
  void v34[4] = self;
  id v9 = v6;
  id v35 = v9;
  long long v36 = buf;
  int v37 = &v47;
  unsigned __int8 v38 = &v41;
  long long v39 = &v59;
  BOOL v40 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v34];
  if (*((unsigned char *)v60 + 24))
  {
    [(SGSqlEntityStore *)self clearMasterEntityCache];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v10 = (id)v48[5];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v30 objects:v68 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v31 != v12) {
            objc_enumerationMutation(v10);
          }
          +[SGDNotificationBroadcaster emitContactDeleted:*(void *)(*((void *)&v30 + 1) + 8 * i)];
        }
        uint64_t v11 = [v10 countByEnumeratingWithState:&v30 objects:v68 count:16];
      }
      while (v11);
    }

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v14 = (id)v42[5];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:v67 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v27;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v27 != v16) {
            objc_enumerationMutation(v14);
          }
          +[SGDNotificationBroadcaster emitContactUpdated:*(void *)(*((void *)&v26 + 1) + 8 * j)];
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:v67 count:16];
      }
      while (v15);
    }

    if (v4)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v18 = *((id *)v54 + 5);
      uint64_t v19 = [v18 countByEnumeratingWithState:&v22 objects:v66 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v23;
        do
        {
          for (uint64_t k = 0; k != v19; ++k)
          {
            if (*(void *)v23 != v20) {
              objc_enumerationMutation(v18);
            }
            +[SGDNotificationBroadcaster emitContactUpdated:](SGDNotificationBroadcaster, "emitContactUpdated:", *(void *)(*((void *)&v22 + 1) + 8 * k), (void)v22);
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v22 objects:v66 count:16];
        }
        while (v19);
      }
    }
  }
  SGRecordMeasurementState(&v63);

  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v47, 8);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v59, 8);
  SGRecordMeasurementState(&v63);
}

void __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) _loadIdentityBlobs];
  id v3 = [*(id *)(a1 + 32) _labelIdentityBlobs:*(void *)(a1 + 40)];
  BOOL v4 = objc_msgSend(v2, "_pas_mappedSetWithTransform:", &__block_literal_global_387);
  id v5 = objc_msgSend(v3, "_pas_mappedSetWithTransform:", &__block_literal_global_389);
  id v6 = (void *)[v2 mutableCopy];
  [v6 intersectSet:v3];
  uint64_t v7 = objc_msgSend(v6, "_pas_mappedSetWithTransform:", &__block_literal_global_391);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = (void *)[v2 mutableCopy];
  [v10 minusSet:v3];
  uint64_t v11 = (void *)[v4 mutableCopy];
  [v11 minusSet:v5];
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = (void *)[v3 mutableCopy];
  [v14 minusSet:v2];
  uint64_t v15 = (void *)[v5 mutableCopy];
  [v15 minusSet:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  if ([v10 count])
  {
    id v18 = sgLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v21 = 138412290;
      long long v22 = v10;
      _os_log_debug_impl(&dword_1CA650000, v18, OS_LOG_TYPE_DEBUG, "IdentityStore: Writing deletes for %@", (uint8_t *)&v21, 0xCu);
    }

    [*(id *)(a1 + 32) _writeLabeledBlobs:v10 deletedMasterEntityIds:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  if ([v14 count])
  {
    uint64_t v19 = sgLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      int v21 = 138412290;
      long long v22 = v14;
      _os_log_debug_impl(&dword_1CA650000, v19, OS_LOG_TYPE_DEBUG, "IdentityStore: Newly created contacts %@", (uint8_t *)&v21, 0xCu);
    }

    [*(id *)(a1 + 32) _writeLabeledBlobs:v14 deletedMasterEntityIds:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  if (*(unsigned char *)(a1 + 80) && [v6 count])
  {
    uint64_t v20 = sgLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v21 = 138412290;
      long long v22 = v6;
      _os_log_debug_impl(&dword_1CA650000, v20, OS_LOG_TYPE_DEBUG, "IdentityStore: Forced update of contacts %@", (uint8_t *)&v21, 0xCu);
    }

    [*(id *)(a1 + 32) _writeLabeledBlobs:v6 deletedMasterEntityIds:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 second];
}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 second];
}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 second];
}

- (void)_writeLabeledBlobs:(id)a3 deletedMasterEntityIds:(id)a4
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v80 = a4;
  dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
  v105[0] = MEMORY[0x1E4F143A8];
  v105[1] = 3221225472;
  v105[2] = __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke;
  v105[3] = &unk_1E65BEF88;
  uint64_t v8 = v7;
  v106 = v8;
  +[SGSpotlightContactsAdapter notifyWhenFlushed:v105];
  id v71 = v8;
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  id obj = v6;
  uint64_t v81 = [obj countByEnumeratingWithState:&v101 objects:v114 count:16];
  if (v81)
  {
    uint64_t v79 = *(void *)v102;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v102 != v79) {
          objc_enumerationMutation(obj);
        }
        uint64_t v83 = v9;
        id v10 = *(void **)(*((void *)&v101 + 1) + 8 * v9);
        int v82 = (void *)MEMORY[0x1CB79B230]();
        uint64_t v11 = [v10 first];
        [(SGSqlEntityStore *)self deleteSerializedContactsForIdSet:v11];

        uint64_t v12 = [v10 first];
        [(SGSqlEntityStore *)self deleteAllCNContactMatchesForIdSet:v12];

        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        id v13 = [v10 first];
        uint64_t v14 = [v13 countByEnumeratingWithState:&v97 objects:v113 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v98;
          do
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v98 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = +[SGStorageContact contactWithMasterEntityId:](SGStorageContact, "contactWithMasterEntityId:", [*(id *)(*((void *)&v97 + 1) + 8 * i) internalEntityId]);
              uint64_t v19 = [[SGJournalEntry alloc] initWithOperation:13 contact:v18];
              [(SGJournal *)self->_journal addEntry:v19];
            }
            uint64_t v15 = [v13 countByEnumeratingWithState:&v97 objects:v113 count:16];
          }
          while (v15);
        }

        uint64_t v20 = [v10 second];
        int v21 = [v80 containsObject:v20];

        if (v21)
        {
          long long v22 = [(SGSqlEntityStore *)self kvCacheManager];
          uint64_t v23 = [v10 first];
          [v22 deleteValueByRecordIdSet:v23];
        }
        else
        {
          long long v24 = [v10 first];
          long long v22 = (void *)[v24 mutableCopy];

          uint64_t v23 = [v10 second];
          if (!v23)
          {
            uint64_t v69 = [MEMORY[0x1E4F28B00] currentHandler];
            [v69 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 1426, @"Invalid parameter not satisfying: %@", @"masterEntityRecord" object file lineNumber description];
          }
          [v22 removeObject:v23];
          if ([v22 count])
          {
            long long v25 = [(SGSqlEntityStore *)self kvCacheManager];
            [v25 deleteValueByRecordIdSet:v22];
          }
        }

        long long v26 = [v10 first];
        long long v27 = sgMap();

        db = self->_db;
        v94[0] = MEMORY[0x1E4F143A8];
        v94[1] = 3221225472;
        v94[2] = __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_3;
        v94[3] = &unk_1E65B9998;
        char v96 = v21;
        v94[4] = v10;
        id v29 = v27;
        id v95 = v29;
        [(SGSqliteDatabase *)db prepAndRunSQL:@"UPDATE entity SET masterEntityId = :masterEntityId WHERE id IN _pas_nsarray(:ids) AND entityType IN (:pseudoContact, :unrecognizedContact)" onPrep:v94 onRow:0 onError:0];
        if ((v21 & 1) == 0)
        {
          long long v30 = [v10 second];
          long long v31 = [(SGSqlEntityStore *)self storageContactByRecordId:v30 withSnippets:0];

          if (v31 && ![(SGSuggestHistory *)self->_history hasStorageContact:v31])
          {
            long long v32 = [(SGSqlEntityStore *)self journal];
            long long v33 = [[SGJournalEntry alloc] initWithOperation:11 contact:v31];
            [v32 addEntry:v33];

            uint64_t v34 = [v31 convertToContact:self];
            id v35 = [v34 recordId];
            long long v36 = [v10 second];
            char v37 = [v35 isEqual:v36];

            if (v37)
            {
              [(SGSqlEntityStore *)self filterOutRejectedDetailsFromContact:v34];
              unsigned __int8 v38 = [v34 name];
              uint64_t v39 = [v38 fullName];

              BOOL v40 = v34;
              uint64_t v74 = (void *)v39;
              if (v39)
              {
                uint64_t v41 = [MEMORY[0x1E4F5DA40] encodedStringForFullName:v39];
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v43 = [v34 phones];
              uint64_t v44 = [v43 count];

              int v76 = v31;
              id v77 = v29;
              id v75 = v34;
              if (v44)
              {
                context = (void *)MEMORY[0x1CB79B230]();
                long long v45 = objc_opt_new();
                long long v90 = 0u;
                long long v91 = 0u;
                long long v92 = 0u;
                long long v93 = 0u;
                id v84 = [v34 phones];
                uint64_t v46 = [v84 countByEnumeratingWithState:&v90 objects:v108 count:16];
                if (v46)
                {
                  uint64_t v47 = v46;
                  uint64_t v48 = *(void *)v91;
                  do
                  {
                    for (uint64_t j = 0; j != v47; ++j)
                    {
                      if (*(void *)v91 != v48) {
                        objc_enumerationMutation(v84);
                      }
                      long long v50 = [*(id *)(*((void *)&v90 + 1) + 8 * j) phoneNumber];
                      uint64_t v51 = SGNormalizePhoneNumber();
                      [v45 setObject:v41 forKeyedSubscript:v51];
                    }
                    uint64_t v47 = [v84 countByEnumeratingWithState:&v90 objects:v108 count:16];
                  }
                  while (v47);
                }

                id v52 = [(SGSqlEntityStore *)self kvCacheManager];
                uint64_t v53 = [v52 cacheOfType:0];

                BOOL v40 = v75;
                char v54 = [v75 recordId];
                [v53 setValueIfNotPresentWithDict:v45 fromRecordId:v54];

                long long v31 = v76;
                id v29 = v77;
              }
              uint64_t v55 = [v40 emailAddresses];
              uint64_t v56 = [v55 count];

              if (v56)
              {
                contexta = (void *)MEMORY[0x1CB79B230]();
                uint64_t v57 = objc_opt_new();
                long long v86 = 0u;
                long long v87 = 0u;
                long long v88 = 0u;
                long long v89 = 0u;
                id v85 = [v40 emailAddresses];
                uint64_t v58 = [v85 countByEnumeratingWithState:&v86 objects:v107 count:16];
                if (v58)
                {
                  uint64_t v59 = v58;
                  uint64_t v60 = *(void *)v87;
                  do
                  {
                    for (uint64_t k = 0; k != v59; ++k)
                    {
                      if (*(void *)v87 != v60) {
                        objc_enumerationMutation(v85);
                      }
                      char v62 = [*(id *)(*((void *)&v86 + 1) + 8 * k) emailAddress];
                      long long v63 = SGNormalizeEmailAddress();
                      [v57 setObject:v41 forKeyedSubscript:v63];
                    }
                    uint64_t v59 = [v85 countByEnumeratingWithState:&v86 objects:v107 count:16];
                  }
                  while (v59);
                }

                uint64_t v64 = [(SGSqlEntityStore *)self kvCacheManager];
                uint64_t v65 = [v64 cacheOfType:1];

                BOOL v40 = v75;
                long long v66 = [v75 recordId];
                [v65 setValueIfNotPresentWithDict:v57 fromRecordId:v66];

                long long v31 = v76;
                id v29 = v77;
              }
            }
            else
            {
              long long v42 = sgLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
              {
                v67 = [v34 recordId];
                id v68 = [v10 second];
                *(_DWORD *)long long buf = 138412546;
                long long v110 = v67;
                __int16 v111 = 2112;
                long long v112 = v68;
                _os_log_fault_impl(&dword_1CA650000, v42, OS_LOG_TYPE_FAULT, "Expected the new mergedContact record Id %@ to be %@:", buf, 0x16u);
              }
              BOOL v40 = v34;
              if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
                abort();
              }
            }
          }
        }

        uint64_t v9 = v83 + 1;
      }
      while (v83 + 1 != v81);
      uint64_t v81 = [obj countByEnumeratingWithState:&v101 objects:v114 count:16];
    }
    while (v81);
  }
}

intptr_t __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (*(unsigned char *)(a1 + 48))
  {
    [v3 bindNamedParam:":masterEntityId" toInt64:-1];
  }
  else
  {
    BOOL v4 = [*(id *)(a1 + 32) second];
    objc_msgSend(v5, "bindNamedParam:toInt64:", ":masterEntityId", objc_msgSend(v4, "rowId"));
  }
  [v5 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 40)];
  [v5 bindNamedParam:":pseudoContact" toInteger:4];
  [v5 bindNamedParam:":unrecognizedContact" toInteger:12];
}

uint64_t __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = NSNumber;
  uint64_t v3 = [a2 rowId];
  return [v2 numberWithLongLong:v3];
}

- (id)_labelIdentityBlobs:(id)a3
{
  SEL v27 = a2;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  long long v32 = objc_opt_new();
  long long v31 = objc_opt_new();
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v50 objects:v55 count:16];
  if (v4)
  {
    uint64_t v30 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v51 != v30) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v50 + 1) + 8 * i);
        dispatch_semaphore_t v7 = (void *)MEMORY[0x1CB79B230]();
        +[SGAggregateLogging identityGroupSize:](SGAggregateLogging, "identityGroupSize:", [v6 count]);
        uint64_t v8 = [v6 anyObject];
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v9 = v6;
        uint64_t v10 = [v9 countByEnumeratingWithState:&v46 objects:v54 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v47;
          do
          {
            for (uint64_t j = 0; j != v10; ++j)
            {
              if (*(void *)v47 != v11) {
                objc_enumerationMutation(v9);
              }
              id v13 = *(void **)(*((void *)&v46 + 1) + 8 * j);
              uint64_t v14 = objc_msgSend(v13, "rowId", v27);
              if (v14 < [v8 rowId])
              {
                id v15 = v13;

                uint64_t v8 = v15;
              }
            }
            uint64_t v10 = [v9 countByEnumeratingWithState:&v46 objects:v54 count:16];
          }
          while (v10);
        }

        uint64_t v16 = (void *)MEMORY[0x1E4F93BB8];
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", objc_msgSend(v8, "rowId"));
        id v18 = [v16 tupleWithFirst:v9 second:v17];

        [v32 addObject:v18];
        objc_msgSend(v31, "addIndex:", objc_msgSend(v8, "rowId"));
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v50 objects:v55 count:16];
    }
    while (v4);
  }

  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  char v45 = 0;
  db = self->_db;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke;
  v39[3] = &unk_1E65C0700;
  void v39[4] = self;
  id v20 = v31;
  id v40 = v20;
  uint64_t v41 = &v42;
  [(SGSqliteDatabase *)db readTransaction:v39];
  if (*((unsigned char *)v43 + 24))
  {
    int v21 = sgLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1CA650000, v21, OS_LOG_TYPE_FAULT, "While writing blobs, unexpected missing entity ids", buf, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
    long long v22 = objc_opt_new();

    uint64_t v23 = self->_db;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_358;
    v33[3] = &unk_1E65BF1A8;
    SEL v37 = v27;
    id v34 = obj;
    id v35 = self;
    id v24 = v22;
    id v36 = v24;
    [(SGSqliteDatabase *)v23 readTransaction:v33];
    id v25 = v24;
  }
  else
  {
    id v25 = v32;
  }

  _Block_object_dispose(&v42, 8);
  return v25;
}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2;
  v4[3] = &unk_1E65C0388;
  id v5 = *(id *)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3;
  v3[3] = &unk_1E65C03F8;
  void v3[4] = *(void *)(a1 + 48);
  [v2 prepAndRunSQL:@"SELECT 1 FROM _pas_nsindexset(:ids) i LEFT JOIN entity e on i.value = e.id AND e.entityType = :contact WHERE e.id IS NULL" onPrep:v4 onRow:v3 onError:0];
}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_358(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v2 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v2)
  {
    uint64_t v14 = *(void *)v29;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v29 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void *)(*((void *)&v28 + 1) + 8 * v3);
        id v5 = (void *)MEMORY[0x1CB79B230]();
        uint64_t v24 = 0;
        id v25 = &v24;
        uint64_t v26 = 0x2020000000;
        uint64_t v27 = -1;
        uint64_t v18 = MEMORY[0x1E4F143A8];
        uint64_t v19 = 3221225472;
        id v20 = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2_359;
        int v21 = &unk_1E65B9C20;
        uint64_t v6 = *(void *)(a1 + 56);
        uint64_t v22 = *(void *)(a1 + 40);
        uint64_t v23 = v6;
        dispatch_semaphore_t v7 = sgMap();
        uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 8);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        v16[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3_367;
        v16[3] = &unk_1E65C0388;
        id v9 = v7;
        id v17 = v9;
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 3221225472;
        v15[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_4;
        void v15[3] = &unk_1E65C03F8;
        void v15[4] = &v24;
        [v8 prepAndRunSQL:@"SELECT MIN(id) FROM entity WHERE id IN _pas_nsarray(:ids)" onPrep:v16 onRow:v15 onError:0];
        if (v25[3] >= 1)
        {
          uint64_t v10 = (void *)MEMORY[0x1E4F93BB8];
          uint64_t v11 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:");
          uint64_t v12 = [v10 tupleWithFirst:v4 second:v11];

          [*(id *)(a1 + 48) addObject:v12];
        }

        _Block_object_dispose(&v24, 8);
        ++v3;
      }
      while (v2 != v3);
      uint64_t v2 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v2);
  }
}

id __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2_359(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 tableId])
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Writing.m" lineNumber:1375 description:@"recordId from wrong table"];
  }
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v3, "rowId"));

  return v4;
}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3_367(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_4(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumn:0];
  return *MEMORY[0x1E4F93C10];
}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 bindNamedParam:":ids" toNSIndexSet:v2];
  [v3 bindNamedParam:":contact" toInteger:4];
}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E4F93C10];
}

- (id)_loadIdentityBlobs
{
  id v3 = objc_opt_new();
  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke;
  v8[3] = &unk_1E65BFD88;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = self;
  [(SGSqliteDatabase *)db readTransaction:v8];
  id v6 = v5;

  return v6;
}

void __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke(uint64_t a1)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  void v15[3] = -1;
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  void v13[3] = __Block_byref_object_copy__22368;
  void v13[4] = __Block_byref_object_dispose__22369;
  id v14 = 0;
  id v14 = (id)objc_opt_new();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_2;
  v9[3] = &unk_1E65B9948;
  uint64_t v11 = v15;
  uint64_t v12 = v13;
  id v10 = *(id *)(a1 + 32);
  uint64_t v2 = (void *)MEMORY[0x1CB79B4C0](v9);
  id v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_4;
  v5[3] = &unk_1E65B9970;
  dispatch_semaphore_t v7 = v15;
  id v4 = v2;
  id v6 = v4;
  uint64_t v8 = v13;
  [v3 prepAndRunQuery:@"SELECT id, masterEntityId FROM entity WHERE masterEntityId > 0 AND entityType IN (:pseudo, :unrecognized) ORDER BY masterEntityId ASC", &__block_literal_global_350, v5, 0 onPrep onRow onError];
  (*((void (**)(id, uint64_t))v4 + 2))(v4, -1);

  _Block_object_dispose(v13, 8);
  _Block_object_dispose(v15, 8);
}

uint64_t __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(uint64_t *)(v4 + 24) >= 1)
  {
    id v5 = (void *)MEMORY[0x1E4F93BB8];
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    dispatch_semaphore_t v7 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:");
    uint64_t v8 = [v5 tupleWithFirst:v6 second:v7];

    [*(id *)(a1 + 32) addObject:v8];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  *(void *)(v4 + 24) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

uint64_t __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_4(void *a1, sqlite3_stmt *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1CB79B230]();
  sqlite3_int64 v5 = sqlite3_column_int64(a2, 0);
  if (sqlite3_column_int64(a2, 1) != *(void *)(*(void *)(a1[5] + 8) + 24)) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  uint64_t v6 = *(void **)(*(void *)(a1[6] + 8) + 40);
  dispatch_semaphore_t v7 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v5];
  [v6 addObject:v7];

  return 0;
}

uint64_t __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_3(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
  return +[SGSqliteDatabase bindParam:a2 name:":unrecognized" int64:12];
}

- (void)_writeFTSTermsForEnrichment:(id)a3 entityId:(int64_t)a4
{
  void v41[4] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  [(SGSqlEntityStore *)self clearMasterEntityCache];
  dispatch_semaphore_t v7 = objc_opt_new();
  uint64_t v8 = objc_opt_new();
  id v9 = [v6 duplicateKey];
  [v9 entityType];
  if (SGEntityTypeIsContact())
  {
  }
  else
  {
    id v10 = [v6 duplicateKey];
    [v10 entityType];
    int IsContactDetail = SGEntityTypeIsContactDetail();

    if (!IsContactDetail) {
      goto LABEL_16;
    }
  }
  uint64_t v12 = [v6 duplicateKey];
  [v12 entityType];
  if (!SGEntityTypeIsContact()) {
    goto LABEL_8;
  }
  id v13 = [v6 title];
  uint64_t v14 = [v13 length];

  if (v14)
  {
    id v15 = [v6 title];
    uint64_t v16 = [v15 length];

    if (v16)
    {
      uint64_t v12 = [v6 title];
      [v7 addObject:v12];
LABEL_8:
    }
  }
  id v17 = +[SGContactDetail contactDetailFromEntity:v6];
  unint64_t v18 = [v17 type];
  if (v18 <= 6)
  {
    if (((1 << v18) & 0x6E) != 0)
    {
      uint64_t v19 = [v17 value];
      [v8 addObject:v19];
    }
    else if (v18)
    {
      uint64_t v26 = [SGSocialProfileDetails alloc];
      uint64_t v27 = [v17 value];
      uint64_t v19 = [(SGSocialProfileDetails *)v26 initWithSerialized:v27];

      if (v19)
      {
        id v35 = [(SGSocialProfileDetails *)v19 displayName];
        v41[0] = v35;
        id v34 = [(SGSocialProfileDetails *)v19 bundleIdentifier];
        v41[1] = v34;
        long long v28 = [(SGSocialProfileDetails *)v19 username];
        v41[2] = v28;
        long long v29 = [(SGSocialProfileDetails *)v19 service];
        v41[3] = v29;
        long long v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:4];
        [v8 addObjectsFromArray:v30];
      }
    }
    else
    {
      uint64_t v22 = [v17 value];
      char v23 = [v22 containsString:@";"];

      if (v23) {
        goto LABEL_13;
      }
      uint64_t v24 = [MEMORY[0x1E4F1B9A8] sharedDefaults];
      uint64_t v25 = [v24 countryCode];
      if (v25)
      {
        uint64_t v19 = (SGSocialProfileDetails *)v25;
      }
      else
      {
        long long v31 = [MEMORY[0x1E4F1CA20] currentLocale];
        uint64_t v19 = [v31 objectForKey:*MEMORY[0x1E4F1C400]];

        if (!v19) {
          goto LABEL_13;
        }
      }
      long long v32 = [v17 value];
      uint64_t v33 = (void *)_PNCopyIndexStringsForAddressBookSearch();

      if (v33) {
        [v7 addObjectsFromArray:v33];
      }
    }
  }
LABEL_13:
  uint64_t v20 = [v7 count];
  if (v20 + [v8 count])
  {
    db = self->_db;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    void v36[2] = __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke;
    v36[3] = &unk_1E65BF0E8;
    v36[4] = self;
    int64_t v40 = a4;
    id v37 = v6;
    id v38 = v7;
    id v39 = v8;
    [(SGSqliteDatabase *)db writeTransaction:v36];
  }
LABEL_16:
}

void __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke_2;
  v3[3] = &unk_1E65B9920;
  uint64_t v7 = *(void *)(a1 + 64);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  [v2 prepAndRunQuery:@"INSERT OR REPLACE INTO entity_fts(docid, entityId, messagingTerms, ftsTerms) VALUES(?, ?, ?, ?)", v3, 0, 0 onPrep onRow onError];
}

void __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 56));
  id v4 = [*(id *)(a1 + 32) duplicateKey];
  [v4 entityType];
  int IsContactDetail = SGEntityTypeIsContactDetail();

  if (IsContactDetail) {
    sqlite3_int64 v6 = [*(id *)(a1 + 32) groupId];
  }
  else {
    sqlite3_int64 v6 = *(void *)(a1 + 56);
  }
  sqlite3_bind_int64(a2, 2, v6);
  objc_msgSend(*(id *)(a1 + 40), "_pas_componentsJoinedByString:", @" ");
  id v7 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 3, (const char *)[v7 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_msgSend(*(id *)(a1 + 48), "_pas_componentsJoinedByString:", @" ");
  id v8 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 4, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

- (void)_writeContactEntityToJournal:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 masterEntityId];
  if (!v5)
  {
    sqlite3_int64 v6 = [v4 recordId];
    objc_msgSend(v4, "setMasterEntityId:", objc_msgSend(v6, "rowId"));
  }
  id v7 = +[SGContactEntity contactEntityFromEntity:v4];
  id v8 = +[SGStorageContact contactFromContactEntity:v7];

  if (!v5) {
    [v4 setMasterEntityId:0];
  }
  BOOL v9 = [(SGSuggestHistory *)self->_history hasStorageContact:v8];
  id v10 = sgLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "Writing contact to journal", v14, 2u);
  }
  if (v9) {
    uint64_t v11 = 13;
  }
  else {
    uint64_t v11 = 11;
  }

  journal = self->_journal;
  id v13 = [[SGJournalEntry alloc] initWithOperation:v11 contact:v8];
  [(SGJournal *)journal addEntry:v13];
}

- (void)_writeEventEntityToJournal:(id)a3
{
  id v4 = a3;
  uint64_t v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v8 = 0;
    _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "Writing event to journal", v8, 2u);
  }

  journal = self->_journal;
  id v7 = [(SGSqlEntityStore *)self _journalEntryFromEntity:v4];

  [(SGJournal *)journal addEntry:v7];
}

- (void)_writeReminderEntitiesToJournal:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 count];
  sqlite3_int64 v6 = sgLogHandle();
  id v7 = v6;
  if (v5 == 1)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEBUG, "Writing reminder to journal", buf, 2u);
    }

    journal = self->_journal;
    id v7 = [v4 firstObject];
    BOOL v9 = [(SGSqlEntityStore *)self _journalEntryFromReminderEntity:v7];
    [(SGJournal *)journal addEntry:v9];
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "Trying to write multiple reminders to journal, this is not supported", v10, 2u);
  }
}

- (void)_writeEventEntitiesToJournal:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = sgEventsLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = [v4 count];
    id v7 = [v4 valueForKey:@"loggingIdentifier"];
    id v8 = objc_msgSend(v7, "_pas_componentsJoinedByString:", @",");
    *(_DWORD *)long long buf = 134218242;
    uint64_t v11 = v6;
    __int16 v12 = 2114;
    id v13 = v8;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEFAULT, "Writing %lu event entities to journal. [SGEvent (%{public}@)]", buf, 0x16u);
  }
  if ([v4 count] == 1)
  {
    BOOL v9 = [v4 firstObject];
    [(SGSqlEntityStore *)self _writeEventEntityToJournal:v9];
  }
  else
  {
    BOOL v9 = sgMap();
    [(SGJournal *)self->_journal addEntries:v9];
  }
}

uint64_t __58__SGSqlEntityStore_Writing___writeEventEntitiesToJournal___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _journalEntryFromEntity:a2];
}

- (id)_journalEntryFromReminderEntity:(id)a3
{
  id v3 = +[SGStorageReminder storageReminderFromEntity:a3 store:self];
  id v4 = [[SGJournalEntry alloc] initWithOperation:15 reminder:v3];

  return v4;
}

- (id)_journalEntryFromEntity:(id)a3
{
  id v4 = a3;
  uint64_t v5 = +[SGStorageEvent storageEventFromEntity:v4];
  char v6 = [v4 isCancelled];

  if (v6)
  {
    uint64_t v7 = 3;
  }
  else
  {
    id v8 = [v5 convertToEvent:self];
    if ([(SGSuggestHistory *)self->_history isConfirmedEvent:v8])
    {
      uint64_t v7 = 6;
    }
    else if ([(SGSuggestHistory *)self->_history isRejectedEvent:v8])
    {
      uint64_t v7 = 8;
    }
    else
    {
      uint64_t v7 = 1;
    }
  }
  BOOL v9 = [[SGJournalEntry alloc] initWithOperation:v7 event:v5];

  return v9;
}

- (void)_writeEntityParentageFor:(id)a3 entityId:(int64_t)a4
{
  id v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __63__SGSqlEntityStore_Writing___writeEntityParentageFor_entityId___block_invoke;
  v9[3] = &unk_1E65BFEB0;
  void v9[4] = self;
  id v10 = v6;
  int64_t v11 = a4;
  id v8 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
}

void __63__SGSqlEntityStore_Writing___writeEntityParentageFor_entityId___block_invoke(uint64_t a1)
{
  v42[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  id v37 = *(void **)(v3 + 8);
  if (*(_DWORD *)(v3 + 80) < 0x3Eu)
  {
    v39[0] = @"parentKey";
    uint64_t v7 = [*(id *)(a1 + 40) duplicateKey];
    uint64_t v5 = [v7 parentKey];
    if (v5)
    {
      id v38 = [*(id *)(a1 + 40) duplicateKey];
      id v35 = [v38 parentKey];
      uint64_t v8 = [v35 serialize];
    }
    else
    {
      uint64_t v8 = [MEMORY[0x1E4F1CA98] null];
      id v38 = (void *)v8;
    }
    id v36 = (void *)v8;
    v40[0] = v8;
    v39[1] = @"childId";
    __int16 v12 = [NSNumber numberWithLongLong:*(void *)(a1 + 48)];
    v40[1] = v12;
    void v40[2] = @"-";
    v39[2] = @"duplicateKeyHash";
    v39[3] = @"duplicateKeyHashBlob";
    id v13 = [*(id *)(a1 + 40) duplicateKey];
    uint64_t v14 = [v13 compositeHash];
    v40[3] = v14;
    void v39[4] = @"extractionType";
    id v15 = NSNumber;
    uint64_t v16 = [*(id *)(a1 + 40) extractionInfo];
    id v17 = objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "extractionType"));
    v40[4] = v17;
    void v39[5] = @"sourceKey";
    unint64_t v18 = [*(id *)(a1 + 40) sourceKey];
    if (v18) {
      [*(id *)(a1 + 40) sourceKey];
    }
    else {
    uint64_t v22 = [MEMORY[0x1E4F1CA98] null];
    }
    void v40[5] = v22;
    char v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:v39 count:6];
    [v37 insertOrReplaceIntoTable:@"entityParentage" dictionary:v23 onError:0];

    if (v5)
    {
LABEL_27:
    }
  }
  else
  {
    v41[0] = @"parentKey";
    id v4 = [*(id *)(a1 + 40) duplicateKey];
    uint64_t v5 = [v4 parentKey];
    if (v5)
    {
      id v38 = [*(id *)(a1 + 40) duplicateKey];
      id v35 = [v38 parentKey];
      uint64_t v6 = [v35 serialize];
    }
    else
    {
      uint64_t v6 = [MEMORY[0x1E4F1CA98] null];
      id v38 = (void *)v6;
    }
    id v36 = (void *)v6;
    v42[0] = v6;
    v41[1] = @"childId";
    uint64_t v33 = [NSNumber numberWithLongLong:*(void *)(a1 + 48)];
    v42[1] = v33;
    v42[2] = @"-";
    v41[2] = @"duplicateKeyHash";
    v41[3] = @"duplicateKeyHashBlob";
    long long v32 = [*(id *)(a1 + 40) duplicateKey];
    long long v31 = [v32 compositeHash];
    v42[3] = v31;
    void v41[4] = @"extractionType";
    BOOL v9 = NSNumber;
    long long v30 = [*(id *)(a1 + 40) extractionInfo];
    long long v29 = objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v30, "extractionType"));
    void v42[4] = v29;
    void v41[5] = @"modelVersion";
    long long v28 = [*(id *)(a1 + 40) extractionInfo];
    id v10 = [v28 modelVersion];
    id v34 = v4;
    if (v10)
    {
      uint64_t v27 = [*(id *)(a1 + 40) extractionInfo];
      int64_t v11 = [v27 modelVersion];
    }
    else
    {
      int64_t v11 = &unk_1F2535EC8;
    }
    void v42[5] = v11;
    void v41[6] = @"modelConfidence";
    uint64_t v19 = [*(id *)(a1 + 40) extractionInfo];
    uint64_t v20 = [v19 confidence];
    if (v20)
    {
      uint64_t v1 = [*(id *)(a1 + 40) extractionInfo];
      int v21 = [v1 confidence];
    }
    else
    {
      int v21 = &unk_1F2536678;
    }
    v42[6] = v21;
    v41[7] = @"sourceKey";
    uint64_t v24 = [*(id *)(a1 + 40) sourceKey];
    if (v24) {
      [*(id *)(a1 + 40) sourceKey];
    }
    else {
    uint64_t v25 = [MEMORY[0x1E4F1CA98] null];
    }
    v42[7] = v25;
    uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:v41 count:8];
    [v37 insertOrReplaceIntoTable:@"entityParentage" dictionary:v26 onError:0];

    if (v20)
    {
    }
    if (v10)
    {
    }
    uint64_t v7 = v34;
    if (v5) {
      goto LABEL_27;
    }
  }
}

- (int64_t)_writeEnrichmentToDb:(id)a3
{
  id v5 = a3;
  uint64_t v6 = [v5 duplicateKey];

  if (!v6)
  {
    long long v30 = [MEMORY[0x1E4F28B00] currentHandler];
    [v30 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 938, @"Invalid parameter not satisfying: %@", @"enrichment.duplicateKey" object file lineNumber description];
  }
  uint64_t v7 = [v5 duplicateKey];
  [v7 entityType];
  int IsMessage = SGEntityTypeIsMessage();

  if (IsMessage)
  {
    long long v31 = [MEMORY[0x1E4F28B00] currentHandler];
    [v31 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Writing.m" lineNumber:940 description:@"Writing message entity via legacy code path"];
  }
  [(SGSqlEntityStore *)self clearMasterEntityCache];
  [(SGSqlEntityStore *)self _addIndexingTagsTo:v5];
  uint64_t v54 = 0;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x2020000000;
  uint64_t v57 = -1;
  uint64_t v50 = 0;
  long long v51 = &v50;
  uint64_t v52 = 0x2020000000;
  uint64_t v53 = -1;
  uint64_t v46 = 0;
  long long v47 = (double *)&v46;
  uint64_t v48 = 0x2020000000;
  uint64_t v49 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x3032000000;
  uint64_t v43 = __Block_byref_object_copy__22368;
  uint64_t v44 = __Block_byref_object_dispose__22369;
  char v45 = @"SELECT e.id, e.masterEntityId, e.creationTimestamp, e.updateTimestamp FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE (ep.duplicateKeyHashBlob = :duplicateKeyHash AND ep.extractionType = :extractionType)";
  BOOL v9 = [v5 contentHash];

  if (v9)
  {
    id v10 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v11 = [(id)v41[5] stringByAppendingString:@" UNION SELECT e.id, e.masterEntityId, e.creationTimestamp, e.updateTimestamp FROM entity AS e WHERE e.contentHashBlob = :contentHash"];
    __int16 v12 = (void *)v41[5];
    void v41[5] = v11;
  }
  db = self->_db;
  uint64_t v14 = v41[5];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke;
  v38[3] = &unk_1E65C05C8;
  id v15 = v5;
  id v39 = v15;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_2;
  v37[3] = &unk_1E65B98A8;
  v37[4] = &v54;
  void v37[5] = &v50;
  void v37[6] = &v46;
  [(SGSqliteDatabase *)db prepAndRunQuery:v14 onPrep:v38 onRow:v37 onError:0];
  uint64_t v16 = [v15 duplicateKey];
  [v16 entityType];
  if (SGEntityTypeIsContact() && ![v15 masterEntityId])
  {
    uint64_t v29 = v51[3];

    if (v29 != -1)
    {
      [v15 setMasterEntityId:v51[3]];
      char v17 = 0;
      goto LABEL_11;
    }
  }
  else
  {
  }
  char v17 = 1;
LABEL_11:
  [v15 creationTimestamp];
  double v19 = v18;
  [v15 lastModifiedTimestamp];
  if (v55[3] == -1
    || ((v21 = fmax(v19, v20), double v22 = v47[3], v22 != v21) ? (v23 = 1) : (v23 = v17), v22 <= v21 && (v23 & 1) != 0))
  {
    if ([v15 masterEntityId])
    {
      -[SGSqlEntityStore deleteSerializedContactForId:](self, "deleteSerializedContactForId:", [v15 masterEntityId]);
      -[SGSqlEntityStore deleteAllCNContactMatchesForEntityID:](self, "deleteAllCNContactMatchesForEntityID:", [v15 masterEntityId]);
    }
    uint64_t v24 = self->_db;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_3;
    v32[3] = &unk_1E65C06D8;
    id v35 = &v54;
    id v25 = v15;
    id v33 = v25;
    id v34 = self;
    id v36 = &v40;
    [(SGSqliteDatabase *)v24 writeTransaction:v32];
    [(SGSqlEntityStore *)self _contentWriteEnrichmentToDb:v25];
    int64_t v26 = v55[3];
  }
  else
  {
    -[SGSqlEntityStore _writeEntityParentageFor:entityId:](self, "_writeEntityParentageFor:entityId:", v15);
    uint64_t v27 = [MEMORY[0x1E4F5DB20] recordIdWithTableId:0 rowId:v55[3]];
    [v15 setRecordId:v27];

    int64_t v26 = v55[3];
  }

  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);

  return v26;
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) duplicateKey];
  id v5 = [v4 compositeHash];
  +[SGSqliteDatabase bindParam:a2 name:":duplicateKeyHash" nsdata:v5];

  uint64_t v6 = [*(id *)(a1 + 32) extractionInfo];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":extractionType", [v6 extractionType]);

  uint64_t v7 = [*(id *)(a1 + 32) contentHash];

  if (v7)
  {
    id v8 = [*(id *)(a1 + 32) contentHash];
    +[SGSqliteDatabase bindParam:a2 name:":contentHash" nsdata:v8];
  }
}

uint64_t __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_2(void *a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = sqlite3_column_int64(a2, 0);
  *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int64(a2, 1);
  double v4 = sqlite3_column_double(a2, 2);
  *(double *)(*(void *)(a1[6] + 8) + 24) = fmax(v4, sqlite3_column_double(a2, 3));
  return 1;
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_3(uint64_t a1)
{
  v84[17] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  [v2 timeIntervalSince1970];
  double v4 = v3;

  context = (void *)MEMORY[0x1CB79B230]();
  v83[0] = @"id";
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -1) {
    [MEMORY[0x1E4F1CA98] null];
  }
  else {
  id v70 = objc_msgSend(NSNumber, "numberWithLongLong:");
  }
  v84[0] = v70;
  v83[1] = @"entityKey";
  uint64_t v69 = [*(id *)(a1 + 32) duplicateKey];
  id v68 = [v69 entityKey];
  v67 = [v68 serialize];
  v84[1] = v67;
  v83[2] = @"entityType";
  id v5 = NSNumber;
  long long v66 = [*(id *)(a1 + 32) duplicateKey];
  uint64_t v65 = objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v66, "entityType"));
  v84[2] = v65;
  v83[3] = @"author";
  uint64_t v64 = [*(id *)(a1 + 32) author];
  uint64_t v6 = objc_msgSend(v64, "sg_serialized");
  uint64_t v73 = a1;
  long long v63 = (void *)v6;
  if (v6) {
    uint64_t v7 = (__CFString *)v6;
  }
  else {
    uint64_t v7 = &stru_1F24EEF20;
  }
  v84[3] = v7;
  v83[4] = @"title";
  uint64_t v8 = [*(id *)(a1 + 32) title];
  char v62 = (void *)v8;
  if (v8) {
    BOOL v9 = (__CFString *)v8;
  }
  else {
    BOOL v9 = &stru_1F24EEF20;
  }
  v84[4] = v9;
  v83[5] = @"creationTimestamp";
  id v10 = NSNumber;
  [*(id *)(a1 + 32) creationTimestamp];
  uint64_t v61 = objc_msgSend(v10, "numberWithDouble:");
  v84[5] = v61;
  v83[6] = @"updateTimestamp";
  uint64_t v11 = NSNumber;
  [*(id *)(a1 + 32) lastModifiedTimestamp];
  uint64_t v60 = objc_msgSend(v11, "numberWithDouble:");
  v84[6] = v60;
  v83[7] = @"tags";
  uint64_t v59 = [*(id *)(a1 + 32) tags];
  uint64_t v12 = SGEntityTagsForStorage(v59);
  uint64_t v58 = (void *)v12;
  if (v12) {
    id v13 = (__CFString *)v12;
  }
  else {
    id v13 = &stru_1F24EEF20;
  }
  v84[7] = v13;
  v83[8] = @"structuredData";
  uint64_t v14 = [*(id *)(a1 + 32) structuredData];
  id v15 = (void *)v14;
  if (!v14)
  {
    uint64_t v14 = [MEMORY[0x1E4F1CA98] null];
  }
  uint64_t v55 = (void *)v14;
  v84[8] = v14;
  v83[9] = @"state";
  uint64_t v57 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "state"));
  v84[9] = v57;
  v83[10] = @"indexTimestamp";
  uint64_t v56 = [NSNumber numberWithDouble:v4];
  v84[10] = v56;
  v83[11] = @"lastSeenTimestamp";
  uint64_t v16 = [NSNumber numberWithDouble:v4];
  v84[11] = v16;
  v83[12] = @"masterEntityId";
  char v17 = NSNumber;
  uint64_t v18 = [*(id *)(a1 + 32) masterEntityId];
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = -1;
  }
  double v20 = [v17 numberWithLongLong:v19];
  v84[12] = v20;
  v83[13] = @"groupId";
  double v21 = NSNumber;
  uint64_t v22 = [*(id *)(a1 + 32) groupId];
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = -1;
  }
  uint64_t v24 = [v21 numberWithLongLong:v23];
  v84[13] = v24;
  v83[14] = @"contentHashBlob";
  id v25 = [*(id *)(a1 + 32) contentHash];
  int64_t v26 = v25;
  if (!v25)
  {
    int64_t v26 = [MEMORY[0x1E4F1CA98] null];
  }
  v84[14] = v26;
  v83[15] = @"pendingGeocode";
  uint64_t v27 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "pendingGeocode"));
  v84[15] = v27;
  v83[16] = @"harvestedOnBuild";
  long long v28 = [MEMORY[0x1E4F93B10] currentOsBuild];
  v84[16] = v28;
  uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v84 forKeys:v83 count:17];
  id v72 = (void *)[v29 mutableCopy];

  if (!v25) {
  if (!v15)
  }

  long long v30 = *(void **)(a1 + 40);
  long long v31 = [*(id *)(a1 + 32) timeRange];
  [v30 _addTimeRange:v31 toEntityWriteDictionary:v72];

  long long v32 = *(void **)(a1 + 40);
  id v33 = [*(id *)(a1 + 32) locations];
  [v32 _addLocations:v33 toEntityWriteDictionary:v72];

  [*(id *)(*(void *)(a1 + 40) + 8) insertOrReplaceIntoTable:@"entity" dictionary:v72 onError:0];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(*(void *)(a1 + 40) + 8) handle]);
  id v34 = [MEMORY[0x1E4F5DB20] recordIdWithTableId:0 rowId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
  [*(id *)(a1 + 32) setRecordId:v34];

  [*(id *)(a1 + 40) _writeEnrichmentToSnippetsDb:*(void *)(a1 + 32)];
  uint64_t v35 = *(void *)(*(void *)(a1 + 56) + 8);
  id v36 = *(void **)(v35 + 40);
  *(void *)(v35 + 40) = @"DELETE FROM entityTags WHERE entityKey = :entityKey AND entityType = :entityType AND parentKey ";

  id v37 = [*(id *)(a1 + 32) duplicateKey];
  id v38 = [v37 parentKey];

  if (v38) {
    id v39 = @" = :parentKey";
  }
  else {
    id v39 = @" is NULL";
  }
  uint64_t v40 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) stringByAppendingString:v39];
  uint64_t v41 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v42 = *(void **)(v41 + 40);
  *(void *)(v41 + 40) = v40;

  uint64_t v43 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3221225472;
  v80[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_4;
  v80[3] = &unk_1E65C05C8;
  id v81 = *(id *)(a1 + 32);
  [v43 prepAndRunQuery:v44 onPrep:v80 onRow:0 onError:0];
  uint64_t v45 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v46 = *(void **)(v45 + 40);
  *(void *)(v45 + 40) = @"INSERT INTO entityTags (tag, entityKey, entityType, parentKey, duplicateKeyHash, duplicateKeyHashBlob) VALUES (:tag, :entityKey, :entityType, :parentKey, '-', :duplicateKeyHash)";

  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v47 = [*(id *)(a1 + 32) tags];
  uint64_t v48 = [v47 countByEnumeratingWithState:&v76 objects:v82 count:16];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)v77;
    do
    {
      for (uint64_t i = 0; i != v49; ++i)
      {
        if (*(void *)v77 != v50) {
          objc_enumerationMutation(v47);
        }
        uint64_t v52 = *(void **)(*((void *)&v76 + 1) + 8 * i);
        if ([v52 indexed])
        {
          uint64_t v53 = *(void **)(*(void *)(v73 + 40) + 8);
          uint64_t v54 = *(void *)(*(void *)(*(void *)(v73 + 56) + 8) + 40);
          v74[0] = MEMORY[0x1E4F143A8];
          v74[1] = 3221225472;
          v74[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_5;
          void v74[3] = &unk_1E65BEB88;
          v74[4] = v52;
          id v75 = *(id *)(v73 + 32);
          [v53 prepAndRunQuery:v54 onPrep:v74 onRow:0 onError:0];
        }
      }
      uint64_t v49 = [v47 countByEnumeratingWithState:&v76 objects:v82 count:16];
    }
    while (v49);
  }

  [*(id *)(v73 + 40) _writeEntityParentageFor:*(void *)(v73 + 32) entityId:*(void *)(*(void *)(*(void *)(v73 + 48) + 8) + 24)];
  [*(id *)(v73 + 40) _writeFTSTermsForEnrichment:*(void *)(v73 + 32) entityId:*(void *)(*(void *)(*(void *)(v73 + 48) + 8) + 24)];
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_4(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(a1 + 32) duplicateKey];
  id v5 = [v4 entityKey];
  uint64_t v6 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v6];

  uint64_t v7 = [*(id *)(a1 + 32) duplicateKey];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [v7 entityType]);

  uint64_t v8 = [*(id *)(a1 + 32) duplicateKey];
  BOOL v9 = [v8 parentKey];

  if (v9)
  {
    id v12 = [*(id *)(a1 + 32) duplicateKey];
    id v10 = [v12 parentKey];
    uint64_t v11 = [v10 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v11];
  }
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_5(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(a1 + 32) name];
  +[SGSqliteDatabase bindParam:a2 name:":tag" nsstring:v4];

  id v5 = [*(id *)(a1 + 40) duplicateKey];
  uint64_t v6 = [v5 entityKey];
  uint64_t v7 = [v6 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v7];

  uint64_t v8 = [*(id *)(a1 + 40) duplicateKey];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [v8 entityType]);

  BOOL v9 = [*(id *)(a1 + 40) duplicateKey];
  id v10 = [v9 parentKey];
  uint64_t v11 = [v10 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v11];

  id v13 = [*(id *)(a1 + 40) duplicateKey];
  id v12 = [v13 compositeHash];
  +[SGSqliteDatabase bindParam:a2 name:":duplicateKeyHash" nsdata:v12];
}

- (void)_contentWriteEnrichmentToDb:(id)a3
{
  id v9 = a3;
  double v4 = [v9 duplicateKey];
  uint64_t v5 = [v4 entityType];

  if (v5 == 22)
  {
    uint64_t v6 = +[SGStorageReminder storageReminderFromEntity:v9 store:self];
    [v6 commitWithStore:self];
  }
  else
  {
    uint64_t v7 = [v9 duplicateKey];
    [v7 entityType];
    int IsEvent = SGEntityTypeIsEvent();

    if (!IsEvent) {
      goto LABEL_6;
    }
    uint64_t v6 = +[SGStorageEvent storageEventFromEntity:v9];
    [(SGSqlEntityStore *)self commitEvent:v6];
  }

LABEL_6:
}

- (int64_t)_writeOneEntityToDb:(id)a3
{
  id v5 = a3;
  uint64_t v6 = [v5 duplicateKey];

  if (!v6)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 913, @"Invalid parameter not satisfying: %@", @"entity.duplicateKey" object file lineNumber description];
  }
  uint64_t v7 = [v5 duplicateKey];
  [v7 entityType];
  char IsMessage = SGEntityTypeIsMessage();

  if ((IsMessage & 1) == 0)
  {
    id v12 = [MEMORY[0x1E4F28B00] currentHandler];
    [v12 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Writing.m" lineNumber:915 description:@"Writing enrichment via legacy code path"];
  }
  int64_t v9 = [(SGSqlEntityStore *)self _writeMessageEntityToDb:v5];
  [(SGSqlEntityStore *)self _emitChangeNotifications:v5];

  return v9;
}

- (int64_t)_writeMessageEntityToDb:(id)a3
{
  id v4 = a3;
  [(SGSqlEntityStore *)self _addIndexingTagsToParent:v4];
  uint64_t v33 = 0;
  id v34 = &v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = -1;
  uint64_t v29 = 0;
  long long v30 = (double *)&v29;
  uint64_t v31 = 0x2020000000;
  uint64_t v32 = 0;
  uint64_t v25 = 0;
  int64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  int v5 = [v4 state];
  switch(v5)
  {
    case 1:
      +[SGAggregateLogging messagesAdded:1];
      break;
    case 2:
      +[SGAggregateLogging messagesDeleted:1];
      break;
    case 3:
      +[SGAggregateLogging messagesLost:1];
      break;
  }
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = __Block_byref_object_copy__22368;
  void v23[4] = __Block_byref_object_dispose__22369;
  uint64_t v24 = @"SELECT id, creationTimestamp, updateTimestamp, downloadState FROM emailMetadata WHERE key = :key AND type = :type";
  db = self->_db;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke;
  v21[3] = &unk_1E65C05C8;
  id v7 = v4;
  id v22 = v7;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_2;
  v20[3] = &unk_1E65B98A8;
  void v20[4] = &v33;
  v20[5] = &v29;
  v20[6] = &v25;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id, creationTimestamp, updateTimestamp, downloadState FROM emailMetadata WHERE key = :key AND type = :type" onPrep:v21 onRow:v20 onError:0];
  if (v34[3] == -1
    || (double v8 = v30[3],
        [v7 creationTimestamp],
        double v10 = v9,
        [v7 lastModifiedTimestamp],
        v8 <= fmax(v10, v11)))
  {
    if (!*((_DWORD *)v26 + 6) && [v7 hasFullDownloadBeenRequested]) {
      *((_DWORD *)v26 + 6) = 1;
    }
    id v13 = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_3;
    void v15[3] = &unk_1E65B98D0;
    void v15[4] = self;
    char v17 = &v33;
    id v16 = v7;
    uint64_t v18 = &v25;
    uint64_t v19 = v23;
    [(SGSqliteDatabase *)v13 writeTransaction:v15];
    int64_t v12 = v34[3];
  }
  else
  {
    int64_t v12 = v34[3];
  }

  _Block_object_dispose(v23, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);

  return v12;
}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) duplicateKey];
  int v5 = [v4 messageKey];
  uint64_t v6 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:v6];

  id v7 = [*(id *)(a1 + 32) duplicateKey];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":type", [v7 entityType]);
}

uint64_t __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_2(void *a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = sqlite3_column_int64(a2, 0);
  double v4 = sqlite3_column_double(a2, 1);
  *(double *)(*(void *)(a1[5] + 8) + 24) = fmax(v4, sqlite3_column_double(a2, 2));
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = sqlite3_column_int(a2, 3);
  return 1;
}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_3(uint64_t a1)
{
  v61[14] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  [v2 timeIntervalSince1970];
  double v4 = v3;

  uint64_t v43 = *(void **)(*(void *)(a1 + 32) + 8);
  v60[0] = @"id";
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -1) {
    [MEMORY[0x1E4F1CA98] null];
  }
  else {
    objc_msgSend(NSNumber, "numberWithLongLong:");
  }
  id obj = (id)objc_claimAutoreleasedReturnValue();
  v61[0] = obj;
  v60[1] = @"key";
  long long v47 = [*(id *)(a1 + 40) duplicateKey];
  uint64_t v46 = [v47 messageKey];
  uint64_t v45 = [v46 serialize];
  v61[1] = v45;
  v60[2] = @"type";
  int v5 = NSNumber;
  uint64_t v44 = [*(id *)(a1 + 40) duplicateKey];
  uint64_t v42 = objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v44, "entityType"));
  v61[2] = v42;
  v60[3] = @"sourceKey";
  uint64_t v6 = [*(id *)(a1 + 40) sourceKey];
  uint64_t v41 = (void *)v6;
  if (!v6)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA98] null];
  }
  uint64_t v36 = (void *)v6;
  v61[3] = v6;
  v60[4] = @"author";
  uint64_t v40 = [*(id *)(a1 + 40) author];
  uint64_t v7 = objc_msgSend(v40, "sg_serialized");
  id v39 = (void *)v7;
  double v8 = &stru_1F24EEF20;
  if (v7) {
    double v8 = (__CFString *)v7;
  }
  void v61[4] = v8;
  v60[5] = @"creationTimestamp";
  double v9 = NSNumber;
  [*(id *)(a1 + 40) creationTimestamp];
  id v38 = objc_msgSend(v9, "numberWithDouble:");
  v61[5] = v38;
  v60[6] = @"updateTimestamp";
  double v10 = NSNumber;
  [*(id *)(a1 + 40) lastModifiedTimestamp];
  id v37 = objc_msgSend(v10, "numberWithDouble:");
  v61[6] = v37;
  v60[7] = @"indexTimestamp";
  double v11 = [NSNumber numberWithDouble:v4];
  v61[7] = v11;
  v60[8] = @"lastSeenTimestamp";
  int64_t v12 = [NSNumber numberWithDouble:v4];
  v61[8] = v12;
  v60[9] = @"tags";
  id v13 = [*(id *)(a1 + 40) tags];
  uint64_t v14 = SGEntityTagsForStorage(v13);
  v61[9] = v14;
  v60[10] = @"state";
  id v15 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 40), "state"));
  v61[10] = v15;
  v60[11] = @"downloadState";
  id v16 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
  v61[11] = v16;
  v60[12] = @"harvestedOnBuild";
  char v17 = [MEMORY[0x1E4F93B10] currentOsBuild];
  v61[12] = v17;
  v60[13] = @"pendingVerification";
  uint64_t v18 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "pendingVerification"));
  v61[13] = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v61 forKeys:v60 count:14];
  [v43 insertOrReplaceIntoTable:@"emailMetadata" dictionary:v19 onError:0];

  if (!v41) {
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
  }
  double v20 = [MEMORY[0x1E4F5DB20] recordIdForEmailWithRowId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
  [*(id *)(a1 + 40) setRecordId:v20];

  double v21 = [*(id *)(a1 + 40) duplicateKey];
  [v21 entityType];
  int HasSnippetData = SGEntityTypeHasSnippetData();

  if (HasSnippetData) {
    [*(id *)(a1 + 32) _writeMessageEntityToSnippetsDb:*(void *)(a1 + 40)];
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = @"DELETE FROM emailTags WHERE unlikely(key = :key)";

  uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 3221225472;
  v57[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_4;
  v57[3] = &unk_1E65C05C8;
  id v58 = *(id *)(a1 + 40);
  [v25 prepAndRunQuery:v26 onPrep:v57 onRow:0 onError:0];
  uint64_t v27 = *(void *)(*(void *)(a1 + 64) + 8);
  int v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = @"INSERT INTO emailTags (key, type, tag) VALUES (:key, :type, :tag)";

  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id obja = [*(id *)(a1 + 40) tags];
  uint64_t v29 = [obja countByEnumeratingWithState:&v53 objects:v59 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v54;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v54 != v31) {
          objc_enumerationMutation(obja);
        }
        uint64_t v33 = *(void *)(*((void *)&v53 + 1) + 8 * i);
        id v34 = *(void **)(*(void *)(a1 + 32) + 8);
        uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_5;
        v50[3] = &unk_1E65BEB88;
        id v51 = *(id *)(a1 + 40);
        uint64_t v52 = v33;
        [v34 prepAndRunQuery:v35 onPrep:v50 onRow:0 onError:0];
      }
      uint64_t v30 = [obja countByEnumeratingWithState:&v53 objects:v59 count:16];
    }
    while (v30);
  }
}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_4(uint64_t a1, uint64_t a2)
{
  id v5 = [*(id *)(a1 + 32) duplicateKey];
  double v3 = [v5 messageKey];
  double v4 = [v3 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:v4];
}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_5(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(a1 + 32) duplicateKey];
  id v5 = [v4 messageKey];
  uint64_t v6 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:v6];

  uint64_t v7 = [*(id *)(a1 + 32) duplicateKey];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":type", [v7 entityType]);

  id v8 = [*(id *)(a1 + 40) name];
  +[SGSqliteDatabase bindParam:a2 name:":tag" nsstring:v8];
}

- (void)markEntityAsDupeByRecordId:(id)a3
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v13[0] = @"id";
  id v5 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "rowId"));
  v13[1] = @"curatedDupe";
  v14[0] = v5;
  v14[1] = &unk_1F2535EE0;
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];

  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke;
  v10[3] = &unk_1E65C0688;
  void v10[4] = self;
  id v11 = v4;
  id v12 = v6;
  id v8 = v6;
  id v9 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v10];
}

void __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke(uint64_t a1)
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_2;
  v5[3] = &unk_1E65C05C8;
  id v6 = *(id *)(a1 + 40);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_3;
  v4[3] = &unk_1E65BEBB0;
  void v4[4] = &v7;
  [v2 prepAndRunQuery:@"SELECT curatedDupe FROM entity WHERE id = :id" onPrep:v5 onRow:v4 onError:0];
  if (!*((unsigned char *)v8 + 24))
  {
    double v3 = objc_msgSend([NSString alloc], "initWithFormat:", @"id = %lld", objc_msgSend(*(id *)(a1 + 40), "rowId"));
    [*(id *)(*(void *)(a1 + 32) + 8) updateTable:@"entity" dictionary:*(void *)(a1 + 48) whereClause:v3 onError:0];
  }
  _Block_object_dispose(&v7, 8);
}

uint64_t __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":id" int64:v3];
}

uint64_t __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0) != 0;
  return 1;
}

- (void)writeEmailVerificationResultForEmailWithKey:(id)a3 eventEntities:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke;
  v11[3] = &unk_1E65C0688;
  id v12 = v6;
  id v13 = self;
  id v14 = v7;
  id v9 = v7;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v11];
}

void __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sgEventsLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "Removing pendingVerification flag from %@", buf, 0xCu);
  }

  id v4 = *(void **)(*(void *)(a1 + 40) + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_175;
  v10[3] = &unk_1E65C0388;
  id v11 = *(id *)(a1 + 32);
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 3221225472;
  id v7 = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_2;
  id v8 = &unk_1E65C0660;
  id v9 = *(id *)(a1 + 32);
  [v4 prepAndRunSQL:@"UPDATE emailMetadata SET pendingVerificatiouint64_t n = :pendingVerification WHERE key = :key" onPrep:v10 onRow:0 onError:&v5];
  objc_msgSend(*(id *)(a1 + 40), "_writeEventEntitiesToJournal:", *(void *)(a1 + 48), v5, v6, v7, v8);
}

void __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_175(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":pendingVerification" toInteger:0];
  id v4 = [*(id *)(a1 + 32) serialize];
  [v3 bindNamedParam:":key" toNSString:v4];
}

uint64_t __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgEventsLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl(&dword_1CA650000, v4, OS_LOG_TYPE_FAULT, "Error removing pendingVerification flag from %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return *MEMORY[0x1E4F93C10];
}

- (void)writeEntityGeocodeResultToDb:(id)a3
{
  v19[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v18[0] = @"id";
  uint64_t v5 = NSNumber;
  uint64_t v6 = [v4 recordId];
  int v7 = objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "rowId"));
  v18[1] = @"pendingGeocode";
  v19[0] = v7;
  v19[1] = &unk_1F2535EC8;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:2];
  __int16 v9 = (void *)[v8 mutableCopy];

  id v10 = [v4 timeRange];
  [(SGSqlEntityStore *)self _addTimeRange:v10 toEntityWriteDictionary:v9];

  uint64_t v11 = [v4 locations];
  [(SGSqlEntityStore *)self _addLocations:v11 toEntityWriteDictionary:v9];

  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke;
  void v15[3] = &unk_1E65C0688;
  void v15[4] = self;
  id v16 = v4;
  id v17 = v9;
  id v13 = v9;
  id v14 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v15];
}

void __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke(uint64_t a1)
{
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_2;
  void v7[3] = &unk_1E65C05C8;
  id v8 = *(id *)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_3;
  void v6[3] = &unk_1E65BEBB0;
  void v6[4] = &v9;
  [v2 prepAndRunQuery:@"SELECT pendingGeocode FROM entity WHERE id = :id" onPrep:v7 onRow:v6 onError:0];
  if (*((unsigned char *)v10 + 24))
  {
    id v3 = [NSString alloc];
    id v4 = [*(id *)(a1 + 40) recordId];
    uint64_t v5 = objc_msgSend(v3, "initWithFormat:", @"id = %lld", objc_msgSend(v4, "rowId"));

    [*(id *)(*(void *)(a1 + 32) + 8) updateTable:@"entity" dictionary:*(void *)(a1 + 48) whereClause:v5 onError:0];
    [*(id *)(a1 + 32) _writeEventEntityToJournal:*(void *)(a1 + 40)];
  }
  _Block_object_dispose(&v9, 8);
}

void __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) recordId];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", [v3 rowId]);
}

uint64_t __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0) != 0;
  return 1;
}

- (void)_addLocations:(id)a3 toEntityWriteDictionary:(id)a4
{
  id v7 = a3;
  id v5 = a4;
  if ([v7 count])
  {
    [v5 setObject:v7 forKeyedSubscript:@"locations"];
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA98] null];
    [v5 setObject:v6 forKeyedSubscript:@"locations"];
  }
}

- (void)_addTimeRange:(id)a3 toEntityWriteDictionary:(id)a4
{
  id v5 = NSNumber;
  id v6 = a4;
  id v7 = a3;
  [v7 start];
  id v8 = objc_msgSend(v5, "numberWithDouble:");
  [v6 setObject:v8 forKeyedSubscript:@"timeRangeStart"];

  uint64_t v9 = NSNumber;
  [v7 end];
  id v10 = objc_msgSend(v9, "numberWithDouble:");
  [v6 setObject:v10 forKeyedSubscript:@"timeRangeEnd"];

  uint64_t v11 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v7, "startUTCOffsetSeconds"));
  [v6 setObject:v11 forKeyedSubscript:@"timeRangeStartUTCOffsetSeconds"];

  char v12 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v7, "endUTCOffsetSeconds"));
  [v6 setObject:v12 forKeyedSubscript:@"timeRangeEndUTCOffsetSeconds"];

  id v13 = NSNumber;
  uint64_t v14 = [v7 isFloating];

  id v15 = [v13 numberWithBool:v14];
  [v6 setObject:v15 forKeyedSubscript:@"floatingRange"];
}

- (void)_writeEnrichmentToSnippetsDb:(id)a3
{
  id v16 = a3;
  id v5 = [v16 duplicateKey];
  [v5 entityType];
  int IsMessage = SGEntityTypeIsMessage();

  if (IsMessage)
  {
    id v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Writing.m" lineNumber:708 description:@"_writeEntityToSnippetsDb received message entity type"];
  }
  id v7 = objc_opt_new();
  id v8 = NSNumber;
  uint64_t v9 = [v16 recordId];
  id v10 = objc_msgSend(v8, "numberWithLongLong:", objc_msgSend(v9, "rowId"));
  [v7 setObject:v10 forKeyedSubscript:@":entityId"];

  uint64_t v11 = [v16 content];

  if (v11) {
    [v16 content];
  }
  else {
  char v12 = [MEMORY[0x1E4F1CA98] null];
  }
  [v7 setObject:v12 forKeyedSubscript:@":content"];

  if ([v16 contentRangeOfInterest] == 0x7FFFFFFFFFFFFFFFLL)
  {
    [MEMORY[0x1E4F1CA98] null];
  }
  else
  {
    v18.locatiouint64_t n = [v16 contentRangeOfInterest];
    NSStringFromRange(v18);
  id v13 = };
  [v7 setObject:v13 forKeyedSubscript:@":range"];

  uint64_t v14 = [MEMORY[0x1E4F1CA98] null];
  [v7 setObject:v14 forKeyedSubscript:@":title"];

  [(SGDatabaseJournal *)self->_snippetsJournal runQuery:@"INSERT OR REPLACE INTO snippets (entityId, content, contentRangeOfInterest, title) VALUES (:entityId, :content, :range, :title)" values:v7 onDb:self->_snippetDb];
}

- (void)_writeMessageEntityToSnippetsDb:(id)a3
{
  id v20 = a3;
  id v5 = [v20 duplicateKey];
  [v5 entityType];
  char IsMessage = SGEntityTypeIsMessage();

  if ((IsMessage & 1) == 0)
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    NSRange v18 = [v20 duplicateKey];
    [v18 entityType];
    uint64_t v19 = SGEntityTypeDescription();
    [v17 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 677, @"_writeMessageEntityToSnippetsDb received entity type %@", v19 object file lineNumber description];
  }
  id v7 = objc_opt_new();
  id v8 = NSNumber;
  uint64_t v9 = [v20 recordId];
  id v10 = objc_msgSend(v8, "numberWithLongLong:", objc_msgSend(v9, "rowId"));
  [v7 setObject:v10 forKeyedSubscript:@":emailId"];

  uint64_t v11 = [v20 snippetsContent];

  if (v11)
  {
    uint64_t v12 = [v20 snippetsContent];
  }
  else
  {
    id v13 = [v20 content];

    if (v13) {
      [v20 content];
    }
    else {
    uint64_t v12 = [MEMORY[0x1E4F1CA98] null];
    }
  }
  uint64_t v14 = (void *)v12;
  [v7 setObject:v12 forKeyedSubscript:@":content"];

  id v15 = [v20 title];
  if (v15)
  {
    [v7 setObject:v15 forKeyedSubscript:@":title"];
  }
  else
  {
    id v16 = [MEMORY[0x1E4F1CA98] null];
    [v7 setObject:v16 forKeyedSubscript:@":title"];
  }
  [(SGDatabaseJournal *)self->_snippetsJournal runQuery:@"INSERT OR REPLACE INTO emailSnippets (emailId, content, title) VALUES (:emailId, :content, :title)" values:v7 onDb:self->_snippetDb];
}

- (BOOL)entityWantsFullDownload:(id)a3
{
  id v4 = a3;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke;
  v9[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v10 = v6;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke_2;
  v8[3] = &unk_1E65BEBB0;
  void v8[4] = &v11;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT e.downloadState FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE ep.duplicateKeyHashBlob = :duplicateKeyHash AND ep.extractionType = :extractionType" onPrep:v9 onRow:v8 onError:0];
  LOBYTE(db) = *((_DWORD *)v12 + 6) == 1;

  _Block_object_dispose(&v11, 8);
  return (char)db;
}

void __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) duplicateKey];
  id v5 = [v4 compositeHash];
  +[SGSqliteDatabase bindParam:a2 name:":duplicateKeyHash" nsdata:v5];

  id v6 = [*(id *)(a1 + 32) extractionInfo];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":extractionType", [v6 extractionType]);
}

uint64_t __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

- (id)_computePseudoContactContentHash:(id)a3 contactDetails:(id)a4
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v26 = [MEMORY[0x1E4F28B00] currentHandler];
    [v26 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 628, @"Invalid parameter not satisfying: %@", @"contactEntity" object file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v27 = [MEMORY[0x1E4F28B00] currentHandler];
  [v27 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 629, @"Invalid parameter not satisfying: %@", @"contactDetails" object file lineNumber description];

LABEL_3:
  id v10 = [v9 sortedArrayUsingComparator:&__block_literal_global_102_22658];
  uint64_t v11 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v9, "count") + 1);
  uint64_t v12 = [v7 title];
  uint64_t v13 = (void *)v12;
  if (v12) {
    int v14 = (__CFString *)v12;
  }
  else {
    int v14 = &stru_1F24EEF20;
  }
  [v11 addObject:v14];

  id v15 = [v7 duplicateKey];
  id v16 = [v15 identityKey];
  id v17 = [v16 uniqueIdentifier];
  [v11 addObject:v17];

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v18 = v10;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v29 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = [*(id *)(*((void *)&v28 + 1) + 8 * i) normalizedValue];
        [v11 addObject:v23];
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v20);
  }

  uint64_t v24 = SGSha256BytesForStrings(v11, 0);

  return v24;
}

uint64_t __77__SGSqlEntityStore_Writing___computePseudoContactContentHash_contactDetails___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [v4 duplicateKey];
  uint64_t v7 = [v6 entityType];

  id v8 = [v5 duplicateKey];
  uint64_t v9 = [v8 entityType];

  if (v7 < v9) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = 1;
  }
  if (v7 == v9)
  {
    uint64_t v11 = [v4 normalizedValue];
    uint64_t v12 = [v5 normalizedValue];
    uint64_t v10 = [v11 compare:v12];
  }
  return v10;
}

- (void)_dumpTable:(id)a3 columns:(id)a4 limitTo:(int)a5
{
  id v8 = a3;
  id v9 = a4;
  NSLog((NSString *)@"Dump table \"%@\":", v8);
  unint64_t v10 = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  int v23 = a5;
  uint64_t v11 = @"SELECT ";
  while ([v9 count] > v10)
  {
    uint64_t v12 = [v9 objectAtIndexedSubscript:v10];
    uint64_t v13 = [(__CFString *)v11 stringByAppendingString:v12];

    if ([v9 count] - 1 > v10)
    {
      uint64_t v14 = [(__CFString *)v13 stringByAppendingString:@","];

      uint64_t v13 = (__CFString *)v14;
    }
    ++v10;
    uint64_t v11 = v13;
  }
  id v15 = (void *)[[NSString alloc] initWithFormat:@" FROM %@", v8];
  id v16 = [(__CFString *)v11 stringByAppendingString:v15];

  db = self->_db;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __56__SGSqlEntityStore_Writing___dumpTable_columns_limitTo___block_invoke;
  void v19[3] = &unk_1E65BFDD0;
  id v18 = v9;
  id v20 = v18;
  uint64_t v21 = v22;
  [(SGSqliteDatabase *)db prepAndRunQuery:v16 onPrep:0 onRow:v19 onError:0];

  _Block_object_dispose(v22, 8);
}

uint64_t __56__SGSqlEntityStore_Writing___dumpTable_columns_limitTo___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  if ([*(id *)(a1 + 32) count])
  {
    unint64_t v4 = 0;
    id v5 = &stru_1F24EEF20;
    do
    {
      id v6 = [NSString alloc];
      uint64_t v7 = sqlite3_column_nsstring(a2, v4);
      id v8 = (void *)[v6 initWithFormat:@"%@    ", v7];
      id v9 = [(__CFString *)v5 stringByAppendingString:v8];

      ++v4;
      id v5 = v9;
    }
    while ([*(id *)(a1 + 32) count] > v4);
  }
  else
  {
    id v9 = &stru_1F24EEF20;
  }
  NSLog((NSString *)@"%@", v9);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  int v11 = *(_DWORD *)(v10 + 24);
  if (v11 <= 0)
  {
    uint64_t v12 = &SGSqliteDatabaseStop;
  }
  else
  {
    *(_DWORD *)(v10 + 24) = v11 - 1;
    uint64_t v12 = &SGSqliteDatabaseKeepGoing;
  }

  return *v12;
}

- (void)_addIndexingTagsToParent:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [(SGSqlEntityStore *)self _addIndexingTagsTo:v4];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = objc_msgSend(v4, "enrichments", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = (void *)MEMORY[0x1E4F5D9F0];
        int v11 = [*(id *)(*((void *)&v13 + 1) + 8 * v9) duplicateKey];
        uint64_t v12 = objc_msgSend(v10, "containsEntityExtraction:", objc_msgSend(v11, "entityType"));
        [v4 addTag:v12];

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }
}

- (void)_addIndexingTagsTo:(id)a3
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 duplicateKey];
  uint64_t v6 = [v5 entityType];

  if (SGEntityTypeIsContactDetail())
  {
    uint64_t v7 = [v4 duplicateKey];
    uint64_t v8 = SGEntityTypeToContactDetailType([v7 entityType]);

    switch(v8)
    {
      case 0:
        uint64_t v9 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        uint64_t v11 = SGNormalizePhoneNumber();
        goto LABEL_39;
      case 1:
        uint64_t v9 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        uint64_t v11 = SGNormalizeAddress(v10);
        goto LABEL_39;
      case 2:
        uint64_t v9 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        uint64_t v11 = SGNormalizeEmailAddress();
        goto LABEL_39;
      case 3:
        uint64_t v9 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        uint64_t v11 = SGNormalizeInstantMessageAddress(v10);
        goto LABEL_39;
      case 4:
        int v23 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        SGNormalizeSocialProfile(v10);
        objc_claimAutoreleasedReturnValue();
        id v17 = [v23 contactDetail:v10];

        goto LABEL_40;
      case 5:
        uint64_t v46 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        id v17 = [v46 contactDetail:v10];
        goto LABEL_40;
      case 6:
        uint64_t v9 = (void *)MEMORY[0x1E4F5D9F0];
        uint64_t v10 = [v4 title];
        uint64_t v11 = SGNormalizeBirthday(v10);
LABEL_39:
        long long v47 = (void *)v11;
        id v17 = [v9 contactDetail:v11];

LABEL_40:
        break;
      default:
        id v17 = 0;
        break;
    }
    [v4 addTag:v17];
    goto LABEL_42;
  }
  if (SGEntityTypeIsContact())
  {
    uint64_t v12 = [v4 duplicateKey];
    id v13 = [v12 identityKey];

    if ([v13 hasEmailAddress])
    {
      long long v14 = (void *)MEMORY[0x1E4F5D9F0];
      uint64_t v15 = [v13 emailAddress];
    }
    else
    {
      if (![v13 hasPhone])
      {
LABEL_14:
        id v22 = [MEMORY[0x1E4F5D9F0] identity:v13];
        [v4 addTag:v22];

LABEL_35:
        goto LABEL_43;
      }
      long long v14 = (void *)MEMORY[0x1E4F5D9F0];
      uint64_t v15 = [v13 phone];
    }
    id v20 = (void *)v15;
    uint64_t v21 = [v14 contactDetail:v15];
    [v4 addTag:v21];

    goto LABEL_14;
  }
  switch(v6)
  {
    case 2:
      history = self->_history;
      uint64_t v25 = [v4 duplicateKey];
      uint64_t v26 = [v25 pseudoEventKey];
      [v4 creationTimestamp];
      uint64_t v27 = -[SGSuggestHistory identityBasedHashesForPseudoEvent:withCreationTime:](history, "identityBasedHashesForPseudoEvent:withCreationTime:", v26);

      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v13 = v27;
      uint64_t v28 = [v13 countByEnumeratingWithState:&v52 objects:v57 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v53;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v53 != v30) {
              objc_enumerationMutation(v13);
            }
            uint64_t v32 = (void *)MEMORY[0x1E4F5D9F0];
            uint64_t v33 = [*(id *)(*((void *)&v52 + 1) + 8 * i) base64EncodedStringWithOptions:0];
            id v34 = [v32 eventHash:v33];
            [v4 addTag:v34];
          }
          uint64_t v29 = [v13 countByEnumeratingWithState:&v52 objects:v57 count:16];
        }
        while (v29);
      }
      goto LABEL_34;
    case 22:
      uint64_t v35 = self->_history;
      uint64_t v36 = [v4 duplicateKey];
      id v37 = [v36 pseudoReminderKey];
      [v4 creationTimestamp];
      id v38 = -[SGSuggestHistory identityBasedHashesForPseudoReminder:withCreationTime:](v35, "identityBasedHashesForPseudoReminder:withCreationTime:", v37);

      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v13 = v38;
      uint64_t v39 = [v13 countByEnumeratingWithState:&v48 objects:v56 count:16];
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = *(void *)v49;
        do
        {
          for (uint64_t j = 0; j != v40; ++j)
          {
            if (*(void *)v49 != v41) {
              objc_enumerationMutation(v13);
            }
            uint64_t v43 = (void *)MEMORY[0x1E4F5D9F0];
            uint64_t v44 = objc_msgSend(*(id *)(*((void *)&v48 + 1) + 8 * j), "base64EncodedStringWithOptions:", 0, (void)v48);
            uint64_t v45 = [v43 reminderHash:v44];
            [v4 addTag:v45];
          }
          uint64_t v40 = [v13 countByEnumeratingWithState:&v48 objects:v56 count:16];
        }
        while (v40);
      }
LABEL_34:

      goto LABEL_35;
    case 5:
      long long v16 = (void *)MEMORY[0x1E4F5D9F0];
      id v17 = [v4 duplicateKey];
      uint64_t v18 = [v17 emailKey];
      uint64_t v19 = [v16 messageWithEmailKey:v18];
      [v4 addTag:v19];

LABEL_42:
      break;
  }
LABEL_43:
}

- (void)_deleteOldInteractionContactDetails:(id)a3 currentIdentifiers:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 duplicateKey];
  if ([v8 entityType] == 16)
  {
    uint64_t v9 = [v7 count];

    if (v9)
    {
      uint64_t v10 = objc_opt_new();
      uint64_t v11 = [v6 duplicateKey];
      uint64_t v12 = [v11 serialize];

      db = self->_db;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke;
      void v22[3] = &unk_1E65BFF28;
      id v23 = v12;
      id v24 = v7;
      uint64_t v16 = MEMORY[0x1E4F143A8];
      uint64_t v17 = 3221225472;
      uint64_t v18 = __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke_2;
      uint64_t v19 = &unk_1E65BFED8;
      id v20 = v23;
      id v21 = v10;
      id v14 = v10;
      id v15 = v23;
      [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT e.entityKey, e.entityType    FROM entity e JOIN entityParentage ep ON e.id = ep.childId    WHERE ep.parentKey = :parentKey AND e.id not in _pas_nsset(:ids)" onPrep:v22 onRow:&v16 onError:0];
      -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v14, 1, v16, v17, v18, v19);
    }
  }
  else
  {
  }
}

void __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":parentKey" toNSString:v3];
  [v4 bindNamedParam:":ids" toNSSet:*(void *)(a1 + 40)];
}

uint64_t __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 getNSStringForColumnName:"entityKey" table:"entity"];
  uint64_t v5 = [v3 getInt64ForColumnName:"entityType" table:"entity"];

  if ([v4 length] && objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    id v6 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v4 entityType:v5 serializedParentKey:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) addObject:v6];
  }
  id v7 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v7;
}

- (void)_prunePseudoContactGeneratingEmails:(id)a3
{
  id v5 = a3;
  id v6 = [v5 duplicateKey];
  uint64_t v7 = [v6 entityType];

  if (v7 != 5)
  {
    uint64_t v8 = [v5 duplicateKey];
    if ([v8 entityType] != 13)
    {
      uint64_t v9 = [v5 duplicateKey];
      if ([v9 entityType] != 16)
      {
        uint64_t v10 = [v5 duplicateKey];
        uint64_t v11 = [v10 entityType];

        if (v11 == 18) {
          goto LABEL_9;
        }
        uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v9 = [v5 duplicateKey];
        [v9 entityType];
        uint64_t v12 = SGEntityTypeDescription();
        [v8 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 418, @"Don't know how to prune container entities of type %@", v12 object file lineNumber description];
      }
    }

    goto LABEL_9;
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke;
  void v13[3] = &unk_1E65B9860;
  void v13[4] = self;
  [v5 enumeratePeople:v13];
LABEL_9:
}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = __Block_byref_object_copy__22368;
  id v20 = __Block_byref_object_dispose__22369;
  id v21 = 0;
  id v21 = (id)objc_opt_new();
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_44;
  void v14[3] = &unk_1E65C05C8;
  id v5 = v3;
  id v15 = v5;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2;
  void v13[3] = &unk_1E65BEBB0;
  void v13[4] = &v16;
  [v4 prepAndRunQuery:@"SELECT parentKey FROM entityParentage WHERE childId = :childId" onPrep:v14 onRow:v13 onError:0];
  if ((unint64_t)[(id)v17[5] count] > *(void *)(*(void *)(a1 + 32) + 144))
  {
    id v6 = objc_opt_new();
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 8);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_53;
    v12[3] = &unk_1E65B9838;
    void v12[4] = v7;
    void v12[5] = &v16;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_3;
    v10[3] = &unk_1E65BFF78;
    id v9 = v6;
    id v11 = v9;
    [v8 prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE key IN _pas_nsarray(:keys) AND type = :emailType ORDER BY updateTimestamp DESC LIMIT -1 OFFSET :offset" onPrep:v12 onRow:v10 onError:0];
    [*(id *)(a1 + 32) deleteEntitiesByDuplicateKey:v9 emitChangeNotifications:0];
  }
  _Block_object_dispose(&v16, 8);
}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_44(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) recordId];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":childId", [v3 rowId]);
}

uint64_t __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = sqlite3_column_nsstring(a2, 0);
  if (v3)
  {
    if (+[SGDuplicateKey serializationPassesBasicScrutiny:v3])
    {
      id v4 = [[SGDuplicateKey alloc] initWithSerialized:v3];
      if ([(SGDuplicateKey *)v4 entityType] == 5) {
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
      }
    }
    else
    {
      id v5 = sgLogHandle();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        int v7 = 138412290;
        uint64_t v8 = v3;
        _os_log_fault_impl(&dword_1CA650000, v5, OS_LOG_TYPE_FAULT, "invalid serialization found in _prunePseudoContactGeneratingEmails: %@", (uint8_t *)&v7, 0xCu);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
        abort();
      }
    }
  }

  return 0;
}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_53(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v5 = a2;
  id v4 = objc_msgSend(v3, "_pas_proxyArrayWithMapping:", &__block_literal_global_22693);
  [v5 bindNamedParam:":keys" toNSArray:v4];

  [v5 bindNamedParam:":emailType" toInteger:5];
  [v5 bindNamedParam:":offset" toInt64:*(void *)(*(void *)(a1 + 32) + 144)];
}

uint64_t __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = [a2 getNSStringForColumnName:"key" table:"emailMetadata"];
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v3 entityType:5 serializedParentKey:0];
    [v4 addObject:v5];
  }
  else
  {
    id v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEFAULT, "nil key found in emailMetadata", v9, 2u);
    }
  }
  int v7 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v7;
}

id __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2_55(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 emailKey];
  id v3 = [v2 serialize];

  return v3;
}

- (void)_writeContactDetails:(id)a3
{
  id v4 = a3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __50__SGSqlEntityStore_Writing___writeContactDetails___block_invoke;
  void v6[3] = &unk_1E65B97F0;
  id v7 = v4;
  uint64_t v8 = self;
  id v5 = v4;
  [v5 enumeratePeople:v6];
}

void __50__SGSqlEntityStore_Writing___writeContactDetails___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = [*(id *)(a1 + 32) enrichments];
  uint64_t v16 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v16)
  {
    uint64_t v2 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v18 != v2) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v5 = [v4 duplicateKey];
        [v5 entityType];
        if (SGEntityTypeIsContactDetail())
        {
          id v6 = [v4 duplicateKey];
          id v7 = [v6 contactDetailKey];
          uint64_t v8 = [v7 identityKey];
          uint64_t v9 = [v14 duplicateKey];
          uint64_t v10 = [v9 identityKey];
          int v11 = [v8 isEqualToIdentityKey:v10];

          if (!v11) {
            continue;
          }
          uint64_t v12 = *(void **)(a1 + 40);
          id v5 = +[SGContactDetail contactDetailFromEntity:v4];
          [v12 commitContactDetail:v5];
        }
      }
      uint64_t v16 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v16);
  }
}

- (void)_hashAttachedPseudoContacts:(id)a3
{
  id v4 = a3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke;
  void v6[3] = &unk_1E65B97F0;
  id v7 = v4;
  uint64_t v8 = self;
  id v5 = v4;
  [v5 enumeratePeople:v6];
}

void __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) enrichments];
  uint64_t v8 = v3;
  id v5 = v3;
  id v6 = sgMapAndFilter();

  id v7 = [*(id *)(a1 + 40) _computePseudoContactContentHash:v5 contactDetails:v6];
  [v5 setContentHash:v7];
}

id __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 duplicateKey];
  unint64_t v5 = [v4 entityType];

  if (v5 > 0x14 || ((1 << v5) & 0x1881C0) == 0) {
    goto LABEL_7;
  }
  id v7 = [v3 duplicateKey];
  uint64_t v8 = [v7 contactDetailKey];
  uint64_t v9 = [v8 identityKey];
  uint64_t v10 = [*(id *)(a1 + 32) duplicateKey];
  int v11 = [v10 identityKey];
  int v12 = [v9 isEqualToIdentityKey:v11];

  if (!v12)
  {
LABEL_7:
    id v13 = 0;
  }
  else
  {
    id v13 = +[SGContactDetail contactDetailFromEntity:v3];
  }

  return v13;
}

- (void)_emitChangeNotifications:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = objc_msgSend(a3, "enrichments", 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [(SGSqlEntityStore *)self _emitChangeNotificationForEnrichment:*(void *)(*((void *)&v9 + 1) + 8 * v8++)];
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

- (void)_emitChangeNotificationForEnrichment:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 duplicateKey];
  [v5 entityType];
  int IsContact = SGEntityTypeIsContact();

  uint64_t v7 = [v4 duplicateKey];
  uint64_t v8 = v7;
  if (IsContact)
  {
    long long v9 = [v7 identityKey];

    if ([v9 hasPhone])
    {
      long long v10 = [v9 phone];
      [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v10];
    }
    if ([v9 hasEmailAddress])
    {
      long long v11 = [v9 emailAddress];
      [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v11];
    }
    if ([v9 hasInstantMessageAddress])
    {
      long long v12 = [v9 instantMessageAddress];
      [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v12];
    }
    if ([v9 hasSocialProfile])
    {
      id v13 = [SGSocialProfileDetails alloc];
      uint64_t v14 = [v9 socialProfile];
      id v15 = [(SGSocialProfileDetails *)v13 initWithSerialized:v14];

      if (v15)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        uint64_t v16 = [(SGSocialProfileDetails *)v15 uniqueIdentifiers];
        uint64_t v17 = [v16 countByEnumeratingWithState:&v40 objects:v45 count:16];
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = *(void *)v41;
          do
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (*(void *)v41 != v19) {
                objc_enumerationMutation(v16);
              }
              [(SGSqlEntityStore *)self removeStringFromNoContactsCache:*(void *)(*((void *)&v40 + 1) + 8 * i)];
            }
            uint64_t v18 = [v16 countByEnumeratingWithState:&v40 objects:v45 count:16];
          }
          while (v18);
        }
      }
    }
    id v21 = [v4 recordId];
    +[SGDNotificationBroadcaster emitContactUpdated:v21];

    goto LABEL_31;
  }
  [v7 entityType];
  int IsContactDetail = SGEntityTypeIsContactDetail();

  id v23 = [v4 duplicateKey];
  uint64_t v24 = [v23 entityType];
  if (IsContactDetail)
  {
    uint64_t v25 = SGEntityTypeToContactDetailType(v24);

    switch(v25)
    {
      case 0:
        uint64_t v26 = [v4 title];
        uint64_t v27 = SGNormalizePhoneNumber();
        goto LABEL_27;
      case 2:
        uint64_t v26 = [v4 title];
        uint64_t v27 = SGNormalizeEmailAddress();
        goto LABEL_27;
      case 3:
        uint64_t v26 = [v4 title];
        uint64_t v27 = SGNormalizeInstantMessageAddress(v26);
LABEL_27:
        uint64_t v29 = (void *)v27;
        [(SGSqlEntityStore *)self removeStringFromNoContactsCache:v27];
        goto LABEL_28;
      case 4:
        uint64_t v30 = [SGSocialProfileDetails alloc];
        long long v31 = [v4 title];
        uint64_t v26 = [(SGSocialProfileDetails *)v30 initWithSerialized:v31];

        if (!v26) {
          goto LABEL_29;
        }
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v29 = [(SGSocialProfileDetails *)v26 uniqueIdentifiers];
        uint64_t v32 = [v29 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = *(void *)v37;
          do
          {
            for (uint64_t j = 0; j != v33; ++j)
            {
              if (*(void *)v37 != v34) {
                objc_enumerationMutation(v29);
              }
              [(SGSqlEntityStore *)self removeStringFromNoContactsCache:*(void *)(*((void *)&v36 + 1) + 8 * j)];
            }
            uint64_t v33 = [v29 countByEnumeratingWithState:&v36 objects:v44 count:16];
          }
          while (v33);
        }
LABEL_28:

LABEL_29:
LABEL_30:
        long long v9 = [v4 recordId];
        +[SGDNotificationBroadcaster emitContactUpdated:v9];
        break;
      default:
        goto LABEL_30;
    }
    goto LABEL_31;
  }
  int IsEvent = SGEntityTypeIsEvent();

  if (IsEvent)
  {
    long long v9 = [v4 recordId];
    +[SGDNotificationBroadcaster emitEventUpdated:v9];
LABEL_31:
  }
}

- (int64_t)writeEntity:(id)a3 withSpotlightReferenceForBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  uint64_t v14 = (void *)MEMORY[0x1CB79B230]();
  db = self->_db;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __117__SGSqlEntityStore_Writing__writeEntity_withSpotlightReferenceForBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  void v22[3] = &unk_1E65B97A0;
  uint64_t v27 = &v28;
  void v22[4] = self;
  id v16 = v10;
  id v23 = v16;
  id v17 = v11;
  id v24 = v17;
  id v18 = v12;
  id v25 = v18;
  id v19 = v13;
  id v26 = v19;
  [(SGSqliteDatabase *)db writeTransaction:v22];

  int64_t v20 = v29[3];
  _Block_object_dispose(&v28, 8);

  return v20;
}

void __117__SGSqlEntityStore_Writing__writeEntity_withSpotlightReferenceForBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [*(id *)(a1 + 32) writeEntity:*(void *)(a1 + 40)];
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) != -1)
  {
    objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForEmailWithRowId:");
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 32) addSpotlightReferenceToEmailRecordId:v2 withBundleIdentifier:*(void *)(a1 + 48) uniqueIdentifier:*(void *)(a1 + 56) domainIdentifier:*(void *)(a1 + 64)];
  }
}

- (int64_t)writeEnrichment:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(SGSqlEntityStore *)self _writeEnrichmentToDb:v4];
  [(SGSqlEntityStore *)self _emitChangeNotificationForEnrichment:v4];

  return v5;
}

- (int64_t)writeEntity:(id)a3
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [v5 duplicateKey];

  if (!v6)
  {
    uint64_t v35 = [MEMORY[0x1E4F28B00] currentHandler];
    [v35 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 141, @"Invalid parameter not satisfying: %@", @"containerEntity.duplicateKey" object file lineNumber description];
  }
  v55[2] = 0;
  v55[0] = @"writeEntity";
  v55[1] = mach_absolute_time();
  uint64_t v7 = [v5 externalEnrichments];
  uint64_t v8 = [v7 count];

  if (v8) {
    [v5 flushExternalEnrichmentsUponDealloc];
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v9 = [v5 externalEnrichments];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v51 objects:v60 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v52 != v11) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(*((void *)&v51 + 1) + 8 * i) writeWithEntityStore:self];
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v51 objects:v60 count:16];
    }
    while (v10);
  }

  [v5 setRecordId:0];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v13 = [v5 enrichments];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v47 objects:v59 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v48;
    do
    {
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)v48 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v47 + 1) + 8 * j);
        [v17 setRecordId:0];
        [v17 setGroupId:0];
        [v17 setMasterEntityId:0];
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v47 objects:v59 count:16];
    }
    while (v14);
  }

  id v18 = [v5 duplicateKey];
  [v18 entityType];
  char IsMessage = SGEntityTypeIsMessage();

  if (IsMessage)
  {
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2020000000;
    uint64_t v46 = -1;
    [v5 validate];
    if (![(SGSqlEntityStore *)self isEphemeral]
      && (int64_t v20 = objc_opt_class(),
          [v5 accountType],
          id v21 = objc_claimAutoreleasedReturnValue(),
          LODWORD(v20) = [v20 canStoreEventsForAccountType:v21],
          v21,
          !v20)
      || ([MEMORY[0x1E4F5DAF0] shouldHarvestEvents] & 1) == 0)
    {
      [v5 stripEventInformation];
    }
    if ([v5 state] == 2)
    {
      uint64_t v22 = [v5 duplicateKey];
      uint64_t v58 = v22;
      id v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v58 count:1];
      [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v23 emitChangeNotifications:1];

LABEL_26:
      int64_t v24 = v44[3];
LABEL_37:
      _Block_object_dispose(&v43, 8);
      goto LABEL_38;
    }
    uint64_t v27 = [v5 duplicateKey];
    [v27 entityType];
    if (SGEntityTypeIsMessage())
    {
      uint64_t v28 = [v5 enrichments];
      if (![v28 count])
      {
        char v34 = [v5 hasFullDownloadBeenRequested];

        if ((v34 & 1) == 0) {
          goto LABEL_26;
        }
LABEL_34:
        uint64_t v29 = sgLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = [v5 duplicateKey];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v57 = v30;
          _os_log_impl(&dword_1CA650000, v29, OS_LOG_TYPE_INFO, "Writing Entity: %@", buf, 0xCu);
        }
        db = self->_db;
        v39[0] = MEMORY[0x1E4F143A8];
        v39[1] = 3221225472;
        v39[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke;
        v39[3] = &unk_1E65BECB0;
        long long v41 = &v43;
        void v39[4] = self;
        id v32 = v5;
        id v40 = v32;
        SEL v42 = a2;
        [(SGSqliteDatabase *)db writeTransaction:v39];
        [(SGSqlEntityStore *)self _emitChangeNotifications:v32];
        SGRecordMeasurementState(v55);
        int64_t v24 = v44[3];

        goto LABEL_37;
      }
    }
    goto LABEL_34;
  }
  id v25 = [v5 enrichments];
  BOOL v26 = [v25 count] == 0;

  if (!v26)
  {
    long long v36 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v37 = [v5 duplicateKey];
    [v37 entityType];
    long long v38 = SGEntityTypeDescription();
    [v36 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Writing.m", 165, @"Don't know how to write out a container entity of type %@", v38 object file lineNumber description];
  }
  int64_t v24 = [(SGSqlEntityStore *)self _writeOneEntityToDb:v5];
LABEL_38:
  SGRecordMeasurementState(v55);

  return v24;
}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _writeOneEntityToDb:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _hashAttachedPseudoContacts:*(void *)(a1 + 40)];
  id v2 = objc_opt_new();
  id v3 = objc_opt_new();
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 3221225472;
  void v52[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_2;
  v52[3] = &unk_1E65B9750;
  id v4 = *(void **)(a1 + 40);
  void v52[4] = *(void *)(a1 + 32);
  id v40 = v3;
  id v53 = v40;
  id v42 = v2;
  id v54 = v42;
  [v4 enumeratePeople:v52];
  long long v39 = objc_opt_new();
  long long v41 = objc_opt_new();
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v5 = [*(id *)(a1 + 40) enrichments];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v48 objects:v56 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v49;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v49 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v48 + 1) + 8 * v9);
        uint64_t v11 = objc_msgSend(v10, "duplicateKey", v39);
        [v11 entityType];
        char IsContact = SGEntityTypeIsContact();

        if ((IsContact & 1) == 0)
        {
          id v13 = [v10 duplicateKey];
          [v13 entityType];
          int IsContactDetail = SGEntityTypeIsContactDetail();

          if (!IsContactDetail)
          {
            if ([v10 isFromForwardedMessage]) {
              goto LABEL_17;
            }
            id v21 = [v10 extractionInfo];
            if ([v21 extractionType] == 32) {
              goto LABEL_16;
            }
            uint64_t v22 = [v10 duplicateKey];
            if ([v22 entityType] != 2 || objc_msgSend(v10, "pendingGeocode"))
            {

LABEL_16:
LABEL_17:
              id v23 = [v10 duplicateKey];
              uint64_t v24 = [v23 entityType];

              id v25 = v41;
              if (v24 == 22) {
LABEL_18:
              }
                [v25 addObject:v10];
              [*(id *)(a1 + 32) _writeEnrichmentToDb:v10];
              goto LABEL_20;
            }
            char v26 = [*(id *)(a1 + 40) pendingVerification];

            id v25 = v39;
            if (v26) {
              goto LABEL_17;
            }
            goto LABEL_18;
          }
          uint64_t v15 = [v10 duplicateKey];
          id v16 = [v15 contactDetailKey];
          id v17 = [v16 identityKey];
          id v18 = [v42 objectForKeyedSubscript:v17];

          if (v18)
          {
            objc_msgSend(v10, "setGroupId:", objc_msgSend(v18, "longLongValue"));
            uint64_t v19 = [*(id *)(a1 + 32) _writeEnrichmentToDb:v10];
            int64_t v20 = [NSNumber numberWithLongLong:v19];
            [v40 addObject:v20];
          }
        }
LABEL_20:
        ++v9;
      }
      while (v7 != v9);
      uint64_t v27 = [v5 countByEnumeratingWithState:&v48 objects:v56 count:16];
      uint64_t v7 = v27;
    }
    while (v27);
  }

  uint64_t v28 = v39;
  if ([v39 count]) {
    [*(id *)(a1 + 32) _writeEventEntitiesToJournal:v39];
  }
  if (objc_msgSend(v41, "count", v39)) {
    [*(id *)(a1 + 32) _writeReminderEntitiesToJournal:v41];
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v29 = v42;
  uint64_t v30 = [v29 countByEnumeratingWithState:&v44 objects:v55 count:16];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v31; ++i)
      {
        if (*(void *)v45 != v32) {
          objc_enumerationMutation(v29);
        }
        char v34 = [v29 objectForKeyedSubscript:*(void *)(*((void *)&v44 + 1) + 8 * i)];
        uint64_t v35 = v34;
        if (v34) {
          objc_msgSend(*(id *)(a1 + 32), "selectAuthoritativeDetailsForContactWithId:", objc_msgSend(v34, "longLongValue"));
        }
      }
      uint64_t v31 = [v29 countByEnumeratingWithState:&v44 objects:v55 count:16];
    }
    while (v31);
  }

  [*(id *)(a1 + 32) _deleteOldInteractionContactDetails:*(void *)(a1 + 40) currentIdentifiers:v40];
  [*(id *)(a1 + 32) _writeContactDetails:*(void *)(a1 + 40)];
  uint64_t v37 = *(void *)(a1 + 32);
  long long v36 = *(void **)(a1 + 40);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_3;
  v43[3] = &unk_1E65B9778;
  uint64_t v38 = *(void *)(a1 + 56);
  void v43[4] = v37;
  v43[5] = v38;
  [v36 enumeratePeople:v43];
  [*(id *)(a1 + 32) _prunePseudoContactGeneratingEmails:*(void *)(a1 + 40)];
}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 _writeEnrichmentToDb:v4];
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = [NSNumber numberWithLongLong:v5];
  [v6 addObject:v7];

  uint64_t v8 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v5];
  [v4 setRecordId:v8];

  id v13 = +[SGContactDetail contactDetailFromEntity:v4];
  [*(id *)(a1 + 32) commitContactDetail:v13];
  uint64_t v9 = [NSNumber numberWithLongLong:v5];
  uint64_t v10 = *(void **)(a1 + 48);
  uint64_t v11 = [v4 duplicateKey];

  id v12 = [v11 identityKey];
  [v10 setObject:v9 forKeyedSubscript:v12];
}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_3(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = [v10 recordId];
  if (!v3
    || (id v4 = (void *)v3,
        [v10 recordId],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        uint64_t v6 = [v5 rowId],
        v5,
        v4,
        v6 < 0))
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Writing.m" lineNumber:262 description:@"Contact lacks a recordId prior to identity store update"];
  }
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = [v10 recordId];
  [v8 processContactEnrichment:v10 recordId:v9];
}

- (void)writeInteractionEventEntities:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v25 = a3;
  void v36[2] = 0;
  v36[0] = @"writeInteractionEventEntities";
  v36[1] = mach_absolute_time();
  if ([MEMORY[0x1E4F5DAF0] shouldHarvestEvents])
  {
    uint64_t v5 = objc_opt_new();
    SEL v24 = a2;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v6 = v25;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v32 objects:v39 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v33 != v8) {
            objc_enumerationMutation(v6);
          }
          id v10 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v11 = [v10 duplicateKey];
          BOOL v12 = [v11 entityType] == 16;

          if (!v12)
          {
            id v18 = [MEMORY[0x1E4F28B00] currentHandler];
            [v18 handleFailureInMethod:v24 object:self file:@"SGSqlEntityStore+Writing.m" lineNumber:91 description:@"Do not call writeInteractionEventEntities with non-interaction entity type."];
          }
          id v13 = [v10 duplicateKey];
          BOOL v14 = v13 == 0;

          if (v14)
          {
            uint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
            [v19 handleFailureInMethod:v24, self, @"SGSqlEntityStore+Writing.m", 92, @"Invalid parameter not satisfying: %@", @"containerEntity.duplicateKey" object file lineNumber description];
          }
          [v10 validate];
          if ([v10 state] == 2)
          {
            uint64_t v15 = [v10 duplicateKey];
            uint64_t v38 = v15;
            id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v38 count:1];
            [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v16 emitChangeNotifications:1];
          }
          else
          {
            db = self->_db;
            v30[0] = MEMORY[0x1E4F143A8];
            v30[1] = 3221225472;
            v30[2] = __59__SGSqlEntityStore_Writing__writeInteractionEventEntities___block_invoke;
            v30[3] = &unk_1E65C0688;
            v30[4] = self;
            void v30[5] = v10;
            id v31 = v5;
            [(SGSqliteDatabase *)db writeTransaction:v30];
          }
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:&v32 objects:v39 count:16];
      }
      while (v7);
    }

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v20 = v6;
    uint64_t v21 = [v20 countByEnumeratingWithState:&v26 objects:v37 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v27;
      do
      {
        for (uint64_t j = 0; j != v21; ++j)
        {
          if (*(void *)v27 != v22) {
            objc_enumerationMutation(v20);
          }
          [(SGSqlEntityStore *)self _emitChangeNotifications:*(void *)(*((void *)&v26 + 1) + 8 * j)];
        }
        uint64_t v21 = [v20 countByEnumeratingWithState:&v26 objects:v37 count:16];
      }
      while (v21);
    }

    SGRecordMeasurementState(v36);
  }
  SGRecordMeasurementState(v36);
}

uint64_t __59__SGSqlEntityStore_Writing__writeInteractionEventEntities___block_invoke(id *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (![a1[4] _writeOneEntityToDb:a1[5]])
  {
    id v2 = sgEventsLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "Attempt to write entity to DB returned entityId 0", buf, 2u);
    }
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v3 = objc_msgSend(a1[5], "enrichments", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v9 = [v8 duplicateKey];
        [v9 entityType];
        int IsEvent = SGEntityTypeIsEvent();

        if (!IsEvent)
        {
          BOOL v12 = sgEventsLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            id v13 = v12;
            BOOL v14 = "Skipping non-event enrichment";
            goto LABEL_21;
          }
LABEL_22:

          continue;
        }
        if ([v8 pendingGeocode])
        {
          uint64_t v11 = sgEventsLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, "Skipping event pending geocode.", buf, 2u);
          }
        }
        else
        {
          [a1[6] addObject:v8];
        }
        if (![a1[4] _writeEnrichmentToDb:v8])
        {
          BOOL v12 = sgEventsLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            id v13 = v12;
            BOOL v14 = "Attempt to write enrichment to DB returned enrichmentId 0";
LABEL_21:
            _os_log_impl(&dword_1CA650000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
          }
          goto LABEL_22;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v5);
  }

  uint64_t v15 = sgEventsLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = [a1[6] count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v23 = v16;
    _os_log_impl(&dword_1CA650000, v15, OS_LOG_TYPE_DEFAULT, "Number of event entities to journal: %lu", buf, 0xCu);
  }

  uint64_t result = [a1[6] count];
  if (result) {
    return [a1[4] _writeEventEntitiesToJournal:a1[6]];
  }
  return result;
}

+ (BOOL)canStoreEventsForAccountType:(id)a3
{
  return [a3 isEqualToString:*MEMORY[0x1E4F22750]] ^ 1;
}

- (void)setMalformedEventWhenRangeForTesting
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_TestHelpers__setMalformedEventWhenRangeForTesting__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __69__SGSqlEntityStore_TestHelpers__setMalformedEventWhenRangeForTesting__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"UPDATE events SET whenRange = \"MalformedData\"" onPrep:0 onRow:0 onError:0];
}

- (SGUnixTimestamp_)lastSeenTimestampForKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke;
  v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT lastSeenTimestamp FROM emailMetadata WHERE key = :emailKey" onPrep:v10 onRow:v9 onError:0];
  *(SGUnixTimestamp_ *)&v7.secondsFromUnixEpoch = (SGUnixTimestamp_)v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) serialize];
  +[SGSqliteDatabase bindParam:a2 name:":emailKey" nsstring:v3];
}

uint64_t __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_double(a2, 0);
  return 1;
}

- (void)setParentMessagesLimitForTesting:(unint64_t)a3
{
  self->_parentMessagesLimit = a3;
}

- (id)historyForTesting
{
  return self->_history;
}

- (id)snippetsDbHandleForTesting
{
  return self->_snippetDb;
}

- (id)dbHandleForTesting
{
  return self->_db;
}

- (void)setLostMessageOverflow:(unint64_t)a3
{
  self->_lostMessageOverflow = a3;
}

+ (void)clearMigrationCompletedForPaths
{
}

- (void)updateSerializedContacts:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = (_xpc_activity_s *)a3;
  v30[2] = 0;
  v30[0] = @"updateSerializedContacts";
  v30[1] = mach_absolute_time();
  if (![(SGSqlEntityStore *)self _processBatchOfSerializedContactJobs])
  {
    uint64_t v5 = objc_opt_new();
    id v6 = [(SGSqlEntityStore *)self allContactsMasterEntityIdsLimitedTo:self->_serializedContactsLimit];
    SGUnixTimestamp_ v7 = [(SGSqlEntityStore *)self serializedEntityIds];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if (([v7 containsObject:v12] & 1) == 0) {
            [v5 addObject:v12];
          }
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v9);
    }

    if ([v5 count])
    {
      db = self->_db;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke;
      v23[3] = &unk_1E65BFD88;
      id v24 = v5;
      uint64_t v25 = self;
      [(SGSqliteDatabase *)db writeTransaction:v23];
    }
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v14 = +[SGXPCActivityManager sharedInstance];
      int v15 = [v14 shouldDefer:v4];

      if (v15) {
        break;
      }
    }
    uint64_t v16 = (void *)MEMORY[0x1CB79B230]();
    BOOL v17 = [(SGSqlEntityStore *)self _processBatchOfSerializedContactJobs];
    if (!v17)
    {
      long long v18 = sgLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1CA650000, v18, OS_LOG_TYPE_INFO, "done serializing new contacts", v22, 2u);
      }

      [(SGSqlEntityStore *)self _trimSerializedContacts];
      long long v19 = sgLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1CA650000, v19, OS_LOG_TYPE_INFO, "done trimming serialized contacts", v22, 2u);
      }

      SGRecordMeasurementState(v30);
      goto LABEL_29;
    }
  }
  if (!xpc_activity_set_state(v4, 3))
  {
    long long v20 = sgLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      _os_log_error_impl(&dword_1CA650000, v20, OS_LOG_TYPE_ERROR, "Could not defer activity", v22, 2u);
    }
  }
  long long v21 = sgLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1CA650000, v21, OS_LOG_TYPE_INFO, "serialized contact precomputation deferring", v22, 2u);
  }

LABEL_29:
  SGRecordMeasurementState(v30);
}

void __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * v6);
        id v8 = *(void **)(*(void *)(a1 + 40) + 8);
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3221225472;
        v9[2] = __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke_2;
        v9[3] = &unk_1E65C05C8;
        void v9[4] = v7;
        [v8 prepAndRunQuery:@"INSERT INTO serializedContactCacheJobs (id) VALUES (?)" onPrep:v9 onRow:0 onError:0];
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

uint64_t __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = [*(id *)(a1 + 32) longLongValue];
  return sqlite3_bind_int64(a2, 1, v3);
}

- (BOOL)_processBatchOfSerializedContactJobs
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __76__SGSqlEntityStore_SerializedContacts___processBatchOfSerializedContactJobs__block_invoke;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  [(SGSqliteDatabase *)db writeTransaction:v5];
  char v3 = *((unsigned char *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __76__SGSqlEntityStore_SerializedContacts___processBatchOfSerializedContactJobs__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) _popQueuedSerializedContactId];
  if (v2 < 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    return;
  }
  uint64_t v3 = v2;
  v8[0] = @"updateSerializedContacts-onequery";
  v8[1] = mach_absolute_time();
  v8[2] = 0;
  uint64_t v4 = [*(id *)(a1 + 32) storageContactByMasterEntityId:v3 withSnippets:0];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = [*(id *)(a1 + 32) loadContactForStorageContact:v4 usingSerializedContactCache:0];
  uint64_t v6 = v5;
  if (!v5 || ![v5 containsSuggestions])
  {
LABEL_8:
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_INFO, "Writing placeholder for contact id: %lli", buf, 0xCu);
    }

    [*(id *)(a1 + 32) writeSerializedContactPlaceholder:v3];
    goto LABEL_11;
  }
  [*(id *)(a1 + 32) writeSerializedContact:v6];
LABEL_11:
  SGRecordMeasurementState(v8);
}

- (int64_t)_popQueuedSerializedContactId
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = -1;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  [(SGSqliteDatabase *)db writeTransaction:v5];
  int64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_2;
  void v7[3] = &unk_1E65BEBB0;
  void v7[4] = *(void *)(a1 + 40);
  uint64_t result = [v2 prepAndRunQuery:@"SELECT id FROM serializedContactCacheJobs LIMIT 1" onPrep:0 onRow:v7 onError:0];
  uint64_t v4 = *(void *)(a1 + 40);
  if ((*(void *)(*(void *)(v4 + 8) + 24) & 0x8000000000000000) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_3;
    void v6[3] = &unk_1E65B9C48;
    void v6[4] = v4;
    return [v5 prepAndRunQuery:@"DELETE FROM serializedContactCacheJobs WHERE id=?" onPrep:v6 onRow:0 onError:0];
  }
  return result;
}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
}

- (void)_trimSerializedContacts
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

void __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3032000000;
  void v8[3] = __Block_byref_object_copy__23660;
  void v8[4] = __Block_byref_object_dispose__23661;
  id v9 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  int64_t v3 = *(void **)(v2 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_2;
  void v7[3] = &unk_1E65BFDD0;
  void v7[4] = v2;
  void v7[5] = v8;
  [v3 prepAndRunQuery:@"SELECT entityId, data FROM serializedContacts ORDER BY entityId DESC", 0, v7, &__block_literal_global_69 onPrep onRow onError];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_73;
  void v6[3] = &unk_1E65C05C8;
  void v6[4] = v4;
  [v5 prepAndRunQuery:@"DELETE FROM serializedContacts ORDER BY id DESC LIMIT -1 OFFSET ?" onPrep:v6 onRow:0 onError:0];
  _Block_object_dispose(v8, 8);
}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_opt_class(), 0);
  uint64_t v6 = sqlite3_column_nssecurecoding(a2, 1, v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      sqlite3_int64 v12 = sqlite3_column_int64(a2, 0);
      _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact%lldld", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "deleteSerializedContactForId:", sqlite3_column_int64(a2, 0));
  }
  return 0;
}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_73(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(*(void *)(a1 + 32) + 152));
}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_67(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  int64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to load all serialized contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)serializedEntityIds
{
  int64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:self->_serializedContactsLimit];
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_SerializedContacts__serializedEntityIds__block_invoke;
  void v7[3] = &unk_1E65BEC60;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT entityId FROM serializedContacts" onPrep:0 onRow:v7 onError:0];

  return v5;
}

uint64_t __59__SGSqlEntityStore_SerializedContacts__serializedEntityIds__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v2 = *(void **)(a1 + 32);
  int64_t v3 = objc_msgSend(NSNumber, "numberWithLongLong:", sqlite3_column_int64(a2, 0));
  [v2 addObject:v3];

  return 0;
}

- (id)loadAllSerializedContacts
{
  int64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:self->_serializedContactsLimit];
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke;
  void v7[3] = &unk_1E65BEC60;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT entityId, data FROM serializedContacts ORDER BY entityId DESC" onPrep:0 onRow:v7 onError:&__block_literal_global_62_23673];

  return v5;
}

uint64_t __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1CB79B230]();
  id v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_opt_class(), 0);
  id v6 = sqlite3_column_nssecurecoding(a2, 1, v5);

  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
  }
  else
  {
    id v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      sqlite3_int64 v9 = sqlite3_column_int64(a2, 0);
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact: %lld", buf, 0xCu);
    }
  }

  return 0;
}

uint64_t __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke_60(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  int64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to load all serialized contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)loadSerializedContactForId:(int64_t)a3
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = __Block_byref_object_copy__23660;
  uint64_t v16 = __Block_byref_object_dispose__23661;
  id v17 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke;
  v11[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v11[4] = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2;
  v10[3] = &unk_1E65BEBB0;
  void v10[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT data FROM serializedContacts WHERE entityId = ?" onPrep:v11 onRow:v10 onError:0];
  uint64_t v4 = v13[5];
  if (loadSerializedContactForId___pasOnceToken10 != -1) {
    dispatch_once(&loadSerializedContactForId___pasOnceToken10, &__block_literal_global_45);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2_48;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  BOOL v9 = v4 != 0;
  int v5 = (id)loadSerializedContactForId___pasExprOnceResult;
  dispatch_async(v5, block);
  id v6 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v6;
}

uint64_t __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

uint64_t __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1CB79B230]();
  int v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_opt_class(), 0);
  uint64_t v6 = sqlite3_column_nssecurecoding(a2, 0, v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  return 1;
}

void __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2_48(uint64_t a1)
{
  id v8 = (id)objc_opt_new();
  [v8 setCacheHit:*(unsigned __int8 *)(a1 + 32)];
  id v2 = [MEMORY[0x1E4F93728] sharedInstance];
  [v2 trackScalarForMessage:v8];

  id v3 = [NSString alloc];
  uint64_t v4 = *MEMORY[0x1E4F5DEF0];
  int v5 = [v8 key];
  uint64_t v6 = (void *)[v3 initWithFormat:@"%@.%@", v4, v5];

  uint64_t v7 = [v8 dictionaryRepresentation];
  AnalyticsSendEvent();
}

void __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_43()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [MEMORY[0x1E4F93B18] autoreleasingSerialQueueWithLabel:"loadSerializedContactForId" qosClass:9];
  id v2 = (void *)loadSerializedContactForId___pasExprOnceResult;
  loadSerializedContactForId___pasExprOnceResult = v1;
}

- (void)deleteSerializedContactsForIdSet:(id)a3
{
  id v5 = a3;
  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke;
  void v8[3] = &unk_1E65BFEB0;
  uint64_t v10 = self;
  SEL v11 = a2;
  id v9 = v5;
  id v7 = v5;
  [(SGSqliteDatabase *)db writeTransaction:v8];
}

void __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke(uint64_t a1)
{
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_2;
  uint64_t v10 = &unk_1E65B9C20;
  long long v11 = *(_OWORD *)(a1 + 40);
  id v2 = sgMap();
  id v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_3;
  v5[3] = &unk_1E65C0388;
  id v6 = v2;
  id v4 = v2;
  [v3 prepAndRunSQL:@"DELETE FROM serializedContacts WHERE entityId IN _pas_nsarray(:ids)" onPrep:v5 onRow:0 onError:&__block_literal_global_36];
}

id __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 tableId])
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"SGSqlEntityStore+SerializedContacts.m", 92, @"Unexpected table for recordId: %@", v3 object file lineNumber description];
  }
  id v4 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v3, "rowId"));

  return v4;
}

uint64_t __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to delete serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E4F93C10];
}

- (void)deleteSerializedContactForId:(int64_t)a3
{
  db = self->_db;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke;
  v4[3] = &unk_1E65BF9C0;
  void v4[4] = self;
  void v4[5] = a3;
  [(SGSqliteDatabase *)db writeTransaction:v4];
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_2;
  v3[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v3[4] = *(void *)(a1 + 40);
  return [v1 prepAndRunQuery:@"DELETE FROM serializedContacts WHERE entityId = ?" onPrep:v3 onRow:0 onError:&__block_literal_global_28];
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to delete serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (void)writeSerializedContactPlaceholder:(int64_t)a3
{
  db = self->_db;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke;
  v4[3] = &unk_1E65BF9C0;
  void v4[4] = self;
  void v4[5] = a3;
  [(SGSqliteDatabase *)db writeTransaction:v4];
}

void __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke(uint64_t a1)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = @"entityId";
  id v3 = [NSNumber numberWithLongLong:v1];
  v6[1] = @"data";
  v7[0] = v3;
  id v4 = [MEMORY[0x1E4F1CA98] null];
  v7[1] = v4;
  int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
  [v2 insertOrReplaceIntoTable:@"serializedContacts" dictionary:v5 onError:&__block_literal_global_22];
}

uint64_t __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to insert serialized contact placeholder: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (void)writeSerializedContact:(id)a3
{
  id v5 = a3;
  id v6 = [v5 recordId];
  int v7 = [v6 tableId];

  if (v7)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v11 = [v5 recordId];
    [v10 handleFailureInMethod:a2, self, @"SGSqlEntityStore+SerializedContacts.m", 45, @"Unexpected table for recordId: %@", v11 object file lineNumber description];
  }
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke;
  v12[3] = &unk_1E65BFD88;
  void v12[4] = self;
  id v13 = v5;
  id v9 = v5;
  [(SGSqliteDatabase *)db writeTransaction:v12];
}

void __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke(uint64_t a1)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  id v4 = *(void **)(v3 + 8);
  v9[0] = @"entityId";
  id v5 = NSNumber;
  id v6 = [v2 recordId];
  int v7 = objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "rowId"));
  v9[1] = @"data";
  v10[0] = v7;
  v10[1] = *(void *)(a1 + 40);
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:2];
  [v4 insertOrReplaceIntoTable:@"serializedContacts" dictionary:v8 onError:&__block_literal_global_23710];
}

uint64_t __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to insert serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (unint64_t)serializedContactsLimit
{
  return self->_serializedContactsLimit;
}

- (void)setSerializedContactsLimit:(unint64_t)a3
{
  self->_serializedContactsLimit = a3;
}

- (id)loadEventsWithInteractionIdentifiers:(id)a3 fromBundleIdentifier:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (!v8)
  {
    long long v19 = [MEMORY[0x1E4F28B00] currentHandler];
    [v19 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 670, @"Invalid parameter not satisfying: %@", @"bundleId" object file lineNumber description];
  }
  if (![v7 count])
  {
    long long v20 = [MEMORY[0x1E4F28B00] currentHandler];
    [v20 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 671, @"Invalid parameter not satisfying: %@", @"identifiers.count != 0" object file lineNumber description];
  }
  id v9 = sgMap();
  uint64_t v10 = [(SGSqlEntityStore *)self duplicateKeysMatchingInteractionBundleId:v8 andTags:v9];
  long long v11 = objc_opt_new();
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v12 = v10;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        id v17 = [(SGSqlEntityStore *)self loadEventByDuplicateKey:*(void *)(*((void *)&v21 + 1) + 8 * i)];
        if (v17) {
          [v11 addObject:v17];
        }
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v14);
  }

  return v11;
}

uint64_t __87__SGSqlEntityStore_Loading__loadEventsWithInteractionIdentifiers_fromBundleIdentifier___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9F0] interactionId:a2];
}

- (id)allDeliveriesWithLimit:(unint64_t)a3
{
  uint64_t v3 = [(SGSqlEntityStore *)self allEntitiesOfType:24 limitedTo:a3];
  id v4 = sgMap();

  return v4;
}

uint64_t __52__SGSqlEntityStore_Loading__allDeliveriesWithLimit___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9D0] deliveryForEntity:a2 store:*(void *)(a1 + 32)];
}

- (id)loadReminderByRecordIdOld:(id)a3
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = [(SGSqlEntityStore *)self loadEntityByRecordId:v4];
  if (v5)
  {
    id v6 = +[SGStorageReminder storageReminderFromEntity:v5 store:self];
  }
  else
  {
    id v7 = sgRemindersLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v4;
      _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "Unable to load entity by recordId: %@", (uint8_t *)&v9, 0xCu);
    }

    id v6 = 0;
  }

  return v6;
}

- (id)loadReminderByKeyOld:(id)a3
{
  id v5 = a3;
  id v6 = [(SGSqlEntityStore *)self loadEntityByKey:v5];
  if (!v6)
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    [v9 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 639, @"Invalid duplicate key: %@", v5 object file lineNumber description];
  }
  id v7 = +[SGStorageReminder storageReminderFromEntity:v6 store:self];

  return v7;
}

- (id)allRemindersLimitedTo:(unint64_t)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  long long v21 = &v20;
  uint64_t v22 = 0x3032000000;
  long long v23 = __Block_byref_object_copy__24531;
  long long v24 = __Block_byref_object_dispose__24532;
  id v25 = 0;
  id v25 = (id)objc_opt_new();
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke;
  void v19[3] = &unk_1E65BEBB0;
  void v19[4] = &v20;
  id v5 = (void *)MEMORY[0x1CB79B4C0](v19);
  db = self->_db;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke_2;
  v18[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v18[4] = a3;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id FROM reminders LIMIT ?" onPrep:v18 onRow:v5 onError:0];
  id v7 = objc_opt_new();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v8 = (id)v21[5];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v8);
        }
        id v12 = -[SGSqlEntityStore getReminder:](self, "getReminder:", objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "longValue", (void)v14));
        [v7 addObject:v12];
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v26 count:16];
    }
    while (v9);
  }

  _Block_object_dispose(&v20, 8);
  return v7;
}

uint64_t __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = sqlite3_column_int64(a2, 0);
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v5 = [NSNumber numberWithLongLong:v3];
  [v4 addObject:v5];

  return 0;
}

uint64_t __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int(a2, 1, *(_DWORD *)(a1 + 32));
}

- (id)entityKeyCountsForEntityType:(int64_t)a3 startDate:(id)a4 endDate:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = objc_opt_new();
  db = self->_db;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke;
  v20[3] = &unk_1E65BA1A0;
  id v22 = v9;
  int64_t v23 = a3;
  id v21 = v8;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke_2;
  v18[3] = &unk_1E65BEC60;
  id v12 = v10;
  id v19 = v12;
  id v13 = v9;
  id v14 = v8;
  long long v15 = v19;
  id v16 = v12;

  return v16;
}

uint64_t __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) timeIntervalSince1970];
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":startDate");
  [*(id *)(a1 + 40) timeIntervalSince1970];
  return +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":endDate");
}

uint64_t __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = *(void **)(a1 + 32);
  id v4 = (void *)MEMORY[0x1E4F93BB8];
  id v5 = sqlite3_column_nsstring(a2, 0);
  id v6 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(a2, 1));
  id v7 = [v4 tupleWithFirst:v5 second:v6];
  [v3 addObject:v7];

  return 0;
}

- (id)loadAllContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 dedupeAgainst:(id)a5
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v10;
  if (!v8)
  {
    long long v48 = [MEMORY[0x1E4F28B00] currentHandler];
    [v48 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 513, @"Invalid parameter not satisfying: %@", @"where" object file lineNumber description];

    if (v11) {
      goto LABEL_3;
    }
LABEL_35:
    long long v49 = [MEMORY[0x1E4F28B00] currentHandler];
    [v49 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 514, @"Invalid parameter not satisfying: %@", @"details" object file lineNumber description];

    goto LABEL_3;
  }
  if (!v10) {
    goto LABEL_35;
  }
LABEL_3:
  context = (void *)MEMORY[0x1CB79B230]();
  id v12 = [v8 stringByAppendingString:@" AND e.entityType IN (:detPhone, :detAddr, :detEmailAddr, :detSocialProfile, :curPhone, :curAddr, :curEmailAddr, :detBirthday, :curBirthday, :curPhotoPath)"];
  uint64_t v13 = [(SGSqlEntityStore *)self selectEntityQuery:v12];

  long long v56 = objc_opt_new();
  [v56 addObjectsFromArray:v11];
  id v14 = objc_opt_new();
  db = self->_db;
  v68[0] = MEMORY[0x1E4F143A8];
  v68[1] = 3221225472;
  v68[2] = __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke;
  v68[3] = &unk_1E65BA150;
  id v16 = v9;
  id v69 = v16;
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 3221225472;
  v65[2] = __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke_2;
  v65[3] = &unk_1E65BA178;
  void v65[4] = self;
  SEL v67 = a2;
  id v17 = v14;
  id v66 = v17;
  long long v51 = (void *)v13;
  [(SGSqliteDatabase *)db prepAndRunQuery:v13 onPrep:v68 onRow:v65 onError:0];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v18 = v17;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v61 objects:v71 count:16];
  id v53 = v11;
  id v54 = v8;
  long long v50 = v16;
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v62;
    while (2)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v62 != v21) {
          objc_enumerationMutation(v18);
        }
        int64_t v23 = [*(id *)(*((void *)&v61 + 1) + 8 * i) tags];
        long long v24 = [MEMORY[0x1E4F5D9F0] fromReply];
        int v25 = [v23 containsObject:v24];

        if (!v25)
        {
          int v26 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v61 objects:v71 count:16];
      if (v20) {
        continue;
      }
      break;
    }
  }
  int v26 = 0;
LABEL_13:

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id v27 = v18;
  uint64_t v28 = [v27 countByEnumeratingWithState:&v57 objects:v70 count:16];
  if (!v28) {
    goto LABEL_31;
  }
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)v58;
  do
  {
    for (uint64_t j = 0; j != v29; ++j)
    {
      if (*(void *)v58 != v30) {
        objc_enumerationMutation(v27);
      }
      uint64_t v32 = *(void **)(*((void *)&v57 + 1) + 8 * j);
      if (v26)
      {
        long long v33 = [*(id *)(*((void *)&v57 + 1) + 8 * j) tags];
        long long v34 = [MEMORY[0x1E4F5D9F0] fromReply];
        char v35 = [v33 containsObject:v34];

        if (v35) {
          continue;
        }
      }
      long long v36 = [v32 duplicateKey];
      [v36 entityType];
      if (SGEntityTypeIsContact())
      {
        uint64_t v37 = [v32 duplicateKey];
        uint64_t v38 = [v37 identityKey];
        uint64_t v39 = [v38 type];

        if (v39 == 4) {
          continue;
        }
      }
      else
      {
      }
      uint64_t v40 = [v32 duplicateKey];
      [v40 entityType];
      if ((SGEntityTypeIsContactDetail() & 1) == 0)
      {

LABEL_28:
        long long v44 = +[SGContactDetail contactDetailFromEntity:v32];
        [v56 addObject:v44];

        continue;
      }
      history = self->_history;
      id v42 = [v32 duplicateKey];
      uint64_t v43 = [v42 contactDetailKey];
      LOBYTE(history) = [(SGSuggestHistory *)history hasContactDetailKey:v43];

      if ((history & 1) == 0) {
        goto LABEL_28;
      }
    }
    uint64_t v29 = [v27 countByEnumeratingWithState:&v57 objects:v70 count:16];
  }
  while (v29);
LABEL_31:

  long long v45 = [(SGSqlEntityStore *)self filterOutUndisplayableEntities:v56];
  long long v46 = +[SGDeduper dedupeContactDetails:v45];

  return v46;
}

uint64_t __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
  }
  +[SGSqliteDatabase bindParam:a2 name:":detPhone" int64:6];
  +[SGSqliteDatabase bindParam:a2 name:":detAddr" int64:7];
  +[SGSqliteDatabase bindParam:a2 name:":detEmailAddr" int64:8];
  +[SGSqliteDatabase bindParam:a2 name:":detSocialProfile" int64:19];
  +[SGSqliteDatabase bindParam:a2 name:":curPhone" int64:9];
  +[SGSqliteDatabase bindParam:a2 name:":curAddr" int64:10];
  +[SGSqliteDatabase bindParam:a2 name:":curEmailAddr" int64:11];
  +[SGSqliteDatabase bindParam:a2 name:":detBirthday" int64:20];
  +[SGSqliteDatabase bindParam:a2 name:":curBirthday" int64:21];
  return +[SGSqliteDatabase bindParam:a2 name:":curPhotoPath" int64:23];
}

uint64_t __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  id v4 = [v3 duplicateKey];
  id v5 = [v4 parentKey];

  if (!v5)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Loading.m" lineNumber:540 description:@"Contact details require a parent"];
  }
  [*(id *)(a1 + 40) addObject:v3];

  return 0;
}

- (id)loadAllContactDetailsForRecordId:(id)a3
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v5)
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    [v17 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 488, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];
  }
  if ([v5 tableId])
  {
    id v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 489, @"RecordId with unexpected table: %@", v5 object file lineNumber description];
  }
  id v6 = [(SGSqlEntityStore *)self loadEntityByRecordId:v5];
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 duplicateKey];
    if ([v8 entityType] == 4)
    {
      id v9 = [v7 duplicateKey];
      id v10 = [v9 identityKey];
      uint64_t v11 = [v10 type];

      if (v11 != 4)
      {
        id v12 = +[SGContactDetail contactDetailFromEntity:v7];
        v21[0] = v12;
        uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];

        goto LABEL_11;
      }
    }
    else
    {
    }
  }
  uint64_t v13 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_11:
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __62__SGSqlEntityStore_Loading__loadAllContactDetailsForRecordId___block_invoke;
  void v19[3] = &unk_1E65C05C8;
  id v20 = v5;
  id v14 = v5;
  long long v15 = [(SGSqlEntityStore *)self loadAllContactDetailsWithWhereClause:@"WHERE masterEntityId = :masterEntityId" onPrep:v19 dedupeAgainst:v13];

  return v15;
}

uint64_t __62__SGSqlEntityStore_Loading__loadAllContactDetailsForRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":masterEntityId" int64:v3];
}

- (id)loadContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 type:(unint64_t)a5 dedupeAgainst:(id)a6 recordId:(id)a7
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v15 = a6;
  id v56 = a7;
  if (!v13)
  {
    long long v50 = [MEMORY[0x1E4F28B00] currentHandler];
    [v50 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 435, @"Invalid parameter not satisfying: %@", @"where" object file lineNumber description];

    if (v15) {
      goto LABEL_3;
    }
LABEL_34:
    long long v51 = [MEMORY[0x1E4F28B00] currentHandler];
    [v51 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 436, @"Invalid parameter not satisfying: %@", @"details" object file lineNumber description];

    goto LABEL_3;
  }
  if (!v15) {
    goto LABEL_34;
  }
LABEL_3:
  id v16 = (void *)[[NSString alloc] initWithFormat:@"%@ AND e.entityType IN (:entityTypeDetected, :entityTypeCurated)", v13];
  uint64_t v17 = [(SGSqlEntityStore *)self selectEntityQuery:v16];

  unint64_t v54 = a5;
  if (a5 > 6)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v18 = qword_1CA8D0C20[a5];
    uint64_t v19 = qword_1CA8D0C58[a5];
  }
  long long v59 = objc_opt_new();
  [v59 addObjectsFromArray:v15];
  id v20 = objc_opt_new();
  db = self->_db;
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3221225472;
  v70[2] = __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke;
  v70[3] = &unk_1E65BA128;
  id v52 = v14;
  id v71 = v52;
  uint64_t v72 = v19;
  uint64_t v73 = v18;
  v68[0] = MEMORY[0x1E4F143A8];
  v68[1] = 3221225472;
  v68[2] = __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke_2;
  v68[3] = &unk_1E65BED70;
  long long v55 = self;
  void v68[4] = self;
  id v22 = v20;
  id v69 = v22;
  id v53 = (void *)v17;
  [(SGSqliteDatabase *)db prepAndRunQuery:v17 onPrep:v70 onRow:v68 onError:0];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v23 = v22;
  uint64_t v24 = [v23 countByEnumeratingWithState:&v64 objects:v75 count:16];
  long long v57 = v15;
  long long v58 = v13;
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v65;
    while (2)
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v65 != v26) {
          objc_enumerationMutation(v23);
        }
        uint64_t v28 = [*(id *)(*((void *)&v64 + 1) + 8 * i) tags];
        uint64_t v29 = [MEMORY[0x1E4F5D9F0] fromReply];
        int v30 = [v28 containsObject:v29];

        if (!v30)
        {
          int v31 = 1;
          goto LABEL_16;
        }
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v64 objects:v75 count:16];
      if (v25) {
        continue;
      }
      break;
    }
  }
  int v31 = 0;
LABEL_16:

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v32 = v23;
  uint64_t v33 = [v32 countByEnumeratingWithState:&v60 objects:v74 count:16];
  if (!v33) {
    goto LABEL_30;
  }
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)v61;
  do
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      if (*(void *)v61 != v35) {
        objc_enumerationMutation(v32);
      }
      uint64_t v37 = *(void **)(*((void *)&v60 + 1) + 8 * j);
      if (v31)
      {
        uint64_t v38 = [*(id *)(*((void *)&v60 + 1) + 8 * j) tags];
        uint64_t v39 = [MEMORY[0x1E4F5D9F0] fromReply];
        char v40 = [v38 containsObject:v39];

        if (v40) {
          continue;
        }
      }
      long long v41 = [v37 duplicateKey];
      [v41 entityType];
      if ((SGEntityTypeIsContact() & 1) == 0)
      {

LABEL_27:
        long long v45 = +[SGContactDetail contactDetailFromEntity:v37];
        [v59 addObject:v45];

        continue;
      }
      id v42 = [v37 duplicateKey];
      uint64_t v43 = [v42 identityKey];
      uint64_t v44 = [v43 type];

      if (v44 != 4) {
        goto LABEL_27;
      }
    }
    uint64_t v34 = [v32 countByEnumeratingWithState:&v60 objects:v74 count:16];
  }
  while (v34);
LABEL_30:

  long long v46 = [(SGSqlEntityStore *)v55 loadAllContactDetailsFromTableForRecordId:v56 type:v54];
  long long v47 = [(SGSqlEntityStore *)v55 filterOutUndisplayableEntities:v46];
  long long v48 = +[SGDeduper dedupeContactDetails:v47];

  return v48;
}

uint64_t __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a2);
  }
  +[SGSqliteDatabase bindParam:a2 name:":entityTypeDetected" int64:a1[5]];
  uint64_t v5 = a1[6];
  return +[SGSqliteDatabase bindParam:a2 name:":entityTypeCurated" int64:v5];
}

uint64_t __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  [*(id *)(a1 + 40) addObject:v3];

  return 0;
}

- (id)loadEventByDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = -1;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke;
  void v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey IS :parentKey" onPrep:v10 onRow:v9 onError:0];
  if (v13[3] == -1)
  {
    id v7 = 0;
  }
  else
  {
    id v7 = [(SGSqlEntityStore *)self loadEventForDuplicateKey:v6];
  }

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) entityKey];
  uint64_t v5 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v5];

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v6 = [*(id *)(a1 + 32) parentKey];

  if (v6)
  {
    id v8 = [*(id *)(a1 + 32) parentKey];
    id v7 = [v8 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v7];
  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:a2 name:":parentKey"];
  }
}

uint64_t __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

- (id)loadEventByKeyForOldCodePathTesting:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey"];
  id v6 = [v4 parentKey];

  id v7 = (void *)MEMORY[0x1CB79B230]();
  if (v6) {
    id v8 = @" = :parentKey";
  }
  else {
    id v8 = @" is NULL";
  }
  id v9 = [v5 stringByAppendingString:v8];

  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  id v20 = __Block_byref_object_copy__24531;
  uint64_t v21 = __Block_byref_object_dispose__24532;
  id v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke;
  void v15[3] = &unk_1E65C05C8;
  id v11 = v4;
  id v16 = v11;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke_2;
  void v14[3] = &unk_1E65BFDD0;
  void v14[4] = self;
  void v14[5] = &v17;
  [(SGSqliteDatabase *)db prepAndRunQuery:v9 onPrep:v15 onRow:v14 onError:0];
  id v12 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v12;
}

void __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) entityKey];
  uint64_t v5 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v5];

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v6 = [*(id *)(a1 + 32) parentKey];

  if (v6)
  {
    id v8 = [*(id *)(a1 + 32) parentKey];
    id v7 = [v8 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v7];
  }
}

uint64_t __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) eventFromSqlResult:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)loadContactDetailsForRecordId:(id)a3 type:(unint64_t)a4
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!v7)
  {
    id v16 = [MEMORY[0x1E4F28B00] currentHandler];
    [v16 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 352, @"Invalid parameter not satisfying: %@", @"recordId" object file lineNumber description];
  }
  if ([v7 tableId])
  {
    uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
    [v17 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 353, @"RecordId with unexpected table: %@", v7 object file lineNumber description];
  }
  if (a4 == 2)
  {
    id v8 = [(SGSqlEntityStore *)self loadEntityByRecordId:v7];
    if (!v8)
    {
      uint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
      [v18 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 360, @"No record found with id: %@", v7 object file lineNumber description];
    }
    id v9 = [v8 duplicateKey];
    uint64_t v10 = [v9 entityType];

    if (v10 == 4)
    {
      id v11 = +[SGContactDetail contactDetailFromEntity:v8];
      v21[0] = v11;
      id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];
    }
    else
    {
      id v12 = (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x1E4F1CBF0];
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __64__SGSqlEntityStore_Loading__loadContactDetailsForRecordId_type___block_invoke;
  void v19[3] = &unk_1E65C05C8;
  id v20 = v7;
  id v13 = v7;
  uint64_t v14 = [(SGSqlEntityStore *)self loadContactDetailsWithWhereClause:@"WHERE masterEntityId = :masterEntityId" onPrep:v19 type:a4 dedupeAgainst:v12 recordId:v13];

  return v14;
}

uint64_t __64__SGSqlEntityStore_Loading__loadContactDetailsForRecordId_type___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":masterEntityId" int64:v3];
}

- (id)loadStorageContactByRecordId:(id)a3
{
  return [(SGSqlEntityStore *)self loadStorageContactByRecordId:a3 error:0];
}

- (id)loadStorageContactByRecordId:(id)a3 error:(id *)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = [(SGSqlEntityStore *)self loadEntityByRecordId:v6];
  if (v7)
  {
    id v8 = +[SGContactEntity contactEntityFromEntity:v7];
    id v9 = +[SGStorageContact contactFromContactEntity:v8];
  }
  else
  {
    uint64_t v10 = (void *)[[NSString alloc] initWithFormat:@"Could not load contact (recordId=%@)", v6];
    id v11 = sgLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v20 = v10;
      _os_log_error_impl(&dword_1CA650000, v11, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    if (a4)
    {
      id v12 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v17 = *MEMORY[0x1E4F28568];
      id v13 = [MEMORY[0x1E4F28B50] mainBundle];
      uint64_t v14 = [v13 localizedStringForKey:v10 value:&stru_1F24EEF20 table:0];
      uint64_t v18 = v14;
      uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      *a4 = [v12 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v15];
    }
    id v9 = 0;
  }

  return v9;
}

- (id)masterEntityIdForContactOrContactDetailRecord:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = -1;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke;
  void v10[3] = &unk_1E65C0388;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke_2;
  v9[3] = &unk_1E65C03F8;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN masterEntityId > 0 THEN masterEntityId ELSE id END FROM entity WHERE id IN (SELECT CASE WHEN entityType = :contact THEN id ELSE groupId END FROM entity WHERE id=:id)" onPrep:v10 onRow:v9 onError:0];
  if (v13[3] == -1)
  {
    id v7 = 0;
  }
  else
  {
    id v7 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:");
  }

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":contact" toInteger:4];
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":id", objc_msgSend(*(id *)(a1 + 32), "numericValue"));
}

uint64_t __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumn:0];
  return *MEMORY[0x1E4F93C08];
}

- (id)loadContactForStorageContact:(id)a3 usingSerializedContactCache:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ([(SGSuggestHistory *)self->_history hasStorageContact:v6])
  {
    id v7 = 0;
  }
  else
  {
    if (!v4
      || (-[SGSqlEntityStore loadSerializedContactForId:](self, "loadSerializedContactForId:", [v6 masterEntityId]), (id v7 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      id v7 = [v6 convertToContact:self];
    }
    [(SGSqlEntityStore *)self filterOutRejectedDetailsFromContact:v7];
  }

  return v7;
}

- (id)loadEntitiesFoundInEmail:(id)a3 entityType:(int64_t)a4
{
  id v5 = a3;
  id v6 = [[SGDuplicateKey alloc] initWithEntityKey:v5 entityType:5 parentKey:0];

  id v7 = objc_opt_new();
  id v8 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE ep.parentKey = :duplicateKeyForEmail AND e.entityType = :entityType"];
  db = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke;
  v17[3] = &unk_1E65C0388;
  uint64_t v18 = v6;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke_2;
  void v14[3] = &unk_1E65BFED8;
  id v10 = v7;
  id v15 = v10;
  id v16 = self;
  id v11 = v6;
  [(SGSqliteDatabase *)db prepAndRunSQL:v8 onPrep:v17 onRow:v14 onError:0];
  id v12 = v10;

  return v12;
}

void __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 serialize];
  [v3 bindNamedParam:":duplicateKeyForEmail" toNonnullNSString:v4];
}

uint64_t __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke_2(uint64_t a1, id a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = objc_msgSend(*(id *)(a1 + 40), "entityFromSqlResult:", objc_msgSend(a2, "stmt"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

- (id)loadEntitiesByEntityKey:(id)a3 entityType:(int64_t)a4 resolveDuplicates:(id)a5
{
  id v8 = a3;
  id v9 = (void (**)(id, id))a5;
  id v10 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.entityKey = :entityKey AND e.entityType = :entityType"];
  id v11 = objc_opt_new();
  db = self->_db;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke;
  v20[3] = &unk_1E65BA100;
  id v21 = v8;
  int64_t v22 = a4;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke_2;
  v17[3] = &unk_1E65BED70;
  id v18 = v11;
  uint64_t v19 = self;
  id v13 = v11;
  id v14 = v8;
  [(SGSqliteDatabase *)db prepAndRunQuery:v10 onPrep:v20 onRow:v17 onError:0];
  id v15 = v9[2](v9, v13);

  return v15;
}

uint64_t __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v4];

  uint64_t v5 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:v5];
}

uint64_t __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) entityFromSqlResult:a2];
  [v2 addObject:v3];

  return 0;
}

- (id)loadEntityByKey:(id)a3
{
  id v4 = a3;
  [v4 entityType];
  if (SGEntityTypeIsMessage())
  {
    uint64_t v5 = [v4 messageKey];
    id v6 = [(SGSqlEntityStore *)self _loadMessageByKey:v5];
  }
  else
  {
    id v7 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey"];
    id v8 = [v4 parentKey];

    id v9 = (void *)MEMORY[0x1CB79B230]();
    if (v8) {
      id v10 = @" = :parentKey";
    }
    else {
      id v10 = @" is NULL";
    }
    uint64_t v5 = [v7 stringByAppendingString:v10];

    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x3032000000;
    uint64_t v19 = __Block_byref_object_copy__24531;
    id v20 = __Block_byref_object_dispose__24532;
    id v21 = 0;
    db = self->_db;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke;
    void v14[3] = &unk_1E65C05C8;
    id v15 = v4;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke_2;
    void v13[3] = &unk_1E65BFDD0;
    void v13[4] = self;
    void v13[5] = &v16;
    [(SGSqliteDatabase *)db prepAndRunQuery:v5 onPrep:v14 onRow:v13 onError:0];
    id v6 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  return v6;
}

void __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) entityKey];
  uint64_t v5 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v5];

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v6 = [*(id *)(a1 + 32) parentKey];

  if (v6)
  {
    id v8 = [*(id *)(a1 + 32) parentKey];
    id v7 = [v8 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v7];
  }
}

uint64_t __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)_loadMessageByKey:(id)a3
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v5)
  {
    char v40 = [MEMORY[0x1E4F28B00] currentHandler];
    [v40 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 155, @"Invalid parameter not satisfying: %@", @"key" object file lineNumber description];
  }
  db = self->_db;
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 3221225472;
  void v52[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke;
  v52[3] = &unk_1E65C0388;
  id v7 = v5;
  id v53 = v7;
  id v8 = [(SGSqliteDatabase *)db selectColumns:&unk_1F2536A88 fromTable:@"emailMetadata" whereClause:@"key = :key" onPrep:v52 onError:0];
  if ((unint64_t)[v8 count] >= 2)
  {
    long long v41 = [MEMORY[0x1E4F28B00] currentHandler];
    [v41 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Loading.m" lineNumber:165 description:@"_loadMessageByKey matched multiple rows"];
  }
  if ([v8 count])
  {
    id v9 = [v8 firstObject];
    id v10 = objc_opt_new();
    id v11 = [v9 objectForKeyedSubscript:@"type"];
    uint64_t v12 = [v11 longLongValue];

    id v13 = (void *)MEMORY[0x1E4F5DB20];
    id v14 = [v9 objectForKeyedSubscript:@"id"];
    id v15 = objc_msgSend(v13, "recordIdForEmailWithRowId:", objc_msgSend(v14, "longLongValue"));
    [v10 setRecordId:v15];

    uint64_t v16 = [[SGDuplicateKey alloc] initWithEntityKey:v7 entityType:v12 parentKey:0];
    [v10 setDuplicateKey:v16];

    uint64_t v17 = [MEMORY[0x1E4F5DA20] extractionInfoWithExtractionType:0 modelVersion:0 confidence:0];
    [v10 setExtractionInfo:v17];

    uint64_t v18 = [v9 objectForKeyedSubscript:@"sourceKey"];
    [v10 setSourceKey:v18];

    id v19 = objc_alloc(MEMORY[0x1E4F23810]);
    id v20 = [v9 objectForKeyedSubscript:@"author"];
    id v21 = objc_msgSend(v19, "sg_initWithSerializedForm:", v20);

    if (!v21)
    {
      int64_t v22 = (void *)MEMORY[0x1E4F5DB38];
      id v23 = [v9 objectForKeyedSubscript:@"author"];
      uint64_t v24 = [v22 namedEmailAddressWithFieldValue:v23];

      if (v24)
      {
        id v25 = objc_alloc(MEMORY[0x1E4F23810]);
        id v21 = objc_msgSend(v25, "sg_initWithNamedEmailAddress:", v24);
      }
      else
      {
        id v21 = 0;
      }
    }
    [v10 setAuthor:v21];
    objc_msgSend(v10, "setContentRangeOfInterest:", 0x7FFFFFFFFFFFFFFFLL, 0);
    if (![(SGDatabaseJournal *)self->_snippetsJournal journaling])
    {
      snippetDb = self->_snippetDb;
      v50[0] = MEMORY[0x1E4F143A8];
      v50[1] = 3221225472;
      v50[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_2;
      v50[3] = &unk_1E65C05C8;
      id v51 = v10;
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      v48[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_3;
      v48[3] = &unk_1E65BEC60;
      id v49 = v51;
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 3221225472;
      v46[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_4;
      v46[3] = &unk_1E65C0660;
      id v47 = v49;
      [(SGSqliteDatabase *)snippetDb prepAndRunQuery:@"SELECT title, content FROM emailSnippets WHERE emailId = :emailId" onPrep:v50 onRow:v48 onError:v46];
    }
    id v27 = [v9 objectForKeyedSubscript:@"creationTimestamp"];
    if (v27)
    {
      uint64_t v28 = [MEMORY[0x1E4F1CA98] null];

      if (v27 != v28)
      {
        [v27 doubleValue];
        double v30 = v29;
        objc_msgSend(v10, "setLastModifiedTimestamp:");
        [v10 setCreationTimestamp:v30];
      }
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    int v31 = [v9 objectForKeyedSubscript:@"tags"];
    id v32 = SGEntityTagsFromStorage(v31);

    uint64_t v33 = [v32 countByEnumeratingWithState:&v42 objects:v54 count:16];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v34; ++i)
        {
          if (*(void *)v43 != v35) {
            objc_enumerationMutation(v32);
          }
          [v10 addTag:*(void *)(*((void *)&v42 + 1) + 8 * i)];
        }
        uint64_t v34 = [v32 countByEnumeratingWithState:&v42 objects:v54 count:16];
      }
      while (v34);
    }

    uint64_t v37 = [v10 recordId];
    objc_msgSend(v10, "setMasterEntityId:", objc_msgSend(v37, "rowId"));

    uint64_t v38 = [v9 objectForKeyedSubscript:@"state"];
    objc_msgSend(v10, "setState:", objc_msgSend(v38, "unsignedIntValue"));
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

void __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 serialize];
  [v3 bindNamedParam:":key" toNSString:v4];
}

void __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) recordId];
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":emailId", [v3 rowId]);
}

uint64_t __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = sqlite3_column_nsstring(a2, 0);
  [*(id *)(a1 + 32) setTitle:v4];

  id v5 = sqlite3_column_nsstring(a2, 1);
  [*(id *)(a1 + 32) setContent:v5];

  return 1;
}

uint64_t __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) recordId];
    int v5 = 134217984;
    uint64_t v6 = [v3 rowId];
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "failed to load snippet data for email entity: %lld", (uint8_t *)&v5, 0xCu);
  }
  return 1;
}

- (id)loadOriginByRecordId:(id)a3
{
  id v4 = [(SGSqlEntityStore *)self loadEntityByRecordId:a3];
  int v5 = [v4 loadOrigin:self];

  return v5;
}

- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4 onlyMLExtractions:(BOOL)a5
{
  id v8 = &stru_1F24EEF20;
  if (a5) {
    id v8 = @"AND ep.modelVersion != 0";
  }
  id v9 = (objc_class *)NSString;
  id v10 = v8;
  id v11 = (void *)[[v9 alloc] initWithFormat:@"WHERE e.entityType = :entityType %@ LIMIT :limit", v10];

  uint64_t v12 = [(SGSqlEntityStore *)self selectEntityQuery:v11];

  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:a4];
  db = self->_db;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke;
  v21[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  void v21[4] = a3;
  void v21[5] = a4;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke_2;
  void v19[3] = &unk_1E65BED70;
  void v19[4] = self;
  id v15 = v13;
  id v20 = v15;
  [(SGSqliteDatabase *)db prepAndRunQuery:v12 onPrep:v21 onRow:v19 onError:0];
  uint64_t v16 = v20;
  id v17 = v15;

  return v17;
}

uint64_t __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":limit" int64:v4];
}

uint64_t __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  if (v3)
  {
    [*(id *)(a1 + 40) addObject:v3];
    uint64_t v4 = &SGSqliteDatabaseKeepGoing;
  }
  else
  {
    int v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "Unable to load entity from database", v7, 2u);
    }

    uint64_t v4 = &SGSqliteDatabaseStop;
  }

  return *v4;
}

- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4
{
  return [(SGSqlEntityStore *)self allEntitiesOfType:a3 limitedTo:a4 onlyMLExtractions:0];
}

- (id)loadEntityByRecordId:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ([v5 tableId])
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Loading.m", 100, @"No support for loading entities from non-legacy recordIds (tableId=%du, internalEntityId=%lld)", objc_msgSend(v5, "tableId"), objc_msgSend(v5, "internalEntityId") object file lineNumber description];
  }
  uint64_t v6 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE e.id = :rowId"];
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  id v20 = __Block_byref_object_copy__24531;
  id v21 = __Block_byref_object_dispose__24532;
  id v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke;
  void v15[3] = &unk_1E65C05C8;
  id v8 = v5;
  id v16 = v8;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke_2;
  void v14[3] = &unk_1E65BFDD0;
  void v14[4] = self;
  void v14[5] = &v17;
  [(SGSqliteDatabase *)db prepAndRunQuery:v6 onPrep:v15 onRow:v14 onError:0];
  id v9 = (void *)v18[5];
  if (!v9)
  {
    id v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v8;
      _os_log_impl(&dword_1CA650000, v10, OS_LOG_TYPE_INFO, "Could not load event with record id %@", buf, 0xCu);
    }

    id v9 = (void *)v18[5];
  }
  id v11 = v9;

  _Block_object_dispose(&v17, 8);
  return v11;
}

uint64_t __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":rowId" int64:v3];
}

uint64_t __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)loadSourceKeyByRecordId:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = __Block_byref_object_copy__24531;
  uint64_t v18 = __Block_byref_object_dispose__24532;
  id v19 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke;
  v12[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v13 = v6;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke_2;
  v11[3] = &unk_1E65BEBB0;
  void v11[4] = &v14;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT ep.sourceKey FROM entity AS e JOIN entityParentage AS ep ON ep.childId = e.id WHERE e.id = :rowId" onPrep:v12 onRow:v11 onError:0];
  uint64_t v7 = (void *)v15[5];
  if (!v7)
  {
    id v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v21 = v6;
      _os_log_impl(&dword_1CA650000, v8, OS_LOG_TYPE_INFO, "Could not load duplicate key with record id %@", buf, 0xCu);
    }

    uint64_t v7 = (void *)v15[5];
  }
  id v9 = v7;

  _Block_object_dispose(&v14, 8);
  return v9;
}

uint64_t __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":rowId" int64:v3];
}

uint64_t __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)loadDuplicateKeyByRecordId:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = __Block_byref_object_copy__24531;
  uint64_t v18 = __Block_byref_object_dispose__24532;
  id v19 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke;
  v12[3] = &unk_1E65C0388;
  id v6 = v4;
  id v13 = v6;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke_2;
  v11[3] = &unk_1E65C03F8;
  void v11[4] = &v14;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT e.entityKey, e.entityType, ep.parentKey FROM entity AS e JOIN entityParentage AS ep ON ep.childId = e.id WHERE e.id = :rowId" onPrep:v12 onRow:v11 onError:0];
  uint64_t v7 = (void *)v15[5];
  if (!v7)
  {
    id v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v21 = v6;
      _os_log_impl(&dword_1CA650000, v8, OS_LOG_TYPE_INFO, "Could not load duplicate key with record id %@", buf, 0xCu);
    }

    uint64_t v7 = (void *)v15[5];
  }
  id v9 = v7;

  _Block_object_dispose(&v14, 8);
  return v9;
}

void __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":rowId", objc_msgSend(v2, "rowId"));
}

uint64_t __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 nonnullNSStringForColumnName:"entityKey" table:"entity"];
  uint64_t v5 = [v3 getIntegerForColumnName:"entityType" table:"entity"];
  id v6 = [v3 getNSStringForColumnName:"parentKey" table:"entityParentage"];

  uint64_t v7 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v4 entityType:v5 serializedParentKey:v6];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = (unsigned __int8 *)MEMORY[0x1E4F93C10];
  return *v10;
}

- (void)refreshSuggestionsContact:(id)a3
{
  id v4 = a3;
  cnToSGContactsCachePendingUpdateRequests = self->_cnToSGContactsCachePendingUpdateRequests;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __62__SGSqlEntityStore_CNtoSGContacts__refreshSuggestionsContact___block_invoke;
  void v7[3] = &unk_1E65BA658;
  id v8 = v4;
  id v6 = v4;
  [(SGCoalescingDropBox *)cnToSGContactsCachePendingUpdateRequests updateBox:v7 delay:10.0];
}

void __62__SGSqlEntityStore_CNtoSGContacts__refreshSuggestionsContact___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = sgLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if ([v5 containsObject:*(void *)(a1 + 32)]) {
      id v11 = @"duplicate";
    }
    else {
      id v11 = @"new";
    }
    uint64_t v12 = [*(id *)(a1 + 32) recordId];
    int v14 = 138412546;
    uint64_t v15 = (uint64_t)v11;
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    _os_log_debug_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEBUG, "refreshSuggestionsContact added %@ storage contact %@", (uint8_t *)&v14, 0x16u);
  }
  [v5 addObject:*(void *)(a1 + 32)];
  unint64_t v7 = [v5 count];
  id v8 = sgLogHandle();
  id v9 = v8;
  if (v7 < 0x3E8)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = [v5 count];
      int v14 = 134217984;
      uint64_t v15 = v13;
      _os_log_debug_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEBUG, "refreshSuggestionsContact coalescing box size: %tu", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = [v5 count];
      int v14 = 134217984;
      uint64_t v15 = v10;
      _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact running immediately due to large number (%tu) of enqueued items", (uint8_t *)&v14, 0xCu);
    }

    *a3 = 1;
  }
}

- (void)initRefreshSuggestionsContactDropBox
{
  locatiouint64_t n = 0;
  objc_initWeak(&location, self);
  id v3 = [SGCoalescingDropBox alloc];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_2;
  void v6[3] = &unk_1E65BA630;
  objc_copyWeak(&v7, &location);
  id v4 = [(SGCoalescingDropBox *)v3 initWithName:"refreshSuggestionsContact" boxMaker:&__block_literal_global_137 handler:v6 qos:17];
  cnToSGContactsCachePendingUpdateRequests = self->_cnToSGContactsCachePendingUpdateRequests;
  self->_cnToSGContactsCachePendingUpdateRequests = v4;

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [v3 count];
    id v6 = sgMap();
    *(_DWORD *)long long buf = 134218242;
    uint64_t v35 = v5;
    __int16 v36 = 2112;
    uint64_t v37 = (uint64_t)v6;
    _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact begin coalescing drop box handler with %tu SGStorageContacts: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v26 = objc_opt_new();
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v24 = v3;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v40 count:16];
    id obj = v7;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)v31;
      do
      {
        uint64_t v12 = 0;
        uint64_t v13 = v10;
        do
        {
          if (*(void *)v31 != v11) {
            objc_enumerationMutation(obj);
          }
          int v14 = *(void **)(*((void *)&v30 + 1) + 8 * v12);
          uint64_t v15 = (void *)MEMORY[0x1CB79B230]();
          __int16 v16 = [v14 convertToContact:WeakRetained];
          id v17 = (id)[v13 wait];
          uint64_t v10 = +[SGSqlEntityStore cnContactIdentifiersForContact:v16];

          [v10 setTimeout:5.0];
          v28[0] = MEMORY[0x1E4F143A8];
          v28[1] = 3221225472;
          v28[2] = __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_142;
          v28[3] = &unk_1E65BA608;
          id v29 = v26;
          [v10 wait:v28];

          ++v12;
          uint64_t v13 = v10;
        }
        while (v9 != v12);
        id v7 = obj;
        uint64_t v9 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
    }

    id v18 = (id)[v10 wait];
    id v19 = sgLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = [v26 count];
      uint64_t v21 = [obj count];
      *(_DWORD *)long long buf = 134218498;
      uint64_t v35 = v20;
      __int16 v36 = 2048;
      uint64_t v37 = v21;
      __int16 v38 = 2112;
      uint64_t v39 = v26;
      id v7 = obj;
      _os_log_impl(&dword_1CA650000, v19, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact will enqueue CNContactIdentifier batch of size %tu (from %tu SGStorageContact's): %@", buf, 0x20u);
    }

    [v7 removeAllObjects];
    uint64_t v22 = [v26 allObjects];
    [WeakRetained _enqueueBatchOfCNContactIds:v22];

    id v23 = sgLogHandle();
    id v3 = v24;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v23, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact end coalescing drop box handler", buf, 2u);
    }
  }
}

id __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke()
{
  uint64_t v0 = objc_opt_new();
  return v0;
}

void __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_142(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:a2];
  }
  else
  {
    id v7 = [v5 domain];
    if (v7 == *MEMORY[0x1E4F5DC80])
    {
      uint64_t v8 = [v6 code];

      if (v8 != 10) {
        goto LABEL_5;
      }
      id v7 = sgLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact timed out waiting for spotlight", v9, 2u);
      }
    }
  }
LABEL_5:
}

id __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = [a2 recordId];
  id v3 = [v2 description];

  return v3;
}

- (void)_deltaSyncContactsWithChangeHistory:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_opt_new();
  id v6 = +[SGContactStoreFactory contactStore];
  id v14 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __72__SGSqlEntityStore_CNtoSGContacts___deltaSyncContactsWithChangeHistory___block_invoke;
  v11[3] = &unk_1E65BA5C0;
  id v7 = v5;
  id v12 = v7;
  uint64_t v13 = self;
  char v8 = [v4 enumerateContactChangesWithKeysToFetch:MEMORY[0x1E4F1CBF0] fromContactStore:v6 error:&v14 usingBlock:v11];

  id v9 = v14;
  if (v8)
  {
    uint64_t v10 = [v7 proxyArray];
    [(SGSqlEntityStore *)self _enqueueBatchOfCNContactIds:v10];
  }
  else
  {
    uint64_t v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v16 = v9;
      _os_log_error_impl(&dword_1CA650000, v10, OS_LOG_TYPE_ERROR, "Could not enumerate CNContactStore change history due to: %@", buf, 0xCu);
    }
  }
}

void __72__SGSqlEntityStore_CNtoSGContacts___deltaSyncContactsWithChangeHistory___block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  switch([v8 changeType])
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 3:
    case 4:
    case 5:
      id v3 = *(void **)(a1 + 40);
      id v4 = [v8 contactIdentifier];
      [v3 deleteCNContactMatchForContactId:v4];

LABEL_3:
      id v5 = *(void **)(a1 + 32);
      id v6 = [v8 contactIdentifier];
      [v5 addCNContactIdentifier:v6];
      goto LABEL_4;
    case 2:
      id v7 = *(void **)(a1 + 40);
      id v6 = [v8 contactIdentifier];
      [v7 deleteCNContactMatchForContactId:v6];
LABEL_4:

      break;
    default:
      break;
  }
}

- (void)syncContactsWithStore:(id)a3
{
  *(void *)&v20[5] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = +[SGContactStoreFactory contactStore];
  id v18 = 0;
  char v6 = [v5 registerChangeHistoryClientIdentifier:@"com.apple.suggestions.suggestd.cntosgcontacts" error:&v18];
  id v7 = v18;

  if ((v6 & 1) == 0)
  {
    id v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)uint64_t v20 = v7;
      _os_log_error_impl(&dword_1CA650000, v8, OS_LOG_TYPE_ERROR, "Could not register for CNContactStore change history due to: %@", buf, 0xCu);
    }
  }
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F1B8E0]) initWithClientIdentifier:@"com.apple.suggestions.suggestd.cntosgcontacts"];
  [v9 setShouldUnifyResults:0];
  uint64_t v10 = +[SGContactStoreFactory contactStore];
  id v17 = v7;
  uint64_t v11 = [v10 changeHistoryWithFetchRequest:v9 error:&v17];
  id v12 = v17;

  uint64_t v13 = sgLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = [v11 changesTruncated];
    *(_DWORD *)long long buf = 67109378;
    v20[0] = v14;
    LOWORD(v20[1]) = 2112;
    *(void *)((char *)&v20[1] + 2) = v11;
    _os_log_impl(&dword_1CA650000, v13, OS_LOG_TYPE_INFO, "CNChangeHistoryResult truncated: %d , %@", buf, 0x12u);
  }

  if (!v11
    || ([v11 changesTruncated] & 1) != 0
    || [(SGSqlEntityStore *)self needsFullSync])
  {
    uint64_t v15 = sgLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v15, OS_LOG_TYPE_INFO, "Performing full sync with CNContactStore", buf, 2u);
    }

    [(SGSqlEntityStore *)self _fullSyncContactsWithStore:v4];
  }
  else
  {
    id v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v16, OS_LOG_TYPE_INFO, "Performing delta sync with CNContactStore", buf, 2u);
    }

    [(SGSqlEntityStore *)self _deltaSyncContactsWithChangeHistory:v11];
  }
  [(SGSqlEntityStore *)self clearChangeHistory:v11];
}

- (void)setHasFullSync
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __50__SGSqlEntityStore_CNtoSGContacts__setHasFullSync__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __50__SGSqlEntityStore_CNtoSGContacts__setHasFullSync__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) needsFullSync];
  if (result)
  {
    id v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "Will set full CN to SG sync completed.", v4, 2u);
    }

    return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"INSERT OR REPLACE INTO metadata (key, value) VALUES ('hasFullCNtoSGSync', 3)", 0, 0, 0 onPrep onRow onError];
  }
  return result;
}

- (BOOL)needsFullSync
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 1;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke;
  void v7[3] = &unk_1E65C0728;
  void v7[4] = self;
  void v7[5] = &v8;
  [(SGSqliteDatabase *)db readTransaction:v7];
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*((unsigned char *)v9 + 24)) {
      id v4 = @"YES";
    }
    else {
      id v4 = @"NO";
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v13 = v4;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "Do/did we need a full CN to SG sync? %@", buf, 0xCu);
  }

  char v5 = *((unsigned char *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke_2;
  v3[3] = &unk_1E65C03F8;
  void v3[4] = *(void *)(a1 + 40);
  return [v1 prepAndRunSQL:@"SELECT value FROM metadata WHERE key = 'hasFullCNtoSGSync' LIMIT 1" onPrep:0 onRow:v3 onError:0];
}

uint64_t __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke_2(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumnName:"value" table:0] != 3;
  return *MEMORY[0x1E4F93C10];
}

- (void)_fullSyncContactsWithStore:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  [(SGSqlEntityStore *)self deleteAllCNContactMatches];
  id v6 = objc_alloc(MEMORY[0x1E4F1B908]);
  id v7 = (void *)[v6 initWithKeysToFetch:MEMORY[0x1E4F1CBF0]];
  [v7 setPredicate:0];
  uint64_t v8 = objc_opt_new();
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 0;
  id v19 = &v21;
  id v20 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke;
  v17[3] = &unk_1E65BA598;
  id v9 = v8;
  id v18 = v9;
  char v10 = [v5 enumerateContactsWithFetchRequest:v7 error:&v20 usingBlock:v17];
  id v11 = v20;
  if (*((unsigned char *)v22 + 24))
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"SGSqlEntityStore+CNtoSGContacts.m", 452, @"Invalid parameter not satisfying: %@", @"!exceptionSwallowed" object file lineNumber description];
  }
  if (v10)
  {
    db = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke_117;
    void v15[3] = &unk_1E65BFD88;
    void v15[4] = self;
    id v16 = v9;
    [(SGSqliteDatabase *)db writeTransaction:v15];
    [(SGSqlEntityStore *)self setHasFullSync];
  }
  else
  {
    uint64_t v13 = sgLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v11;
      _os_log_error_impl(&dword_1CA650000, v13, OS_LOG_TYPE_ERROR, "Failed to enumerate CNContactStore: %@", buf, 0xCu);
    }
  }
  _Block_object_dispose(&v21, 8);
}

void __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    *a3 = 1;
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
    id v5 = *(void **)(a1 + 32);
    id v6 = [a2 identifier];
    [v5 addCNContactIdentifier:v6];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke_117(uint64_t a1)
{
  [*(id *)(a1 + 32) _clearPendingJobs];
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) proxyArray];
  [v2 _enqueueBatchOfCNContactIds:v3];
}

- (void)clearChangeHistory:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    id v3 = (objc_class *)MEMORY[0x1E4F1B8C0];
    id v4 = a3;
    id v5 = (void *)[[v3 alloc] initWithClientIdentifier:@"com.apple.suggestions.suggestd.cntosgcontacts"];
    id v6 = [v4 latestChangeAnchor];

    [v5 setToChangeAnchor:v6];
    id v7 = +[SGContactStoreFactory contactStore];
    id v11 = 0;
    char v8 = [v7 executeChangeHistoryClearRequest:v5 error:&v11];
    id v9 = v11;

    if ((v8 & 1) == 0)
    {
      char v10 = sgLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v13 = v9;
        _os_log_error_impl(&dword_1CA650000, v10, OS_LOG_TYPE_ERROR, "Could not clear CNContactStore change history due to: %@", buf, 0xCu);
      }
    }
  }
}

- (void)updateCNContactMatches:(id)a3
{
  id v4 = a3;
  v28[2] = 0;
  v28[0] = @"updateCNContactMatches";
  v28[1] = mach_absolute_time();
  id v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_INFO, "start updating CNContact matches", buf, 2u);
  }

  id v6 = objc_opt_new();
  int64_t v7 = [(SGSqlEntityStore *)self getMaxEntityId];
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 3221225472;
  uint64_t v21 = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke;
  uint64_t v22 = &unk_1E65BA570;
  uint64_t v23 = self;
  id v8 = v6;
  id v24 = v8;
  int64_t v26 = v7;
  id v9 = v4;
  id v25 = v9;
  char v10 = (unsigned int (**)(void))MEMORY[0x1CB79B4C0](&v19);
  if (v9) {
    BOOL v11 = xpc_activity_get_state((xpc_activity_t)v9) == 3;
  }
  else {
    BOOL v11 = 0;
  }
  if ((v10[2](v10) | v11)) {
    goto LABEL_20;
  }
  -[SGSqlEntityStore syncContactsWithStore:](self, "syncContactsWithStore:", v8, v19, v20, v21, v22, v23, v24);
  if (!v9
    || (+[SGXPCActivityManager sharedInstance],
        id v12 = objc_claimAutoreleasedReturnValue(),
        int v13 = [v12 shouldDefer:v9],
        v12,
        !v13))
  {
    v10[2](v10);
    id v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v16, OS_LOG_TYPE_DEBUG, "done updating CNContact matches", buf, 2u);
    }

    id v17 = sgLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v17, OS_LOG_TYPE_INFO, "done updating CNContact matches", buf, 2u);
    }

LABEL_20:
    uint64_t v15 = [(SGSqlEntityStore *)self prematchedContactIdentifiers];
    id v18 = self->_prematchedContactIdentifiers;
    objc_sync_enter(v18);
    objc_storeStrong((id *)&self->_prematchedContactIdentifiers, v15);
    objc_sync_exit(v18);

    SGRecordMeasurementState(v28);
    goto LABEL_21;
  }
  if (!xpc_activity_set_state((xpc_activity_t)v9, 3))
  {
    uint64_t v14 = sgLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1CA650000, v14, OS_LOG_TYPE_ERROR, "Could not defer activity", buf, 2u);
    }
  }
  uint64_t v15 = sgLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v15, OS_LOG_TYPE_INFO, "CN Contact precomputation deferring", buf, 2u);
  }
LABEL_21:

  SGRecordMeasurementState(v28);
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_2;
  v9[3] = &unk_1E65BF070;
  void v9[4] = v2;
  id v12 = &v14;
  id v4 = *(id *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v10 = v4;
  uint64_t v13 = v5;
  id v11 = v6;
  [v3 writeTransaction:v9];
  uint64_t v7 = *((unsigned __int8 *)v15 + 24);

  _Block_object_dispose(&v14, 8);
  return v7;
}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_2(uint64_t a1)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) _popBatchOfCNContactIds];
  if (v2)
  {
    id v3 = v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    uint64_t v4 = *MEMORY[0x1E4F1AEA0];
    v27[0] = *MEMORY[0x1E4F1ADF0];
    v27[1] = v4;
    uint64_t v5 = *MEMORY[0x1E4F1ADC8];
    v27[2] = *MEMORY[0x1E4F1ADE0];
    v27[3] = v5;
    uint64_t v6 = *MEMORY[0x1E4F1AF10];
    v27[4] = *MEMORY[0x1E4F1AEE0];
    void v27[5] = v6;
    uint64_t v7 = *MEMORY[0x1E4F1AD90];
    v27[6] = *MEMORY[0x1E4F1AF78];
    v27[7] = v7;
    uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:8];
    id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1B908]) initWithKeysToFetch:v22];
    *(void *)&long long v9 = 138412290;
    long long v21 = v9;
    do
    {
      id v10 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v11 = [MEMORY[0x1E4F1B8F8] predicateForContactsWithIdentifiers:v3];
      [v8 setPredicate:v11];

      uint64_t v13 = *(void *)(a1 + 32);
      id v12 = *(void **)(a1 + 40);
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_3;
      v23[3] = &unk_1E65BA548;
      uint64_t v14 = *(void *)(a1 + 64);
      void v23[4] = v13;
      void v23[5] = v14;
      id v24 = 0;
      LOBYTE(v11) = [v12 enumerateContactsWithFetchRequest:v8 error:&v24 usingBlock:v23];
      id v15 = v24;
      if (v11)
      {
        if (*(void *)(a1 + 48)
          && (+[SGXPCActivityManager sharedInstance],
              uint64_t v16 = objc_claimAutoreleasedReturnValue(),
              int v17 = [v16 shouldDefer:*(void *)(a1 + 48)],
              v16,
              v17))
        {
          if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 3))
          {
            id v18 = sgLogHandle();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl(&dword_1CA650000, v18, OS_LOG_TYPE_ERROR, "Could not defer activity", buf, 2u);
            }
          }
          uint64_t v19 = sgLogHandle();
          char v20 = 1;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1CA650000, v19, OS_LOG_TYPE_INFO, "CN Contact precomputation deferring", buf, 2u);
          }
        }
        else
        {
          objc_msgSend(*(id *)(a1 + 32), "_popBatchOfCNContactIds", v21);
          char v20 = 0;
          id v3 = v19 = v3;
        }
      }
      else
      {
        uint64_t v19 = sgLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = v21;
          id v26 = v15;
          _os_log_error_impl(&dword_1CA650000, v19, OS_LOG_TYPE_ERROR, "Failed to enumerate CNContactStore: %@", buf, 0xCu);
        }
        char v20 = 1;
      }
    }
    while ((v20 & 1) == 0 && v3);
  }
}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F93BD8];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_4;
  void v7[3] = &unk_1E65BFEB0;
  uint64_t v5 = *(void *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  [v4 runWithExceptionBarrier:v7];
}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_4(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v28[0] = @"updateCNContactMatches-onequery";
  v28[1] = mach_absolute_time();
  v28[2] = 0;
  uint64_t v2 = [*(id *)(a1 + 32) suggestContactsWithContact:*(void *)(a1 + 40) withSnippets:0 filterConfirmRejectDetails:1 limitTo:-1];
  id v3 = objc_msgSend(v2, "_pas_mappedArrayWithTransform:", &__block_literal_global_100);
  [*(id *)(a1 + 32) writeCNContactMatchForContact:*(void *)(a1 + 40) withMatches:v3 andMaxEntityId:*(void *)(a1 + 48)];
  uint64_t v4 = +[SGCuratedContactMatcher filterCandidates:v2 withDetailSubsetOfCNContact:*(void *)(a1 + 40)];
  uint64_t v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = [v4 count];
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v31 = v6;
    __int16 v32 = 2112;
    uint64_t v33 = v7;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_INFO, "%lu contact matches found for %@", buf, 0x16u);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v8 = v4;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    long long v21 = v3;
    uint64_t v22 = v2;
    id v11 = 0;
    uint64_t v12 = *(void *)v25;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = v11;
      do
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v8);
        }
        id v15 = *(void **)(*((void *)&v24 + 1) + 8 * v13);
        uint64_t v16 = *(void **)(a1 + 32);
        int v17 = objc_msgSend(v15, "recordId", v21, v22);
        [v16 markEntityAsDupeByRecordId:v17];

        id v18 = *(void **)(a1 + 32);
        uint64_t v19 = [v15 recordId];
        id v23 = v14;
        LOBYTE(v18) = [v18 confirmContactByRecordID:v19 error:&v23];
        id v11 = v23;

        if ((v18 & 1) == 0)
        {
          char v20 = sgLogHandle();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v31 = (uint64_t)v11;
            _os_log_error_impl(&dword_1CA650000, v20, OS_LOG_TYPE_ERROR, "Failed to confirm Contact: %@", buf, 0xCu);
          }
        }
        ++v13;
        uint64_t v14 = v11;
      }
      while (v10 != v13);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v10);

    id v3 = v21;
    uint64_t v2 = v22;
  }

  SGRecordMeasurementState(v28);
}

id __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v2 = NSNumber;
  id v3 = [a2 recordId];
  uint64_t v4 = objc_msgSend(v2, "numberWithLongLong:", objc_msgSend(v3, "numericValue"));

  return v4;
}

- (void)_clearPendingJobs
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __53__SGSqlEntityStore_CNtoSGContacts___clearPendingJobs__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __53__SGSqlEntityStore_CNtoSGContacts___clearPendingJobs__block_invoke(uint64_t a1)
{
  uint64_t v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEFAULT, "Clearing entire CN2SG job queue", v4, 2u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"DELETE FROM cnContactsToSgContactsCacheJobs" onPrep:0 onRow:0 onError:0];
}

- (void)_enqueueBatchOfCNContactIds:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    db = self->_db;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke;
    void v6[3] = &unk_1E65BFD88;
    void v6[4] = self;
    id v7 = v4;
    [(SGSqliteDatabase *)db writeTransaction:v6];
  }
}

void __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke(uint64_t a1)
{
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 8) numberOfRowsInTable:@"cnContactsToSgContactsCacheJobs"] < 0x186A1)
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_83;
    v3[3] = &unk_1E65C0388;
    id v4 = *(id *)(a1 + 40);
    [v2 prepAndRunSQL:@"INSERT OR IGNORE INTO cnContactsToSgContactsCacheJobs (cnContactIdentifier) SELECT value FROM _pas_nsarray(:batch)" onPrep:v3 onRow:0 onError:0];
  }
  else if (kSGCNContactMatchCacheIdentifier_block_invoke_tooManyRowsFaultOnce != -1)
  {
    dispatch_once(&kSGCNContactMatchCacheIdentifier_block_invoke_tooManyRowsFaultOnce, &__block_literal_global_79);
  }
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_83(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":batch" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_2()
{
  uint64_t v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_fault_impl(&dword_1CA650000, v0, OS_LOG_TYPE_FAULT, "CN2SG Over 100K unique rows in cnContactsToSgContactsCacheJobs -- will not enqueue a batch", v2, 2u);
  }

  uint64_t result = _PASEvaluateLogFaultAndProbCrashCriteria();
  if (result) {
    abort();
  }
  return result;
}

- (id)_popBatchOfCNContactIds
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  id v11 = __Block_byref_object_copy__26503;
  uint64_t v12 = __Block_byref_object_dispose__26504;
  id v13 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke;
  void v7[3] = &unk_1E65C0728;
  void v7[4] = self;
  void v7[5] = &v8;
  [(SGSqliteDatabase *)db writeTransaction:v7];
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = v9[5];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v15 = v6;
    _os_log_debug_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEBUG, "Popped CN2SG job: %@", buf, 0xCu);
  }

  if ([(id)v9[5] count]) {
    id v4 = (id)v9[5];
  }
  else {
    id v4 = 0;
  }
  _Block_object_dispose(&v8, 8);

  return v4;
}

void __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_3;
  void v10[3] = &unk_1E65BFF78;
  id v4 = v2;
  id v11 = v4;
  [v3 prepAndRunSQL:@"SELECT cnContactIdentifier FROM cnContactsToSgContactsCacheJobs LIMIT :batchSize" onPrep:&__block_literal_global_69_26507 onRow:v10 onError:0];
  uint64_t v5 = [v4 proxyArray];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count])
  {
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 8);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_4;
    v9[3] = &unk_1E65BE490;
    void v9[4] = *(void *)(a1 + 40);
    [v8 prepAndRunSQL:@"DELETE FROM cnContactsToSgContactsCacheJobs WHERE cnContactIdentifier IN _pas_nsarray(:batchArray)" onPrep:v9 onRow:0 onError:0];
  }
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 nonnullNSStringForColumnName:"cnContactIdentifier" table:0];
  [v2 addCNContactIdentifier:v3];

  return *MEMORY[0x1E4F93C08];
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":batchArray" toNSArray:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":batchSize" toInteger:10];
}

- (id)cnContactMatchesForRecordId:(id)a3 found:(BOOL *)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = v6;
  if (a4) {
    *a4 = 0;
  }
  if ([v6 tableId])
  {
    uint64_t v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v21 = v7;
      _os_log_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEFAULT, "cnContactMatchesForRecordId received recordId from wrong table: %@", buf, 0xCu);
    }
    uint64_t v9 = MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v10 = objc_opt_new();
    db = self->_db;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke;
    v18[3] = &unk_1E65C0388;
    id v19 = v7;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke_2;
    void v15[3] = &unk_1E65BFFA0;
    int v17 = a4;
    id v12 = v10;
    id v16 = v12;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT cnContactIdentifier FROM cnContactsToSgContacts WHERE entityId = :entityId" onPrep:v18 onRow:v15 onError:0];
    id v13 = v16;
    uint64_t v8 = v12;

    uint64_t v9 = v8;
  }

  return v9;
}

void __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));
}

uint64_t __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = *(unsigned char **)(a1 + 40);
  if (v3) {
    *id v3 = 1;
  }
  id v4 = [a2 getNSStringForColumnName:"cnContactIdentifier" table:0];
  if (([v4 isEqualToString:@"NullCNContactIDPlaceholder:Null"] & 1) == 0) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  uint64_t v5 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v5;
}

- (id)loadAllPrecomputedContactMatches
{
  id v3 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v3);
  NSUInteger v4 = [(NSSet *)self->_prematchedContactIdentifiers count];
  objc_sync_exit(v3);

  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v4];
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __68__SGSqlEntityStore_CNtoSGContacts__loadAllPrecomputedContactMatches__block_invoke;
  v9[3] = &unk_1E65BFF78;
  id v7 = v5;
  id v10 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT cnContactIdentifier, maxEntityId, entityId FROM cnContactsToSgContacts ORDER BY cnContactIdentifier, entityId" onPrep:0 onRow:v9 onError:0];

  return v7;
}

uint64_t __68__SGSqlEntityStore_CNtoSGContacts__loadAllPrecomputedContactMatches__block_invoke(uint64_t a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  NSUInteger v4 = [v3 getNSStringForColumnName:"cnContactIdentifier" table:0];
  uint64_t v5 = objc_msgSend(v3, "getNSStringForColumnName:table:", "maxEntityId", 0, v4);
  v9[1] = v5;
  id v6 = [v3 getNSStringForColumnName:"entityId" table:0];

  void v9[2] = v6;
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:3];
  [v2 addObject:v7];

  return *MEMORY[0x1E4F93C08];
}

- (id)prematchedContactIdentifiers
{
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:500];
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __64__SGSqlEntityStore_CNtoSGContacts__prematchedContactIdentifiers__block_invoke;
  void v7[3] = &unk_1E65BFF78;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT DISTINCT cnContactIdentifier FROM cnContactsToSgContacts" onPrep:0 onRow:v7 onError:0];

  return v5;
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts__prematchedContactIdentifiers__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  NSUInteger v4 = [v3 getNSStringForColumnName:"cnContactIdentifier" table:0];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
  }
  else
  {
    id v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_fault_impl(&dword_1CA650000, v5, OS_LOG_TYPE_FAULT, "Encountered a NULL cnContactIdentifier in cnContactsToSgContacts", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
  id v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v6;
}

- (void)deleteAllCNContactMatchesForEntityID:(int64_t)a3
{
  id v5 = (void *)MEMORY[0x1CB79B230](self, a2);
  id v6 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  id v7 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:a3];
  id v8 = (id)objc_msgSend(v6, "initWithObjects:", v7, 0);

  [(SGSqlEntityStore *)self deleteAllCNContactMatchesForIdSet:v8];
}

- (void)deleteAllCNContactMatchesForIdSet:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v4, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * v10), "rowId"));
        [v5 addObject:v11];

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }

  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke;
  void v14[3] = &unk_1E65BFD88;
  void v14[4] = self;
  id v15 = v5;
  id v13 = v5;
  [(SGSqliteDatabase *)db writeTransaction:v14];
}

void __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"DELETE FROM cnContactsToSgContacts WHERE entityId IN _pas_nsarray(:ids)" onPrep:v2 onRow:0 onError:0];
}

uint64_t __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

- (void)deleteAllCNContactMatches
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __61__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatches__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __61__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatches__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"DELETE FROM cnContactsToSgContacts" onPrep:0 onRow:0 onError:0];
}

- (void)deleteCNContactMatchForContactId:(id)a3
{
  id v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke;
  void v7[3] = &unk_1E65BFD88;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v7];
}

void __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"DELETE FROM cnContactsToSgContacts WHERE cnContactIdentifier = :cnContactIdentifier" onPrep:v2 onRow:0 onError:0];
}

uint64_t __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":cnContactIdentifier" toNSString:*(void *)(a1 + 32)];
}

- (id)loadCNContactMatchesForContact:(id)a3 andGetMaxEntityId:(int64_t *)a4
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [v6 identifier];
  *a4 = -1;
  id v8 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v8);
  BOOL v9 = [(NSSet *)self->_prematchedContactIdentifiers containsObject:v7];
  if (loadCNContactMatchesForContact_andGetMaxEntityId___pasOnceToken3 != -1) {
    dispatch_once(&loadCNContactMatchesForContact_andGetMaxEntityId___pasOnceToken3, &__block_literal_global_26542);
  }
  uint64_t v10 = (id)loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  BOOL v29 = v9;
  dispatch_async(v10, block);
  if (v9)
  {

    objc_sync_exit(v8);
    id v11 = objc_opt_new();
    db = self->_db;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_33;
    v26[3] = &unk_1E65C0388;
    id v27 = v7;
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    uint64_t v22 = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2_34;
    id v23 = &unk_1E65BFFA0;
    long long v25 = a4;
    id v13 = v11;
    id v24 = v13;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT maxEntityId, entityId FROM cnContactsToSgContacts WHERE cnContactIdentifier = :cnContactIdentifier" onPrep:v26 onRow:&v20 onError:0];
    uint64_t v14 = sgLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = objc_msgSend(v13, "count", v20, v21, v22, v23);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v31 = v19;
      _os_log_debug_impl(&dword_1CA650000, v14, OS_LOG_TYPE_DEBUG, "Found %lu prematched contacts in CNContact cache", buf, 0xCu);
    }

    id v15 = v24;
    id v8 = (NSSet *)v13;

    long long v16 = v8;
  }
  else
  {
    long long v17 = sgLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v17, OS_LOG_TYPE_DEBUG, "CNContact cache miss", buf, 2u);
    }

    objc_sync_exit(v8);
    long long v16 = 0;
  }

  return v16;
}

void __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2(uint64_t a1)
{
  id v8 = (id)objc_opt_new();
  [v8 setCacheHit:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v2 = [MEMORY[0x1E4F93728] sharedInstance];
  [v2 trackScalarForMessage:v8];

  id v3 = [NSString alloc];
  uint64_t v4 = *MEMORY[0x1E4F5DEF0];
  id v5 = [v8 key];
  id v6 = (void *)[v3 initWithFormat:@"%@.%@", v4, v5];

  uint64_t v7 = [v8 dictionaryRepresentation];
  AnalyticsSendEvent();
}

uint64_t __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_33(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":cnContactIdentifier" toNSString:*(void *)(a1 + 32)];
}

uint64_t __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2_34(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(void **)(a1 + 40) = [v3 getInt64ForColumnName:"maxEntityId" table:0];
  uint64_t v4 = [v3 getInt64AsNSNumberForColumnName:"entityId" table:0];

  if (([v4 isEqualToNumber:&unk_1F2535F58] & 1) == 0) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  id v5 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v5;
}

void __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [MEMORY[0x1E4F93B18] autoreleasingSerialQueueWithLabel:"loadCNContactMatchesForContact" qosClass:9];
  uint64_t v2 = (void *)loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult;
  loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult = v1;
}

- (void)writeCNContactMatchAndUpdateSetForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5
{
  id v12 = a3;
  id v8 = a4;
  [(SGSqlEntityStore *)self writeCNContactMatchForContact:v12 withMatches:v8 andMaxEntityId:a5];
  BOOL v9 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v9);
  uint64_t v10 = [(SGSqlEntityStore *)self prematchedContactIdentifiers];
  prematchedContactIdentifiers = self->_prematchedContactIdentifiers;
  self->_prematchedContactIdentifiers = v10;

  objc_sync_exit(v9);
}

- (void)writeCNContactMatchForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5
{
  id v8 = a3;
  id v9 = a4;
  db = self->_db;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke;
  void v13[3] = &unk_1E65BF1A8;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  int64_t v16 = a5;
  id v11 = v9;
  id v12 = v8;
  [(SGSqliteDatabase *)db writeTransaction:v13];
}

void __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke_2;
  void v6[3] = &unk_1E65BFE18;
  id v3 = *(id *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v7 = v3;
  uint64_t v9 = v4;
  id v8 = v5;
  [v2 prepAndRunSQL:@"INSERT OR REPLACE INTO cnContactsToSgContacts (cnContactIdentifier, maxEntityId, entityId) SELECT :cnContactIdentifier, :maxEntityId, value FROM _pas_nsarray(:matches)", v6, 0, 0 onPrep onRow onError];
}

void __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke_2(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v5 = a2;
  uint64_t v4 = [v3 identifier];
  [v5 bindNamedParam:":cnContactIdentifier" toNSString:v4];

  [v5 bindNamedParam:":maxEntityId" toInt64:a1[6]];
  [v5 bindNamedParam:":matches" toNSArray:a1[5]];
}

- (void)writeCNContactMissForRecordId:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(SGSqlEntityStore *)self getMaxEntityId];
  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke;
  void v8[3] = &unk_1E65BFEB0;
  id v9 = v4;
  int64_t v10 = v5;
  void v8[4] = self;
  id v7 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v8];
}

void __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke(void *a1)
{
  uint64_t v1 = *(void **)(a1[4] + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke_2;
  v3[3] = &unk_1E65BFF50;
  uint64_t v2 = (void *)a1[5];
  uint64_t v5 = a1[6];
  id v4 = v2;
  [v1 prepAndRunSQL:@"INSERT OR REPLACE INTO cnContactsToSgContacts (cnContactIdentifier, maxEntityId, entityId) VALUES (:cnContactIdentifier, :maxEntityId, :entityId)", v3, 0, 0 onPrep onRow onError];
}

void __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":cnContactIdentifier" toNSString:@"NullCNContactIDPlaceholder:Null"];
  [v3 bindNamedParam:":maxEntityId" toInt64:*(void *)(a1 + 40)];
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(*(id *)(a1 + 32), "internalEntityId"));
}

- (int64_t)getMaxEntityId
{
  int64_t result = [(SGSqliteDatabase *)self->_db maxIdForTable:@"entity"];
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  return result;
}

+ (id)cnContactIdentifiersForContact:(id)a3
{
  v28[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [a1 cnContactIdentifiersSpotlightQueryStringForContact:v4];
  if (v5)
  {
    id v6 = objc_opt_new();
    id v7 = objc_opt_new();
    [v7 setLowPriority:qos_class_self() < 0x12];
    [v7 setFetchAttributes:MEMORY[0x1E4F1CBF0]];
    [v7 setReason:@"reason:SG2CN-candidate-search-1; code:9"];
    id v8 = (void *)[objc_alloc(MEMORY[0x1E4F23828]) initWithQueryString:v5 context:v7];
    [v8 setBundleIDs:&unk_1F2536AA0];
    [v8 setPrivateIndex:0];
    if ([MEMORY[0x1E4F93B10] isDeviceFormattedForProtection])
    {
      uint64_t v9 = *MEMORY[0x1E4F28378];
      v28[0] = *MEMORY[0x1E4F28358];
      v28[1] = v9;
      int64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:2];
      [v8 setProtectionClasses:v10];
    }
    id v11 = objc_opt_new();
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke;
    v26[3] = &unk_1E65BFB68;
    id v12 = v11;
    id v27 = v12;
    [v8 setFoundItemsHandler:v26];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_269;
    v23[3] = &unk_1E65BA6C8;
    id v13 = v6;
    id v24 = v13;
    id v14 = v12;
    id v25 = v14;
    [v8 setCompletionHandler:v23];
    locatiouint64_t n = 0;
    objc_initWeak(&location, v8);
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    uint64_t v19 = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_271;
    uint64_t v20 = &unk_1E65BA6F0;
    objc_copyWeak(&v21, &location);
    [v13 wait:&v17];
    objc_msgSend(v8, "start", v17, v18, v19, v20);
    id v15 = v13;
    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
  else
  {
    id v15 = [MEMORY[0x1E4F5DA30] createWithImmediateResult:MEMORY[0x1E4F1CBF0] error:0];
  }

  return v15;
}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        uint64_t v9 = (void *)MEMORY[0x1CB79B230]();
        int64_t v10 = sgLogHandle();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          id v13 = [v8 uniqueIdentifier];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v19 = v13;
          _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "SG2CN found identifier: %@", buf, 0xCu);
        }
        id v11 = *(void **)(a1 + 32);
        id v12 = [v8 uniqueIdentifier];
        [v11 addCNContactIdentifier:v12];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }
}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_269(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "SG2CN error: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) fail:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id v8 = [*(id *)(a1 + 40) proxyArray];
      int v9 = 138412290;
      id v10 = v8;
      _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "SG2CN all found identifiers: %@", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = [*(id *)(a1 + 40) proxyArray];
    [v6 succeed:v7];
  }
}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_271(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained cancel];
  }
}

+ (id)cnContactIdentifiersSpotlightQueryStringForContact:(id)a3
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1CB79B230]();
  v203 = v4;
  uint64_t v6 = [v4 name];
  if (!v6)
  {
    long long v16 = 0;
    goto LABEL_100;
  }
  id v193 = a1;
  v200 = v5;
  uint64_t v7 = objc_opt_new();
  id v8 = [v7 UUIDString];

  int v9 = [v8 stringByAppendingString:@"*"];
  id v10 = [v8 stringByAppendingString:@"?"];
  v239[0] = MEMORY[0x1E4F143A8];
  v239[1] = 3221225472;
  v239[2] = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke;
  v239[3] = &unk_1E65BF410;
  id v199 = v9;
  id v240 = v199;
  id v198 = v10;
  id v241 = v198;
  v219 = (void (**)(void, void))MEMORY[0x1CB79B4C0](v239);
  v237[0] = MEMORY[0x1E4F143A8];
  v237[1] = 3221225472;
  v237[2] = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_2;
  v237[3] = &unk_1E65BA680;
  id v197 = v8;
  id v238 = v197;
  v218 = (void (**)(void, void, void))MEMORY[0x1CB79B4C0](v237);
  uint64_t v11 = [v6 firstName];
  uint64_t v12 = [v11 length];

  if (v12)
  {
    id v13 = [v6 firstName];
    long long v14 = +[SGNicknames nicknamesForName:v13];

    if (v14)
    {
      long long v15 = [v14 objectsPassingTest:&__block_literal_global_200_26581];
      v202 = [v15 allObjects];
    }
    else
    {
      v202 = (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {
    v202 = (void *)MEMORY[0x1E4F1CBF0];
  }
  v217 = objc_opt_new();
  long long v17 = [v6 fullName];
  uint64_t v18 = [v17 length];

  v209 = v6;
  if (v18)
  {
    uint64_t v19 = [v6 fullName];
    uint64_t v20 = ((void (**)(void, void *))v219)[2](v219, v19);
    uint64_t v21 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v20, @"cd");
    [v217 addObject:v21];

    uint64_t v22 = [v6 firstName];
    if ([v22 length])
    {
      id v23 = [v6 lastName];
      uint64_t v24 = [v23 length];

      if (!v24) {
        goto LABEL_14;
      }
      id v25 = [NSString alloc];
      long long v26 = [v6 firstName];
      id v27 = v219;
      uint64_t v28 = ((void (**)(void, void *))v219)[2](v219, v26);
      BOOL v29 = [v6 lastName];
      long long v30 = ((void (**)(void, void *))v27)[2](v27, v29);
      uint64_t v31 = (void *)[v25 initWithFormat:@"%@ %@", v28, v30];
      uint64_t v32 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v31, @"cd");
      [v217 addObject:v32];

      id v33 = [NSString alloc];
      uint64_t v22 = [v209 firstName];
      uint64_t v34 = ((void (**)(void, void *))v27)[2](v27, v22);
      uint64_t v35 = [v209 lastName];
      __int16 v36 = ((void (**)(void, void *))v27)[2](v27, v35);
      uint64_t v37 = (void *)[v33 initWithFormat:@"%@ * %@", v34, v36];
      __int16 v38 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v37, @"cd");
      [v217 addObject:v38];

      uint64_t v6 = v209;
    }

LABEL_14:
    uint64_t v39 = [v6 firstName];
    if ([v39 length])
    {
      char v40 = [v6 middleName];
      uint64_t v41 = [v40 length];

      if (!v41) {
        goto LABEL_18;
      }
      id v42 = [NSString alloc];
      long long v43 = [v6 firstName];
      long long v44 = v219;
      long long v45 = ((void (**)(void, void *))v219)[2](v219, v43);
      long long v46 = [v6 middleName];
      id v47 = ((void (**)(void, void *))v44)[2](v44, v46);
      long long v48 = (void *)[v42 initWithFormat:@"%@ %@", v45, v47];
      id v49 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v48, @"cd");
      [v217 addObject:v49];

      id v50 = [NSString alloc];
      uint64_t v39 = [v209 firstName];
      id v51 = ((void (**)(void, void *))v44)[2](v44, v39);
      id v52 = [v209 middleName];
      id v53 = ((void (**)(void, void *))v44)[2](v44, v52);
      unint64_t v54 = (void *)[v50 initWithFormat:@"%@ %@ *", v51, v53];
      uint64_t v55 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v54, @"cd");
      [v217 addObject:v55];

      uint64_t v6 = v209;
    }

LABEL_18:
    id v56 = [v6 lastName];
    uint64_t v57 = [v56 length];

    if (v57)
    {
      long long v235 = 0u;
      long long v236 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      id obj = v202;
      uint64_t v212 = [obj countByEnumeratingWithState:&v233 objects:v256 count:16];
      if (v212)
      {
        id v206 = *(id *)v234;
        do
        {
          for (uint64_t i = 0; i != v212; ++i)
          {
            if (*(id *)v234 != v206) {
              objc_enumerationMutation(obj);
            }
            uint64_t v59 = *(void *)(*((void *)&v233 + 1) + 8 * i);
            id v60 = [NSString alloc];
            long long v61 = v219[2](v219, v59);
            long long v62 = [v209 lastName];
            long long v63 = ((void (**)(void, void *))v219)[2](v219, v62);
            long long v64 = (void *)[v60 initWithFormat:@"%@ %@", v61, v63];
            long long v65 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v64, @"cd");
            [v217 addObject:v65];

            id v66 = [NSString alloc];
            long long v67 = v219[2](v219, v59);
            id v68 = [v209 lastName];
            id v69 = ((void (**)(void, void *))v219)[2](v219, v68);
            id v70 = (void *)[v66 initWithFormat:@"%@ * %@", v67, v69];
            id v71 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v70, @"cd");
            [v217 addObject:v71];
          }
          uint64_t v212 = [obj countByEnumeratingWithState:&v233 objects:v256 count:16];
        }
        while (v212);
      }

      uint64_t v6 = v209;
    }
  }
  uint64_t v201 = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(@"kMDItemDisplayName", v217);

  uint64_t v72 = objc_opt_new();
  uint64_t v73 = [v6 fullName];
  uint64_t v74 = ((void (**)(void, void *))v219)[2](v219, v73);
  id v75 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v74, @"cdwt");
  [v72 addObject:v75];

  uint64_t v76 = [v6 firstName];
  uint64_t v77 = [v76 length];

  if (v77)
  {
    long long v78 = [v6 firstName];
    int v79 = [v78 characterAtIndex:0] & 0xFC00;

    id v80 = [v6 firstName];
    id v81 = v80;
    if (v79 == 55296) {
      uint64_t v82 = 2;
    }
    else {
      uint64_t v82 = 1;
    }
    uint64_t v83 = [v80 substringToIndex:v82];
  }
  else
  {
    uint64_t v83 = 0;
  }
  id v84 = [v6 firstName];
  if ([v84 length])
  {
    id v85 = [v6 lastName];
    uint64_t v86 = [v85 length];

    if (!v86) {
      goto LABEL_39;
    }
    if (!v83)
    {
      v191 = [MEMORY[0x1E4F28B00] currentHandler];
      [v191 handleFailureInMethod:a2, v193, @"SGSqlEntityStore+CNtoSGContacts.m", 723, @"Invalid parameter not satisfying: %@", @"firstInitial" object file lineNumber description];
    }
    id v87 = [NSString alloc];
    long long v88 = v219;
    long long v89 = ((void (**)(void, void *))v219)[2](v219, v83);
    long long v90 = [v6 lastName];
    long long v91 = ((void (**)(void, void *))v88)[2](v88, v90);
    long long v92 = (void *)[v87 initWithFormat:@"%@ %@", v89, v91];
    long long v93 = v218;
    ((void (**)(void, void *, __CFString *))v218)[2](v218, v92, @"cd");
    uint64_t v94 = v213 = v83;
    [v72 addObject:v94];

    id v95 = [NSString alloc];
    char v96 = ((void (**)(void, void *))v88)[2](v88, v213);
    long long v97 = [v209 lastName];
    long long v98 = ((void (**)(void, void *))v88)[2](v88, v97);
    long long v99 = (void *)[v95 initWithFormat:@"%@ * %@", v96, v98];
    long long v100 = ((void (**)(void, void *, __CFString *))v93)[2](v93, v99, @"cd");
    [v72 addObject:v100];

    id v101 = [NSString alloc];
    long long v102 = ((void (**)(void, void *))v88)[2](v88, v213);
    long long v103 = [v209 lastName];
    long long v104 = ((void (**)(void, void *))v88)[2](v88, v103);
    id v105 = (void *)[v101 initWithFormat:@"%@. %@", v102, v104];
    v106 = ((void (**)(void, void *, __CFString *))v93)[2](v93, v105, @"cd");
    [v72 addObject:v106];

    uint64_t v83 = v213;
    id v107 = [NSString alloc];
    id v84 = ((void (**)(void, void *))v88)[2](v88, v213);
    id v108 = [v209 lastName];
    long long v109 = ((void (**)(void, void *))v88)[2](v88, v108);
    long long v110 = (void *)[v107 initWithFormat:@"%@. * %@", v84, v109];
    __int16 v111 = ((void (**)(void, void *, __CFString *))v93)[2](v93, v110, @"cd");
    [v72 addObject:v111];

    uint64_t v6 = v209;
  }

LABEL_39:
  long long v112 = [v6 firstName];
  if (![v112 length])
  {
LABEL_42:

    goto LABEL_43;
  }
  long long v113 = [v6 middleName];
  uint64_t v114 = [v113 length];

  if (v114)
  {
    id v115 = [NSString alloc];
    long long v116 = [v6 firstName];
    v117 = v219;
    id v118 = ((void (**)(void, void *))v219)[2](v219, v116);
    id v119 = [v6 middleName];
    id v120 = ((void (**)(void, void *))v117)[2](v117, v119);
    v214 = v83;
    id v121 = (void *)[v115 initWithFormat:@"%@ %@", v118, v120];
    id v122 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v121, @"cd");
    [v72 addObject:v122];

    id v123 = [NSString alloc];
    long long v112 = [v209 firstName];
    v124 = ((void (**)(void, void *))v117)[2](v117, v112);
    id v125 = [v209 middleName];
    id v126 = ((void (**)(void, void *))v117)[2](v117, v125);
    BOOL v127 = (void *)[v123 initWithFormat:@"%@ %@ *", v124, v126];
    v128 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v127, @"cd");
    [v72 addObject:v128];

    uint64_t v83 = v214;
    goto LABEL_42;
  }
LABEL_43:

  v196 = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(@"kMDItemDisplayName", v72);

  id v129 = objc_opt_new();
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  id v130 = [v203 emailAddresses];
  uint64_t v131 = [v130 countByEnumeratingWithState:&v229 objects:v255 count:16];
  if (v131)
  {
    uint64_t v132 = v131;
    uint64_t v133 = *(void *)v230;
    do
    {
      for (uint64_t j = 0; j != v132; ++j)
      {
        if (*(void *)v230 != v133) {
          objc_enumerationMutation(v130);
        }
        BOOL v135 = [*(id *)(*((void *)&v229 + 1) + 8 * j) emailAddress];
        v136 = ((void (**)(void, void *))v219)[2](v219, v135);
        v137 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v136, @"c");
        [v129 addObject:v137];
      }
      uint64_t v132 = [v130 countByEnumeratingWithState:&v229 objects:v255 count:16];
    }
    while (v132);
  }

  v194 = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(@"kMDItemEmailAddresses", v129);

  id obja = (id)objc_opt_new();
  uint64_t v138 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:10];
  long long v225 = 0u;
  long long v226 = 0u;
  long long v227 = 0u;
  long long v228 = 0u;
  id v207 = [v203 phones];
  uint64_t v215 = [v207 countByEnumeratingWithState:&v225 objects:v254 count:16];
  if (v215)
  {
    id v210 = *(id *)v226;
    do
    {
      for (uint64_t k = 0; k != v215; ++k)
      {
        if (*(id *)v226 != v210) {
          objc_enumerationMutation(v207);
        }
        v140 = *(void **)(*((void *)&v225 + 1) + 8 * k);
        [v138 removeAllObjects];
        v141 = [v140 phoneNumber];
        v142 = self;

        if (v142)
        {
          uint64_t v253 = 0;
          long long v251 = 0u;
          long long v252 = 0u;
          long long v249 = 0u;
          *(_OWORD *)theString = 0u;
          long long v247 = 0u;
          long long v248 = 0u;
          long long v245 = 0u;
          long long v246 = 0u;
          long long v244 = 0u;
          memset(buffer, 0, sizeof(buffer));
          CFIndex Length = CFStringGetLength(v141);
          theString[0] = v141;
          *((void *)&v251 + 1) = 0;
          *(void *)&long long v252 = Length;
          CFStringRef CharactersPtr = (const __CFString *)CFStringGetCharactersPtr(v141);
          CStringPtr = 0;
          theString[1] = CharactersPtr;
          if (!CharactersPtr) {
            CStringPtr = CFStringGetCStringPtr(v141, 0x600u);
          }
          *(void *)&long long v251 = CStringPtr;
          *((void *)&v252 + 1) = 0;
          uint64_t v253 = 0;
          if (Length >= 1)
          {
            uint64_t v146 = 0;
            uint64_t v147 = 0;
            uint64_t v148 = 64;
            do
            {
              if ((unint64_t)v147 >= 4) {
                uint64_t v149 = 4;
              }
              else {
                uint64_t v149 = v147;
              }
              UniChar v224 = 0;
              uint64_t v150 = v252;
              if ((uint64_t)v252 > v147)
              {
                if (theString[1])
                {
                  UniChar v151 = *((_WORD *)&theString[1]->isa + v147 + *((void *)&v251 + 1));
                }
                else if ((void)v251)
                {
                  UniChar v151 = *(char *)(v251 + *((void *)&v251 + 1) + v147);
                }
                else
                {
                  uint64_t v152 = *((void *)&v252 + 1);
                  if (v253 <= v147 || *((void *)&v252 + 1) > v147)
                  {
                    uint64_t v154 = v149 + v146;
                    uint64_t v155 = v148 - v149;
                    uint64_t v156 = v147 - v149;
                    uint64_t v157 = v156 + 64;
                    if (v156 + 64 >= (uint64_t)v252) {
                      uint64_t v157 = v252;
                    }
                    *((void *)&v252 + 1) = v156;
                    uint64_t v253 = v157;
                    if ((uint64_t)v252 >= v155) {
                      uint64_t v150 = v155;
                    }
                    v259.length = v150 + v154;
                    v259.locatiouint64_t n = v156 + *((void *)&v251 + 1);
                    CFStringGetCharacters(theString[0], v259, buffer);
                    uint64_t v152 = *((void *)&v252 + 1);
                  }
                  UniChar v151 = buffer[v147 - v152];
                }
                UniChar v224 = v151;
                if ((unsigned __int16)(v151 - 48) <= 9u)
                {
                  v158 = (void *)[[NSString alloc] initWithBytes:&v224 length:1 encoding:1];
                  [v138 addObject:v158];
                }
              }
              ++v147;
              --v146;
              ++v148;
            }
            while (Length != v147);
          }
        }

        if ((unint64_t)[v138 count] >= 4)
        {
          v159 = [v138 objectAtIndexedSubscript:0];
          int v160 = [v159 isEqualToString:@"1"];

          if (v160) {
            [v138 removeObjectAtIndex:0];
          }
          id v161 = [NSString alloc];
          v162 = objc_msgSend(v138, "_pas_componentsJoinedByString:", @"*");
          v163 = (void *)[v161 initWithFormat:@"\"*%@*\"cd", v162];

          [obja addObject:v163];
        }
      }
      uint64_t v215 = [v207 countByEnumeratingWithState:&v225 objects:v254 count:16];
    }
    while (v215);
  }

  v192 = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(@"kMDItemPhoneNumbers", obja);

  v216 = objc_opt_new();
  long long v220 = 0u;
  long long v221 = 0u;
  long long v222 = 0u;
  long long v223 = 0u;
  id v211 = [v203 postalAddresses];
  uint64_t v164 = [v211 countByEnumeratingWithState:&v220 objects:v242 count:16];
  if (v164)
  {
    uint64_t v165 = v164;
    uint64_t v166 = *(void *)v221;
    do
    {
      uint64_t v167 = 0;
      id v208 = (id)v165;
      do
      {
        if (*(void *)v221 != v166) {
          objc_enumerationMutation(v211);
        }
        v168 = *(void **)(*((void *)&v220 + 1) + 8 * v167);
        v169 = [v168 components];
        uint64_t v170 = [v169 street];
        if (v170)
        {
          v171 = (void *)v170;
          v172 = [v169 city];

          if (v172)
          {
            id v173 = [NSString alloc];
            v174 = [v169 street];
            uint64_t v175 = v166;
            v176 = ((void (**)(void, void *))v219)[2](v219, v174);
            v177 = [v169 city];
            v178 = ((void (**)(void, void *))v219)[2](v219, v177);
            v179 = (void *)[v173 initWithFormat:@"%@ %@", v176, v178];
            v180 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v179, @"cdwt");
            [v216 addObject:v180];

            uint64_t v166 = v175;
            uint64_t v165 = (uint64_t)v208;
          }
        }
        v181 = [v168 address];
        v182 = ((void (**)(void, void *))v219)[2](v219, v181);
        v183 = ((void (**)(void, void *, __CFString *))v218)[2](v218, v182, @"cdwt");
        [v216 addObject:v183];

        ++v167;
      }
      while (v165 != v167);
      uint64_t v165 = [v211 countByEnumeratingWithState:&v220 objects:v242 count:16];
    }
    while (v165);
  }

  v184 = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(@"kMDItemAuthorAddresses", v216);

  v185 = (void *)[[NSString alloc] initWithFormat:@"(%@ || %@ || %@)", v194, v192, v184];
  v186 = (void *)[[NSString alloc] initWithFormat:@"(%@ && %@)", v196, v185];
  v187 = (void *)v201;
  long long v16 = (void *)[[NSString alloc] initWithFormat:@"%@ && (%@ || %@)", @"true", v201, v186];
  v188 = sgLogHandle();
  if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
  {
    v190 = [v203 name];
    *(_DWORD *)buffer = 138740227;
    *(void *)&buffer[2] = v190;
    buffer[6] = 2117;
    *(void *)&buffer[7] = v16;
    _os_log_debug_impl(&dword_1CA650000, v188, OS_LOG_TYPE_DEBUG, "SG2CN query for contact %{sensitive}@:\n\n%{sensitive}@", (uint8_t *)buffer, 0x16u);

    v187 = (void *)v201;
  }

  uint64_t v5 = v200;
  uint64_t v6 = v209;
LABEL_100:

  return v16;
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1CB79B230]();
  id v3 = _PASRepairString();
  id v4 = [v3 stringByReplacingOccurrencesOfString:@"*" withString:*(void *)(a1 + 32)];
  uint64_t v5 = [v4 stringByReplacingOccurrencesOfString:@"?" withString:*(void *)(a1 + 40)];

  return v5;
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1CB79B230]();
  id v8 = [v5 stringByReplacingOccurrencesOfString:@"\\" withString:@"\\\\"];
  int v9 = [v8 stringByReplacingOccurrencesOfString:@"\" withString:@"\\\"];

  id v10 = [v9 stringByReplacingOccurrencesOfString:@"'" withString:@"\\'"];

  uint64_t v11 = [v10 stringByReplacingOccurrencesOfString:*(void *)(a1 + 32) withString:@"\\""];

  uint64_t v12 = (void *)[[NSString alloc] initWithFormat:@"\"%@\"%@", v11, v6];

  return v12;
}

__CFString *__87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 count])
  {
    id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v4];
    uint64_t v6 = [v5 allObjects];

    uint64_t v12 = MEMORY[0x1E4F143A8];
    id v13 = v3;
    uint64_t v7 = sgMap();
    id v8 = [NSString alloc];
    int v9 = objc_msgSend(v7, "_pas_componentsJoinedByString:", @" || ");
    id v10 = (__CFString *)[v8 initWithFormat:@"(%@)", v9, v12, 3221225472, __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_4, &unk_1E65BF4B0];

    id v4 = (id)v6;
  }
  else
  {
    id v10 = @"false";
  }

  return v10;
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = (objc_class *)NSString;
  id v4 = a2;
  id v5 = (void *)[[v3 alloc] initWithFormat:@"(%@ == %@)", *(void *)(a1 + 32), v4];

  return v5;
}

BOOL __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 length] != 0;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_kvCacheManager, 0);
  objc_storeStrong((id *)&self->_cnToSGContactsCachePendingUpdateRequests, 0);
  objc_storeStrong((id *)&self->_otherDetailsWithNoContact, 0);
  objc_storeStrong(&self->_lockStateNotificationRegistrationToken, 0);
  objc_storeStrong((id *)&self->_snippetDbPath, 0);
  objc_storeStrong(&self->_crLookup, 0);
  objc_storeStrong((id *)&self->_messageRecipients, 0);
  objc_storeStrong((id *)&self->_precomputationQueue, 0);
  objc_storeStrong((id *)&self->_prematchedContactIdentifiers, 0);
  objc_storeStrong((id *)&self->_spotlightReindexQueue, 0);
  objc_storeStrong((id *)&self->_recentlyDeletedEmailKeys, 0);
  objc_storeStrong((id *)&self->_sgToCNContactsCacheUpdateAdapter, 0);
  objc_storeStrong((id *)&self->_spotlightContactsAdapter, 0);
  objc_storeStrong((id *)&self->_journal, 0);
  objc_storeStrong((id *)&self->_deallocNotifications, 0);
  objc_storeStrong((id *)&self->_snippetsMigrations, 0);
  objc_storeStrong((id *)&self->_entityMigrations, 0);
  objc_storeStrong((id *)&self->_history, 0);
  objc_storeStrong((id *)&self->_sgmiFeatureStore, 0);
  objc_storeStrong((id *)&self->_snippetsJournal, 0);
  objc_storeStrong((id *)&self->_snippetDb, 0);
  objc_storeStrong((id *)&self->_sharedWriteLock, 0);
  objc_storeStrong((id *)&self->_db, 0);
}

- (SGSGtoCNContactsCacheUpdateAdapter)sgToCNContactsCacheUpdateAdapter
{
  return (SGSGtoCNContactsCacheUpdateAdapter *)objc_getProperty(self, a2, 136, 1);
}

- (SGSpotlightContactsAdapter)spotlightContactsAdapter
{
  return (SGSpotlightContactsAdapter *)objc_getProperty(self, a2, 128, 1);
}

- (BOOL)waitForMigrations
{
  return self->_waitForMigrations;
}

- (void)runWithWriteLockAcquired:(id)a3
{
  sharedWriteLocuint64_t k = self->_sharedWriteLock;
  if (sharedWriteLock) {
    [(SGSqliteDatabaseSharedLock *)sharedWriteLock runWithLockAcquired:a3];
  }
  else {
    (*((void (**)(id))a3 + 2))(a3);
  }
}

- (id)sgmiFeatureStore
{
  return self->_sgmiFeatureStore;
}

- (id)dumpTables:(id)a3 columns:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v6 count])
  {
    unint64_t v8 = 0;
    uint64_t v22 = v27;
    int v9 = &stru_1F24EEF20;
    id v23 = v7;
    do
    {
      id v10 = [v7 objectAtIndex:v8];
      uint64_t v11 = [v6 objectAtIndex:v8];
      id v25 = objc_msgSend(v10, "_pas_componentsJoinedByString:", @", ");
      uint64_t v12 = (void *)[[NSString alloc] initWithFormat:@"SELECT %@ FROM %@", v25, v11, v22];
      id v13 = objc_opt_new();
      db = self->_db;
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v27[0] = __39__SGSqlEntityStore_dumpTables_columns___block_invoke_2;
      v27[1] = &unk_1E65BFED8;
      id v28 = v10;
      id v29 = v13;
      id v15 = v13;
      id v24 = v10;
      [(SGSqliteDatabase *)db prepAndRunSQL:v12 onPrep:&__block_literal_global_585 onRow:v26 onError:0];
      objc_msgSend(v15, "_pas_componentsJoinedByString:", @"|");
      v17 = long long v16 = self;
      uint64_t v18 = v6;
      uint64_t v19 = (void *)[[NSString alloc] initWithFormat:@"%@\n%@", v11, v17];
      uint64_t v20 = [(__CFString *)v9 stringByAppendingString:v19];

      id v6 = v18;
      self = v16;
      id v7 = v23;

      ++v8;
      int v9 = v20;
    }
    while ([v18 count] > v8);
  }
  else
  {
    uint64_t v20 = &stru_1F24EEF20;
  }

  return v20;
}

uint64_t __39__SGSqlEntityStore_dumpTables_columns___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = [v3 getNSStringForColumn:v4];
      if (v5) {
        id v6 = (__CFString *)v5;
      }
      else {
        id v6 = @"NULL";
      }
      [*(id *)(a1 + 40) addObject:v6];

      ++v4;
    }
    while ([*(id *)(a1 + 32) count] > v4);
  }
  [*(id *)(a1 + 40) addObject:@"\n"];
  id v7 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v7;
}

- (unint64_t)numberOfRowsInTable:(id)a3
{
  return [(SGSqliteDatabase *)self->_db numberOfRowsInTable:a3];
}

- (void)truncateContactDetailTable
{
  db = self->_db;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __46__SGSqlEntityStore_truncateContactDetailTable__block_invoke;
  v3[3] = &unk_1E65BEF88;
  void v3[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v3];
}

uint64_t __46__SGSqlEntityStore_truncateContactDetailTable__block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunSQL:@"DELETE FROM contactDetails" onPrep:0 onRow:0 onError:0];
}

- (void)resolveFullDownloadRequests:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    db = self->_db;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke;
    void v6[3] = &unk_1E65BFD88;
    void v6[4] = self;
    id v7 = v4;
    [(SGSqliteDatabase *)db writeTransaction:v6];
  }
}

void __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"UPDATE emailMetadata SET downloadState = :resolved WHERE key IN _pas_nsarray(:keys)" onPrep:v2 onRow:0 onError:0];
}

void __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":resolved" toInteger:2];
  objc_msgSend(*(id *)(a1 + 32), "_pas_proxyArrayWithMapping:", &__block_literal_global_547);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindNamedParam:":keys" toNSArray:v4];
}

uint64_t __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 serialize];
}

- (id)loadFullDownloadRequestBatch:(unint64_t)a3
{
  if ((uint64_t)a3 >= 1) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v4];
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke;
  v11[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v11[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke_2;
  v9[3] = &unk_1E65BFF78;
  id v7 = v5;
  id v10 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE unlikely(downloadState = :requested) ORDER BY creationTimestamp DESC LIMIT :limit" onPrep:v11 onRow:v9 onError:0];

  return v7;
}

void __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":requested" toInt64:1];
  [v3 bindNamedParam:":limit" toInt64:*(void *)(a1 + 32)];
}

uint64_t __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 nonnullNSStringForColumnName:"key" table:0];
  unint64_t v4 = [(SGMessageKey *)[SGEmailKey alloc] initWithSerialized:v3];
  [*(id *)(a1 + 32) addObject:v4];
  uint64_t v5 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v5;
}

- (id)journal
{
  return self->_journal;
}

- (id)duplicateKeysMatchingInteractionBundleId:(id)a3 andTags:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  if (!v7)
  {
    uint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 3248, @"Invalid parameter not satisfying: %@", @"bundleId" object file lineNumber description];
  }
  if (![v8 count])
  {
    uint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
    [v19 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 3249, @"Invalid parameter not satisfying: %@", @"tags.count != 0" object file lineNumber description];
  }
  int v9 = sgMap();
  id v10 = objc_opt_new();
  db = self->_db;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_2;
  void v22[3] = &unk_1E65BFF28;
  id v23 = v7;
  id v24 = v9;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_3;
  v20[3] = &unk_1E65BFF78;
  id v12 = v10;
  id v21 = v12;
  id v13 = v9;
  id v14 = v7;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT b.entityKey, b.entityType, b.parentKey FROM entityTags AS i CROSS JOIN entityTags AS b ON b.duplicateKeyHashBlob=i.duplicateKeyHashBlob WHERE b.tag=:interactionBundleIdTag AND i.tag IN _pas_nsarray(:tags)" onPrep:v22 onRow:v20 onError:0];
  id v15 = v21;
  id v16 = v12;

  return v16;
}

void __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F5D9F0];
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = a2;
  uint64_t v5 = [v3 interactionBundleId:v4];
  id v6 = [v5 name];
  [v7 bindNamedParam:":interactionBundleIdTag" toNSString:v6];

  [v7 bindNamedParam:":tags" toNSArray:*(void *)(a1 + 40)];
}

uint64_t __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getNSStringForColumn:0];
  if (v4)
  {
    uint64_t v5 = [SGDuplicateKey alloc];
    uint64_t v6 = [v3 getInt64ForColumn:1];
    id v7 = [v3 getNSStringForColumn:2];
    id v8 = [(SGDuplicateKey *)v5 initWithSerializedEntityKey:v4 entityType:v6 serializedParentKey:v7];

    [*(id *)(a1 + 32) addObject:v8];
  }
  else
  {
    int v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "Nil serializedEntityKey found in entityTags", v12, 2u);
    }
  }
  id v10 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v10;
}

uint64_t __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke(uint64_t a1, void *a2)
{
  return [a2 name];
}

- (id)_hashWithDuplicateKeysMatchingTags:(id)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(SGSqlEntityStore *)self duplicateKeysMatchingAnyTag:v4];
  uint64_t v6 = objc_opt_new();
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v19 + 1) + 8 * v11);
        id v13 = objc_alloc(MEMORY[0x1E4F1C9B8]);
        id v14 = [v12 value];
        id v15 = (void *)[v13 initWithBase64EncodedString:v14 options:0];

        if (v15)
        {
          id v16 = [v5 objectForKeyedSubscript:v12];
          [v6 setObject:v16 forKeyedSubscript:v15];
        }
        else
        {
          long long v17 = sgLogHandle();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            id v24 = v12;
            _os_log_fault_impl(&dword_1CA650000, v17, OS_LOG_TYPE_FAULT, "Invalid base64encoded string for tag %@", buf, 0xCu);
          }

          if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
            abort();
          }
        }

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v9);
  }

  return v6;
}

- (id)duplicateKeysMatchingAnyReminderHash:(id)a3
{
  id v4 = sgMap();
  uint64_t v5 = [(SGSqlEntityStore *)self _hashWithDuplicateKeysMatchingTags:v4];

  return v5;
}

id __57__SGSqlEntityStore_duplicateKeysMatchingAnyReminderHash___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F5D9F0];
  id v3 = [a2 base64EncodedStringWithOptions:0];
  id v4 = [v2 reminderHash:v3];

  return v4;
}

- (id)duplicateKeysMatchingAnyEventHash:(id)a3
{
  id v4 = sgMap();
  uint64_t v5 = [(SGSqlEntityStore *)self _hashWithDuplicateKeysMatchingTags:v4];

  return v5;
}

id __54__SGSqlEntityStore_duplicateKeysMatchingAnyEventHash___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F5D9F0];
  id v3 = [a2 base64EncodedStringWithOptions:0];
  id v4 = [v2 eventHash:v3];

  return v4;
}

- (id)duplicateKeysMatchingAnyTag:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v4;
  }
  else
  {
    id v5 = (id)objc_opt_new();
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v6 = v4;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          [v5 addObject:*(void *)(*((void *)&v25 + 1) + 8 * i)];
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v8);
    }
  }
  uint64_t v11 = objc_msgSend(v5, "_pas_mappedArrayWithTransform:", &__block_literal_global_508);
  db = self->_db;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_2;
  v23[3] = &unk_1E65C0388;
  id v24 = v5;
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  long long v20 = __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_4;
  long long v21 = &unk_1E65BFF78;
  id v22 = v11;
  id v13 = v11;
  id v14 = v5;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT array.rowid, entityKey, entityType, parentKey FROM entityTags JOIN _pas_nsarray(:tagNames) AS array ON entityTags.tag == array.value UNION ALL SELECT array.rowid, key, :emailEntityType, NULL FROM emailTags JOIN _pas_nsarray(:tagNames) AS array ON emailTags.tag == array.value" onPrep:v23 onRow:&v18 onError:0];
  id v15 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  id v16 = objc_msgSend(v15, "initWithObjects:forKeys:", v13, v14, v18, v19, v20, v21);

  return v16;
}

void __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = a2;
  id v3 = objc_msgSend(v2, "_pas_mappedArrayWithTransform:", &__block_literal_global_515);
  [v4 bindNamedParam:":tagNames" toNSArray:v3];

  [v4 bindNamedParam:":emailEntityType" toInt64:5];
}

uint64_t __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getInt64ForColumn:0];
  id v5 = [v3 nonnullNSStringForColumn:1];
  uint64_t v6 = [v3 getInt64ForColumn:2];
  uint64_t v7 = [v3 getNSStringForColumn:3];

  uint64_t v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v4];
  uint64_t v9 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v5 entityType:v6 serializedParentKey:v7];
  [v8 addObject:v9];

  uint64_t v10 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v10;
}

uint64_t __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 name];
}

id __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke()
{
  uint64_t v0 = objc_opt_new();
  return v0;
}

- (BOOL)reminderAlarmTriggeredForStorageReminder:(id)a3 error:(id *)a4
{
  journal = self->_journal;
  id v5 = a3;
  uint64_t v6 = [[SGJournalEntry alloc] initWithOperation:18 reminder:v5];

  [(SGJournal *)journal addEntry:v6];
  return 1;
}

- (BOOL)rejectStoredReminder:(id)a3 error:(id *)a4
{
  history = self->_history;
  id v6 = a3;
  [(SGSuggestHistory *)history rejectReminder:v6];
  journal = self->_journal;
  uint64_t v8 = [[SGJournalEntry alloc] initWithOperation:17 reminder:v6];

  [(SGJournal *)journal addEntry:v8];
  return 1;
}

- (BOOL)confirmStoredReminder:(id)a3 error:(id *)a4
{
  history = self->_history;
  id v6 = a3;
  [(SGSuggestHistory *)history confirmReminder:v6];
  journal = self->_journal;
  uint64_t v8 = [[SGJournalEntry alloc] initWithOperation:16 reminder:v6];

  [(SGJournal *)journal addEntry:v8];
  return 1;
}

- (BOOL)reminderAlarmTriggeredForRecordId:(id)a3 error:(id *)a4
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadReminderByRecordId:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self reminderAlarmTriggeredForStorageReminder:v7 error:a4];
  }
  else
  {
    uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"Could not load reminder to reject (recordId=%@)", v6];
    if (a4)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v18 = *MEMORY[0x1E4F28568];
      uint64_t v11 = [MEMORY[0x1E4F28B50] mainBundle];
      id v12 = [v11 localizedStringForKey:v9 value:&stru_1F24EEF20 table:0];
      v19[0] = v12;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
      *a4 = [v10 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v13];
    }
    id v14 = sgRemindersLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v17 = v9;
      _os_log_error_impl(&dword_1CA650000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)rejectReminderByKey:(id)a3 error:(id *)a4
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadReminderByKey:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self rejectStoredReminder:v7 error:a4];
  }
  else
  {
    uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"Could not load reminder to reject (SGDuplicateKey=%@)", v6];
    if (a4)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v18 = *MEMORY[0x1E4F28568];
      uint64_t v11 = [MEMORY[0x1E4F28B50] mainBundle];
      id v12 = [v11 localizedStringForKey:v9 value:&stru_1F24EEF20 table:0];
      v19[0] = v12;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
      *a4 = [v10 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v13];
    }
    id v14 = sgRemindersLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v17 = v9;
      _os_log_error_impl(&dword_1CA650000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)rejectReminderByRecordId:(id)a3 error:(id *)a4
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadReminderByRecordId:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self rejectStoredReminder:v7 error:a4];
  }
  else
  {
    uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"Could not load reminder to reject (recordId=%@)", v6];
    if (a4)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v18 = *MEMORY[0x1E4F28568];
      uint64_t v11 = [MEMORY[0x1E4F28B50] mainBundle];
      id v12 = [v11 localizedStringForKey:v9 value:&stru_1F24EEF20 table:0];
      v19[0] = v12;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
      *a4 = [v10 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v13];
    }
    id v14 = sgRemindersLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v17 = v9;
      _os_log_error_impl(&dword_1CA650000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)confirmReminderByRecordId:(id)a3 error:(id *)a4
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadReminderByRecordId:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self confirmStoredReminder:v7 error:a4];
  }
  else
  {
    uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"Could not load reminder to confirm (recordId=%@)", v6];
    if (a4)
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v18 = *MEMORY[0x1E4F28568];
      uint64_t v11 = [MEMORY[0x1E4F28B50] mainBundle];
      id v12 = [v11 localizedStringForKey:v9 value:&stru_1F24EEF20 table:0];
      v19[0] = v12;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
      *a4 = [v10 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v13];
    }
    id v14 = sgRemindersLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v17 = v9;
      _os_log_error_impl(&dword_1CA650000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)rejectStoredEvent:(id)a3 error:(id *)a4
{
  history = self->_history;
  id v6 = a3;
  [(SGSuggestHistory *)history rejectStorageEvent:v6];
  journal = self->_journal;
  BOOL v8 = [[SGJournalEntry alloc] initWithOperation:7 event:v6];

  [(SGJournal *)journal addEntry:v8];
  return 1;
}

- (BOOL)rejectContactDetailByRecordID:(id)a3 error:(id *)a4
{
  id v5 = a3;
  [(SGSqlEntityStore *)self logConfirmPercentAfterContactDetailRejection];
  id v6 = [(SGSqlEntityStore *)self masterEntityIdForContactOrContactDetailRecord:v5];

  if (v6)
  {
    uint64_t v7 = [(SGSqlEntityStore *)self kvCacheManager];
    [v7 deleteValueByRecordId:v6];
  }
  return 1;
}

- (BOOL)confirmContactDetailByRecordID:(id)a3 error:(id *)a4
{
  return 1;
}

- (BOOL)rejectContactByRecordID:(id)a3 error:(id *)a4
{
  id v6 = a3;
  [(SGSqlEntityStore *)self logConfirmPercentAfterContactRejection];
  uint64_t v7 = [(SGSqlEntityStore *)self masterEntityIdForContactOrContactDetailRecord:v6];
  BOOL v8 = [(SGSqlEntityStore *)self kvCacheManager];
  [v8 deleteValueByRecordId:v7];

  LOBYTE(a4) = [(SGSqlEntityStore *)self confirm:0 orRejectContactByRecordID:v6 error:a4];
  return (char)a4;
}

- (BOOL)confirmContactByRecordID:(id)a3 error:(id *)a4
{
  id v6 = a3;
  [(SGSqlEntityStore *)self logConfirmPercentAfterContactConfirmation];
  LOBYTE(a4) = [(SGSqlEntityStore *)self confirm:1 orRejectContactByRecordID:v6 error:a4];

  return (char)a4;
}

- (BOOL)confirm:(BOOL)a3 orRejectContactByRecordID:(id)a4 error:(id *)a5
{
  BOOL v5 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadStorageContactByRecordId:a4 error:a5];
  if (v7)
  {
    journal = self->_journal;
    uint64_t v9 = [SGJournalEntry alloc];
    if (v5) {
      uint64_t v10 = 12;
    }
    else {
      uint64_t v10 = 13;
    }
    uint64_t v11 = [(SGJournalEntry *)v9 initWithOperation:v10 contact:v7];
    [(SGJournal *)journal addEntry:v11];
  }
  return v7 != 0;
}

- (BOOL)rejectEventByRecordId:(id)a3 error:(id *)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadEventByRecordId:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self rejectStoredEvent:v7 error:a4];
  }
  else
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v6;
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "Could not load event to reject (%@)", buf, 0xCu);
    }

    uint64_t v10 = (void *)[[NSString alloc] initWithFormat:@"Could not load event to reject (%@)", v6];
    if (a4)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v16 = *MEMORY[0x1E4F28568];
      id v12 = [MEMORY[0x1E4F28B50] mainBundle];
      id v13 = [v12 localizedStringForKey:v10 value:&stru_1F24EEF20 table:0];
      long long v17 = v13;
      id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      *a4 = [v11 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v14];
    }
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)confirmStoredEvent:(id)a3 error:(id *)a4
{
  history = self->_history;
  id v6 = a3;
  [(SGSuggestHistory *)history confirmStorageEvent:v6];
  uint64_t v7 = [v6 fieldsToSaveOnConfirmation];
  BOOL v8 = [v6 duplicateKey];
  [(SGSqlEntityStore *)self confirmFieldValues:v7 forEntity:v8];

  journal = self->_journal;
  uint64_t v10 = [[SGJournalEntry alloc] initWithOperation:5 event:v6];

  [(SGJournal *)journal addEntry:v10];
  return 1;
}

- (BOOL)confirmEventByRecordId:(id)a3 error:(id *)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [(SGSqlEntityStore *)self loadEventByRecordId:v6];
  if (v7)
  {
    BOOL v8 = [(SGSqlEntityStore *)self confirmStoredEvent:v7 error:a4];
  }
  else
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v6;
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "Could not load event to confirm (recordId=%@)", buf, 0xCu);
    }

    uint64_t v10 = (void *)[[NSString alloc] initWithFormat:@"Could not load event to confirm (recordId=%@)", v6];
    if (a4)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v16 = *MEMORY[0x1E4F28568];
      id v12 = [MEMORY[0x1E4F28B50] mainBundle];
      id v13 = [v12 localizedStringForKey:v10 value:&stru_1F24EEF20 table:0];
      long long v17 = v13;
      id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      *a4 = [v11 errorWithDomain:@"SGSqlEntityStoreErrorDomain" code:0 userInfo:v14];
    }
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)confirmRealtimeContact:(id)a3 error:(id *)a4
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [v6 contact];
  BOOL v8 = sgLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    id v24 = v7;
    _os_log_debug_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEBUG, "Confirming details as workaround for Contacts search for realtime contact %@", buf, 0xCu);
  }

  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke;
  v21[3] = &unk_1E65BADD0;
  void v21[4] = self;
  id v9 = v7;
  id v22 = v9;
  [v9 enumerateDetailsWithBlock:v21];
  if ([v6 isHarvested])
  {
    uint64_t v10 = [v6 contact];
    uint64_t v11 = [v10 recordId];
    id v12 = [(SGSqlEntityStore *)self loadStorageContactByRecordId:v11 error:a4];

    if (!v12)
    {
      BOOL v17 = 0;
      goto LABEL_7;
    }
    journal = self->_journal;
    id v14 = [[SGJournalEntry alloc] initWithOperation:12 contact:v12];
    [(SGJournal *)journal addEntry:v14];

    id v15 = [v12 convertToContact:self];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke_2;
    void v19[3] = &unk_1E65BADD0;
    void v19[4] = self;
    id v20 = v15;
    id v16 = v15;
    [v16 enumerateDetailsWithBlock:v19];
  }
  BOOL v17 = 1;
LABEL_7:

  return v17;
}

uint64_t __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) confirmOrRejectDetail:a2 forContact:*(void *)(a1 + 40)];
}

uint64_t __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) confirmOrRejectDetail:a2 forContact:*(void *)(a1 + 40)];
}

- (BOOL)rejectRealtimeContact:(id)a3 error:(id *)a4
{
  id v6 = a3;
  [(SGSuggestHistory *)self->_history rejectRealtimeContact:v6];
  if ([v6 isHarvested])
  {
    uint64_t v7 = [v6 contact];
    BOOL v8 = [v7 recordId];
    id v9 = [(SGSqlEntityStore *)self loadStorageContactByRecordId:v8 error:a4];

    if (!v9)
    {
      BOOL v12 = 0;
      goto LABEL_6;
    }
    journal = self->_journal;
    uint64_t v11 = [[SGJournalEntry alloc] initWithOperation:13 contact:v9];
    [(SGJournal *)journal addEntry:v11];
  }
  BOOL v12 = 1;
LABEL_6:

  return v12;
}

- (BOOL)confirmRealtimeEvent:(id)a3 error:(id *)a4
{
  id v7 = a3;
  BOOL v8 = [v7 event];
  id v9 = [v8 uniqueKey];

  if (!v9)
  {
    id v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2892, @"Invalid parameter not satisfying: %@", @"realtimeEvent.event.uniqueKey" object file lineNumber description];
  }
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __47__SGSqlEntityStore_confirmRealtimeEvent_error___block_invoke;
  void v15[3] = &unk_1E65BECB0;
  void v15[4] = self;
  id v11 = v7;
  id v16 = v11;
  BOOL v17 = &v19;
  uint64_t v18 = a4;
  [(SGSqliteDatabase *)db writeTransaction:v15];
  char v12 = *((unsigned char *)v20 + 24);

  _Block_object_dispose(&v19, 8);
  return v12;
}

void __47__SGSqlEntityStore_confirmRealtimeEvent_error___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [SGDuplicateKey alloc];
  uint64_t v4 = [*(id *)(a1 + 40) event];
  BOOL v5 = [v4 uniqueKey];
  id v6 = [(SGDuplicateKey *)v3 initWithSerialized:v5];
  id v11 = [v2 loadEntityByKey:v6];

  id v7 = *(void **)(a1 + 32);
  if (v11)
  {
    BOOL v8 = +[SGStorageEvent storageEventFromEntity:v11];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 confirmStoredEvent:v8 error:*(void *)(a1 + 56)];
  }
  else
  {
    id v9 = (void *)v7[6];
    uint64_t v10 = [*(id *)(a1 + 40) event];
    [v9 confirmEvent:v10];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
}

- (BOOL)rejectRealtimeEvent:(id)a3 error:(id *)a4
{
  id v7 = a3;
  BOOL v8 = [v7 event];
  id v9 = [v8 uniqueKey];

  if (!v9)
  {
    id v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2862, @"Invalid parameter not satisfying: %@", @"realtimeEvent.event.uniqueKey" object file lineNumber description];
  }
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __46__SGSqlEntityStore_rejectRealtimeEvent_error___block_invoke;
  void v15[3] = &unk_1E65BECB0;
  void v15[4] = self;
  id v11 = v7;
  id v16 = v11;
  BOOL v17 = &v19;
  uint64_t v18 = a4;
  [(SGSqliteDatabase *)db writeTransaction:v15];
  char v12 = *((unsigned char *)v20 + 24);

  _Block_object_dispose(&v19, 8);
  return v12;
}

void __46__SGSqlEntityStore_rejectRealtimeEvent_error___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [SGDuplicateKey alloc];
  uint64_t v4 = [*(id *)(a1 + 40) event];
  BOOL v5 = [v4 uniqueKey];
  id v6 = [(SGDuplicateKey *)v3 initWithSerialized:v5];
  id v11 = [v2 loadEntityByKey:v6];

  id v7 = *(void **)(a1 + 32);
  if (v11)
  {
    BOOL v8 = +[SGStorageEvent storageEventFromEntity:v11];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 rejectStoredEvent:v8 error:*(void *)(a1 + 56)];
  }
  else
  {
    id v9 = (void *)v7[6];
    uint64_t v10 = [*(id *)(a1 + 40) event];
    [v9 rejectEvent:v10];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
}

- (id)confirmedFieldValuesForEvent:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = [v4 fieldsToSaveOnConfirmation];
  id v6 = objc_opt_new();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        history = self->_history;
        id v14 = objc_msgSend(v7, "objectForKeyedSubscript:", v12, (void)v17);
        LODWORD(history) = [(SGSuggestHistory *)history hasConfirmedField:v12 value:v14 forStorageEvent:v4];

        if (history)
        {
          id v15 = [v7 objectForKeyedSubscript:v12];
          [v6 setObject:v15 forKey:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v9);
  }

  return v6;
}

- (id)confirmedFieldValuesForEntity:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2824, @"Invalid parameter not satisfying: %@", @"duplicateKey" object file lineNumber description];
  }
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000;
  long long v17 = __Block_byref_object_copy__26977;
  long long v18 = __Block_byref_object_dispose__26978;
  id v19 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke;
  v12[3] = &unk_1E65C05C8;
  id v7 = v5;
  id v13 = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke_2;
  v11[3] = &unk_1E65BEBB0;
  void v11[4] = &v14;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT c.fieldValues FROM confirmedFieldValues AS c INNER JOIN entity AS e ON c.entityId = e.id INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey = :parentKey" onPrep:v12 onRow:v11 onError:0];
  id v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v8;
}

void __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) entityKey];
  id v5 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v5];

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v7 = [*(id *)(a1 + 32) parentKey];
  id v6 = [v7 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v6];
}

uint64_t __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = +[SGSqlEntityStore _fieldValuesClassWhitelist];
  uint64_t v5 = sqlite3_column_nssecurecoding(a2, 0, v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1;
}

- (id)rejectFieldValuesForRecordId:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x3032000000;
  id v15 = __Block_byref_object_copy__26977;
  uint64_t v16 = __Block_byref_object_dispose__26978;
  id v17 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke;
  v9[3] = &unk_1E65C0700;
  void v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  id v11 = &v12;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_2;
  void v7[3] = &unk_1E65C05C8;
  id v8 = *(id *)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_3;
  void v6[3] = &unk_1E65BEBB0;
  void v6[4] = *(void *)(a1 + 48);
  [v2 prepAndRunQuery:@"SELECT fieldValues FROM confirmedFieldValues WHERE entityId=?" onPrep:v7 onRow:v6 onError:0];
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_4;
  v4[3] = &unk_1E65C05C8;
  id v5 = *(id *)(a1 + 40);
  [v3 prepAndRunQuery:@"DELETE FROM confirmedFieldValues WHERE entityId=?" onPrep:v4 onRow:0 onError:0];
}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = [*(id *)(a1 + 32) rowId];
  return sqlite3_bind_int64(a2, 1, v3);
}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = +[SGSqlEntityStore _fieldValuesClassWhitelist];
  uint64_t v5 = sqlite3_column_nssecurecoding(a2, 0, v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1;
}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = [*(id *)(a1 + 32) rowId];
  return sqlite3_bind_int64(a2, 1, v3);
}

- (void)confirmFieldValues:(id)a3 forEntity:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    id v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2761, @"Invalid parameter not satisfying: %@", @"fieldValues" object file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
  [v16 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2762, @"Invalid parameter not satisfying: %@", @"duplicateKey" object file lineNumber description];

LABEL_3:
  id v10 = [(SGSqlEntityStore *)self loadEventByDuplicateKey:v9];
  if (v10)
  {
    [(SGSuggestHistory *)self->_history confirmFieldValues:v7 forStorageEvent:v10];
  }
  else
  {
    id v11 = sgLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1CA650000, v11, OS_LOG_TYPE_ERROR, "Couldn't load event with given duplicate key", buf, 2u);
    }
  }
  db = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke;
  v17[3] = &unk_1E65C0688;
  id v18 = v9;
  id v19 = self;
  id v20 = v7;
  id v13 = v7;
  id v14 = v9;
  [(SGSqliteDatabase *)db writeTransaction:v17];
}

void __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke(uint64_t a1)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = -1;
  uint64_t v2 = [*(id *)(a1 + 32) parentKey];

  sqlite3_int64 v3 = (void *)MEMORY[0x1CB79B230]();
  if (v2) {
    [@"SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id=ep.childId WHERE e.entityKey=:entityKey AND e.entityType=:entityType AND ep.parentKey" stringByAppendingString:@"=:parentKey"];
  }
  else {
  id v4 = [@"SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id=ep.childId WHERE e.entityKey=:entityKey AND e.entityType=:entityType AND ep.parentKey" stringByAppendingString:@" IS NULL"];
  }
  uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 8);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_2;
  v17[3] = &unk_1E65C05C8;
  id v18 = *(id *)(a1 + 32);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_3;
  v16[3] = &unk_1E65BEBB0;
  void v16[4] = &v19;
  [v5 prepAndRunQuery:v4 onPrep:v17 onRow:v16 onError:0];
  if (v20[3] == -1)
  {
    id v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v15 = 0;
      _os_log_error_impl(&dword_1CA650000, v10, OS_LOG_TYPE_ERROR, "Couldn't confirm field values for duplicateKey not in entity table", v15, 2u);
    }

    id v11 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v25 = @"duplicateKey";
    v26[0] = v12;
    id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
    id v14 = [v11 exceptionWithName:@"NotFound" reason:@"Could not find duplicateKey" userInfo:v13];

    objc_exception_throw(v14);
  }
  uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 8);
  v23[0] = @"entityId";
  id v7 = objc_msgSend(NSNumber, "numberWithLongLong:");
  uint64_t v8 = *(void *)(a1 + 48);
  v24[0] = v7;
  v24[1] = v8;
  v23[1] = @"fieldValues";
  v23[2] = @"maybeChanged";
  v24[2] = &unk_1F2536018;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:3];
  [v6 insertOrReplaceIntoTable:@"confirmedFieldValues" dictionary:v9 onError:0];

  _Block_object_dispose(&v19, 8);
}

uint64_t __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) parentKey];

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) parentKey];
    uint64_t v6 = [v5 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v6];
  }
  id v7 = [*(id *)(a1 + 32) entityKey];
  uint64_t v8 = [v7 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v8];

  uint64_t v9 = [*(id *)(a1 + 32) entityType];
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:v9];
}

uint64_t __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 additionalWhereClause:(id)a6 options:(unsigned int)a7 onPrep:(id)a8
{
  __int16 v9 = a7;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v14 = (__CFString *)a6;
  id v15 = a8;
  [MEMORY[0x1E4F5DB40] toFloatingTime:a3.secondsFromUnixEpoch];
  uint64_t v17 = v16;
  [MEMORY[0x1E4F5DB40] toFloatingTime:a4.secondsFromUnixEpoch];
  uint64_t v19 = v18;
  if (v14) {
    id v20 = v14;
  }
  else {
    id v20 = &stru_1F24EEF20;
  }
  uint64_t v21 = (void *)[(__CFString *)v20 mutableCopy];
  uint64_t v22 = v21;
  int v23 = v9;
  if (v9 == 1) {
    uint64_t v21 = (void *)[v21 appendString:@" AND id IN (SELECT entityId FROM confirmedFieldValues WHERE maybeChanged=1)"];
  }
  id v24 = (void *)MEMORY[0x1CB79B230](v21);
  uint64_t v25 = [@"WHERE (e.floatingRange = 0 AND ((:queryStart == e.timeRangeStart) OR (NOT (:queryStart >= e.timeRangeEnd OR :queryEnd <= e.timeRangeStart))) OR e.floatingRange = 1 AND ((:fltQueryStart == e.timeRangeStart) OR (NOT (:fltQueryStart >= e.timeRangeEnd OR :fltQueryEnd <= e.timeRangeStart))))AND e.entityType = :pseudoEventType AND e.state != :deleted " stringByAppendingString:v22];
  long long v26 = [v25 stringByAppendingString:@" ORDER BY e.timeRangeStart ASC LIMIT :limit"];

  long long v27 = [(SGSqlEntityStore *)self selectEntityQuery:v26];

  long long v28 = objc_opt_new();
  db = self->_db;
  uint64_t v47 = MEMORY[0x1E4F143A8];
  uint64_t v48 = 3221225472;
  id v49 = __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke;
  id v50 = &unk_1E65BADA8;
  double secondsFromUnixEpoch = a3.secondsFromUnixEpoch;
  double v53 = a4.secondsFromUnixEpoch;
  uint64_t v54 = v17;
  uint64_t v55 = v19;
  unint64_t v56 = a5;
  id v51 = v15;
  uint64_t v41 = MEMORY[0x1E4F143A8];
  uint64_t v42 = 3221225472;
  long long v43 = __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke_2;
  long long v44 = &unk_1E65BED70;
  long long v45 = self;
  id v30 = v28;
  id v46 = v30;
  id v31 = v15;
  [(SGSqliteDatabase *)db prepAndRunQuery:v27 onPrep:&v47 onRow:&v41 onError:0];
  uint64_t v32 = sgLogHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = objc_msgSend(v30, "count", v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, *(void *)&secondsFromUnixEpoch, *(void *)&v53, v54, v55, v56);
    *(_DWORD *)long long buf = 134218752;
    uint64_t v58 = v39;
    __int16 v59 = 2048;
    double v60 = a3.secondsFromUnixEpoch;
    __int16 v61 = 2048;
    double v62 = a4.secondsFromUnixEpoch;
    __int16 v63 = 2048;
    unint64_t v64 = a5;
    _os_log_debug_impl(&dword_1CA650000, v32, OS_LOG_TYPE_DEBUG, "Loaded %lu suggested events from %f to %f (max %lu)", buf, 0x2Au);
  }

  id v33 = [(SGSqlEntityStore *)self _filterOutOlderVersionsOfPseudoEvents:v30];
  uint64_t v34 = [(SGSqlEntityStore *)self filterOutUndisplayableEntities:v33];

  if (v9 != 2 && (v9 & 0x100) == 0)
  {
    uint64_t v35 = [(SGSqlEntityStore *)self _filterOutCancelledEvents:v34];

    uint64_t v34 = (void *)v35;
  }
  if (v23 == 1)
  {
    uint64_t v36 = [(SGSqlEntityStore *)self _filterOutAllButAcceptedWithUpdatedFields:v34];

    uint64_t v34 = (void *)v36;
  }
  uint64_t v37 = sgLogHandle();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = [v34 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v58 = v40;
    _os_log_debug_impl(&dword_1CA650000, v37, OS_LOG_TYPE_DEBUG, "Returning %lu suggested events after filtering", buf, 0xCu);
  }

  return v34;
}

uint64_t __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":queryStart" double:*(double *)(a1 + 40)];
  +[SGSqliteDatabase bindParam:a2 name:":queryEnd" double:*(double *)(a1 + 48)];
  +[SGSqliteDatabase bindParam:a2 name:":fltQueryStart" double:*(double *)(a1 + 56)];
  +[SGSqliteDatabase bindParam:a2 name:":fltQueryEnd" double:*(double *)(a1 + 64)];
  +[SGSqliteDatabase bindParam:a2 name:":pseudoEventType" int64:2];
  +[SGSqliteDatabase bindParam:a2 name:":deleted" int64:2];
  +[SGSqliteDatabase bindParam:a2 name:":limit" int64:*(void *)(a1 + 72)];
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

uint64_t __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithInternalEntityId:", sqlite3_column_int64(a2, 0));
  id v4 = [*(id *)(a1 + 32) loadEventForRecordId:v3];
  if (v4) {
    [*(id *)(a1 + 40) addObject:v4];
  }

  return 0;
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6
{
  return [(SGSqlEntityStore *)self suggestEventsStartingAt:a5 endingAt:a6 prefix:0 limitTo:a3.secondsFromUnixEpoch options:a4.secondsFromUnixEpoch];
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5
{
  return [(SGSqlEntityStore *)self suggestEventsStartingAt:a5 endingAt:0 limitTo:a3.secondsFromUnixEpoch options:a4.secondsFromUnixEpoch];
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6 options:(unsigned int)a7
{
  uint64_t v7 = *(void *)&a7;
  id v12 = a5;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __76__SGSqlEntityStore_suggestEventsStartingAt_endingAt_prefix_limitTo_options___block_invoke;
  v16[3] = &unk_1E65BEB88;
  void v16[4] = self;
  id v17 = v12;
  id v13 = v12;
  id v14 = [(SGSqlEntityStore *)self suggestEventsStartingAt:a6 endingAt:@"AND title LIKE :prefix ESCAPE '!'" limitTo:v7 additionalWhereClause:v16 options:a3.secondsFromUnixEpoch onPrep:a4.secondsFromUnixEpoch];

  return v14;
}

void __76__SGSqlEntityStore_suggestEventsStartingAt_endingAt_prefix_limitTo_options___block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = [(id)objc_opt_class() likePrefix:*(void *)(a1 + 40)];
  +[SGSqliteDatabase bindParam:a2 name:":prefix" nsstring:v3];
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 options:(unsigned int)a6
{
  return [(SGSqlEntityStore *)self suggestEventsStartingAt:a5 endingAt:0 limitTo:*(void *)&a6 additionalWhereClause:0 options:a3.secondsFromUnixEpoch onPrep:a4.secondsFromUnixEpoch];
}

- (id)_filterOutAllButAcceptedWithUpdatedFields:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v4, "count"));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v13 = [v12 recordId];
        [v6 setObject:v12 forKeyedSubscript:v13];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v9);
  }

  db = self->_db;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke;
  v21[3] = &unk_1E65C0638;
  void v21[4] = self;
  id v22 = v7;
  id v23 = v6;
  id v15 = v5;
  id v24 = v15;
  id v16 = v6;
  id v17 = v7;
  [(SGSqliteDatabase *)db writeTransaction:v21];
  uint64_t v18 = v24;
  id v19 = v15;

  return v19;
}

void __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2;
  void v14[3] = &unk_1E65C0388;
  id v15 = *(id *)(a1 + 40);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_4;
  void v10[3] = &unk_1E65BAD60;
  id v11 = *(id *)(a1 + 48);
  id v4 = v2;
  id v12 = v4;
  id v13 = *(id *)(a1 + 56);
  [v3 prepAndRunSQL:@"SELECT entityId, fieldValues FROM confirmedFieldValues WHERE entityId IN _pas_nsarray(:ids)", v14, v10, 0 onPrep onRow onError];
  if ([v4 count])
  {
    uint64_t v5 = sgMap();
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2_420;
    void v8[3] = &unk_1E65C0388;
    id v9 = v5;
    id v7 = v5;
    [v6 prepAndRunSQL:@"UPDATE confirmedFieldValues SET maybeChanged=0 WHERE entityId IN _pas_nsarray(:ids)" onPrep:v8 onRow:0 onError:0];
  }
}

void __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v2, "_pas_proxyArrayWithMapping:", &__block_literal_global_408);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindNamedParam:":ids" toNSArray:v4];
}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F5DB20];
  id v4 = a2;
  uint64_t v5 = objc_msgSend(v3, "recordIdForEventWithRowId:", objc_msgSend(v4, "getInt64ForColumnName:table:", "entityId", "confirmedFieldValues"));
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v7 = [v4 getNSDataForColumnName:"fieldValues" table:"confirmedFieldValues"];

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F28DC0];
    id v9 = +[SGSqlEntityStore _fieldValuesClassWhitelist];
    uint64_t v10 = [v8 unarchivedObjectOfClasses:v9 fromData:v7 error:0];

    id v11 = [v6 fieldsToSaveOnConfirmation];
    int v12 = [v11 isEqual:v10];
    uint64_t v13 = 48;
    if (v12)
    {
      uint64_t v13 = 40;
      id v14 = v5;
    }
    else
    {
      id v14 = v6;
    }
    [*(id *)(a1 + v13) addObject:v14];
    uint64_t v15 = *MEMORY[0x1E4F93C08];
  }
  else
  {
    id v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1CA650000, v16, OS_LOG_TYPE_DEFAULT, "Failed to retrieve fieldValues from confirmedFieldValues", v18, 2u);
    }

    uint64_t v15 = *MEMORY[0x1E4F93C08];
  }

  return v15;
}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2_420(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_413(uint64_t a1, void *a2)
{
  uint64_t v2 = NSNumber;
  uint64_t v3 = [a2 rowId];
  return [v2 numberWithLongLong:v3];
}

id __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = NSNumber;
  uint64_t v3 = [a2 recordId];
  id v4 = objc_msgSend(v2, "numberWithLongLong:", objc_msgSend(v3, "rowId"));

  return v4;
}

- (id)_filterOutCancelledEvents:(id)a3
{
  uint64_t v3 = sgMapAndFilter();
  return v3;
}

id __46__SGSqlEntityStore__filterOutCancelledEvents___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  if ([v2 eventIsCancelled:v3]) {
    id v4 = 0;
  }
  else {
    id v4 = v3;
  }
  id v5 = v4;

  return v5;
}

- (BOOL)eventIsCancelled:(id)a3
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 0;
  id v5 = [v4 duplicateKey];
  uint64_t v6 = [v5 entityKey];
  id v7 = [v4 duplicateKey];
  uint64_t v8 = [v7 entityType];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  void v31[2] = __37__SGSqlEntityStore_eventIsCancelled___block_invoke;
  v31[3] = &unk_1E65BAD18;
  id v9 = v4;
  id v32 = v9;
  id v33 = &v34;
  id v10 = [(SGSqlEntityStore *)self loadEntitiesByEntityKey:v6 entityType:v8 resolveDuplicates:v31];

  if (*((unsigned char *)v35 + 24))
  {
    BOOL v11 = 1;
  }
  else
  {
    uint64_t v12 = [v9 extraKeyTag];
    uint64_t v13 = (void *)v12;
    if (v12)
    {
      v39[0] = v12;
      id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:1];
      uint64_t v15 = [(SGSqlEntityStore *)self duplicateKeysMatchingAnyTag:v14];
      id v16 = [v15 objectForKeyedSubscript:v13];

      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v17 = v16;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v27 objects:v38 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v28;
        while (2)
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v28 != v19) {
              objc_enumerationMutation(v17);
            }
            uint64_t v21 = *(void **)(*((void *)&v27 + 1) + 8 * i);
            if (objc_msgSend(v21, "entityType", (void)v27) == 2)
            {
              id v22 = [(SGSqlEntityStore *)self loadEntityByKey:v21];
              if ([v22 isCancelled])
              {
                [v22 creationTimestamp];
                double v24 = v23;
                [v9 creationTimestamp];
                if (v24 >= v25)
                {

                  BOOL v11 = 1;
                  goto LABEL_18;
                }
              }
            }
          }
          uint64_t v18 = [v17 countByEnumeratingWithState:&v27 objects:v38 count:16];
          if (v18) {
            continue;
          }
          break;
        }
      }
      BOOL v11 = 0;
LABEL_18:
    }
    else
    {
      BOOL v11 = 0;
    }
  }
  _Block_object_dispose(&v34, 8);

  return v11;
}

uint64_t __37__SGSqlEntityStore_eventIsCancelled___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "creationTimestamp", (void)v13);
        double v10 = v9;
        [*(id *)(a1 + 32) creationTimestamp];
        if (v10 >= v11 && [v8 isCancelled])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_12;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return 0;
}

- (id)_filterOutOlderVersionsOfPseudoEvents:(id)a3
{
  id v3 = sgMapAndFilter();
  return v3;
}

id __58__SGSqlEntityStore__filterOutOlderVersionsOfPseudoEvents___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = [v3 duplicateKey];
  uint64_t v6 = [v5 entityKey];
  id v7 = [v3 duplicateKey];
  uint64_t v8 = [v7 entityType];
  double v9 = +[SGDeduper resolveByPairs:&__block_literal_global_401];
  double v10 = [v4 loadEntitiesByEntityKey:v6 entityType:v8 resolveDuplicates:v9];

  double v11 = [v10 objectAtIndexedSubscript:0];
  uint64_t v12 = [v3 duplicateKey];
  long long v13 = [v12 serialize];
  long long v14 = [v11 duplicateKey];
  long long v15 = [v14 serialize];
  int v16 = [v13 isEqualToString:v15];

  id v17 = 0;
  if (v16) {
    id v17 = v3;
  }

  return v17;
}

id __58__SGSqlEntityStore__filterOutOlderVersionsOfPseudoEvents___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  [v4 creationTimestamp];
  double v7 = v6;
  [v5 creationTimestamp];
  if (v7 <= v8) {
    double v9 = v5;
  }
  else {
    double v9 = v4;
  }
  id v10 = v9;

  return v10;
}

- (id)eventFromSqlResult:(sqlite3_stmt *)a3
{
  id v3 = [(SGSqlEntityStore *)self entityFromSqlResult:a3];
  id v4 = +[SGStorageEvent storageEventFromEntity:v3];

  return v4;
}

- (id)contactIdsMergedWithMasterEntityId:(id)a3
{
  id v5 = a3;
  if ([v5 tableId])
  {
    id v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2480, @"RecordId with unexpected table: %@", v5 object file lineNumber description];
  }
  uint64_t v14 = 0;
  long long v15 = &v14;
  uint64_t v16 = 0x3032000000;
  id v17 = __Block_byref_object_copy__26977;
  uint64_t v18 = __Block_byref_object_dispose__26978;
  id v19 = 0;
  id v19 = (id)objc_opt_new();
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke;
  v12[3] = &unk_1E65C05C8;
  id v7 = v5;
  id v13 = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke_2;
  v11[3] = &unk_1E65BEBB0;
  void v11[4] = &v14;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id FROM entity WHERE entityType = :pseudo AND masterEntityId = :masterEntityId AND id != masterEntityId" onPrep:v12 onRow:v11 onError:0];
  id v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v8;
}

uint64_t __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
  uint64_t v4 = [*(id *)(a1 + 32) rowId];
  return +[SGSqliteDatabase bindParam:a2 name:":masterEntityId" int64:v4];
}

uint64_t __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  [v2 addObject:v3];

  return 0;
}

- (void)rebuildContactDetailsCacheWithShouldContinueBlock:(id)a3
{
  id v4 = a3;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  char v11 = 0;
  kvCacheManager = self->_kvCacheManager;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke;
  void v7[3] = &unk_1E65BACA8;
  void v7[4] = self;
  id v6 = v4;
  id v8 = v6;
  double v9 = v10;
  [(SGKeyValueCacheManager *)kvCacheManager replaceCacheOfType:0 block:v7];

  _Block_object_dispose(v10, 8);
}

BOOL __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 264);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_2;
  v11[3] = &unk_1E65BAC80;
  void v11[4] = v4;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v13 = v6;
  uint64_t v14 = v7;
  id v12 = v3;
  id v8 = v3;
  [v5 replaceCacheOfType:1 block:v11];
  BOOL v9 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 0;

  return v9;
}

BOOL __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_3;
  void v10[3] = &unk_1E65BAC58;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v13 = v5;
  uint64_t v14 = v6;
  id v11 = *(id *)(a1 + 40);
  id v12 = v3;
  id v7 = v3;
  [v4 enumerateAllContactsWithSnippets:0 limitTo:10000 usingBlock:v10];
  BOOL v8 = *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == 0;

  return v8;
}

uint64_t __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v34 = a1;
    unsigned int v31 = v4;
    uint64_t v6 = [v3 name];
    id v7 = [v6 fullName];

    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v35 = v3;
    id obj = [v3 phones];
    uint64_t v8 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v41;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v41 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v40 + 1) + 8 * v11);
          id v13 = (void *)MEMORY[0x1CB79B230]();
          if (v7)
          {
            uint64_t v14 = [MEMORY[0x1E4F5DA40] encodedStringForFullName:v7];
          }
          else
          {
            uint64_t v14 = 0;
          }
          long long v15 = *(void **)(v34 + 32);
          uint64_t v16 = [v12 phoneNumber];
          id v17 = SGNormalizePhoneNumber();
          uint64_t v18 = [v35 recordId];
          [v15 setValue:v14 forKey:v17 fromRecordId:v18];

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
      }
      while (v9);
    }

    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obja = [v35 emailAddresses];
    uint64_t v19 = [obja countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v37;
      do
      {
        uint64_t v22 = 0;
        do
        {
          if (*(void *)v37 != v21) {
            objc_enumerationMutation(obja);
          }
          double v23 = *(void **)(*((void *)&v36 + 1) + 8 * v22);
          double v24 = (void *)MEMORY[0x1CB79B230]();
          if (v7)
          {
            double v25 = [MEMORY[0x1E4F5DA40] encodedStringForFullName:v7];
          }
          else
          {
            double v25 = 0;
          }
          long long v26 = *(void **)(v34 + 40);
          long long v27 = [v23 emailAddress];
          long long v28 = SGNormalizeEmailAddress();
          long long v29 = [v35 recordId];
          [v26 setValue:v25 forKey:v28 fromRecordId:v29];

          ++v22;
        }
        while (v20 != v22);
        uint64_t v20 = [obja countByEnumeratingWithState:&v36 objects:v44 count:16];
      }
      while (v20);
    }

    uint64_t v5 = v31;
    id v3 = v35;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }

  return v5;
}

- (id)suggestContactMatchesByContactDetailTag:(id)a3 matchType:(int64_t)a4
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (([v7 isContactDetail] & 1) == 0)
  {
    long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
    [v29 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2404, @"Invalid parameter not satisfying: %@", @"contactDetailTag.isContactDetail" object file lineNumber description];
  }
  unsigned int v31 = objc_opt_new();
  v39[0] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:1];
  uint64_t v9 = [(SGSqlEntityStore *)self duplicateKeysMatchingAnyTag:v8];
  long long v30 = v7;
  uint64_t v10 = [v9 objectForKeyedSubscript:v7];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v10;
  uint64_t v11 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v34 != v13) {
          objc_enumerationMutation(obj);
        }
        long long v15 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        [v15 entityType];
        if (SGEntityTypeIsContact())
        {
          uint64_t v16 = [v15 identityKey];
          int64_t v17 = -[SGSqlEntityStore contactMatchedRecordTypeFromIdentityKeyType:](self, "contactMatchedRecordTypeFromIdentityKeyType:", [v16 type]);

          if (!a4) {
            goto LABEL_13;
          }
        }
        else
        {
          int64_t v17 = -[SGSqlEntityStore contactMatchedRecordTypeFromEntityType:](self, "contactMatchedRecordTypeFromEntityType:", [v15 entityType]);
          if (!a4) {
            goto LABEL_13;
          }
        }
        if (v17 != a4) {
          continue;
        }
LABEL_13:
        uint64_t v18 = [(SGSqlEntityStore *)self loadEntityByKey:v15];
        uint64_t v19 = [v18 recordId];
        [v15 entityType];
        if (SGEntityTypeIsContact()) {
          uint64_t v20 = [v19 internalEntityId];
        }
        else {
          uint64_t v20 = [v18 masterEntityId];
        }
        uint64_t v21 = [MEMORY[0x1E4F5DB20] recordIdForContactWithRowId:v20];
        uint64_t v22 = [(SGSqlEntityStore *)self suggestContactByRecordId:v21];

        double v23 = [v22 detailForRecordId:v19];

        if (v23)
        {
          if (!v22 || !v19) {
            goto LABEL_22;
          }
          v37[0] = v22;
          v37[1] = v19;
          double v24 = [NSNumber numberWithLongLong:v17];
          v37[2] = v24;
          double v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:3];
          [v31 addObject:v25];
        }
        else
        {
          double v25 = v22;
          double v24 = v19;
          uint64_t v22 = 0;
          uint64_t v19 = 0;
        }

LABEL_22:
      }
      uint64_t v12 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v12);
  }

  long long v26 = +[SGDeduper bucketerWithMapping:&__block_literal_global_386];
  long long v27 = +[SGDeduper dedupe:v31 bucketer:v26 resolver:&__block_literal_global_389_27067];

  return v27;
}

id __70__SGSqlEntityStore_suggestContactMatchesByContactDetailTag_matchType___block_invoke_2(uint64_t a1, void *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a2 firstObject];
  v5[0] = v2;
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:1];

  return v3;
}

id __70__SGSqlEntityStore_suggestContactMatchesByContactDetailTag_matchType___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 objectAtIndexedSubscript:0];
  id v3 = NSNumber;
  uint64_t v4 = [v2 recordId];
  uint64_t v5 = objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "rowId"));

  return v5;
}

- (id)suggestContactMatchesByContactDetailTag:(id)a3
{
  return [(SGSqlEntityStore *)self suggestContactMatchesByContactDetailTag:a3 matchType:0];
}

- (int64_t)entityTypeFromIdentityKeyType:(unint64_t)a3
{
  if (a3 > 5) {
    return 8;
  }
  else {
    return qword_1CA8D0E58[a3];
  }
}

- (int64_t)contactMatchedRecordTypeFromIdentityKeyType:(unint64_t)a3
{
  if (a3 > 5) {
    return 3;
  }
  else {
    return qword_1CA8D0E28[a3];
  }
}

- (int64_t)contactMatchedRecordTypeFromEntityType:(int64_t)a3
{
  if ((unint64_t)a3 > 0x1B) {
    return 0;
  }
  else {
    return qword_1CA8D0D48[a3];
  }
}

- (id)suggestContactByRecordId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  if ([v8 tableId])
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "suggestContactByRecordId received recordId from wrong table: %@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v10 = 0;
  }
  else
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v18 = 0x3032000000;
    uint64_t v19 = __Block_byref_object_copy__26977;
    uint64_t v20 = __Block_byref_object_dispose__26978;
    id v21 = 0;
    db = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke;
    void v15[3] = &unk_1E65C0388;
    id v16 = v8;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke_2;
    void v14[3] = &unk_1E65C03F8;
    void v14[4] = &buf;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE id = :entityId" onPrep:v15 onRow:v14 onError:0];
    uint64_t v12 = *(void *)(*((void *)&buf + 1) + 40);
    if (v12)
    {
      uint64_t v10 = [(SGSqlEntityStore *)self _contactForMasterEntityId:v12 withSnippets:v6 filterConfirmRejectDetails:v5];
    }
    else
    {
      uint64_t v10 = 0;
    }

    _Block_object_dispose(&buf, 8);
  }

  return v10;
}

void __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));
}

uint64_t __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getInt64AsNSNumberForColumn:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *MEMORY[0x1E4F93C08];
}

- (id)suggestContactByRecordId:(id)a3
{
  return [(SGSqlEntityStore *)self suggestContactByRecordId:a3 withSnippets:1 filterConfirmRejectDetails:1];
}

- (id)storageContactByRecordId:(id)a3 withSnippets:(BOOL)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if ([v6 tableId])
  {
    id v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "suggestContactByRecordId received recordId from wrong table: %@", (uint8_t *)&buf, 0xCu);
    }

    id v8 = 0;
  }
  else
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = __Block_byref_object_copy__26977;
    uint64_t v19 = __Block_byref_object_dispose__26978;
    id v20 = 0;
    db = self->_db;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke;
    v11[3] = &unk_1E65BAC10;
    void v11[4] = self;
    uint64_t v12 = @"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE id = :entityId";
    id v13 = v6;
    p_long long buf = &buf;
    BOOL v15 = a4;
    [(SGSqliteDatabase *)db readTransaction:v11];
    id v8 = *(id *)(*((void *)&buf + 1) + 40);

    _Block_object_dispose(&buf, 8);
  }

  return v8;
}

void __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke_2;
  v9[3] = &unk_1E65C0388;
  id v10 = *(id *)(a1 + 48);
  uint64_t v4 = [v2 masterEntityIDsForMasterEntityQuery:v3 bindings:v9];
  if ([v4 count] != 1) {
    __assert_rtn("-[SGSqlEntityStore storageContactByRecordId:withSnippets:]_block_invoke", "SGSqlEntityStore.m", 2290, "masterEntityIds.count==1");
  }
  BOOL v5 = [v4 firstObject];
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "storageContactByMasterEntityId:withSnippets:", objc_msgSend(v5, "longLongValue"), *(unsigned __int8 *)(a1 + 64));
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));
}

- (id)suggestContactByIdentityKey:(id)a3 parentKey:(id)a4
{
  id v6 = a3;
  uint64_t v7 = 0;
  switch([v6 type])
  {
    case 0:
      id v8 = [MEMORY[0x1E4F28B00] currentHandler];
      [v8 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore.m" lineNumber:2273 description:@"Uninitialized identity key"];
      uint64_t v7 = 0;
      goto LABEL_5;
    case 1:
    case 4:
    case 5:
      id v8 = +[SGDuplicateKey duplicateKeyForPseudoContactWithIdentity:v6 parentKey:0];
      uint64_t v7 = [(SGSqlEntityStore *)self suggestContactByKey:v8];
      goto LABEL_5;
    case 2:
      id v8 = [v6 externalId];
      uint64_t v9 = +[SGDuplicateKey duplicateKeyForCuratedEventWithExternalID:v8];
      uint64_t v7 = [(SGSqlEntityStore *)self suggestContactByKey:v9];

LABEL_5:
      break;
    default:
      break;
  }

  return v7;
}

- (id)suggestContactByKey:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2236, @"Invalid parameter not satisfying: %@", @"key" object file lineNumber description];
  }
  id v6 = [v5 parentKey];

  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1CB79B230]();
    [@"SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey AND ep.extractionType != :messagesMeCard" stringByAppendingString:@" AND ep.parentKey = :parentKey"];
    id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v8 = @"SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey AND ep.extractionType != :messagesMeCard";
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __40__SGSqlEntityStore_suggestContactByKey___block_invoke;
  void v14[3] = &unk_1E65C0388;
  id v15 = v5;
  id v9 = v5;
  id v10 = [(SGSqlEntityStore *)self suggestContactsByMasterEntityQuery:v8 limit:1 bindings:v14];
  if ([v10 count])
  {
    uint64_t v11 = [v10 objectAtIndexedSubscript:0];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void __40__SGSqlEntityStore_suggestContactByKey___block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  objc_msgSend(v8, "bindNamedParam:toInt64:", ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  id v3 = [*(id *)(a1 + 32) entityKey];
  uint64_t v4 = [v3 serialize];
  [v8 bindNamedParam:":entityKey" toNSString:v4];

  id v5 = [*(id *)(a1 + 32) parentKey];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) parentKey];
    uint64_t v7 = [v6 serialize];
    [v8 bindNamedParam:":parentKey" toNSString:v7];
  }
  [v8 bindNamedParam:":messagesMeCard" toInt64:64];
}

- (id)storageContactByKey:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2209, @"Invalid parameter not satisfying: %@", @"key" object file lineNumber description];
  }
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x3032000000;
  uint64_t v22 = __Block_byref_object_copy__26977;
  double v23 = __Block_byref_object_dispose__26978;
  id v24 = 0;
  id v6 = [v5 parentKey];

  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1CB79B230]();
    [@"SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey" stringByAppendingString:@" AND ep.parentKey = :parentKey"];
    id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v8 = @"SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey";
  }
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __40__SGSqlEntityStore_storageContactByKey___block_invoke;
  void v15[3] = &unk_1E65BE418;
  void v15[4] = self;
  id v10 = v8;
  id v16 = v10;
  id v11 = v5;
  id v17 = v11;
  uint64_t v18 = &v19;
  [(SGSqliteDatabase *)db readTransaction:v15];
  id v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v12;
}

void __40__SGSqlEntityStore_storageContactByKey___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __40__SGSqlEntityStore_storageContactByKey___block_invoke_2;
  v9[3] = &unk_1E65C0388;
  id v10 = *(id *)(a1 + 48);
  uint64_t v4 = [v2 masterEntityIDsForMasterEntityQuery:v3 bindings:v9];
  id v5 = [v4 firstObject];
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "storageContactByMasterEntityId:withSnippets:", objc_msgSend(v5, "longLongValue"), 1);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void __40__SGSqlEntityStore_storageContactByKey___block_invoke_2(uint64_t a1, void *a2)
{
  id v8 = a2;
  objc_msgSend(v8, "bindNamedParam:toInt64:", ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  uint64_t v3 = [*(id *)(a1 + 32) entityKey];
  uint64_t v4 = [v3 serialize];
  [v8 bindNamedParam:":entityKey" toNSString:v4];

  id v5 = [*(id *)(a1 + 32) parentKey];

  if (v5)
  {
    uint64_t v6 = [*(id *)(a1 + 32) parentKey];
    uint64_t v7 = [v6 serialize];
    [v8 bindNamedParam:":parentKey" toNSString:v7];
  }
}

- (id)suggestContactMatchesBySocialProfile:(id)a3
{
  return [(SGSqlEntityStore *)self suggestContactMatchesBySocialProfile:a3 isMaybe:0 onlySignificant:1];
}

- (id)suggestContactMatchesBySocialProfile:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v9 = a3;
  if (!v9)
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    [v17 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2187, @"Invalid parameter not satisfying: %@", @"socialProfile" object file lineNumber description];
  }
  id v10 = [[SGSocialProfileDetails alloc] initWithSocialProfile:v9];
  id v11 = [v9 bundleIdentifier];
  if (![v11 length])
  {
    id v13 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:

    goto LABEL_10;
  }
  id v12 = [v9 username];
  if ([v12 length])
  {

LABEL_8:
    id v11 = [(SGSocialProfileDetails *)v10 preferredUniqueIdentifier];
    SGNormalizeSocialProfile(v11);
    objc_claimAutoreleasedReturnValue();

    id v13 = [(SGSqlEntityStore *)self suggestContactMatchesByType:5 searchString:v11 isMaybe:v6 onlySignificant:v5];
    goto LABEL_9;
  }
  uint64_t v14 = [v9 userIdentifier];
  uint64_t v15 = [v14 length];

  if (v15) {
    goto LABEL_8;
  }
  id v13 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_10:

  return v13;
}

- (id)suggestContactMatchesByEmailAddress:(id)a3
{
  return [(SGSqlEntityStore *)self suggestContactMatchesByEmailAddress:a3 isMaybe:0 onlySignificant:1];
}

- (id)suggestContactMatchesByEmailAddress:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = SGNormalizeEmailAddress();
  id v9 = [(SGSqlEntityStore *)self suggestContactMatchesByType:3 searchString:v8 isMaybe:v6 onlySignificant:v5];

  return v9;
}

- (id)suggestContactMatchesByPhoneNumber:(id)a3
{
  return [(SGSqlEntityStore *)self suggestContactMatchesByPhoneNumber:a3 isMaybe:0 onlySignificant:1];
}

- (id)suggestContactMatchesByPhoneNumber:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = SGNormalizePhoneNumber();
  id v9 = [(SGSqlEntityStore *)self suggestContactMatchesByType:2 searchString:v8 isMaybe:v6 onlySignificant:v5];

  return v9;
}

- (id)suggestContactMatchesByType:(int64_t)a3 searchString:(id)a4 isMaybe:(BOOL)a5 onlySignificant:(BOOL)a6
{
  id v10 = a4;
  if (!v10)
  {
    uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 2111, @"Invalid parameter not satisfying: %@", @"searchString" object file lineNumber description];
  }
  if ([(SGSqlEntityStore *)self _isStringInNoContactsCache:v10])
  {
    id v11 = (id)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v27 = 0;
    long long v28 = &v27;
    uint64_t v29 = 0x3032000000;
    long long v30 = __Block_byref_object_copy__26977;
    unsigned int v31 = __Block_byref_object_dispose__26978;
    id v32 = 0;
    uint64_t v23 = 0;
    id v24 = &v23;
    uint64_t v25 = 0x2020000000;
    char v26 = 1;
    db = self->_db;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke;
    v16[3] = &unk_1E65BABE8;
    void v16[4] = self;
    id v13 = v10;
    id v17 = v13;
    uint64_t v18 = &v27;
    int64_t v20 = a3;
    SEL v21 = a2;
    BOOL v22 = a6;
    uint64_t v19 = &v23;
    [(SGSqliteDatabase *)db readTransaction:v16];
    if (*((unsigned char *)v24 + 24)) {
      [(SGSqlEntityStore *)self _addStringToNoContactsCache:v13];
    }
    id v11 = (id)v28[5];

    _Block_object_dispose(&v23, 8);
    _Block_object_dispose(&v27, 8);
  }
  return v11;
}

void __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [MEMORY[0x1E4F5D9F0] contactDetail:*(void *)(a1 + 40)];
  uint64_t v4 = [v2 suggestContactMatchesByContactDetailTag:v3 matchType:*(void *)(a1 + 64)];

  id v8 = *(id *)(a1 + 40);
  uint64_t v5 = sgMapAndFilter();
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 count] != 3)
  {
    int64_t v20 = [MEMORY[0x1E4F28B00] currentHandler];
    [v20 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore.m" lineNumber:2122 description:@"Invalid response from suggestContactMatchesByContactDetailTag"];
  }
  uint64_t v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = [v3 objectAtIndexedSubscript:1];
  uint64_t v6 = [v3 objectAtIndexedSubscript:2];

  uint64_t v7 = [v6 longValue];
  unsigned __int8 v8 = [v4 containsSuggestions];
  if (*(unsigned char *)(a1 + 64) && [v4 significanceOrigin] != 2)
  {
    int v15 = [*(id *)(a1 + 32) contactIsSignificantOrSignificanceIsDisabled:v4 usingCoreRecents:0];
    BOOL v10 = v15;
    char v9 = v8 ^ 1;
    if (((v8 ^ 1) & 1) == 0 && (v15 & 1) == 0)
    {
      id v16 = +[SGContactStoreFactory contactStore];
      id v21 = 0;
      id v17 = +[SGCuratedContactMatcher curatedContactsFromContactStore:v16 matchingPseudoContact:v4 error:&v21];
      id v18 = v21;

      if (v17)
      {
        BOOL v10 = [v17 count] != 0;
      }
      else
      {
        uint64_t v19 = sgLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v24 = v18;
          _os_log_error_impl(&dword_1CA650000, v19, OS_LOG_TYPE_ERROR, "Error retrieving curated contacts: %@", buf, 0xCu);
        }

        BOOL v10 = 0;
      }

      char v9 = 0;
    }
  }
  else
  {
    char v9 = v8 ^ 1;
    BOOL v10 = 1;
  }
  id v11 = 0;
  if ((v9 & 1) == 0 && v10)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    id v12 = objc_alloc(MEMORY[0x1E4F5D9B8]);
    uint64_t v22 = *(void *)(a1 + 40);
    id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
    id v11 = (void *)[v12 initWithContact:v4 matchingRecordId:v5 matchType:v7 matchTokens:v13];
  }
  return v11;
}

- (id)allContactsMasterEntityIdsLimitedTo:(unint64_t)a3
{
  uint64_t v5 = [(SGSqlEntityStore *)self _queryForAllContactsWithLimit];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __56__SGSqlEntityStore_allContactsMasterEntityIdsLimitedTo___block_invoke;
  void v8[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v8[4] = a3;
  uint64_t v6 = [(SGSqlEntityStore *)self masterEntityIDsForMasterEntityQuery:v5 bindings:v8];

  return v6;
}

void __56__SGSqlEntityStore_allContactsMasterEntityIdsLimitedTo___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":pseudo" toInt64:4];
  [v3 bindNamedParam:":limit" toInt64:*(void *)(a1 + 32)];
}

- (id)allContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4
{
  BOOL v5 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_opt_new();
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_allContactsWithSnippets_limitTo___block_invoke;
  v12[3] = &unk_1E65BA8C0;
  id v8 = v7;
  id v13 = v8;
  [(SGSqlEntityStore *)self enumerateAllContactsWithSnippets:v5 limitTo:a4 usingBlock:v12];
  char v9 = sgLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = [v8 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v15 = v11;
    _os_log_debug_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEBUG, "Matched %tu contacts", buf, 0xCu);
  }

  return v8;
}

uint64_t __52__SGSqlEntityStore_allContactsWithSnippets_limitTo___block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

- (id)allContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = a3;
  id v8 = objc_opt_new();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __73__SGSqlEntityStore_allContactsWithExtractionStartDate_extractionEndDate___block_invoke;
  void v13[3] = &unk_1E65BA8C0;
  id v9 = v8;
  id v14 = v9;
  [(SGSqlEntityStore *)self enumerateAllContactsWithExtractionStartDate:v7 extractionEndDate:v6 withSnippets:1 limitTo:100000 usingBlock:v13];

  BOOL v10 = sgLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = [v9 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v16 = v12;
    _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "Matched birthday extraction for %tu contacts", buf, 0xCu);
  }

  return v9;
}

uint64_t __73__SGSqlEntityStore_allContactsWithExtractionStartDate_extractionEndDate___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 birthday];

  if (v4) {
    [*(id *)(a1 + 32) addObject:v3];
  }

  return 1;
}

- (void)enumerateAllContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4 usingBlock:(id)a5
{
  BOOL v6 = a3;
  id v8 = a5;
  id v9 = [(SGSqlEntityStore *)self _queryForAllContactsWithLimit];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __72__SGSqlEntityStore_enumerateAllContactsWithSnippets_limitTo_usingBlock___block_invoke;
  void v10[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v10[4] = a4;
  [(SGSqlEntityStore *)self enumerateContactsByMasterEntityQuery:v9 withSnippets:v6 limit:a4 bindings:v10 usingBlock:v8];
}

void __72__SGSqlEntityStore_enumerateAllContactsWithSnippets_limitTo_usingBlock___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 bindNamedParam:":pseudo" toInt64:4];
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = 30;
  if (v3 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v4 = -1;
  }
  if (v4 >= v3) {
    unint64_t v5 = *(void *)(a1 + 32);
  }
  else {
    unint64_t v5 = v4;
  }
  [v6 bindNamedParam:":limit" toInt64:v5];
}

- (void)enumerateAllContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4 withSnippets:(BOOL)a5 limitTo:(unint64_t)a6 usingBlock:(id)a7
{
  BOOL v8 = a5;
  id v12 = a7;
  id v13 = a4;
  [a3 timeIntervalSince1970];
  uint64_t v15 = v14;
  [v13 timeIntervalSince1970];
  uint64_t v17 = v16;

  id v18 = [(SGSqlEntityStore *)self _queryForAllContactsWithExtractionDates];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __114__SGSqlEntityStore_enumerateAllContactsWithExtractionStartDate_extractionEndDate_withSnippets_limitTo_usingBlock___block_invoke;
  void v19[3] = &__block_descriptor_56_e29_v16__0___PASSqliteStatement_8l;
  void v19[4] = a6;
  void v19[5] = v15;
  v19[6] = v17;
  [(SGSqlEntityStore *)self enumerateContactsByMasterEntityQuery:v18 withSnippets:v8 limit:a6 bindings:v19 usingBlock:v12];
}

void __114__SGSqlEntityStore_enumerateAllContactsWithExtractionStartDate_extractionEndDate_withSnippets_limitTo_usingBlock___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 bindNamedParam:":pseudo" toInt64:4];
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = 30;
  if (v3 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v4 = -1;
  }
  if (v4 >= v3) {
    unint64_t v5 = *(void *)(a1 + 32);
  }
  else {
    unint64_t v5 = v4;
  }
  [v6 bindNamedParam:":limit" toInt64:v5];
  [v6 bindNamedParam:":creationTimeStart" toDouble:*(double *)(a1 + 40)];
  [v6 bindNamedParam:":creationTimeEnd" toDouble:*(double *)(a1 + 48)];
}

- (id)_queryForAllContactsWithExtractionDates
{
  return @"SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe AND creationTimeStamp <= :creationTimeEnd AND creationTimeStamp > :creationTimeStart ORDER BY creationTimestamp DESC LIMIT :limit ";
}

- (id)_queryForAllContactsWithLimit
{
  return @"SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe ORDER BY entity.id DESC LIMIT :limit ";
}

- (id)_matchableUTF8TokenRangesInMatchExpression:(id)a3
{
  id v5 = a3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke;
  block[3] = &unk_1E65BF9C0;
  void block[4] = self;
  void block[5] = a2;
  if (_matchableUTF8TokenRangesInMatchExpression__onceToken != -1) {
    dispatch_once(&_matchableUTF8TokenRangesInMatchExpression__onceToken, block);
  }
  if (_matchableUTF8TokenRangesInMatchExpression__tokenizerLock)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x3032000000;
    id v18 = __Block_byref_object_copy__26977;
    uint64_t v19 = __Block_byref_object_dispose__26978;
    id v20 = 0;
    id v20 = (id)objc_opt_new();
    id v6 = (void *)MEMORY[0x1CB79B230]();
    id v7 = (void *)_matchableUTF8TokenRangesInMatchExpression__tokenizerLock;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_329;
    void v10[3] = &unk_1E65BAB78;
    id v11 = v5;
    id v12 = self;
    id v13 = &v15;
    SEL v14 = a2;
    [v7 runWithLockAcquired:v10];

    id v8 = (id)v16[5];
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F93BA0] sqliteDatabaseWithFilename:@":memory:" contentProtection:0 errorHandler:0 error:0];
  uint64_t v25 = 0;
  char v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v28 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_3;
  void v24[3] = &unk_1E65C03F8;
  void v24[4] = &v25;
  [v2 prepAndRunQuery:@"SELECT fts3_tokenizer(:tokenizerName)" onPrep:&__block_literal_global_305 onRow:v24 onError:&__block_literal_global_312_27132];
  StatementUsingCurrentLanguage = (void *)ITSCopyFTSTableCreateStatementUsingCurrentLanguage();
  id v23 = 0;
  unint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28FD8]), "initWithPattern:options:error:", @"\\(\\s*tokenize=ab_cf_tokenizer\\s+language=\"([^\\\"]*?)\"\\s+collator=\"([^\\\"]*?)\","), 0, &v23;
  id v5 = v23;
  if (v5)
  {
    id v21 = [MEMORY[0x1E4F28B00] currentHandler];
    [v21 handleFailureInMethod:*(void *)(a1 + 40), *(void *)(a1 + 32), @"SGSqlEntityStore.m", 1952, @"error instantiating argumentsPattern: %@", v5 object file lineNumber description];
  }
  id v6 = objc_msgSend(v4, "firstMatchInString:options:range:", StatementUsingCurrentLanguage, 0, 0, objc_msgSend(StatementUsingCurrentLanguage, "length"));
  if (v6)
  {
    uint64_t v22 = 0;
    id v7 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v8 = [v6 rangeAtIndex:1];
    objc_msgSend(StatementUsingCurrentLanguage, "substringWithRange:", v8, v9);
    id v10 = objc_claimAutoreleasedReturnValue();
    uint64_t v11 = [v10 UTF8String];

    uint64_t v12 = [v6 rangeAtIndex:2];
    objc_msgSend(StatementUsingCurrentLanguage, "substringWithRange:", v12, v13);
    id v14 = objc_claimAutoreleasedReturnValue();
    uint64_t v15 = [v14 UTF8String];

    *(void *)&long long buf = "language";
    *((void *)&buf + 1) = v11;
    long long v30 = "collator";
    uint64_t v31 = v15;
    (*(void (**)(uint64_t, long long *, void **))(v26[3] + 8))(4, &buf, &v22);
    *uint64_t v22 = v26[3];
    uint64_t v16 = v22;
    uint64_t v17 = objc_opt_new();
    objc_storeStrong((id *)(v17 + 8), v2);
    *(void *)(v17 + 16) = v26[3];
    *(void *)(v17 + 24) = v16;
    uint64_t v18 = [objc_alloc(MEMORY[0x1E4F93B70]) initWithGuardedData:v17];
    uint64_t v19 = (void *)_matchableUTF8TokenRangesInMatchExpression__tokenizerLock;
    _matchableUTF8TokenRangesInMatchExpression__tokenizerLocuint64_t k = v18;
  }
  else
  {
    id v20 = sgLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = StatementUsingCurrentLanguage;
      _os_log_fault_impl(&dword_1CA650000, v20, OS_LOG_TYPE_FAULT, "Could not parse createQuery %@", (uint8_t *)&buf, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }

  _Block_object_dispose(&v25, 8);
}

void __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_329(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = [*(id *)(a1 + 32) dataUsingEncoding:4];
  uint64_t v18 = 0;
  uint64_t v5 = v3[3];
  id v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v3[2] + 24);
  id v7 = v4;
  v6(v5, [v7 bytes], objc_msgSend(v7, "length"), &v18);
  void *v18 = v3[3];
  while (1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    int v8 = (*(uint64_t (**)(void *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(v3[2] + 40))(v18, &v17, (char *)&v16 + 4, &v16, (char *)&v15 + 4, &v15);
    if (v8) {
      break;
    }
    if (SHIDWORD(v15) < (int)v16)
    {
      uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
      [v12 handleFailureInMethod:*(void *)(a1 + 56), *(void *)(a1 + 40), @"SGSqlEntityStore.m", 2000, @"Invalid parameter not satisfying: %@", @"end >= start" object file lineNumber description];
    }
    uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v10 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", (int)v16, SHIDWORD(v15) - (uint64_t)(int)v16);
    [v9 addObject:v11];
  }
  if (v8 != 101)
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;
  }
  (*(void (**)(void *))(v3[2] + 32))(v18);
  (*(void (**)(void, const char *, void, void **))(v3[2] + 24))(v3[3], "", 0, &v18);
  void *v18 = v3[3];
  (*(void (**)(void *))(v3[2] + 32))(v18);
}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (sqlite3_column_bytes((sqlite3_stmt *)[v3 stmt], 0) == 8)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v4 + 24) = *(void *)sqlite3_column_blob((sqlite3_stmt *)[v3 stmt], 0);
  }
  else
  {
    uint64_t v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_fault_impl(&dword_1CA650000, v5, OS_LOG_TYPE_FAULT, "tokenizer size mismatch", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
  id v6 = (unsigned __int8 *)MEMORY[0x1E4F93C10];

  return *v6;
}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_310(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_fault_impl(&dword_1CA650000, v3, OS_LOG_TYPE_FAULT, "something went wrong while getting tokenizer: %@", (uint8_t *)&v5, 0xCu);
  }

  if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
    abort();
  }

  return *MEMORY[0x1E4F93C10];
}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":tokenizerName" toNSString:@"ab_cf_tokenizer"];
}

- (id)suggestContactMatchesWithFullTextSearch:(id)a3 limitTo:(unint64_t)a4
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!v7)
  {
    long long v36 = [MEMORY[0x1E4F28B00] currentHandler];
    [v36 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 1833, @"Invalid parameter not satisfying: %@", @"query" object file lineNumber description];
  }
  if ([v7 length])
  {
    int v8 = +[SGTokenizer ftsTokenize:v7];
    if ((unint64_t)[v8 count] >= 0x7D1)
    {
      uint64_t v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v54 = [v8 count];
        __int16 v55 = 1024;
        int v56 = 2000;
        _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "Got %llu FTS tokens, truncating to first %i", buf, 0x12u);
      }

      id v10 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v11 = objc_msgSend(v8, "subarrayWithRange:", 0, 2000);

      int v8 = (void *)v11;
    }
    uint64_t v12 = sgMap();
    uint64_t v13 = (void *)MEMORY[0x1CB79B230]();
    id v14 = objc_msgSend(v12, "_pas_componentsJoinedByString:", @" ");
    uint64_t v15 = [(SGSqlEntityStore *)self _matchableUTF8TokenRangesInMatchExpression:v14];
    id v16 = (id)MEMORY[0x1E4F1CBF0];
    if (v15)
    {
      long long v39 = v12;
      uint64_t v17 = (void *)MEMORY[0x1CB79B230]();
      uint64_t v18 = [v14 dataUsingEncoding:4];
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 3221225472;
      v51[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2;
      v51[3] = &unk_1E65BAB50;
      id v37 = v18;
      long long v38 = v15;
      id v52 = v37;
      uint64_t v19 = objc_msgSend(v15, "_pas_mappedArrayWithTransform:", v51);
      id v20 = objc_opt_new();
      unint64_t v21 = a4;
      uint64_t v22 = objc_opt_new();
      db = self->_db;
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_295;
      v49[3] = &unk_1E65C0388;
      id v50 = v14;
      v44[0] = MEMORY[0x1E4F143A8];
      v44[1] = 3221225472;
      v44[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2_296;
      v44[3] = &unk_1E65BAB00;
      void v44[4] = self;
      id v24 = v20;
      id v45 = v24;
      id v25 = v22;
      id v46 = v25;
      unint64_t v48 = v21;
      id v26 = v19;
      id v47 = v26;
      [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , entity_fts.docid, entity_fts.entityId, matchinfo(entity_fts, \"pcb\")    FROM entity_fts CROSS JOIN entity ON entity_fts.entityId = entity.id    WHERE entity_fts MATCH :match        AND entity.entityType = :pseudo        AND NOT hasInhumanTag(entity.tags)        AND NOT entity.curatedDupe" onPrep:v49 onRow:v44 onError:0];
      uint64_t v27 = [v24 allKeys];
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      void v40[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_3;
      v40[3] = &unk_1E65BAB28;
      id v41 = v24;
      id v42 = v26;
      id v43 = v25;
      id v28 = v25;
      id v29 = v26;
      id v30 = v24;
      uint64_t v31 = objc_msgSend(v27, "_pas_mappedArrayWithTransform:", v40);

      uint64_t v32 = sgLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = [v31 count];
        *(_DWORD *)long long buf = 134217984;
        uint64_t v54 = v35;
        _os_log_debug_impl(&dword_1CA650000, v32, OS_LOG_TYPE_DEBUG, "After filtering, %lu contacts", buf, 0xCu);
      }

      if (v31) {
        long long v33 = v31;
      }
      else {
        long long v33 = v16;
      }
      id v16 = v33;

      uint64_t v15 = v38;
      uint64_t v12 = v39;
    }
  }
  else
  {
    id v16 = (id)MEMORY[0x1E4F1CBF0];
  }

  return v16;
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  NSUInteger v4 = [v3 rangeValue];
  NSUInteger v6 = v5;
  if (v4 + v5 <= [*(id *)(a1 + 32) length])
  {
    uint64_t v9 = (void *)MEMORY[0x1CB79B230]();
    int v8 = objc_msgSend([NSString alloc], "initWithBytes:length:encoding:", objc_msgSend(*(id *)(a1 + 32), "bytes") + v4, v6, 4);
  }
  else
  {
    id v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v19.locatiouint64_t n = v4;
      v19.length = v6;
      uint64_t v11 = NSStringFromRange(v19);
      uint64_t v12 = [*(id *)(a1 + 32) length];
      int v13 = 138412546;
      id v14 = v11;
      __int16 v15 = 2048;
      uint64_t v16 = v12;
      _os_log_fault_impl(&dword_1CA650000, v7, OS_LOG_TYPE_FAULT, "got out of bounds token range: %@ in UTF8 of size %tu", (uint8_t *)&v13, 0x16u);
    }
    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
    int v8 = 0;
  }

  return v8;
}

void __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_295(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":pseudo" toInt64:4];
  [v3 bindNamedParam:":match" toNSString:*(void *)(a1 + 32)];
}

uint64_t __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2_296(uint64_t a1, void *a2)
{
  id v3 = NSNumber;
  id v4 = a2;
  NSUInteger v5 = objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  NSUInteger v6 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  id v7 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 2));
  int v8 = [v4 getNSDataForColumn:3];

  unint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 30;
  if (v9 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v10 = -1;
  }
  if (v10 >= v9) {
    unint64_t v11 = *(void *)(a1 + 64);
  }
  else {
    unint64_t v11 = v10;
  }
  LOBYTE(v14) = 1;
  uint64_t v12 = [*(id *)(a1 + 32) _processContactMatchWithContacts:*(void *)(a1 + 40) matches:*(void *)(a1 + 48) limit:v11 masterEntityId:v5 detailEntityId:v6 contactEntityId:v7 matchinfoData:v8 tokens:*(void *)(a1 + 56) requireName:v14];

  return v12;
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F5D9B8];
  id v4 = a2;
  id v5 = [v3 alloc];
  NSUInteger v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:v4];

  unint64_t v9 = (void *)[v5 initWithContact:v6 matchTokens:v7 matchInfo:v8];
  return v9;
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = (void *)[[v2 alloc] initWithFormat:@"%@*", v3];

  return v4;
}

- (id)suggestContactMatchesWithMessagingPrefix:(id)a3 limitTo:(unint64_t)a4
{
  v50[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!v7)
  {
    id v29 = [MEMORY[0x1E4F28B00] currentHandler];
    [v29 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 1726, @"Invalid parameter not satisfying: %@", @"prefix" object file lineNumber description];
  }
  v50[0] = v7;
  int v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:1];
  unint64_t v9 = +[SGTokenizer ftsPrefix:v7];
  if ([v9 isEqualToString:@"\"*\""])
  {
    unint64_t v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEFAULT, "Tried to get contacts with empty messaging prefix.", buf, 2u);
    }
    id v11 = (id)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v12 = objc_opt_new();
    int v13 = objc_opt_new();
    db = self->_db;
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke;
    v46[3] = &unk_1E65C0388;
    id v47 = v9;
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_2;
    v41[3] = &unk_1E65BAB00;
    void v41[4] = self;
    id v15 = v12;
    id v42 = v15;
    id v16 = v13;
    id v43 = v16;
    unint64_t v45 = a4;
    id v17 = v8;
    id v44 = v17;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , docid, entityId, matchinfo(entity_fts, \"pcb\") AS matchinfoData FROM entity_fts CROSS JOIN entity ON entity.id = entityId WHERE entity_fts.messagingTerms MATCH :match    AND entity.entityType = :pseudo   AND NOT hasInhumanTag(entity.tags)    AND NOT entity.curatedDupe" onPrep:v46 onRow:v41 onError:0];
    uint64_t v18 = self->_db;
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    void v39[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_3;
    void v39[3] = &unk_1E65BFF28;
    void v39[4] = self;
    id v40 = v7;
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_4;
    v34[3] = &unk_1E65BAB00;
    void v34[4] = self;
    id v19 = v15;
    id v35 = v19;
    id v20 = v16;
    id v36 = v20;
    unint64_t v38 = a4;
    id v21 = v17;
    id v37 = v21;
    [(SGSqliteDatabase *)v18 prepAndRunSQL:@"WITH matches AS(   SELECT entity.id as id, CASE WHEN entity.entityType = :pseudo OR entity.masterEntityId < 0 THEN entity.id ELSE entity.masterEntityId END as entityId        FROM entityTags CROSS JOIN entity ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType        WHERE entityTags.tag GLOB :tagPrefix) SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , matches.id, matches.entityId FROM matches CROSS JOIN entity ON matches.id = entity.id    WHERE entity.entityType = :pseudo        AND NOT hasInhumanTag(entity.tags)         AND NOT entity.curatedDupe" onPrep:v39 onRow:v34 onError:0];
    uint64_t v22 = [v19 allKeys];
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_5;
    void v30[3] = &unk_1E65BAB28;
    id v31 = v19;
    id v32 = v21;
    id v33 = v20;
    id v23 = v20;
    unint64_t v10 = v19;
    id v24 = objc_msgSend(v22, "_pas_mappedArrayWithTransform:", v30);

    id v25 = sgLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = [v24 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v49 = v28;
      _os_log_debug_impl(&dword_1CA650000, v25, OS_LOG_TYPE_DEBUG, "%lu contacts loaded", buf, 0xCu);
    }

    id v26 = (void *)MEMORY[0x1E4F1CBF0];
    if (v24) {
      id v26 = v24;
    }
    id v11 = v26;
  }
  return v11;
}

void __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 bindNamedParam:":match" toNSString:v2];
  [v3 bindNamedParam:":pseudo" toInt64:4];
}

uint64_t __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = NSNumber;
  id v4 = a2;
  id v5 = objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  NSUInteger v6 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  id v7 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 2));
  int v8 = [v4 getNSDataForColumn:3];

  unint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 30;
  if (v9 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v10 = -1;
  }
  if (v10 >= v9) {
    unint64_t v11 = *(void *)(a1 + 64);
  }
  else {
    unint64_t v11 = v10;
  }
  LOBYTE(v14) = 0;
  uint64_t v12 = [*(id *)(a1 + 32) _processContactMatchWithContacts:*(void *)(a1 + 40) matches:*(void *)(a1 + 48) limit:v11 masterEntityId:v5 detailEntityId:v6 contactEntityId:v7 matchinfoData:v8 tokens:*(void *)(a1 + 56) requireName:v14];

  return v12;
}

void __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  id v8 = a2;
  uint64_t v2 = objc_opt_class();
  id v3 = (void *)MEMORY[0x1E4F5D9F0];
  id v4 = SGNormalizeEmailAddress();
  id v5 = [v3 contactDetail:v4];
  NSUInteger v6 = [v5 name];
  id v7 = [v2 globPrefix:v6];
  [v8 bindNamedParam:":tagPrefix" toNSString:v7];

  [v8 bindNamedParam:":pseudo" toInt64:4];
}

uint64_t __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_4(void *a1, void *a2)
{
  id v3 = NSNumber;
  id v4 = a2;
  id v5 = objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  NSUInteger v6 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  id v7 = NSNumber;
  uint64_t v8 = [v4 getInt64ForColumn:2];

  unint64_t v9 = [v7 numberWithLongLong:v8];
  unint64_t v10 = (void *)a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[8];
  unint64_t v14 = 30;
  if (v13 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v14 = -1;
  }
  if (v14 >= v13) {
    unint64_t v15 = a1[8];
  }
  else {
    unint64_t v15 = v14;
  }
  id v16 = objc_opt_new();
  LOBYTE(v19) = 1;
  uint64_t v17 = [v10 _processContactMatchWithContacts:v11 matches:v12 limit:v15 masterEntityId:v5 detailEntityId:v6 contactEntityId:v9 matchinfoData:v16 tokens:a1[7] requireName:v19];

  return v17;
}

id __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_5(uint64_t a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F5D9B8];
  id v4 = a2;
  id v5 = [v3 alloc];
  NSUInteger v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:v4];

  unint64_t v9 = (void *)[v5 initWithContact:v6 matchTokens:v7 matchInfo:v8];
  return v9;
}

- (_PASDBIterAction_)_processContactMatchWithContacts:(id)a3 matches:(id)a4 limit:(int64_t)a5 masterEntityId:(id)a6 detailEntityId:(id)a7 contactEntityId:(id)a8 matchinfoData:(id)a9 tokens:(id)a10 requireName:(BOOL)a11
{
  v50[1] = *MEMORY[0x1E4F143B8];
  id v17 = a3;
  id v18 = a4;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v23 = a10;
  if ([v17 count] <= (unint64_t)a5)
  {
    if ([v19 longLongValue] < 1
      || [v20 longLongValue] < 1
      || (uint64_t v25 = [v21 longLongValue], !v22)
      || v25 <= 0)
    {
      id v24 = (BOOL *)MEMORY[0x1E4F93C08];
      goto LABEL_12;
    }
    id v26 = [v17 objectForKeyedSubscript:v19];
    if (v26) {
      goto LABEL_8;
    }
    id v30 = [(SGSqlEntityStore *)self _contactForMasterEntityId:v19 withSnippets:1 filterConfirmRejectDetails:1];
    id v31 = v30;
    if (a11
      && ([v30 name],
          uint64_t v49 = objc_claimAutoreleasedReturnValue(),
          [v49 fullName],
          id v32 = objc_claimAutoreleasedReturnValue(),
          uint64_t v45 = [v32 length],
          v32,
          v49,
          !v45))
    {
      v28.var0 = *MEMORY[0x1E4F93C08];
      id v26 = v31;
    }
    else
    {
      id v26 = v31;
      if ([v31 containsDetailSuggestions])
      {
LABEL_8:
        unint64_t v48 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithTableId:rowId:", 0, objc_msgSend(v20, "longLongValue"));
        switch([MEMORY[0x1E4F5DAA8] tokensMatchedDetailTypeForContact:v26 contactEntityId:v21 detailEntityId:v20 matchinfoData:v22 tokens:v23])
        {
          case 1:
          case 4:
            uint64_t v27 = [v26 detailForRecordId:v48];

            if (v27) {
              goto LABEL_22;
            }
            goto LABEL_28;
          case 2:
            id v46 = [v26 recordId];
            id v33 = v48;
            if (![v46 isEqual:v48]) {
              goto LABEL_21;
            }

            goto LABEL_22;
          case 5:
            id v46 = [v26 recordId];
            id v33 = v48;
            if ([v46 isEqual:v48])
            {
LABEL_21:
              long long v34 = [v26 detailForRecordId:v33];

              if (v34)
              {
LABEL_22:
                uint64_t v35 = [v18 objectForKeyedSubscript:v19];
                id v36 = (void *)v35;
                id v37 = (void *)MEMORY[0x1E4F1CBF0];
                if (v35) {
                  id v37 = (void *)v35;
                }
                id v44 = v37;

                [MEMORY[0x1E4F5DAB0] matchinfoDataWithEntityId:v21 detailEntityId:v20 matchinfoData:v22];
                v39 = unint64_t v38 = v26;
                v50[0] = v39;
                [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:1];
                id v43 = v47 = v38;

                [v17 setObject:v38 forKeyedSubscript:v19];
                id v40 = objc_msgSend(v44, "_pas_proxyArrayByAppendingArray:", v43);

                [v18 setObject:v40 forKeyedSubscript:v19];
                unint64_t v41 = [v17 count];
                id v42 = (BOOL *)MEMORY[0x1E4F93C08];
                if (v41 >= a5) {
                  id v42 = (BOOL *)MEMORY[0x1E4F93C10];
                }
                v28.var0 = *v42;

                id v26 = v47;
LABEL_29:

                goto LABEL_30;
              }
            }
            else
            {
            }
LABEL_28:
            v28.var0 = *MEMORY[0x1E4F93C08];
            goto LABEL_29;
          default:
            goto LABEL_22;
        }
      }
      v28.var0 = *MEMORY[0x1E4F93C08];
    }
LABEL_30:

    goto LABEL_13;
  }
  id v24 = (BOOL *)MEMORY[0x1E4F93C10];
LABEL_12:
  v28.var0 = *v24;
LABEL_13:

  return v28;
}

- (id)suggestContactMatchesWithContact:(id)a3 limitTo:(unint64_t)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!v7)
  {
    id v21 = [MEMORY[0x1E4F28B00] currentHandler];
    [v21 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 1598, @"Invalid parameter not satisfying: %@", @"contact" object file lineNumber description];
  }
  if (a4 <= 0xA) {
    unint64_t v8 = 10;
  }
  else {
    unint64_t v8 = a4;
  }
  unint64_t v9 = [(SGSqlEntityStore *)self suggestContactsWithContact:v7 withSnippets:1 filterConfirmRejectDetails:0 limitTo:v8];
  unint64_t v10 = [(SGSqlEntityStore *)self _rankSGContacts:v9 bySimilarityToContact:v7];

  uint64_t v11 = objc_opt_new();
  uint64_t v12 = (void *)MEMORY[0x1E4F5DA28];
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __61__SGSqlEntityStore_suggestContactMatchesWithContact_limitTo___block_invoke;
  void v22[3] = &unk_1E65BAAD0;
  void v22[4] = self;
  id v23 = v7;
  id v13 = v11;
  id v24 = v13;
  id v14 = v7;
  unint64_t v15 = [v12 mapAndFilter:v10 f:v22];
  id v16 = [v15 arrayByAddingObjectsFromArray:v13];

  id v17 = sgLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = [v16 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v26 = v20;
    _os_log_debug_impl(&dword_1CA650000, v17, OS_LOG_TYPE_DEBUG, "After filtering, %lu contacts", buf, 0xCu);
  }

  if ([v16 count] > a4)
  {
    uint64_t v18 = objc_msgSend(v16, "subarrayWithRange:", 0, a4);

    id v16 = (void *)v18;
  }

  return v16;
}

id __61__SGSqlEntityStore_suggestContactMatchesWithContact_limitTo___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 filterOutRejectedDetailsFromContact:v4];
  uint64_t v5 = *(void *)(a1 + 40);
  id v13 = 0;
  +[SGCuratedContactMatcher compareContact:v4 cnContact:v5 newDetails:&v13 matchedDetails:0 matchPreference:1];

  id v6 = v13;
  if ([v6 containsDetailSuggestions])
  {
    id v7 = objc_alloc(MEMORY[0x1E4F5D9B8]);
    unint64_t v8 = (void *)[v7 initWithContact:v6 matchTokens:MEMORY[0x1E4F1CBF0] matchInfo:MEMORY[0x1E4F1CBF0]];
  }
  else
  {
    if ([v6 containsSuggestions])
    {
      id v9 = objc_alloc(MEMORY[0x1E4F5D9B8]);
      unint64_t v10 = (void *)[v9 initWithContact:v6 matchTokens:MEMORY[0x1E4F1CBF0] matchInfo:MEMORY[0x1E4F1CBF0]];
      [*(id *)(a1 + 48) addObject:v10];
    }
    else
    {
      uint64_t v11 = sgLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v15 = v6;
        _os_log_debug_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEBUG, "Skipping match because it contains no suggestions: %@", buf, 0xCu);
      }
    }
    unint64_t v8 = 0;
  }

  return v8;
}

- (id)_rankSGContacts:(id)a3 bySimilarityToContact:(id)a4
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [MEMORY[0x1E4F1B910] descriptorForRequiredKeysForStyle:0];
  uint64_t v9 = *MEMORY[0x1E4F1AEE0];
  v24[0] = v8;
  v24[1] = v9;
  v24[2] = *MEMORY[0x1E4F1ADC8];
  unint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:3];
  char v11 = [v7 areKeysAvailable:v10];

  if (v11)
  {
    uint64_t v12 = [MEMORY[0x1E4F1B910] stringFromContact:v7 style:0];
    id v13 = (void *)MEMORY[0x1E4F5DA28];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke;
    v20[3] = &unk_1E65BAA68;
    void v20[4] = self;
    id v21 = v7;
    id v22 = v12;
    id v14 = v12;
    id v15 = [v13 map:v6 f:v20];
    uint64_t v16 = [v15 sortedArrayWithOptions:16 usingComparator:&__block_literal_global_257];

    id v17 = [MEMORY[0x1E4F5DA28] map:v16 f:&__block_literal_global_260_27198];
  }
  else
  {
    uint64_t v18 = sgLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v18, OS_LOG_TYPE_DEFAULT, "rankSGContacts: target CNContact is missing required keys", buf, 2u);
    }

    id v17 = v6;
  }

  return v17;
}

id __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v5 = a2;
  [v2 _scoreSGContact:v5 bySimilarityToContact:v3 cnContactFullname:v4];
  id v6 = (void *)MEMORY[0x1E4F93BB8];
  id v7 = objc_msgSend(NSNumber, "numberWithDouble:");
  unint64_t v8 = [v6 tupleWithFirst:v5 second:v7];

  return v8;
}

uint64_t __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 first];
}

uint64_t __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = [a3 second];
  id v6 = [v4 second];

  uint64_t v7 = [v5 compare:v6];
  return v7;
}

- (double)_scoreSGContact:(id)a3 bySimilarityToContact:(id)a4 cnContactFullname:(id)a5
{
  id v7 = a5;
  id v8 = a4;
  id v9 = a3;
  unint64_t v10 = [v9 name];
  char v11 = [v10 fullName];
  BOOL v12 = +[SGNames namesApproximatelyMatch:v7 and:v11];

  if (v12) {
    double v13 = 2.0;
  }
  else {
    double v13 = 0.0;
  }
  id v27 = 0;
  +[SGCuratedContactMatcher compareContact:v9 cnContact:v8 newDetails:0 matchedDetails:&v27 matchPreference:0];

  id v14 = v27;
  id v15 = [v14 phones];
  double v16 = v13 + (double)(unint64_t)[v15 count];

  id v17 = [v14 emailAddresses];
  double v18 = v16 + (double)(unint64_t)[v17 count];

  id v19 = [v14 postalAddresses];
  double v20 = v18 + (double)(unint64_t)[v19 count];

  id v21 = [v14 socialProfiles];
  double v22 = v20 + (double)(unint64_t)[v21 count];

  id v23 = [v14 birthday];

  double v24 = 1.0;
  if (!v23) {
    double v24 = 0.0;
  }
  double v25 = v22 + v24;

  return v25;
}

- (BOOL)historyHasContact:(id)a3
{
  return [(SGSuggestHistory *)self->_history hasContact:a3];
}

- (void)filterOutRejectedDetailsFromContact:(id)a3
{
  id v3 = a3;
  id v4 = (void *)MEMORY[0x1E4F5D9B0];
  id v5 = [v3 recordId];
  id v6 = [v3 name];
  id v7 = [v3 emailAddresses];
  id v8 = [v3 phones];
  id v9 = [v3 postalAddresses];
  unint64_t v10 = [v3 socialProfiles];
  char v11 = [v3 birthday];
  BOOL v12 = [v3 photoPath];
  double v13 = [v4 contactWithId:v5 name:v6 emailAddresses:v7 phones:v8 postalAddresses:v9 socialProfiles:v10 birthday:v11 photoPath:v12];

  id v14 = (void *)MEMORY[0x1E4F28F60];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __56__SGSqlEntityStore_filterOutRejectedDetailsFromContact___block_invoke;
  v29[3] = &unk_1E65BAA40;
  void v29[4] = self;
  id v15 = v13;
  id v30 = v15;
  double v16 = [v14 predicateWithBlock:v29];
  id v17 = [v3 emailAddresses];
  double v18 = [v17 filteredArrayUsingPredicate:v16];
  [v3 setEmailAddresses:v18];

  id v19 = [v3 phones];
  double v20 = [v19 filteredArrayUsingPredicate:v16];
  [v3 setPhones:v20];

  id v21 = [v3 postalAddresses];
  double v22 = [v21 filteredArrayUsingPredicate:v16];
  [v3 setPostalAddresses:v22];

  id v23 = [v3 socialProfiles];
  double v24 = [v23 filteredArrayUsingPredicate:v16];
  [v3 setSocialProfiles:v24];

  history = self->_history;
  uint64_t v26 = [v3 birthday];
  LOBYTE(history) = [(SGSuggestHistory *)history hasContactDetail:v26 forContact:v15];

  if (history)
  {
    [v3 setBirthday:0];
  }
  else
  {
    id v27 = [v3 birthday];
    [v3 setBirthday:v27];
  }
}

uint64_t __56__SGSqlEntityStore_filterOutRejectedDetailsFromContact___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) hasContactDetail:a2 forContact:*(void *)(a1 + 40)] ^ 1;
}

- (id)suggestContactsWithContact:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 limitTo:(unint64_t)a6
{
  id v10 = a3;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x3032000000;
  double v25 = __Block_byref_object_copy__26977;
  uint64_t v26 = __Block_byref_object_dispose__26978;
  id v27 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke;
  void v15[3] = &unk_1E65BAA18;
  id v12 = v10;
  id v16 = v12;
  id v17 = self;
  BOOL v20 = a4;
  BOOL v21 = a5;
  double v18 = &v22;
  unint64_t v19 = a6;
  [(SGSqliteDatabase *)db readTransaction:v15];
  id v13 = (id)v23[5];

  _Block_object_dispose(&v22, 8);
  return v13;
}

void __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke(uint64_t a1)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [[SGSqlEntityStoreCNContactMatcherHelper alloc] initWithCNContact:*(void *)(a1 + 32)];
  id v3 = objc_opt_new();
  id v4 = objc_opt_new();
  [*(id *)(a1 + 40) _contactIdsForContactDetailMatches:v2 detailContactIds:v3 socialProfileContactIds:v4];
  id v5 = objc_opt_new();
  id v6 = objc_opt_new();
  [*(id *)(a1 + 40) _contactIdsForContactNameMatches:v2 strongNameIds:v5 weakNameIds:v6];
  double v25 = v2;
  id v7 = [*(id *)(a1 + 40) _contactIdForInteractionContactIdentifierMatch:v2];
  id v8 = objc_opt_new();
  id v9 = objc_opt_new();
  unint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = 30;
  if (v10 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v11 = -1;
  }
  if (v11 >= v10) {
    unint64_t v12 = *(void *)(a1 + 56);
  }
  else {
    unint64_t v12 = v11;
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_2;
  v26[3] = &unk_1E65BA9D0;
  void v26[4] = *(void *)(a1 + 40);
  __int16 v30 = *(_WORD *)(a1 + 64);
  id v13 = v9;
  id v27 = v13;
  id v14 = v8;
  id v28 = v14;
  unint64_t v29 = v12;
  id v15 = (void (**)(void, void, void))MEMORY[0x1CB79B4C0](v26);
  id v16 = [v5 allObjects];
  ((void (**)(void, void *, void *))v15)[2](v15, v16, &__block_literal_global_238_27207);

  [v6 intersectSet:v3];
  [v6 minusSet:v14];
  id v17 = [v6 allObjects];
  ((void (**)(void, void *, void *))v15)[2](v15, v17, &__block_literal_global_240_27208);

  if (v7 && ([v14 containsObject:v7] & 1) == 0)
  {
    v33[0] = v7;
    double v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
    ((void (**)(void, void *, void *))v15)[2](v15, v18, &__block_literal_global_243);
  }
  [v4 minusSet:v14];
  unint64_t v19 = [v4 allObjects];
  ((void (**)(void, void *, void *))v15)[2](v15, v19, &__block_literal_global_245_27209);

  uint64_t v20 = [v13 copy];
  uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v20;

  id v23 = sgLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v32 = v24;
    _os_log_debug_impl(&dword_1CA650000, v23, OS_LOG_TYPE_DEBUG, "Matched %lu contacts", buf, 0xCu);
  }
}

void __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 65);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_3;
  v12[3] = &unk_1E65BA9A8;
  id v15 = v5;
  id v8 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  id v14 = v9;
  uint64_t v16 = v10;
  id v11 = v5;
  [v8 _enumerateContactsForMasterEntityIds:a2 withSnippets:v6 filterConfirmRejectDetails:v7 usingBlock:v12];
}

BOOL __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_7(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 name];
  id v3 = [v2 fullName];
  BOOL v4 = [v3 length] == 0;

  return v4;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_6()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_5()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_4()
{
  return 1;
}

BOOL __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    [*(id *)(a1 + 32) addObject:v3];
    BOOL v4 = *(void **)(a1 + 40);
    id v5 = NSNumber;
    uint64_t v6 = [v3 recordId];
    uint64_t v7 = objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "numericValue"));
    [v4 addObject:v7];
  }
  BOOL v8 = (unint64_t)[*(id *)(a1 + 32) count] < *(void *)(a1 + 56);

  return v8;
}

- (id)_contactIdForInteractionContactIdentifierMatch:(id)a3
{
  id v4 = a3;
  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x3032000000;
  unint64_t v19 = __Block_byref_object_copy__26977;
  uint64_t v20 = __Block_byref_object_dispose__26978;
  id v21 = 0;
  id v5 = [v4 interactionContactIdentifier];
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke;
  v12[3] = &unk_1E65BF998;
  id v7 = v5;
  id v13 = v7;
  id v14 = self;
  id v8 = v4;
  id v15 = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke_2;
  v11[3] = &unk_1E65C03F8;
  void v11[4] = &v16;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entityTags AS t CROSS JOIN entity     ON entity.entityKey = t.entityKey AND entity.entityType = t.entityType WHERE t.tag = :interactionTag     AND t.entityType = :pseudoContact     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe" onPrep:v12 onRow:v11 onError:0];
  id v9 = (id)v17[5];

  _Block_object_dispose(&v16, 8);
  return v9;
}

void __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":interactionTag" toNSString:v3];
  [v4 bindNamedParam:":pseudoContact" toInteger:4];
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));
}

uint64_t __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getInt64AsNSNumberForColumn:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *MEMORY[0x1E4F93C08];
}

- (void)_contactIdsForContactNameMatches:(id)a3 strongNameIds:(id)a4 weakNameIds:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = objc_opt_new();
  db = self->_db;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke;
  void v24[3] = &unk_1E65BFF28;
  id v13 = v8;
  id v25 = v13;
  uint64_t v26 = self;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_2;
  void v22[3] = &unk_1E65BFF78;
  id v14 = v11;
  id v23 = v14;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT entity.id FROM entity_fts CROSS JOIN entity     ON entityId = entity.id WHERE messagingTerms MATCH :match     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe" onPrep:v24 onRow:v22 onError:0];
  if ([v14 count])
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_3;
    v20[3] = &unk_1E65BA980;
    void v20[4] = self;
    id v15 = v14;
    id v21 = v15;
    uint64_t v16 = (void (**)(void, void, void))MEMORY[0x1CB79B4C0](v20);
    id v17 = [v13 strongNamePatterns];
    ((void (**)(void, id, void *))v16)[2](v16, v9, v17);

    uint64_t v18 = [v9 count];
    if (v18 != [v15 count])
    {
      unint64_t v19 = [v13 weakNamePatterns];
      ((void (**)(void, id, void *))v16)[2](v16, v10, v19);
    }
  }
}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = [v3 prefilterNameMatchTerms];
  [v5 bindNamedParam:":match" toNSString:v4];

  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v5, objc_msgSend(*(id *)(a1 + 32), "isMe"));
}

uint64_t __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "entity"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(*(void *)(a1 + 32) + 8);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_4;
  v12[3] = &unk_1E65BFF28;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_6;
  void v10[3] = &unk_1E65BFF78;
  id v11 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:candidates)     AND EXISTS(        SELECT value AS pattern             FROM _pas_nsarray(:patterns)             WHERE title LIKE pattern    )" onPrep:v12 onRow:v10 onError:0];
}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":candidates" toNSSet:v3];
  id v5 = v4;
  id v6 = sqlite3_db_handle((sqlite3_stmt *)[v5 stmt]);
  int v7 = sqlite3_limit(v6, 8, -1);
  id v8 = *(void **)(a1 + 40);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_5;
  void v10[3] = &__block_descriptor_36_e18_B16__0__NSString_8l;
  int v11 = v7;
  id v9 = objc_msgSend(v8, "_pas_filteredArrayWithTest:", v10);
  [v5 bindNamedParam:":patterns" toNSArray:v9];
}

uint64_t __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

BOOL __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 lengthOfBytesUsingEncoding:4] < (unint64_t)*(int *)(a1 + 32);
}

- (void)_contactIdsForContactDetailMatches:(id)a3 detailContactIds:(id)a4 socialProfileContactIds:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v22 = a5;
  id v10 = objc_opt_new();
  int v11 = objc_opt_new();
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke;
  v35[3] = &unk_1E65BA938;
  void v35[4] = self;
  id v12 = v11;
  id v36 = v12;
  id v13 = v10;
  id v37 = v13;
  id v14 = (void (**)(void, void, void, void))MEMORY[0x1CB79B4C0](v35);
  id v15 = [v8 socialProfileTags];
  ((void (**)(void, __CFString *, uint64_t, void *))v14)[2](v14, @"SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)", 19, v15);

  uint64_t v16 = [v8 emailTags];
  ((void (**)(void, __CFString *, uint64_t, void *))v14)[2](v14, @"SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)", 8, v16);

  id v17 = [v8 phoneTags];
  ((void (**)(void, __CFString *, uint64_t, void *))v14)[2](v14, @"SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)", 6, v17);

  uint64_t v18 = [v8 addressTags];
  ((void (**)(void, __CFString *, uint64_t, void *))v14)[2](v14, @"SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType = :detailType AND entityTags.entityType != :pseudoContactType     AND EXISTS(        SELECT value AS prefix         FROM _pas_nsarray(:detailTags)         WHERE entityTags.tag >= prefix AND entityTags.tag < firstStringAfterPrefix(prefix)    )", 7, v18);

  if ([v13 count])
  {
    db = self->_db;
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    void v31[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_4;
    v31[3] = &unk_1E65BF998;
    id v32 = v13;
    id v33 = self;
    id v20 = v8;
    id v34 = v20;
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_5;
    v29[3] = &unk_1E65BFF78;
    id v30 = v9;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:ids)     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe" onPrep:v31 onRow:v29 onError:0];
    if ([v12 count])
    {
      id v21 = self->_db;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_6;
      v25[3] = &unk_1E65BF998;
      id v26 = v12;
      id v27 = self;
      id v28 = v20;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_7;
      void v23[3] = &unk_1E65BFF78;
      id v24 = v22;
      [(SGSqliteDatabase *)v21 prepAndRunSQL:@"SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:socialProfileSubContactIds)     AND title = \"\"     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe" onPrep:v25 onRow:v23 onError:0];
    }
  }
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 8);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_2;
  void v15[3] = &unk_1E65BFF50;
  id v16 = v7;
  uint64_t v17 = a3;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_3;
  v11[3] = &unk_1E65BA910;
  void v11[4] = v8;
  uint64_t v14 = a3;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v10 = v7;
  [v9 prepAndRunSQL:a2 onPrep:v15 onRow:v11 onError:0];
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":ids" toNSSet:v3];
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));
}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":socialProfileSubContactIds" toNSSet:v3];
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));
}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_7(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":pseudoContactType" toInteger:4];
  [v3 bindNamedParam:":detailType" toInteger:*(void *)(a1 + 40)];
  [v3 bindNamedParam:":detailTags" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getInt64ForColumnName:"masterEntityId" table:"entity"];
  uint64_t v5 = [v3 getInt64ForColumnName:"id" table:"entity"];
  uint64_t v6 = [v3 getInt64ForColumnName:"entityType" table:"entity"];
  id v7 = [v3 getNSStringForColumnName:"entityKey" table:"entity"];

  uint64_t v8 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  if (v6 == 4)
  {
    id v9 = [[SGIdentityKey alloc] initWithSerialized:v7];
    uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "entityTypeFromIdentityKeyType:", -[SGIdentityKey type](v9, "type"));
    uint64_t v11 = *(void *)(a1 + 56);

    if (v10 == v11)
    {
      id v12 = *(void **)(a1 + 48);
      id v13 = [NSNumber numberWithLongLong:v5];
      uint64_t v14 = v12;
LABEL_8:
      [v14 addObject:v13];
    }
  }
  else
  {
    id v15 = SGDelimitedStringsDeserialize();
    id v16 = [v15 objectAtIndexedSubscript:0];

    uint64_t v17 = [[SGIdentityKey alloc] initWithSerialized:v16];
    if ([(SGIdentityKey *)v17 type] == 5)
    {
      uint64_t v18 = *(void **)(a1 + 40);
      unint64_t v19 = [NSNumber numberWithLongLong:v4];
      [v18 addObject:v19];
    }
    if (v4 != -1)
    {
      id v20 = *(void **)(a1 + 48);
      id v13 = [NSNumber numberWithLongLong:v4];
      uint64_t v14 = v20;
      goto LABEL_8;
    }
  }
  uint64_t v21 = *v8;

  return v21;
}

- (id)suggestContactsWithPrefix:(id)a3 limitTo:(unint64_t)a4
{
  id v7 = a3;
  if (!v7)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 1214, @"Invalid parameter not satisfying: %@", @"prefix" object file lineNumber description];
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __54__SGSqlEntityStore_suggestContactsWithPrefix_limitTo___block_invoke;
  v12[3] = &unk_1E65BFE18;
  void v12[4] = self;
  id v13 = v7;
  unint64_t v14 = a4;
  id v8 = v7;
  id v9 = [(SGSqlEntityStore *)self suggestContactsByMasterEntityQuery:@"SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND title LIKE :prefix ESCAPE '!' AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe LIMIT :limit" limit:a4 bindings:v12];

  return v9;
}

void __54__SGSqlEntityStore_suggestContactsWithPrefix_limitTo___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  [v7 bindNamedParam:":pseudo" toInt64:4];
  id v3 = [(id)objc_opt_class() likePrefix:*(void *)(a1 + 40)];
  [v7 bindNamedParam:":prefix" toNSString:v3];

  unint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = 30;
  if (v4 < 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v5 = -1;
  }
  if (v5 >= v4) {
    unint64_t v6 = *(void *)(a1 + 48);
  }
  else {
    unint64_t v6 = v5;
  }
  [v7 bindNamedParam:":limit" toInt64:v6];
}

- (void)bindCheckContactRow:(id)a3 isMe:(BOOL)a4
{
  BOOL v4 = a4;
  unint64_t v5 = (void *)MEMORY[0x1E4F5D9F0];
  id v8 = a3;
  unint64_t v6 = [v5 isSent];
  id v7 = [v6 name];
  [v8 bindNamedParam:":isSentTag" toNSString:v7];

  [v8 bindNamedParam:":isMe" toInteger:v4];
}

- (id)suggestContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6
{
  BOOL v7 = a4;
  id v10 = a6;
  id v11 = a3;
  id v12 = objc_opt_new();
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __83__SGSqlEntityStore_suggestContactsByMasterEntityQuery_withSnippets_limit_bindings___block_invoke;
  void v15[3] = &unk_1E65BA8C0;
  id v13 = v12;
  id v16 = v13;
  [(SGSqlEntityStore *)self enumerateContactsByMasterEntityQuery:v11 withSnippets:v7 limit:a5 bindings:v10 usingBlock:v15];

  return v13;
}

uint64_t __83__SGSqlEntityStore_suggestContactsByMasterEntityQuery_withSnippets_limit_bindings___block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

- (id)suggestContactsByMasterEntityQuery:(id)a3 limit:(unint64_t)a4 bindings:(id)a5
{
  return [(SGSqlEntityStore *)self suggestContactsByMasterEntityQuery:a3 withSnippets:1 limit:a4 bindings:a5];
}

- (void)enumerateContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6 usingBlock:(id)a7
{
  id v12 = a3;
  id v13 = a6;
  id v14 = a7;
  db = self->_db;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __96__SGSqlEntityStore_enumerateContactsByMasterEntityQuery_withSnippets_limit_bindings_usingBlock___block_invoke;
  v20[3] = &unk_1E65BA8E8;
  uint64_t v16 = 30;
  if (a5 < 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v16 = -1;
  }
  void v20[4] = self;
  id v21 = v12;
  id v23 = v14;
  uint64_t v24 = v16;
  BOOL v25 = a4;
  id v22 = v13;
  id v17 = v14;
  id v18 = v13;
  id v19 = v12;
  [(SGSqliteDatabase *)db readTransaction:v20];
}

void __96__SGSqlEntityStore_enumerateContactsByMasterEntityQuery_withSnippets_limit_bindings_usingBlock___block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) masterEntityIDsForMasterEntityQuery:*(void *)(a1 + 40) bindings:*(void *)(a1 + 48)];
  if ((unint64_t)[v2 count] >= *(void *)(a1 + 64))
  {
    id v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "Got more than %lu results for query. Giving up.", (uint8_t *)&v5, 0xCu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _enumerateContactsForMasterEntityIds:v2 withSnippets:*(unsigned __int8 *)(a1 + 72) usingBlock:*(void *)(a1 + 56)];
  }
}

- (id)_contactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v6 = (objc_class *)MEMORY[0x1E4F1CA48];
  id v7 = a3;
  id v8 = objc_msgSend([v6 alloc], "initWithCapacity:", objc_msgSend(v7, "count"));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __61__SGSqlEntityStore__contactsForMasterEntityIds_withSnippets___block_invoke;
  v11[3] = &unk_1E65BA8C0;
  id v9 = v8;
  id v12 = v9;
  [(SGSqlEntityStore *)self _enumerateContactsForMasterEntityIds:v7 withSnippets:v4 usingBlock:v11];

  return v9;
}

uint64_t __61__SGSqlEntityStore__contactsForMasterEntityIds_withSnippets___block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 usingBlock:(id)a6
{
  BOOL v7 = a5;
  BOOL v8 = a4;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = (uint64_t (**)(id, void *))a6;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v12 = v10;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)v25;
    id obj = v12;
    while (2)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v25 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void *)(*((void *)&v24 + 1) + 8 * i);
        id v19 = (void *)MEMORY[0x1CB79B230]();
        id v20 = [(SGSqlEntityStore *)self _contactForMasterEntityId:v18 withSnippets:v8 filterConfirmRejectDetails:v7];
        if (v20)
        {
          ++v15;
          if ((v11[2](v11, v20) & 1) == 0)
          {
            id v21 = sgLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_debug_impl(&dword_1CA650000, v21, OS_LOG_TYPE_DEBUG, "_enumerateContactsForMasterEntityIds aborting enumeration", buf, 2u);
            }

            id v12 = obj;
            goto LABEL_15;
          }
        }
      }
      id v12 = obj;
      uint64_t v14 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_15:

  id v22 = sgLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v29 = v15;
    _os_log_debug_impl(&dword_1CA650000, v22, OS_LOG_TYPE_DEBUG, "Loaded %tu contacts", buf, 0xCu);
  }
}

- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 usingBlock:(id)a5
{
}

- (id)_contactForMasterEntityId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = a3;
  uint64_t v9 = -[SGSqlEntityStore loadSerializedContactForId:](self, "loadSerializedContactForId:", [v8 longLongValue]);
  if (v9)
  {
    id v10 = (void *)v9;
    if (![(SGSuggestHistory *)self->_history hasContact:v9]) {
      goto LABEL_9;
    }
  }
  id v11 = -[SGSqlEntityStore storageContactByMasterEntityId:withSnippets:](self, "storageContactByMasterEntityId:withSnippets:", [v8 longLongValue], v6);
  if (v11 && ![(SGSuggestHistory *)self->_history hasStorageContact:v11])
  {
    id v10 = [v11 convertToContact:self];
  }
  else
  {
    id v10 = 0;
  }

LABEL_9:
  if (v10 && v5) {
    [(SGSqlEntityStore *)self filterOutRejectedDetailsFromContact:v10];
  }

  return v10;
}

- (id)masterEntityIDsForMasterEntityQuery:(id)a3 bindings:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = objc_opt_new();
  db = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke;
  v17[3] = &unk_1E65BA898;
  id v18 = v6;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke_2;
  void v15[3] = &unk_1E65BFF78;
  id v10 = v8;
  id v16 = v10;
  id v11 = v6;
  [(SGSqliteDatabase *)db prepAndRunSQL:v7 onPrep:v17 onRow:v15 onError:0];

  id v12 = v16;
  id v13 = v10;

  return v13;
}

uint64_t __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(a2, "getIntegerForColumn:", 0));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

- (id)storageContactByMasterEntityId:(int64_t)a3 withSnippets:(BOOL)a4
{
  id v8 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v37 = 0;
  unint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  id v40 = __Block_byref_object_copy__26977;
  unint64_t v41 = __Block_byref_object_dispose__26978;
  id v42 = 0;
  uint64_t v9 = [(id)masterEntityCache resultIfAvailable];
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  void v36[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke;
  void v36[3] = &unk_1E65BA7F8;
  v36[4] = &v37;
  void v36[5] = a3;
  [v9 runWithLockAcquired:v36];

  id v10 = (void *)v38[5];
  if (v10)
  {
    id v11 = v10;
  }
  else
  {
    id v12 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE (e.masterEntityId = :masterEntityId OR e.id = :masterEntityId) AND +e.entityType = :pseudo AND ep.extractionType != :messagesMeCard"];
    id v13 = objc_opt_new();
    db = self->_db;
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_2;
    v35[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    void v35[4] = a3;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_3;
    v32[3] = &unk_1E65BA820;
    void v32[4] = self;
    BOOL v34 = a4;
    id v15 = v13;
    id v33 = v15;
    [(SGSqliteDatabase *)db prepAndRunQuery:v12 onPrep:v35 onRow:v32 onError:0];
    if ([v15 count])
    {
      uint64_t v26 = MEMORY[0x1E4F143A8];
      uint64_t v27 = 3221225472;
      id v28 = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_4;
      uint64_t v29 = &unk_1E65BA848;
      id v30 = self;
      SEL v31 = a2;
      id v16 = sgMapAndFilter();
      if ([v16 count])
      {
        id v17 = +[SGStorageContact mergeAll:v16];
        if ([v17 count] != 1)
        {
          id v21 = [MEMORY[0x1E4F28B00] currentHandler];
          objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"SGSqlEntityStore.m", 1087, @"Should only get 1 merged contact since that's how we selected the profiles but got %d", objc_msgSend(v17, "count"));
        }
        id v18 = [v17 anyObject];
        if (!v18)
        {
          id v22 = [MEMORY[0x1E4F28B00] currentHandler];
          [v22 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 1090, @"Invalid parameter not satisfying: %@", @"result" object file lineNumber description];
        }
        id v19 = [(id)masterEntityCache result];
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_5;
        void v23[3] = &unk_1E65BA870;
        int64_t v25 = a3;
        id v11 = v18;
        id v24 = v11;
        [v19 runWithLockAcquired:v23];
      }
      else
      {
        id v11 = 0;
      }
    }
    else
    {
      id v11 = 0;
    }
  }
  _Block_object_dispose(&v37, 8);

  return v11;
}

void __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke(uint64_t a1, void *a2)
{
  id v3 = NSNumber;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  id v9 = [v3 numberWithLongLong:v4];
  uint64_t v6 = [v5 objectForKeyedSubscript:v9];

  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

uint64_t __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":masterEntityId" int64:*(void *)(a1 + 32)];
  +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
  return +[SGSqliteDatabase bindParam:a2 name:":messagesMeCard" int64:64];
}

uint64_t __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_3(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2 withSnippets:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = +[SGContactEntity contactEntityFromEntity:v3];
  uint64_t v6 = +[SGStorageContact contactFromContactEntity:v5];
  [v4 addObject:v6];

  return 0;
}

id __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 profiles];
  uint64_t v5 = [v4 count];

  if (v5 != 1)
  {
    id v9 = [MEMORY[0x1E4F28B00] currentHandler];
    [v9 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore.m" lineNumber:1077 description:@"Candidate already has more than 1 profile. Merging happening early?"];
  }
  if ([*(id *)(a1 + 32) contactIsDisplayable:v3]) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  return v7;
}

void __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_5(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((unint64_t)[v5 count] >= 0x32) {
    [v5 removeAllObjects];
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = [NSNumber numberWithLongLong:*(void *)(a1 + 40)];
  [v5 setObject:v3 forKeyedSubscript:v4];
}

- (BOOL)contactIsDisplayable:(id)a3
{
  id v4 = a3;
  id v5 = [v4 profiles];
  uint64_t v6 = [v5 anyObject];

  if (v6)
  {
    id v7 = [v6 duplicateKey];
    id v8 = [v7 parentKey];

    if (v8)
    {
      [v8 entityType];
      if (SGEntityTypeIsMessage())
      {
        uint64_t v17 = 0;
        id v18 = &v17;
        uint64_t v19 = 0x2020000000;
        char v20 = 0;
        db = self->_db;
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 3221225472;
        v15[2] = __41__SGSqlEntityStore_contactIsDisplayable___block_invoke;
        void v15[3] = &unk_1E65C05C8;
        id v16 = v8;
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        v14[2] = __41__SGSqlEntityStore_contactIsDisplayable___block_invoke_2;
        void v14[3] = &unk_1E65BEBB0;
        void v14[4] = &v17;
        [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT state FROM emailMetadata WHERE key = :key" onPrep:v15 onRow:v14 onError:0];
        BOOL v10 = *((unsigned char *)v18 + 24) != 0;

        _Block_object_dispose(&v17, 8);
      }
      else
      {
        id v11 = [(SGSqlEntityStore *)self loadEntityByKey:v8];
        id v12 = v11;
        if (v11) {
          BOOL v10 = [v11 state] != 4;
        }
        else {
          BOOL v10 = 1;
        }
      }
    }
    else
    {
      BOOL v10 = 1;
    }
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void __41__SGSqlEntityStore_contactIsDisplayable___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) messageKey];
  uint64_t v3 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:v3];
}

uint64_t __41__SGSqlEntityStore_contactIsDisplayable___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  if (sqlite3_column_int(a2, 0) != 4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

- (id)parentKeysForDuplicateKey:(id)a3
{
  id v4 = a3;
  id v5 = objc_opt_new();
  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke;
  void v14[3] = &unk_1E65C05C8;
  id v15 = v4;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke_2;
  v12[3] = &unk_1E65BEC60;
  id v7 = v5;
  id v13 = v7;
  id v8 = v4;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey" onPrep:v14 onRow:v12 onError:0];
  id v9 = v13;
  id v10 = v7;

  return v10;
}

void __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v5 = [*(id *)(a1 + 32) entityKey];
  id v4 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v4];
}

uint64_t __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [[SGDuplicateKey alloc] initWithSerialized:v3];
    [v4 addObject:v5];
  }
  return 0;
}

- (id)mostRecentParentKeyForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x3032000000;
  id v15 = __Block_byref_object_copy__26977;
  id v16 = __Block_byref_object_dispose__26978;
  id v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke;
  void v10[3] = &unk_1E65C05C8;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65BEBB0;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey ORDER BY e.creationTimestamp DESC" onPrep:v10 onRow:v9 onError:0];
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  id v5 = [*(id *)(a1 + 32) entityKey];
  id v4 = [v5 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v4];
}

uint64_t __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  if (v3)
  {
    id v4 = [[SGDuplicateKey alloc] initWithSerialized:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v7 = &SGSqliteDatabaseStop;
  }
  else
  {
    id v7 = &SGSqliteDatabaseKeepGoing;
  }

  return *v7;
}

- (id)emailsPendingVerification
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sgEventsLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "Getting e-mails pending verification", buf, 2u);
  }

  id v4 = objc_opt_new();
  db = self->_db;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __45__SGSqlEntityStore_emailsPendingVerification__block_invoke;
  v25[3] = &unk_1E65BFF78;
  id v6 = v4;
  id v26 = v6;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE unlikely(pendingVerificatiouint64_t n = 1) ORDER BY creationTimestamp DESC" onPrep:0 onRow:v25 onError:&__block_literal_global_146];
  id v7 = sgEventsLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v6 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v29 = v8;
    _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "Found %lu e-mails pending verification", buf, 0xCu);
  }

  id v9 = objc_opt_new();
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v10 = v6;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v16 = [SGDuplicateKey alloc];
        id v17 = objc_msgSend(v15, "serialize", (void)v21);
        id v18 = [(SGDuplicateKey *)v16 initWithSerializedEntityKey:v17 entityType:5 serializedParentKey:0];

        uint64_t v19 = [(SGSqlEntityStore *)self loadEntityByKey:v18];
        if (v19) {
          [v9 addObject:v19];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v12);
  }

  return v9;
}

uint64_t __45__SGSqlEntityStore_emailsPendingVerification__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a2 getNSStringForColumnName:"key" table:0];
  if (v3)
  {
    id v4 = [(SGMessageKey *)[SGEmailKey alloc] initWithSerialized:v3];
    if (v4)
    {
      [*(id *)(a1 + 32) addObject:v4];
    }
    else
    {
      uint64_t v5 = sgEventsLogHandle();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 138412290;
        uint64_t v8 = v3;
        _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "Could not create SGEmailKey for key %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  else
  {
    sgEventsLogHandle();
    id v4 = (SGEmailKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v4->super.super, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_1CA650000, &v4->super.super, OS_LOG_TYPE_ERROR, "key in emailMetadata was nil", (uint8_t *)&v7, 2u);
    }
  }

  return 0;
}

uint64_t __45__SGSqlEntityStore_emailsPendingVerification__block_invoke_144(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = sgEventsLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Error finding e-mails pending verification: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E4F93C10];
}

- (id)nextPendingGeocode
{
  uint64_t v3 = [(SGSqlEntityStore *)self selectEntityQuery:@"WHERE unlikely(pendingGeocode=1)"];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  uint64_t v11 = __Block_byref_object_copy__26977;
  uint64_t v12 = __Block_byref_object_dispose__26978;
  id v13 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __38__SGSqlEntityStore_nextPendingGeocode__block_invoke;
  void v7[3] = &unk_1E65BFDD0;
  void v7[4] = self;
  void v7[5] = &v8;
  [(SGSqliteDatabase *)db prepAndRunQuery:v3 onPrep:0 onRow:v7 onError:0];
  id v5 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v5;
}

uint64_t __38__SGSqlEntityStore_nextPendingGeocode__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) entityFromSqlResult:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (void)clearNoContactsCache
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v3);
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact count];
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_debug_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEBUG, "#NoDetailCache Clearing %lu other details", (uint8_t *)&v6, 0xCu);
  }

  [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact removeAllObjects];
  objc_sync_exit(v3);
}

- (BOOL)_isStringInNoContactsCache:(id)a3
{
  id v4 = a3;
  uint64_t v5 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v5);
  int v6 = [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact containsObject:v4];
  if (v6)
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEBUG, "#NoDetailCache Other detail found", buf, 2u);
    }

    [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact removeObject:v4];
    [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact addObject:v4];
    objc_sync_exit(v5);
  }
  else
  {
    objc_sync_exit(v5);

    sgLogHandle();
    uint64_t v5 = (NSMutableOrderedSet *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v5->super.super, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_debug_impl(&dword_1CA650000, &v5->super.super, OS_LOG_TYPE_DEBUG, "#NoDetailCache Other detail not found", v9, 2u);
    }
  }

  return v6;
}

- (void)_addStringToNoContactsCache:(id)a3
{
  id v4 = a3;
  uint64_t v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "#NoDetailCache Adding other detail...", buf, 2u);
  }

  int v6 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v6);
  [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact removeObject:v4];
  [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact addObject:v4];
  if ((unint64_t)[(NSMutableOrderedSet *)self->_otherDetailsWithNoContact count] >= 0x2711)
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_INFO, "#NoDetailCache 10,001 items in _otherDetailsWithNoContact. Removing least recently accessed item...", v8, 2u);
    }

    [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact removeObjectAtIndex:0];
  }
  objc_sync_exit(v6);
}

- (void)removeStringFromNoContactsCache:(id)a3
{
  id v4 = a3;
  uint64_t v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "#NoDetailCache Removing other detail...", v7, 2u);
  }

  int v6 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v6);
  [(NSMutableOrderedSet *)self->_otherDetailsWithNoContact removeObject:v4];
  objc_sync_exit(v6);
}

- (void)clearCaches
{
  uint64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "Clearing caches in SGEntityStore", v4, 2u);
  }

  [(SGSqlEntityStore *)self clearMasterEntityCache];
}

- (void)clearMasterEntityCache
{
  id v2 = [(id)masterEntityCache resultIfAvailable];
  [v2 runWithLockAcquired:&__block_literal_global_133];
}

uint64_t __42__SGSqlEntityStore_clearMasterEntityCache__block_invoke(uint64_t a1, void *a2)
{
  return [a2 removeAllObjects];
}

- (void)_removeCorruptionMarker
{
  uint64_t v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v4 = +[SGSqliteDatabase corruptionMarkerPathForPath:self->_snippetDbPath];
  uint64_t v8 = 0;
  [v3 removeItemAtPath:v4 error:&v8];
  uint64_t v5 = v8;

  if (v5)
  {
    int v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_INFO, "failed to remove corruption marker", v7, 2u);
    }
  }
}

- (BOOL)corruptionMarkerPresent
{
  if (self->_isEphemeral) {
    return 0;
  }
  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = +[SGSqliteDatabase corruptionMarkerPathForPath:self->_snippetDbPath];
  char v6 = [v4 fileExistsAtPath:v5 isDirectory:0];

  return v6;
}

- (void)addDeallocNotification:(id)a3
{
  id v9 = a3;
  if (!v9)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2, self, @"SGSqlEntityStore.m", 756, @"Invalid parameter not satisfying: %@", @"block" object file lineNumber description];
  }
  uint64_t v5 = self->_deallocNotifications;
  objc_sync_enter(v5);
  deallocNotifications = self->_deallocNotifications;
  uint64_t v7 = (void *)MEMORY[0x1CB79B4C0](v9);
  [(NSMutableArray *)deallocNotifications addObject:v7];

  objc_sync_exit(v5);
}

- (void)closeDatabases
{
  if ((atomic_exchange(&self->_isClosed._Value, 1u) & 1) == 0)
  {
    [(SGSqliteDatabase *)self->_db closePermanently];
    snippetDb = self->_snippetDb;
    [(SGSqliteDatabase *)snippetDb closePermanently];
  }
}

- (void)dealloc
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    id v16 = self;
    _os_log_debug_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEBUG, "store %@ going deallocating", buf, 0xCu);
  }

  [MEMORY[0x1E4F93B10] unregisterForLockStateChangeNotifications:self->_lockStateNotificationRegistrationToken];
  [(SGSqlEntityStore *)self closeDatabases];
  id v4 = self->_deallocNotifications;
  objc_sync_enter(v4);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = self->_deallocNotifications;
  uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v5);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8 * v8++) + 16))();
      }
      while (v6 != v8);
      uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  objc_sync_exit(v4);
  v9.receiver = self;
  v9.super_class = (Class)SGSqlEntityStore;
  [(SGSqlEntityStore *)&v9 dealloc];
}

- (SGSqlEntityStore)initWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7 noMigrate:(BOOL)a8
{
  BOOL v8 = a8;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v61 = a4;
  id v15 = a6;
  v68.receiver = self;
  v68.super_class = (Class)SGSqlEntityStore;
  id v16 = [(SGSqlEntityStore *)&v68 init];
  uint64_t v17 = v16;
  if (!v16) {
    goto LABEL_31;
  }
  atomic_store(0, (unsigned int *)&v16->_spotlightReindexCount);
  id v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v19 = dispatch_queue_create("SGSqlEntityStore spotlight reindex", v18);
  spotlightReindexQueue = v17->_spotlightReindexQueue;
  v17->_spotlightReindexQueue = (OS_dispatch_queue *)v19;

  v17->_lostMessageOverflow = 500;
  id v21 = objc_alloc(MEMORY[0x1E4F93B70]);
  long long v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CA70]) initWithCapacity:20];
  uint64_t v23 = [v21 initWithGuardedData:v22];
  recentlyDeletedEmailKeys = v17->_recentlyDeletedEmailKeys;
  v17->_recentlyDeletedEmailKeys = (_PASLock *)v23;

  v17->_parentMessagesLimit = 10;
  objc_storeStrong((id *)&v17->_snippetDbPath, a4);
  v17->_BOOL isEphemeral = a5;
  v17->_BOOL executeJournals = a7;
  uint64_t v25 = objc_opt_new();
  journal = v17->_journal;
  v17->_journal = (SGJournal *)v25;

  uint64_t v27 = objc_opt_new();
  deallocNotifications = v17->_deallocNotifications;
  v17->_deallocNotifications = (NSMutableArray *)v27;

  objc_storeStrong((id *)&v17->_sharedWriteLock, a6);
  uint64_t v29 = sgLogHandle();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    BOOL isEphemeral = v17->_isEphemeral;
    BOOL executeJournals = v17->_executeJournals;
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = isEphemeral;
    LOWORD(v70) = 1024;
    *(_DWORD *)((char *)&v70 + 2) = executeJournals;
    HIWORD(v70) = 1024;
    LODWORD(v71) = v8;
    _os_log_debug_impl(&dword_1CA650000, v29, OS_LOG_TYPE_DEBUG, "entity store initialization flags: isEphemeral:%d executeJournals:%d noMigrate:%d", buf, 0x14u);
  }

  *(void *)long long buf = 0;
  id v70 = buf;
  uint64_t v71 = 0x2020000000;
  char v72 = 0;
  if (v15)
  {
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke;
    v63[3] = &unk_1E65BF330;
    id v66 = buf;
    unint64_t v64 = v17;
    id v65 = v14;
    BOOL v67 = v8;
    [v15 runWithLockAcquired:v63];

    if (!v70[24]) {
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  BOOL v30 = [(SGSqlEntityStore *)v17 _runInitMigrationTasks:v14 noMigrate:v8];
  v70[24] = v30;
  if (v30)
  {
LABEL_8:
    db = v17->_db;
    if (!db || !v17->_snippetDb && !v17->_snippetsJournal)
    {
      BOOL v34 = sgLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v62 = 0;
        _os_log_error_impl(&dword_1CA650000, v34, OS_LOG_TYPE_ERROR, "failed to initialize one or more databases/journals. We cannot continue.", v62, 2u);
      }

      [(SGJournal *)v17->_journal freezeObservers];
      [(SGSqlEntityStore *)v17 closeDatabases];
      goto LABEL_17;
    }
    if (a5 || [(SGSqliteDatabase *)db isInMemory])
    {
      id v32 = [[SGBloomFilter alloc] initWithInMemoryStorageSparse];
      messageRecipients = v17->_messageRecipients;
      v17->_messageRecipients = v32;
    }
    else
    {
      id v36 = [SGBloomFilter alloc];
      messageRecipients = +[SGPaths suggestionsDirectory];
      uint64_t v37 = [(SGBloomFilter *)v36 initWithDirectory:messageRecipients name:@"significant-pseudo-contacts.bf"];
      unint64_t v38 = v17->_messageRecipients;
      v17->_messageRecipients = (SGBloomFilter *)v37;
    }
    uint64_t v39 = +[SGSuggestHistory sharedSuggestHistory];
    history = v17->_history;
    v17->_history = (SGSuggestHistory *)v39;

    if (initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate__onceToken != -1) {
      dispatch_once(&initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate__onceToken, &__block_literal_global_96_27324);
    }
    uint64_t v41 = [(SGSqlEntityStore *)v17 prematchedContactIdentifiers];
    prematchedContactIdentifiers = v17->_prematchedContactIdentifiers;
    v17->_prematchedContactIdentifiers = (NSSet *)v41;

    v17->_serializedContactsLimit = 3500;
    id v43 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v44 = dispatch_queue_attr_make_with_qos_class(v43, (dispatch_qos_class_t)5u, 0);

    dispatch_queue_t v45 = dispatch_queue_create("com.apple.suggestions.sqlentitystore.cacheprecomputationqueue", v44);
    precomputationQueue = v17->_precomputationQueue;
    v17->_precomputationQueue = (OS_dispatch_queue *)v45;

    id v47 = [[SGSpotlightContactsAdapter alloc] initWithSGSqlEntityStore:v17];
    spotlightContactsAdapter = v17->_spotlightContactsAdapter;
    v17->_spotlightContactsAdapter = v47;

    uint64_t v49 = [[SGSGtoCNContactsCacheUpdateAdapter alloc] initWithSGSqlEntityStore:v17];
    sgToCNContactsCacheUpdateAdapter = v17->_sgToCNContactsCacheUpdateAdapter;
    v17->_sgToCNContactsCacheUpdateAdapter = v49;

    if (a5 || [(SGSqliteDatabase *)v17->_db isInMemory]) {
      id v51 = [[SGKeyValueCacheManager alloc] initInMemory];
    }
    else {
      id v51 = (SGKeyValueCacheManager *)objc_opt_new();
    }
    kvCacheManager = v17->_kvCacheManager;
    v17->_kvCacheManager = v51;

    if (initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasOnceToken30 != -1) {
      dispatch_once(&initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasOnceToken30, &__block_literal_global_107);
    }
    objc_storeStrong((id *)&v17->_otherDetailsWithNoContact, (id)initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult);
    if ([(SGSqliteDatabase *)v17->_db isInMemory])
    {
      uint64_t v53 = +[SGMIFeatureStore storeInMemory];
      sgmiFeatureStore = v17->_sgmiFeatureStore;
      v17->_sgmiFeatureStore = (SGMIFeatureStore *)v53;
    }
    else
    {
      __int16 v55 = [v14 stringByDeletingLastPathComponent];
      sgmiFeatureStore = [v55 stringByAppendingPathComponent:@"mifeaturestore.db"];

      uint64_t v56 = +[SGMIFeatureStore storeWithFilename:sgmiFeatureStore];
      uint64_t v57 = v17->_sgmiFeatureStore;
      v17->_sgmiFeatureStore = (SGMIFeatureStore *)v56;
    }
    [(SGSqlEntityStore *)v17 initRefreshSuggestionsContactDropBox];

    _Block_object_dispose(buf, 8);
LABEL_31:
    uint64_t v35 = v17;
    goto LABEL_32;
  }
LABEL_17:
  _Block_object_dispose(buf, 8);
  uint64_t v35 = 0;
LABEL_32:

  return v35;
}

uint64_t __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _runInitMigrationTasks:*(void *)(a1 + 40) noMigrate:*(unsigned __int8 *)(a1 + 56)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_3()
{
  uint64_t v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F1CA70]) initWithCapacity:2000];
  id v2 = (void *)initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult;
  initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult = v1;
}

uint64_t __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_94()
{
  masterEntityCache = [objc_alloc(MEMORY[0x1E4F93B60]) initWithBlock:&__block_literal_global_100_27335 idleTimeout:2.0];
  return MEMORY[0x1F41817F8]();
}

id __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_2()
{
  id v0 = objc_alloc(MEMORY[0x1E4F93B70]);
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)[v0 initWithGuardedData:v1];

  return v2;
}

- (BOOL)_runInitMigrationTasks:(id)a3 noMigrate:(BOOL)a4
{
  id v7 = a3;
  if (+[SGSqliteDatabase isInMemoryPath:self->_snippetDbPath])
  {
    BOOL v8 = +[SGDatabaseJournal journalForInMemoryDb];
    snippetsJournal = self->_snippetsJournal;
    self->_snippetsJournal = v8;
  }
  else
  {
    long long v10 = +[SGDatabaseJournal journalWithName:@"snippets"];
    long long v11 = self->_snippetsJournal;
    self->_snippetsJournal = v10;

    [(SGSqlEntityStore *)self tryExecuteSnippetsJournal];
  }
  char v40 = 0;
  if (!a4 && [(SGSqlEntityStore *)self corruptionMarkerPresent])
  {
    long long v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1CA650000, v12, OS_LOG_TYPE_DEFAULT, "corruption marker is present, recreating db", v39, 2u);
    }

    +[SGAggregateLogging databaseCorruptionDetectedViaCorruptionMarker];
    long long v13 = +[SGSqlEntityStore _recreateCorruptDatabase:v7 sharedLock:self->_sharedWriteLock withProtection:0];
    [v13 closePermanently];

    id v14 = +[SGSqlEntityStore _recreateCorruptDatabase:self->_snippetDbPath sharedLock:self->_sharedWriteLock withProtection:1];
    [v14 closePermanently];

    [(SGSqlEntityStore *)self _removeCorruptionMarker];
    journal = self->_journal;
    id v16 = [[SGJournalEntry alloc] initWithOperation:14];
    [(SGJournal *)journal addEntry:v16];
  }
  uint64_t v17 = +[SGSqlEntityStore initializeDatabase:v7 withProtection:0 sharedLock:self->_sharedWriteLock newDatabaseCreated:&v40];
  db = self->_db;
  self->_db = v17;

  if (self->_db)
  {
    if (v40)
    {
      dispatch_queue_t v19 = self->_journal;
      char v20 = [[SGJournalEntry alloc] initWithOperation:14];
      [(SGJournal *)v19 addEntry:v20];
    }
    if ([(SGDatabaseJournal *)self->_snippetsJournal journaling]) {
      goto LABEL_36;
    }
    if (self->_snippetDb)
    {
      unint64_t v38 = [MEMORY[0x1E4F28B00] currentHandler];
      [v38 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore.m" lineNumber:491 description:@"snippetDb instance was unexpectedly non-nil"];
    }
    id v21 = +[SGSqlEntityStore initializeDatabase:self->_snippetDbPath withProtection:!self->_isEphemeral sharedLock:self->_sharedWriteLock newDatabaseCreated:0];
    snippetDb = self->_snippetDb;
    self->_snippetDb = v21;

    if (self->_snippetDb)
    {
      if (a4) {
        goto LABEL_36;
      }
      if (self->_isEphemeral)
      {
        int64_t v23 = [(SGSqlEntityStore *)self migrateDatabases];
      }
      else
      {
        uint64_t v27 = (void *)migrationCompletedForPaths;
        if (!migrationCompletedForPaths)
        {
          uint64_t v28 = objc_opt_new();
          uint64_t v29 = (void *)migrationCompletedForPaths;
          migrationCompletedForPaths = v28;

          uint64_t v27 = (void *)migrationCompletedForPaths;
        }
        if ([v27 containsObject:v7])
        {
          BOOL v30 = sgLogHandle();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v39 = 0;
            _os_log_debug_impl(&dword_1CA650000, v30, OS_LOG_TYPE_DEBUG, "entity store already migrated. Not migrating again.", v39, 2u);
          }

          goto LABEL_36;
        }
        SEL v31 = sgLogHandle();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v39 = 0;
          _os_log_debug_impl(&dword_1CA650000, v31, OS_LOG_TYPE_DEBUG, "entity store is migrating", v39, 2u);
        }

        int64_t v23 = [(SGSqlEntityStore *)self migrateDatabases];
        [(id)migrationCompletedForPaths addObject:v7];
      }
      if (v23 == 1)
      {
LABEL_40:
        if (self->_snippetDbPath
          && !+[SGSqliteDatabase isInMemoryPath:](SGSqliteDatabase, "isInMemoryPath:"))
        {
          [(SGSqlEntityStore *)self registerJournalUnlockHandler];
        }
        BOOL v25 = 1;
        if (self->_isEphemeral && v40) {
          [(SGSqlEntityStore *)self clearAllTables];
        }
        goto LABEL_46;
      }
      if (v23)
      {
        if ((unint64_t)(v23 - 5) <= 1)
        {
          BOOL v34 = sgLogHandle();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v39 = 0;
            _os_log_error_impl(&dword_1CA650000, v34, OS_LOG_TYPE_ERROR, "migrator found mismatched versions or is in an unrecoverable state, performing corruption recovery", v39, 2u);
          }

          [(id)migrationCompletedForPaths removeObject:v7];
          [(SGSqlEntityStore *)self closeDatabases];
          uint64_t v35 = +[SGSqlEntityStore _recreateCorruptDatabase:v7 sharedLock:self->_sharedWriteLock withProtection:0];
          [v35 closePermanently];

          id v36 = +[SGSqlEntityStore _recreateCorruptDatabase:self->_snippetDbPath sharedLock:self->_sharedWriteLock withProtection:1];
          [v36 closePermanently];

          [(SGJournal *)self->_journal freezeObservers];
          goto LABEL_39;
        }
        if (v23 == 3)
        {
          +[SGSqlEntityStore addPathToFutureDbSchemas:v7];
          id v32 = sgLogHandle();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v39 = 0;
            _os_log_impl(&dword_1CA650000, v32, OS_LOG_TYPE_INFO, "Future db schema detected. Entity store cannot be initialized.", v39, 2u);
          }
          goto LABEL_38;
        }
        id v32 = sgLogHandle();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_38:

          [(SGJournal *)self->_journal freezeObservers];
          [(SGSqlEntityStore *)self closeDatabases];
LABEL_39:
          BOOL v25 = 0;
          goto LABEL_46;
        }
        *(_WORD *)uint64_t v39 = 0;
        uint64_t v37 = "entity store could not migrate databases, bailing out.";
LABEL_52:
        _os_log_error_impl(&dword_1CA650000, v32, OS_LOG_TYPE_ERROR, v37, v39, 2u);
        goto LABEL_38;
      }
LABEL_36:
      if ([(SGSqlEntityStore *)self migrationNeeded])
      {
        id v32 = sgLogHandle();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        *(_WORD *)uint64_t v39 = 0;
        uint64_t v37 = "entity store did not try to migrate but a migration is needed";
        goto LABEL_52;
      }
      goto LABEL_40;
    }
    id v26 = sgLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v39 = 0;
      _os_log_error_impl(&dword_1CA650000, v26, OS_LOG_TYPE_ERROR, "unable to initialize snippets DB", v39, 2u);
    }

    [(SGJournal *)self->_journal freezeObservers];
    [(SGSqlEntityStore *)self closeDatabases];
    BOOL v25 = 0;
  }
  else
  {
    long long v24 = sgLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v39 = 0;
      _os_log_error_impl(&dword_1CA650000, v24, OS_LOG_TYPE_ERROR, "unable to initialize entity DB", v39, 2u);
    }

    [(SGJournal *)self->_journal freezeObservers];
    BOOL v25 = 0;
  }
LABEL_46:

  return v25;
}

- (id)initForDbStatsOnlyWithError:(id *)a3
{
  uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v6 = +[SGSqlEntityStore defaultPathCreatingSuggestionsDirectoryIfNeeded:0];
  int v7 = [v5 fileExistsAtPath:v6 isDirectory:0];

  if (v7)
  {
    BOOL v8 = +[SGSqlEntityStore defaultPath];
    objc_super v9 = +[SGSqlEntityStore defaultSnippetPath];
    self = (SGSqlEntityStore *)[(SGSqlEntityStore *)self initForRawDatabaseAccessWithEntityPath:v8 snippetsPath:v9 error:a3];

    long long v10 = self;
  }
  else if (a3)
  {
    [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28798] code:2 userInfo:0];
    long long v10 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    long long v10 = 0;
  }

  return v10;
}

- (id)initForRawDatabaseAccessWithEntityPath:(id)a3 snippetsPath:(id)a4 error:(id *)a5
{
  id v8 = a3;
  id v9 = a4;
  v19.receiver = self;
  v19.super_class = (Class)SGSqlEntityStore;
  long long v10 = [(SGSqlEntityStore *)&v19 init];
  if (v10)
  {
    uint64_t v11 = +[SGSqlEntityStore initializeDatabase:v8 withProtection:0 sharedLock:0 newDatabaseCreated:0];
    db = v10->_db;
    v10->_db = (SGSqliteDatabase *)v11;

    if (!v10->_db)
    {
      long long v13 = sgLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v18 = 0;
        _os_log_error_impl(&dword_1CA650000, v13, OS_LOG_TYPE_ERROR, "unable to initialize entity DB", v18, 2u);
      }

      if (a5)
      {
        *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F5DC80] code:-1 userInfo:&unk_1F25376D8];
      }
    }
    uint64_t v14 = +[SGSqlEntityStore initializeDatabase:v9 withProtection:1 sharedLock:0 newDatabaseCreated:0];
    snippetDb = v10->_snippetDb;
    v10->_snippetDb = (SGSqliteDatabase *)v14;

    if (!v10->_snippetDb)
    {
      id v16 = sgLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v18 = 0;
        _os_log_error_impl(&dword_1CA650000, v16, OS_LOG_TYPE_ERROR, "unable to initialize snippets DB", v18, 2u);
      }

      if (a5)
      {
        *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F5DC80] code:-1 userInfo:&unk_1F2537700];
      }
    }
    v10->_serializedContactsLimit = 3500;
  }

  return v10;
}

+ (id)likePrefix:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v6 = [a1 escapeLike:v4];
  int v7 = [v6 stringByAppendingString:@"%"];

  return v7;
}

+ (id)escapeLike:(id)a3
{
  id v4 = (void *)MEMORY[0x1CB79B230](a1, a2);
  uint64_t v5 = [a3 stringByReplacingOccurrencesOfString:@"!" withString:@"!!"];
  uint64_t v6 = [v5 stringByReplacingOccurrencesOfString:@"%" withString:@"!%"];

  int v7 = [v6 stringByReplacingOccurrencesOfString:@"_" withString:@"!_"];

  id v8 = [v7 stringByReplacingOccurrencesOfString:@"-" withString:@"!-"];

  return v8;
}

+ (id)globPrefix:(id)a3
{
  id v3 = a3;
  id v4 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v5 = globEscape(v3);
  uint64_t v6 = [v5 stringByAppendingString:@"*"];

  return v6;
}

+ (id)_fieldValuesClassWhitelist
{
  if (_fieldValuesClassWhitelist__pasOnceToken87 != -1) {
    dispatch_once(&_fieldValuesClassWhitelist__pasOnceToken87, &__block_literal_global_441);
  }
  id v2 = (void *)_fieldValuesClassWhitelist__pasExprOnceResult;
  return v2;
}

void __46__SGSqlEntityStore__fieldValuesClassWhitelist__block_invoke()
{
  id v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = (void *)MEMORY[0x1CB79B230]();
  id v2 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v2, "initWithObjects:", v3, v4, v5, v6, objc_opt_class(), 0);
  id v8 = (void *)_fieldValuesClassWhitelist__pasExprOnceResult;
  _fieldValuesClassWhitelist__pasExprOnceResult = v7;
}

+ (BOOL)contactContainsEphemeralId:(id)a3
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v5 = [v4 phones];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v50 objects:v57 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v51;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v51 != v8) {
        objc_enumerationMutation(v5);
      }
      long long v10 = [*(id *)(*((void *)&v50 + 1) + 8 * v9) recordId];
      char v11 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v10, "numericValue"));

      if (v11) {
        goto LABEL_36;
      }
      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v50 objects:v57 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v5 = [v4 emailAddresses];
  uint64_t v12 = [v5 countByEnumeratingWithState:&v46 objects:v56 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v47;
LABEL_11:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v47 != v14) {
        objc_enumerationMutation(v5);
      }
      id v16 = [*(id *)(*((void *)&v46 + 1) + 8 * v15) recordId];
      char v17 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v16, "numericValue"));

      if (v17) {
        goto LABEL_36;
      }
      if (v13 == ++v15)
      {
        uint64_t v13 = [v5 countByEnumeratingWithState:&v46 objects:v56 count:16];
        if (v13) {
          goto LABEL_11;
        }
        break;
      }
    }
  }

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v5 = [v4 postalAddresses];
  uint64_t v18 = [v5 countByEnumeratingWithState:&v42 objects:v55 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v43;
LABEL_19:
    uint64_t v21 = 0;
    while (1)
    {
      if (*(void *)v43 != v20) {
        objc_enumerationMutation(v5);
      }
      long long v22 = [*(id *)(*((void *)&v42 + 1) + 8 * v21) recordId];
      char v23 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v22, "numericValue"));

      if (v23) {
        goto LABEL_36;
      }
      if (v19 == ++v21)
      {
        uint64_t v19 = [v5 countByEnumeratingWithState:&v42 objects:v55 count:16];
        if (v19) {
          goto LABEL_19;
        }
        break;
      }
    }
  }

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v5 = objc_msgSend(v4, "postalAddresses", 0);
  uint64_t v24 = [v5 countByEnumeratingWithState:&v38 objects:v54 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v39;
LABEL_27:
    uint64_t v27 = 0;
    while (1)
    {
      if (*(void *)v39 != v26) {
        objc_enumerationMutation(v5);
      }
      uint64_t v28 = [*(id *)(*((void *)&v38 + 1) + 8 * v27) recordId];
      char v29 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v28, "numericValue"));

      if (v29) {
        break;
      }
      if (v25 == ++v27)
      {
        uint64_t v25 = [v5 countByEnumeratingWithState:&v38 objects:v54 count:16];
        if (v25) {
          goto LABEL_27;
        }
        goto LABEL_33;
      }
    }
LABEL_36:
    char v35 = 1;
LABEL_37:

    goto LABEL_38;
  }
LABEL_33:

  BOOL v30 = [v4 birthday];
  SEL v31 = [v30 recordId];
  char v32 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v31, "numericValue"));

  if ((v32 & 1) == 0)
  {
    id v33 = [v4 recordId];
    char v34 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v33, "numericValue"));

    if ((v34 & 1) == 0)
    {
      uint64_t v5 = [v4 name];
      uint64_t v37 = [v5 recordId];
      char v35 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v37, "numericValue"));

      goto LABEL_37;
    }
  }
  char v35 = 1;
LABEL_38:

  return v35;
}

+ (BOOL)isEphemeralIdentifier:(int64_t)a3
{
  return a3 > 0x6A94D74F42FFFFLL;
}

+ (id)_recreateCorruptDatabase:(id)a3 sharedLock:(id)a4 withProtection:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (v5)
  {
    uint64_t v9 = +[SGSqlEntityStore journalNameForDbPath:v7];
    long long v10 = +[SGDatabaseJournal journalWithName:v9];
    [v10 deleteAllJournaledQueries];
  }
  if (os_variant_has_internal_diagnostics())
  {
    char v11 = (void *)MEMORY[0x1CB79B230]();
    id v12 = [NSString alloc];
    uint64_t v13 = [MEMORY[0x1E4F1C9C8] date];
    [v13 timeIntervalSince1970];
    uint64_t v15 = (void *)[v12 initWithFormat:@"%@.corrupted.%ld", v7, (uint64_t)v14];

    _moveOrRemoveDbFile(v7, v15);
    id v16 = [v7 stringByAppendingString:@"-shm"];
    char v17 = [v15 stringByAppendingString:@"-shm"];
    _moveOrRemoveDbFile(v16, v17);

    uint64_t v18 = [v7 stringByAppendingString:@"-wal"];
    uint64_t v19 = [v15 stringByAppendingString:@"-wal"];
    _moveOrRemoveDbFile(v18, v19);
  }
  else
  {
    +[SGSqliteDatabase truncateDatabaseAtPath:v7];
  }
  id v24 = 0;
  uint64_t v20 = [[SGSqliteDatabase alloc] initWithFilename:v7 withProtection:v5 sharedLock:v8 error:&v24];
  id v21 = v24;
  if (!v20)
  {
    long long v22 = sgLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v21;
      _os_log_error_impl(&dword_1CA650000, v22, OS_LOG_TYPE_ERROR, "entity store failed to recreate database during corruption recovery: %@", buf, 0xCu);
    }
  }
  return v20;
}

+ (void)releaseInstanceAndWaitForDealloc:(id *)a3
{
  if (*a3)
  {
    dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
    id v5 = *a3;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __53__SGSqlEntityStore_releaseInstanceAndWaitForDealloc___block_invoke;
    void v8[3] = &unk_1E65BEF88;
    dispatch_semaphore_t v9 = v4;
    uint64_t v6 = v4;
    [v5 addDeallocNotification:v8];
    id v7 = *a3;
    *a3 = 0;

    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  }
}

intptr_t __53__SGSqlEntityStore_releaseInstanceAndWaitForDealloc___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

+ (void)addPathToFutureDbSchemas:(id)a3
{
  id v6 = a3;
  pthread_mutex_lock(&futureDbSchemasLock);
  uint64_t v3 = (void *)storePathsWithFutureDbSchemas;
  if (!storePathsWithFutureDbSchemas)
  {
    uint64_t v4 = objc_opt_new();
    id v5 = (void *)storePathsWithFutureDbSchemas;
    storePathsWithFutureDbSchemas = v4;

    uint64_t v3 = (void *)storePathsWithFutureDbSchemas;
  }
  [v3 addObject:v6];
  pthread_mutex_unlock(&futureDbSchemasLock);
}

+ (BOOL)pathHasFutureDbSchema:(id)a3
{
  id v3 = a3;
  pthread_mutex_lock(&futureDbSchemasLock);
  uint64_t v4 = (void *)storePathsWithFutureDbSchemas;
  if (!storePathsWithFutureDbSchemas)
  {
    uint64_t v5 = objc_opt_new();
    id v6 = (void *)storePathsWithFutureDbSchemas;
    storePathsWithFutureDbSchemas = v5;

    uint64_t v4 = (void *)storePathsWithFutureDbSchemas;
  }
  char v7 = [v4 containsObject:v3];
  pthread_mutex_unlock(&futureDbSchemasLock);

  return v7;
}

+ (id)initializeDatabase:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6
{
  BOOL v8 = a4;
  id v10 = a3;
  id v11 = a5;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = __Block_byref_object_copy__26977;
  uint64_t v28 = __Block_byref_object_dispose__26978;
  id v29 = 0;
  if (v11)
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __84__SGSqlEntityStore_initializeDatabase_withProtection_sharedLock_newDatabaseCreated___block_invoke;
    v17[3] = &unk_1E65BA7D0;
    uint64_t v20 = &v24;
    id v21 = a1;
    id v18 = v10;
    BOOL v23 = v8;
    id v19 = v11;
    long long v22 = a6;
    [v19 runWithLockAcquired:v17];

    id v12 = v18;
  }
  else
  {
    uint64_t v13 = [a1 _initializeDatabaseNolock:v10 withProtection:v8 sharedLock:0 newDatabaseCreated:a6];
    id v12 = (void *)v25[5];
    void v25[5] = v13;
  }

  double v14 = v25;
  if (a6 && !v25[5]) {
    *a6 = 0;
  }
  id v15 = (id)v14[5];
  _Block_object_dispose(&v24, 8);

  return v15;
}

uint64_t __84__SGSqlEntityStore_initializeDatabase_withProtection_sharedLock_newDatabaseCreated___block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 56) _initializeDatabaseNolock:*(void *)(a1 + 32) withProtection:*(unsigned __int8 *)(a1 + 72) sharedLock:*(void *)(a1 + 40) newDatabaseCreated:*(void *)(a1 + 64)];
  return MEMORY[0x1F41817F8]();
}

+ (id)_initializeDatabaseNolock:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6
{
  BOOL v8 = a4;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a5;
  uint64_t v28 = 0;
  id v29 = &v28;
  uint64_t v30 = 0x3032000000;
  SEL v31 = __Block_byref_object_copy__26977;
  char v32 = __Block_byref_object_dispose__26978;
  id v33 = 0;
  if (a6)
  {
    id v11 = [MEMORY[0x1E4F28CB8] defaultManager];
    char v12 = [v11 fileExistsAtPath:v9];

    *a6 = v12 ^ 1;
  }
  uint64_t v13 = [SGSqliteDatabase alloc];
  double v14 = (id *)(v29 + 5);
  id obj = (id)v29[5];
  id v15 = [(SGSqliteDatabase *)v13 initWithFilename:v9 withProtection:v8 sharedLock:v10 error:&obj];
  objc_storeStrong(v14, obj);
  if (v29[5])
  {
    id v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = v29[5];
      *(_DWORD *)long long buf = 138412546;
      id v35 = v9;
      __int16 v36 = 2112;
      uint64_t v37 = v23;
      _os_log_error_impl(&dword_1CA650000, v16, OS_LOG_TYPE_ERROR, "failed to initialize database at path %@: %@", buf, 0x16u);
    }

LABEL_7:
    char v17 = 0;
    goto LABEL_18;
  }
  if (v8 && ([MEMORY[0x1E4F93B10] isUnlocked] & 1) == 0)
  {
    long long v22 = sgLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v22, OS_LOG_TYPE_INFO, "device locked during db initialization", buf, 2u);
    }

    [(SGSqliteDatabase *)v15 closePermanently];
    goto LABEL_7;
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke;
  v26[3] = &unk_1E65BE468;
  void v26[4] = &v28;
  [(SGSqliteDatabase *)v15 prepAndRunQuery:@"CREATE TABLE IF NOT EXISTS integrityCheck (inconsequential STRING)" onPrep:0 onRow:0 onError:v26];
  if (v29[5]) {
    goto LABEL_13;
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_2;
  v25[3] = &unk_1E65BE468;
  void v25[4] = &v28;
  [(SGSqliteDatabase *)v15 prepAndRunQuery:@"PRAGMA journal_mode=WAL" onPrep:0 onRow:0 onError:v25];
  if (v29[5]
    || (v24[0] = MEMORY[0x1E4F143A8],
        v24[1] = 3221225472,
        v24[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_3,
        void v24[3] = &unk_1E65BE468,
        void v24[4] = &v28,
        [(SGSqliteDatabase *)v15 prepAndRunQuery:@"PRAGMA synchronous=NORMAL" onPrep:0 onRow:0 onError:v24], v29[5]))
  {
LABEL_13:
    id v18 = sgLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v18, OS_LOG_TYPE_DEFAULT, "Integrity check detected corrupt database, attempting to reinitialize.", buf, 2u);
    }

    +[SGAggregateLogging databaseCorruptionDetectedViaIntegrityCheck];
    [(SGSqliteDatabase *)v15 closePermanently];
    id v19 = [(SGSqliteDatabase *)v15 filename];
    uint64_t v20 = +[SGSqlEntityStore _recreateCorruptDatabase:v19 sharedLock:v10 withProtection:v8];

    if (a6) {
      *a6 = 1;
    }
  }
  else
  {
    uint64_t v20 = v15;
  }
  char v17 = v20;
  id v15 = v17;
LABEL_18:

  _Block_object_dispose(&v28, 8);
  return v17;
}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_2(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_3(uint64_t a1, void *a2)
{
  return 1;
}

+ (id)sqlStoreWithEntityDbPathNoMigrate:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  id v10 = a3;
  id v11 = a4;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:v10])
  {
    char v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_1CA650000, v12, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v15, 2u);
    }

    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (void *)[objc_alloc((Class)a1) initWithEntityDbPath:v10 snippetDbPath:v11 isEphemeral:v7 sharedLock:0 executeJournals:v6 noMigrate:1];
  }

  return v13;
}

+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v9 = a5;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:v12])
  {
    id v15 = sgLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1CA650000, v15, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v18, 2u);
    }

    id v16 = 0;
  }
  else
  {
    id v16 = (void *)[objc_alloc((Class)a1) initWithEntityDbPath:v12 snippetDbPath:v13 isEphemeral:v9 sharedLock:v14 executeJournals:v7 noMigrate:0];
  }

  return v16;
}

+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  id v10 = a3;
  id v11 = a4;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:v10])
  {
    id v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_1CA650000, v12, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v15, 2u);
    }

    id v13 = 0;
  }
  else
  {
    id v13 = (void *)[objc_alloc((Class)a1) initWithEntityDbPath:v10 snippetDbPath:v11 isEphemeral:v7 sharedLock:0 executeJournals:v6 noMigrate:0];
  }

  return v13;
}

+ (void)deletePreparedSqlStoreInMemory
{
  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  id v2 = (void *)emptySqlStoreInMemory;
  emptySqlStoreInMemory = 0;

  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);
}

+ (void)prepareSqlStoreInMemoryByClearingExistingStore:(id)a3
{
  id v4 = a3;
  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  if (!emptySqlStoreInMemory)
  {
    [v4 clearAllTables];
    objc_storeStrong((id *)&emptySqlStoreInMemory, a3);
  }
  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);
}

+ (void)prepareSqlStoreInMemory
{
  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  if (!emptySqlStoreInMemory)
  {
    id v2 = +[SGSqliteDatabase inMemoryPath];
    uint64_t v3 = +[SGSqlEntityStore sqlStoreWithEntityDbPath:v2 snippetDbPath:v2 isEphemeral:1 executeJournals:1];
    id v4 = (void *)emptySqlStoreInMemory;
    emptySqlStoreInMemory = v3;

    uint64_t v5 = [(id)emptySqlStoreInMemory journal];
    [v5 freezeObservers];
  }
  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);
}

+ (id)sqlStoreInMemory
{
  if (!emptySqlStoreInMemory
    || (pthread_mutex_lock(&emptySqlStoreInMemoryLock),
        id v2 = (id)emptySqlStoreInMemory,
        uint64_t v3 = (void *)emptySqlStoreInMemory,
        emptySqlStoreInMemory = 0,
        v3,
        pthread_mutex_unlock(&emptySqlStoreInMemoryLock),
        !v2))
  {
    id v4 = +[SGSqliteDatabase inMemoryPath];
    id v2 = +[SGSqlEntityStore sqlStoreWithEntityDbPath:v4 snippetDbPath:v4 isEphemeral:1 executeJournals:1];
    uint64_t v5 = [v2 journal];
    [v5 freezeObservers];
  }
  return v2;
}

+ (id)defaultHarvestStore
{
  pthread_mutex_lock(&defaultHarvestStore_harvestStoreInitLock);
  if (!defaultHarvestStore_instance)
  {
    id v2 = sgLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_1CA650000, v2, OS_LOG_TYPE_INFO, "Attempting to instantiate the shared harvest store", v7, 2u);
    }

    uint64_t v3 = +[SGSqlEntityStore storeWithDefaultLocationAndExecuteJournals:0];
    id v4 = (void *)defaultHarvestStore_instance;
    defaultHarvestStore_instance = v3;
  }
  pthread_mutex_unlock(&defaultHarvestStore_harvestStoreInitLock);
  uint64_t v5 = (void *)defaultHarvestStore_instance;
  return v5;
}

+ (SGSqlEntityStore)storeWithDefaultLocationAndExecuteJournals:(BOOL)a3
{
  BOOL v3 = a3;
  if ([MEMORY[0x1E4F93B10] isClassCLocked])
  {
    uint64_t v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "Suggestions entity store cannot be opened before first unlock", buf, 2u);
    }
LABEL_8:
    BOOL v7 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = +[SGSqlEntityStore defaultPath];
  if (+[SGSqlEntityStore pathHasFutureDbSchema:v5])
  {
    BOOL v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v25 = 0;
      _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "entity store is known to have a future schema. Giving up on store initialization.", v25, 2u);
    }

    goto LABEL_8;
  }
  if (storeWithDefaultLocationAndExecuteJournals___pasOnceToken5 != -1) {
    dispatch_once(&storeWithDefaultLocationAndExecuteJournals___pasOnceToken5, &__block_literal_global_27436);
  }
  id v9 = (id)storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult;
  id v10 = objc_alloc((Class)a1);
  id v11 = +[SGSqlEntityStore defaultSnippetPath];
  BOOL v7 = (void *)[v10 initWithEntityDbPath:v5 snippetDbPath:v11 isEphemeral:0 sharedLock:v9 executeJournals:v3 noMigrate:0];

  if (v7)
  {
    id v12 = [v7 journal];
    id v13 = [[SGEKCalendarAdapter alloc] initWithSGSqlEntityStore:v7];
    [v12 addCalendarObserver:v13];

    id v14 = [v7 journal];
    id v15 = [[SGDCloudKitSyncObserver alloc] initWithCloudKitSyncGetter:&__block_literal_global_34];
    [v14 addCalendarObserver:v15];

    id v16 = [v7 journal];
    char v17 = [v7 spotlightContactsAdapter];
    [v16 addContactsObserver:v17];

    id v18 = [v7 journal];
    id v19 = [v7 sgToCNContactsCacheUpdateAdapter];
    [v18 addContactsObserver:v19];

    uint64_t v20 = [v7 journal];
    id v21 = [[SGRemindersAdapter alloc] initWithSGSqlEntityStore:v7];
    [v20 addRemindersObserver:v21];

    long long v22 = [v7 journal];
    uint64_t v23 = objc_opt_new();
    [v22 addCalendarObserver:v23];

    uint64_t v24 = [v7 journal];
    [v24 freezeObservers];
  }
LABEL_9:

  return (SGSqlEntityStore *)v7;
}

SGDCloudKitSync *__63__SGSqlEntityStore_storeWithDefaultLocationAndExecuteJournals___block_invoke_2()
{
  return +[SGDCloudKitSync sharedInstance];
}

void __63__SGSqlEntityStore_storeWithDefaultLocationAndExecuteJournals___block_invoke()
{
  id v0 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult;
  storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult = v1;
}

+ (id)defaultSnippetPath
{
  return +[SGPaths suggestionsDirectoryFile:@"snippets.db"];
}

+ (id)defaultPath
{
  return (id)[a1 defaultPathCreatingSuggestionsDirectoryIfNeeded:1];
}

+ (id)defaultPathCreatingSuggestionsDirectoryIfNeeded:(BOOL)a3
{
  return +[SGPaths suggestionsDirectoryFile:@"entities.db" creatingSuggestionsDirectoryIfNeeded:a3];
}

- (void)stopJournaling
{
  id v2 = self;
  objc_sync_enter(v2);
  if ([(SGDatabaseJournal *)v2->_snippetsJournal journaling])
  {
    BOOL v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "stopping journaling", buf, 2u);
    }

    snippetDb = v2->_snippetDb;
    if (snippetDb
      || (+[SGSqlEntityStore initializeDatabase:v2->_snippetDbPath withProtection:1 sharedLock:v2->_sharedWriteLock newDatabaseCreated:0], uint64_t v5 = objc_claimAutoreleasedReturnValue(), v6 = v2->_snippetDb, v2->_snippetDb = (SGSqliteDatabase *)v5, v6, (snippetDb = v2->_snippetDb) != 0))
    {
      if (!v2->_executeJournals)
      {
        BOOL v8 = sgLogHandle();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)id v12 = 0;
          _os_log_debug_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEBUG, "non-primary store not executing journals", v12, 2u);
        }

        goto LABEL_15;
      }
      if ([(SGSqliteDatabase *)snippetDb userVersion] <= 4)
      {
        BOOL v7 = sgLogHandle();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)id v11 = 0;
          _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_INFO, "Ignoring existing journal because there is no snippet database.", v11, 2u);
        }

        [(SGDatabaseJournal *)v2->_snippetsJournal deleteAllJournaledQueries];
        goto LABEL_15;
      }
      if ([(SGDatabaseJournal *)v2->_snippetsJournal executeQueriesOnDatabase:v2->_snippetDb])
      {
LABEL_15:
        [(SGDatabaseJournal *)v2->_snippetsJournal stopJournaling];
        goto LABEL_21;
      }
      id v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEFAULT, "tried to replay journal to snippets and something failed, so will try again later.", v10, 2u);
      }
    }
    else
    {
      id v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v13 = 0;
        _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "Failed to reopen snippets database while trying to replay journals, will try again later", v13, 2u);
      }
    }
  }
LABEL_21:
  objc_sync_exit(v2);
}

- (void)startJournaling
{
}

- (void)registerJournalUnlockHandler
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (self->_lockStateNotificationRegistrationToken)
  {
    id v12 = [MEMORY[0x1E4F28B00] currentHandler];
    [v12 handleFailureInMethod:a2, self, @"SGSqlEntityStore+ContentProtection.m", 92, @"Invalid parameter not satisfying: %@", @"!_lockStateNotificationRegistrationToken" object file lineNumber description];
  }
  locatiouint64_t n = 0;
  objc_initWeak(&location, self);
  BOOL v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("SGSqlEntityStore-lockStateQueue", v3);

  uint64_t v5 = (void *)MEMORY[0x1E4F93B10];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke;
  void v13[3] = &unk_1E65BF2B8;
  BOOL v6 = v4;
  id v14 = v6;
  objc_copyWeak(&v15, &location);
  BOOL v7 = [v5 registerForLockStateChangeNotifications:v13];
  lockStateNotificationRegistrationTokeuint64_t n = self->_lockStateNotificationRegistrationToken;
  self->_lockStateNotificationRegistrationTokeuint64_t n = v7;

  int v9 = [MEMORY[0x1E4F93B10] lockState];
  [(SGSqlEntityStore *)self startJournaling];
  id v10 = sgLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v18 = v9;
    _os_log_impl(&dword_1CA650000, v10, OS_LOG_TYPE_INFO, "Initial lock state is: %d", buf, 8u);
  }

  if ((v9 - 3) <= 0xFFFFFFFD) {
    [(SGSqlEntityStore *)self stopJournaling];
  }
  objc_destroyWeak(&v15);

  objc_destroyWeak(&location);
}

void __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke(uint64_t a1, int a2)
{
  BOOL v3 = *(NSObject **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke_2;
  v4[3] = &unk_1E65BF290;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  int v6 = a2;
  dispatch_async(v3, v4);
  objc_destroyWeak(&v5);
}

void __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleDeviceLockStateEvent:*(unsigned int *)(a1 + 40)];
}

- (void)handleDeviceLockStateEvent:(int)a3
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __66__SGSqlEntityStore_ContentProtection__handleDeviceLockStateEvent___block_invoke;
  void v6[3] = &unk_1E65BB5B8;
  int v7 = a3;
  void v6[4] = self;
  dispatch_queue_t v4 = (void (**)(void))MEMORY[0x1CB79B4C0](v6, a2);
  sharedWriteLocuint64_t k = self->_sharedWriteLock;
  if (sharedWriteLock) {
    [(SGSqliteDatabaseSharedLock *)sharedWriteLock runWithLockAcquired:v4];
  }
  else {
    v4[2](v4);
  }
}

void __66__SGSqlEntityStore_ContentProtection__handleDeviceLockStateEvent___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = [MEMORY[0x1E4F93B10] lockState];
  int v3 = v2;
  int v4 = v2;
  if (v2 != 1)
  {
    if (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 40) == 1) {
        int v4 = 1;
      }
      else {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = *(_DWORD *)(a1 + 40);
    }
  }
  id v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 40);
    v7[0] = 67109632;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v6;
    __int16 v10 = 1024;
    int v11 = v3;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEFAULT, "entity store notified of device lock state change to %d (es=%d, cs=%d)", (uint8_t *)v7, 0x14u);
  }

  if ((v4 - 1) < 2)
  {
    [*(id *)(a1 + 32) startJournaling];
  }
  else if (!v4 || v4 == 3)
  {
    [*(id *)(a1 + 32) stopJournaling];
  }
}

- (void)tryExecuteSnippetsJournal
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  snippetDb = self->_snippetDb;
  [(SGSqlEntityStore *)self startJournaling];
  int v4 = [MEMORY[0x1E4F93B10] lockState];
  id v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109120;
    v8[1] = v4;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_INFO, "Initial lock state is: %d", (uint8_t *)v8, 8u);
  }

  if ((v4 - 3) <= 0xFFFFFFFD) {
    [(SGSqlEntityStore *)self stopJournaling];
  }
  if (!snippetDb)
  {
    int v6 = self->_snippetDb;
    if (v6)
    {
      [(SGSqliteDatabase *)v6 closePermanently];
      int v7 = self->_snippetDb;
      self->_snippetDb = 0;
    }
  }
}

+ (id)journalNameForDbPath:(id)a3
{
  int v3 = [a3 lastPathComponent];
  int v4 = [v3 stringByDeletingPathExtension];

  return v4;
}

- (id)loadExtractionInfoForPrimaryKey:(int64_t)a3
{
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke;
  void v15[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v15[4] = a3;
  int v4 = (void *)MEMORY[0x1CB79B4C0](v15, a2);
  uint64_t v9 = 0;
  __int16 v10 = &v9;
  uint64_t v11 = 0x3032000000;
  uint64_t v12 = __Block_byref_object_copy__33696;
  id v13 = __Block_byref_object_dispose__33697;
  id v14 = 0;
  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke_13;
  void v8[3] = &unk_1E65C03F8;
  void v8[4] = &v9;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT extractionType, modelVersion, confidence FROM extractionInfos WHERE id = :primaryKey" onPrep:v4 onRow:v8 onError:0];
  id v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

uint64_t __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke_13(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getInt64ForColumn:0];
  [v3 getDoubleForColumn:1];
  double v6 = v5;
  [v3 getDoubleForColumn:2];
  double v8 = v7;

  uint64_t v9 = (void *)MEMORY[0x1E4F5DA20];
  __int16 v10 = [NSNumber numberWithDouble:v6];
  uint64_t v11 = [NSNumber numberWithDouble:v8];
  uint64_t v12 = [v9 extractionInfoWithExtractionType:v4 modelVersion:v10 confidence:v11];
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return 1;
}

- (unint64_t)commitExtractionInfo:(id)a3
{
  id v4 = a3;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke;
  void v19[3] = &unk_1E65C0388;
  id v5 = v4;
  id v20 = v5;
  double v6 = (void *)MEMORY[0x1CB79B4C0](v19);
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke_2;
  v11[3] = &unk_1E65C03B0;
  void v11[4] = self;
  uint64_t v12 = @"INSERT INTO extractionInfos (extractionType, modelVersion, confidence) VALUES (:extractionType, :modelVersion, :confidence)";
  id v8 = v6;
  id v13 = v8;
  id v14 = &v15;
  [(SGSqliteDatabase *)db writeTransaction:v11];
  unint64_t v9 = v16[3];

  _Block_object_dispose(&v15, 8);
  return v9;
}

void __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":extractionType", objc_msgSend(v3, "extractionType"));
  id v5 = [*(id *)(a1 + 32) modelVersion];
  [v5 doubleValue];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":modelVersion");

  id v6 = [*(id *)(a1 + 32) confidence];
  [v6 doubleValue];
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":confidence");
}

sqlite3_int64 __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke_2(void *a1)
{
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[6] onRow:0 onError:0];
  sqlite3_int64 result = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(a1[4] + 8) handle]);
  *(void *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

- (int64_t)migration_addAppleMailMessageIdToEvents
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_466;
  v5[3] = &unk_1E65BE468;
  void v5[4] = &v6;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"INSERT INTO eventTags (eventId, name) SELECT events.id, _pas_block(:getAMSGTagBlock, emailMetadata.tags) AS amsgTag FROM events INNER JOIN entityParentage ON events.entityId == entityParentage.childId INNER JOIN emailMetadata ON emailMetadata.key == _pas_block(:getEmailKeyFromDuplicateKeyBlock, entityParentage.parentKey) WHERE amsgTag IS NOT NULL RETURNING eventId, name" onPrep:&__block_literal_global_449 onRow:&__block_literal_global_463 onError:v5];
  int64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_466(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  id v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_fault_impl(&dword_1CA650000, v4, OS_LOG_TYPE_FAULT, "migration_addAppleMailMessageIdToEvents failed: %@", (uint8_t *)&v6, 0xCu);
  }

  if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
    abort();
  }

  return *MEMORY[0x1E4F93C10];
}

uint64_t __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [v2 nonnullNSStringForColumnName:"name" table:"eventTags"];
    id v5 = [v2 nonnullNSStringForColumnName:"eventId" table:"eventTags"];
    int v7 = 138543618;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    __int16 v10 = v5;
    _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEFAULT, "migration_addAppleMailMessageIdToEvents: Adding tag %{public}@ to event %{public}@", (uint8_t *)&v7, 0x16u);
  }
  return *MEMORY[0x1E4F93C08];
}

void __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 bindNamedParam:":getAMSGTagBlock" toBlock:&__block_literal_global_453];
  [v2 bindNamedParam:":getEmailKeyFromDuplicateKeyBlock" toBlock:&__block_literal_global_461_34327];
}

id __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 objectAtIndexedSubscript:0];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v5 = [v2 objectAtIndexedSubscript:0];
    int v6 = SGDelimitedStringsDeserialize();

    if (([v6 count] == 2 || objc_msgSend(v6, "count") == 3)
      && ([v6 objectAtIndexedSubscript:0],
          int v7 = objc_claimAutoreleasedReturnValue(),
          uint64_t v8 = [v7 integerValue],
          v7,
          v8 == 5))
    {
      uint64_t v9 = [v6 objectAtIndexedSubscript:1];
    }
    else
    {
      uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
    }
    __int16 v10 = (void *)v9;
  }
  else
  {
    __int16 v10 = [MEMORY[0x1E4F1CA98] null];
  }

  return v10;
}

id __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 objectAtIndexedSubscript:0];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x3032000000;
    id v13 = __Block_byref_object_copy__34329;
    id v14 = __Block_byref_object_dispose__34330;
    id v15 = 0;
    id v5 = [v2 objectAtIndexedSubscript:0];
    SGDelimitedStringsDeserializeWithBlock();

    int v6 = (void *)v11[5];
    if (v6)
    {
      id v7 = v6;
    }
    else
    {
      id v7 = [MEMORY[0x1E4F1CA98] null];
    }
    uint64_t v8 = v7;
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    uint64_t v8 = [MEMORY[0x1E4F1CA98] null];
  }

  return v8;
}

void __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_3(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 hasPrefix:@"AMSG:"]) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

- (int64_t)migration_deleteNilDateEvents
{
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 4;
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x3032000000;
  v11[3] = __Block_byref_object_copy__34329;
  void v11[4] = __Block_byref_object_dispose__34330;
  id v12 = 0;
  id v12 = (id)objc_opt_new();
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke;
  void v10[3] = &unk_1E65C03F8;
  void v10[4] = v11;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_2;
  v9[3] = &unk_1E65BE468;
  void v9[4] = &v13;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id, whenRange FROM events" onPrep:0 onRow:v10 onError:v9];
  if (v14[3] == 2)
  {
    int64_t v4 = 2;
  }
  else
  {
    id v5 = self->_db;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_3;
    void v8[3] = &unk_1E65BE490;
    void v8[4] = v11;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_4;
    void v7[3] = &unk_1E65BE468;
    void v7[4] = &v13;
    [(SGSqliteDatabase *)v5 prepAndRunSQL:@"DELETE FROM events WHERE id IN _pas_nsarray(:ids)" onPrep:v8 onRow:0 onError:v7];
    int64_t v4 = v14[3];
  }
  _Block_object_dispose(v11, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int64_t v4 = [v3 getNSStringForColumnName:"whenRange" table:"events"];
  id v5 = SGDelimitedStringsDeserialize();
  if ([v5 count] != 4) {
    goto LABEL_4;
  }
  int v6 = [v5 objectAtIndexedSubscript:0];
  [v6 doubleValue];
  double v8 = v7;

  uint64_t v9 = [v5 objectAtIndexedSubscript:2];
  [v9 doubleValue];
  double v11 = v10;

  if (v8 == 0.0 || v11 == 0.0)
  {
LABEL_4:
    uint64_t v12 = [v3 getInt64ForColumnName:"id" table:"events"];
    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    id v14 = [NSNumber numberWithLongLong:v12];
    [v13 addObject:v14];
  }
  return 0;
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_newEventsSchema
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  char v5 = 1;
  do
  {
    char v6 = v5;
    double v7 = [(SGSqlEntityStore *)self allEntitiesOfType:qword_1CA8CB520[v4] limitedTo:10000 onlyMLExtractions:0];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = +[SGStorageEvent storageEventFromEntity:*(void *)(*((void *)&v14 + 1) + 8 * i)];
          v3 |= [(SGSqlEntityStore *)self commitEvent:v12] < 0;
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }

    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  if (v3) {
    return 2;
  }
  else {
    return 4;
  }
}

- (int64_t)migration_newContactDetailsSchema
{
  db = self->_db;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke_2;
  v4[3] = &unk_1E65BFF78;
  void v4[4] = self;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id FROM entity WHERE entityType = :entityType LIMIT :limit" onPrep:&__block_literal_global_431 onRow:v4 onError:0];
  return 4;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a2 getInt64ForColumn:0];
  uint64_t v4 = *(void **)(a1 + 32);
  char v5 = [MEMORY[0x1E4F5DB20] recordIdWithInternalEntityId:v3];
  char v6 = [v4 loadAllContactDetailsForRecordId:v5];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(a1 + 32), "commitContactDetail:", *(void *)(*((void *)&v13 + 1) + 8 * v11++), (void)v13);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }

  return 0;
}

void __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 bindNamedParam:":entityType" toInt64:4];
  [v2 bindNamedParam:":limit" toInt64:10000];
}

- (int64_t)migration_newRemindersSchema
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  [(SGSqlEntityStore *)self allEntitiesOfType:22 limitedTo:10000 onlyMLExtractions:0];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [obj countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    char v6 = 0;
    uint64_t v7 = *(void *)v19;
    *(void *)&long long v4 = 138543618;
    long long v16 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v10 = +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v9, self, v16);
        uint64_t v11 = sgRemindersLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = [v9 loggingIdentifier];
          long long v13 = [v10 loggingIdentifier];
          *(_DWORD *)long long buf = v16;
          uint64_t v23 = v12;
          __int16 v24 = 2114;
          uint64_t v25 = v13;
          _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, "Entity %{public}@ -> SGStorageReminder %{public}@", buf, 0x16u);
        }
        v6 |= [v10 commitWithStore:self] < 0;
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v5);
    if (v6) {
      int64_t v14 = 2;
    }
    else {
      int64_t v14 = 4;
    }
  }
  else
  {
    int64_t v14 = 4;
  }

  return v14;
}

- (int64_t)migration_deleteSerializedContacts
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 4;
  uint64_t v3 = objc_opt_new();
  [v3 replaceCacheOfType:0 block:&__block_literal_global_420];

  long long v4 = objc_opt_new();
  [v4 replaceCacheOfType:1 block:&__block_literal_global_422];

  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_3;
  void v8[3] = &unk_1E65BE468;
  void v8[4] = &v9;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"DELETE FROM serializedContacts" onPrep:0 onRow:0 onError:v8];
  self->_entityMigrationRequiresMergeBlobUpdate = 1;
  int64_t v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_3(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_2()
{
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke()
{
  return 1;
}

- (int64_t)migration_deleteInternalExtractionsFromML
{
  return 4;
}

- (int64_t)migration_deleteEmergencyExtractions
{
  return 4;
}

- (int64_t)migration_reimport
{
  return 4;
}

- (int64_t)migration_deleteInteractions
{
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v28 = 4;
  uint64_t v21 = 0;
  long long v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 0;
  do
  {
    long long v4 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v17 = 0;
    long long v18 = &v17;
    uint64_t v19 = 0x2020000000;
    uint64_t v20 = 0;
    uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:100];
    db = self->_db;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_2;
    v12[3] = &unk_1E65BE578;
    SEL v16 = a2;
    void v12[4] = self;
    id v7 = v5;
    id v13 = v7;
    int64_t v14 = &v17;
    long long v15 = &v21;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_416;
    v11[3] = &unk_1E65BE468;
    void v11[4] = &v25;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT key FROM emailMetadata WHERE type = :interactionType LIMIT :batchSize" onPrep:&__block_literal_global_408_34358 onRow:v12 onError:v11];
    BOOL v8 = v26[3] == 4
      && ([(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v7 emitChangeNotifications:0], v26[3] == 4)&& v18[3] == 100&& (unint64_t)v22[3] >> 4 < 0xC35;

    _Block_object_dispose(&v17, 8);
  }
  while (v8);
  int64_t v9 = v26[3];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v9;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  if (!v3)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:*(void *)(a1 + 64), *(void *)(a1 + 32), @"SGSqlEntityStore+DatabaseMigrator.m", 1523, @"Invalid parameter not satisfying: %@", @"serializedInteractionKey" object file lineNumber description];
  }
  long long v4 = [(SGMessageKey *)[SGInteractionKey alloc] initWithSerialized:v3];
  if (v4)
  {
    uint64_t v5 = [[SGDuplicateKey alloc] initWithEntityKey:v4 entityType:16 parentKey:0];
    [*(id *)(a1 + 40) addObject:v5];
  }
  else
  {
    sgLogHandle();
    uint64_t v5 = (SGDuplicateKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v5->super, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, &v5->super, OS_LOG_TYPE_DEFAULT, "discarding ill-formatted serialized interaction key", buf, 2u);
    }
  }

  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return 0;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_416(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Error during migration_deleteInteractions: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":interactionType" int64:16];
  return +[SGSqliteDatabase bindParam:a2 name:":batchSize" int64:100];
}

- (int64_t)migration_rebuildFTSWithDetailEntityIDDocIDs
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 4;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEBUG, "starting rebuildFTSWithDetailEntityIDDocIDs", buf, 2u);
  }

  [(SGSqlEntityStore *)self _prepareToCopyFrom:@"entity_fts_docidfix_backup" toNewTableNamed:@"entity_fts"];
  uint64_t v5 = [MEMORY[0x1E4F1B9A8] sharedDefaults];
  int v6 = [v5 countryCode];
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    int64_t v9 = [MEMORY[0x1E4F1CA20] currentLocale];
    id v8 = [v9 objectForKey:*MEMORY[0x1E4F1C400]];
  }
  db = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke;
  v17[3] = &unk_1E65BE550;
  SEL v20 = a2;
  void v17[4] = self;
  id v11 = v8;
  id v18 = v11;
  uint64_t v19 = &v22;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_394;
  v16[3] = &unk_1E65BE468;
  void v16[4] = &v22;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id, entityType, title, groupId, entityKey FROM entity " onPrep:0 onRow:v17 onError:v16];
  if (v23[3] == 4)
  {
    uint64_t v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v12, OS_LOG_TYPE_DEBUG, "rebuildFTSWithDetailEntityIDDocIDs: success. Deleting backup table.", buf, 2u);
    }

    [(SGSqliteDatabase *)self->_db prepAndRunNonDataQueries:&unk_1F2536BD8 onError:&__block_literal_global_403];
  }
  else
  {
    id v13 = sgLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1CA650000, v13, OS_LOG_TYPE_DEBUG, "rebuildFTSWithDetailEntityIDDocIDs: failed. Moving old table back.", buf, 2u);
    }

    [(SGSqlEntityStore *)self _renameTable:@"entity_fts_docidfix_backup" to:@"entity_fts"];
  }
  int64_t v14 = v23[3];

  _Block_object_dispose(&v22, 8);
  return v14;
}

BOOL __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke(void *a1, sqlite3_stmt *a2)
{
  long long v4 = (void *)MEMORY[0x1CB79B230]();
  uint64_t v5 = objc_opt_new();
  int v6 = objc_opt_new();
  sqlite3_int64 v7 = sqlite3_column_int64(a2, 0);
  sqlite3_int64 v8 = sqlite3_column_int64(a2, 1);
  int64_t v9 = sqlite3_column_nsstring(a2, 2);
  sqlite3_int64 v10 = sqlite3_column_int64(a2, 3);
  if ((unint64_t)(v8 - 7) < 2)
  {
    if ([v9 length]) {
      [v6 addObject:v9];
    }
  }
  else if (v8 == 4)
  {
    if ([v9 length]) {
      [v5 addObject:v9];
    }
    sqlite3_int64 v23 = v7;
    uint64_t v24 = v4;
    uint64_t v12 = sqlite3_column_nsstring(a2, 4);
    if (!v12)
    {
      uint64_t v22 = [MEMORY[0x1E4F28B00] currentHandler];
      [v22 handleFailureInMethod:a1[7], a1[4], @"SGSqlEntityStore+DatabaseMigrator.m", 1424, @"Invalid parameter not satisfying: %@", @"serializedEntityKey" object file lineNumber description];
    }
    id v13 = [[SGPseudoContactKey alloc] initWithSerialized:v12];
    int64_t v14 = [(SGPseudoContactKey *)v13 identityKey];
    long long v15 = [v14 uniqueIdentifier];
    [v6 addObject:v15];

    sqlite3_int64 v7 = v23;
    long long v4 = v24;
  }
  else if (v8 == 6 && ([v9 containsString:@";"] & 1) == 0 && a1[5])
  {
    id v11 = (void *)_PNCopyIndexStringsForAddressBookSearch();
    if (v11) {
      [v5 addObjectsFromArray:v11];
    }
  }
  uint64_t v16 = [v5 count];
  if (v16 + [v6 count])
  {
    uint64_t v17 = a1[4];
    id v18 = *(void **)(v17 + 8);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_2;
    v25[3] = &unk_1E65BE528;
    void v25[4] = v17;
    sqlite3_int64 v29 = v7;
    sqlite3_int64 v30 = v8;
    sqlite3_int64 v31 = v10;
    id v26 = v5;
    id v19 = v6;
    uint64_t v20 = a1[6];
    id v27 = v19;
    uint64_t v28 = v20;
    [v18 writeTransaction:v25];
  }
  return *(void *)(*(void *)(a1[6] + 8) + 24) != 4;
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_394(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Error during rebuildFTSWithDetailEntityIDDocIDs: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_401(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "failed to drop backup table: entity_fts_docidfix_backup: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_3;
  v4[3] = &unk_1E65BE500;
  long long v7 = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_4;
  v3[3] = &unk_1E65BE468;
  void v3[4] = *(void *)(a1 + 56);
  [v2 prepAndRunQuery:@"INSERT OR REPLACE INTO entity_fts(docid, entityId, messagingTerms, ftsTerms) VALUES(?, ?, ?, ?)", v4, 0, v3 onPrep onRow onError];
}

void __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 48));
  int IsContactDetail = SGEntityTypeIsContactDetail();
  uint64_t v5 = 48;
  if (IsContactDetail) {
    uint64_t v5 = 64;
  }
  sqlite3_bind_int64(a2, 2, *(void *)(a1 + v5));
  objc_msgSend(*(id *)(a1 + 32), "_pas_componentsJoinedByString:", @" ");
  id v6 = objc_claimAutoreleasedReturnValue();
  sqlite3_bind_text(a2, 3, (const char *)[v6 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  long long v7 = *(void **)(a1 + 40);
  if (v7)
  {
    objc_msgSend(v7, "_pas_componentsJoinedByString:", @" ");
    id v8 = objc_claimAutoreleasedReturnValue();
    sqlite3_bind_text(a2, 4, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sqlite3_bind_null(a2, 4);
  }
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Erroring trying to reinsert FTS row: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_separateMessageSnippets
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 4;
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke;
  void v6[3] = &unk_1E65BFDD0;
  void v6[4] = self;
  void v6[5] = &v7;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_372;
  v5[3] = &unk_1E65BE468;
  void v5[4] = &v7;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id FROM emailMetadata" onPrep:0 onRow:v6 onError:v5];
  int64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

BOOL __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3 = sqlite3_column_int64(a2, 0);
  long long v4 = *(void **)(*(void *)(a1 + 32) + 24);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2;
  void v10[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v10[4] = v3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_3;
  v9[3] = &unk_1E65BE468;
  void v9[4] = *(void *)(a1 + 40);
  [v4 prepAndRunQuery:@"INSERT INTO emailSnippets (emailId, title, content) SELECT entityId, title, content FROM snippets WHERE entityId = :rowId", v10, 0, v9 onPrep onRow onError];
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 24);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_370;
  void v8[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  void v8[4] = v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2_371;
  void v7[3] = &unk_1E65BE468;
  void v7[4] = *(void *)(a1 + 40);
  [v5 prepAndRunQuery:@"DELETE FROM snippets WHERE entityId = :rowId" onPrep:v8 onRow:0 onError:v7];
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 4;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_372(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Error selecting source document ids from emailMetadata: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":rowId" int64:*(void *)(a1 + 32)];
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to populate source document snippets in emailSnippets: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_370(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":rowId" int64:*(void *)(a1 + 32)];
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2_371(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to delete source document snippets from legacy table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_separateMessageEntities
{
  uint64_t v13 = 0;
  int64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 4;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2;
  v12[3] = &unk_1E65BE468;
  void v12[4] = &v13;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"INSERT INTO emailMetadata     (id, key, type, sourceKey, author, creationTimestamp, updateTimestamp, indexTimestamp, lastSeenTimestamp,      tags, state, downloadState, harvestedOnBuild) SELECT e.id, e.entityKey, e.entityType, ep.sourceKey, e.author, e.creationTimestamp, e.updateTimestamp, e.indexTimestamp,     e.lastSeenTimestamp, e.tags, e.state, e.downloadState, e.harvestedOnBuild FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType IN (:email, :textMessage)" onPrep:&__block_literal_global_336 onRow:0 onError:v12];
  long long v4 = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_345;
  v11[3] = &unk_1E65BE468;
  void v11[4] = &v13;
  [(SGSqliteDatabase *)v4 prepAndRunQuery:@"DELETE FROM entityParentage WHERE childId IN (SELECT id FROM entity WHERE entityType IN (:email, :textMessage))" onPrep:&__block_literal_global_344 onRow:0 onError:v11];
  uint64_t v5 = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_352;
  void v10[3] = &unk_1E65BE468;
  void v10[4] = &v13;
  [(SGSqliteDatabase *)v5 prepAndRunQuery:@"DELETE FROM entity WHERE entityType IN (:email, :textMessage)" onPrep:&__block_literal_global_351 onRow:0 onError:v10];
  int v6 = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_359;
  v9[3] = &unk_1E65BE468;
  void v9[4] = &v13;
  [(SGSqliteDatabase *)v6 prepAndRunQuery:@"INSERT INTO emailTags (key, type, tag) SELECT entityKey, entityType, tag FROM entityTags WHERE entityType IN (:email, :textMessage)" onPrep:&__block_literal_global_358 onRow:0 onError:v9];
  int64_t v7 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v7;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to copy entities into emailMetadata: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_345(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to deparent source documents found in entityParentage: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_352(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to delete source documents from entity table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_359(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to populate source document tags: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_356(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":email" int64:5];
  return +[SGSqliteDatabase bindParam:a2 name:":textMessage" int64:13];
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_349(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":email" int64:5];
  return +[SGSqliteDatabase bindParam:a2 name:":textMessage" int64:13];
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_342(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":email" int64:5];
  return +[SGSqliteDatabase bindParam:a2 name:":textMessage" int64:13];
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":email" int64:5];
  return +[SGSqliteDatabase bindParam:a2 name:":textMessage" int64:13];
}

- (int64_t)migration_FixupMergeGroups
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke_2;
  v5[3] = &unk_1E65BE468;
  void v5[4] = &v6;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"UPDATE entity SET masterEntityId = -1 WHERE entityType IN (:pseudo, :unrec)" onPrep:&__block_literal_global_329 onRow:0 onError:v5];
  if (v7[3] == 4) {
    self->_entityMigrationRequiresMergeBlobUpdate = 1;
  }
  _Block_object_dispose(&v6, 8);
  return 4;
}

uint64_t __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to clear masterEntityIds from migration_FixupMergeGroups: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":pseudo" int64:4];
  return +[SGSqliteDatabase bindParam:a2 name:":unrec" int64:12];
}

- (int64_t)migration_RemoveEntityReferencesWithoutBundleIdentifier
{
  return 4;
}

- (int64_t)migration_DropMessagingTermsWithPhoneExtensions
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke_2;
  v5[3] = &unk_1E65BE468;
  void v5[4] = &v6;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"DELETE FROM entity_fts WHERE messagingTerms GLOB :semicolon" onPrep:&__block_literal_global_320_34446 onRow:0 onError:v5];
  int64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to delete messaging terms with semicolons. Error: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":semicolon" nsstring:@"*[0-9;];[0-9;]*"];
}

- (int64_t)migration_ConvertContentAndDupKeyHashesToBlobs
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (sqlite3_create_function_v2([(SGSqliteDatabase *)self->_db handle], "hashHexToBlob", 1, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))hashHexToBlob, 0, 0, 0))
  {
    id v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Could not install hashHexToBlob() sqlite function", buf, 2u);
    }

    return 2;
  }
  else
  {
    *(void *)long long buf = 0;
    int64_t v14 = buf;
    uint64_t v15 = 0x2020000000;
    uint64_t v16 = 4;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v5 = [&unk_1F2536BC0 countByEnumeratingWithState:&v9 objects:v17 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v10;
LABEL_7:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(&unk_1F2536BC0);
        }
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](self->_db, "prepAndRunQuery:onPrep:onRow:onError:");
        if (*((void *)v14 + 3) != 4) {
          break;
        }
        if (v5 == ++v7)
        {
          uint64_t v5 = [&unk_1F2536BC0 countByEnumeratingWithState:&v9 objects:v17 count:16];
          if (v5) {
            goto LABEL_7;
          }
          break;
        }
      }
    }
    int64_t v4 = *((void *)v14 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v4;
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator__migration_ConvertContentAndDupKeyHashesToBlobs__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to set blob value in migration query: %@: Error: %@", (uint8_t *)&v7, 0x16u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_DeduplicateIdentityPhones
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  [(SGSqliteDatabase *)db writeTransaction:v5];
  int64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DROP TABLE IF EXISTS identityPhonesDeduped" onPrep:0 onRow:0 onError:0];
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_2;
  void v13[3] = &unk_1E65BE468;
  void v13[4] = *(void *)(a1 + 40);
  uint64_t result = [v2 prepAndRunQuery:@"CREATE TEMP TABLE identityPhonesDeduped AS SELECT DISTINCT * FROM identityPhones" onPrep:0 onRow:0 onError:v13];
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(v4 + 8) + 24) == 4)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_294;
    v12[3] = &unk_1E65BE468;
    void v12[4] = v4;
    uint64_t result = [v5 prepAndRunQuery:@"DELETE FROM identityPhones" onPrep:0 onRow:0 onError:v12];
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(*(void *)(v6 + 8) + 24) == 4)
    {
      int v7 = *(void **)(*(void *)(a1 + 32) + 8);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_298;
      v11[3] = &unk_1E65BE468;
      void v11[4] = v6;
      uint64_t result = [v7 prepAndRunQuery:@"INSERT INTO identityPhones SELECT * FROM identityPhonesDeduped" onPrep:0 onRow:0 onError:v11];
      uint64_t v8 = *(void *)(a1 + 40);
      if (*(void *)(*(void *)(v8 + 8) + 24) == 4)
      {
        uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8);
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_302;
        void v10[3] = &unk_1E65BE468;
        void v10[4] = v8;
        return [v9 prepAndRunQuery:@"DROP TABLE identityPhonesDeduped" onPrep:0 onRow:0 onError:v10];
      }
    }
  }
  return result;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to create deduplicated identityPhones table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_294(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to clear identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_298(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to rewrite identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_302(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to remove identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_CreateFTSTableWithITS
{
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_debug_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEBUG, "migration_CreateFTSTableWithITS", v5, 2u);
  }

  if ([(SGSqlEntityStore *)self _createEntityFTSTableWithName:@"entity_fts"]) {
    return 4;
  }
  else {
    return 2;
  }
}

- (int64_t)migration_RecreateFTSTableWithITS
{
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_debug_impl(&dword_1CA650000, v3, OS_LOG_TYPE_DEBUG, "migration_RecreateFTSTableWithITS", v5, 2u);
  }

  if ([(SGSqlEntityStore *)self _prepareToCopyFrom:@"entity_fts_from" toNewTableNamed:@"entity_fts"])
  {
    return 4;
  }
  else
  {
    return 2;
  }
}

- (int64_t)migration_RebuildIdentityTables
{
  if (![(SGSqlEntityStore *)self rebuildIdentityTables]) {
    return 2;
  }
  self->_entityMigrationRequiresMergeBlobUpdate = 1;
  return 4;
}

- (int64_t)migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 4;
  if (![(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entity" named:@"downloadState"])
  {
    db = self->_db;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke;
    v20[3] = &unk_1E65BE468;
    void v20[4] = &v21;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"ALTER TABLE entity ADD COLUMN downloadState INTEGER DEFAULT 0" onPrep:0 onRow:0 onError:v20];
  }
  if (![(SGSqliteDatabase *)self->_db hasIndexNamed:@"entityDownloadStateIdx"])
  {
    uint64_t v4 = self->_db;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_242;
    void v19[3] = &unk_1E65BE468;
    void v19[4] = &v21;
    [(SGSqliteDatabase *)v4 prepAndRunQuery:@"CREATE INDEX entityDownloadStateIdx on entity(downloadState)" onPrep:0 onRow:0 onError:v19];
  }
  if (![(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entity" named:@"contentHash"])
  {
    uint64_t v5 = self->_db;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_249;
    v18[3] = &unk_1E65BE468;
    void v18[4] = &v21;
    [(SGSqliteDatabase *)v5 prepAndRunQuery:@"ALTER TABLE entity ADD COLUMN contentHash TEXT" onPrep:0 onRow:0 onError:v18];
  }
  if (![(SGSqliteDatabase *)self->_db hasIndexNamed:@"entityContentHashIdx"])
  {
    int v6 = self->_db;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_256;
    v17[3] = &unk_1E65BE468;
    void v17[4] = &v21;
    [(SGSqliteDatabase *)v6 prepAndRunQuery:@"CREATE UNIQUE INDEX IF NOT EXISTS entityContentHashIdx ON entity(contentHash)" onPrep:0 onRow:0 onError:v17];
  }
  if (![(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entity" named:@"groupId"])
  {
    id v7 = self->_db;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_263;
    v16[3] = &unk_1E65BE468;
    void v16[4] = &v21;
    [(SGSqliteDatabase *)v7 prepAndRunQuery:@"ALTER TABLE entity ADD COLUMN groupId INTEGER DEFAULT -1" onPrep:0 onRow:0 onError:v16];
  }
  if (![(SGSqliteDatabase *)self->_db hasIndexNamed:@"groupIdIdx"])
  {
    uint64_t v8 = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_270;
    void v15[3] = &unk_1E65BE468;
    void v15[4] = &v21;
    [(SGSqliteDatabase *)v8 prepAndRunQuery:@"CREATE INDEX IF NOT EXISTS groupIdIdx on entity(groupId)" onPrep:0 onRow:0 onError:v15];
  }
  if (![(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entityTags" named:@"duplicateKeyHash"])
  {
    uint64_t v9 = self->_db;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_277;
    void v14[3] = &unk_1E65BE468;
    void v14[4] = &v21;
    [(SGSqliteDatabase *)v9 prepAndRunQuery:@"ALTER TABLE entityTags ADD COLUMN duplicateKeyHash TEXT NOT NULL DEFAULT ''" onPrep:0 onRow:0 onError:v14];
  }
  if (![(SGSqliteDatabase *)self->_db hasIndexNamed:@"ix_entityTags_dupKeyHash"])
  {
    id v10 = self->_db;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_284;
    void v13[3] = &unk_1E65BE468;
    void v13[4] = &v21;
    [(SGSqliteDatabase *)v10 prepAndRunQuery:@"CREATE INDEX IF NOT EXISTS ix_entityTags_dupKeyHash ON entityTags(duplicateKeyHash)" onPrep:0 onRow:0 onError:v13];
  }
  int64_t v11 = v22[3];
  _Block_object_dispose(&v21, 8);
  return v11;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add downloadState column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_242(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add entityDownloadStateIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_249(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add contentHash column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_256(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add entityContentHashIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_263(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add groupId column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_270(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add groupIdIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_277(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add duplicateKeyHash column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_284(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "Unable to add ix_entityTags_dupKeyHash index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_AddNewishTablesIfMissing
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  __int16 v36 = &v35;
  uint64_t v37 = 0x2020000000;
  uint64_t v38 = 4;
  if (![(SGSqliteDatabase *)self->_db hasTableNamed:@"entityParentage"])
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v3 = [&unk_1F2536B78 countByEnumeratingWithState:&v31 objects:v41 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v32;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v32 != v4) {
            objc_enumerationMutation(&unk_1F2536B78);
          }
          uint64_t v6 = *(void *)(*((void *)&v31 + 1) + 8 * v5);
          db = self->_db;
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 3221225472;
          v30[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke;
          void v30[3] = &unk_1E65BE468;
          void v30[4] = &v35;
          [(SGSqliteDatabase *)db prepAndRunQuery:v6 onPrep:0 onRow:0 onError:v30];
          ++v5;
        }
        while (v3 != v5);
        uint64_t v3 = [&unk_1F2536B78 countByEnumeratingWithState:&v31 objects:v41 count:16];
      }
      while (v3);
    }
  }
  if (![(SGSqliteDatabase *)self->_db hasTableNamed:@"serializedContacts"])
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v8 = [&unk_1F2536B90 countByEnumeratingWithState:&v26 objects:v40 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v27;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v27 != v9) {
            objc_enumerationMutation(&unk_1F2536B90);
          }
          uint64_t v11 = *(void *)(*((void *)&v26 + 1) + 8 * v10);
          long long v12 = self->_db;
          v25[0] = MEMORY[0x1E4F143A8];
          v25[1] = 3221225472;
          v25[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_216;
          v25[3] = &unk_1E65BE468;
          void v25[4] = &v35;
          [(SGSqliteDatabase *)v12 prepAndRunQuery:v11 onPrep:0 onRow:0 onError:v25];
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [&unk_1F2536B90 countByEnumeratingWithState:&v26 objects:v40 count:16];
      }
      while (v8);
    }
  }
  if (![(SGSqliteDatabase *)self->_db hasTableNamed:@"cnContactsToSgContacts"])
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v13 = [&unk_1F2536BA8 countByEnumeratingWithState:&v21 objects:v39 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v22;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v22 != v14) {
            objc_enumerationMutation(&unk_1F2536BA8);
          }
          uint64_t v16 = *(void *)(*((void *)&v21 + 1) + 8 * v15);
          uint64_t v17 = self->_db;
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 3221225472;
          void v20[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_229;
          v20[3] = &unk_1E65BE468;
          void v20[4] = &v35;
          [(SGSqliteDatabase *)v17 prepAndRunQuery:v16 onPrep:0 onRow:0 onError:v20];
          ++v15;
        }
        while (v13 != v15);
        uint64_t v13 = [&unk_1F2536BA8 countByEnumeratingWithState:&v21 objects:v39 count:16];
      }
      while (v13);
    }
  }
  int64_t v18 = v36[3];
  _Block_object_dispose(&v35, 8);
  return v18;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "needed to add entityParentage table but failed", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_216(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "needed to add serializedContacts table but failed", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_229(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "needed to add cnContactsToSgContacts table but failed", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_AddAuthorColumnIfMissing
{
  if ([(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entity" named:@"author"])
  {
    return 4;
  }
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 4;
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddAuthorColumnIfMissing__block_invoke;
  void v6[3] = &unk_1E65BE468;
  void v6[4] = &v7;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"ALTER TABLE entity ADD COLUMN author TEXT" onPrep:0 onRow:0 onError:v6];
  int64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddAuthorColumnIfMissing__block_invoke(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "needed to add author column but failed", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

- (int64_t)migration_MoveContentToSnippets
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 4;
  int64_t v3 = [MEMORY[0x1E4F28F80] processInfo];
  uint64_t v4 = [v3 environment];
  uint64_t v5 = [v4 objectForKey:@"SG_UPDATING_SKIP_QUERIES"];

  if (!v5 && ![(SGSqliteDatabase *)self->_snippetDb isInMemory])
  {
    db = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke;
    void v15[3] = &unk_1E65C05C8;
    void v15[4] = self;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2;
    void v14[3] = &unk_1E65BE468;
    void v14[4] = &v16;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"ATTACH DATABASE :snippetPath AS snippets" onPrep:v15 onRow:0 onError:v14];
    uint64_t v7 = self->_db;
    if (v17[3] == 4)
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_164;
      void v13[3] = &unk_1E65BE468;
      void v13[4] = &v16;
      [(SGSqliteDatabase *)v7 prepAndRunQuery:@"INSERT OR REPLACE INTO snippets.snippets (entityId, title, content, contentRangeOfInterest) SELECT id, title, content, contentRangeOfInterest FROM entity WHERE entityType = :entityType " onPrep:&__block_literal_global_162 onRow:0 onError:v13];
      uint64_t v7 = self->_db;
      if (v17[3] == 4)
      {
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_171;
        v12[3] = &unk_1E65BE468;
        void v12[4] = &v16;
        [(SGSqliteDatabase *)v7 prepAndRunQuery:@"INSERT OR REPLACE INTO snippets.snippets (entityId, title, content, contentRangeOfInterest) SELECT id, NULL, content, contentRangeOfInterest FROM entity WHERE entityType != :entityType " onPrep:&__block_literal_global_170 onRow:0 onError:v12];
        uint64_t v7 = self->_db;
        if (v17[3] == 4)
        {
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 3221225472;
          void v11[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_175;
          v11[3] = &unk_1E65BE468;
          void v11[4] = &v16;
          [(SGSqliteDatabase *)v7 prepAndRunQuery:@"UPDATE entity SET content=NULL, contentRangeOfInterest=NULL" onPrep:0 onRow:0 onError:v11];
          uint64_t v7 = self->_db;
          if (v17[3] == 4)
          {
            v10[0] = MEMORY[0x1E4F143A8];
            v10[1] = 3221225472;
            v10[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_182;
            void v10[3] = &unk_1E65BE468;
            void v10[4] = &v16;
            [(SGSqliteDatabase *)v7 prepAndRunQuery:@"UPDATE entity SET title=NULL WHERE entityType = ?" onPrep:&__block_literal_global_181_34609 onRow:0 onError:v10];
            uint64_t v7 = self->_db;
          }
        }
      }
    }
    [(SGSqliteDatabase *)v7 prepAndRunQuery:@"DETACH DATABASE snippets" onPrep:0 onRow:0 onError:&__block_literal_global_534];
  }
  int64_t v8 = v17[3];
  _Block_object_dispose(&v16, 8);
  return v8;
}

void __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 24) filename];
  +[SGSqliteDatabase bindParam:a2 name:":snippetPath" nsstring:v3];
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "unable to attach snippets in order to migrate content data", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_164(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "unable to copy email snippets during content migration", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_171(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "unable to copy non-email snippets during content migration", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_175(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "unable to erase content data from entities during content migration", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_182(uint64_t a1)
{
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "unable to erase title data from email entities during content migration", v4, 2u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_179(int a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, 5);
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_168(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:5];
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_160(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":entityType" int64:5];
}

- (int64_t)migration_deleteLegacyMessages
{
  return 4;
}

- (int64_t)migrate
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = _os_activity_create(&dword_1CA650000, "migrating SGSqliteDatabase", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v3, &state);
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    db = self->_db;
    snippetDb = self->_snippetDb;
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = db;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = snippetDb;
    _os_log_debug_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEBUG, "Migrating %@ & %@", buf, 0x16u);
  }

  entityVersiouint64_t n = self->_entityVersion;
  if ([(SGSqlEntityStore *)self maxKnownDbVersion] < entityVersion)
  {
    uint64_t v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_INFO, "Future database version detected. Giving up on migration.", buf, 2u);
    }
LABEL_61:
    int64_t v16 = 3;
    goto LABEL_62;
  }
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"version"]) {
    goto LABEL_7;
  }
  BOOL v12 = [(SGSqliteDatabase *)self->_db hasColumnOnTable:@"entity" named:@"duplicateKeyHash"];
  unsigned int v13 = self->_entityVersion;
  int v15 = v13 != 1 && v13 < 0x45 || v12;
  if (v15 == 1)
  {
    if (!v12)
    {
      if (!v13)
      {
        int64_t v8 = sgLogHandle();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v9 = "Encountered empty database (user_version == 0)";
          uint64_t v10 = v8;
          uint32_t v11 = 2;
          goto LABEL_11;
        }
LABEL_29:

        int64_t v18 = [(SGSqlEntityStore *)self clearDatabase:self->_db];
        int64_t v19 = [(SGSqlEntityStore *)self clearDatabase:self->_snippetDb];
        if (v18 != 4 || v19 != 4)
        {
          uint64_t v6 = sgLogHandle();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "Failed to clear legacy database.", buf, 2u);
          }
          goto LABEL_61;
        }
        *(void *)&self->_entityVersiouint64_t n = 0;
        goto LABEL_32;
      }
      int v7 = 0;
LABEL_8:
      int64_t v8 = sgLogHandle();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      if (v7)
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = @"legacy";
        uint64_t v9 = "Encountered %@ database; dropping all data.";
        uint64_t v10 = v8;
        uint32_t v11 = 12;
LABEL_11:
        _os_log_impl(&dword_1CA650000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
        goto LABEL_29;
      }
      uint64_t v17 = objc_msgSend([NSString alloc], "initWithFormat:", @"old (%lu < %d)", self->_entityVersion, 69);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1CA650000, v8, OS_LOG_TYPE_INFO, "Encountered %@ database; dropping all data.", buf, 0xCu);

      goto LABEL_29;
    }
LABEL_7:
    int v7 = 1;
    goto LABEL_8;
  }
  if (self->_snippetsVersion != v13)
  {
    if ([(SGSqlEntityStore *)self fixupVersionMismatch] != 4)
    {
      uint64_t v6 = sgLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = self->_entityVersion;
        snippetsVersiouint64_t n = self->_snippetsVersion;
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v36;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = snippetsVersion;
        _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "Unrecoverable db version mismatch %ld & %ld", buf, 0x16u);
      }
      int64_t v16 = 5;
      goto LABEL_62;
    }
    unsigned int v13 = self->_entityVersion;
  }
  if (v13 || self->_snippetsVersion)
  {
    int64_t v16 = 4;
    goto LABEL_33;
  }
LABEL_32:
  int64_t v16 = [(SGSqlEntityStore *)self skipFromZeroSchema];
LABEL_33:
  while (v16 == 4)
  {
    if (![(SGSqlEntityStore *)self isEphemeral]
      && ([MEMORY[0x1E4F93B10] isUnlocked] & 1) == 0
      && [(SGSqlEntityStore *)self migrationNeeded])
    {
      uint64_t v6 = sgLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = self->_entityVersion;
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v33;
        _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEFAULT, "database migration bailing out at version %lu due to device being locked.", buf, 0xCu);
      }
      int64_t v16 = 0;
      goto LABEL_62;
    }
    memset(buf, 0, sizeof(buf));
    id v20 = [NSString alloc];
    if ([(SGSqliteDatabase *)self->_db isInMemory]) {
      long long v21 = @"memory";
    }
    else {
      long long v21 = @"disk";
    }
    *(void *)long long buf = [v20 initWithFormat:@"migrator.%@.steps.%lu_to_%lu", v21, self->_entityVersion, self->_entityVersion + 1];
    *(void *)&uint8_t buf[8] = mach_absolute_time();
    int64_t v16 = [(SGSqlEntityStore *)self migrateToVersion:self->_entityVersion + 1];
    SGRecordMeasurementState(buf);
    SGRecordMeasurementState(buf);
  }
  if (v16 == 1)
  {
    if (self->_entityMigrationRequiresMergeBlobUpdate)
    {
      long long v22 = sgLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1CA650000, v22, OS_LOG_TYPE_DEBUG, "Finalizing migration with a merge blob sync", buf, 2u);
      }

      [(SGSqlEntityStore *)self forceBlobSync];
    }
    long long v23 = sgLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      long long v34 = [(SGSqliteDatabase *)self->_db filename];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_debug_impl(&dword_1CA650000, v23, OS_LOG_TYPE_DEBUG, "about to check for language change for FTS tables: %@", buf, 0xCu);
    }
    long long v24 = [(SGSqlEntityStore *)self languageToUpdateEntityFTSTo];
    if (v24 || [(SGSqliteDatabase *)self->_db hasTableNamed:@"entity_fts_from"])
    {
      uint64_t v25 = sgLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = [(SGSqliteDatabase *)self->_db filename];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v24;
        _os_log_debug_impl(&dword_1CA650000, v25, OS_LOG_TYPE_DEBUG, "detected need for FTS rebuild: %@: %@", buf, 0x16u);
      }
      long long v26 = dispatch_get_global_queue(5, 0);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke;
      block[3] = &unk_1E65BFD88;
      void block[4] = self;
      id v44 = v24;
      dispatch_async(v26, block);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    uint64_t v47 = 4;
    do
    {
      if (*(void *)(*(void *)&buf[8] + 24) != 4) {
        break;
      }
      uint64_t v39 = 0;
      long long v40 = &v39;
      uint64_t v41 = 0x2020000000;
      char v42 = 0;
      long long v27 = self->_db;
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_2;
      v38[3] = &unk_1E65BE4B8;
      void v38[4] = self;
      void v38[5] = buf;
      v38[6] = &v39;
      [(SGSqliteDatabase *)v27 writeTransaction:v38];
      int v28 = *((unsigned __int8 *)v40 + 24);
      _Block_object_dispose(&v39, 8);
    }
    while (!v28);
    _Block_object_dispose(buf, 8);

    int64_t v16 = 1;
  }
  uint64_t v6 = sgLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    long long v29 = [(SGSqliteDatabase *)self->_db filename];
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v29;
    _os_log_debug_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEBUG, "done migrating: %@", buf, 0xCu);
  }
LABEL_62:

  os_activity_scope_leave(&state);
  return v16;
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateLanguageForFTSTablesToLanguage:*(void *)(a1 + 40)];
}

void __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_2(uint64_t a1)
{
  uint64_t v15 = 0;
  int64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3032000000;
  BOOL v12 = __Block_byref_object_copy__34329;
  unsigned int v13 = __Block_byref_object_dispose__34330;
  id v14 = 0;
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_3;
  void v8[3] = &unk_1E65BE440;
  void v8[4] = &v15;
  void v8[5] = &v9;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_4;
  void v7[3] = &unk_1E65BE468;
  void v7[4] = *(void *)(a1 + 40);
  [v2 prepAndRunSQL:@"SELECT rowId, task FROM postMigrationTasks ORDER BY rowId", 0, v8, v7 onPrep onRow onError];
  if (v16[3] != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (([(id)v10[5] hasPrefix:@"migration_"] & 1) != 0
      && (SEL v3 = NSSelectorFromString((NSString *)v10[5])) != 0)
    {
      uint64_t v4 = ((uint64_t (*)(void, SEL))[*(id *)(a1 + 32) methodForSelector:v3])(*(void *)(a1 + 32), v3);
    }
    else
    {
      uint64_t v4 = 6;
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 4)
  {
    if (v16[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_5;
      void v6[3] = &unk_1E65BE490;
      void v6[4] = &v15;
      [v5 prepAndRunSQL:@"DELETE FROM postMigrationTasks WHERE rowId == :rowId LIMIT 1" onPrep:v6 onRow:0 onError:0];
    }
  }
  _Block_object_dispose(&v9, 8);

  _Block_object_dispose(&v15, 8);
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 getIntegerForColumn:0];
  uint64_t v4 = [v3 getNSStringForColumnName:"task" table:"postMigrationTasks"];

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  return *MEMORY[0x1E4F93C10];
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 6;
  return *MEMORY[0x1E4F93C10];
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":rowId" toInteger:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

- (int64_t)skipFromZeroSchema
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = -1;
  unsigned int v15 = -1;
  uint64_t v4 = +[SGDatabaseMigratorEntities skipFromZeroSchema:&v15];
  uint64_t v5 = +[SGDatabaseMigratorSnippets skipFromZeroSchema:&v14];
  if (v15 == -1)
  {
    BOOL v12 = [MEMORY[0x1E4F28B00] currentHandler];
    [v12 handleFailureInMethod:a2, self, @"SGSqlEntityStore+DatabaseMigrator.m", 677, @"Invalid parameter not satisfying: %@", @"skipToEntityVersion != UINT32_MAX" object file lineNumber description];
  }
  if (v14 == -1)
  {
    unsigned int v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"SGSqlEntityStore+DatabaseMigrator.m", 678, @"Invalid parameter not satisfying: %@", @"skipToSnippetsVersion != UINT32_MAX" object file lineNumber description];
  }
  uint64_t v6 = sgLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v15;
    _os_log_impl(&dword_1CA650000, v6, OS_LOG_TYPE_INFO, "migrating entities from zero to version %lu", buf, 0xCu);
  }

  if ([(SGSqlEntityStore *)self runQueries:v4 forVersion:v15 inTransactionOnDb:self->_db] != 4)
  {
    uint64_t v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_15:

      int64_t v8 = 2;
      goto LABEL_16;
    }
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v15;
    uint64_t v10 = "failed to migrate entity db from zero to %lu";
LABEL_18:
    _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
    goto LABEL_15;
  }
  self->_entityVersiouint64_t n = v15;
  int v7 = sgLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v14;
    _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_INFO, "migrating snippets from zero to version %lu", buf, 0xCu);
  }

  if ([(SGSqlEntityStore *)self runQueries:v5 forVersion:v14 inTransactionOnDb:self->_snippetDb] != 4)
  {
    uint64_t v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v14;
    uint64_t v10 = "failed to migrate snippets db from zero to %lu";
    goto LABEL_18;
  }
  self->_snippetsVersiouint64_t n = v14;
  int64_t v8 = 4;
LABEL_16:

  return v8;
}

- (void)unsafeMigrateToVersionForTesting:(unint64_t)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  entityMigrations = self->_entityMigrations;
  uint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
  int v7 = [v6 stringValue];
  int64_t v8 = [(NSDictionary *)entityMigrations objectForKeyedSubscript:v7];

  snippetsMigrations = self->_snippetsMigrations;
  uint64_t v10 = [NSNumber numberWithUnsignedInteger:a3];
  uint64_t v11 = [v10 stringValue];
  BOOL v12 = [(NSDictionary *)snippetsMigrations objectForKeyedSubscript:v11];

  unsigned int v13 = sgLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    entityVersiouint64_t n = self->_entityVersion;
    int v22 = 134217984;
    uint64_t v23 = entityVersion;
    _os_log_impl(&dword_1CA650000, v13, OS_LOG_TYPE_INFO, "migrating entities to version %ld", (uint8_t *)&v22, 0xCu);
  }

  int64_t v15 = [(SGSqlEntityStore *)self runQueries:v8 forVersion:self->_entityVersion inTransactionOnDb:self->_db];
  int64_t v16 = sgLogHandle();
  uint64_t v17 = v16;
  if (v15 != 4)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = self->_entityVersion;
      int v22 = 134217984;
      uint64_t v23 = v21;
      id v20 = "failed to migrate entity db to %ld";
      goto LABEL_13;
    }
LABEL_10:

    goto LABEL_11;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = self->_entityVersion;
    int v22 = 134217984;
    uint64_t v23 = v18;
    _os_log_impl(&dword_1CA650000, v17, OS_LOG_TYPE_INFO, "migrating snippets to version %ld", (uint8_t *)&v22, 0xCu);
  }

  if ([(SGSqlEntityStore *)self runQueries:v12 forVersion:self->_snippetsVersion inTransactionOnDb:self->_snippetDb] != 4)
  {
    uint64_t v17 = sgLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = self->_entityVersion;
      int v22 = 134217984;
      uint64_t v23 = v19;
      id v20 = "failed to migrate snippets db to %ld";
LABEL_13:
      _os_log_error_impl(&dword_1CA650000, v17, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0xCu);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
LABEL_11:
}

- (int64_t)migrateToVersion:(unint64_t)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  entityVersiouint64_t n = self->_entityVersion;
  if (a3 - 1 != entityVersion)
  {
    uint64_t v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    LOWORD(v26) = 0;
LABEL_23:
    _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "attempt to skip or repeat a migration", (uint8_t *)&v26, 2u);
    goto LABEL_14;
  }
  if (entityVersion == self->_snippetsVersion)
  {
    entityMigrations = self->_entityMigrations;
    uint64_t v6 = NSNumber;
    self->_entityVersiouint64_t n = entityVersion + 1;
    int v7 = objc_msgSend(v6, "numberWithUnsignedInt:");
    int64_t v8 = [v7 stringValue];
    uint64_t v9 = [(NSDictionary *)entityMigrations objectForKeyedSubscript:v8];

    snippetsMigrations = self->_snippetsMigrations;
    uint64_t v11 = NSNumber;
    ++self->_snippetsVersion;
    BOOL v12 = objc_msgSend(v11, "numberWithUnsignedInt:");
    unsigned int v13 = [v12 stringValue];
    unsigned int v14 = [(NSDictionary *)snippetsMigrations objectForKeyedSubscript:v13];

    if (!v9)
    {
      int64_t v21 = 1;
      goto LABEL_20;
    }
    int64_t v15 = sgLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = self->_entityVersion;
      int v26 = 134217984;
      uint64_t v27 = v16;
      _os_log_impl(&dword_1CA650000, v15, OS_LOG_TYPE_INFO, "migrating entities to version %ld", (uint8_t *)&v26, 0xCu);
    }

    int64_t v17 = [(SGSqlEntityStore *)self runQueries:v9 forVersion:self->_entityVersion inTransactionOnDb:self->_db];
    uint64_t v18 = sgLogHandle();
    uint64_t v19 = v18;
    if (v17 == 4)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = self->_entityVersion;
        int v26 = 134217984;
        uint64_t v27 = v20;
        _os_log_impl(&dword_1CA650000, v19, OS_LOG_TYPE_INFO, "migrating snippets to version %ld", (uint8_t *)&v26, 0xCu);
      }

      if ([(SGSqlEntityStore *)self runQueries:v14 forVersion:self->_snippetsVersion inTransactionOnDb:self->_snippetDb] == 4)
      {
        int64_t v21 = 4;
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v19 = sgLogHandle();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_19:

        int64_t v21 = 2;
        goto LABEL_20;
      }
      uint64_t v25 = self->_entityVersion;
      int v26 = 134217984;
      uint64_t v27 = v25;
      uint64_t v23 = "failed to migrate snippets db to %ld";
    }
    else
    {
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      uint64_t v22 = self->_entityVersion;
      int v26 = 134217984;
      uint64_t v27 = v22;
      uint64_t v23 = "failed to migrate entity db to %ld";
    }
    _os_log_error_impl(&dword_1CA650000, v19, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v26, 0xCu);
    goto LABEL_19;
  }
  uint64_t v9 = sgLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v26) = 0;
    goto LABEL_23;
  }
LABEL_14:
  int64_t v21 = 3;
LABEL_21:

  return v21;
}

- (int64_t)fixupVersionMismatch
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  entityVersiouint64_t n = self->_entityVersion;
  snippetsVersiouint64_t n = self->_snippetsVersion;
  if (snippetsVersion) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = entityVersion > 4;
  }
  if (!v5)
  {
    unsigned int v13 = sgLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18) = 0;
      _os_log_debug_impl(&dword_1CA650000, v13, OS_LOG_TYPE_DEBUG, "bootstrapping snippets migration", (uint8_t *)&v18, 2u);
    }

    self->_snippetsVersiouint64_t n = self->_entityVersion;
    -[SGSqliteDatabase setUserVersion:](self->_db, "setUserVersion:");
    return 4;
  }
  if (snippetsVersion + 1 == entityVersion)
  {
    snippetsMigrations = self->_snippetsMigrations;
    int v7 = NSNumber;
    self->_snippetsVersiouint64_t n = entityVersion;
    int64_t v8 = objc_msgSend(v7, "numberWithUnsignedInt:");
    uint64_t v9 = [v8 stringValue];
    uint64_t v10 = [(NSDictionary *)snippetsMigrations objectForKeyedSubscript:v9];

    uint64_t v11 = sgLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = self->_snippetsVersion;
      int v18 = 134217984;
      uint64_t v19 = v12;
      _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_INFO, "catching up snippets migration to %ld", (uint8_t *)&v18, 0xCu);
    }

    if ([(SGSqlEntityStore *)self runQueries:v10 forVersion:self->_snippetsVersion inTransactionOnDb:self->_snippetDb] == 4)
    {

      return 4;
    }
    uint64_t v16 = sgLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = self->_entityVersion;
      int v18 = 134217984;
      uint64_t v19 = v17;
      _os_log_error_impl(&dword_1CA650000, v16, OS_LOG_TYPE_ERROR, "failed to migrate snippets db to %ld", (uint8_t *)&v18, 0xCu);
    }
  }
  return 2;
}

- (void)updateLanguageForFTSTablesToLanguage:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  pthread_mutex_lock(&_ftsUpdateLock);
  BOOL v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v13 = [(SGSqliteDatabase *)self->_db filename];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v4;
    _os_log_debug_impl(&dword_1CA650000, v5, OS_LOG_TYPE_DEBUG, "starting update of FTS table for language change: %@: %@", buf, 0x16u);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  uint64_t v21 = 0;
  if ([(SGSqliteDatabase *)self->_db hasTableNamed:@"entity_fts_from"])
  {
    uint64_t v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v18 = 0;
      _os_log_debug_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEBUG, "resuming copy of FTS data to new table", v18, 2u);
    }

    db = self->_db;
    int64_t v8 = (void *)[[NSString alloc] initWithFormat:@"SELECT MIN(docid) FROM %@ WHERE docid NOT IN (SELECT docid FROM %@)", @"entity_fts_from", @"entity_fts"];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke;
    v17[3] = &unk_1E65BEBB0;
    void v17[4] = buf;
    [(SGSqliteDatabase *)db prepAndRunQuery:v8 onPrep:0 onRow:v17 onError:0];

LABEL_11:
    [(SGSqlEntityStore *)self _slowCopyFromTable:@"entity_fts_from" toTable:@"entity_fts" startingAtEntityId:*(void *)(*(void *)&buf[8] + 24)];
    uint64_t v10 = sgLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v14 = [(SGSqliteDatabase *)self->_db filename];
      *(_DWORD *)int v18 = 138412290;
      uint64_t v19 = v14;
      _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "done with FTS copy, going to drop old table: %@", v18, 0xCu);
    }
    uint64_t v11 = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_104;
    void v15[3] = &unk_1E65BFD88;
    void v15[4] = self;
    uint64_t v16 = @"entity_fts_from";
    [(SGSqliteDatabase *)v11 writeTransaction:v15];
    pthread_mutex_unlock(&_ftsUpdateLock);

    goto LABEL_17;
  }
  if (v4)
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v18 = 0;
      _os_log_debug_impl(&dword_1CA650000, v9, OS_LOG_TYPE_DEBUG, "preparing to copy FTS data", v18, 2u);
    }

    if ([(SGSqlEntityStore *)self _prepareToCopyFrom:@"entity_fts_from" toNewTableNamed:@"entity_fts"])
    {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = sgLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v18 = 0;
      _os_log_error_impl(&dword_1CA650000, v12, OS_LOG_TYPE_ERROR, "updateLanguageForFTSTablesToLanguage got nil language but has no in-progress copy to restart", v18, 2u);
    }
  }
LABEL_17:
  _Block_object_dispose(buf, 8);
}

uint64_t __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

void __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_104(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  id v2 = (id)[[NSString alloc] initWithFormat:@"DROP TABLE IF EXISTS %@", *(void *)(a1 + 40)];
  [v1 prepAndRunQuery:v2 onPrep:0 onRow:0 onError:&__block_literal_global_106];
}

uint64_t __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_2()
{
  id v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v2 = 0;
    _os_log_error_impl(&dword_1CA650000, v0, OS_LOG_TYPE_ERROR, "failed to drop old entity_fts after updating to new language", v2, 2u);
  }

  return 1;
}

- (BOOL)_prepareToCopyFrom:(id)a3 toNewTableNamed:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 1;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __73__SGSqlEntityStore_DatabaseMigrator___prepareToCopyFrom_toNewTableNamed___block_invoke;
  v12[3] = &unk_1E65BE418;
  int64_t v15 = &v16;
  void v12[4] = self;
  id v9 = v7;
  id v13 = v9;
  id v10 = v6;
  id v14 = v10;
  [(SGSqliteDatabase *)db writeTransaction:v12];
  LOBYTE(v6) = *((unsigned char *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return (char)v6;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator___prepareToCopyFrom_toNewTableNamed___block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _renameTable:*(void *)(a1 + 40) to:*(void *)(a1 + 48)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = result;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    uint64_t result = [*(id *)(a1 + 32) _createEntityFTSTableWithName:*(void *)(a1 + 40)];
    if ((result & 1) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  return result;
}

- (BOOL)_renameTable:(id)a3 to:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 1;
  db = self->_db;
  id v9 = (void *)[[NSString alloc] initWithFormat:@"DROP TABLE IF EXISTS %@", v7];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke;
  v20[3] = &unk_1E65C0660;
  id v10 = v7;
  id v21 = v10;
  [(SGSqliteDatabase *)db prepAndRunQuery:v9 onPrep:0 onRow:0 onError:v20];

  uint64_t v11 = self->_db;
  uint64_t v12 = (void *)[[NSString alloc] initWithFormat:@"ALTER TABLE %@ RENAME TO %@", v6, v10];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke_97;
  v16[3] = &unk_1E65BE3F0;
  id v13 = v6;
  id v17 = v13;
  id v14 = v10;
  id v18 = v14;
  char v19 = &v22;
  [(SGSqliteDatabase *)v11 prepAndRunQuery:v12 onPrep:0 onRow:0 onError:v16];

  LOBYTE(v11) = *((unsigned char *)v23 + 24);
  _Block_object_dispose(&v22, 8);

  return (char)v11;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "failed to drop %@ in preparation for renaming", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke_97(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "failed to rename %@ to %@", (uint8_t *)&v6, 0x16u);
  }

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
  return 1;
}

- (void)_slowCopyFromTable:(id)a3 toTable:(id)a4 startingAtEntityId:(unint64_t)a5
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v22 = a3;
  id v21 = a4;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2020000000;
  uint64_t v35 = -1;
  uint64_t v20 = self;
  db = self->_db;
  uint64_t v9 = (void *)[[NSString alloc] initWithFormat:@"SELECT MAX(docid) FROM %@", v22];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  void v31[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke;
  v31[3] = &unk_1E65BEBB0;
  void v31[4] = &v32;
  [(SGSqliteDatabase *)db prepAndRunQuery:v9 onPrep:0 onRow:v31 onError:&__block_literal_global_80_34718];

  uint64_t v10 = sgLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    id v17 = [(SGSqliteDatabase *)self->_db filename];
    unint64_t v18 = v33[3];
    *(_DWORD *)long long buf = 138412546;
    unint64_t v37 = (unint64_t)v17;
    __int16 v38 = 2048;
    unint64_t v39 = v18;
    _os_log_debug_impl(&dword_1CA650000, v10, OS_LOG_TYPE_DEBUG, "highest entity for FTS copy: %@: %llu", buf, 0x16u);
  }
  uint64_t v11 = dispatch_group_create();
  char v19 = dispatch_queue_attr_make_with_qos_class(0, (dispatch_qos_class_t)5u, 0);
  dispatch_queue_t v12 = dispatch_queue_create("DatabaseMigrator-FTS-queue", v19);
  if (v33[3] >= a5)
  {
    int v13 = 0;
    unint64_t v14 = a5;
    do
    {
      int64_t v15 = sgLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218240;
        unint64_t v37 = v14;
        __int16 v38 = 2048;
        unint64_t v39 = v14 + 1000;
        _os_log_debug_impl(&dword_1CA650000, v15, OS_LOG_TYPE_DEBUG, "fts copy batch: %llu -> %llu", buf, 0x16u);
      }

      v13 += 2;
      dispatch_group_enter(v11);
      uint64_t v16 = (void *)MEMORY[0x1E4F93B18];
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_83;
      void v23[3] = &unk_1E65BE3C8;
      unint64_t v27 = v14;
      unint64_t v28 = v14 + 1000;
      void v23[4] = v20;
      id v24 = v21;
      id v25 = v22;
      uint64_t v29 = 1000;
      unint64_t v30 = a5;
      int v26 = v11;
      [v16 runAsyncOnQueue:v12 afterDelaySeconds:v23 block:(double)v13];

      v14 += 1001;
    }
    while (v14 <= v33[3]);
  }
  [MEMORY[0x1E4F93B18] waitForGroup:v11 timeoutSeconds:86400.0];

  _Block_object_dispose(&v32, 8);
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

void __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_83(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    *(_DWORD *)long long buf = 134218240;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    _os_log_debug_impl(&dword_1CA650000, v2, OS_LOG_TYPE_DEBUG, "Copying from old FTS table from %lu to %lu", buf, 0x16u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_84;
  void v8[3] = &unk_1E65BE3A0;
  void v8[4] = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = v5;
  [v4 writeTransaction:v8];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_84(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = (void *)[[NSString alloc] initWithFormat:@"INSERT INTO %@ (docid, entityId, messagingTerms, ftsTerms) SELECT docid, entityId, messagingTerms, ftsTerms FROM %@ WHERE docid BETWEEN :batchStart AND :batchStop   AND docid NOT IN (SELECT docid FROM %@)", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 40)];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2_88;
  void v6[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  long long v7 = *(_OWORD *)(a1 + 56);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_3;
  v4[3] = &__block_descriptor_48_e37___PASDBIterAction__B_16__0__NSError_8l;
  long long v5 = *(_OWORD *)(a1 + 72);
  [v2 prepAndRunQuery:v3 onPrep:v6 onRow:0 onError:v4];
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2_88(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":batchStart" int64:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":batchStop" int64:v4];
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_3(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 134218240;
    uint64_t v7 = v4;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "failed to insert from old fts table limit %lu offset %lu", (uint8_t *)&v6, 0x16u);
  }

  return 1;
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2()
{
  id v0 = sgLogHandle();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v2 = 0;
    _os_log_error_impl(&dword_1CA650000, v0, OS_LOG_TYPE_ERROR, "failed to determine max docid", v2, 2u);
  }

  return 1;
}

- (BOOL)_createEntityFTSTableWithName:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  StatementUsingCurrentLanguage = (void *)ITSCopyFTSTableCreateStatementUsingCurrentLanguage();
  if (StatementUsingCurrentLanguage)
  {
    int v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      long long v11 = [(SGSqliteDatabase *)self->_db filename];
      *(_DWORD *)long long buf = 138412546;
      id v20 = v11;
      __int16 v21 = 2112;
      id v22 = StatementUsingCurrentLanguage;
      _os_log_debug_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEBUG, "creating new FTS table: %@: %@", buf, 0x16u);
    }
    db = self->_db;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __68__SGSqlEntityStore_DatabaseMigrator___createEntityFTSTableWithName___block_invoke;
    v12[3] = &unk_1E65C0610;
    int v13 = v4;
    uint64_t v14 = &v15;
    [(SGSqliteDatabase *)db prepAndRunQuery:StatementUsingCurrentLanguage onPrep:0 onRow:0 onError:v12];

    BOOL v8 = *((unsigned char *)v16 + 24) != 0;
    uint64_t v9 = v13;
  }
  else
  {
    uint64_t v9 = sgLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v20 = v4;
      _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, "failed to generate create query for new FTS table %@", buf, 0xCu);
    }
    BOOL v8 = 0;
  }

  _Block_object_dispose(&v15, 8);
  return v8;
}

uint64_t __68__SGSqlEntityStore_DatabaseMigrator___createEntityFTSTableWithName___block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = sgLogHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "failed to create new FTS table %@", (uint8_t *)&v5, 0xCu);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  return 1;
}

- (id)languageToUpdateEntityFTSTo
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)ITSCopyUserLanguage();
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = [(SGSqliteDatabase *)self->_db filename];
    int v12 = 138412546;
    int v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v3;
    _os_log_debug_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEBUG, "current user language: %@: %@", (uint8_t *)&v12, 0x16u);
  }
  int v5 = [(SGSqliteDatabase *)self->_db languageForFTSTable:@"entity_fts"];
  uint64_t v6 = sgLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    long long v11 = [(SGSqliteDatabase *)self->_db filename];
    int v12 = 138412546;
    int v13 = v11;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_debug_impl(&dword_1CA650000, v6, OS_LOG_TYPE_DEBUG, "old user language: %@: %@", (uint8_t *)&v12, 0x16u);
  }
  if (v5 && v3)
  {
    if ([v5 isEqualToString:v3])
    {
LABEL_8:
      id v7 = 0;
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  BOOL v8 = sgLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 138412290;
    int v13 = v3;
    _os_log_debug_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEBUG, "languageToUpdateEntityFTSTo returning: %@", (uint8_t *)&v12, 0xCu);
  }

  id v7 = v3;
LABEL_13:

  return v7;
}

- (int64_t)runQueries:(id)a3 forVersion:(unsigned int)a4 inTransactionOnDb:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __78__SGSqlEntityStore_DatabaseMigrator__runQueries_forVersion_inTransactionOnDb___block_invoke;
  void v14[3] = &unk_1E65BE358;
  id v15 = v8;
  uint64_t v16 = self;
  id v17 = v9;
  unsigned int v18 = a4;
  id v10 = v9;
  id v11 = v8;
  if ([v10 frailWriteTransaction:v14]) {
    int64_t v12 = 4;
  }
  else {
    int64_t v12 = 2;
  }

  return v12;
}

uint64_t __78__SGSqlEntityStore_DatabaseMigrator__runQueries_forVersion_inTransactionOnDb___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend(*(id *)(a1 + 40), "runQuery:onDb:", *(void *)(*((void *)&v8 + 1) + 8 * v6), *(void *)(a1 + 48), (void)v8) != 4)
        {

          return 0;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  return [*(id *)(a1 + 48) setUserVersion:*(unsigned int *)(a1 + 56)];
}

- (int64_t)runQuery:(id)a3 onDb:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (NSString *)a3;
  id v7 = a4;
  uint64_t v20 = 0;
  __int16 v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 4;
  long long v8 = sgLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v14 = [v7 filename];
    *(_DWORD *)long long buf = 138412546;
    id v25 = v14;
    __int16 v26 = 2112;
    unint64_t v27 = v6;
    _os_log_debug_impl(&dword_1CA650000, v8, OS_LOG_TYPE_DEBUG, "migrator for %@ running query: %@", buf, 0x16u);
  }
  long long v9 = [(NSString *)v6 substringToIndex:10];
  int v10 = [v9 isEqualToString:@"migration_"];

  if (v10)
  {
    SEL v11 = NSSelectorFromString(v6);
    if (v11) {
      int64_t v12 = ((uint64_t (*)(SGSqlEntityStore *, SEL))[(SGSqlEntityStore *)self methodForSelector:v11])(self, v11);
    }
    else {
      int64_t v12 = 0;
    }
  }
  else
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __52__SGSqlEntityStore_DatabaseMigrator__runQuery_onDb___block_invoke;
    void v15[3] = &unk_1E65BE330;
    id v16 = v7;
    id v17 = self;
    unsigned int v18 = v6;
    char v19 = &v20;
    [v16 prepAndRunQuery:v18 onPrep:0 onRow:0 onError:v15];
    int64_t v12 = v21[3];
  }
  _Block_object_dispose(&v20, 8);

  return v12;
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__runQuery_onDb___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = sgLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = [*(id *)(a1 + 32) filename];
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v10 = *(unsigned int *)(v7 + 80);
    uint64_t v9 = *(unsigned int *)(v7 + 84);
    int v11 = 138413314;
    int64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v10;
    __int16 v15 = 2048;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    id v20 = v3;
    _os_log_error_impl(&dword_1CA650000, v4, OS_LOG_TYPE_ERROR, "SGDataMigrator encountered error during migration of %@: versions %lu & %lu, query: %@, error: %@", (uint8_t *)&v11, 0x34u);
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 2;

  return 1;
}

- (BOOL)migrationNeeded
{
  if (!self->_entityMigrations) {
    [(SGSqlEntityStore *)self prepMigrator];
  }
  return [(SGSqlEntityStore *)self maxKnownDbVersion] != self->_entityVersion;
}

- (unint64_t)maxKnownDbVersion
{
  return [(NSDictionary *)self->_entityMigrations count];
}

- (int64_t)configureMigratorThenMigrateToVersion:(unint64_t)a3
{
  uint64_t v5 = [(SGSqlEntityStore *)self selectMigrationQueue];
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v10 = 0;
    int v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __76__SGSqlEntityStore_DatabaseMigrator__configureMigratorThenMigrateToVersion___block_invoke;
    block[3] = &unk_1E65BF380;
    void block[4] = self;
    void block[5] = &v10;
    void block[6] = a3;
    dispatch_sync(v5, block);
    int64_t v7 = v11[3];
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    int64_t v7 = 2;
  }

  return v7;
}

uint64_t __76__SGSqlEntityStore_DatabaseMigrator__configureMigratorThenMigrateToVersion___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) prepMigrator];
  uint64_t result = [*(id *)(a1 + 32) migrateToVersion:*(void *)(a1 + 48)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (int64_t)clearDatabase:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 4;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke;
  void v8[3] = &unk_1E65C0700;
  id v5 = v4;
  uint64_t v10 = self;
  int v11 = &v12;
  id v9 = v5;
  [v5 writeTransaction:v8];
  int64_t v6 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v6;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v2 = objc_opt_new();
  id v3 = *(void **)(a1 + 32);
  uint64_t v39 = MEMORY[0x1E4F143A8];
  uint64_t v40 = 3221225472;
  uint64_t v41 = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2;
  char v42 = &unk_1E65BFF78;
  id v4 = v2;
  id v43 = v4;
  uint64_t v32 = MEMORY[0x1E4F143A8];
  uint64_t v33 = 3221225472;
  uint64_t v34 = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_29;
  uint64_t v35 = &unk_1E65BE330;
  uint64_t v38 = *(void *)(a1 + 48);
  *(_OWORD *)id obja = *(_OWORD *)(a1 + 32);
  id v5 = obja[0];
  int8x16_t v36 = vextq_s8(*(int8x16_t *)obja, *(int8x16_t *)obja, 8uLL);
  unint64_t v37 = @"SELECT name FROM sqlite_schema WHERE type='table' AND NOT name LIKE 'sqlite_%'";
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:");
  int64_t v6 = *(void **)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_52;
  void v30[3] = &unk_1E65BFF78;
  id v7 = v4;
  id v31 = v7;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_57;
  v27[3] = &unk_1E65BE3F0;
  uint64_t v29 = *(void *)(a1 + 48);
  *(_OWORD *)objb = *(_OWORD *)(a1 + 32);
  id v8 = objb[0];
  int8x16_t v28 = vextq_s8(*(int8x16_t *)objb, *(int8x16_t *)objb, 8uLL);
  [v6 prepAndRunSQL:@"PRAGMA table_list" onPrep:0 onRow:v30 onError:v27];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v7;
  uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v44 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v24;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v23 + 1) + 8 * v12);
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = (void *)[[NSString alloc] initWithFormat:@"DROP TABLE IF EXISTS %@", v13];
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        void v20[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_61;
        v20[3] = &unk_1E65BE330;
        uint64_t v22 = *(void *)(a1 + 48);
        uint64_t v16 = *(void **)(a1 + 32);
        void v20[4] = *(void *)(a1 + 40);
        void v20[5] = v13;
        id v21 = v16;
        [v14 prepAndRunSQL:v15 onPrep:0 onRow:0 onError:v20];

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [obj countByEnumeratingWithState:&v23 objects:v44 count:16];
    }
    while (v10);
  }

  [*(id *)(a1 + 32) setUserVersion:0];
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 getNSStringForColumnName:"name" table:0];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
  }
  else
  {
    id v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_fault_impl(&dword_1CA650000, v5, OS_LOG_TYPE_FAULT, "sqlite_schema had a table with a NULL name", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }
  int64_t v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v6;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_29(uint64_t a1, void *a2)
{
  v12[3] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 2;
  id v4 = (void *)MEMORY[0x1E4F1CA00];
  id v5 = (void *)[[NSString alloc] initWithFormat:@"%@FailedUnmigration", objc_opt_class()];
  int64_t v6 = (void *)[[NSString alloc] initWithFormat:@"Failed to clear database: %@", v3];
  v12[0] = *(id *)(a1 + 40);
  v11[0] = @"db";
  v11[1] = @"version";
  id v7 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v12[0], "userVersion"));
  void v11[2] = @"query";
  id v8 = *(void **)(a1 + 48);
  v12[1] = v7;
  v12[2] = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:3];
  id v10 = [v4 exceptionWithName:v5 reason:v6 userInfo:v9];

  objc_exception_throw(v10);
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_52(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 getNSStringForColumnAlias:"type"];
  int v5 = [@"shadow" isEqual:v4];

  if (v5)
  {
    int64_t v6 = [v3 getNSStringForColumnAlias:"name"];
    if (v6)
    {
      [*(id *)(a1 + 32) removeObject:v6];
    }
    else
    {
      uint64_t v9 = sgLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_fault_impl(&dword_1CA650000, v9, OS_LOG_TYPE_FAULT, "shadow table has nil table name in PRAGMA table_list", v10, 2u);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
        abort();
      }
    }
  }
  id v7 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v7;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_57(uint64_t a1, void *a2)
{
  void v11[3] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 2;
  id v4 = (void *)MEMORY[0x1E4F1CA00];
  int v5 = (void *)[[NSString alloc] initWithFormat:@"%@FailedUnmigration", objc_opt_class()];
  int64_t v6 = (void *)[[NSString alloc] initWithFormat:@"Failed to clear database: %@", v3];
  v11[0] = *(id *)(a1 + 40);
  v10[0] = @"db";
  v10[1] = @"version";
  id v7 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v11[0], "userVersion"));
  v10[2] = @"query";
  v11[1] = v7;
  void v11[2] = @"PRAGMA table_list";
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:3];
  id v9 = [v4 exceptionWithName:v5 reason:v6 userInfo:v8];

  objc_exception_throw(v9);
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_61(uint64_t a1, void *a2)
{
  v12[3] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 2;
  id v4 = (void *)MEMORY[0x1E4F1CA00];
  int v5 = (void *)[[NSString alloc] initWithFormat:@"%@FailedUnmigration", objc_opt_class()];
  int64_t v6 = (void *)[[NSString alloc] initWithFormat:@"Failed to drop table %@: %@", *(void *)(a1 + 40), v3];
  v12[0] = *(id *)(a1 + 48);
  v11[0] = @"db";
  v11[1] = @"version";
  id v7 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v12[0], "userVersion"));
  v12[1] = v7;
  void v11[2] = @"query";
  id v8 = (void *)[[NSString alloc] initWithFormat:@"DROP TABLE IF EXISTS %@", *(void *)(a1 + 40)];
  v12[2] = v8;
  id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:3];
  id v10 = [v4 exceptionWithName:v5 reason:v6 userInfo:v9];

  objc_exception_throw(v10);
}

- (int64_t)unmigrateDatabases
{
  id v3 = [(SGSqlEntityStore *)self selectMigrationQueue];
  id v4 = v3;
  if (v3)
  {
    uint64_t v8 = 0;
    id v9 = &v8;
    uint64_t v10 = 0x2020000000;
    uint64_t v11 = 1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = __56__SGSqlEntityStore_DatabaseMigrator__unmigrateDatabases__block_invoke;
    void v7[3] = &unk_1E65C0728;
    void v7[4] = self;
    void v7[5] = &v8;
    dispatch_sync(v3, v7);
    int64_t v5 = v9[3];
    _Block_object_dispose(&v8, 8);
  }
  else
  {
    int64_t v5 = 2;
  }

  return v5;
}

void __56__SGSqlEntityStore_DatabaseMigrator__unmigrateDatabases__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) prepMigrator];
  if ([*(id *)(a1 + 32) clearDatabase:*(void *)(*(void *)(a1 + 32) + 24)] == 2)
  {
    id v2 = sgLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      __int16 v6 = 0;
      id v3 = "failed to clear snippets db";
      id v4 = (uint8_t *)&v6;
LABEL_9:
      _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, v3, v4, 2u);
    }
  }
  else
  {
    if ([*(id *)(a1 + 32) clearDatabase:*(void *)(*(void *)(a1 + 32) + 8)] != 2) {
      return;
    }
    id v2 = sgLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      __int16 v5 = 0;
      id v3 = "failed to clear entities db";
      id v4 = (uint8_t *)&v5;
      goto LABEL_9;
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 2;
}

- (id)selectMigrationQueue
{
  if (selectMigrationQueue_once != -1) {
    dispatch_once(&selectMigrationQueue_once, &__block_literal_global_34774);
  }
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3032000000;
  id v9 = __Block_byref_object_copy__34329;
  uint64_t v10 = __Block_byref_object_dispose__34330;
  id v11 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke_15;
  v5[3] = &unk_1E65C0728;
  void v5[4] = self;
  void v5[5] = &v6;
  dispatch_sync((dispatch_queue_t)selectMigrationQueue_migratorQueue, v5);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke_15(uint64_t a1)
{
  void v20[2] = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) filename];

  if (!v2)
  {
    id v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_WORD *)__int16 v19 = 0;
    uint64_t v18 = "migrator passed nil filename for entity db";
LABEL_10:
    _os_log_error_impl(&dword_1CA650000, v9, OS_LOG_TYPE_ERROR, v18, v19, 2u);
    goto LABEL_8;
  }
  id v3 = [*(id *)(*(void *)(a1 + 32) + 24) filename];

  if (!v3)
  {
    id v9 = sgLogHandle();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_WORD *)__int16 v19 = 0;
    uint64_t v18 = "migrator passed nil filename for snippets db";
    goto LABEL_10;
  }
  id v4 = [*(id *)(*(void *)(a1 + 32) + 8) filename];
  __int16 v5 = [v4 lastPathComponent];
  v20[0] = v5;
  uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 24) filename];
  id v7 = [v6 lastPathComponent];
  v20[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:2];
  id v9 = objc_msgSend(v8, "_pas_componentsJoinedByString:", @"#");

  uint64_t v10 = [(id)selectMigrationQueue_migrationQueues objectForKey:v9];
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v13 = (void *)MEMORY[0x1CB79B230]();
    id v14 = [@"com.apple.suggestions.databasemigration." stringByAppendingString:v9];
    dispatch_queue_t v15 = dispatch_queue_create((const char *)[v14 UTF8String], 0);
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    __int16 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    [(id)selectMigrationQueue_migrationQueues setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKey:v9];
  }
LABEL_8:
}

uint64_t __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.suggestions.databasemigration.migratorQueue", 0);
  uint64_t v1 = (void *)selectMigrationQueue_migratorQueue;
  selectMigrationQueue_migratorQueue = (uint64_t)v0;

  selectMigrationQueue_migrationQueues = [MEMORY[0x1E4F28E10] strongToWeakObjectsMapTable];
  return MEMORY[0x1F41817F8]();
}

- (int64_t)migrateDatabases
{
  id v3 = [(SGSqlEntityStore *)self selectMigrationQueue];
  id v4 = v3;
  if (v3)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    int v18 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke;
    block[3] = &unk_1E65C0728;
    void block[4] = self;
    void block[5] = &v15;
    dispatch_sync(v3, block);
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = 0;
    dispatch_qos_class_t v5 = *((_DWORD *)v16 + 6);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke_2;
    v9[3] = &unk_1E65C0728;
    void v9[4] = self;
    void v9[5] = &v10;
    dispatch_block_t v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v5, 0, v9);
    dispatch_sync(v4, v6);

    int64_t v7 = v11[3];
    _Block_object_dispose(&v10, 8);
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    int64_t v7 = 2;
  }

  return v7;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) migrationNeeded];
  uint64_t result = qos_class_self();
  if (result >= 0x11) {
    int v4 = 17;
  }
  else {
    int v4 = result;
  }
  if (!v2) {
    int v4 = result;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) prepMigrator];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  id v2 = [NSString alloc];
  int v3 = [*(id *)(*(void *)(a1 + 32) + 8) isInMemory];
  int v4 = *(unsigned int **)(a1 + 32);
  uint64_t v5 = v4[20];
  uint64_t v6 = [v4 maxKnownDbVersion];
  int64_t v7 = @"disk";
  if (v3) {
    int64_t v7 = @"memory";
  }
  uint64_t v9 = [v2 initWithFormat:@"migrator.%@.full.%lu_to_%lu", v7, v5, v6, v9, v10, v11];
  uint64_t v11 = 0;
  uint64_t v10 = mach_absolute_time();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) migrate];
  SGRecordMeasurementState(&v9);
  return SGRecordMeasurementState(&v9);
}

- (void)prepMigrator
{
  self->_entityVersiouint64_t n = [(SGSqliteDatabase *)self->_db userVersion];
  self->_snippetsVersiouint64_t n = [(SGSqliteDatabase *)self->_snippetDb userVersion];
  int v3 = +[SGDatabaseMigratorEntities migrations];
  entityMigrations = self->_entityMigrations;
  self->_entityMigrations = v3;

  self->_snippetsMigrations = +[SGDatabaseMigratorSnippets migrations];
  MEMORY[0x1F41817F8]();
}

- (id)initForMigratorTestWithEntityDb:(id)a3 snippetDb:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  v13.receiver = self;
  v13.super_class = (Class)SGSqlEntityStore;
  uint64_t v9 = [(SGSqlEntityStore *)&v13 init];
  uint64_t v10 = v9;
  if (v9)
  {
    objc_storeStrong((id *)&v9->_db, a3);
    objc_storeStrong((id *)&v10->_snippetDb, a4);
    v10->_parentMessagesLimit = 10;
    uint64_t v11 = [(SGSqlEntityStore *)v10 journal];
    [v11 freezeObservers];
  }
  return v10;
}

- (void)searchableIndex:(id)a3 reindexSearchableItemsWithIdentifiers:(id)a4 acknowledgementHandler:(id)a5
{
  id v7 = a3;
  id v8 = +[SGSpotlightContactsAdapter entityIdentifiersFromCNIdentifiers:a4];
  uint64_t v9 = [(SGSqlEntityStore *)self contactsWithIdentifiers:v8];
  uint64_t v10 = [(SGSqlEntityStore *)self spotlightContactsAdapter];
  uint64_t v11 = [v10 searchableItemsForContactsForInternalIdentifiers:v9];

  spotlightReindexQueue = self->_spotlightReindexQueue;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke;
  void v15[3] = &unk_1E65BFD88;
  id v16 = v7;
  id v17 = v11;
  id v13 = v11;
  id v14 = v7;
  dispatch_sync(spotlightReindexQueue, v15);
}

uint64_t __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) indexSearchableItems:*(void *)(a1 + 40) completionHandler:&__block_literal_global_229];
}

void __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    int v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

- (void)searchableIndex:(id)a3 reindexAllSearchableItemsWithAcknowledgementHandler:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  unsigned int add = atomic_fetch_add(&self->_spotlightReindexCount, 1u);
  spotlightReindexQueue = self->_spotlightReindexQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke;
  block[3] = &unk_1E65BEED0;
  unsigned int v17 = add + 1;
  void block[4] = self;
  id v14 = v7;
  id v15 = v8;
  SEL v16 = a2;
  id v11 = v7;
  id v12 = v8;
  dispatch_async(spotlightReindexQueue, block);
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldContinueReindex:*(unsigned int *)(a1 + 64)])
  {
    id v2 = dispatch_get_global_queue(5, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_2;
    block[3] = &unk_1E65BEED0;
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    id v10 = v3;
    uint64_t v11 = v4;
    int v13 = *(_DWORD *)(a1 + 64);
    long long v8 = *(_OWORD *)(a1 + 48);
    id v5 = (id)v8;
    long long v12 = v8;
    dispatch_async(v2, block);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      id v7 = *(void (**)(void))(v6 + 16);
      v7();
    }
  }
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_2(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v21[0] = 0;
  v21[1] = v21;
  void v21[2] = 0x2020000000;
  int v22 = 0;
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  int v13 = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_3;
  id v14 = &unk_1E65BEEA8;
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  int v18 = v21;
  uint64_t v19 = v3;
  uint64_t v15 = *(void *)(a1 + 40);
  int v20 = *(_DWORD *)(a1 + 64);
  id v17 = v4;
  id v16 = *(id *)(a1 + 32);
  id v5 = (void *)MEMORY[0x1CB79B4C0](&v11);
  id v10 = (void *)MEMORY[0x1CB79B4C0](v5, v6, v7, v8, v9);

  _Block_object_dispose(v21, 8);
  objc_msgSend(v2, "fetchLastClientStateWithCompletionHandler:", v10, v11, v12, v13, v14, v15);
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(a1 + 56) + 8) + 24), 1u))
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Spotlight.m" lineNumber:896 description:@"This block should not be run more than once"];
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 176);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_4;
  v12[3] = &unk_1E65BEE80;
  id v13 = v6;
  uint64_t v14 = v7;
  int v18 = *(_DWORD *)(a1 + 72);
  id v17 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v12);
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v2 = sgLogHandle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)id v6 = 138412290;
      *(void *)&void v6[4] = v5;
      _os_log_error_impl(&dword_1CA650000, v2, OS_LOG_TYPE_ERROR, "Could not fetch last CoreSpotlight state: %@", v6, 0xCu);
    }
  }
  else if ([*(id *)(a1 + 40) _shouldContinueReindex:*(unsigned int *)(a1 + 72)])
  {
    *(void *)id v6 = 0;
    [*(id *)(a1 + 48) getBytes:v6 length:8];
    [*(id *)(a1 + 40) reindexSearchableItemsWithMinimumEntityId:*(void *)v6 searchableIndex:*(void *)(a1 + 56) acknowledgementHandler:*(void *)(a1 + 64) reindexCount:*(unsigned int *)(a1 + 72)];
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 16);
      v4();
    }
  }
}

- (BOOL)_shouldContinueReindex:(int)a3
{
  unsigned int v3 = atomic_load((unsigned int *)&self->_spotlightReindexCount);
  return v3 == a3;
}

- (void)reindexSearchableItemsWithMinimumEntityId:(unint64_t)a3 searchableIndex:(id)a4 acknowledgementHandler:(id)a5 reindexCount:(int)a6
{
  id v11 = a4;
  id v12 = a5;
  spotlightReindexQueue = self->_spotlightReindexQueue;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke;
  v16[3] = &unk_1E65BEE58;
  int v21 = a6;
  id v18 = v12;
  unint64_t v19 = a3;
  void v16[4] = self;
  id v17 = v11;
  SEL v20 = a2;
  id v14 = v11;
  id v15 = v12;
  dispatch_async(spotlightReindexQueue, v16);
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldContinueReindex:*(unsigned int *)(a1 + 72)])
  {
    id v2 = [*(id *)(a1 + 32) batchOf:50 contactsStartingAtEntityId:*(void *)(a1 + 56)];
    BOOL v3 = (unint64_t)[v2 count] < 0x32;
    uint64_t v4 = [*(id *)(a1 + 32) spotlightContactsAdapter];
    uint64_t v5 = [v4 searchableItemsForContactsForInternalIdentifiers:v2];

    [*(id *)(a1 + 40) beginIndexBatch];
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    uint64_t v7 = *(void **)(a1 + 40);
    v27[0] = 0;
    v27[1] = v27;
    void v27[2] = 0x2020000000;
    int v28 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_2;
    v17[3] = &unk_1E65BEE30;
    uint64_t v8 = *(void *)(a1 + 64);
    int v22 = v27;
    uint64_t v23 = v8;
    void v17[4] = *(void *)(a1 + 32);
    int v25 = *(_DWORD *)(a1 + 72);
    id v21 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 56);
    id v18 = v9;
    id v19 = v2;
    BOOL v26 = v3;
    uint64_t v24 = v10;
    dispatch_semaphore_t v20 = v6;
    id v11 = v6;
    id v12 = v2;
    id v13 = (void *)MEMORY[0x1CB79B4C0](v17);
    id v14 = (void *)MEMORY[0x1CB79B4C0]();

    _Block_object_dispose(v27, 8);
    [v7 indexSearchableItems:v5 completionHandler:v14];

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15)
    {
      id v16 = *(void (**)(void))(v15 + 16);
      v16();
    }
  }
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(a1 + 72) + 8) + 24), 1u))
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:*(void *)(a1 + 80) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Spotlight.m" lineNumber:837 description:@"This block should not be run more than once"];

    if (v4) {
      goto LABEL_3;
    }
  }
  else if (v3)
  {
LABEL_3:
    uint64_t v5 = (void *)MEMORY[0x1CB79B230]();
    dispatch_semaphore_t v6 = sgLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_error_impl(&dword_1CA650000, v6, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&buf, 0xCu);
    }

    goto LABEL_9;
  }
  char v8 = [*(id *)(a1 + 32) _shouldContinueReindex:*(unsigned int *)(a1 + 96)];
  uint64_t v5 = (void *)MEMORY[0x1CB79B230]();
  if (v8)
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 88);
    id v11 = (void *)MEMORY[0x1CB79B230]();
    id v12 = [*(id *)(a1 + 48) allKeys];
    uint64_t v13 = [v9 _minEntityIdFromMinEntityId:v10 withContactIdentifiers:v12];

    uint64_t v31 = v13;
    id v14 = *(void **)(a1 + 40);
    uint64_t v15 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v31 length:8];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v34 = 0x2020000000;
    int v35 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_225;
    void v23[3] = &unk_1E65BEE08;
    uint64_t v16 = *(void *)(a1 + 80);
    p_long long buf = &buf;
    uint64_t v27 = v16;
    void v23[4] = *(void *)(a1 + 32);
    id v17 = *(id *)(a1 + 64);
    char v30 = *(unsigned char *)(a1 + 100);
    id v25 = v17;
    uint64_t v28 = v31;
    id v24 = *(id *)(a1 + 40);
    int v29 = *(_DWORD *)(a1 + 96);
    id v18 = (void *)MEMORY[0x1CB79B4C0](v23);
    id v19 = (void *)MEMORY[0x1CB79B4C0]();

    goto LABEL_12;
  }
LABEL_9:
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20) {
    (*(void (**)(void))(v20 + 16))();
  }
  id v14 = *(void **)(a1 + 40);
  uint64_t v15 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a1 + 88 length:8];
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v34 = 0x2020000000;
  int v35 = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_223;
  v32[3] = &unk_1E65BEDE0;
  uint64_t v21 = *(void *)(a1 + 80);
  void v32[5] = &buf;
  v32[6] = v21;
  void v32[4] = *(void *)(a1 + 32);
  int v22 = (void *)MEMORY[0x1CB79B4C0](v32);
  id v19 = (void *)MEMORY[0x1CB79B4C0]();

LABEL_12:
  _Block_object_dispose(&buf, 8);
  [v14 endIndexBatchWithClientState:v15 critical:0 reason:9 completionHandler:v19];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_223(void *a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1[5] + 8) + 24), 1u))
  {
    dispatch_semaphore_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:a1[6] object:a1[4] file:@"SGSqlEntityStore+Spotlight.m" lineNumber:849 description:@"This block should not be run more than once"];

    if (!v4) {
      goto LABEL_6;
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  uint64_t v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    char v8 = v4;
    _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v7, 0xCu);
  }

LABEL_6:
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_225(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(a1 + 56) + 8) + 24), 1u))
  {
    dispatch_semaphore_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Spotlight.m" lineNumber:860 description:@"This block should not be run more than once"];

    if (v4) {
      goto LABEL_3;
    }
  }
  else if (v3)
  {
LABEL_3:
    uint64_t v5 = sgLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      uint64_t v9 = v4;
      _os_log_error_impl(&dword_1CA650000, v5, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v8, 0xCu);
    }

    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
  if (!*(unsigned char *)(a1 + 84)) {
    [*(id *)(a1 + 32) reindexSearchableItemsWithMinimumEntityId:*(void *)(a1 + 72) searchableIndex:*(void *)(a1 + 40) acknowledgementHandler:0 reindexCount:*(unsigned int *)(a1 + 80)];
  }
LABEL_11:
}

- (unint64_t)_minEntityIdFromMinEntityId:(unint64_t)a3 withContactIdentifiers:(id)a4
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        unint64_t v10 = [*(id *)(*((void *)&v12 + 1) + 8 * v9) integerValue];
        if (v10 > a3) {
          a3 = v10;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return a3 + 1;
}

- (id)contactsWithIdentifiers:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F5DA28] mapAndFilter:v4 f:&__block_literal_global_207_36435];
  uint64_t v6 = [v5 count];
  if (v6 != [v4 count])
  {
    uint64_t v7 = sgLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [v4 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v21 = v8 - [v5 count];
      _os_log_impl(&dword_1CA650000, v7, OS_LOG_TYPE_DEFAULT, "contactsWithIdentifiers filtered %lu entities from the wrong table.", buf, 0xCu);
    }
  }
  uint64_t v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v5, "count"));
  db = self->_db;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_211;
  v18[3] = &unk_1E65C0388;
  id v19 = v5;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_2;
  v16[3] = &unk_1E65BFF78;
  id v11 = v9;
  id v17 = v11;
  id v12 = v5;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT entityId, data FROM serializedContacts WHERE entityId IN _pas_nsarray(:ids)" onPrep:v18 onRow:v16 onError:&__block_literal_global_218_36438];
  long long v13 = v17;
  id v14 = v11;

  return v14;
}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_211(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":ids" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 getNSStringForColumnName:"entityId" table:"serializedContacts"];
  uint64_t v5 = [v3 getNSDataForColumnName:"data" table:"serializedContacts"];
  uint64_t v6 = (void *)v5;
  if (v4 && v5)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F28DC0];
    uint64_t v8 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_opt_class(), 0);
    unint64_t v10 = [v7 unarchivedObjectOfClasses:v9 fromData:v6 error:0];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v4];
  }
  else
  {
    id v11 = sgLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v14 = v4;
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1CA650000, v11, OS_LOG_TYPE_DEFAULT, "nil entityId or serializedContact data found: %@ %@", buf, 0x16u);
    }
  }
  return *MEMORY[0x1E4F93C08];
}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_216(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Could not load contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E4F93C10];
}

id __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v2 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithInternalEntityId:", objc_msgSend(a2, "longLongValue"));
  if ([v2 tableId])
  {
    id v3 = 0;
  }
  else
  {
    id v3 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v2, "rowId"));
  }

  return v3;
}

- (id)batchOf:(unint64_t)a3 contactsStartingAtEntityId:(unint64_t)a4
{
  if (a4)
  {
    uint64_t v7 = (void *)MEMORY[0x1CB79B230](self, a2);
    objc_msgSend(@"SELECT entityId, data FROM serializedContacts", "stringByAppendingString:", @" WHERE entityId >= :minEntityId");
    uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v8 = @"SELECT entityId, data FROM serializedContacts";
  }
  uint64_t v9 = (void *)MEMORY[0x1CB79B230]();
  unint64_t v10 = [(__CFString *)v8 stringByAppendingString:@" ORDER BY entityId LIMIT :limit"];

  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:a3];
  db = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke;
  v17[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  void v17[4] = a3;
  void v17[5] = a4;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_2;
  void v15[3] = &unk_1E65BEC60;
  id v13 = v11;
  id v16 = v13;
  [(SGSqliteDatabase *)db prepAndRunQuery:v10 onPrep:v17 onRow:v15 onError:&__block_literal_global_204_36452];

  return v13;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = +[SGSqliteDatabase bindParam:a2 name:":limit" int64:*(void *)(a1 + 32)];
  if (*(void *)(a1 + 40))
  {
    return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":minEntityId");
  }
  return result;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = sqlite3_column_nsstring(a2, 0);
  if (v4)
  {
    int v5 = (void *)MEMORY[0x1CB79B230]();
    id v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_opt_class(), 0);
    uint64_t v7 = sqlite3_column_nssecurecoding(a2, 1, v6);
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v4];
  }
  else
  {
    uint64_t v8 = sgLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1CA650000, v8, OS_LOG_TYPE_FAULT, "got NULL entityId from serializedContacts table", buf, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria()) {
      abort();
    }
  }

  return 0;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_202(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Could not load contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (BOOL)tombstoneExistsForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4 domainIdentifier:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v8 isEqual:@"com.apple.iChat"])
  {
    BOOL v11 = 1;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x2020000000;
    char v23 = 0;
    db = self->_db;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
    void v15[3] = &unk_1E65BFFC8;
    id v16 = v8;
    id v17 = v9;
    id v18 = self;
    id v19 = v10;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2;
    void v14[3] = &unk_1E65C03F8;
    void v14[4] = &v20;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"         SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IS NULL UNION ALL SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier=:uid    AND domainIdentifier IS NULL UNION ALL SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IN _pas_nsarray(:dids)" onPrep:v15 onRow:v14 onError:0];
    BOOL v11 = *((unsigned char *)v21 + 24) != 0;

    _Block_object_dispose(&v20, 8);
  }

  return v11;
}

void __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bid" toNSString:v3];
  [v4 bindNamedParam:":uid" toNSString:*(void *)(a1 + 40)];
  id v5 = [*(id *)(a1 + 48) _selectingDomainsForDomainIdentifier:*(void *)(a1 + 56)];
  [v4 bindNamedParam:":dids" toNSArray:v5];
}

uint64_t __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E4F93C10];
}

- (void)clearAllTombstonesForSpotlightReferencesIf:(id)a3
{
  id v4 = a3;
  id v5 = sgLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1CA650000, v5, OS_LOG_TYPE_INFO, "clearAllTombstonesForSpotlightReferencesIf: waiting for write transaction", buf, 2u);
  }

  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __74__SGSqlEntityStore_Spotlight__clearAllTombstonesForSpotlightReferencesIf___block_invoke;
  void v8[3] = &unk_1E65C0440;
  void v8[4] = self;
  id v9 = v4;
  id v7 = v4;
  [(SGSqliteDatabase *)db writeTransaction:v8];
}

void __74__SGSqlEntityStore_Spotlight__clearAllTombstonesForSpotlightReferencesIf___block_invoke(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v3 = sgLogHandle();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, "clearAllTombstonesForSpotlightReferencesIf:YES (will clear)", buf, 2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) prepAndRunQuery:@"DELETE FROM harvestQueueTombstones" onPrep:0 onRow:0 onError:0];
    uint64_t v3 = sgLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      __int16 v8 = 0;
      id v5 = "clearAllTombstonesForSpotlightReferencesIf:YES (did clear)";
      id v6 = (uint8_t *)&v8;
LABEL_8:
      _os_log_impl(&dword_1CA650000, v3, OS_LOG_TYPE_INFO, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    __int16 v7 = 0;
    id v5 = "clearAllTombstonesForSpotlightReferencesIf:NO";
    id v6 = (uint8_t *)&v7;
    goto LABEL_8;
  }
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    __int16 v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Spotlight.m", 678, @"Invalid parameter not satisfying: %@", @"bundleIdentifier" object file lineNumber description];
  }
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke;
  v9[3] = &unk_1E65BFD88;
  void v9[4] = self;
  id v10 = v5;
  id v7 = v5;
  [(SGSqliteDatabase *)db writeTransaction:v9];
}

void __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _tombstoneExistsForBundleIdentifier:*(void *)(a1 + 40)] & 1) == 0)
  {
    int v2 = *(void **)(*(void *)(a1 + 32) + 8);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_2;
    void v6[3] = &unk_1E65C05C8;
    id v7 = *(id *)(a1 + 40);
    [v2 prepAndRunQuery:@"DELETE FROM harvestQueueTombstones WHERE bundleIdentifier = :bid" onPrep:v6 onRow:0 onError:0];
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_3;
    v4[3] = &unk_1E65C05C8;
    id v5 = *(id *)(a1 + 40);
    [v3 prepAndRunQuery:@"INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) VALUES (:bid,NULL,NULL)", v4, 0, 0 onPrep onRow onError];
  }
}

uint64_t __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
}

uint64_t __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Spotlight.m", 649, @"Invalid parameter not satisfying: %@", @"bundleIdentifier" object file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }
  id v12 = [MEMORY[0x1E4F28B00] currentHandler];
  [v12 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Spotlight.m", 650, @"Invalid parameter not satisfying: %@", @"uniqueIdentifiers" object file lineNumber description];

LABEL_3:
  if ([v9 count])
  {
    db = self->_db;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke;
    void v13[3] = &unk_1E65C0688;
    void v13[4] = self;
    id v14 = v7;
    id v15 = v9;
    [(SGSqliteDatabase *)db writeTransaction:v13];
  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke(id *a1)
{
  if (([a1[4] _tombstoneExistsForBundleIdentifier:a1[5]] & 1) == 0)
  {
    int v2 = (void *)*((void *)a1[4] + 1);
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke_2;
    v3[3] = &unk_1E65BFF28;
    id v4 = a1[5];
    id v5 = a1[6];
    [v2 prepAndRunSQL:@"INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) SELECT :bid, value, NULL FROM _pas_nsarray(:uids) WHERE NOT EXISTS (SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier=value AND domainIdentifier IS NULL)", v3, 0, 0 onPrep onRow onError];
  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bid" toNSString:v3];
  [v4 bindNamedParam:":uids" toNSArray:*(void *)(a1 + 40)];
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  id v6 = (void *)MEMORY[0x1E4F1C978];
  id v7 = a4;
  id v8 = a3;
  id v9 = [v6 arrayWithObjects:&v10 count:1];

  -[SGSqlEntityStore writeTombstoneForSpotlightReferenceWithBundleIdentifier:uniqueIdentifiers:](self, "writeTombstoneForSpotlightReferenceWithBundleIdentifier:uniqueIdentifiers:", v8, v9, v10, v11);
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (!v7)
  {
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    [v21 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Spotlight.m", 581, @"Invalid parameter not satisfying: %@", @"bundleIdentifier" object file lineNumber description];
  }
  if (([v8 isEmpty] & 1) == 0)
  {
    id v9 = (void *)[v8 copy];

    id v10 = objc_opt_new();
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v11 = [v9 allDomains];
    uint64_t v12 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v27;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v27 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v26 + 1) + 8 * v15);
          id v17 = (void *)MEMORY[0x1CB79B230]();
          id v18 = [(SGSqlEntityStore *)self _selectingDomainsForDomainIdentifier:v16];
          [v10 addObjectsFromArray:v18];

          ++v15;
        }
        while (v13 != v15);
        uint64_t v13 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v13);
    }

    db = self->_db;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke;
    void v22[3] = &unk_1E65C0638;
    void v22[4] = self;
    id v23 = v7;
    id v24 = v10;
    id v8 = v9;
    id v25 = v8;
    id v20 = v10;
    [(SGSqliteDatabase *)db writeTransaction:v22];
  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke(id *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (([a1[4] _tombstoneExistsForBundleIdentifier:a1[5]] & 1) == 0)
  {
    int v2 = objc_opt_new();
    uint64_t v3 = (void *)*((void *)a1[4] + 1);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_2;
    void v37[3] = &unk_1E65BFF28;
    id v38 = a1[5];
    id v39 = a1[6];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_3;
    v35[3] = &unk_1E65BFF78;
    id v4 = v2;
    id v36 = v4;
    [v3 prepAndRunSQL:@"SELECT domainIdentifier FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IN _pas_nsset(:overlappingDomainIdentifiers)" onPrep:v37 onRow:v35 onError:0];
    id v5 = objc_opt_new();
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v6 = [a1[7] allDomains];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          if (([v4 containsDomain:v11] & 1) == 0) {
            [v5 addObject:v11];
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
      }
      while (v8);
    }

    if ([v5 count])
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v19 = v5;
      id obj = v5;
      uint64_t v12 = [obj countByEnumeratingWithState:&v27 objects:v40 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v28;
        do
        {
          for (uint64_t j = 0; j != v13; ++j)
          {
            if (*(void *)v28 != v14) {
              objc_enumerationMutation(obj);
            }
            uint64_t v16 = *(void *)(*((void *)&v27 + 1) + 8 * j);
            id v17 = (void *)*((void *)a1[4] + 1);
            v24[0] = MEMORY[0x1E4F143A8];
            v24[1] = 3221225472;
            v24[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_4;
            void v24[3] = &unk_1E65BEB88;
            id v25 = a1[5];
            uint64_t v26 = v16;
            [v17 prepAndRunQuery:@"INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) VALUES (:bid, NULL, :did)", v24, 0, 0 onPrep onRow onError];
            id v18 = (void *)*((void *)a1[4] + 1);
            v21[0] = MEMORY[0x1E4F143A8];
            v21[1] = 3221225472;
            void v21[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_5;
            void v21[3] = &unk_1E65BEB88;
            id v22 = a1[5];
            uint64_t v23 = v16;
            [v18 prepAndRunQuery:@"DELETE FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND (domainIdentifier >= :did || '.') AND (domainIdentifier < :did || '/')" onPrep:v21 onRow:0 onError:0];
          }
          uint64_t v13 = [obj countByEnumeratingWithState:&v27 objects:v40 count:16];
        }
        while (v13);
      }

      id v5 = v19;
    }
  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bid" toNSString:v3];
  [v4 bindNamedParam:":overlappingDomainIdentifiers" toNSSet:*(void *)(a1 + 40)];
}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumnName:"domainIdentifier" table:"harvestQueueTombstones"];
  if (v3) {
    [*(id *)(a1 + 32) addDomain:v3];
  }
  id v4 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v4;
}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_4(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":did" nsstring:v4];
}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_5(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  return +[SGSqliteDatabase bindParam:a2 name:":did" nsstring:v4];
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifier:(id)a4
{
  id v6 = (objc_class *)MEMORY[0x1E4F93B20];
  id v7 = a4;
  id v8 = a3;
  id v9 = (id)[[v6 alloc] initWithDomain:v7];

  [(SGSqlEntityStore *)self writeTombstoneForSpotlightReferenceWithBundleIdentifier:v8 domainIdentifiers:v9];
}

- (BOOL)_tombstoneExistsForBundleIdentifier:(id)a3
{
  id v4 = a3;
  if ([v4 isEqual:@"com.apple.iChat"])
  {
    BOOL v5 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    db = self->_db;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke;
    v9[3] = &unk_1E65C05C8;
    id v10 = v4;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke_2;
    void v8[3] = &unk_1E65BEBB0;
    void v8[4] = &v11;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IS NULL" onPrep:v9 onRow:v8 onError:0];
    BOOL v5 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return v5;
}

uint64_t __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":bid" nsstring:*(void *)(a1 + 32)];
}

uint64_t __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke_2(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

- (id)_selectingDomainsForDomainIdentifier:(id)a3
{
  id v3 = a3;
  id v4 = objc_opt_new();
  if ([v3 length])
  {
    while (1)
    {
      BOOL v5 = (void *)MEMORY[0x1CB79B230]();
      [v4 addObject:v3];
      uint64_t v6 = [v3 rangeOfString:@"." options:6];
      if (!v7) {
        break;
      }
      id v8 = [v3 substringToIndex:v6];

      id v3 = v8;
      if (![v8 length]) {
        goto LABEL_7;
      }
    }
  }
  id v8 = v3;
LABEL_7:

  return v4;
}

- (void)deleteSpotlightReferencesWithNoBundleIdentifier
{
  id v3 = (void *)MEMORY[0x1CB79B230](self, a2);
  db = self->_db;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke;
  void v6[3] = &unk_1E65BEF88;
  void v6[4] = self;
  [(SGSqliteDatabase *)db writeTransaction:v6];
  BOOL v5 = [(SGSqlEntityStore *)self kvCacheManager];
  [v5 deleteValueByRecordId:0];
}

void __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke(uint64_t a1)
{
  int v2 = objc_opt_new();
  id v3 = objc_opt_new();
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_2;
  v16[3] = &unk_1E65BED70;
  id v5 = v2;
  id v17 = v5;
  id v6 = v3;
  id v18 = v6;
  [v4 prepAndRunQuery:@"SELECT id, entityId FROM entityReferences WHERE bundleIdentifier is null", 0, v16, 0 onPrep onRow onError];
  if ([v5 count])
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_3;
    void v15[3] = &unk_1E65BED98;
    void v15[4] = *(void *)(a1 + 32);
    [v5 enumerateRangesUsingBlock:v15];
    uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v6, "count"));
    id v8 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v10 = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    uint64_t v12 = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_5;
    uint64_t v13 = &unk_1E65BEC88;
    id v9 = v7;
    id v14 = v9;
    [v6 enumerateIndexesUsingBlock:&v10];

    objc_msgSend(*(id *)(a1 + 32), "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v9, 0, v10, v11, v12, v13);
  }
}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return 0;
}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_4;
  v5[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  void v5[4] = a2;
  void v5[5] = a3;
  return [v3 prepAndRunQuery:@"DELETE FROM entityReferences WHERE id BETWEEN ? AND ?" onPrep:v5 onRow:0 onError:0];
}

void __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_5(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F5DB20] recordIdForEmailWithRowId:a2];
  [v2 addObject:v3];
}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  if (*(void *)(a1 + 40)) {
    sqlite3_int64 v4 = *(void *)(a1 + 32);
  }
  else {
    sqlite3_int64 v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sqlite3_bind_int64(a2, 1, v4);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    sqlite3_int64 v6 = *(void *)(a1 + 32) + v5 - 1;
  }
  else {
    sqlite3_int64 v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return sqlite3_bind_int64(a2, 2, v6);
}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3
{
  id v5 = a3;
  sqlite3_int64 v6 = (void *)MEMORY[0x1CB79B230]();
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke;
  void v10[3] = &unk_1E65BFEB0;
  void v10[4] = self;
  id v8 = v5;
  id v11 = v8;
  SEL v12 = a2;
  [(SGSqliteDatabase *)db writeTransaction:v10];
  id v9 = [(SGSqlEntityStore *)self kvCacheManager];
  [v9 deleteValueByRecordId:0];
}

void __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke(uint64_t a1)
{
  int v2 = objc_opt_new();
  id v3 = objc_opt_new();
  sqlite3_int64 v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_2;
  v25[3] = &unk_1E65C05C8;
  id v26 = *(id *)(a1 + 40);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_3;
  void v22[3] = &unk_1E65BED70;
  id v5 = v2;
  id v23 = v5;
  id v6 = v3;
  id v24 = v6;
  [v4 prepAndRunQuery:@"SELECT id, entityId FROM entityReferences WHERE bundleIdentifier = ?", v25, v22, 0 onPrep onRow onError];
  [*(id *)(a1 + 32) deleteURLsFromBundleIdentifier:*(void *)(a1 + 40)];
  uint64_t v7 = [*(id *)(a1 + 32) messageIdsForBundleIdentifier:*(void *)(a1 + 40) limit:500];
  if ([v7 count])
  {
    id v8 = 0;
    do
    {
      id v9 = v7;
      uint64_t v10 = [v7 objectAtIndexedSubscript:0];
      int v11 = [v8 containsObject:v10];

      if (v11)
      {
        SEL v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"SGSqlEntityStore+Spotlight.m" lineNumber:481 description:@"Encountered repeated message ID for deletion"];
      }
      [*(id *)(a1 + 32) deleteMailIntelligenceForMessageIds:v9];

      uint64_t v7 = [*(id *)(a1 + 32) messageIdsForBundleIdentifier:*(void *)(a1 + 40) limit:500];
      id v8 = v9;
    }
    while ([v7 count]);
  }
  else
  {
    id v9 = 0;
  }

  if ([v5 count])
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_4;
    void v21[3] = &unk_1E65BED98;
    void v21[4] = *(void *)(a1 + 32);
    [v5 enumerateRangesUsingBlock:v21];
    uint64_t v13 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v6, "count"));
    id v14 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v16 = MEMORY[0x1E4F143A8];
    uint64_t v17 = 3221225472;
    id v18 = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_6;
    id v19 = &unk_1E65BEC88;
    id v15 = v13;
    id v20 = v15;
    [v6 enumerateIndexesUsingBlock:&v16];

    objc_msgSend(*(id *)(a1 + 32), "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v15, 0, v16, v17, v18, v19);
  }
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = (const char *)[*(id *)(a1 + 32) UTF8String];
  return sqlite3_bind_text(a2, 1, v3, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  return 0;
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_5;
  v5[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  void v5[4] = a2;
  void v5[5] = a3;
  return [v3 prepAndRunQuery:@"DELETE FROM entityReferences WHERE id BETWEEN ? AND ?" onPrep:v5 onRow:0 onError:0];
}

void __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_6(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F5DB20] recordIdForEmailWithRowId:a2];
  [v2 addObject:v3];
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  if (*(void *)(a1 + 40)) {
    sqlite3_int64 v4 = *(void *)(a1 + 32);
  }
  else {
    sqlite3_int64 v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sqlite3_bind_int64(a2, 1, v4);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    sqlite3_int64 v6 = *(void *)(a1 + 32) + v5 - 1;
  }
  else {
    sqlite3_int64 v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return sqlite3_bind_int64(a2, 2, v6);
}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4
{
  id v7 = a3;
  id v8 = [a4 globPatterns];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke;
  void v11[3] = &unk_1E65BED48;
  id v11[4] = self;
  id v12 = v7;
  SEL v13 = a2;
  id v9 = v7;
  objc_msgSend(v8, "sg_enumerateChunksOfSize:usingBlock:", 100, v11);

  uint64_t v10 = [(SGSqlEntityStore *)self kvCacheManager];
  [v10 deleteValueByRecordId:0];
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_2;
  v9[3] = &unk_1E65BF1A8;
  id v10 = v3;
  uint64_t v11 = v4;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v3;
  [v5 writeTransaction:v9];
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_2(uint64_t a1)
{
  int v2 = objc_opt_new();
  id v3 = objc_opt_new();
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithString:", @"SELECT id, entityId FROM entityReferences WHERE bundleIdentifier = ? AND ((domainIdentifier GLOB ?)");
  if ((unint64_t)[*(id *)(a1 + 32) count] >= 2)
  {
    unint64_t v5 = 1;
    do
    {
      [v4 appendString:@" OR (domainIdentifier GLOB ?)"];
      ++v5;
    }
    while (v5 < [*(id *)(a1 + 32) count]);
  }
  [v4 appendString:@""]);
  id v6 = *(void **)(*(void *)(a1 + 40) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_3;
  v29[3] = &unk_1E65BFF28;
  id v30 = *(id *)(a1 + 48);
  id v31 = *(id *)(a1 + 32);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_4;
  v26[3] = &unk_1E65BFED8;
  id v7 = v2;
  id v27 = v7;
  id v8 = v3;
  id v28 = v8;
  [v6 prepAndRunSQL:v4 onPrep:v29 onRow:v26 onError:0];
  id v10 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = (void *)[*(id *)(a1 + 32) copy];
  [v10 deleteURLsFromBundleIdentifier:v9 groupIdentifierGlobs:v11];

  id v12 = [*(id *)(a1 + 40) messageIdsForBundleIdentifier:*(void *)(a1 + 48) domainIdentifierGlobs:*(void *)(a1 + 32) limit:500];
  if ([v12 count])
  {
    uint64_t v13 = 0;
    do
    {
      id v14 = v12;
      id v15 = [v12 objectAtIndexedSubscript:0];
      int v16 = [v13 containsObject:v15];

      if (v16)
      {
        uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
        [v17 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 40) file:@"SGSqlEntityStore+Spotlight.m" lineNumber:431 description:@"Encountered repeated message ID for deletion"];
      }
      [*(id *)(a1 + 40) deleteMailIntelligenceForMessageIds:v14];

      id v12 = [*(id *)(a1 + 40) messageIdsForBundleIdentifier:*(void *)(a1 + 48) domainIdentifierGlobs:*(void *)(a1 + 32) limit:500];
      uint64_t v13 = v14;
    }
    while ([v12 count]);
  }
  else
  {
    id v14 = 0;
  }

  if ([v7 count])
  {
    id v18 = *(void **)(*(void *)(a1 + 40) + 8);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_5;
    void v24[3] = &unk_1E65C0388;
    id v25 = v7;
    [v18 prepAndRunSQL:@"DELETE FROM entityReferences WHERE id IN _pas_nsindexset(:affectedReferenceIds)" onPrep:v24 onRow:0 onError:0];
    id v19 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v8, "count"));
    id v20 = (void *)MEMORY[0x1CB79B230]();
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_6;
    void v22[3] = &unk_1E65BEC88;
    id v21 = v19;
    id v23 = v21;
    [v8 enumerateIndexesUsingBlock:v22];

    [*(id *)(a1 + 40) _deleteIfNoSpotlightReferences:v21 addToRecentlyDeletedCache:0];
  }
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [v3 bindParam:1 toNSString:*(void *)(a1 + 32)];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "bindParam:toNSString:", v8 + v9, *(void *)(*((void *)&v10 + 1) + 8 * v9), (void)v10);
        ++v9;
      }
      while (v6 != v9);
      uint64_t v8 = (v8 + v9);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

uint64_t __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v3, "addIndex:", objc_msgSend(v4, "getInt64ForColumnName:table:", "id", 0));
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = [v4 getInt64ForColumnName:"entityId" table:0];

  [v5 addIndex:v6];
  return *MEMORY[0x1E4F93C08];
}

uint64_t __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":affectedReferenceIds" toNSIndexSet:*(void *)(a1 + 32)];
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_6(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F5DB20] recordIdForEmailWithRowId:a2];
  [v2 addObject:v3];
}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  [(SGSqlEntityStore *)self deleteURLsFromBundleIdentifier:v7 documentIdentifiers:v6];
  uint64_t v8 = [(SGSqlEntityStore *)self messageIdsForBundleIdentifier:v7 uniqueIdentifiers:v6];
  [(SGSqlEntityStore *)self deleteMailIntelligenceForMessageIds:v8];

  id v9 = [(SGSqlEntityStore *)self _recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:v7 uniqueIdentifiers:v6];

  if ([v9 count]) {
    [(SGSqlEntityStore *)self _deleteIfNoSpotlightReferences:v9 addToRecentlyDeletedCache:1];
  }
}

- (void)markLostSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v5 = [(SGSqlEntityStore *)self _recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:a3 uniqueIdentifiers:a4];
  if ([v5 count]) {
    [(SGSqlEntityStore *)self _markRecordsLostIfNoSpotlightReferences:v5];
  }
}

- (id)_recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x1CB79B230]();
  if ([v7 count])
  {
    id v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v7, "count"));
    db = self->_db;
    uint64_t v16 = MEMORY[0x1E4F143A8];
    uint64_t v17 = 3221225472;
    id v18 = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke;
    id v19 = &unk_1E65C0638;
    id v20 = v6;
    id v21 = v7;
    id v22 = self;
    id v11 = v9;
    id v23 = v11;
    [(SGSqliteDatabase *)db writeTransaction:&v16];
    long long v12 = [(SGSqlEntityStore *)self kvCacheManager];
    [v12 deleteValueByRecordId:0];

    long long v13 = v23;
    id v14 = v11;
  }
  else
  {
    id v14 = (id)objc_opt_new();
  }

  return v14;
}

void __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke(uint64_t a1)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_2;
  void v6[3] = &unk_1E65BFF28;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  int v2 = (void *)MEMORY[0x1CB79B4C0](v6);
  id v3 = *(void **)(*(void *)(a1 + 48) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_3;
  v4[3] = &unk_1E65BFF78;
  id v5 = *(id *)(a1 + 56);
  [v3 prepAndRunSQL:@"SELECT DISTINCT entityId FROM entityReferences WHERE bundleIdentifier = :bid AND uniqueIdentifier IN _pas_nsarray(:uids)" onPrep:v2 onRow:v4 onError:0];
  if ([*(id *)(a1 + 56) count]) {
    [*(id *)(*(void *)(a1 + 48) + 8) prepAndRunSQL:@"DELETE FROM entityReferences WHERE bundleIdentifier = :bid AND uniqueIdentifier IN _pas_nsarray(:uids)" onPrep:v2 onRow:0 onError:0];
  }
}

void __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bid" toNSString:v3];
  [v4 bindNamedParam:":uids" toNSArray:*(void *)(a1 + 40)];
}

uint64_t __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForEmailWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "entityId", "entityReferences"));
  [v2 addObject:v3];

  return *MEMORY[0x1E4F93C08];
}

- (BOOL)isRecentlyDeleted:(id)a3
{
  id v4 = a3;
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  recentlyDeletedEmailKeys = self->_recentlyDeletedEmailKeys;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __49__SGSqlEntityStore_Spotlight__isRecentlyDeleted___block_invoke;
  void v8[3] = &unk_1E65BED20;
  long long v10 = &v11;
  id v6 = v4;
  id v9 = v6;
  [(_PASLock *)recentlyDeletedEmailKeys runWithLockAcquired:v8];
  LOBYTE(recentlyDeletedEmailKeys) = *((unsigned char *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return (char)recentlyDeletedEmailKeys;
}

void __49__SGSqlEntityStore_Spotlight__isRecentlyDeleted___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 serialize];
  LOBYTE(v3) = [v4 containsObject:v5];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)v3;
}

- (void)_deleteIfNoSpotlightReferences:(id)a3 addToRecentlyDeletedCache:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = [(SGSqlEntityStore *)self _duplicateKeysWithZeroSpotlightReferencesFromRecordIds:a3];
  id v7 = v6;
  if (v4)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          long long v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          if (+[SGEmailKey isSupportedEntityType:](SGEmailKey, "isSupportedEntityType:", [v12 entityType]))
          {
            uint64_t v13 = [v12 emailKey];
            char v14 = [v13 serialize];

            recentlyDeletedEmailKeys = self->_recentlyDeletedEmailKeys;
            v17[0] = MEMORY[0x1E4F143A8];
            v17[1] = 3221225472;
            v17[2] = __88__SGSqlEntityStore_Spotlight___deleteIfNoSpotlightReferences_addToRecentlyDeletedCache___block_invoke;
            v17[3] = &unk_1E65BECF8;
            id v18 = v14;
            id v16 = v14;
            [(_PASLock *)recentlyDeletedEmailKeys runWithLockAcquired:v17];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v9);
    }
  }
  [(SGSqlEntityStore *)self deleteMessagesByDuplicateKey:v7];
}

void __88__SGSqlEntityStore_Spotlight___deleteIfNoSpotlightReferences_addToRecentlyDeletedCache___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeObject:*(void *)(a1 + 32)];
  [v3 addObject:*(void *)(a1 + 32)];
  if ((unint64_t)[v3 count] >= 0x14) {
    [v3 removeObjectAtIndex:0];
  }
}

- (void)_markRecordsLostIfNoSpotlightReferences:(id)a3
{
  id v6 = [(SGSqlEntityStore *)self _duplicateKeysWithZeroSpotlightReferencesFromRecordIds:a3];
  BOOL v4 = [MEMORY[0x1E4F5DA28] map:v6 f:&__block_literal_global_100_36555];
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v4];
  [(SGSqlEntityStore *)self markMessagesLost:v5];
}

uint64_t __71__SGSqlEntityStore_Spotlight___markRecordsLostIfNoSpotlightReferences___block_invoke(uint64_t a1, void *a2)
{
  return [a2 emailKey];
}

- (id)_duplicateKeysWithZeroSpotlightReferencesFromRecordIds:(id)a3
{
  id v5 = a3;
  id v6 = (void *)MEMORY[0x1CB79B230]();
  if ([v5 count])
  {
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    id v18 = __Block_byref_object_copy__36558;
    long long v19 = __Block_byref_object_dispose__36559;
    id v20 = 0;
    db = self->_db;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke;
    void v10[3] = &unk_1E65BECB0;
    id v11 = v5;
    long long v12 = self;
    uint64_t v13 = &v15;
    SEL v14 = a2;
    [(SGSqliteDatabase *)db readTransaction:v10];
    id v8 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    id v8 = (id)MEMORY[0x1E4F1CBF0];
  }

  return v8;
}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v2 = objc_opt_new();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if ([v8 tableId] != 1)
        {
          uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
          [v9 handleFailureInMethod:*(void *)(a1 + 56), *(void *)(a1 + 40), @"SGSqlEntityStore+Spotlight.m", 269, @"Unexpected table for recordId: %@", v8 object file lineNumber description];
        }
        objc_msgSend(v2, "addIndex:", objc_msgSend(v8, "rowId"));
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }

  uint64_t v10 = (void *)[v2 mutableCopy];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_2;
  void v20[3] = &unk_1E65C0208;
  void v20[4] = *(void *)(a1 + 40);
  id v11 = v10;
  id v21 = v11;
  [v2 enumerateRangesUsingBlock:v20];
  if ([v11 count])
  {
    long long v12 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v11, "count"));
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_5;
    v18[3] = &unk_1E65BEC88;
    id v19 = v12;
    id v13 = v12;
    [v11 enumerateIndexesUsingBlock:v18];
    uint64_t v14 = [*(id *)(a1 + 40) duplicateKeysFromRecordIds:v13];
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    id v13 = *(id *)(v17 + 40);
    *(void *)(v17 + 40) = MEMORY[0x1E4F1CBF0];
  }
}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_3;
  void v6[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  void v6[4] = a2;
  void v6[5] = a3;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_4;
  v4[3] = &unk_1E65BEC60;
  id v5 = *(id *)(a1 + 40);
  [v3 prepAndRunQuery:@"SELECT DISTINCT entityId FROM entityReferences WHERE entityId BETWEEN ? AND ?" onPrep:v6 onRow:v4 onError:0];
}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_5(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F5DB20] recordIdForEmailWithRowId:a2];
  [v2 addObject:v3];
}

uint64_t __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  if (*(void *)(a1 + 40)) {
    sqlite3_int64 v4 = *(void *)(a1 + 32);
  }
  else {
    sqlite3_int64 v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sqlite3_bind_int64(a2, 1, v4);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    sqlite3_int64 v6 = *(void *)(a1 + 32) + v5 - 1;
  }
  else {
    sqlite3_int64 v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return sqlite3_bind_int64(a2, 2, v6);
}

uint64_t __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  return 0;
}

- (BOOL)addSpotlightReferenceToEmailIfFullyDownloaded:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x2020000000;
  char v32 = 0;
  uint64_t v15 = (void *)MEMORY[0x1CB79B230]();
  db = self->_db;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  void v22[3] = &unk_1E65BEC18;
  void v22[4] = self;
  id v17 = v11;
  id v23 = v17;
  SEL v28 = a2;
  id v18 = v12;
  id v24 = v18;
  id v19 = v13;
  id v25 = v19;
  id v20 = v14;
  id v26 = v20;
  uint64_t v27 = &v29;
  [(SGSqliteDatabase *)db writeTransaction:v22];

  LOBYTE(v15) = *((unsigned char *)v30 + 24);
  _Block_object_dispose(&v29, 8);

  return (char)v15;
}

void __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = (void *)MEMORY[0x1CB79B230]();
  sqlite3_int64 v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", *(void *)(a1 + 40), 0);
  uint64_t v5 = [v2 duplicateKeysFromMailMessageKeys:v4];
  sqlite3_int64 v6 = [v5 firstObject];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) recordIdForKey:v6];
    id v8 = v7;
    if (v7)
    {
      if ([v7 tableId] != 1)
      {
        id v11 = [MEMORY[0x1E4F28B00] currentHandler];
        [v11 handleFailureInMethod:*(void *)(a1 + 80), *(void *)(a1 + 32), @"SGSqlEntityStore+Spotlight.m", 228, @"Unexpected table for recordId: %@", v8 object file lineNumber description];
      }
      uint64_t v15 = 0;
      id v16 = &v15;
      uint64_t v17 = 0x2020000000;
      char v18 = 0;
      uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8);
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2;
      void v13[3] = &unk_1E65C0388;
      id v10 = v8;
      id v14 = v10;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_3;
      v12[3] = &unk_1E65C03F8;
      void v12[4] = &v15;
      [v9 prepAndRunSQL:@"SELECT state, tags FROM emailMetadata WHERE id = :id LIMIT 1", v13, v12, 0 onPrep onRow onError];
      if (*((unsigned char *)v16 + 24))
      {
        [*(id *)(a1 + 32) addSpotlightReferenceToEmailRecordId:v10 withBundleIdentifier:*(void *)(a1 + 48) uniqueIdentifier:*(void *)(a1 + 56) domainIdentifier:*(void *)(a1 + 64)];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      }

      _Block_object_dispose(&v15, 8);
    }
  }
}

void __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":id", objc_msgSend(v2, "rowId"));
}

uint64_t __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 getInt64ForColumn:0];
  uint64_t v5 = [v3 getNSStringForColumn:1];

  sqlite3_int64 v6 = SGEntityTagsFromStorage(v5);

  if (v4 == 1)
  {
    id v7 = [MEMORY[0x1E4F5D9F0] isPartiallyDownloaded];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 containsObject:v7] ^ 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  id v8 = (unsigned __int8 *)MEMORY[0x1E4F93C10];

  return *v8;
}

- (id)recordIdForKey:(id)a3
{
  id v5 = a3;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x3032000000;
  id v25 = __Block_byref_object_copy__36558;
  id v26 = __Block_byref_object_dispose__36559;
  id v27 = 0;
  if ([v5 entityType] == 5)
  {
    sqlite3_int64 v6 = [v5 parentKey];

    if (v6)
    {
      uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
      [v15 handleFailureInMethod:a2 object:self file:@"SGSqlEntityStore+Spotlight.m" lineNumber:182 description:@"Email entities should not have a parent"];
    }
    db = self->_db;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke;
    void v20[3] = &unk_1E65C05C8;
    id v21 = v5;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_2;
    void v19[3] = &unk_1E65BEBB0;
    void v19[4] = &v22;
    [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT id FROM emailMetadata WHERE key = :key" onPrep:v20 onRow:v19 onError:0];
  }
  else
  {
    id v8 = (void *)MEMORY[0x1CB79B230]();
    uint64_t v9 = [v5 parentKey];

    if (v9) {
      id v10 = @" = :parentKey";
    }
    else {
      id v10 = @" is NULL";
    }
    id v11 = [@"SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey" stringByAppendingString:v10];
    id v12 = self->_db;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_3;
    v17[3] = &unk_1E65C05C8;
    id v18 = v5;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_4;
    v16[3] = &unk_1E65BEBB0;
    void v16[4] = &v22;
    [(SGSqliteDatabase *)v12 prepAndRunQuery:v11 onPrep:v17 onRow:v16 onError:0];
  }
  id v13 = (id)v23[5];
  _Block_object_dispose(&v22, 8);

  return v13;
}

void __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) messageKey];
  id v3 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":key" nsstring:v3];
}

uint64_t __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdForEmailWithRowId:", sqlite3_column_int64(a2, 0));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_3(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", [*(id *)(a1 + 32) entityType]);
  uint64_t v4 = [*(id *)(a1 + 32) entityKey];
  id v5 = [v4 serialize];
  +[SGSqliteDatabase bindParam:a2 name:":entityKey" nsstring:v5];

  sqlite3_int64 v6 = [*(id *)(a1 + 32) parentKey];

  if (v6)
  {
    id v8 = [*(id *)(a1 + 32) parentKey];
    id v7 = [v8 serialize];
    +[SGSqliteDatabase bindParam:a2 name:":parentKey" nsstring:v7];
  }
}

uint64_t __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F5DB20], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a2, 0));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

- (id)duplicateKeysFromRecordIds:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ([v5 count])
  {
    id v23 = objc_opt_new();
    context = (void *)MEMORY[0x1CB79B230]();
    sqlite3_int64 v6 = objc_opt_new();
    id v7 = objc_opt_new();
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v25 = v5;
    id v8 = v5;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (!v9) {
      goto LABEL_15;
    }
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v31;
    while (1)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        int v14 = [v13 tableId];
        if (v14 == 1)
        {
          uint64_t v15 = [v13 rowId];
          id v16 = v6;
          goto LABEL_11;
        }
        if (!v14)
        {
          uint64_t v15 = [v13 rowId];
          id v16 = v7;
LABEL_11:
          [v16 addIndex:v15];
          continue;
        }
        uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
        objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"SGSqlEntityStore+Spotlight.m", 137, @"Unsupported table id %lu", objc_msgSend(v13, "tableId"));
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (!v10)
      {
LABEL_15:

        db = self->_db;
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        void v26[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke;
        v26[3] = &unk_1E65C0638;
        void v26[4] = self;
        id v27 = v6;
        id v19 = v23;
        id v28 = v19;
        id v29 = v7;
        id v20 = v7;
        id v21 = v6;
        [(SGSqliteDatabase *)db readTransaction:v26];

        id v5 = v25;
        goto LABEL_17;
      }
    }
  }
  id v19 = (id)MEMORY[0x1E4F1CBF0];
LABEL_17:

  return v19;
}

void __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_2;
  void v10[3] = &unk_1E65C0388;
  id v11 = *(id *)(a1 + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_3;
  void v8[3] = &unk_1E65BFF78;
  id v9 = *(id *)(a1 + 48);
  [v2 prepAndRunSQL:@"SELECT key, type FROM emailMetadata WHERE id IN _pas_nsindexset(:emailIndexSet)", v10, v8, 0 onPrep onRow onError];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_4;
  void v6[3] = &unk_1E65C0388;
  id v7 = *(id *)(a1 + 56);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_5;
  v4[3] = &unk_1E65BFF78;
  id v5 = *(id *)(a1 + 48);
  [v3 prepAndRunSQL:@"SELECT e.entityKey, e.entityType, ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.id IN _pas_nsindexset(:nonEmailIndexSet)", v6, v4, 0 onPrep onRow onError];
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":emailIndexSet" toNSIndexSet:*(void *)(a1 + 32)];
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getInt64ForColumnName:"type" table:0];
  if (SGEntityTypeIsMessage())
  {
    id v5 = [SGMessageKey alloc];
    sqlite3_int64 v6 = [v3 nonnullNSStringForColumnName:"key" table:0];
    id v7 = [(SGMessageKey *)v5 initWithSerialized:v6];

    id v8 = *(void **)(a1 + 32);
    id v9 = [[SGDuplicateKey alloc] initWithEntityKey:v7 entityType:v4 parentKey:0];
    [v8 addObject:v9];
  }
  uint64_t v10 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v10;
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":nonEmailIndexSet" toNSIndexSet:*(void *)(a1 + 32)];
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_5(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 nonnullNSStringForColumnName:"entityKey" table:"entity"];
  uint64_t v5 = [v3 getInt64ForColumnName:"entityType" table:"entity"];
  sqlite3_int64 v6 = [v3 getNSStringForColumnName:"parentKey" table:"entityParentage"];

  id v7 = *(void **)(a1 + 32);
  id v8 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v4 entityType:v5 serializedParentKey:v6];
  [v7 addObject:v8];

  id v9 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v9;
}

- (id)duplicateKeysFromMailMessageKeys:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sgMap();
  uint64_t v5 = objc_opt_new();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  sqlite3_int64 v6 = [(SGSqlEntityStore *)self duplicateKeysMatchingAnyTag:v4];
  id v7 = [v6 allValues];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v24 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v13 = v12;
        uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v20;
          do
          {
            for (uint64_t j = 0; j != v15; ++j)
            {
              if (*(void *)v20 != v16) {
                objc_enumerationMutation(v13);
              }
              [v5 addObject:*(void *)(*((void *)&v19 + 1) + 8 * j)];
            }
            uint64_t v15 = [v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
          }
          while (v15);
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v9);
  }

  return v5;
}

uint64_t __64__SGSqlEntityStore_Spotlight__duplicateKeysFromMailMessageKeys___block_invoke(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F5D9F0] messageWithEmailKey:a2];
}

- (void)addSpotlightReferenceToEmailRecordId:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if ([v11 tableId] != 1)
  {
    long long v20 = [MEMORY[0x1E4F28B00] currentHandler];
    [v20 handleFailureInMethod:a2, self, @"SGSqlEntityStore+Spotlight.m", 91, @"Unexpected table for recordId: %@", v11 object file lineNumber description];
  }
  db = self->_db;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __123__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailRecordId_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  void v21[3] = &unk_1E65BF020;
  void v21[4] = self;
  id v22 = v12;
  id v23 = v13;
  id v24 = v11;
  id v25 = v14;
  id v16 = v14;
  id v17 = v11;
  id v18 = v13;
  id v19 = v12;
  [(SGSqliteDatabase *)db writeTransaction:v21];
}

void __123__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailRecordId_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(void *a1)
{
  id v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  id v3 = *(void **)(a1[4] + 8);
  v10[0] = @"bundleIdentifier";
  v10[1] = @"uniqueIdentifier";
  uint64_t v5 = a1[6];
  uint64_t v4 = (void *)a1[7];
  v11[0] = v2;
  v11[1] = v5;
  v10[2] = @"entityId";
  sqlite3_int64 v6 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "rowId"));
  void v11[2] = v6;
  void v10[3] = @"domainIdentifier";
  id v7 = (void *)a1[8];
  uint64_t v8 = v7;
  if (!v7)
  {
    uint64_t v8 = [MEMORY[0x1E4F1CA98] null];
  }
  void v11[3] = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];
  [v3 insertOrReplaceIntoTable:@"entityReferences" dictionary:v9 onError:0];

  if (!v7) {
}
  }

- (BOOL)hasSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  db = self->_db;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke;
  void v13[3] = &unk_1E65BEB88;
  id v9 = v6;
  id v14 = v9;
  id v10 = v7;
  id v15 = v10;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v12[3] = &unk_1E65BEBB0;
  void v12[4] = &v16;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT 1 FROM entityReferences WHERE bundleIdentifier = ? AND uniqueIdentifier = ? LIMIT 1" onPrep:v13 onRow:v12 onError:&__block_literal_global_11_36622];
  LOBYTE(v6) = *((unsigned char *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return (char)v6;
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = (const char *)[*(id *)(a1 + 40) UTF8String];
  return sqlite3_bind_text(a2, 2, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to check for existing spotlight reference: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)domainIdentifierForSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  long long v20 = __Block_byref_object_copy__36558;
  long long v21 = __Block_byref_object_dispose__36559;
  id v22 = 0;
  db = self->_db;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke;
  void v14[3] = &unk_1E65BEB88;
  id v9 = v6;
  id v15 = v9;
  id v10 = v7;
  id v16 = v10;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  void v13[3] = &unk_1E65BEBB0;
  void v13[4] = &v17;
  [(SGSqliteDatabase *)db prepAndRunQuery:@"SELECT domainIdentifier FROM entityReferences WHERE bundleIdentifier = ? AND uniqueIdentifier = ? LIMIT 1" onPrep:v14 onRow:v13 onError:&__block_literal_global_36628];
  id v11 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v11;
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = (const char *)[*(id *)(a1 + 40) UTF8String];
  return sqlite3_bind_text(a2, 2, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_nsstring(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = sgLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412290;
    id v6 = v2;
    _os_log_error_impl(&dword_1CA650000, v3, OS_LOG_TYPE_ERROR, "Failed to check for existing spotlight reference: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)displayableEntities:(id)a3
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v35 = objc_opt_new();
  int v5 = objc_opt_new();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = v4;
  uint64_t v6 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v45 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        [v10 entityType];
        if (SGEntityTypeIsCurated()) {
          id v11 = v35;
        }
        else {
          id v11 = v5;
        }
        [v11 addObject:v10];
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
    }
    while (v7);
  }

  id v12 = objc_opt_new();
  if ([v5 count])
  {
    id v13 = sgMap();
    db = self->_db;
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_2;
    v42[3] = &unk_1E65C0388;
    id v43 = v13;
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    void v40[2] = __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_3;
    v40[3] = &unk_1E65BFF78;
    id v41 = v12;
    id v15 = v13;
    [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE state NOT IN (:deleted, :undisplayable) AND key IN _pas_nsarray(:keys)" onPrep:v42 onRow:v40 onError:0];
  }
  long long v33 = objc_opt_new();
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v16 = v5;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v37;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v37 != v19) {
          objc_enumerationMutation(v16);
        }
        long long v21 = *(void **)(*((void *)&v36 + 1) + 8 * v20);
        id v22 = [v21 parentKey];

        if (v22)
        {
          id v23 = [v21 parentKey];
          id v24 = [v23 messageKey];
          id v25 = [v24 serialize];
          char v26 = [v12 containsObject:v25];

          if ((v26 & 1) == 0) {
            goto LABEL_21;
          }
LABEL_20:
          [v33 addObject:v21];
          goto LABEL_21;
        }
        id v27 = [v21 messageKey];
        id v28 = [v27 serialize];
        int v29 = [v12 containsObject:v28];

        if (v29) {
          goto LABEL_20;
        }
LABEL_21:
        ++v20;
      }
      while (v18 != v20);
      uint64_t v30 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
      uint64_t v18 = v30;
    }
    while (v30);
  }

  long long v31 = [v33 setByAddingObjectsFromSet:v35];

  return v31;
}

void __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":deleted" toInteger:2];
  [v3 bindNamedParam:":undisplayable" toInteger:4];
  [v3 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

uint64_t __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = [a2 getNSStringForColumnName:"key" table:"emailMetadata"];
  if (v3)
  {
    [*(id *)(a1 + 32) addObject:v3];
  }
  else
  {
    id v4 = sgLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1CA650000, v4, OS_LOG_TYPE_DEFAULT, "nil key found in emailMetadata", v7, 2u);
    }
  }
  int v5 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v5;
}

id __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 parentKey];
  if (v3)
  {
    id v4 = [v2 parentKey];

    int v5 = [v4 messageKey];
    uint64_t v6 = [v5 serialize];
  }
  else
  {
    id v4 = [v2 messageKey];

    uint64_t v6 = [v4 serialize];
  }

  return v6;
}

- (id)filterOutUndisplayableEntities:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = sgMapSelector();
  uint64_t v6 = [(SGSqlEntityStore *)self displayableEntities:v5];
  uint64_t v7 = objc_opt_new();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v8 = v4;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v14 = objc_msgSend(v13, "duplicateKey", (void)v17);
        int v15 = [v6 containsObject:v14];

        if (v15) {
          [v7 addObject:v13];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v10);
  }

  return v7;
}

- (void)markMessagesFound:(id)a3
{
  id v4 = a3;
  [(SGSqlEntityStore *)self clearMasterEntityCache];
  int v5 = sgMapSelector();

  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke;
  void v8[3] = &unk_1E65BFD88;
  void v8[4] = self;
  id v9 = v5;
  id v7 = v5;
  [(SGSqliteDatabase *)db writeTransaction:v8];
}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F1C9C8] date];
  [v2 timeIntervalSince1970];
  uint64_t v4 = v3;

  int v5 = *(void **)(*(void *)(a1 + 32) + 8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_2;
  void v13[3] = &unk_1E65BFF50;
  uint64_t v15 = v4;
  id v14 = *(id *)(a1 + 40);
  [v5 prepAndRunSQL:@"UPDATE emailMetadata SET os_activity_scope_state_s state = :state, lastSeenTimestamp = :lastSeen WHERE unlikely(os_activity_scope_state_s state = :undisplayable) AND key IN _pas_nsarray(:keys)", v13, 0, 0 onPrep onRow onError];
  LODWORD(v5) = sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]);
  +[SGAggregateLogging messagesFoundAfterUndisplayablyLost:(int)v5];
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_3;
  uint64_t v10 = &unk_1E65BFF50;
  uint64_t v12 = v4;
  id v11 = *(id *)(a1 + 40);
  [v6 prepAndRunSQL:@"UPDATE emailMetadata SET os_activity_scope_state_s state = :state, lastSeenTimestamp = :lastSeen WHERE unlikely(state != :normal) AND key IN _pas_nsarray(:keys)", &v7, 0, 0 onPrep onRow onError];
  +[SGAggregateLogging messagesFound:](SGAggregateLogging, "messagesFound:", sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "handle", v7, v8, v9, v10))+ (uint64_t)(int)v5);
}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":state" toInteger:3];
  [v3 bindNamedParam:":undisplayable" toInteger:4];
  [v3 bindNamedParam:":lastSeen" toDouble:*(double *)(a1 + 40)];
  [v3 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":state" toInteger:3];
  [v3 bindNamedParam:":normal" toInteger:1];
  [v3 bindNamedParam:":lastSeen" toDouble:*(double *)(a1 + 40)];
  [v3 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
}

- (void)pruneLostMessagesWithSource:(id)a3 count:(unint64_t)a4
{
  id v6 = a3;
  uint64_t v7 = objc_opt_new();
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke;
  void v30[3] = &unk_1E65BFF78;
  id v8 = v7;
  id v31 = v8;
  id v9 = (void *)MEMORY[0x1CB79B4C0](v30);
  db = self->_db;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_2;
  v26[3] = &unk_1E65BFE18;
  id v11 = v6;
  id v27 = v11;
  unint64_t v29 = a4;
  id v12 = v8;
  id v28 = v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE unlikely(os_activity_scope_state_s state = :lost) AND sourceKey = :sourceKey AND NOT (tagsHaveEscapedTag(tags, :eventTag) OR tagsHaveEscapedTag(tags, :contactTag)) ORDER BY lastSeenTimestamp ASC LIMIT :limit" onPrep:v26 onRow:v9 onError:0];
  if ([v12 count] < a4)
  {
    id v13 = self->_db;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_3;
    void v22[3] = &unk_1E65BFE18;
    id v23 = v11;
    unint64_t v25 = a4;
    id v24 = v12;
    [(SGSqliteDatabase *)v13 prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE unlikely(os_activity_scope_state_s state = :lost) AND sourceKey = :sourceKey AND tagsHaveEscapedTag(tags, :contactTag) ORDER BY lastSeenTimestamp ASC LIMIT :limit" onPrep:v22 onRow:v9 onError:0];
  }
  if ([v12 count] < a4)
  {
    id v14 = self->_db;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    long long v17 = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_4;
    long long v18 = &unk_1E65BFE18;
    id v19 = v11;
    unint64_t v21 = a4;
    id v20 = v12;
    [(SGSqliteDatabase *)v14 prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE unlikely(os_activity_scope_state_s state = :lost) AND sourceKey = :sourceKey AND tagsHaveEscapedTag(tags, :eventTag) ORDER BY lastSeenTimestamp ASC LIMIT :limit" onPrep:&v15 onRow:v9 onError:0];
  }
  +[SGAggregateLogging messagesPruned:](SGAggregateLogging, "messagesPruned:", objc_msgSend(v12, "count", v15, v16, v17, v18));
  [(SGSqlEntityStore *)self deleteEntitiesByDuplicateKey:v12 emitChangeNotifications:1];
}

uint64_t __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 nonnullNSStringForColumnName:"key" table:"emailMetadata"];
  uint64_t v4 = *(void **)(a1 + 32);
  int v5 = [[SGDuplicateKey alloc] initWithSerializedEntityKey:v3 entityType:5 serializedParentKey:0];
  [v4 addObject:v5];

  id v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v6;
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_2(uint64_t a1, void *a2)
{
  id v5 = a2;
  [v5 bindNamedParam:":lost" toInt64:3];
  [v5 bindNamedParam:":sourceKey" toNSString:*(void *)(a1 + 32)];
  id v3 = escapedTagForEntityExtraction(2);
  [v5 bindNamedParam:":eventTag" toNSString:v3];

  uint64_t v4 = escapedTagForEntityExtraction(4);
  [v5 bindNamedParam:":contactTag" toNSString:v4];

  objc_msgSend(v5, "bindNamedParam:toInt64:", ":limit", *(void *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_3(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 bindNamedParam:":lost" toInt64:3];
  [v4 bindNamedParam:":sourceKey" toNSString:*(void *)(a1 + 32)];
  id v3 = escapedTagForEntityExtraction(4);
  [v4 bindNamedParam:":contactTag" toNSString:v3];

  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(void *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 bindNamedParam:":lost" toInt64:3];
  [v4 bindNamedParam:":sourceKey" toNSString:*(void *)(a1 + 32)];
  id v3 = escapedTagForEntityExtraction(2);
  [v4 bindNamedParam:":eventTag" toNSString:v3];

  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(void *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

- (void)markMessagesLost:(id)a3
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x3032000000;
    id v24 = __Block_byref_object_copy__38135;
    unint64_t v25 = __Block_byref_object_dispose__38136;
    id v26 = 0;
    id v26 = (id)objc_opt_new();
    [(SGSqlEntityStore *)self clearMasterEntityCache];
    id v5 = sgMapSelector();
    db = self->_db;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke;
    v18[3] = &unk_1E65C0700;
    void v18[4] = self;
    id v7 = v5;
    id v19 = v7;
    id v20 = &v21;
    [(SGSqliteDatabase *)db writeTransaction:v18];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = (id)v22[5];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          id v13 = objc_msgSend((id)v22[5], "objectForKeyedSubscript:", v12, (void)v14);
          -[SGSqlEntityStore pruneLostMessagesWithSource:count:](self, "pruneLostMessagesWithSource:count:", v12, (int)[v13 intValue] - self->_lostMessageOverflow);
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v27 count:16];
      }
      while (v9);
    }

    _Block_object_dispose(&v21, 8);
  }
}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_2;
  void v10[3] = &unk_1E65C0388;
  id v11 = *(id *)(a1 + 40);
  [v2 prepAndRunSQL:@"UPDATE emailMetadata SET os_activity_scope_state_s state = :undisplayablyLost WHERE unlikely(os_activity_scope_state_s state = :lost) AND key in _pas_nsarray(:keys) AND lastSeenTimestamp < :lastSeenCutoff" onPrep:v10 onRow:0 onError:0];
  +[SGAggregateLogging messagesUndisplayablyLost:](SGAggregateLogging, "messagesUndisplayablyLost:", sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]));
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_3;
  void v8[3] = &unk_1E65C0388;
  id v9 = *(id *)(a1 + 40);
  [v3 prepAndRunSQL:@"UPDATE emailMetadata SET os_activity_scope_state_s state = :lost, lastSeenTimestamp = :now WHERE likely(state NOT IN (:lost, :undisplayablyLost)) AND key IN _pas_nsarray(:keys)", v8, 0, 0 onPrep onRow onError];
  +[SGAggregateLogging messagesLost:](SGAggregateLogging, "messagesLost:", sqlite3_changes((sqlite3 *)[*(id *)(*(void *)(a1 + 32) + 8) handle]));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_5;
  void v7[3] = &unk_1E65BFDD0;
  uint64_t v6 = *(void *)(a1 + 48);
  void v7[4] = v4;
  void v7[5] = v6;
  [v5 prepAndRunQuery:@"SELECT sourceKey, COUNT(*) FROM emailMetadata WHERE unlikely(os_activity_scope_state_s state = :lost) GROUP BY sourceKey", &__block_literal_global_40_38140, v7, 0 onPrep onRow onError];
}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":lost" toInteger:3];
  [v3 bindNamedParam:":undisplayablyLost" toInteger:4];
  [v3 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
  id v5 = [MEMORY[0x1E4F1C9C8] date];
  [v5 timeIntervalSince1970];
  [v3 bindNamedParam:":lastSeenCutoff" toDouble:v4 + -172800.0];
}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":lost" toInteger:3];
  [v3 bindNamedParam:":undisplayablyLost" toInteger:4];
  [v3 bindNamedParam:":keys" toNSArray:*(void *)(a1 + 32)];
  id v4 = [MEMORY[0x1E4F1C9C8] date];
  [v4 timeIntervalSince1970];
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":now");
}

uint64_t __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_column_nsstring(a2, 0);
  if (v4) {
    id v5 = (__CFString *)v4;
  }
  else {
    id v5 = &stru_1F24EEF20;
  }
  unint64_t v6 = sqlite3_column_int64(a2, 1);
  if (v6 > *(void *)(*(void *)(a1 + 32) + 96))
  {
    id v7 = [NSNumber numberWithLongLong:v6];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v7 forKeyedSubscript:v5];
  }
  return 0;
}

uint64_t __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:a2 name:":lost" int64:3];
}

- (void)markMessagesUndisplayablyLost:(id)a3
{
  id v4 = a3;
  if ([v4 count])
  {
    [(SGSqlEntityStore *)self clearMasterEntityCache];
    id v5 = sgMapSelector();
    db = self->_db;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke;
    void v8[3] = &unk_1E65BFD88;
    void v8[4] = self;
    id v9 = v5;
    id v7 = v5;
    [(SGSqliteDatabase *)db writeTransaction:v8];
  }
}

void __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke_2;
  v2[3] = &unk_1E65C0388;
  id v3 = *(id *)(a1 + 40);
  [v1 prepAndRunSQL:@"UPDATE emailMetadata SET os_activity_scope_state_s state = :undisplayablyLost WHERE key IN _pas_nsarray(:serializedKeys)" onPrep:v2 onRow:0 onError:0];
}

void __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNamedParam:":undisplayablyLost" toInteger:4];
  [v3 bindNamedParam:":serializedKeys" toNSArray:*(void *)(a1 + 32)];
}

- (void)updateMessages:(id)a3 state:(unint64_t)a4
{
  id v6 = a3;
  switch(a4)
  {
    case 0uLL:
      [MEMORY[0x1E4F1CA00] raise:@"Invalid state" format:@"state can't be SGMailMessageUnset"];
      break;
    case 1uLL:
      [(SGSqlEntityStore *)self markMessagesLost:v6];
      break;
    case 2uLL:
      [(SGSqlEntityStore *)self markMessagesFound:v6];
      break;
    case 3uLL:
      [(SGSqlEntityStore *)self deleteMessages:v6];
      break;
    default:
      break;
  }
  MEMORY[0x1F41817F8]();
}

- (id)loadMessagesToRefresh
{
  id v3 = objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke_2;
  void v7[3] = &unk_1E65BFF78;
  id v5 = v3;
  id v8 = v5;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT key FROM emailMetadata WHERE state IN (:lost, :undisplayable) ORDER BY lastSeenTimestamp asc" onPrep:&__block_literal_global_38165 onRow:v7 onError:0];

  return v5;
}

uint64_t __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 nonnullNSStringForColumnName:"key" table:0];
  id v4 = *(void **)(a1 + 32);
  id v5 = [(SGMessageKey *)[SGEmailKey alloc] initWithSerialized:v3];
  [v4 addObject:v5];

  id v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  return *v6;
}

void __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 bindNamedParam:":lost" toInt64:3];
  [v2 bindNamedParam:":undisplayable" toInt64:4];
}

- (id)_deserializeRange:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = SGDelimitedStringsDeserialize();
  if ([v4 count] == 4)
  {
    id v5 = [v4 objectAtIndexedSubscript:0];
    [v5 doubleValue];
    double v7 = v6;

    id v8 = (void *)MEMORY[0x1E4F1CAF0];
    id v9 = [v4 objectAtIndexedSubscript:1];
    uint64_t v10 = [v8 timeZoneWithAbbreviation:v9];

    id v11 = [v4 objectAtIndexedSubscript:2];
    [v11 doubleValue];
    double v13 = v12;

    long long v14 = (void *)MEMORY[0x1E4F1CAF0];
    long long v15 = [v4 objectAtIndexedSubscript:3];
    long long v16 = [v14 timeZoneWithAbbreviation:v15];

    if (v10 && v16)
    {
      long long v17 = (void *)MEMORY[0x1E4F5DB40];
      double v18 = v7;
      id v19 = v10;
    }
    else
    {
      if (v10 || !v16)
      {
        if (!v10 || v16)
        {
          uint64_t v24 = [MEMORY[0x1E4F5DB40] floatingRangeWithUTCStart:v7 end:v13];
          goto LABEL_15;
        }
        id v26 = sgEventsLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v27) = 0;
          _os_log_fault_impl(&dword_1CA650000, v26, OS_LOG_TYPE_FAULT, "SGSqlEntityStore+Events: event endTimezone is nil but startTimezone is not nil", (uint8_t *)&v27, 2u);
        }

        long long v17 = (void *)MEMORY[0x1E4F5DB40];
        double v18 = v7;
        id v19 = v10;
        double v22 = v13;
        uint64_t v23 = v10;
LABEL_14:
        uint64_t v24 = [v17 rangeWithStart:v19 startTimeZone:v23 end:v18 endTimeZone:v22];
LABEL_15:
        id v20 = (void *)v24;

        goto LABEL_16;
      }
      uint64_t v21 = sgEventsLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v27) = 0;
        _os_log_fault_impl(&dword_1CA650000, v21, OS_LOG_TYPE_FAULT, "SGSqlEntityStore+Events: event startTimezone is nil but endTimezone is not nil", (uint8_t *)&v27, 2u);
      }

      long long v17 = (void *)MEMORY[0x1E4F5DB40];
      double v18 = v7;
      id v19 = v16;
    }
    double v22 = v13;
    uint64_t v23 = v16;
    goto LABEL_14;
  }
  uint64_t v10 = sgLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v27 = 138412290;
    id v28 = v3;
    _os_log_error_impl(&dword_1CA650000, v10, OS_LOG_TYPE_ERROR, "malformed serialized time range: %@", (uint8_t *)&v27, 0xCu);
  }
  id v20 = 0;
LABEL_16:

  return v20;
}

- (id)_serializeRange:(id)a3
{
  id v3 = a3;
  id v4 = [v3 startTimeZone];
  uint64_t v5 = [v4 abbreviation];
  double v6 = (void *)v5;
  if (v5) {
    double v7 = (__CFString *)v5;
  }
  else {
    double v7 = &stru_1F24EEF20;
  }
  id v8 = v7;

  id v9 = [v3 endTimeZone];
  uint64_t v10 = [v9 abbreviation];
  id v11 = (void *)v10;
  if (v10) {
    double v12 = (__CFString *)v10;
  }
  else {
    double v12 = &stru_1F24EEF20;
  }
  double v13 = v12;

  id v14 = [NSString alloc];
  [v3 start];
  long long v16 = objc_msgSend(v14, "initWithFormat:", @"%f", v15);
  id v17 = [NSString alloc];
  [v3 end];
  uint64_t v19 = v18;

  id v20 = objc_msgSend(v17, "initWithFormat:", @"%f", v19);
  uint64_t v21 = SGDelimitedStringsSerialize();

  return v21;
}

- (id)loadEventForRecordId:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = -1;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke;
  void v10[3] = &unk_1E65C0388;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke_2;
  v9[3] = &unk_1E65C03F8;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id FROM events WHERE entityId = :entityId" onPrep:v10 onRow:v9 onError:0];
  if (v13[3] == -1)
  {
    double v7 = 0;
  }
  else
  {
    double v7 = -[SGSqlEntityStore loadEventForPrimaryKey:](self, "loadEventForPrimaryKey:");
  }

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));
}

uint64_t __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumn:0];
  return 1;
}

- (id)loadEventForDuplicateKey:(id)a3
{
  int64_t v4 = [(SGSqlEntityStore *)self checkExistsEventForDuplicateKey:a3];
  if (v4 == -1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = [(SGSqlEntityStore *)self loadEventForPrimaryKey:v4];
  }
  return v5;
}

- (int64_t)checkExistsEventForDuplicateKey:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = -1;
  db = self->_db;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke;
  void v10[3] = &unk_1E65C0388;
  id v6 = v4;
  id v11 = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke_2;
  v9[3] = &unk_1E65C03F8;
  void v9[4] = &v12;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id FROM events WHERE duplicateKey = :duplicateKey" onPrep:v10 onRow:v9 onError:0];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 serialize];
  [v3 bindNamedParam:":duplicateKey" toNSString:v4];
}

uint64_t __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumn:0];
  return 1;
}

- (id)loadEventForPrimaryKey:(int64_t)a3
{
  uint64_t v5 = objc_opt_new();
  db = self->_db;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke;
  v34[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v34[4] = a3;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  void v31[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_2;
  v31[3] = &unk_1E65BFED8;
  id v7 = v5;
  id v32 = v7;
  long long v33 = self;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT id FROM locations WHERE eventId = :primaryKey" onPrep:v34 onRow:v31 onError:0];
  id v8 = objc_opt_new();
  id v9 = self->_db;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_3;
  void v30[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v30[4] = a3;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_4;
  void v28[3] = &unk_1E65BFF78;
  id v10 = v8;
  id v29 = v10;
  [(SGSqliteDatabase *)v9 prepAndRunSQL:@"SELECT name FROM eventTags WHERE eventId = :primaryKey" onPrep:v30 onRow:v28 onError:0];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_5;
  void v27[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v27[4] = a3;
  id v11 = (void *)MEMORY[0x1CB79B4C0](v27);
  uint64_t v21 = 0;
  double v22 = &v21;
  uint64_t v23 = 0x3032000000;
  uint64_t v24 = __Block_byref_object_copy__38292;
  unint64_t v25 = __Block_byref_object_dispose__38293;
  id v26 = 0;
  uint64_t v12 = self->_db;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_44;
  v17[3] = &unk_1E65BFF00;
  void v17[4] = self;
  id v20 = &v21;
  id v13 = v10;
  id v18 = v13;
  id v14 = v7;
  id v19 = v14;
  [(SGSqliteDatabase *)v12 prepAndRunSQL:@"SELECT entityId, duplicateKey, sourceKey, title, content, creationTimestamp, lastModifiedTimestamp, whenRange, structuredData, state, curated FROM events WHERE id = :primaryKey" onPrep:v11 onRow:v17 onError:0];
  id v15 = (id)v22[5];

  _Block_object_dispose(&v21, 8);
  return v15;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getInt64ForColumn:0];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) storageLocationWithPrimaryKey:v3];
  [v4 addObject:v5];

  return 0;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumn:0];
  if (v3)
  {
    id v4 = [MEMORY[0x1E4F5D9F0] resolveName:v3];
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }
  return 0;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_5(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 getInt64ForColumnName:"entityId" table:"events"];
  uint64_t v23 = [v3 nonnullNSStringForColumnName:"duplicateKey" table:"events"];
  double v22 = [[SGDuplicateKey alloc] initWithSerialized:v23];
  uint64_t v21 = [v3 getNSStringForColumnName:"sourceKey" table:"events"];
  id v20 = [v3 getNSStringForColumnName:"title" table:"events"];
  id v19 = [v3 getNSStringForColumnName:"content" table:"events"];
  uint64_t v18 = [v3 getInt64ForColumnName:"creationTimestamp" table:"events"];
  uint64_t v5 = [v3 getInt64ForColumnName:"lastModifiedTimestamp" table:"events"];
  id v6 = [v3 getNSStringForColumnName:"whenRange" table:"events"];
  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) _deserializeRange:v6];
  }
  else
  {
    id v7 = 0;
  }
  id v8 = [v3 getNSDataForColumnName:"structuredData" table:"events"];
  int v9 = [v3 getInt64ForColumnName:"state" table:"events"];
  BOOL v10 = [v3 getInt64ForColumnName:"curated" table:"events"] != 0;
  id v11 = [SGStorageEvent alloc];
  uint64_t v12 = [MEMORY[0x1E4F5DB20] recordIdWithInternalEntityId:v4];
  BYTE4(v17) = v10;
  LODWORD(v17) = v9;
  uint64_t v13 = -[SGStorageEvent initWithRecordId:duplicateKey:sourceKey:content:title:creationTimestamp:lastModifiedTimestamp:tags:when:locations:structuredData:state:curated:](v11, "initWithRecordId:duplicateKey:sourceKey:content:title:creationTimestamp:lastModifiedTimestamp:tags:when:locations:structuredData:state:curated:", v12, v22, v21, v19, v20, *(void *)(a1 + 40), (double)v18, (double)v5, v7, *(void *)(a1 + 48), v8, v17);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  return 1;
}

- (void)insertEventTagsAndLocations:(id)a3 primaryKey:(int64_t)a4
{
  id v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke;
  v9[3] = &unk_1E65BFEB0;
  id v10 = v6;
  int64_t v11 = a4;
  void v9[4] = self;
  id v8 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
}

void __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_2;
  void v15[3] = &unk_1E65BFF50;
  id v3 = *(void **)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  id v16 = v3;
  [v2 prepAndRunSQL:@"INSERT INTO eventTags (eventId, name) SELECT :eventId, value FROM _pas_nsarray(:tagStrings)", v15, 0, 0 onPrep onRow onError];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 40), "locations", 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * v8);
        id v10 = (void *)MEMORY[0x1CB79B230]();
        [*(id *)(a1 + 32) commitStorageLocation:v9 withEventId:*(void *)(a1 + 48)];
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v18 count:16];
    }
    while (v6);
  }
}

void __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 bindNamedParam:":eventId" toInt64:v3];
  id v7 = [*(id *)(a1 + 32) tags];
  uint64_t v5 = [v7 allObjects];
  uint64_t v6 = objc_msgSend(v5, "_pas_mappedArrayWithTransform:", &__block_literal_global_38318);
  [v4 bindNamedParam:":tagStrings" toNSArray:v6];
}

uint64_t __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 name];
}

- (void)bindStatementsForCommit:(id)a3 storageEvent:(id)a4
{
  id v20 = a3;
  id v6 = a4;
  id v7 = [v6 recordId];
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v7, "numericValue"));

  uint64_t v8 = [v6 duplicateKey];
  uint64_t v9 = [v8 serialize];
  [v20 bindNamedParam:":duplicateKey" toNSString:v9];

  id v10 = [v6 sourceKey];
  [v20 bindNamedParam:":sourceKey" toNSString:v10];

  long long v11 = [v6 title];
  [v20 bindNamedParam:":title" toNSString:v11];

  long long v12 = [v6 content];
  [v20 bindNamedParam:":content" toNSString:v12];

  [v6 creationTimestamp];
  [v20 bindNamedParam:":creationTimestamp" toInt64:(uint64_t)v13];
  [v6 lastModifiedTimestamp];
  [v20 bindNamedParam:":lastModifiedTimestamp" toInt64:(uint64_t)v14];
  id v15 = [v6 when];

  if (v15)
  {
    id v16 = [v6 when];
    uint64_t v17 = [(SGSqlEntityStore *)self _serializeRange:v16];
    [v20 bindNamedParam:":whenRange" toNSString:v17];
  }
  else
  {
    [v20 bindNamedParamToNull:":whenRange"];
  }
  uint64_t v18 = [v6 structuredData];

  if (v18)
  {
    uint64_t v19 = [v6 structuredData];
    [v20 bindNamedParam:":structuredData" toNSData:v19];
  }
  else
  {
    [v20 bindNamedParamToNull:":structuredData"];
  }
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":state", objc_msgSend(v6, "state"));
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":curated", objc_msgSend(v6, "curated"));
}

- (int64_t)insertEvent:(id)a3
{
  id v4 = a3;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = __40__SGSqlEntityStore_Events__insertEvent___block_invoke;
  void v21[3] = &unk_1E65BFF28;
  void v21[4] = self;
  id v5 = v4;
  id v22 = v5;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v21);
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  db = self->_db;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __40__SGSqlEntityStore_Events__insertEvent___block_invoke_2;
  v12[3] = &unk_1E65BFE68;
  void v12[4] = self;
  double v13 = @"INSERT INTO events (entityId, duplicateKey, sourceKey, title, content, creationTimestamp, lastModifiedTimestamp, whenRange, structuredData, state, curated) VALUES (:entityId, :duplicateKey, :sourceKey, :title, :content, :creationTimestamp, :lastModifiedTimestamp, :whenRange, :structuredData, :state, :curated)";
  id v8 = v6;
  id v15 = v8;
  id v16 = &v17;
  id v9 = v5;
  id v14 = v9;
  [(SGSqliteDatabase *)db writeTransaction:v12];
  int64_t v10 = v18[3];

  _Block_object_dispose(&v17, 8);
  return v10;
}

uint64_t __40__SGSqlEntityStore_Events__insertEvent___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) bindStatementsForCommit:a2 storageEvent:*(void *)(a1 + 40)];
}

uint64_t __40__SGSqlEntityStore_Events__insertEvent___block_invoke_2(void *a1)
{
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[7] onRow:0 onError:0];
  *(void *)(*(void *)(a1[8] + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(a1[4] + 8) handle]);
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(*(void *)(a1[8] + 8) + 24);
  return [v2 insertEventTagsAndLocations:v3 primaryKey:v4];
}

- (int64_t)updateEvent:(id)a3 primaryKey:(int64_t)a4
{
  id v6 = a3;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke;
  void v24[3] = &unk_1E65BFE18;
  int64_t v26 = a4;
  void v24[4] = self;
  id v7 = v6;
  id v25 = v7;
  id v8 = (void *)MEMORY[0x1CB79B4C0](v24);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_2;
  void v23[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v23[4] = a4;
  id v9 = (void *)MEMORY[0x1CB79B4C0](v23);
  db = self->_db;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_3;
  void v15[3] = &unk_1E65BFE40;
  void v15[4] = self;
  id v16 = @"UPDATE events SET entityId = :entityId, duplicateKey = :duplicateKey, sourceKey = :sourceKey, title = :title, content = :content, creationTimestamp = :creationTimestamp, lastModifiedTimestamp = :lastModifiedTimestamp, whenRange = :whenRange, structuredData = :structuredData, state = :state, curated = :curated WHERE id = :primaryKey";
  uint64_t v17 = @"DELETE FROM eventTags WHERE eventId = :primaryKey";
  uint64_t v18 = @"DELETE FROM locations WHERE eventId = :primaryKey";
  id v19 = v7;
  id v20 = v8;
  id v21 = v9;
  int64_t v22 = a4;
  id v11 = v7;
  id v12 = v9;
  id v13 = v8;
  [(SGSqliteDatabase *)db writeTransaction:v15];

  return a4;
}

void __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = a2;
  [v4 bindNamedParam:":primaryKey" toInt64:v3];
  [*(id *)(a1 + 32) bindStatementsForCommit:v4 storageEvent:*(void *)(a1 + 40)];
}

uint64_t __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_3(void *a1)
{
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[9] onRow:0 onError:0];
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[6] onPrep:a1[10] onRow:0 onError:0];
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[7] onPrep:a1[10] onRow:0 onError:0];
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[11];
  return [v2 insertEventTagsAndLocations:v3 primaryKey:v4];
}

- (int64_t)commitEvent:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __40__SGSqlEntityStore_Events__commitEvent___block_invoke;
  v9[3] = &unk_1E65C0700;
  id v11 = &v12;
  void v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  [(SGSqliteDatabase *)db writeTransaction:v9];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

uint64_t __40__SGSqlEntityStore_Events__commitEvent___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) duplicateKey];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 checkExistsEventForDuplicateKey:v3];

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -1)
  {
    uint64_t result = [v5 insertEvent:v4];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  }
  else
  {
    return objc_msgSend(v5, "updateEvent:primaryKey:", v4);
  }
  return result;
}

- (int64_t)commitSpotlightMapping:(id)a3 bundleIdentifier:(id)a4 domainIdentifier:(id)a5 uniqueIdentifier:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v36 = 0;
  long long v37 = &v36;
  uint64_t v38 = 0x2020000000;
  uint64_t v39 = -1;
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke;
  v33[3] = &unk_1E65BFF28;
  id v14 = v11;
  id v34 = v14;
  id v15 = v13;
  id v35 = v15;
  id v16 = (id)MEMORY[0x1CB79B4C0](v33);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_2;
  v32[3] = &unk_1E65C03F8;
  void v32[4] = &v36;
  uint64_t v17 = (void *)MEMORY[0x1CB79B4C0](v32);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT id FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier AND uniqueIdentifier = :uniqueIdentifier" onPrep:v16 onRow:v17 onError:0];
  sqlite3_int64 insert_rowid = v37[3];
  if (insert_rowid == -1)
  {
    id v19 = [v12 stringByAppendingString:@"."];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    void v27[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_3;
    void v27[3] = &unk_1E65BFFC8;
    id v28 = v10;
    id v29 = v15;
    id v30 = v14;
    id v20 = v19;
    id v31 = v20;
    id v21 = (void *)MEMORY[0x1CB79B4C0](v27);

    db = self->_db;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_4;
    void v24[3] = &unk_1E65BFFF0;
    void v24[4] = self;
    id v25 = @"INSERT INTO mailIntelligence_spotlightMapping (messageId, uniqueIdentifier, terminatedDomainIdentifier, bundleIdentifier) VALUES (:messageId, :uniqueIdentifier, :terminatedDomainIdentifier, :bundleIdentifier) ON CONFLICT(bundleIdentifier, uniqueIdentifier) DO UPDATE SET messageId=:messageId, terminatedDomainIdentifier=:terminatedDomainIdentifier";
    id v16 = v21;
    id v26 = v16;
    [(SGSqliteDatabase *)db writeTransaction:v24];
    sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid([(SGSqliteDatabase *)self->_db handle]);
    void v37[3] = insert_rowid;
  }
  _Block_object_dispose(&v36, 8);

  return insert_rowid;
}

void __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleIdentifier" toNSString:v3];
  [v4 bindNamedParam:":uniqueIdentifier" toNSString:*(void *)(a1 + 40)];
}

uint64_t __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 getInt64ForColumnName:"id" table:"mailIntelligence_spotlightMapping"];
  return *MEMORY[0x1E4F93C10];
}

void __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_3(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 bindNamedParam:":messageId" toNSString:v3];
  [v4 bindNamedParam:":uniqueIdentifier" toNSString:a1[5]];
  [v4 bindNamedParam:":bundleIdentifier" toNSString:a1[6]];
  [v4 bindNamedParam:":terminatedDomainIdentifier" toNSString:a1[7]];
}

uint64_t __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_4(void *a1)
{
  return [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[6] onRow:0 onError:0];
}

- (id)spotlightUniqueIdentifierForBundleIdentifier:(id)a3 messageId:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x3032000000;
  id v21 = __Block_byref_object_copy__40137;
  int64_t v22 = __Block_byref_object_dispose__40138;
  id v23 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke;
  void v15[3] = &unk_1E65BFF28;
  id v8 = v7;
  id v16 = v8;
  id v9 = v6;
  id v17 = v9;
  id v10 = (void *)MEMORY[0x1CB79B4C0](v15);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke_2;
  void v14[3] = &unk_1E65C03F8;
  void v14[4] = &v18;
  id v11 = (void *)MEMORY[0x1CB79B4C0](v14);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT uniqueIdentifier FROM mailIntelligence_spotlightMapping WHERE messageId = :messageId AND bundleIdentifier = :bundleIdentifier" onPrep:v10 onRow:v11 onError:0];
  id v12 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v12;
}

void __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":messageId" toNSString:v3];
  [v4 bindNamedParam:":bundleIdentifier" toNSString:*(void *)(a1 + 40)];
}

uint64_t __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumnName:"uniqueIdentifier" table:"mailIntelligence_spotlightMapping"];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *MEMORY[0x1E4F93C10];
}

- (id)messageIdsForBundleIdentifier:(id)a3 domainIdentifierGlobs:(id)a4 limit:(unint64_t)a5
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v20 = a3;
  id v8 = a4;
  id v9 = objc_opt_new();
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = v8;
  uint64_t v10 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke;
        void v24[3] = &unk_1E65BFF28;
        id v25 = v20;
        uint64_t v26 = v14;
        id v15 = (void *)MEMORY[0x1CB79B4C0](v24);
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        void v21[2] = __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke_2;
        void v21[3] = &unk_1E65BFFA0;
        id v22 = v9;
        unint64_t v23 = a5;
        id v16 = (void *)MEMORY[0x1CB79B4C0](v21);
        [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT messageId FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier AND terminatedDomainIdentifier GLOB :domainIdentifierGlob" onPrep:v15 onRow:v16 onError:0];
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    }
    while (v11);
  }

  id v17 = [v9 allObjects];

  return v17;
}

void __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleIdentifier" toNSString:v3];
  [v4 bindNamedParam:":domainIdentifierGlob" toNSString:*(void *)(a1 + 40)];
}

uint64_t __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 nonnullNSStringForColumnName:"messageId" table:"mailIntelligence_spotlightMapping"];
  [*(id *)(a1 + 32) addObject:v3];
  unint64_t v4 = [*(id *)(a1 + 32) count];
  unint64_t v5 = *(void *)(a1 + 40);
  id v6 = (unsigned __int8 *)MEMORY[0x1E4F93C08];
  id v7 = (unsigned __int8 *)MEMORY[0x1E4F93C10];

  if (v4 >= v5) {
    id v8 = v7;
  }
  else {
    id v8 = v6;
  }
  return *v8;
}

- (id)messageIdsForBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_opt_new();
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke;
  v18[3] = &unk_1E65BFF28;
  id v19 = v6;
  id v20 = v7;
  id v9 = v7;
  id v10 = v6;
  uint64_t v11 = (void *)MEMORY[0x1CB79B4C0](v18);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke_2;
  v16[3] = &unk_1E65BFF78;
  id v12 = v8;
  id v17 = v12;
  id v13 = (void *)MEMORY[0x1CB79B4C0](v16);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT messageId FROM mailIntelligence_spotlightMapping WHERE uniqueIdentifier IN _pas_nsarray(:uniqueIdentifiers) AND bundleIdentifier = :bundleIdentifier" onPrep:v11 onRow:v13 onError:0];
  id v14 = v12;

  return v14;
}

void __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleIdentifier" toNSString:v3];
  [v4 bindNamedParam:":uniqueIdentifiers" toNSArray:*(void *)(a1 + 40)];
}

uint64_t __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 nonnullNSStringForColumnName:"messageId" table:"mailIntelligence_spotlightMapping"];
  [*(id *)(a1 + 32) addObject:v3];
  id v4 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v4;
}

- (id)messageIdsForBundleIdentifier:(id)a3 limit:(unint64_t)a4
{
  id v6 = a3;
  id v7 = objc_opt_new();
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke;
  v16[3] = &unk_1E65BFF50;
  id v17 = v6;
  unint64_t v18 = a4;
  id v8 = v6;
  id v9 = (void *)MEMORY[0x1CB79B4C0](v16);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke_2;
  void v14[3] = &unk_1E65BFF78;
  id v10 = v7;
  id v15 = v10;
  uint64_t v11 = (void *)MEMORY[0x1CB79B4C0](v14);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT messageId FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier LIMIT :limit" onPrep:v9 onRow:v11 onError:0];
  id v12 = v10;

  return v12;
}

void __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":bundleIdentifier" toNSString:v3];
  [v4 bindNamedParam:":limit" toInt64:*(void *)(a1 + 40)];
}

uint64_t __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 nonnullNSStringForColumnName:"messageId" table:"mailIntelligence_spotlightMapping"];
  [*(id *)(a1 + 32) addObject:v3];
  id v4 = (unsigned __int8 *)MEMORY[0x1E4F93C08];

  return *v4;
}

- (id)messageIdForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x3032000000;
  id v21 = __Block_byref_object_copy__40137;
  id v22 = __Block_byref_object_dispose__40138;
  id v23 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke;
  void v15[3] = &unk_1E65BFF28;
  id v8 = v7;
  id v16 = v8;
  id v9 = v6;
  id v17 = v9;
  id v10 = (void *)MEMORY[0x1CB79B4C0](v15);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  void v14[3] = &unk_1E65C03F8;
  void v14[4] = &v18;
  uint64_t v11 = (void *)MEMORY[0x1CB79B4C0](v14);
  [(SGSqliteDatabase *)self->_db prepAndRunSQL:@"SELECT messageId FROM mailIntelligence_spotlightMapping WHERE uniqueIdentifier = :uniqueIdentifier AND bundleIdentifier = :bundleIdentifier" onPrep:v10 onRow:v11 onError:0];
  id v12 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v12;
}

void __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNamedParam:":uniqueIdentifier" toNSString:v3];
  [v4 bindNamedParam:":bundleIdentifier" toNSString:*(void *)(a1 + 40)];
}

uint64_t __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumnName:"messageId" table:"mailIntelligence_spotlightMapping"];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *MEMORY[0x1E4F93C10];
}

- (id)loadTagForPrimaryKey:(int64_t)a3
{
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke;
  void v15[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  void v15[4] = a3;
  uint64_t v4 = (void *)MEMORY[0x1CB79B4C0](v15, a2);
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = __Block_byref_object_copy__42175;
  id v13 = __Block_byref_object_dispose__42176;
  id v14 = 0;
  db = self->_db;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke_11;
  void v8[3] = &unk_1E65C03F8;
  void v8[4] = &v9;
  [(SGSqliteDatabase *)db prepAndRunSQL:@"SELECT name FROM eventTags WHERE id = :primaryKey" onPrep:v4 onRow:v8 onError:0];
  id v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

uint64_t __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindNamedParam:":primaryKey" toInt64:*(void *)(a1 + 32)];
}

uint64_t __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke_11(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 getNSStringForColumn:0];
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x1E4F5D9F0] resolveName:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  return 1;
}

- (int64_t)commitTag:(id)a3
{
  id v4 = a3;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = __36__SGSqlEntityStore_Tags__commitTag___block_invoke;
  void v19[3] = &unk_1E65C0388;
  id v5 = v4;
  id v20 = v5;
  id v6 = (void *)MEMORY[0x1CB79B4C0](v19);
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __36__SGSqlEntityStore_Tags__commitTag___block_invoke_2;
  void v11[3] = &unk_1E65C03B0;
  id v11[4] = self;
  id v12 = @"INSERT INTO eventTags (name) VALUES (:name)";
  id v8 = v6;
  id v13 = v8;
  id v14 = &v15;
  [(SGSqliteDatabase *)db writeTransaction:v11];
  int64_t v9 = v16[3];

  _Block_object_dispose(&v15, 8);
  return v9;
}

void __36__SGSqlEntityStore_Tags__commitTag___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 name];
  [v3 bindNamedParam:":name" toNSString:v4];
}

sqlite3_int64 __36__SGSqlEntityStore_Tags__commitTag___block_invoke_2(void *a1)
{
  [*(id *)(a1[4] + 8) prepAndRunSQL:a1[5] onPrep:a1[6] onRow:0 onError:0];
  sqlite3_int64 result = sqlite3_last_insert_rowid((sqlite3 *)[*(id *)(a1[4] + 8) handle]);
  *(void *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

@end