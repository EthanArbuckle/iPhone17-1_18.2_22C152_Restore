void sub_1C5F1AD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, xmlDoc *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&a12);
  std::unique_ptr<_xmlDoc,siri::dialogengine::xmlDocDeleter>::reset[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void std::unique_ptr<_xmlValidCtxt,siri::dialogengine::xmlValidCtxtDeleter>::reset[abi:ne180100](xmlValidCtxt **a1)
{
  v2 = *a1;
  *a1 = 0;
  if (v2) {
    xmlFreeValidCtxt(v2);
  }
}

void std::unique_ptr<_xmlDoc,siri::dialogengine::xmlDocDeleter>::reset[abi:ne180100](xmlDoc **a1)
{
  v2 = *a1;
  *a1 = 0;
  if (v2) {
    xmlFreeDoc(v2);
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ParseDtd(std::string const&)::$_0 &&>>()
{
}

BOOL siri::dialogengine::ValidateXmlString(Context *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    v6 = (const char *)a2;
  }
  else {
    v6 = *(const char **)a2;
  }
  if (v5 >= 0) {
    int v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 8);
  }
  v8 = xmlParseMemory(v6, v7);
  return siri::dialogengine::ValidateXmlDoc(a1, v8, a3);
}

void sub_1C5F1B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)va);
  _Unwind_Resume(a1);
}

void sub_1C5F1B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)va);
  _Unwind_Resume(a1);
}

void sub_1C5F1B468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F1B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5F1B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsSSMLTag(siri::dialogengine *this, const siri::dialogengine::ChunkTag *a2)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "say-as");
    std::string::basic_string[abi:ne180100]<0>(v9, "prosody");
    std::string::basic_string[abi:ne180100]<0>(v10, "phoneme");
    std::string::basic_string[abi:ne180100]<0>(v11, "break");
    std::string::basic_string[abi:ne180100]<0>(v12, "emphasis");
    std::string::basic_string[abi:ne180100]<0>(v13, "w");
    std::string::basic_string[abi:ne180100]<0>(v14, "sub");
    std::string::basic_string[abi:ne180100]<0>(v15, "audio");
    std::string::basic_string[abi:ne180100]<0>(v16, "mark");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, (const void **)__p, 9);
    for (uint64_t i = 0; i != -27; i -= 3)
    {
      if (SHIBYTE(v16[i + 2]) < 0) {
        operator delete((void *)v16[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, &dword_1C5C1E000);
  }
  if (*((char *)this + 223) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 200);
  }
  siri::dialogengine::StringToLower((uint64_t)&v6, (uint64_t)__p);
  v3 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 != &unk_1EA3D7C60;
}

void sub_1C5F1B95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v23 = 0;
  while (1)
  {
    if (*(char *)(v21 + v23 + 215) < 0) {
      operator delete(*(void **)(v21 + v23 + 192));
    }
    v23 -= 24;
    if (v23 == -216)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::dialogengine::ContainsTTSCodes(uint64_t a1)
{
  uint64_t TTSRegex = siri::dialogengine::GetTTSRegex((siri::dialogengine *)a1);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  memset(__p, 0, 41);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    v4 = (std::sub_match<const char *> *)a1;
  }
  else {
    v4 = *(std::sub_match<const char *> **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(TTSRegex, v4, (std::sub_match<const char *> *)((char *)v4 + v3), __p, 0);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  return v5;
}

void sub_1C5F1BA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetTTSRegex(siri::dialogengine *this)
{
  {
    operator new();
  }
  v1 = (std::once_flag::_State_type *)siri::dialogengine::GetTTSRegex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetTTSRegex(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTTSRegex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTTSRegex(void)::sRegex;
}

void sub_1C5F1BB5C(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTTSRegex(void)::$_0 &&>>()
{
}

void sub_1C5F1BBC0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ContainsTTStoiCodes(char **a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "\x1B\\toi=");
  uint64_t v2 = siri::dialogengine::StringContains(a1, (char *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void siri::dialogengine::ExtractSpeechCodesFromString(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (siri::dialogengine *)siri::dialogengine::ContainsSSMLCodes(a1);
  if (v4)
  {
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetSSMLRegex(v4);
  }
  else
  {
    int v7 = (siri::dialogengine *)siri::dialogengine::ContainsTTSCodes(a1);
    if (!v7) {
      return;
    }
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetTTSRegex(v7);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0) {
    v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  }
  else {
    v9.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  v10.__i_ = &v9.__i_[v8];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v36, v9, v10, SSMLRegex, v6);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  *(_OWORD *)&v34.__begin_.__i_ = *(_OWORD *)&v36.__begin_.__i_;
  *(_OWORD *)((char *)&v34.__end_.__i_ + 4) = *(_OWORD *)((char *)&v36.__end_.__i_ + 4);
  memset(&v34.__match_, 0, 24);
  std::vector<std::ssub_match>::pointer begin = v36.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = v36.__match_.__matches_.__end_;
  if (v36.__match_.__matches_.__end_ != v36.__match_.__matches_.__begin_)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL
        * (((char *)v36.__match_.__matches_.__end_ - (char *)v36.__match_.__matches_.__begin_) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    char v14 = (std::sub_match<std::__wrap_iter<const char *>> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v13);
    v34.__match_.__matches_.__begin_ = v14;
    v34.__match_.__matches_.__end_cap_.__value_ = &v14[v15];
    do
    {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v16 = begin->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(void *)&v14->matched = *(void *)&begin->matched;
      v14->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v16;
      ++v14;
      ++begin;
    }
    while (begin != end);
    v34.__match_.__matches_.__end_ = v14;
  }
  *(_OWORD *)&v34.__match_.__prefix_.second.__i_ = *(_OWORD *)&v36.__match_.__prefix_.second.__i_;
  v34.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v36.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v34.__match_.__suffix_.matched = *(_OWORD *)&v36.__match_.__suffix_.matched;
  v34.__match_.__position_start_.__i_ = v36.__match_.__position_start_.__i_;
  v34.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v36.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v34.__match_.__unmatched_.matched = *(_OWORD *)&v36.__match_.__unmatched_.matched;
  while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v34, &__x))
  {
    if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_) {
      p_matched = &v34.__match_.__unmatched_.matched;
    }
    else {
      p_matched = &v34.__match_.__matches_.__begin_->matched;
    }
    if (*p_matched)
    {
      if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_) {
        p_unmatched = &v34.__match_.__unmatched_;
      }
      else {
        p_unmatched = v34.__match_.__matches_.__begin_;
      }
      p_second = &v34.__match_.__matches_.__begin_->second;
      if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_) {
        p_second = &v34.__match_.__unmatched_.second;
      }
      std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, (char *)p_unmatched->first.__i_, (char *)p_second->__i_, p_second->__i_ - p_unmatched->first.__i_);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v33 = 0;
    }
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v20 = *(void *)(a2 + 16);
    if (v21 >= v20)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a2) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(void *)a2) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v26) {
        v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v26);
      }
      else {
        v27 = 0;
      }
      v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      long long v29 = *(_OWORD *)__p;
      v28->__r_.__value_.__r.__words[2] = v33;
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      __p[1] = 0;
      std::string::size_type v33 = 0;
      __p[0] = 0;
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v30 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v31 = SHIBYTE(v33);
      *(void *)(a2 + 8) = v30;
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)__p;
      *(void *)(v21 + 16) = v33;
      *(_OWORD *)unint64_t v21 = v22;
      *(void *)(a2 + 8) = v21 + 24;
    }
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v34);
  }
  if (v34.__match_.__matches_.__begin_)
  {
    v34.__match_.__matches_.__end_ = v34.__match_.__matches_.__begin_;
    operator delete(v34.__match_.__matches_.__begin_);
  }
  if (v36.__match_.__matches_.__begin_)
  {
    v36.__match_.__matches_.__end_ = v36.__match_.__matches_.__begin_;
    operator delete(v36.__match_.__matches_.__begin_);
  }
}

void sub_1C5F1BF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
}

uint64_t siri::dialogengine::ContainsSSMLCodes(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    uint64_t v1 = (unsigned char *)a1;
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2)
  {
    char v3 = &v1[v2];
    v4 = &v1[v2];
    char v5 = v4 - 1;
    while (*v1 != 60)
    {
LABEL_35:
      if (v3 == ++v1) {
        return 0;
      }
    }
    std::regex_constants::match_flag_type v6 = v1 + 1;
    while (1)
    {
      if (v6 == v3) {
        goto LABEL_35;
      }
      unsigned int v7 = *v6;
      if (v7 == 34)
      {
        *(_DWORD *)unint64_t v20 = *(_DWORD *)v16;
        *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
        *(_DWORD *)v19 = *(_DWORD *)v15;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
        uint64_t v8 = v6 + 1;
        if (v6 + 1 != v3)
        {
          uint64_t v9 = v5 - v6;
          while (*v8 != 34)
          {
            *(_DWORD *)unint64_t v20 = *(_DWORD *)v16;
            *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
            *(_DWORD *)v19 = *(_DWORD *)v15;
            *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
            ++v8;
            if (!--v9)
            {
              uint64_t v8 = v4;
              break;
            }
          }
          if (v8 != v3 && *v8 == 34)
          {
LABEL_25:
            *(_DWORD *)v18 = *(_DWORD *)v20;
            *(_DWORD *)&v18[3] = *(_DWORD *)&v20[3];
            *(_DWORD *)v17 = *(_DWORD *)v19;
            *(_DWORD *)&v17[3] = *(_DWORD *)&v19[3];
            std::regex_constants::match_flag_type v6 = v8 + 1;
            goto LABEL_33;
          }
        }
        unsigned int v7 = *v6;
      }
      if (v7 == 39)
      {
        *(_DWORD *)unint64_t v20 = *(_DWORD *)v16;
        *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
        *(_DWORD *)v19 = *(_DWORD *)v15;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
        uint64_t v8 = v6 + 1;
        if (v6 + 1 != v3)
        {
          uint64_t v10 = v5 - v6;
          while (*v8 != 39)
          {
            *(_DWORD *)unint64_t v20 = *(_DWORD *)v16;
            *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
            *(_DWORD *)v19 = *(_DWORD *)v15;
            *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
            ++v8;
            if (!--v10)
            {
              uint64_t v8 = v4;
              break;
            }
          }
          if (v8 != v3 && *v8 == 39) {
            goto LABEL_25;
          }
        }
        unsigned int v7 = *v6;
      }
      BOOL v11 = v7 > 0x3E;
      uint64_t v12 = (1 << v7) & 0x4000008400000000;
      if (!v11 && v12 != 0)
      {
        if (*v6 != 62) {
          goto LABEL_35;
        }
        return 1;
      }
      *(_DWORD *)v18 = *(_DWORD *)v16;
      *(_DWORD *)&v18[3] = *(_DWORD *)&v16[3];
      *(_DWORD *)v17 = *(_DWORD *)v15;
      *(_DWORD *)&v17[3] = *(_DWORD *)&v15[3];
      ++v6;
LABEL_33:
      *(_DWORD *)std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v16 = *(_DWORD *)v18;
      *(_DWORD *)&v16[3] = *(_DWORD *)&v18[3];
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v17;
      *(_DWORD *)&void v15[3] = *(_DWORD *)&v17[3];
    }
  }
  return 0;
}

uint64_t siri::dialogengine::GetSSMLRegex(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetSSMLRegex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetSSMLRegex(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSSMLRegex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSSMLRegex(void)::sRegex;
}

void sub_1C5F1C2A8(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSSMLRegex(void)::$_0 &&>>()
{
}

void sub_1C5F1C30C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RemoveSpeechCodesFromString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v4 = (siri::dialogengine *)siri::dialogengine::ContainsSSMLCodes(a1);
  if (v4)
  {
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetSSMLRegex(v4);
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    if ((v7 & 0x80u) == 0) {
      v8.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
    }
    else {
      v8.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
    }
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    v9.__i_ = &v8.__i_[v7];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(a2, v8, v9, SSMLRegex, "");
    return;
  }
  std::regex_constants::match_flag_type v6 = (siri::dialogengine *)siri::dialogengine::ContainsTTSCodes(a1);
  if (v6)
  {
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetTTSRegex(v6);
    goto LABEL_5;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v10 = *(const std::string::value_type **)a1;
    std::string::size_type v11 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a2, v10, v11);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_1C5F1C3EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddSpeechCodesToString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(void *)(a2 + 8) - *(void *)a2 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(const void ***)a2, (const void **)a1, (uint64_t)&v12);
    int v5 = *(char *)(*(void *)a2 + 47);
    if (v5 >= 0) {
      std::regex_constants::match_flag_type v6 = (const std::string::value_type *)(*(void *)a2 + 24);
    }
    else {
      std::regex_constants::match_flag_type v6 = *(const std::string::value_type **)(*(void *)a2 + 24);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *(unsigned __int8 *)(*(void *)a2 + 47);
    }
    else {
      std::string::size_type v7 = *(void *)(*(void *)a2 + 32);
    }
    std::__wrap_iter<const char *> v8 = std::string::append(&v12, v6, v7);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v10 = *(const std::string::value_type **)a1;
    std::string::size_type v11 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a3, v10, v11);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_1C5F1C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConvertSSMLToTTSCode(siri::dialogengine::Context *a1, uint64_t a2, uint64_t *a3)
{
  if (*(char *)(a2 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a2 + 200), *(void *)(a2 + 208));
  }
  else {
    std::string v132 = *(std::string *)(a2 + 200);
  }
  siri::dialogengine::StringToLower((uint64_t)&v132, (uint64_t)&v125);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if ((v127 & 0x80) == 0)
  {
    BOOL v6 = 0;
    std::string::size_type v7 = &v125;
    switch(v127)
    {
      case 1:
        if (v125 != 119) {
          return 0;
        }
        goto LABEL_12;
      case 3:
        if ((unsigned __int16)v125 != 30067 || BYTE2(v125) != 98) {
          return 0;
        }
        goto LABEL_84;
      case 4:
        goto LABEL_153;
      case 5:
        if (v125 != 1634038370 || BYTE4(v125) != 107) {
          goto LABEL_40;
        }
        goto LABEL_57;
      case 6:
        if (v125 != 762929523 || WORD2(v125) != 29537) {
          return 0;
        }
        goto LABEL_117;
      case 7:
        if (v125 != 1852794992 || *(_DWORD *)((char *)&v125 + 3) != 1701668206) {
          goto LABEL_22;
        }
        goto LABEL_174;
      case 8:
        if (v125 != (void *)0x7369736168706D65) {
          return 0;
        }
        goto LABEL_70;
      default:
        return v6;
    }
  }
  switch(v126)
  {
    case 1:
      if (*(unsigned char *)v125 != 119) {
        goto LABEL_137;
      }
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(&v132, "mw");
      std::string::basic_string[abi:ne180100]<0>(&v145, "mw");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v132, (uint64_t)&v145, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_340;
      }
      std::__wrap_iter<const char *> v8 = (void *)v132.__r_.__value_.__r.__words[0];
      goto LABEL_339;
    case 3:
      if (*(_WORD *)v125 != 30067 || *((unsigned char *)v125 + 2) != 98) {
        goto LABEL_137;
      }
LABEL_84:
      std::string::basic_string[abi:ne180100]<0>(&v132, "alias");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v132, &__str);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      unint64_t v20 = (uint64_t *)*a3;
      unint64_t v21 = (uint64_t *)a3[1];
      if ((uint64_t *)*a3 == v21)
      {
        std::string::basic_string[abi:ne180100]<0>(&v131, "");
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v132, &v131, &__str);
        std::allocate_shared[abi:ne180100]<siri::dialogengine::ChunkText,std::allocator<siri::dialogengine::ChunkText>,siri::dialogengine::SpeakableString,void>((siri::dialogengine::ChunkText **)&__p, &v132);
        unint64_t v53 = a3[2];
        v54 = (_OWORD *)a3[1];
        if ((unint64_t)v54 >= v53)
        {
          uint64_t v78 = ((uint64_t)v54 - *a3) >> 4;
          if ((unint64_t)(v78 + 1) >> 60) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v53 - *a3;
          uint64_t v80 = v79 >> 3;
          if (v79 >> 3 <= (unint64_t)(v78 + 1)) {
            uint64_t v80 = v78 + 1;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          v147 = a3 + 2;
          v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v81);
          v83 = &v82[16 * v78];
          v145.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          v145.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
          v146 = &v82[16 * v84];
          *(_OWORD *)v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = (std::string::size_type)(v83 + 16);
          std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(a3, &v145);
          v55 = (_OWORD *)a3[1];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v145);
        }
        else
        {
          _OWORD *v54 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v55 = v54 + 1;
        }
        a3[1] = (uint64_t)v55;
        if (v143 < 0) {
          operator delete(v142);
        }
        if (v141 < 0) {
          operator delete(v140);
        }
        if (v139 < 0) {
          operator delete(v138);
        }
        if (v137 < 0) {
          operator delete(v136);
        }
        if (v135 < 0) {
          operator delete(v134);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        char v22 = 1;
        do
        {
          uint64_t v24 = *v20;
          unint64_t v23 = (std::__shared_weak_count *)v20[1];
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::SpeakableString::SpeakableString(&v132, (const siri::dialogengine::SpeakableString *)(v24 + 8));
          if (v22)
          {
            std::string::operator=(&v133, &__str);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v145, "");
            std::string::operator=(&v133, &v145);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v145.__r_.__value_.__l.__data_);
            }
          }
          siri::dialogengine::ChunkText::SetText((siri::dialogengine::ChunkText *)v24, &v132);
          if (v143 < 0) {
            operator delete(v142);
          }
          if (v141 < 0) {
            operator delete(v140);
          }
          if (v139 < 0) {
            operator delete(v138);
          }
          if (v137 < 0) {
            operator delete(v136);
          }
          if (v135 < 0) {
            operator delete(v134);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          char v22 = 0;
          v20 += 2;
        }
        while (v20 != v21);
      }
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_340;
      }
      std::__wrap_iter<const char *> v8 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_339:
      operator delete(v8);
LABEL_340:
      BOOL v6 = 1;
      goto LABEL_414;
    case 5:
      if (*(_DWORD *)v125 != 1634038370 || *((unsigned char *)v125 + 4) != 107) {
        goto LABEL_137;
      }
LABEL_57:
      std::string::basic_string[abi:ne180100]<0>(&v145, "time");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v145, &v132);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "strength");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v145);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "ms");
      BOOL v17 = siri::dialogengine::StringEndsWith(&v132, (unsigned __int8 *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v17)
      {
        siri::dialogengine::StringTrim("ms", &v132, &__str);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        std::string v132 = __str;
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v131, "");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
        goto LABEL_67;
      }
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (HIBYTE(v145.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v145.__r_.__value_.__r.__words[2]) == 6)
          {
            if (LODWORD(v145.__r_.__value_.__l.__data_) != 1702309240
              || WORD2(v145.__r_.__value_.__r.__words[0]) != 27489)
            {
              if (LODWORD(v145.__r_.__value_.__l.__data_) != 1768187245
                || WORD2(v145.__r_.__value_.__r.__words[0]) != 28021)
              {
                goto LABEL_221;
              }
LABEL_458:
              std::string::basic_string[abi:ne180100]<0>(&__str, "pause=350");
              std::string::basic_string[abi:ne180100]<0>(&v131, "");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
              goto LABEL_67;
            }
LABEL_398:
            std::string::basic_string[abi:ne180100]<0>(&__str, "pause=50");
            std::string::basic_string[abi:ne180100]<0>(&v131, "");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
            goto LABEL_67;
          }
LABEL_407:
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML break element has no valid 'time' or 'strength' attribute.", v16);
          goto LABEL_408;
        }
        if (LODWORD(v145.__r_.__value_.__l.__data_) != 1801545079)
        {
          if (LODWORD(v145.__r_.__value_.__l.__data_) != 1701736302) {
            goto LABEL_407;
          }
LABEL_417:
          std::string::basic_string[abi:ne180100]<0>(&__str, "eos=0");
          std::string::basic_string[abi:ne180100]<0>(&v131, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
          goto LABEL_67;
        }
        goto LABEL_418;
      }
      if (v145.__r_.__value_.__l.__size_ == 4)
      {
        if (*(_DWORD *)v145.__r_.__value_.__l.__data_ == 1701736302) {
          goto LABEL_417;
        }
        if (*(_DWORD *)v145.__r_.__value_.__l.__data_ == 1801545079)
        {
LABEL_418:
          std::string::basic_string[abi:ne180100]<0>(&__str, "pause=150");
          std::string::basic_string[abi:ne180100]<0>(&v131, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
          goto LABEL_67;
        }
      }
      else if (v145.__r_.__value_.__l.__size_ == 6)
      {
        if (*(_DWORD *)v145.__r_.__value_.__l.__data_ == 1702309240
          && *(_WORD *)(v145.__r_.__value_.__r.__words[0] + 4) == 27489)
        {
          goto LABEL_398;
        }
        if (*(_DWORD *)v145.__r_.__value_.__l.__data_ == 1768187245
          && *(_WORD *)(v145.__r_.__value_.__r.__words[0] + 4) == 28021)
        {
          goto LABEL_458;
        }
        if ((*((unsigned char *)&v145.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (HIBYTE(v145.__r_.__value_.__r.__words[2]) == 6)
          {
LABEL_221:
            v50 = &v145;
LABEL_403:
            int data = (int)v50->__r_.__value_.__l.__data_;
            int v94 = WORD2(v50->__r_.__value_.__r.__words[0]);
            if (data != 1869771891 || v94 != 26478) {
              goto LABEL_407;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, "eos=1");
            std::string::basic_string[abi:ne180100]<0>(&v131, "");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
LABEL_67:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
LABEL_185:
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v131.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            BOOL v6 = 1;
            goto LABEL_409;
          }
          goto LABEL_407;
        }
      }
      if (v145.__r_.__value_.__l.__size_ == 6)
      {
        v50 = (std::string *)v145.__r_.__value_.__r.__words[0];
        goto LABEL_403;
      }
      goto LABEL_407;
    case 6:
      if (*(_DWORD *)v125 != 762929523 || *((_WORD *)v125 + 2) != 29537) {
        goto LABEL_137;
      }
LABEL_117:
      std::string::basic_string[abi:ne180100]<0>(&v132, "interpret-as");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v132, &v124);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v124.__r_.__value_.__r.__words[2]) != 5)
        {
          if (HIBYTE(v124.__r_.__value_.__r.__words[2]) != 6) {
            goto LABEL_304;
          }
          if (LODWORD(v124.__r_.__value_.__l.__data_) != 1836020336
            || WORD2(v124.__r_.__value_.__r.__words[0]) != 29808)
          {
            goto LABEL_304;
          }
LABEL_244:
          std::string::basic_string[abi:ne180100]<0>(&v145, "detail");
          siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v145, &v132);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          std::string::basic_string[abi:ne180100]<0>(&v131, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v145, (uint64_t)&__str, (uint64_t)&v131);
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          goto LABEL_306;
        }
        if (LODWORD(v124.__r_.__value_.__l.__data_) != 1852794992 || v124.__r_.__value_.__s.__data_[4] != 101)
        {
LABEL_304:
          if (!size)
          {
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML say-as element has no interpret-as attribute.", v26);
            BOOL v6 = 0;
            goto LABEL_519;
          }
          goto LABEL_305;
        }
        goto LABEL_382;
      }
      std::string::size_type size = v124.__r_.__value_.__l.__size_;
      if (v124.__r_.__value_.__l.__size_ != 5)
      {
        if (v124.__r_.__value_.__l.__size_ != 6) {
          goto LABEL_304;
        }
        if (*(_DWORD *)v124.__r_.__value_.__l.__data_ == 1836020336
          && *(_WORD *)(v124.__r_.__value_.__r.__words[0] + 4) == 29808)
        {
          goto LABEL_244;
        }
LABEL_305:
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v145, "tn=normal");
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v132, (uint64_t)&v145, (uint64_t)&__str);
LABEL_306:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_518;
        }
        v77 = (void *)v132.__r_.__value_.__r.__words[0];
LABEL_312:
        operator delete(v77);
        goto LABEL_518;
      }
      if (*(_DWORD *)v124.__r_.__value_.__l.__data_ != 1852794992
        || *(unsigned char *)(v124.__r_.__value_.__r.__words[0] + 4) != 101)
      {
        goto LABEL_305;
      }
LABEL_382:
      siri::dialogengine::ChunkList::ChunkList((uint64_t *)&v131, (uint64_t **)a3);
      siri::dialogengine::ChunkList::Expand((uint64_t *)&v145, (siri::dialogengine::ChunkList *)&v131, a1);
      siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v145.__r_.__value_.__l.__data_, (uint64_t *)v145.__r_.__value_.__l.__size_);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = v132;
      }
      if (v143 < 0) {
        operator delete(v142);
      }
      if (v141 < 0) {
        operator delete(v140);
      }
      if (v139 < 0) {
        operator delete(v138);
      }
      if (v137 < 0) {
        operator delete(v136);
      }
      if (v135 < 0) {
        operator delete(v134);
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      siri::dialogengine::Context::GetLocale(a1, v98, (uint64_t)&v132);
      siri::dialogengine::GetLocaleLanguage(&v131);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      char v99 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      std::string::size_type v101 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v101 = __str.__r_.__value_.__l.__size_;
      }
      if (!v101)
      {
LABEL_457:
        char v111 = 0;
        goto LABEL_461;
      }
      v102 = (std::string *)((char *)p_str + v101);
      std::string::size_type v103 = v101;
      while (1)
      {
        std::string::size_type v104 = v103--;
        int v105 = p_str->__r_.__value_.__s.__data_[0];
        if (v105 == 45)
        {
          if ((std::string *)((char *)&p_str->__r_.__value_.__l.__data_ + 1) == v102) {
            goto LABEL_456;
          }
          uint64_t v106 = 1;
          while ((p_str->__r_.__value_.__s.__data_[v106] & 0xDFu) - 65 <= 0x19)
          {
            if (v104 == ++v106)
            {
              uint64_t v107 = v103;
              goto LABEL_449;
            }
          }
          uint64_t v107 = v106 - 1;
LABEL_449:
          if (v107) {
            break;
          }
        }
        if (p_str != v102)
        {
          BOOL v108 = (v105 - 65) > 0x39;
          v109 = &p_str->__r_.__value_.__s.__data_[1];
          BOOL v110 = v108 || v109 == (std::string::value_type *)v102;
          if (!v110 && *v109 == 45) {
            break;
          }
        }
LABEL_456:
        p_str = (std::string *)((char *)p_str + 1);
        if (v102 == p_str) {
          goto LABEL_457;
        }
      }
      char v111 = 1;
LABEL_461:
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v131.__r_.__value_.__l.__size_ == 2)
        {
          v112 = (std::string *)v131.__r_.__value_.__r.__words[0];
          if (*(_WORD *)v131.__r_.__value_.__l.__data_ != 28261 && *(_WORD *)v131.__r_.__value_.__l.__data_ != 29286) {
            goto LABEL_469;
          }
          goto LABEL_471;
        }
LABEL_472:
        memset(&__p, 0, sizeof(__p));
        if (!v101)
        {
LABEL_493:
          std::string::basic_string[abi:ne180100]<0>(&v132, ",");
          BOOL v122 = siri::dialogengine::StringStartsWith(&__p, (unsigned __int8 *)&v132);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          if (v122)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v123 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string(&v132, &__p, 1uLL, v123, (std::allocator<char> *)&v145);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = v132;
          }
          std::string::basic_string[abi:ne180100]<0>(&v145, ",,");
          std::string::basic_string[abi:ne180100]<0>(v128, ",");
          siri::dialogengine::StringReplace((uint64_t)&__p, (char *)&v145, (uint64_t)v128, 0, &v132);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v132;
          *((unsigned char *)&v132.__r_.__value_.__s + 23) = 0;
          v132.__r_.__value_.__s.__data_[0] = 0;
          if (v129 < 0) {
            operator delete(v128[0]);
          }
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v132, &__str, &__p);
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__clear[abi:ne180100](a3);
          operator new();
        }
        std::string::size_type v113 = 0;
        unsigned int v114 = SHIBYTE(__str.__r_.__value_.__r.__words[2]) >> 31;
        uint64_t v115 = MEMORY[0x1E4F14390];
        while (1)
        {
          if (v114) {
            v116 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          else {
            v116 = &__str;
          }
          int v117 = v116->__r_.__value_.__s.__data_[v113];
          if (v117 < 0) {
            goto LABEL_485;
          }
          if ((*(_DWORD *)(v115 + 4 * v117 + 60) & 0x100) != 0) {
            goto LABEL_486;
          }
          v118 = v99 >= 0 ? &__str : (std::string *)__str.__r_.__value_.__r.__words[0];
          int v119 = v118->__r_.__value_.__s.__data_[v113];
          if (v119 < 0) {
            goto LABEL_485;
          }
          if ((*(_DWORD *)(v115 + 4 * v119 + 60) & 0x400) != 0)
          {
LABEL_486:
            std::string::append(&__p, " ");
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v120 = &__str;
            }
            else {
              v120 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            std::string::push_back(&__p, v120->__r_.__value_.__s.__data_[v113]);
            goto LABEL_490;
          }
          if (v119 != 43) {
LABEL_485:
          }
            std::string::append(&__p, ",");
LABEL_490:
          ++v113;
          char v99 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          unsigned int v114 = SHIBYTE(__str.__r_.__value_.__r.__words[2]) >> 31;
          std::string::size_type v121 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v121 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          if (v113 >= v121) {
            goto LABEL_493;
          }
        }
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_472;
      }
      if (LOWORD(v131.__r_.__value_.__l.__data_) != 28261 && LOWORD(v131.__r_.__value_.__l.__data_) != 29286)
      {
        v112 = &v131;
LABEL_469:
        if (LOWORD(v112->__r_.__value_.__l.__data_) != 29300) {
          char v111 = 1;
        }
      }
LABEL_471:
      if (v111) {
        goto LABEL_472;
      }
      std::string::basic_string[abi:ne180100]<0>(&v132, "tn=phone");
      std::string::basic_string[abi:ne180100]<0>(&v145, "tn=normal");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v132, (uint64_t)&v145, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v77 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_312;
      }
LABEL_518:
      BOOL v6 = 1;
LABEL_519:
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        v96 = (void *)v124.__r_.__value_.__r.__words[0];
LABEL_413:
        operator delete(v96);
      }
LABEL_414:
      if (v127 < 0) {
        operator delete(v125);
      }
      return v6;
    case 7:
      if (*(_DWORD *)v125 == 1852794992 && *(_DWORD *)((char *)v125 + 3) == 1701668206)
      {
LABEL_174:
        std::string::basic_string[abi:ne180100]<0>(&v145, "alphabet");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v145, &v132);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "ph");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v145);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type v40 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v40 = v132.__r_.__value_.__l.__size_;
        }
        if (!v40) {
          goto LABEL_207;
        }
        std::string::size_type v41 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
        if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v41 = v145.__r_.__value_.__l.__size_;
        }
        if (!v41)
        {
LABEL_207:
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML phoneme element requires alphabet and ph attributes.", v39);
LABEL_408:
          BOOL v6 = 0;
          goto LABEL_409;
        }
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v131, "toi=orth");
        siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&v145);
        goto LABEL_185;
      }
      if ((v127 & 0x80) == 0)
      {
        if (v127 == 4)
        {
LABEL_144:
          std::string::size_type v7 = &v125;
LABEL_153:
          if (*v7 != 1802658157) {
            goto LABEL_154;
          }
          siri::dialogengine::ResolveMarkNameValue(&v132, (uint64_t **)a1, (const siri::dialogengine::ChunkTag *)a2);
          std::string::size_type v33 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v33 = v132.__r_.__value_.__l.__size_;
          }
          BOOL v6 = v33 != 0;
          if (!v33)
          {
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML mark element requires 'name' or 'value' attribute.", v32);
            goto LABEL_411;
          }
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          std::string::basic_string[abi:ne180100]<0>(&v131, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v145, (uint64_t)&__str, (uint64_t)&v131);
          goto LABEL_370;
        }
        if (v127 != 5)
        {
          if (v127 != 7) {
            return 0;
          }
LABEL_22:
          if (v125 != 1936683632 || *(_DWORD *)((char *)&v125 + 3) != 2036625267)
          {
            if (v127 < 0)
            {
LABEL_151:
              if (v126 != 4)
              {
LABEL_154:
                BOOL v6 = 0;
                goto LABEL_414;
              }
              std::string::size_type v7 = v125;
              goto LABEL_153;
            }
            goto LABEL_143;
          }
LABEL_190:
          std::string::basic_string[abi:ne180100]<0>(&v145, "rate");
          siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v145, &v132);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          std::string::size_type v42 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v42 = v132.__r_.__value_.__l.__size_;
          }
          if (v42)
          {
            std::string::basic_string[abi:ne180100]<0>(&v145, "%");
            BOOL v44 = siri::dialogengine::StringEndsWith(&v132, (unsigned __int8 *)&v145);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v145.__r_.__value_.__l.__data_);
            }
            if (v44)
            {
              siri::dialogengine::StringTrim("%", &v132, &__str);
              v45 = std::string::insert(&__str, 0, "rate=");
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v145.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v131, "rate=100");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v145, (uint64_t)&v131, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v131.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v145.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              int v47 = 1;
LABEL_250:
              std::string::basic_string[abi:ne180100]<0>(&__str, "pitch");
              siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v145);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string::size_type v57 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v57 = v145.__r_.__value_.__l.__size_;
              }
              if (v57)
              {
                std::string::basic_string[abi:ne180100]<0>(&__str, "%");
                BOOL v59 = siri::dialogengine::StringEndsWith(&v145, (unsigned __int8 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v59)
                {
                  siri::dialogengine::StringTrim("%", &v145, &__str);
                  int v60 = siri::dialogengine::StringToInt(&__str, 0, 0) + 100;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::to_string(&v131, v60);
                  v61 = std::string::insert(&v131, 0, "pitch=");
                  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v62;
                  v61->__r_.__value_.__l.__size_ = 0;
                  v61->__r_.__value_.__r.__words[2] = 0;
                  v61->__r_.__value_.__r.__words[0] = 0;
                  std::string::basic_string[abi:ne180100]<0>(&__p, "pitch=100");
                  std::string::basic_string[abi:ne180100]<0>(v128, "");
                  siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&__p, (uint64_t)v128);
                  if (v129 < 0) {
                    operator delete(v128[0]);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v131.__r_.__value_.__l.__data_);
                  }
                  int v47 = 1;
                }
                else
                {
                  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody pitch attribute should be in the format +{n}%% or -{n}%%.", v58);
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&v131, "volume");
              siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v131, &__str);
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v131.__r_.__value_.__l.__data_);
              }
              std::string::size_type v64 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v64 = __str.__r_.__value_.__l.__size_;
              }
              if (!v64) {
                goto LABEL_298;
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__str.__r_.__value_.__l.__size_ == 6)
                {
                  v65 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_280:
                  int v66 = (int)v65->__r_.__value_.__l.__data_;
                  int v67 = WORD2(v65->__r_.__value_.__r.__words[0]);
                  if (v66 == 1701603699 && v67 == 29806)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v131, "vol=0");
                    std::string::basic_string[abi:ne180100]<0>(&__p, "vol=80");
                    std::string::basic_string[abi:ne180100]<0>(v128, "");
                    siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v131, (uint64_t)&__p, (uint64_t)v128);
                    if (v129 < 0) {
                      operator delete(v128[0]);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_391;
                    }
                    v75 = (void *)v131.__r_.__value_.__r.__words[0];
LABEL_390:
                    operator delete(v75);
                    goto LABEL_391;
                  }
                }
              }
              else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
              {
                v65 = &__str;
                goto LABEL_280;
              }
              std::string::basic_string[abi:ne180100]<0>(&v131, "dB");
              BOOL v70 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v131);
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v131.__r_.__value_.__l.__data_);
              }
              if (v70)
              {
                siri::dialogengine::StringTrim("dB", &__str, &v131);
                double v71 = (double)(int)siri::dialogengine::StringToInt(&v131, 0, 0);
                if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v131.__r_.__value_.__l.__data_);
                }
                double v72 = __exp10(v71 / 20.0);
                std::to_string(&__p, llround(v72 * 80.0));
                v73 = std::string::insert(&__p, 0, "vol=");
                long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                v131.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v74;
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(v128, "vol=80");
                std::string::basic_string[abi:ne180100]<0>(&v124, "");
                siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&v131, (uint64_t)v128, (uint64_t)&v124);
                if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v124.__r_.__value_.__l.__data_);
                }
                if (v129 < 0) {
                  operator delete(v128[0]);
                }
                if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v131.__r_.__value_.__l.__data_);
                }
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_391;
                }
                v75 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_390;
              }
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody volume attribute should be in the format {n}dB.", v69);
LABEL_298:
              if (!v47)
              {
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody element requires rate, volume, or pitch attributes.", v63);
                BOOL v6 = 0;
LABEL_392:
                if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_409;
                }
                v91 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_394:
                operator delete(v91);
LABEL_409:
                if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v145.__r_.__value_.__l.__data_);
                }
LABEL_411:
                if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                {
                  v96 = (void *)v132.__r_.__value_.__r.__words[0];
                  goto LABEL_413;
                }
                goto LABEL_414;
              }
LABEL_391:
              BOOL v6 = 1;
              goto LABEL_392;
            }
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody rate attribute should be in the format {n}%%.", v43);
          }
          int v47 = 0;
          goto LABEL_250;
        }
LABEL_40:
        if (v125 != 1768191329 || BYTE4(v125) != 111) {
          return 0;
        }
LABEL_159:
        std::string::basic_string[abi:ne180100]<0>(&v145, "src");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v145, &v132);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "apple:overlap");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v145);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type v35 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v35 = v132.__r_.__value_.__l.__size_;
        }
        BOOL v6 = v35 != 0;
        if (!v35)
        {
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML audio source element missing.", v34);
          goto LABEL_409;
        }
        std::string::size_type v36 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
        if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v36 = v145.__r_.__value_.__l.__size_;
        }
        if (v36 && siri::dialogengine::StringToBool(&v145))
        {
          std::operator+<char>();
          v37 = std::string::append(&v131, "&overlap");
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::basic_string[abi:ne180100]<0>(v128, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&__p, (uint64_t)v128);
          if (v129 < 0) {
            operator delete(v128[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_373;
        }
        goto LABEL_368;
      }
LABEL_137:
      if (v126 == 5)
      {
        if (*(_DWORD *)v125 == 1768191329 && *((unsigned char *)v125 + 4) == 111) {
          goto LABEL_159;
        }
        if ((v127 & 0x80) == 0)
        {
LABEL_143:
          if (v127 != 4) {
            return 0;
          }
          goto LABEL_144;
        }
      }
      if (v126 != 7) {
        goto LABEL_151;
      }
      if (*(_DWORD *)v125 != 1936683632 || *(_DWORD *)((char *)v125 + 3) != 2036625267) {
        goto LABEL_151;
      }
      goto LABEL_190;
    case 8:
      if (*(void *)v125 != 0x7369736168706D65) {
        goto LABEL_137;
      }
LABEL_70:
      memset(&v132, 0, sizeof(v132));
      std::string::basic_string[abi:ne180100]<0>(&v131, "level");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v131, &__str);
      siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v145);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if ((*((unsigned char *)&v145.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v145.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)v145.__r_.__value_.__l.__data_ != 1701736302)
        {
          if (v145.__r_.__value_.__l.__size_ == 7)
          {
            if (*(_DWORD *)v145.__r_.__value_.__l.__data_ == 1969513842
              && *(_DWORD *)(v145.__r_.__value_.__r.__words[0] + 3) == 1684366197)
            {
              goto LABEL_359;
            }
            if ((*((unsigned char *)&v145.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_361;
            }
          }
          if (v145.__r_.__value_.__l.__size_ == 8)
          {
            v18 = (std::string *)v145.__r_.__value_.__r.__words[0];
LABEL_233:
            if (v18->__r_.__value_.__r.__words[0] == 0x6574617265646F6DLL)
            {
              v52 = "2";
              goto LABEL_364;
            }
          }
LABEL_361:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v145, "strong")) {
            goto LABEL_365;
          }
          v52 = "3";
LABEL_364:
          MEMORY[0x1C8796900](&v132, v52);
LABEL_365:
          std::string::size_type v88 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v88 = v132.__r_.__value_.__l.__size_;
          }
          BOOL v6 = v88 != 0;
          if (!v88)
          {
            std::operator+<char>();
            v89 = std::string::append(&v131, "'");
            long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 1u);
LABEL_373:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_409;
            }
            v91 = (void *)v131.__r_.__value_.__r.__words[0];
            goto LABEL_394;
          }
LABEL_368:
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(&v131, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes((uint64_t)a3, (uint64_t)&__str, (uint64_t)&v131, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_370:
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          goto LABEL_392;
        }
      }
      else
      {
        if (HIBYTE(v145.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v145.__r_.__value_.__r.__words[2]) != 7)
          {
            if (HIBYTE(v145.__r_.__value_.__r.__words[2]) == 8)
            {
              v18 = &v145;
              goto LABEL_233;
            }
            goto LABEL_361;
          }
          if (LODWORD(v145.__r_.__value_.__l.__data_) != 1969513842
            || *(_DWORD *)((char *)v145.__r_.__value_.__r.__words + 3) != 1684366197)
          {
            goto LABEL_361;
          }
LABEL_359:
          v52 = "1";
          goto LABEL_364;
        }
        if (LODWORD(v145.__r_.__value_.__l.__data_) != 1701736302) {
          goto LABEL_361;
        }
      }
      v52 = "0";
      goto LABEL_364;
    default:
      goto LABEL_137;
  }
}

void sub_1C5F1E2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v47 - 153) < 0) {
    operator delete(*(void **)(v47 - 176));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddTTSCodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a4 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a4 + 8);
  }
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &__p, (const std::string *)a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::operator+<char>();
    std::string::size_type v7 = std::string::append(&v12, "\\"");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &__p, &v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v12, "\\"");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &__p, &v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    operator new();
  }
}

void sub_1C5F1ED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28,void *a29)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a29);
  _Unwind_Resume(a1);
}

siri::dialogengine::ChunkText *std::allocate_shared[abi:ne180100]<siri::dialogengine::ChunkText,std::allocator<siri::dialogengine::ChunkText>,siri::dialogengine::SpeakableString,void>(siri::dialogengine::ChunkText **a1, const std::string *a2)
{
  uint64_t v4 = operator new(0xE0uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1F21265D8;
  result = siri::dialogengine::ChunkText::ChunkText((siri::dialogengine::ChunkText *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (siri::dialogengine::ChunkText *)v4;
  return result;
}

void sub_1C5F1EE9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveMarkNameValue(std::string *this, uint64_t **a2, const siri::dialogengine::ChunkTag *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)a3, (uint64_t)__p, &v30);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)a3, (uint64_t)__p, &v29);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v30, 1, (uint64_t)&v27);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    siri::dialogengine::ResolveValue(a2, (const void **)&v30.__r_.__value_.__l.__data_, 1, (uint64_t)__p, (uint64_t)v23, &v25);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v25 + 48))(__p);
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(this, (const std::string::value_type *)v11, *((std::string::size_type *)&v11 + 1));
      }
      else
      {
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
        this->__r_.__value_.__r.__words[2] = v12;
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v14 < 0) {
        operator delete(v13);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete((void *)v11);
      }
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *this = v30;
      memset(&v30, 0, sizeof(v30));
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = v29.__r_.__value_.__l.__size_;
    }
    if (v8)
    {
      *this = v29;
      memset(&v29, 0, sizeof(v29));
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML mark element requires 'name' or 'value' attribute.", v6);
      std::string::basic_string[abi:ne180100]<0>(this, "");
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F1F154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  BOOL v17 = *(std::__shared_weak_count **)(v15 - 112);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(char *)(v15 - 81) < 0) {
    operator delete(*(void **)(v15 - 104));
  }
  if (*(char *)(v15 - 57) < 0) {
    operator delete(*(void **)(v15 - 80));
  }
  if (*(char *)(v15 - 33) < 0) {
    operator delete(*(void **)(v15 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_1C5F1F20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0x1C5F1F200);
  }
  JUMPOUT(0x1C5F1F204);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21265D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21265D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::insert(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 >> 4;
  long long v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    long long v38 = v11;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v21 = (void *)(v18 + 16 * v9);
    std::string::size_type v35 = (char *)v18;
    *(void *)&long long v36 = v21;
    *((void *)&v36 + 1) = v21;
    v37 = (char *)(v18 + 16 * v19);
    if (v9 == v19)
    {
      if (v8 < 1)
      {
        if (v7 == a2) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v8 >> 3;
        }
        std::string::size_type v42 = v11;
        char v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v23);
        uint64_t v26 = v36;
        uint64_t v27 = *((void *)&v36 + 1) - v36;
        if (*((void *)&v36 + 1) == (void)v36)
        {
          int64x2_t v32 = vdupq_n_s64(v36);
          unint64_t v29 = (unint64_t)&v24[16 * (v23 >> 2)];
        }
        else
        {
          uint64_t v28 = v27 >> 4;
          unint64_t v29 = (unint64_t)&v24[16 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v30 = 16 * v28;
          int v31 = &v24[16 * (v23 >> 2)];
          do
          {
            *(_OWORD *)int v31 = *(_OWORD *)v26;
            v31 += 16;
            *(void *)uint64_t v26 = 0;
            *(void *)(v26 + 8) = 0;
            v26 += 16;
            v30 -= 16;
          }
          while (v30);
          int64x2_t v32 = (int64x2_t)v36;
        }
        std::string::size_type v33 = v37;
        v39 = v35;
        std::string::size_type v35 = v24;
        *(void *)&long long v36 = &v24[16 * (v23 >> 2)];
        int64x2_t v40 = v32;
        *((void *)&v36 + 1) = v29;
        v37 = &v24[16 * v25];
        std::string::size_type v41 = v33;
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v39);
        unint64_t v21 = (void *)*((void *)&v36 + 1);
      }
      else
      {
        unint64_t v22 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v22 = v9 + 1;
        }
        v21 -= 2 * (v22 >> 1);
        *(void *)&long long v36 = v21;
        *((void *)&v36 + 1) = v21;
      }
    }
    *unint64_t v21 = *a3;
    uint64_t v34 = a3[1];
    v21[1] = v34;
    if (v34)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      unint64_t v21 = (void *)*((void *)&v36 + 1);
    }
    *((void *)&v36 + 1) = v21 + 2;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(a1, &v35, (void *)a2);
    std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v35);
  }
  else if (a2 == v6)
  {
    long long v20 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v20 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (a2 <= (unint64_t)a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)a2 = v13;
    uint64_t v14 = v7 + 16 * v9;
    uint64_t v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1C5F1F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::AddSonicResponse(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl())
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ar");
    std::string::basic_string[abi:ne180100]<0>(&v52, "he");
    std::string::basic_string[abi:ne180100]<0>(&v53, "ms");
    std::string::basic_string[abi:ne180100]<0>(v55, "th");
    std::set<std::string>::set[abi:ne180100]((uint64_t)v47, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (*(&v56 + i * 8) < 0) {
        operator delete(v55[i]);
      }
    }
    siri::dialogengine::Context::GetLocale((siri::dialogengine::Context *)a1, v6, (uint64_t)&__p);
    siri::dialogengine::GetLocaleLanguage(&v46);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (&v48 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)v47, (const void **)&v46.__r_.__value_.__l.__data_))
    {
      unint64_t PatternState = siri::dialogengine::Context::GetPatternState((siri::dialogengine::Context *)a1);
      uint64_t v12 = (siri::dialogengine::PatternContext *)a1[433];
      uint64_t v13 = (std::__shared_weak_count *)a1[434];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12 && siri::dialogengine::PatternContext::GetSonicResponseStatus(v12))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "device");
        siri::dialogengine::Context::FindVariable((uint64_t)a1, (uint64_t)&__p, &lpsrc);
        if (lpsrc) {
        else
        }
          uint64_t v14 = 0;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!v14) {
          goto LABEL_38;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "isWatch");
        OptionalBooleanParameter = (unsigned __int8 *)siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (OptionalBooleanParameter)
        {
          int v16 = OptionalBooleanParameter[66];
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          if (v16) {
            uint64_t v17 = "<audio src=\"/watchSuccessSonicResponse\"";
          }
          else {
            uint64_t v17 = "<audio src=\"/successSonicResponse\"";
          }
        }
        else
        {
LABEL_38:
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          uint64_t v17 = "<audio src=\"/successSonicResponse\"";
          *(void *)(a3 + 16) = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&lpsrc, v17);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
        int v18 = v62;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
        if (v18 == 3 || PatternState >= 2)
        {
          if ((v45 & 0x80u) == 0) {
            size_t v35 = v45;
          }
          else {
            size_t v35 = (size_t)v44;
          }
          p_p = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v35 + 2);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v35)
          {
            if ((v45 & 0x80u) == 0) {
              p_lpsrc = &lpsrc;
            }
            else {
              p_lpsrc = lpsrc;
            }
            memmove(p_p, p_lpsrc, v35);
          }
          strcpy((char *)p_p + v35, "/>");
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(std::string *)a3 = __p;
        }
        else
        {
          if ((v45 & 0x80u) == 0) {
            size_t v19 = v45;
          }
          else {
            size_t v19 = (size_t)v44;
          }
          long long v20 = &v40;
          std::string::basic_string[abi:ne180100]((uint64_t)&v40, v19 + 1);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v20 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          if (v19)
          {
            if ((v45 & 0x80u) == 0) {
              unint64_t v21 = &lpsrc;
            }
            else {
              unint64_t v21 = lpsrc;
            }
            memmove(v20, v21, v19);
          }
          *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 32;
          unint64_t v22 = std::string::append(&v40, "apple:overlap=\"true\"");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          char v24 = std::string::append(&v41, "/>");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          uint64_t v26 = std::string::append(&v42, "<break time=\"1000ms\"/>");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          int v28 = *(char *)(a2 + 23);
          if (v28 >= 0) {
            unint64_t v29 = (const std::string::value_type *)a2;
          }
          else {
            unint64_t v29 = *(const std::string::value_type **)a2;
          }
          if (v28 >= 0) {
            std::string::size_type v30 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            std::string::size_type v30 = *(void *)(a2 + 8);
          }
          int v31 = std::string::append(&__p, v29, v30);
          std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
          *(void *)&long long v50 = v31->__r_.__value_.__l.__size_;
          *(void *)((char *)&v50 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
          char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          uint64_t v34 = v50;
          *(void *)a3 = v32;
          *(void *)(a3 + 8) = v34;
          *(void *)(a3 + 15) = *(void *)((char *)&v50 + 7);
          *(unsigned char *)(a3 + 23) = v33;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
        int v38 = v64;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
        if (v38 == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "#escape-char#");
          std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B\\"");
          int v39 = siri::dialogengine::StringContains((char **)a3, (char *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v39)
          {
            std::string::basic_string[abi:ne180100]<0>(&v41, "\x1B\\"");
            siri::dialogengine::StringReplace(a3, (char *)&v41, (uint64_t)&v42, 0, &__p);
            if (*(char *)(a3 + 23) < 0) {
              operator delete(*(void **)a3);
            }
            *(std::string *)a3 = __p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
            __p.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v41.__r_.__value_.__l.__data_);
            }
          }
          siri::dialogengine::ParseSpeakableString(a3, (uint64_t *)&v41);
          siri::dialogengine::ChunkList::Expand((uint64_t *)&v50, (siri::dialogengine::ChunkList *)&v41, (siri::dialogengine::Context *)a1);
          siri::dialogengine::ExpandToText((uint64_t)&__p, (uint64_t *)v50, *((uint64_t **)&v50 + 1));
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v40, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          }
          else {
            std::string v40 = v52;
          }
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(std::string *)a3 = v40;
          *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
          v40.__r_.__value_.__s.__data_[0] = 0;
          if (v63 < 0) {
            operator delete(v61);
          }
          if (v60 < 0) {
            operator delete(v59);
          }
          if (v58 < 0) {
            operator delete(v57);
          }
          if (v56 < 0) {
            operator delete(v55[0]);
          }
          if (v54 < 0) {
            operator delete(v53);
          }
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v49 = (void **)&v50;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v49);
          std::string::basic_string[abi:ne180100]<0>(&v40, "\x1B\\"");
          siri::dialogengine::StringReplace(a3, (char *)&v42, (uint64_t)&v40, 0, &__p);
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(std::string *)a3 = __p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
        }
        if ((char)v45 < 0) {
          operator delete(lpsrc);
        }
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(void *)(a3 + 16) = *(void *)(a2 + 16);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Sonic Response not supported by requested language; omitting it from response",
        v8);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(void *)(a3 + 16) = *(void *)(a2 + 16);
      }
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v47, v48);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v9 = *(const std::string::value_type **)a2;
    std::string::size_type v10 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external((std::string *)a3, v9, v10);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
}

void sub_1C5F1FD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,char *a42,uint64_t a43,char *a44,char a45,uint64_t a46,uint64_t a47,void **a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a48);
  a44 = &a45;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a48 = &a16;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a48);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v53 + 23) < 0) {
    operator delete(*(void **)v53);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::__tree<std::string>::destroy((uint64_t)&a41, a42);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatMarkElementSSML(uint64_t **this@<X0>, siri::dialogengine::Context *a2@<X1>, void *a3@<X8>)
{
  siri::dialogengine::ResolveMarkNameValue(&v10, this, a2);
  std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "mark");
    std::string::basic_string[abi:ne180100]<0>(__p, "name");
    siri::dialogengine::FormatXMLElement((uint64_t)v8, (uint64_t)__p, (uint64_t)&v10);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F20034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_TextElement_FontWeight_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  qword_1EB690E68 = 0;
  unk_1EB690E70 = 0;
  SnippetUI::_TextElement_FontWeight_default_instance_ = (uint64_t)&unk_1F211F3A0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_FontWeight_default_instance_, v4);
}

uint64_t SnippetUI::TextElement_FontWeight::GetMetadata(SnippetUI::TextElement_FontWeight *this)
{
  return qword_1EA3D94C8;
}

void InitDefaultsscc_info_TextElement_Font_SystemFont_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::_TextElement_Font_SystemFont_default_instance_ = (uint64_t)&unk_1F211F220;
  unk_1EB690F80 = 0;
  qword_1EB690F88 = 0;
  unk_1EB690F90 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_Font_SystemFont_default_instance_, v4);
}

uint64_t SnippetUI::TextElement_Font_SystemFont::GetMetadata(SnippetUI::TextElement_Font_SystemFont *this)
{
  return file_level_metadata_TextElement_2eproto;
}

uint64_t SnippetUI::TextElement_Font_SystemFont::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void SnippetUI::TextElement_Font_SystemFont::MergeFrom(SnippetUI::TextElement_Font_SystemFont *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 491);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F202A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font_SystemFont::MergeFrom(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 506);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  float v6 = *((float *)a2 + 4);
  if (v6 != 0.0) {
    *((float *)this + 4) = v6;
  }
  int v7 = *((_DWORD *)a2 + 5);
  if (v7) {
    *((_DWORD *)this + 5) = v7;
  }
  int v8 = *((_DWORD *)a2 + 6);
  if (v8) {
    *((_DWORD *)this + 6) = v8;
  }
}

void sub_1C5F2036C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font_SystemFont::CopyFrom(SnippetUI::TextElement_Font_SystemFont *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (char *)this + 8;
    *((_DWORD *)v5 + 4) = 0;
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
    }
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_Font_SystemFont::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_Font_SystemFont *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (*((float *)this + 4) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      int v6 = *((_DWORD *)this + 4);
    }
    else
    {
      int v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  unsigned int v7 = *((_DWORD *)this + 5);
  if (v7)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v7 = *((_DWORD *)this + 5);
    }
    *a2 = 16;
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      unint64_t v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        char v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          std::string v10 = v9;
          *v9++ = v8 | 0x80;
          unint64_t v11 = v8 >> 7;
          unint64_t v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        a2 = (char *)(v10 + 2);
        unsigned __int8 *v9 = v11;
      }
      else
      {
        a2[2] = v8;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v7;
      a2 += 2;
    }
  }
  unsigned int v13 = *((_DWORD *)this + 6);
  if (v13)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v13 = *((_DWORD *)this + 6);
    }
    *a2 = 24;
    if (v13 > 0x7F)
    {
      a2[1] = v13 | 0x80;
      unint64_t v14 = (unint64_t)(int)v13 >> 7;
      if (v13 >> 14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v16 = v15;
          *v15++ = v14 | 0x80;
          unint64_t v17 = v14 >> 7;
          unint64_t v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
        a2 = (char *)(v16 + 2);
        *uint64_t v15 = v17;
      }
      else
      {
        a2[2] = v14;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v13;
      a2 += 2;
    }
  }
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v19 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::TextElement_Font_SystemFont::_InternalParse(SnippetUI::TextElement_Font_SystemFont *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v19 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23)))return v19; {
          TagFallback = (char *)v19 + 1;
          }
          unint64_t v8 = (char *)*(unsigned __int8 *)v19;
          if ((*(char *)v19 & 0x80000000) == 0) {
            goto LABEL_6;
          }
          unint64_t v8 = (char *)(v8 + (*TagFallback << 7) - 128);
          if ((*TagFallback & 0x80000000) == 0)
          {
            TagFallback = (char *)v19 + 2;
LABEL_6:
            uint64_t v19 = (google::protobuf::internal *)TagFallback;
            goto LABEL_7;
          }
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v19, v8);
          uint64_t v19 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback) {
            return (google::protobuf::internal *)TagFallback;
          }
LABEL_7:
          unsigned int v9 = v8 >> 3;
          if (v8 >> 3 != 3) {
            break;
          }
          if (v8 != 24) {
            goto LABEL_13;
          }
          unint64_t v12 = (google::protobuf::internal *)(TagFallback + 1);
          LODWORD(v13) = *TagFallback;
          if ((*TagFallback & 0x80000000) == 0) {
            goto LABEL_23;
          }
          int v14 = *(char *)v12;
          unint64_t v13 = v13 + (v14 << 7) - 128;
          if ((v14 & 0x80000000) == 0)
          {
            unint64_t v12 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_23:
            uint64_t v19 = v12;
            goto LABEL_24;
          }
          uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v13);
          if (!v19) {
            return 0;
          }
LABEL_24:
          *((_DWORD *)this + 6) = v13;
        }
        if (v9 != 2) {
          break;
        }
        if (v8 != 16) {
          goto LABEL_13;
        }
        uint64_t v15 = (google::protobuf::internal *)(TagFallback + 1);
        LODWORD(v16) = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0) {
          goto LABEL_29;
        }
        int v17 = *(char *)v15;
        unint64_t v16 = v16 + (v17 << 7) - 128;
        if ((v17 & 0x80000000) == 0)
        {
          uint64_t v15 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_29:
          uint64_t v19 = v15;
          goto LABEL_30;
        }
        uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v16);
        if (!v19) {
          return 0;
        }
LABEL_30:
        *((_DWORD *)this + 5) = v16;
      }
      if (v9 != 1 || v8 != 13) {
        break;
      }
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      uint64_t v19 = (google::protobuf::internal *)(TagFallback + 4);
    }
LABEL_13:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v19) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

uint64_t SnippetUI::TextElement_Font_SystemFont::GetCachedSize(SnippetUI::TextElement_Font_SystemFont *this)
{
  return *((unsigned int *)this + 7);
}

char *SnippetUI::TextElement_Font_SystemFont::ByteSizeLong(SnippetUI::TextElement_Font_SystemFont *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = 11;
  int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)this + 6);
  uint64_t v5 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v3 >= 0) {
    uint64_t v2 = v5;
  }
  uint64_t v6 = v2 + v1;
  if (v3) {
    uint64_t v1 = v6;
  }
  uint64_t v7 = 11;
  uint64_t v8 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v4 >= 0) {
    uint64_t v7 = v8;
  }
  unsigned int v9 = (const google::protobuf::UnknownFieldSet *)(v7 + v1);
  if (v4) {
    std::string v10 = v9;
  }
  else {
    std::string v10 = (const google::protobuf::UnknownFieldSet *)v1;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), v10, (_DWORD *)this + 7);
  }
  *((_DWORD *)this + 7) = v10;
  return (char *)v10;
}

uint64_t SnippetUI::TextElement_Font_SystemFont::IsInitialized(SnippetUI::TextElement_Font_SystemFont *this)
{
  return 1;
}

void SnippetUI::TextElement_Font_SystemFont::Clear(SnippetUI::TextElement_Font_SystemFont *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (char *)this + 8;
  *((_DWORD *)v1 + 4) = 0;
  *((void *)v1 + 1) = 0;
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v1);
  }
}

void *SnippetUI::TextElement_Font_SystemFont::New(SnippetUI::TextElement_Font_SystemFont *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(a2);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font_SystemFont>);
  }
  void *result = &unk_1F211F220;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font_SystemFont>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *SnippetUI::TextElement_Font_SystemFont::New(SnippetUI::TextElement_Font_SystemFont *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
}

void SnippetUI::TextElement_Font_SystemFont::~TextElement_Font_SystemFont(SnippetUI::TextElement_Font_SystemFont *this)
{
  *(void *)this = &unk_1F211F220;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211F220;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F211F220;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::TextElement_FontWeight::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void SnippetUI::TextElement_FontWeight::MergeFrom(SnippetUI::TextElement_FontWeight *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 969);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextElement_FontWeight::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F20A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_FontWeight::MergeFrom(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 984);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 4);
  if (v6) {
    *((_DWORD *)this + 4) = v6;
  }
}

void sub_1C5F20B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_FontWeight::CopyFrom(SnippetUI::TextElement_FontWeight *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
    *((_DWORD *)v5 + 2) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::TextElement_FontWeight::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_FontWeight::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_FontWeight *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v6 = *((_DWORD *)this + 4);
    }
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      unint64_t v7 = (unint64_t)(int)v6 >> 7;
      if (v6 >> 14)
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unsigned int v9 = v8;
          *v8++ = v7 | 0x80;
          unint64_t v10 = v7 >> 7;
          unint64_t v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
        a2 = (char *)(v9 + 2);
        unsigned __int8 *v8 = v10;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  uint64_t v12 = *((void *)this + 1);
  if ((v12 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v12 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::TextElement_FontWeight::_InternalParse(SnippetUI::TextElement_FontWeight *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v14 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v14, *((_DWORD *)a3 + 23))) {
        return v14;
      }
      TagFallback = (google::protobuf::internal *)((char *)v14 + 1);
      uint64_t v8 = (char *)*(unsigned __int8 *)v14;
      if ((*(char *)v14 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      uint64_t v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_6:
        int v14 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v14, v8);
      int v14 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v8 != 8) {
        break;
      }
      unint64_t v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v11) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        goto LABEL_17;
      }
      int v12 = *(char *)v10;
      unint64_t v11 = v11 + (v12 << 7) - 128;
      if ((v12 & 0x80000000) == 0)
      {
        unint64_t v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_17:
        int v14 = v10;
        goto LABEL_18;
      }
      int v14 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
      if (!v14) {
        return 0;
      }
LABEL_18:
      *((_DWORD *)this + 4) = v11;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    int v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v14) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::TextElement_FontWeight::GetCachedSize(SnippetUI::TextElement_FontWeight *this)
{
  return *((unsigned int *)this + 5);
}

char *SnippetUI::TextElement_FontWeight::ByteSizeLong(SnippetUI::TextElement_FontWeight *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::TextElement_FontWeight::IsInitialized(SnippetUI::TextElement_FontWeight *this)
{
  return 1;
}

void SnippetUI::TextElement_FontWeight::Clear(SnippetUI::TextElement_FontWeight *this)
{
  char v2 = *((unsigned char *)this + 8);
  int v1 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
  *((_DWORD *)v1 + 2) = 0;
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::TextElement_FontWeight::New(SnippetUI::TextElement_FontWeight *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(a2);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_FontWeight>);
  }
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F211F3A0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_FontWeight>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *SnippetUI::TextElement_FontWeight::New(SnippetUI::TextElement_FontWeight *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
}

void SnippetUI::TextElement_FontWeight::~TextElement_FontWeight(SnippetUI::TextElement_FontWeight *this)
{
  *(void *)this = &unk_1F211F3A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211F3A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F211F3A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_TextElement_Font_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::TextElement_Font::TextElement_Font((SnippetUI::TextElement_Font *)&SnippetUI::_TextElement_Font_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_Font_default_instance_, v4);
  dword_1EB690A70 = 0;
  qword_1EB690A78 = (uint64_t)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::TextElement_Font(SnippetUI::TextElement_Font *this)
{
  *(void *)this = &unk_1F211F2E0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_TextElement_Font_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_TextElement_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C5F21068(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement_Font::GetMetadata(SnippetUI::TextElement_Font *this)
{
  return qword_1EA3D94B8;
}

uint64_t SnippetUI::TextElement_Font::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::TextElement_Font::MergeFrom(SnippetUI::TextElement_Font *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 771);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextElement_Font::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F21184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font::MergeFrom(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 786);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 7);
  if (v6 != 1)
  {
    if (v6 != 2) {
      return;
    }
    if (*((_DWORD *)this + 7) == 2)
    {
      char v7 = (SnippetUI::TextElement_Font_SystemFont *)*((void *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 2;
      char v7 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        unint64_t v11 = (const SnippetUI::TextElement_Font_SystemFont *)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
        goto LABEL_18;
      }
    }
    unint64_t v11 = (const SnippetUI::TextElement_Font_SystemFont *)*((void *)a2 + 2);
LABEL_18:
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(v7, v11);
    return;
  }
  int v8 = *((_DWORD *)a2 + 4);
  int v9 = *((_DWORD *)this + 7);
  if (v9 != 1)
  {
    if (v9 == 2)
    {
      uint64_t v10 = *((void *)this + 2);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    *((_DWORD *)this + 7) = 1;
  }
  *((_DWORD *)this + 4) = v8;
}

void sub_1C5F212D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font::CopyFrom(SnippetUI::TextElement_Font *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement_Font::Clear(this);
    SnippetUI::TextElement_Font::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_Font::Clear(SnippetUI::TextElement_Font *this)
{
  if (*((_DWORD *)this + 7) == 2)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  char v4 = *((unsigned char *)this + 8);
  int v3 = (SnippetUI::TextElement_Font *)((char *)this + 8);
  *((_DWORD *)v3 + 5) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_Font::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_Font *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(void *)a3 > (unint64_t)a2
      || (long long v25 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2),
          a2 = (char *)v25,
          *((_DWORD *)this + 7) == 1))
    {
      unsigned int v7 = *((_DWORD *)this + 4);
      *a2 = 8;
      int v8 = (unsigned __int8 *)(a2 + 1);
      if (v7 > 0x7F)
      {
        unsigned int v9 = v7;
        unsigned __int8 *v8 = v7 | 0x80;
        unint64_t v10 = (unint64_t)(int)v7 >> 7;
        if (v9 >> 14)
        {
          unint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            char v12 = v11;
            *v11++ = v10 | 0x80;
            unint64_t v13 = v10 >> 7;
            unint64_t v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          a2 = (char *)(v12 + 2);
          unsigned __int8 *v11 = v13;
        }
        else
        {
          a2[2] = v10;
          a2 += 3;
        }
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v7) = 0;
      *long long v25 = 8;
      int v8 = v25 + 1;
    }
    unsigned __int8 *v8 = v7;
    a2 = (char *)(v8 + 1);
LABEL_10:
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v15 = (SnippetUI::TextElement_Font_SystemFont *)*((void *)this + 2);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 7);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          long long v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        int v17 = v20 + 2;
        unsigned __int8 *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        int v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      int v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::TextElement_Font_SystemFont::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
  }
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::TextElement_Font::_InternalParse(SnippetUI::TextElement_Font *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string::size_type v30 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)))return v30; {
        TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
        }
        int v8 = (char *)*(unsigned __int8 *)v30;
        if ((*(char *)v30 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
          std::string::size_type v30 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v8);
        std::string::size_type v30 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_12;
        }
        if (*((_DWORD *)this + 7) == 2)
        {
          unint64_t v11 = (SnippetUI::TextElement_Font_SystemFont *)*((void *)this + 2);
        }
        else
        {
          *((_DWORD *)this + 7) = 2;
          unint64_t v11 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
          *((void *)this + 2) = v11;
          TagFallback = v30;
        }
        unsigned int v18 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            return 0;
          }
          uint64_t v19 = SizeFallback;
          unsigned int v18 = v21;
        }
        else
        {
          uint64_t v19 = (char *)TagFallback + 1;
        }
        int v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        int v23 = *((_DWORD *)a3 + 22);
        BOOL v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24) {
          return 0;
        }
        int v25 = v22;
        uint64_t v26 = SnippetUI::TextElement_Font_SystemFont::_InternalParse(v11, (google::protobuf::internal *)v19, a3);
        if (!v26) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v27 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v27;
        *(void *)a3 = *((void *)a3 + 1) + (v27 & (v27 >> 31));
        std::string::size_type v30 = v26;
      }
      if (v8 >> 3 != 1 || v8 != 8) {
        break;
      }
      char v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
      int v13 = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        goto LABEL_24;
      }
      int v14 = *(char *)v12;
      int v15 = v13 + (v14 << 7);
      int v13 = v15 - 128;
      if ((v14 & 0x80000000) == 0)
      {
        char v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
        std::string::size_type v30 = v12;
        goto LABEL_25;
      }
      std::string::size_type v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, (v15 - 128));
      if (!v30) {
        return 0;
      }
      int v13 = v28;
LABEL_25:
      int v16 = *((_DWORD *)this + 7);
      if (v16 != 1)
      {
        if (v16 == 2)
        {
          uint64_t v17 = *((void *)this + 2);
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        *((_DWORD *)this + 7) = 1;
      }
      *((_DWORD *)this + 4) = v13;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    std::string::size_type v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v30) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::TextElement_Font::GetCachedSize(SnippetUI::TextElement_Font *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::TextElement_Font::ByteSizeLong(SnippetUI::TextElement_Font *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    uint64_t v5 = SnippetUI::TextElement_Font_SystemFont::ByteSizeLong(*((SnippetUI::TextElement_Font_SystemFont **)this + 2));
    uint64_t v4 = (uint64_t)&v5[((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  else if (v2 == 1)
  {
    int v3 = *((_DWORD *)this + 4);
    if (v3 < 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v4, (_DWORD *)this + 6);
  }
  else
  {
    *((_DWORD *)this + 6) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::TextElement_Font::IsInitialized(SnippetUI::TextElement_Font *this)
{
  return 1;
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::New(SnippetUI::TextElement_Font *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(a2);
}

SnippetUI::TextElement_Font *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::TextElement_Font *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font>);
  }
  SnippetUI::TextElement_Font::TextElement_Font(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F2194C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A3C407A2727C4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::New(SnippetUI::TextElement_Font *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
}

void SnippetUI::TextElement_Font::~TextElement_Font(SnippetUI::TextElement_Font *this)
{
  SnippetUI::TextElement_Font::~TextElement_Font(this);
  JUMPOUT(0x1C8796D70);
}

{
  int v2;
  uint64_t v3;

  *(void *)this = &unk_1F211F2E0;
  int v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 2)
    {
      int v3 = *((void *)this + 2);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_TextElement_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::TextElement::TextElement((SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_default_instance_, v4);
  qword_1EB690750 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690758 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690710 = (uint64_t)&SnippetUI::_TextElement_Font_default_instance_;
  unk_1EB690718 = &SnippetUI::_TextElement_FontWeight_default_instance_;
  qword_1EB690720 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EB690728 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690730 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

SnippetUI::TextElement *SnippetUI::TextElement::TextElement(SnippetUI::TextElement *this)
{
  *(void *)this = &unk_1F211F460;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (atomic_load_explicit(scc_info_TextElement_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_TextElement_2eproto);
  }
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 25) = 0;
  return this;
}

void sub_1C5F21B84(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement::GetMetadata(SnippetUI::TextElement *this)
{
  return qword_1EA3D94D8;
}

uint64_t SnippetUI::TextElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

void SnippetUI::TextElement::MergeFrom(SnippetUI::TextElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 1506);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F21CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement::MergeFrom(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 1521);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    int v6 = (const SnippetUI::TextElement_Font *)*((void *)a2 + 5);
    if (v6)
    {
      char v7 = (SnippetUI::TextElement_Font *)*((void *)this + 5);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
        *((void *)this + 5) = v7;
        int v6 = (const SnippetUI::TextElement_Font *)*((void *)a2 + 5);
      }
      if (v6) {
        int v8 = v6;
      }
      else {
        int v8 = (const SnippetUI::TextElement_Font *)&SnippetUI::_TextElement_Font_default_instance_;
      }
      SnippetUI::TextElement_Font::MergeFrom(v7, v8);
    }
    unsigned int v9 = (const SnippetUI::TextElement_FontWeight *)*((void *)a2 + 6);
    if (v9)
    {
      unint64_t v10 = (SnippetUI::TextElement_FontWeight *)*((void *)this + 6);
      if (!v10)
      {
        unint64_t v10 = (SnippetUI::TextElement_FontWeight *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
        *((void *)this + 6) = v10;
        unsigned int v9 = (const SnippetUI::TextElement_FontWeight *)*((void *)a2 + 6);
      }
      if (v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = (const SnippetUI::TextElement_FontWeight *)&SnippetUI::_TextElement_FontWeight_default_instance_;
      }
      SnippetUI::TextElement_FontWeight::MergeFrom(v10, v11);
    }
    char v12 = (const SnippetUI::Color *)*((void *)a2 + 7);
    if (v12)
    {
      int v13 = (SnippetUI::Color *)*((void *)this + 7);
      if (!v13)
      {
        int v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 7) = v13;
        char v12 = (const SnippetUI::Color *)*((void *)a2 + 7);
      }
      if (v12) {
        int v14 = v12;
      }
      else {
        int v14 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      }
      SnippetUI::Color::MergeFrom(v13, v14);
    }
    int v15 = (const SnippetUI::OptionalBool *)*((void *)a2 + 8);
    if (v15)
    {
      int v16 = (SnippetUI::OptionalBool *)*((void *)this + 8);
      if (!v16)
      {
        int v16 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 8) = v16;
        int v15 = (const SnippetUI::OptionalBool *)*((void *)a2 + 8);
      }
      if (v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v16, v17);
    }
    unsigned int v18 = (const SnippetUI::OptionalBool *)*((void *)a2 + 9);
    if (v18)
    {
      uint64_t v19 = (SnippetUI::OptionalBool *)*((void *)this + 9);
      if (!v19)
      {
        uint64_t v19 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 9) = v19;
        unsigned int v18 = (const SnippetUI::OptionalBool *)*((void *)a2 + 9);
      }
      if (v18) {
        long long v20 = v18;
      }
      else {
        long long v20 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v19, v20);
    }
  }
  int v21 = *((_DWORD *)a2 + 20);
  if (v21) {
    *((_DWORD *)this + 20) = v21;
  }
  int v22 = *((_DWORD *)a2 + 25);
  if (v22 == 2)
  {
    int v23 = (const std::string *)*((void *)a2 + 11);
    if (*((_DWORD *)this + 25) != 2)
    {
      SnippetUI::TextElement::clear_value((uint64_t)this);
      int v24 = 2;
      goto LABEL_51;
    }
  }
  else
  {
    if (v22 != 1) {
      return;
    }
    int v23 = (const std::string *)*((void *)a2 + 11);
    if (*((_DWORD *)this + 25) != 1)
    {
      SnippetUI::TextElement::clear_value((uint64_t)this);
      int v24 = 1;
LABEL_51:
      *((_DWORD *)this + 25) = v24;
      *((void *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_52:
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 88, (uint64_t)v23);
    }
  }
  int v25 = (std::string *)*((void *)this + 11);
  if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
    goto LABEL_52;
  }
  std::string::operator=(v25, v23);
}

void sub_1C5F21EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 100);
  if (v2 == 2 || v2 == 1)
  {
    uint64_t v3 = *(void *)(this + 88);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x1C8796D70](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 100) = 0;
  return this;
}

void SnippetUI::TextElement::CopyFrom(SnippetUI::TextElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement::Clear(this);
    SnippetUI::TextElement::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement::Clear(SnippetUI::TextElement *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 6) = 0;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 7) = 0;
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 8) = 0;
  uint64_t v6 = *((void *)this + 9);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  SnippetUI::TextElement::clear_value((uint64_t)this);
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::TextElement *)((char *)this + 8);
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 25);
  if (v7 == 1)
  {
    char v8 = (unsigned __int8 *)*((void *)this + 11);
    if ((char)v8[23] < 0)
    {
      char v8 = *(unsigned __int8 **)v8;
      unsigned int v9 = *(const char **)(*((void *)this + 11) + 8);
    }
    else
    {
      unsigned int v9 = (const char *)v8[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v8, v9, 1, (google::protobuf::internal *)"SnippetUI.TextElement.plain");
    if (*((_DWORD *)this + 25) == 1) {
      unint64_t v10 = (const void **)*((void *)this + 11);
    }
    else {
      unint64_t v10 = (const void **)&google::protobuf::internal::fixed_address_empty_string;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, v10, (char *)a2);
    int v7 = *((_DWORD *)this + 25);
  }
  if (v7 == 2)
  {
    unint64_t v11 = (unsigned __int8 *)*((void *)this + 11);
    if ((char)v11[23] < 0)
    {
      unint64_t v11 = *(unsigned __int8 **)v11;
      char v12 = *(const char **)(*((void *)this + 11) + 8);
    }
    else
    {
      char v12 = (const char *)v11[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v11, v12, 1, (google::protobuf::internal *)"SnippetUI.TextElement.attributed");
    if (*((_DWORD *)this + 25) == 2) {
      int v13 = (const void **)*((void *)this + 11);
    }
    else {
      int v13 = (const void **)&google::protobuf::internal::fixed_address_empty_string;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, v13, (char *)a2);
  }
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    int v14 = (SnippetUI::TextElement_Font *)*((void *)this + 5);
    if (!v14) {
      goto LABEL_30;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      int v14 = (SnippetUI::TextElement_Font *)*((void *)this + 5);
    }
    *(unsigned char *)a2 = 26;
    unsigned int v15 = *((_DWORD *)v14 + 6);
    if (v15 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v15 | 0x80;
      unsigned int v17 = v15 >> 7;
      if (v15 >> 14)
      {
        uint64_t v19 = (char *)a2 + 2;
        do
        {
          long long v20 = v19;
          *v19++ = v17 | 0x80;
          unsigned int v21 = v17 >> 7;
          unsigned int v22 = v17 >> 14;
          v17 >>= 7;
        }
        while (v22);
        unsigned int v18 = v20 + 2;
        unsigned char *v19 = v21;
        goto LABEL_29;
      }
      *((unsigned char *)a2 + 2) = v17;
      uint64_t v16 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v15;
      uint64_t v16 = 2;
    }
    unsigned int v18 = (char *)a2 + v16;
LABEL_29:
    a2 = SnippetUI::TextElement_Font::InternalSerializeWithCachedSizesToArray(v14, v18, a3, a4);
LABEL_30:
    int v23 = (SnippetUI::TextElement_FontWeight *)*((void *)this + 6);
    if (!v23) {
      goto LABEL_42;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      int v23 = (SnippetUI::TextElement_FontWeight *)*((void *)this + 6);
    }
    *(unsigned char *)a2 = 34;
    unsigned int v24 = *((_DWORD *)v23 + 5);
    if (v24 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v24 | 0x80;
      unsigned int v26 = v24 >> 7;
      if (v24 >> 14)
      {
        int v28 = (char *)a2 + 2;
        do
        {
          unint64_t v29 = v28;
          *v28++ = v26 | 0x80;
          unsigned int v30 = v26 >> 7;
          unsigned int v31 = v26 >> 14;
          v26 >>= 7;
        }
        while (v31);
        int v27 = v29 + 2;
        unsigned char *v28 = v30;
        goto LABEL_41;
      }
      *((unsigned char *)a2 + 2) = v26;
      uint64_t v25 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v24;
      uint64_t v25 = 2;
    }
    int v27 = (char *)a2 + v25;
LABEL_41:
    a2 = SnippetUI::TextElement_FontWeight::InternalSerializeWithCachedSizesToArray(v23, v27, a3, a4);
LABEL_42:
    std::string::size_type v32 = (SnippetUI::Color *)*((void *)this + 7);
    if (!v32) {
      goto LABEL_54;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      std::string::size_type v32 = (SnippetUI::Color *)*((void *)this + 7);
    }
    *(unsigned char *)a2 = 42;
    unsigned int v33 = *((_DWORD *)v32 + 6);
    if (v33 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v33 | 0x80;
      unsigned int v35 = v33 >> 7;
      if (v33 >> 14)
      {
        v37 = (char *)a2 + 2;
        do
        {
          int v38 = v37;
          *v37++ = v35 | 0x80;
          unsigned int v39 = v35 >> 7;
          unsigned int v40 = v35 >> 14;
          v35 >>= 7;
        }
        while (v40);
        long long v36 = v38 + 2;
        unsigned char *v37 = v39;
        goto LABEL_53;
      }
      *((unsigned char *)a2 + 2) = v35;
      uint64_t v34 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v33;
      uint64_t v34 = 2;
    }
    long long v36 = (char *)a2 + v34;
LABEL_53:
    a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v32, v36, a3, a4);
LABEL_54:
    std::string v41 = (SnippetUI::OptionalBool *)*((void *)this + 8);
    if (!v41) {
      goto LABEL_66;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      std::string v41 = (SnippetUI::OptionalBool *)*((void *)this + 8);
    }
    *(unsigned char *)a2 = 50;
    unsigned int v42 = *((_DWORD *)v41 + 5);
    if (v42 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v42 | 0x80;
      unsigned int v44 = v42 >> 7;
      if (v42 >> 14)
      {
        std::string v46 = (char *)a2 + 2;
        do
        {
          uint64_t v47 = v46;
          *v46++ = v44 | 0x80;
          unsigned int v48 = v44 >> 7;
          unsigned int v49 = v44 >> 14;
          v44 >>= 7;
        }
        while (v49);
        unsigned __int8 v45 = v47 + 2;
        *std::string v46 = v48;
        goto LABEL_65;
      }
      *((unsigned char *)a2 + 2) = v44;
      uint64_t v43 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v42;
      uint64_t v43 = 2;
    }
    unsigned __int8 v45 = (char *)a2 + v43;
LABEL_65:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v41, v45, a3, a4);
LABEL_66:
    long long v50 = (SnippetUI::OptionalBool *)*((void *)this + 9);
    if (v50)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        long long v50 = (SnippetUI::OptionalBool *)*((void *)this + 9);
      }
      *(unsigned char *)a2 = 58;
      unsigned int v51 = *((_DWORD *)v50 + 5);
      if (v51 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v51 | 0x80;
        unsigned int v53 = v51 >> 7;
        if (v51 >> 14)
        {
          char v54 = (char *)a2 + 2;
          do
          {
            v55 = v54;
            *v54++ = v53 | 0x80;
            unsigned int v56 = v53 >> 7;
            unsigned int v57 = v53 >> 14;
            v53 >>= 7;
          }
          while (v57);
          std::string v52 = v55 + 2;
          unsigned char *v54 = v56;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v53;
          std::string v52 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v51;
        std::string v52 = (char *)a2 + 2;
      }
      a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v50, v52, a3, a4);
    }
  }
  unsigned int v58 = *((_DWORD *)this + 8);
  if ((int)v58 >= 1)
  {
    unint64_t v59 = *(void *)a3;
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unint64_t v59 = *(void *)a3;
    }
    if (v59 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v81, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      char v60 = google::protobuf::internal::LogMessage::operator<<(v81, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v80, (const char **)&v60->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v81[0].__r_.__value_.__l.__data_);
    }
    *(unsigned char *)a2 = 66;
    v61 = (char *)a2 + 1;
    if (v58 >= 0x80)
    {
      do
      {
        *v61++ = v58 | 0x80;
        unsigned int v79 = v58 >> 14;
        v58 >>= 7;
      }
      while (v79);
      a2 = (google::protobuf::UnknownFieldSet *)(v61 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    unsigned char *v61 = v58;
    int v62 = (int *)*((void *)this + 3);
    char v63 = &v62[*((int *)this + 4)];
    do
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      unint64_t v65 = *v62++;
      unint64_t v64 = v65;
      if (v65 > 0x7F)
      {
        *(unsigned char *)a2 = v64 | 0x80;
        unint64_t v66 = v64 >> 7;
        if (v64 >> 14)
        {
          int v67 = (char *)a2 + 1;
          do
          {
            v68 = v67;
            *v67++ = v66 | 0x80;
            unint64_t v69 = v66 >> 7;
            unint64_t v70 = v66 >> 14;
            v66 >>= 7;
          }
          while (v70);
          a2 = (google::protobuf::UnknownFieldSet *)(v68 + 2);
          *int v67 = v69;
        }
        else
        {
          *((unsigned char *)a2 + 1) = v66;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(unsigned char *)a2 = v64;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v62 < v63);
  }
  unsigned int v71 = *((_DWORD *)this + 20);
  if (v71)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v71 = *((_DWORD *)this + 20);
    }
    *(unsigned char *)a2 = 72;
    if (v71 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v71 | 0x80;
      unint64_t v72 = (unint64_t)(int)v71 >> 7;
      if (v71 >> 14)
      {
        v73 = (char *)a2 + 2;
        do
        {
          long long v74 = v73;
          *v73++ = v72 | 0x80;
          unint64_t v75 = v72 >> 7;
          unint64_t v76 = v72 >> 14;
          v72 >>= 7;
        }
        while (v76);
        a2 = (google::protobuf::UnknownFieldSet *)(v74 + 2);
        unsigned char *v73 = v75;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v72;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v71;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  uint64_t v77 = *((void *)this + 1);
  if (v77) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v77 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  }
  return a2;
}

void sub_1C5F2274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::TextElement::_InternalParse(SnippetUI::TextElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned __int8 v45 = a2;
  uint64_t v5 = (SnippetUI::TextElement *)((char *)this + 16);
  uint64_t v6 = (std::string **)((char *)this + 88);
  int v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23))) {
      return v45;
    }
    TagFallback = (google::protobuf::internal *)((char *)v45 + 1);
    unint64_t v11 = (char *)*(unsigned __int8 *)v45;
    if ((*(char *)v45 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unint64_t v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v45 + 2);
LABEL_6:
      unsigned __int8 v45 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v45, v11);
    unsigned __int8 v45 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10) {
          goto LABEL_70;
        }
        if (*((_DWORD *)this + 25) != 1)
        {
          SnippetUI::TextElement::clear_value((uint64_t)this);
          *((_DWORD *)this + 25) = 1;
          *((void *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_48:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        char v12 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_48;
        }
        uint64_t v25 = (std::string::value_type *)TagFallback;
        unsigned int v26 = a3;
        int v27 = "SnippetUI.TextElement.plain";
        goto LABEL_53;
      case 2u:
        if (v11 != 18) {
          goto LABEL_70;
        }
        if (*((_DWORD *)this + 25) != 2)
        {
          SnippetUI::TextElement::clear_value((uint64_t)this);
          *((_DWORD *)this + 25) = 2;
          *((void *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_51:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        char v12 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_51;
        }
        uint64_t v25 = (std::string::value_type *)TagFallback;
        unsigned int v26 = a3;
        int v27 = "SnippetUI.TextElement.attributed";
LABEL_53:
        long long v20 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, v25, (uint64_t)v26, (google::protobuf::internal *)v27);
        goto LABEL_75;
      case 3u:
        if (v11 != 26) {
          goto LABEL_70;
        }
        int v13 = (SnippetUI::TextElement_Font *)*((void *)this + 5);
        if (!v13)
        {
          int v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
          *((void *)this + 5) = v13;
          TagFallback = v45;
        }
        unsigned int v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            return 0;
          }
          unsigned int v15 = SizeFallback;
          unsigned int v14 = v29;
        }
        else
        {
          unsigned int v15 = (char *)TagFallback + 1;
        }
        int v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        int v31 = *((_DWORD *)a3 + 22);
        BOOL v32 = __OFSUB__(v31--, 1);
        *((_DWORD *)a3 + 22) = v31;
        if (v31 < 0 != v32) {
          return 0;
        }
        int v33 = v30;
        uint64_t v34 = SnippetUI::TextElement_Font::_InternalParse(v13, (google::protobuf::internal *)v15, a3);
        if (!v34) {
          return 0;
        }
        goto LABEL_63;
      case 4u:
        if (v11 != 34) {
          goto LABEL_70;
        }
        uint64_t v16 = (SnippetUI::TextElement_FontWeight *)*((void *)this + 6);
        if (!v16)
        {
          uint64_t v16 = (SnippetUI::TextElement_FontWeight *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
          *((void *)this + 6) = v16;
          TagFallback = v45;
        }
        unsigned int v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned int v35 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v35) {
            return 0;
          }
          unsigned int v18 = v35;
          unsigned int v17 = v36;
        }
        else
        {
          unsigned int v18 = (char *)TagFallback + 1;
        }
        int v37 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        int v38 = *((_DWORD *)a3 + 22);
        BOOL v32 = __OFSUB__(v38--, 1);
        *((_DWORD *)a3 + 22) = v38;
        if (v38 < 0 != v32) {
          return 0;
        }
        int v33 = v37;
        uint64_t v34 = SnippetUI::TextElement_FontWeight::_InternalParse(v16, (google::protobuf::internal *)v18, a3);
        if (!v34) {
          return 0;
        }
LABEL_63:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v39 = *((_DWORD *)a3 + 7) + v33;
        *((_DWORD *)a3 + 7) = v39;
        *(void *)a3 = *((void *)a3 + 1) + (v39 & (v39 >> 31));
        unsigned __int8 v45 = v34;
        continue;
      case 5u:
        if (v11 != 42) {
          goto LABEL_70;
        }
        uint64_t v19 = (SnippetUI::Color *)*((void *)this + 7);
        if (!v19)
        {
          uint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((void *)this + 7) = v19;
          TagFallback = v45;
        }
        long long v20 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v19, TagFallback);
        goto LABEL_75;
      case 6u:
        if (v11 != 50) {
          goto LABEL_70;
        }
        unsigned int v21 = (SnippetUI::OptionalBool *)*((void *)this + 8);
        if (v21) {
          goto LABEL_39;
        }
        unsigned int v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 8) = v21;
        goto LABEL_38;
      case 7u:
        if (v11 != 58) {
          goto LABEL_70;
        }
        unsigned int v21 = (SnippetUI::OptionalBool *)*((void *)this + 9);
        if (v21) {
          goto LABEL_39;
        }
        unsigned int v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 9) = v21;
LABEL_38:
        TagFallback = v45;
LABEL_39:
        long long v20 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v21, TagFallback);
        goto LABEL_75;
      case 8u:
        if (v11 == 66)
        {
          long long v20 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
          goto LABEL_75;
        }
        if (v11 == 64)
        {
          int v42 = google::protobuf::internal::ReadVarint(&v45, (const char **)v11);
          if (!v45) {
            return 0;
          }
          SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v42);
          continue;
        }
LABEL_70:
        if (v11) {
          BOOL v43 = (v11 & 7) == 4;
        }
        else {
          BOOL v43 = 1;
        }
        if (v43)
        {
          *((_DWORD *)a3 + 20) = v11 - 1;
          return TagFallback;
        }
        long long v20 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_75:
        unsigned __int8 v45 = (google::protobuf::internal *)v20;
        if (v20) {
          continue;
        }
        return 0;
      case 9u:
        if (v11 != 72) {
          goto LABEL_70;
        }
        int v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v22) = *(unsigned __int8 *)TagFallback;
        if ((v22 & 0x80) == 0) {
          goto LABEL_46;
        }
        int v24 = *(char *)v23;
        unint64_t v22 = v22 + (v24 << 7) - 128;
        if (v24 < 0)
        {
          unsigned int v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
          unsigned __int8 v45 = v40;
          *((_DWORD *)this + 20) = v41;
          if (!v40) {
            return 0;
          }
        }
        else
        {
          int v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_46:
          unsigned __int8 v45 = v23;
          *((_DWORD *)this + 20) = v22;
        }
        continue;
      default:
        goto LABEL_70;
    }
  }
}

uint64_t SnippetUI::TextElement::GetCachedSize(SnippetUI::TextElement *this)
{
  return *((unsigned int *)this + 24);
}

char *SnippetUI::TextElement::ByteSizeLong(SnippetUI::TextElement *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  int v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_11:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5) {
    goto LABEL_11;
  }
  if ((v5 & 0x80000000) != 0) {
    uint64_t v8 = 11;
  }
  else {
    uint64_t v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  unint64_t v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    unint64_t v11 = (SnippetUI::TextElement_Font *)*((void *)this + 5);
    if (v11)
    {
      char v12 = SnippetUI::TextElement_Font::ByteSizeLong(v11);
      unint64_t v10 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v13 = (SnippetUI::TextElement_FontWeight *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::TextElement_FontWeight::ByteSizeLong(v13);
      unint64_t v10 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::Color *)*((void *)this + 7);
    if (v15)
    {
      uint64_t v16 = SnippetUI::Color::ByteSizeLong(v15);
      unint64_t v10 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 8);
    if (v17)
    {
      unsigned int v18 = SnippetUI::OptionalBool::ByteSizeLong(v17);
      unint64_t v10 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v19 = (SnippetUI::OptionalBool *)*((void *)this + 9);
    if (v19)
    {
      long long v20 = SnippetUI::OptionalBool::ByteSizeLong(v19);
      unint64_t v10 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v21 = *((_DWORD *)this + 20);
  if (v21)
  {
    if (v21 < 0) {
      uint64_t v22 = 11;
    }
    else {
      uint64_t v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unint64_t v10 = (const google::protobuf::UnknownFieldSet *)((char *)v10 + v22);
  }
  int v23 = *((_DWORD *)this + 25);
  if (v23 == 2 || v23 == 1)
  {
    uint64_t v24 = *((void *)this + 11);
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    unint64_t v10 = (const google::protobuf::UnknownFieldSet *)((char *)v10 + v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement *)((char *)this + 8), v10, (_DWORD *)this + 24);
  }
  else
  {
    *((_DWORD *)this + 24) = v10;
    return (char *)v10;
  }
}

uint64_t SnippetUI::TextElement::IsInitialized(SnippetUI::TextElement *this)
{
  return 1;
}

SnippetUI::TextElement *SnippetUI::TextElement::New(SnippetUI::TextElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(a2);
}

SnippetUI::TextElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::TextElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement>);
  }
  SnippetUI::TextElement::TextElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F22F48(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4090B335DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::TextElement *SnippetUI::TextElement::New(SnippetUI::TextElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(0);
}

void SnippetUI::TextElement::~TextElement(SnippetUI::TextElement *this)
{
  SnippetUI::TextElement::~TextElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_1F211F460;
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    int v3 = *((void *)this + 6);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    int v4 = *((void *)this + 7);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 8);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    int v6 = *((void *)this + 9);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (*((_DWORD *)this + 25)) {
    SnippetUI::TextElement::clear_value((uint64_t)this);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::TextElement_Font_NamedFont_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_TextElement_2eproto;
}

BOOL SnippetUI::TextElement_Font_NamedFont_IsValid(SnippetUI *this)
{
  return this < 0xB;
}

uint64_t SnippetUI::TextElement_Font_Weight_descriptor(SnippetUI *this)
{
  return qword_1EA3D94F0;
}

BOOL SnippetUI::TextElement_Font_Weight_IsValid(SnippetUI *this)
{
  return this < 9;
}

uint64_t SnippetUI::TextElement_Font_Design_descriptor(SnippetUI *this)
{
  return qword_1EA3D94F8;
}

BOOL SnippetUI::TextElement_Font_Design_IsValid(SnippetUI *this)
{
  return this < 3;
}

void *SnippetUI::TextElement_Font_SystemFont::TextElement_Font_SystemFont(void *this)
{
  *this = &unk_1F211F220;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F211F220;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

SnippetUI::TextElement_Font_SystemFont *SnippetUI::TextElement_Font_SystemFont::TextElement_Font_SystemFont(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  *(void *)this = &unk_1F211F220;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v5 = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((void *)this + 2) = v5;
  return this;
}

void sub_1C5F23284(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::TextElement_Font_SystemFont::default_instance(SnippetUI::TextElement_Font_SystemFont *this)
{
  if (atomic_load_explicit(scc_info_TextElement_Font_SystemFont_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_SystemFont_TextElement_2eproto);
  }
  return &SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

void SnippetUI::TextElement_Font_SystemFont::CopyFrom(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (char *)this + 8;
    *((_DWORD *)v5 + 4) = 0;
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
    }
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, a2);
  }
}

float SnippetUI::TextElement_Font_SystemFont::InternalSwap(SnippetUI::TextElement_Font_SystemFont *this, SnippetUI::TextElement_Font_SystemFont *a2)
{
  uint64_t v4 = (SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v10;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  int v9 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v9;
  return result;
}

void SnippetUI::TextElement_Font::InitAsDefaultInstance(SnippetUI::TextElement_Font *this)
{
  dword_1EB690A70 = 0;
  qword_1EB690A78 = (uint64_t)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

uint64_t SnippetUI::TextElement_Font::_Internal::system(SnippetUI::TextElement_Font::_Internal *this, const SnippetUI::TextElement_Font *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::TextElement_Font::set_allocated_system(uint64_t this, SnippetUI::TextElement_Font_SystemFont *a2)
{
  uint64_t v3 = this;
  if (*(_DWORD *)(this + 28) == 2)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v3 + 28) = 0;
  if (a2)
  {
    *(_DWORD *)(v3 + 28) = 2;
    *(void *)(v3 + 16) = a2;
  }
  return this;
}

uint64_t SnippetUI::TextElement_Font::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 2)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::TextElement_Font(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  *(void *)this = &unk_1F211F2E0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 1)
  {
    int v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) = 1;
    *((_DWORD *)this + 4) = v8;
  }
  else if (v5 == 2)
  {
    *((_DWORD *)this + 7) = 2;
    char v6 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
    *((void *)this + 2) = v6;
    if (*((_DWORD *)a2 + 7) == 2) {
      uint64_t v7 = (const SnippetUI::TextElement_Font_SystemFont *)*((void *)a2 + 2);
    }
    else {
      uint64_t v7 = (const SnippetUI::TextElement_Font_SystemFont *)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
    }
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1C5F235C4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::TextElement_Font::default_instance(SnippetUI::TextElement_Font *this)
{
  if (atomic_load_explicit(scc_info_TextElement_Font_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_TextElement_2eproto);
  }
  return &SnippetUI::_TextElement_Font_default_instance_;
}

void SnippetUI::TextElement_Font::CopyFrom(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement_Font::Clear(this);
    SnippetUI::TextElement_Font::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_Font::InternalSwap(SnippetUI::TextElement_Font *this, SnippetUI::TextElement_Font *a2)
{
  uint64_t v4 = (SnippetUI::TextElement_Font *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void *SnippetUI::TextElement_FontWeight::TextElement_FontWeight(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F211F3A0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F211F3A0;
  return this;
}

SnippetUI::TextElement_FontWeight *SnippetUI::TextElement_FontWeight::TextElement_FontWeight(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  *(void *)this = &unk_1F211F3A0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return this;
}

void sub_1C5F237A8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::TextElement_FontWeight::default_instance(SnippetUI::TextElement_FontWeight *this)
{
  if (atomic_load_explicit(scc_info_TextElement_FontWeight_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_FontWeight_TextElement_2eproto);
  }
  return &SnippetUI::_TextElement_FontWeight_default_instance_;
}

void SnippetUI::TextElement_FontWeight::CopyFrom(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
    *((_DWORD *)v5 + 2) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::TextElement_FontWeight::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_FontWeight::InternalSwap(SnippetUI::TextElement_FontWeight *this, SnippetUI::TextElement_FontWeight *a2)
{
  uint64_t v4 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
}

void SnippetUI::TextElement::InitAsDefaultInstance(SnippetUI::TextElement *this)
{
  qword_1EB690750 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690758 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690710 = (uint64_t)&SnippetUI::_TextElement_Font_default_instance_;
  unk_1EB690718 = &SnippetUI::_TextElement_FontWeight_default_instance_;
  qword_1EB690720 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EB690728 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690730 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::TextElement::_Internal::font(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::TextElement::_Internal::weight(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::TextElement::_Internal::color(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::TextElement::_Internal::is_italic(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::TextElement::_Internal::is_bold(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::TextElement::clear_color(SnippetUI::TextElement *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::TextElement::clear_is_italic(SnippetUI::TextElement *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::TextElement::clear_is_bold(SnippetUI::TextElement *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

SnippetUI::TextElement *SnippetUI::TextElement::TextElement(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  *(void *)this = &unk_1F211F460;
  *((void *)this + 1) = 0;
  uint64_t v4 = (SnippetUI::TextElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 24) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  else
  {
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
  }
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 25) = 0;
  int v6 = *((_DWORD *)a2 + 25);
  if ((v6 - 1) <= 1)
  {
    uint64_t v7 = *((void *)a2 + 11);
    SnippetUI::TextElement::clear_value((uint64_t)this);
    *((void *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 25) = v6;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 88, v7);
  }
  return this;
}

void sub_1C5F23C70(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x1081C40B60F2DE8);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::TextElement::default_instance(SnippetUI::TextElement *this)
{
  if (atomic_load_explicit(scc_info_TextElement_TextElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_TextElement_2eproto);
  }
  return &SnippetUI::_TextElement_default_instance_;
}

void SnippetUI::TextElement::CopyFrom(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement::Clear(this);
    SnippetUI::TextElement::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement::InternalSwap(SnippetUI::TextElement *this, SnippetUI::TextElement *a2)
{
  uint64_t v4 = (SnippetUI::TextElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v13;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
}

void sub_1C5F240F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F241D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F242AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternSchemaBinary(void *a1@<X8>)
{
  siri::dialogengine::ParseGzippedFile();
  unint64_t v2 = v14;
  unsigned __int8 v3 = v14;
  if ((v14 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)v13[1];
  }
  if (!v2)
  {
    *a1 = 0;
    a1[1] = 0;
    if ((v3 & 0x80) == 0) {
      return;
    }
    goto LABEL_20;
  }
  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v11);
  if (google::protobuf::MessageLite::ParseFromString(v11, v13))
  {
    uint64_t v4 = (uint64_t *)v12;
    int v5 = *(char *)(v12 + 23);
    if (v5 < 0)
    {
      if (*(void *)(v12 + 8) != 15) {
        goto LABEL_17;
      }
      uint64_t v4 = *(uint64_t **)v12;
    }
    else if (v5 != 15)
    {
      goto LABEL_17;
    }
    uint64_t v6 = *v4;
    uint64_t v7 = *(uint64_t *)((char *)v4 + 7);
    if (v6 == 0x534E524554544150 && v7 == 0x4250414D45484353) {
      operator new();
    }
  }
LABEL_17:
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *a1 = 0;
  a1[1] = 0;
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v11);
  if ((v14 & 0x80) != 0) {
LABEL_20:
  }
    operator delete(v13[0]);
}

void sub_1C5F25378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  if (a70) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a70);
  }
  if (*(char *)(v70 - 89) < 0) {
    operator delete(*(void **)(v70 - 112));
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a67);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)&STACK[0x278]);
  if (*(char *)(v70 - 113) < 0) {
    operator delete(*(void **)(v70 - 136));
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ParameterENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  unint64_t v2 = (char *)operator new(0x168uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1F2122138;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)(v2 + 24));
  *a1 = v3;
  a1[1] = v2;
}

siri::dialogengine::PatternSchemaConcreteGroup *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine26PatternSchemaConcreteGroupENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::PatternSchemaConcreteGroup **a1)
{
  unint64_t v2 = operator new(0xF0uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F211F890;
  uint64_t result = siri::dialogengine::PatternSchemaConcreteGroup::PatternSchemaConcreteGroup((siri::dialogengine::PatternSchemaConcreteGroup *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::PatternSchemaConcreteGroup *)v2;
  return result;
}

void sub_1C5F257F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::PatternSchemaAliasGroup,std::allocator<siri::dialogengine::PatternSchemaAliasGroup>,std::string const&,std::shared_ptr<siri::dialogengine::PatternSchemaGroup> &,void>(void *a1, long long *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v8 = operator new(0x48uLL);
  uint64_t v9 = v8;
  v8[1] = 0;
  std::string v8[2] = 0;
  void *v8 = &unk_1F211F8E0;
  char v10 = v8 + 3;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::PatternSchemaGroup::PatternSchemaGroup(v8 + 3, a2);
  void v9[3] = &unk_1F211D508;
  v9[7] = a3;
  v9[8] = a4;
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_1C5F258CC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternUsagesBinary(siri::dialogengine *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2, int a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3 != 1)
  {
    uint64_t v9 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v9 + 8) = 0u;
    *(void *)uint64_t v9 = &unk_1F211F580;
    *((_DWORD *)v9 + 6) = 0;
    *((void *)v9 + 4) = 0;
    *(_OWORD *)(v9 + 40) = 0u;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v9 + 24);
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    if (a3 == 2) {
      char v10 = (uint64_t *)a2;
    }
    else {
      char v10 = &google::protobuf::internal::fixed_address_empty_string;
    }
    *((_DWORD *)v9 + 6) = siri::dialogengine::GetPatternUsageFromString((uint64_t)v10);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, (long long *)&__str);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
    return;
  }
  __str.__r_.__value_.__l.__size_ = *((void *)a2 + 5);
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&__str, *(void *)(__str.__r_.__value_.__l.__size_ + 24));
  for (std::string i = __str;
        i.__r_.__value_.__r.__words[0];
        google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&i))
  {
    uint64_t v5 = *(void *)(i.__r_.__value_.__r.__words[0] + 24);
    uint64_t v6 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v6 + 8) = 0u;
    *(void *)uint64_t v6 = &unk_1F211F580;
    *((_DWORD *)v6 + 6) = 0;
    *((void *)v6 + 4) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *(void *)&long long v20 = v6 + 24;
    *((void *)&v20 + 1) = v6;
    *((_DWORD *)v6 + 6) = siri::dialogengine::GetPatternUsageFromString(v5);
    if (*(char *)(v5 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
    }
    else {
      std::string __str = *(std::string *)(v5 + 24);
    }
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)v18);
    if ((v19 & 0x80000000) == 0)
    {
      if (v19 == 4 && LODWORD(v18[0]) == 1702063205) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (v18[1] != (void *)4)
    {
      operator delete(v18[0]);
LABEL_15:
      std::string::operator=((std::string *)(v6 + 32), &__str);
      goto LABEL_16;
    }
    int v7 = *(_DWORD *)v18[0];
    operator delete(v18[0]);
    if (v7 != 1702063205) {
      goto LABEL_15;
    }
LABEL_16:
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  uint64_t v11 = *(void **)this;
  uint64_t v12 = *((void *)this + 1);
  if (*(void *)this == v12) {
    return;
  }
  uint64_t v13 = *v11;
  if (*(char *)(*v11 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
  }
  else
  {
    long long v14 = *(_OWORD *)(v13 + 8);
    __str.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (size) {
      return;
    }
LABEL_34:
    uint64_t v16 = *v11;
    void *v11 = *(void *)(v12 - 16);
    *(void *)(v12 - 16) = v16;
    uint64_t v17 = v11[1];
    v11[1] = *(void *)(v12 - 8);
    *(void *)(v12 - 8) = v17;
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_34;
  }
}

void sub_1C5F25B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void siri::dialogengine::ParsePatternComponentBinary(uint64_t a1, uint64_t *a2, int a3)
{
  siri::dialogengine::ParseStringList(*(uint64_t **)(a1 + 48), 0, &v51);
  uint64_t v4 = (const std::string *)v51;
  for (std::string i = v52; v4 != (const std::string *)i; ++v4)
  {
    uint64_t v5 = (char *)operator new(0x140uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1F211F5D0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    *((void *)v5 + 39) = 0;
    *(_OWORD *)(v5 + 264) = 0u;
    *(_OWORD *)(v5 + 280) = 0u;
    *(_OWORD *)(v5 + 296) = 0u;
    std::string::operator=((std::string *)v5 + 1, v4);
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - v51) >> 3) >= 2)
    {
      memset(v54, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v54, (long long *)(v51 + 24), v52, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - v51 - 24) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 296), (std::string *)v54[0].__r_.__value_.__l.__data_, (long long *)v54[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 3));
      unsigned int v48 = v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    }
    std::string::operator=((std::string *)v5 + 1, v4);
    v5[120] = siri::dialogengine::StringToBool(*(const std::string **)(a1 + 56));
    std::string::operator=((std::string *)(v5 + 152), *(const std::string **)(a1 + 72));
    std::string::operator=((std::string *)(v5 + 128), *(const std::string **)(a1 + 64));
    unsigned int v48 = 0;
    unsigned int v49 = 0;
    unint64_t v50 = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      int v7 = (uint64_t *)(v6 + 8);
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = *(int *)(a1 + 32);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v7;
        if ((unint64_t)v9 >= v50)
        {
          uint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v48, (long long *)v11);
        }
        else
        {
          if (*(char *)(v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
          }
          else
          {
            long long v12 = *(_OWORD *)v11;
            v9->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
          }
          ++v9;
        }
        unsigned int v49 = v9;
        ++v7;
        v10 -= 8;
      }
      while (v10);
      uint64_t v13 = v48;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v13 = 0;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 176), v13, (long long *)v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v13) >> 3));
    long long v14 = *(void **)(a1 + 96);
    if (!v14) {
      long long v14 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    }
    siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v54, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v14 + 3), *((_DWORD *)v14 + 8));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 6, (uint64_t *)v54[0].__r_.__value_.__l.__data_, (uint64_t *)v54[0].__r_.__value_.__l.__size_, (uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 4);
    v55[0] = (void **)v54;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v55);
    int v15 = *(_DWORD *)(a1 + 16);
    if ((v15 & 0x10) != 0)
    {
      uint64_t v16 = *(void **)(a1 + 80);
      if (!v16)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5081);
        uint64_t v17 = google::protobuf::internal::LogMessage::operator<<(v54, "CHECK failed: !value || full_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v53, (const char **)&v17->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v54[0].__r_.__value_.__l.__data_);
        uint64_t v16 = *(void **)(a1 + 80);
      }
      if (!v16) {
        uint64_t v16 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      unsigned int v18 = (void *)v16[9];
      if (!v18) {
        unsigned int v18 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      }
      siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v54, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v18 + 3), *((_DWORD *)v18 + 8));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 9, (uint64_t *)v54[0].__r_.__value_.__l.__data_, (uint64_t *)v54[0].__r_.__value_.__l.__size_, (uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 4);
      v55[0] = (void **)v54;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v55);
      char v19 = *(void **)(a1 + 80);
      if (!v19) {
        char v19 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      siri::dialogengine::ParsePatternOverridesBinary((siri::dialogengine *)v54, (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((unsigned int *)v19 + 8), v19[5]);
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 25, (uint64_t *)v54[0].__r_.__value_.__l.__data_, (uint64_t *)v54[0].__r_.__value_.__l.__size_, (uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 4);
      v55[0] = (void **)v54;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v55);
      memset(v54, 0, 24);
      long long v20 = *(int **)(a1 + 80);
      if (!v20) {
        long long v20 = (int *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      uint64_t v21 = *((void *)v20 + 8);
      if (v21) {
        uint64_t v22 = (uint64_t *)(v21 + 8);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = v20[14];
      if (v23)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 8 * v23;
        do
        {
          uint64_t v26 = *v22;
          if ((unint64_t)v24 >= v54[0].__r_.__value_.__r.__words[2])
          {
            uint64_t v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v54, (long long *)v26);
          }
          else
          {
            if (*(char *)(v26 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v26, *(void *)(v26 + 8));
            }
            else
            {
              long long v27 = *(_OWORD *)v26;
              v24->__r_.__value_.__r.__words[2] = *(void *)(v26 + 16);
              *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v27;
            }
            ++v24;
          }
          v54[0].__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          ++v22;
          v25 -= 8;
        }
        while (v25);
        int v28 = (std::string *)v54[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v24 = 0;
        int v28 = 0;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 248), v28, (long long *)v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v28) >> 3));
      v55[0] = (void **)v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v55);
      int v15 = *(_DWORD *)(a1 + 16);
    }
    if ((v15 & 0x20) != 0)
    {
      unsigned int v29 = *(void **)(a1 + 88);
      if (!v29)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5141);
        int v30 = google::protobuf::internal::LogMessage::operator<<(v54, "CHECK failed: !value || supporting_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v53, (const char **)&v30->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v54[0].__r_.__value_.__l.__data_);
        unsigned int v29 = *(void **)(a1 + 88);
      }
      if (!v29) {
        unsigned int v29 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      int v31 = (void *)v29[9];
      if (!v31) {
        int v31 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      }
      siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v54, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v31 + 3), *((_DWORD *)v31 + 8));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 12, (uint64_t *)v54[0].__r_.__value_.__l.__data_, (uint64_t *)v54[0].__r_.__value_.__l.__size_, (uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 4);
      v55[0] = (void **)v54;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v55);
      BOOL v32 = *(void **)(a1 + 88);
      if (!v32) {
        BOOL v32 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      siri::dialogengine::ParsePatternOverridesBinary((siri::dialogengine *)v54, (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((unsigned int *)v32 + 8), v32[5]);
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 28, (uint64_t *)v54[0].__r_.__value_.__l.__data_, (uint64_t *)v54[0].__r_.__value_.__l.__size_, (uint64_t)(v54[0].__r_.__value_.__l.__size_ - v54[0].__r_.__value_.__r.__words[0]) >> 4);
      v55[0] = (void **)v54;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v55);
      memset(v54, 0, 24);
      int v33 = *(int **)(a1 + 88);
      if (!v33) {
        int v33 = (int *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      uint64_t v34 = *((void *)v33 + 8);
      if (v34) {
        unsigned int v35 = (uint64_t *)(v34 + 8);
      }
      else {
        unsigned int v35 = 0;
      }
      uint64_t v36 = v33[14];
      if (v36)
      {
        int v37 = 0;
        uint64_t v38 = 8 * v36;
        do
        {
          uint64_t v39 = *v35;
          if ((unint64_t)v37 >= v54[0].__r_.__value_.__r.__words[2])
          {
            int v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v54, (long long *)v39);
          }
          else
          {
            if (*(char *)(v39 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v39, *(void *)(v39 + 8));
            }
            else
            {
              long long v40 = *(_OWORD *)v39;
              v37->__r_.__value_.__r.__words[2] = *(void *)(v39 + 16);
              *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v40;
            }
            ++v37;
          }
          v54[0].__r_.__value_.__l.__size_ = (std::string::size_type)v37;
          ++v35;
          v38 -= 8;
        }
        while (v38);
        int v41 = (std::string *)v54[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        int v37 = 0;
        int v41 = 0;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 272), v41, (long long *)v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v41) >> 3));
      v55[0] = (void **)v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v55);
    }
    uint64_t v42 = *a2;
    if (a3)
    {
      *(void *)&long long v46 = v5 + 24;
      *((void *)&v46 + 1) = v5;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v42 + 144), &v46);
    }
    else
    {
      *(void *)&long long v47 = v5 + 24;
      *((void *)&v47 + 1) = v5;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v42 + 120), &v47);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    v54[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  v54[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
}

void sub_1C5F26230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v11 = va_arg(va1, void **);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va2);
  *(void *)(v9 - 96) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 96));
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  va_copy((va_list)v11, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseCustomCombinationListBinary(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a3, siri::dialogengine::VisualComponentsCombination::Entry *a4)
{
  uint64_t v4 = *((void *)a2 + 5);
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)a2 + 8);
  if (v6)
  {
    int v33 = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v8 = (char **)((char *)a3 + 32);
    uint64_t v9 = 8 * v6;
    uint64_t v31 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    BOOL v32 = *(void **)(MEMORY[0x1E4FBA408] + 64);
    while (1)
    {
      uint64_t v10 = *v5;
      uint64_t v11 = (char *)operator new(0x50uLL);
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *(_OWORD *)(v11 + 24) = 0u;
      long long v12 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v11 + 24);
      *(void *)uint64_t v11 = &unk_1F211F6C0;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *((void *)v11 + 9) = 0;
      *(void *)&long long v34 = v11 + 24;
      *((void *)&v34 + 1) = v11;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(v8, &v34);
      int v13 = *(_DWORD *)(v10 + 32);
      if (v13 == 2) {
        break;
      }
      uint64_t v14 = &siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
      if (v13 != 1) {
        goto LABEL_10;
      }
      *((_DWORD *)v11 + 6) = 4;
      std::string::operator=((std::string *)(v11 + 32), *(const std::string **)(v10 + 24));
LABEL_50:
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
      ++v5;
      v9 -= 8;
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = *(void **)(v10 + 24);
LABEL_10:
    uint64_t v15 = (unint64_t *)*((void *)v14 + 5);
    if (*v15 == 1)
    {
      __p[1] = v15;
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(__p, v15[3]);
      uint64_t v16 = *((void *)__p[0] + 3);
      int EntryTypeFromString = siri::dialogengine::GetEntryTypeFromString(v16);
      *(_DWORD *)long long v12 = EntryTypeFromString;
      if (EntryTypeFromString)
      {
        siri::dialogengine::ParseCustomCombinationListBinary(this, (siri::dialogengine::Context *)(v16 + 24), v12, v18);
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Invalid keyword; Expected '",
                27);
        std::string::basic_string[abi:ne180100]<0>(v39, "and");
        if ((v40 & 0x80u) == 0) {
          long long v20 = v39;
        }
        else {
          long long v20 = (void **)v39[0];
        }
        if ((v40 & 0x80u) == 0) {
          uint64_t v21 = v40;
        }
        else {
          uint64_t v21 = (uint64_t)v39[1];
        }
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(v37, "or");
        if ((v38 & 0x80u) == 0) {
          uint64_t v24 = v37;
        }
        else {
          uint64_t v24 = (void **)v37[0];
        }
        if ((v38 & 0x80u) == 0) {
          uint64_t v25 = v38;
        }
        else {
          uint64_t v25 = (uint64_t)v37[1];
        }
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(v35, "andor");
        if ((v36 & 0x80u) == 0) {
          int v28 = v35;
        }
        else {
          int v28 = (void **)v35[0];
        }
        if ((v36 & 0x80u) == 0) {
          uint64_t v29 = v36;
        }
        else {
          uint64_t v29 = (uint64_t)v35[1];
        }
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"'", 1);
        if ((char)v36 < 0) {
          operator delete(v35[0]);
        }
        if ((char)v38 < 0) {
          operator delete(v37[0]);
        }
        if ((char)v40 < 0) {
          operator delete(v39[0]);
        }
        std::stringbuf::str();
        if (this) {
          siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)v39);
        }
        else {
          siri::dialogengine::Log::LogWithLevel((uint64_t)v39, 3u);
        }
        if ((char)v40 < 0) {
          operator delete(v39[0]);
        }
        __p[0] = v33;
        *(void **)((char *)__p + *((void *)v33 - 3)) = v32;
        v42[0] = v31;
        v42[1] = MEMORY[0x1E4FBA470] + 16;
        if (v43 < 0) {
          operator delete((void *)v42[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C8796CC0](&v44);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Expected map message to have a single entry");
      if (this) {
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)__p);
      }
      else {
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      }
      if (SHIBYTE(v42[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_50;
  }
}

void sub_1C5F26788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VisualComponentsCombination::Entry::~Entry(void **this)
{
  unint64_t v2 = this + 4;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(void *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = v4[3];
  unint64_t v6 = v4[1];
  if (v5 != v6 && !*(void *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    int v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    uint64_t v4 = (void *)a1[1];
    unint64_t v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    uint64_t v8 = v4[4];
    while (1)
    {
      uint64_t v9 = *(void **)(v8 + 8 * a2);
      if (v9) {
        break;
      }
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        uint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(void *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1C5F269A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::__on_zero_shared(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 55) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void siri::dialogengine::ParsePatternOverridesBinary(siri::dialogengine *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3) {
    uint64_t v3 = (uint64_t *)(a3 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2)
  {
    uint64_t v5 = &v3[(int)a2];
    do
    {
      uint64_t v6 = *v3;
      int v7 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v7 + 8) = 0u;
      *(void *)int v7 = &unk_1F211F620;
      *(_OWORD *)(v7 + 24) = 0u;
      uint64_t v8 = v7 + 24;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      *(void *)&long long v20 = v7 + 24;
      *((void *)&v20 + 1) = v7;
      unint64_t v19 = 0;
      *(_OWORD *)uint64_t v18 = 0u;
      if (*(_DWORD *)(v6 + 16))
      {
        uint64_t v9 = *(void **)(v6 + 48);
        if (!v9)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
          uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: !value || usage_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v10->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
          uint64_t v9 = *(void **)(v6 + 48);
        }
        if (!v9) {
          uint64_t v9 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
        }
        siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v22, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v9 + 3), *((_DWORD *)v9 + 8));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v8, (uint64_t *)v22[0].__r_.__value_.__l.__data_, (uint64_t *)v22[0].__r_.__value_.__l.__size_, (uint64_t)(v22[0].__r_.__value_.__l.__size_ - v22[0].__r_.__value_.__r.__words[0]) >> 4);
        uint64_t v23 = (void **)v22;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v23);
      }
      uint64_t v11 = *(void *)(v6 + 40);
      if (v11) {
        char v12 = (uint64_t *)(v11 + 8);
      }
      else {
        char v12 = 0;
      }
      uint64_t v13 = *(int *)(v6 + 32);
      if (v13)
      {
        uint64_t v14 = v18[1];
        uint64_t v15 = 8 * v13;
        do
        {
          uint64_t v16 = *v12;
          if ((unint64_t)v14 >= v19)
          {
            uint64_t v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v18, (long long *)v16);
          }
          else
          {
            if (*(char *)(v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
            }
            else
            {
              long long v17 = *(_OWORD *)v16;
              v14->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
              *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
            }
            ++v14;
          }
          v18[1] = v14;
          ++v12;
          v15 -= 8;
        }
        while (v15);
        uint64_t v8 = (char *)v20;
      }
      if (v8 + 24 != (char *)v18) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v8 + 1, v18[0], (long long *)v18[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v18[1] - (char *)v18[0]) >> 3));
      }
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v20);
      v22[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
      ++v3;
    }
    while (v3 != v5);
  }
}

void sub_1C5F26CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v10 = va_arg(va1, void);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va1);
  *(void *)(v2 - 88) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 88));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 296);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 224);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 200);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v2 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(void *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = v4[3];
  unint64_t v6 = v4[1];
  if (v5 != v6 && !*(void *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    uint64_t v4 = (void *)a1[1];
    unint64_t v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    uint64_t v8 = v4[4];
    while (1)
    {
      uint64_t v9 = *(void **)(v8 + 8 * a2);
      if (v9) {
        break;
      }
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        uint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(void *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1C5F2708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)*((void *)*a1 + 4);
  if (v3) {
    goto LABEL_2;
  }
  uint64_t v18 = 0;
  uint64_t v4 = (uint64_t)a1[1];
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    uint64_t v2 = *a1;
    uint64_t v4 = (uint64_t)a1[1];
  }
  uint64_t v6 = (unint64_t)a1[2] & (*(void *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v6;
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(void *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v2) {
    goto LABEL_13;
  }
  if (v8 && v8 != *(void *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 32);
      if (!v8) {
        break;
      }
      if ((unsigned __int8 *)v8 == v2) {
        goto LABEL_13;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v20, v4, v2, (uint64_t *)&v18);
  uint64_t v6 = v20[0].__r_.__value_.__r.__words[2];
  a1[2] = (unsigned __int8 *)v20[0].__r_.__value_.__r.__words[2];
  uint64_t v9 = *((void *)a1[1] + 4);
  uint64_t v10 = *(void *)(v9 + 8 * v6);
  if (!v10 || v10 != *(void *)(v9 + 8 * (v6 ^ 1)))
  {
LABEL_13:
    unint64_t v11 = v6 + 1;
LABEL_14:
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v11);
    return a1;
  }
  if (v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
    uint64_t v13 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (bucket_index_ & 1) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    uint64_t v6 = (uint64_t)a1[2];
    uint64_t v10 = *(void *)(*((void *)a1[1] + 4) + 8 * v6);
  }
  uint64_t v14 = (uint64_t)v18;
  uint64_t v15 = (void *)v18[1];
  if (v15)
  {
    do
    {
      uint64_t v16 = v15;
      uint64_t v15 = (void *)*v15;
    }
    while (v15);
  }
  else
  {
    do
    {
      uint64_t v16 = *(void **)(v14 + 16);
      BOOL v17 = *v16 == v14;
      uint64_t v14 = (uint64_t)v16;
    }
    while (!v17);
  }
  uint64_t v18 = v16;
  if (v16 == (void *)(v10 + 8))
  {
    unint64_t v11 = v6 + 2;
    goto LABEL_14;
  }
  uint64_t v3 = (unsigned __int8 *)v16[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void sub_1C5F27260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(void *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = v4[3];
  unint64_t v6 = v4[1];
  if (v5 != v6 && !*(void *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    uint64_t v4 = (void *)a1[1];
    unint64_t v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    uint64_t v8 = v4[4];
    while (1)
    {
      uint64_t v9 = *(void **)(v8 + 8 * a2);
      if (v9) {
        break;
      }
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        unint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(void *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1C5F273B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(void *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a2, a3);
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(void *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, (unsigned __int8 *)v11, a3);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 32);
        if (!v11) {
          goto LABEL_10;
        }
      }
      *a1 = v11;
      goto LABEL_12;
    }
    unint64_t v9 = result & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = *(void *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, a3);
    if (v12 + 8 != result)
    {
      if (a4) {
        *a4 = result;
      }
      *a1 = *(void *)(result + 32);
LABEL_12:
      a1[1] = a2;
      a1[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  a1[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, unsigned char *a2)
{
  if ((char)a2[23] >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = *(unsigned char **)a2;
  }
  char v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v4 = 5 * v4 + v3;
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return (*(void *)(a1 + 8) - 1) & (*(void *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)(v3 + 32), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, *(void **)(v5 + 32))) {
    return v2;
  }
  return v5;
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

siri::dialogengine::PatternSchema *std::unique_ptr<siri::dialogengine::PatternSchema>::reset[abi:ne180100](siri::dialogengine::PatternSchema **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::PatternSchema::~PatternSchema(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void siri::dialogengine::PatternSchema::~PatternSchema(siri::dialogengine::PatternSchema *this)
{
  uint64_t v2 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 22));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 19));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 16));
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

siri::dialogengine::PatternSchema *std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(siri::dialogengine::PatternSchema **)(a1 + 24);
  if (result)
  {
    siri::dialogengine::PatternSchema::~PatternSchema(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ParsePatternSchemaYAML(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_1F211F930;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((void *)v5 + 17) = 0;
  *((void *)v5 + 18) = v5 + 152;
  *((_OWORD *)v5 + 11) = 0u;
  *((void *)v5 + 21) = v5 + 176;
  *(_OWORD *)(v5 + 200) = 0u;
  *((void *)v5 + 24) = v5 + 200;
  *(_OWORD *)(v5 + 216) = 0u;
  *((void *)v5 + 29) = 0;
  BOOL v6 = (std::string *)v5;
  std::string::operator=((std::string *)v5 + 1, a3);
  std::string::operator=(v6 + 2, a2);
  YAML::LoadFile();
}

void sub_1C5F292D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v68);
  YAML::Node::~Node((YAML::Node *)&a45);
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  YAML::detail::iterator_value::~iterator_value((YAML::detail::iterator_value *)&STACK[0x2E0]);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (STACK[0x2D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D8]);
  }
  if (a2 == 1)
  {
    unsigned int v71 = __cxa_begin_catch(a1);
    std::operator+<char>();
    unint64_t v72 = std::string::append((std::string *)&STACK[0x270], " \"");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    STACK[0x2A0] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x290] = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    unint64_t v76 = (const std::string::value_type *)v71[4];
    unint64_t v75 = (char *)(v71 + 4);
    long long v74 = v76;
    int v77 = v75[23];
    if (v77 >= 0) {
      uint64_t v78 = v75;
    }
    else {
      uint64_t v78 = v74;
    }
    if (v77 >= 0) {
      std::string::size_type v79 = v75[23];
    }
    else {
      std::string::size_type v79 = *((void *)v75 + 1);
    }
    char v80 = std::string::append((std::string *)&STACK[0x290], v78, v79);
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    a68 = v80->__r_.__value_.__r.__words[2];
    a67 = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append((std::string *)&a67, "\"");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    STACK[0x2C0] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x2B0] = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SchemaError(a36, (long long *)&STACK[0x2B0]);
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      operator delete((void *)STACK[0x2B0]);
    }
    if (SHIBYTE(a68) < 0) {
      operator delete((void *)a67);
    }
    if (SLOBYTE(STACK[0x2A7]) < 0) {
      operator delete((void *)STACK[0x290]);
    }
    if (SLOBYTE(STACK[0x287]) < 0) {
      operator delete((void *)STACK[0x270]);
    }
  }
  else
  {
    if (a2 != 2)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](a35);
      YAML::Node::~Node((YAML::Node *)&STACK[0x3F8]);
      _Unwind_Resume(a1);
    }
    uint64_t v84 = __cxa_begin_catch(a1);
    std::operator+<char>();
    v85 = std::string::append((std::string *)&STACK[0x270], " \"");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    STACK[0x2A0] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x290] = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v84 + 16))(v84);
    std::string::size_type v88 = std::string::append((std::string *)&STACK[0x290], v87);
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    a68 = v88->__r_.__value_.__r.__words[2];
    a67 = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    long long v90 = std::string::append((std::string *)&a67, "\"");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    STACK[0x2C0] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x2B0] = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SchemaError(a36, (long long *)&STACK[0x2B0]);
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      operator delete((void *)STACK[0x2B0]);
    }
    if (SHIBYTE(a68) < 0) {
      operator delete((void *)a67);
    }
    if (SLOBYTE(STACK[0x2A7]) < 0) {
      operator delete((void *)STACK[0x290]);
    }
    if (SLOBYTE(STACK[0x287]) < 0) {
      operator delete((void *)STACK[0x270]);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C5F28FE4);
}

void sub_1C5F29B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C5F295E4);
}

void sub_1C5F29BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C5F295E4);
}

uint64_t YAML::Node::operator=(uint64_t a1, YAML::Node *this)
{
  if (*(unsigned char *)a1) {
    BOOL v3 = *(unsigned char *)this == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string v17 = *(std::string *)(a1 + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v17);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (!v5 || (BOOL v6 = (void *)*((void *)this + 6)) == 0 || *v5 != *v6)
  {
    YAML::Node::EnsureNodeExists((uint64_t)this);
    uint64_t v7 = *(void **)(a1 + 48);
    uint64_t v8 = (void *)*((void *)this + 6);
    if (v7)
    {
      unint64_t v9 = (unsigned char **)*v8;
      if (**(unsigned char **)*v8)
      {
        YAML::detail::node::mark_defined(*(YAML::detail::node **)(a1 + 48));
        unint64_t v9 = (unsigned char **)*v8;
      }
      uint64_t v10 = v8[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (std::__shared_weak_count *)v7[1];
      *uint64_t v7 = v9;
      v7[1] = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      YAML::detail::memory_holder::merge(*(void *)(a1 + 32), *((void *)this + 4));
      *(void *)(a1 + 48) = *((void *)this + 6);
    }
    else
    {
      *(void *)(a1 + 48) = v8;
      uint64_t v13 = *((void *)this + 4);
      uint64_t v12 = *((void *)this + 5);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 40);
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  return a1;
}

void sub_1C5F29E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::Node::~Node(YAML::Node *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void siri::dialogengine::SchemaError(uint64_t *a1, long long *a2)
{
  if (a1) {
    siri::dialogengine::Context::AddSchemaError(a1, a2);
  }
  else {
    siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 3u);
  }
}

void YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 2)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 16);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      uint64_t v24 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 40);
      v19[0] = 1;
      uint64_t v25 = v7;
      if (v10)
      {
        char v11 = 0;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = v9;
        std::string v17 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
        v12[0] = 1;
        uint64_t v18 = v6;
        YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v19, (const YAML::Node *)v12);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if ((v11 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      v19[0] = 1;
      uint64_t v24 = 0;
      uint64_t v25 = v7;
    }
    uint64_t v10 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v9;
    char v11 = 1;
    std::string v17 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)a2 != 1 || (uint64_t v2 = **(void **)(a2 + 8)) == 0)
  {
LABEL_11:
    *(unsigned char *)a1 = 1;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(unsigned char *)(a1 + 56) = 1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(unsigned char *)(a1 + 112) = 1;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    return;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    uint64_t v24 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    uint64_t v24 = 0;
  }
  v19[0] = 1;
  uint64_t v25 = v2;
  YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v19);
LABEL_23:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5F2A0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  char v19 = v18;
  YAML::Node::~Node((YAML::Node *)&a9);
  if ((v19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  YAML::Node::~Node((YAML::Node *)&a16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void *YAML::InvalidNode::InvalidNode(void *a1, uint64_t a2)
{
  uint64_t v14 = -1;
  int v15 = -1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"invalid node; first invalid key: \"",
           34);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
    std::stringbuf::str();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "invalid node; this may result from using a map iterator as a sequence iterator, or vice-versa");
  }
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v19);
  YAML::Exception::Exception((uint64_t)a1, &v14, (long long *)v12);
  *a1 = &unk_1F2125CE8;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *a1 = &unk_1F2125CC0;
  return a1;
}

void sub_1C5F2A330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::as_if<std::string,void>::operator()(std::string *a1, YAML::Node **a2)
{
  if (YAML::Node::Type(*a2) != 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    uint64_t v10 = YAML::Node::Mark(*a2);
    int v11 = v9;
    YAML::BadConversion::BadConversion(exception, &v10);
    void *exception = &unk_1F2125EC0;
  }
  uint64_t v4 = YAML::Node::Scalar(*a2);
  if (*((char *)v4 + 23) < 0)
  {
    int v6 = (const std::string::value_type *)*v4;
    std::string::size_type v7 = v4[1];
    std::string::__init_copy_ctor_external(a1, v6, v7);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    a1->__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5F2A444(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<std::string>(uint64_t a1, YAML::Node *this, uint64_t a3)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v13 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v13);
  }
  YAML::Node::EnsureNodeExists((uint64_t)this);
  std::string::size_type v7 = (std::__shared_weak_count *)*((void *)this + 5);
  int v6 = (YAML::detail::node *)*((void *)this + 6);
  uint64_t v8 = *((void *)this + 4);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = YAML::detail::node::get<std::string>(v6, a3, v8, v7);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v11 = *((void *)this + 4);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
}

void sub_1C5F2A588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseParameterOrSettingDataYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  *((void *)this + 16) = 0;
  uint64_t v42 = (void **)((char *)this + 128);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  YAML::Node::as<std::string>((std::string *)v45, (uint64_t)a2 + 56);
  int v4 = *((unsigned __int8 *)a2 + 112);
  *(_OWORD *)this = *(_OWORD *)v45;
  *((void *)this + 2) = v46;
  if (v4)
  {
    long long v5 = (uint64_t **)*((void *)a2 + 20);
    if (v5)
    {
      YAML::detail::node_data::begin(**v5, (uint64_t)v45);
      uint64_t v7 = *((void *)a2 + 18);
      int v6 = (std::__shared_weak_count *)*((void *)a2 + 19);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)char v54 = *(_OWORD *)v45;
        *(_OWORD *)&v54[16] = v46;
        *(void *)&v54[32] = v7;
        v55 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        if (!*((unsigned char *)a2 + 112))
        {
LABEL_13:
          uint64_t v8 = 0;
          int v9 = 0;
          int v41 = 0;
          int v10 = 0;
          goto LABEL_15;
        }
LABEL_10:
        uint64_t v11 = (uint64_t **)*((void *)a2 + 20);
        if (v11)
        {
          YAML::detail::node_data::end(**v11, (uint64_t)v45);
          uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 19);
          if (v12)
          {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            int v10 = (int)v45[0];
            uint64_t v8 = v45[1];
            int v9 = (void *)v46;
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            int v41 = v12;
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          else
          {
            int v41 = 0;
            int v10 = (int)v45[0];
            uint64_t v8 = v45[1];
            int v9 = (void *)v46;
          }
          goto LABEL_15;
        }
        goto LABEL_13;
      }
      *(_OWORD *)char v54 = *(_OWORD *)v45;
      *(_OWORD *)&v54[16] = v46;
      *(void *)&v54[32] = v7;
    }
    else
    {
      *(_DWORD *)char v54 = 0;
      memset(&v54[8], 0, 32);
    }
    v55 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  int v41 = 0;
  int v10 = 0;
  *(_DWORD *)char v54 = 0;
  memset(&v54[8], 0, 32);
  v55 = 0;
LABEL_15:
  std::string v13 = (void **)((char *)this + 48);
  uint64_t v14 = (void **)((char *)this + 24);
  while (1)
  {
    if (*(_DWORD *)v54 == v10)
    {
      int v15 = (void **)&v54[8];
      uint64_t v16 = v8;
      if (v10 != 1)
      {
        if (v10 != 2) {
          break;
        }
        int v15 = (void **)&v54[16];
        uint64_t v16 = v9;
      }
      if (*v15 == v16) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v45, (uint64_t)v54);
    if (!v48)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v56, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      else {
        std::string v56 = v49;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v56);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    YAML::as_if<std::string,void>::operator()(&v44, (YAML::Node **)&v56);
    if ((*((unsigned char *)&v44.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      std::string v17 = &v44;
      switch(*((unsigned char *)&v44.__r_.__value_.__s + 23))
      {
        case 4:
          int data = (int)v44.__r_.__value_.__l.__data_;
          goto LABEL_27;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_109;
        case 0xA:
          goto LABEL_97;
        case 0xB:
          if (v44.__r_.__value_.__r.__words[0] == 0x7470697263736564
            && *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 3) == 0x6E6F697470697263)
          {
            goto LABEL_83;
          }
          if (v44.__r_.__value_.__r.__words[0] != 0x616469727265766FLL
            || *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 3) != 0x656C626164697272)
          {
            goto LABEL_107;
          }
          goto LABEL_80;
        case 0xC:
          if (v44.__r_.__value_.__r.__words[0] != 0x56746C7561666564
            || LODWORD(v44.__r_.__value_.__r.__words[1]) != 1702194273)
          {
            goto LABEL_107;
          }
          goto LABEL_92;
        default:
          if (&v44 != 23) {
            goto LABEL_109;
          }
          if (v44.__r_.__value_.__r.__words[0] != 0x56746C7561666564
            || v44.__r_.__value_.__l.__size_ != 0x6D6F724665756C61
            || *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 7) != 0x676E69747465536DLL)
          {
            goto LABEL_107;
          }
          goto LABEL_67;
      }
    }
    switch(v44.__r_.__value_.__l.__size_)
    {
      case 4uLL:
        int data = *(_DWORD *)v44.__r_.__value_.__l.__data_;
LABEL_27:
        if (data == 1701869940)
        {
          if (!v51)
          {
            unsigned int v35 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
            }
            else {
              std::string v56 = v52;
            }
            YAML::InvalidNode::InvalidNode(v35, (uint64_t)&v56);
          }
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
          if (*((char *)this + 47) < 0) {
            operator delete(*v14);
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)this + 5) = *((void *)&__p.__r_.__value_.__l + 2);
        }
        goto LABEL_107;
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
        goto LABEL_108;
      case 0xAuLL:
        std::string v17 = (std::string *)v44.__r_.__value_.__r.__words[0];
LABEL_97:
        std::string::size_type v31 = v17->__r_.__value_.__r.__words[0];
        int v32 = LOWORD(v17->__r_.__value_.__r.__words[1]);
        if (v31 != 0x7461636572706564 || v32 != 25701) {
          goto LABEL_107;
        }
        if (!v51)
        {
          unsigned __int8 v38 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          }
          else {
            std::string v56 = v52;
          }
          YAML::InvalidNode::InvalidNode(v38, (uint64_t)&v56);
        }
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
        if (*((char *)this + 151) < 0) {
          operator delete(*v42);
        }
        long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        long long v27 = v42;
        goto LABEL_106;
      case 0xBuLL:
        if (*(void *)v44.__r_.__value_.__l.__data_ == 0x7470697263736564
          && *(void *)(v44.__r_.__value_.__r.__words[0] + 3) == 0x6E6F697470697263)
        {
LABEL_83:
          if (!v51)
          {
            int v37 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
            }
            else {
              std::string v56 = v52;
            }
            YAML::InvalidNode::InvalidNode(v37, (uint64_t)&v56);
          }
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
          if (*((char *)this + 71) < 0) {
            operator delete(*v13);
          }
          *(_OWORD *)std::string v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)this + 8) = *((void *)&__p.__r_.__value_.__l + 2);
        }
        else if (*(void *)v44.__r_.__value_.__l.__data_ == 0x616469727265766FLL {
               && *(void *)(v44.__r_.__value_.__r.__words[0] + 3) == 0x656C626164697272)
        }
        {
LABEL_80:
          if (!v51)
          {
            unsigned __int8 v40 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
            }
            else {
              std::string v56 = v52;
            }
            YAML::InvalidNode::InvalidNode(v40, (uint64_t)&v56);
          }
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
          *((unsigned char *)this + 120) = siri::dialogengine::StringToBool(&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_107;
      case 0xCuLL:
        if (*(void *)v44.__r_.__value_.__l.__data_ != 0x56746C7561666564
          || *(_DWORD *)(v44.__r_.__value_.__r.__words[0] + 8) != 1702194273)
        {
          goto LABEL_107;
        }
LABEL_92:
        if (!v51)
        {
          unsigned __int8 v36 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          }
          else {
            std::string v56 = v52;
          }
          YAML::InvalidNode::InvalidNode(v36, (uint64_t)&v56);
        }
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
        if (*((char *)this + 95) < 0) {
          operator delete(*((void **)this + 9));
        }
        long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        long long v27 = (void **)((char *)this + 72);
        goto LABEL_106;
      default:
        if (v44.__r_.__value_.__l.__size_ != 23) {
          goto LABEL_108;
        }
        if (*(void *)v44.__r_.__value_.__l.__data_ != 0x56746C7561666564
          || *(void *)(v44.__r_.__value_.__r.__words[0] + 8) != 0x6D6F724665756C61
          || *(void *)(v44.__r_.__value_.__r.__words[0] + 15) != 0x676E69747465536DLL)
        {
          goto LABEL_107;
        }
LABEL_67:
        if (!v51)
        {
          uint64_t v39 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          }
          else {
            std::string v56 = v52;
          }
          YAML::InvalidNode::InvalidNode(v39, (uint64_t)&v56);
        }
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v56);
        if (*((char *)this + 119) < 0) {
          operator delete(*((void **)this + 12));
        }
        long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        long long v27 = (void **)((char *)this + 96);
LABEL_106:
        *(_OWORD *)long long v27 = v26;
        std::string v27[2] = (void *)__p.__r_.__value_.__r.__words[2];
LABEL_107:
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
LABEL_108:
        }
          operator delete(v44.__r_.__value_.__l.__data_);
LABEL_109:
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(v45[1]);
        }
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v54);
        break;
    }
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
}

void sub_1C5F2AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  __cxa_free_exception(v29);
  if (a27 < 0) {
    operator delete(__p);
  }
  YAML::detail::iterator_value::~iterator_value((YAML::detail::iterator_value *)&a28);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::string::size_type v31 = *(std::__shared_weak_count **)(v30 - 136);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(v28);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(void **this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t YAML::detail::node_iterator_base<YAML::detail::node>::operator++(uint64_t result)
{
  if (*(_DWORD *)result == 2)
  {
    uint64_t v1 = *(unsigned char *****)(result + 24);
    uint64_t v2 = (unsigned char ****)(*(void *)(result + 16) + 16);
    if (v1 != v2)
    {
      while (!****v2 || !***v2[1])
      {
        v2 += 2;
        if (v2 == v1)
        {
          uint64_t v2 = *(unsigned char *****)(result + 24);
          break;
        }
      }
    }
    *(void *)(result + 16) = v2;
  }
  else if (*(_DWORD *)result == 1)
  {
    *(void *)(result + 8) += 8;
  }
  return result;
}

void YAML::detail::iterator_value::~iterator_value(YAML::detail::iterator_value *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void siri::dialogengine::ParsePatternParameterYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  siri::dialogengine::ParseParameterOrSettingDataYAML((siri::dialogengine *)&v6, a2);
  std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v6.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_18;
  }
  std::string::size_type v4 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v4 = v7.__r_.__value_.__l.__size_;
  }
  if (v4)
  {
    long long v5 = (char *)operator new(0x168uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)long long v5 = &unk_1F2122138;
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    std::string::basic_string[abi:ne180100]<0>(&v15, "");
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::Parameter::Parameter((uint64_t)(v5 + 24), &v6, &v7, &v8, &v17, &v16, &v15, &v14, &__p, 1, 0, 0, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    *(void *)this = v5 + 24;
    *((void *)this + 1) = v5;
    std::string::operator=((std::string *)(v5 + 232), &v9);
    std::string::operator=((std::string *)(v5 + 152), &v12);
  }
  else
  {
LABEL_18:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F2B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  if (*(char *)(v36 - 97) < 0) {
    operator delete(*(void **)(v36 - 120));
  }
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  if (*(char *)(v36 - 49) < 0) {
    operator delete(*(void **)(v36 - 72));
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(&a11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternGroupYAML(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::PatternSchema *a3, const YAML::detail::iterator_value *a4)
{
  long long v5 = (const YAML::detail::iterator_value *)((char *)a4 + 56);
  YAML::Node::as<std::string>(&__str, (uint64_t)a4 + 56);
  YAML::Node::Mark(v5);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine26PatternSchemaConcreteGroupENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::PatternSchemaConcreteGroup **)&v274);
  std::string::operator=((std::string *)(v274 + 8), &__str);
  v272[1] = 0;
  v272[0] = 0;
  uint64_t v273 = 0;
  if (*((unsigned char *)a4 + 112))
  {
    std::string v6 = (uint64_t **)*((void *)a4 + 20);
    if (v6)
    {
      YAML::detail::node_data::begin(**v6, (uint64_t)__p);
      uint64_t v8 = *((void *)a4 + 18);
      std::string v7 = (std::__shared_weak_count *)*((void *)a4 + 19);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)v270 = *(_OWORD *)__p;
        *(_OWORD *)&v270[16] = *(_OWORD *)&__p[16];
        *(void *)&v270[32] = v8;
        v271 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (!*((unsigned char *)a4 + 112))
        {
LABEL_13:
          v201 = 0;
          int v210 = 0;
          uint64_t v206 = 0;
          uint64_t v208 = 0;
          goto LABEL_15;
        }
LABEL_10:
        std::string v9 = (uint64_t **)*((void *)a4 + 20);
        if (v9)
        {
          YAML::detail::node_data::end(**v9, (uint64_t)__p);
          int v10 = (std::__shared_weak_count *)*((void *)a4 + 19);
          if (v10)
          {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            int v210 = *(_DWORD *)__p;
            uint64_t v208 = *(void *)&__p[8];
            uint64_t v206 = *(void *)&__p[16];
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            v201 = v10;
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          else
          {
            v201 = 0;
            int v210 = *(_DWORD *)__p;
            uint64_t v208 = *(void *)&__p[8];
            uint64_t v206 = *(void *)&__p[16];
          }
          goto LABEL_15;
        }
        goto LABEL_13;
      }
      *(_OWORD *)v270 = *(_OWORD *)__p;
      *(_OWORD *)&v270[16] = *(_OWORD *)&__p[16];
      *(void *)&v270[32] = v8;
    }
    else
    {
      *(_DWORD *)v270 = 0;
      memset(&v270[8], 0, 32);
    }
    v271 = 0;
    goto LABEL_10;
  }
  v201 = 0;
  int v210 = 0;
  uint64_t v206 = 0;
  uint64_t v208 = 0;
  *(_DWORD *)v270 = 0;
  memset(&v270[8], 0, 32);
  v271 = 0;
LABEL_15:
  unint64_t v11 = 0;
  uint64_t v202 = *MEMORY[0x1E4FBA408];
  uint64_t v203 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v204 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  while (1)
  {
    if (*(_DWORD *)v270 == v210)
    {
      std::string v12 = &v270[8];
      uint64_t v13 = v208;
      if (v210 != 1)
      {
        if (v210 != 2) {
          break;
        }
        std::string v12 = &v270[16];
        uint64_t v13 = v206;
      }
      if (*(void *)v12 == v13) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v256 + 8, (uint64_t)v270);
    if (!v260)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v262) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v261, *((std::string::size_type *)&v261 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = v261;
        *(void *)&__p[16] = v262;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)__p);
    }
    *(void *)std::string __p = &v260;
    YAML::as_if<std::string,void>::operator()((std::string *)&v255, (YAML::Node **)__p);
    unint64_t v211 = v11 + 1;
    if ((BYTE7(v256) & 0x80) == 0)
    {
      std::string v14 = (int *)&v255;
      switch(BYTE7(v256))
      {
        case 5:
          if (v255 != 1734439797 || BYTE4(v255) != 101) {
            goto LABEL_168;
          }
          goto LABEL_36;
        case 6:
        case 8:
        case 9:
        case 0xC:
        case 0xD:
          goto LABEL_168;
        case 7:
          goto LABEL_138;
        case 0xA:
          if ((void)v255 != 0x7461636572706564 || WORD4(v255) != 25701) {
            goto LABEL_168;
          }
          goto LABEL_128;
        case 0xB:
          if ((void)v255 != 0x7470697263736564 || *(void *)((char *)&v255 + 3) != 0x6E6F697470697263) {
            goto LABEL_168;
          }
          goto LABEL_135;
        case 0xE:
          if ((void)v255 != 0x615064657473656ELL || *(void *)((char *)&v255 + 6) != 0x736E726574746150) {
            goto LABEL_168;
          }
          goto LABEL_159;
        case 0xF:
          if ((void)v255 != 0x6D6563616C706572 || *(void *)((char *)&v255 + 7) != 0x656D614E746E656DLL) {
            goto LABEL_168;
          }
          goto LABEL_175;
        case 0x10:
          if (((void)v255 != 0x6F43676F6C616964 || *((void *)&v255 + 1) != 0x73746E656E6F706DLL)
            && ((void)v255 != 0x6F436C6175736976 || *((void *)&v255 + 1) != 0x73746E656E6F706DLL))
          {
            goto LABEL_168;
          }
          goto LABEL_118;
        default:
          if (&v255 != 27) {
            goto LABEL_168;
          }
          BOOL v18 = (void)v255 == 0x6F436C6175736976 && *((void *)&v255 + 1) == 0x73746E656E6F706DLL;
          BOOL v19 = v18 && (void)v256 == 0x74616E69626D6F43;
          if (!v19 || *(void *)((char *)&v256 + 3) != 0x6E6F6974616E6962) {
            goto LABEL_168;
          }
          goto LABEL_98;
      }
    }
    switch(*((void *)&v255 + 1))
    {
      case 5:
        if (*(_DWORD *)v255 != 1734439797 || *(unsigned char *)(v255 + 4) != 101) {
          goto LABEL_168;
        }
LABEL_36:
        uint64_t v17 = v274;
        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)__p, (const YAML::detail::iterator_value *)((char *)&v256 + 8));
        if ((unsigned char *)(v17 + 56) != __p) {
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)(v17 + 56), *(uint64_t **)__p, *(uint64_t **)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 4);
        }
        *(void *)v279 = __p;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
        goto LABEL_596;
      case 6:
      case 8:
      case 9:
      case 0xCLL:
      case 0xDLL:
        goto LABEL_168;
      case 7:
        std::string v14 = (int *)v255;
LABEL_138:
        int v44 = *v14;
        int v45 = *(int *)((char *)v14 + 3);
        if (v44 != 1634298977 || v45 != 1716482913) {
          goto LABEL_168;
        }
        long long v47 = (void *)HIBYTE(v273);
        if (v273 < 0) {
          long long v47 = v272[1];
        }
        if (v47)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          char v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Multiple \"aliasOf\" entries in group \"", 37);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          char v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_str, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" (line ", 8);
          std::string v52 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"). Only the last one is used.", 29);
          std::stringbuf::str();
          if (a2) {
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)v279);
          }
          else {
            siri::dialogengine::Log::LogWithLevel((uint64_t)v279, 3u);
          }
          if ((v279[23] & 0x80000000) != 0) {
            operator delete(*(void **)v279);
          }
          *(void *)std::string __p = v202;
          *(void *)&__p[*(void *)(v202 - 24)] = v203;
          *(void *)&__p[16] = v204;
          *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
          if (v248 < 0) {
            operator delete(v246);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C8796CC0]((char *)&v250 + 8);
          unint64_t v211 = v11;
        }
        if (!v264[0])
        {
          v195 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v266) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v265, *((std::string::size_type *)&v265 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = v265;
            *(void *)&__p[16] = v266;
          }
          YAML::InvalidNode::InvalidNode(v195, (uint64_t)__p);
        }
        *(void *)std::string __p = v264;
        YAML::as_if<std::string,void>::operator()((std::string *)v279, (YAML::Node **)__p);
        if (SHIBYTE(v273) < 0) {
          operator delete(v272[0]);
        }
        *(_OWORD *)v272 = *(_OWORD *)v279;
        uint64_t v273 = *(void *)&v279[16];
        if (!v260)
        {
          v196 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v262) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v261, *((std::string::size_type *)&v261 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = v261;
            *(void *)&__p[16] = v262;
          }
          YAML::InvalidNode::InvalidNode(v196, (uint64_t)__p);
        }
        goto LABEL_596;
      case 0xALL:
        if (*(void *)v255 != 0x7461636572706564 || *(_WORD *)(v255 + 8) != 25701) {
          goto LABEL_168;
        }
LABEL_128:
        if (!v264[0])
        {
          v194 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v266) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v265, *((std::string::size_type *)&v265 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = v265;
            *(void *)&__p[16] = v266;
          }
          YAML::InvalidNode::InvalidNode(v194, (uint64_t)__p);
        }
        int v41 = (std::string *)v274;
        *(void *)std::string __p = v264;
        YAML::as_if<std::string,void>::operator()((std::string *)v279, (YAML::Node **)__p);
        std::string::operator=(v41 + 7, (const std::string *)v279);
        goto LABEL_173;
      case 0xBLL:
        if (*(void *)v255 != 0x7470697263736564 || *(void *)(v255 + 3) != 0x6E6F697470697263) {
          goto LABEL_168;
        }
LABEL_135:
        if (!v264[0])
        {
          v193 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v266) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v265, *((std::string::size_type *)&v265 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = v265;
            *(void *)&__p[16] = v266;
          }
          YAML::InvalidNode::InvalidNode(v193, (uint64_t)__p);
        }
        uint64_t v43 = v274;
        *(void *)std::string __p = v264;
        YAML::as_if<std::string,void>::operator()((std::string *)v279, (YAML::Node **)__p);
        std::string::operator=((std::string *)(v43 + 32), (const std::string *)v279);
        goto LABEL_173;
      case 0xELL:
        if (*(void *)v255 != 0x615064657473656ELL || *(void *)(v255 + 6) != 0x736E726574746150) {
          goto LABEL_168;
        }
LABEL_159:
        if (!v264[0])
        {
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          v222 = 0;
          int v62 = 0;
          *(_DWORD *)v279 = 0;
          memset(&v279[8], 0, 32);
          v280 = 0;
          goto LABEL_570;
        }
        if (v269)
        {
          YAML::detail::node_data::begin(**v269, (uint64_t)__p);
          uint64_t v54 = v267;
          v55 = v268;
          if (v268)
          {
            atomic_fetch_add_explicit(&v268->__shared_owners_, 1uLL, memory_order_relaxed);
            *(_OWORD *)v279 = *(_OWORD *)__p;
            *(_OWORD *)&v279[16] = *(_OWORD *)&__p[16];
            *(void *)&v279[32] = v54;
            v280 = v55;
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            if (!v264[0]) {
              goto LABEL_568;
            }
          }
          else
          {
            *(_OWORD *)v279 = *(_OWORD *)__p;
            *(_OWORD *)&v279[16] = *(_OWORD *)&__p[16];
            *(void *)&v279[32] = v267;
            v280 = 0;
          }
        }
        else
        {
          *(_DWORD *)v279 = 0;
          memset(&v279[8], 0, 32);
          v280 = 0;
        }
        if (!v269)
        {
LABEL_568:
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          v222 = 0;
          int v62 = 0;
          goto LABEL_570;
        }
        YAML::detail::node_data::end(**v269, (uint64_t)__p);
        v147 = v268;
        if (v268)
        {
          atomic_fetch_add_explicit(&v268->__shared_owners_, 1uLL, memory_order_relaxed);
          int v62 = *(_DWORD *)__p;
          uint64_t v60 = *(void *)&__p[8];
          uint64_t v61 = *(void *)&__p[16];
          atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
          v222 = v147;
          std::__shared_weak_count::__release_shared[abi:ne180100](v147);
        }
        else
        {
          v222 = 0;
          int v62 = *(_DWORD *)__p;
          uint64_t v60 = *(void *)&__p[8];
          uint64_t v61 = *(void *)&__p[16];
        }
LABEL_570:
        v148 = (uint64_t *)v274;
        while (1)
        {
          if (*(_DWORD *)v279 == v62)
          {
            v149 = &v279[8];
            uint64_t v150 = v60;
            if (v62 != 1)
            {
              if (v62 != 2) {
                break;
              }
              v149 = &v279[16];
              uint64_t v150 = v61;
            }
            if (*(void *)v149 == v150) {
              break;
            }
          }
          YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v279);
          if (!__p[0])
          {
            v189 = __cxa_allocate_exception(0x38uLL);
            if ((__p[31] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
            }
            else {
              std::string v225 = *(std::string *)&__p[8];
            }
            YAML::InvalidNode::InvalidNode(v189, (uint64_t)&v225);
          }
          v225.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          YAML::as_if<std::string,void>::operator()((std::string *)v292, (YAML::Node **)&v225);
          siri::dialogengine::PatternSchemaConcreteGroup::AddNestedPattern(v148, (long long *)v292);
          if ((v292[23] & 0x80000000) != 0) {
            operator delete(*(void **)v292);
          }
          if (v253) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v253);
          }
          if (SHIBYTE(v251) < 0) {
            operator delete((void *)v250);
          }
          if (v247) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v247);
          }
          if (SHIBYTE(v245) < 0) {
            operator delete((void *)v244);
          }
          if ((void)v242) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v242);
          }
          if ((__p[31] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[8]);
          }
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v279);
        }
        if (v222) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v222);
        }
        v138 = v280;
        if (v280) {
          goto LABEL_595;
        }
        goto LABEL_596;
      case 0xFLL:
        if (*(void *)v255 != 0x6D6563616C706572 || *(void *)(v255 + 7) != 0x656D614E746E656DLL) {
          goto LABEL_168;
        }
LABEL_175:
        if (!v264[0])
        {
          v192 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v266) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v265, *((std::string::size_type *)&v265 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = v265;
            *(void *)&__p[16] = v266;
          }
          YAML::InvalidNode::InvalidNode(v192, (uint64_t)__p);
        }
        unint64_t v59 = (std::string *)v274;
        *(void *)std::string __p = v264;
        YAML::as_if<std::string,void>::operator()((std::string *)v279, (YAML::Node **)__p);
        std::string::operator=(v59 + 8, (const std::string *)v279);
        goto LABEL_173;
      case 0x10:
        if ((*(void *)v255 != 0x6F43676F6C616964 || *(void *)(v255 + 8) != 0x73746E656E6F706DLL)
          && (*(void *)v255 != 0x6F436C6175736976 || *(void *)(v255 + 8) != 0x73746E656E6F706DLL))
        {
          goto LABEL_168;
        }
LABEL_118:
        if (!v264[0])
        {
          uint64_t v209 = 0;
          uint64_t v207 = 0;
          v205 = 0;
          int v212 = 0;
          *(_DWORD *)v238 = 0;
          memset(&v238[8], 0, 32);
          v239 = 0;
          goto LABEL_198;
        }
        if (v269)
        {
          YAML::detail::node_data::begin(**v269, (uint64_t)__p);
          uint64_t v38 = v267;
          uint64_t v39 = v268;
          if (v268)
          {
            atomic_fetch_add_explicit(&v268->__shared_owners_, 1uLL, memory_order_relaxed);
            *(_OWORD *)v238 = *(_OWORD *)__p;
            *(_OWORD *)&v238[16] = *(_OWORD *)&__p[16];
            *(void *)&v238[32] = v38;
            v239 = v39;
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            if (!v264[0]) {
              goto LABEL_184;
            }
          }
          else
          {
            *(_OWORD *)v238 = *(_OWORD *)__p;
            *(_OWORD *)&v238[16] = *(_OWORD *)&__p[16];
            *(void *)&v238[32] = v267;
            v239 = 0;
          }
        }
        else
        {
          *(_DWORD *)v238 = 0;
          memset(&v238[8], 0, 32);
          v239 = 0;
        }
        if (!v269)
        {
LABEL_184:
          uint64_t v209 = 0;
          uint64_t v207 = 0;
          v205 = 0;
          int v212 = 0;
          goto LABEL_198;
        }
        YAML::detail::node_data::end(**v269, (uint64_t)__p);
        char v63 = v268;
        if (v268)
        {
          atomic_fetch_add_explicit(&v268->__shared_owners_, 1uLL, memory_order_relaxed);
          int v212 = *(_DWORD *)__p;
          uint64_t v209 = *(void *)&__p[8];
          uint64_t v207 = *(void *)&__p[16];
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          v205 = v63;
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        else
        {
          v205 = 0;
          int v212 = *(_DWORD *)__p;
          uint64_t v209 = *(void *)&__p[8];
          uint64_t v207 = *(void *)&__p[16];
        }
LABEL_198:
        while (2)
        {
          if (*(_DWORD *)v238 != v212) {
            goto LABEL_203;
          }
          uint64_t v65 = v209;
          unint64_t v64 = &v238[8];
          if (v212 != 1)
          {
            if (v212 != 2) {
              break;
            }
            unint64_t v64 = &v238[16];
            uint64_t v65 = v207;
          }
          if (*(void *)v64 != v65)
          {
LABEL_203:
            YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v225, (uint64_t)v238);
            long long v66 = v274;
            if (*((void *)&v274 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v274 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if (!v228)
            {
              v190 = __cxa_allocate_exception(0x38uLL);
              if (SHIBYTE(v230) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v229, *((std::string::size_type *)&v229 + 1));
              }
              else
              {
                *(_OWORD *)std::string __p = v229;
                *(void *)&__p[16] = v230;
              }
              YAML::InvalidNode::InvalidNode(v190, (uint64_t)__p);
            }
            *(void *)std::string __p = &v228;
            YAML::as_if<std::string,void>::operator()((std::string *)v279, (YAML::Node **)__p);
            siri::dialogengine::ParseStringList((uint64_t *)v279, 0, (uint64_t *)&v294);
            if ((v279[23] & 0x80000000) != 0) {
              operator delete(*(void **)v279);
            }
            v216 = (std::string *)v294;
            v213 = v295;
            if (v294 == v295)
            {
LABEL_525:
              *(void *)std::string __p = &v294;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (*((void *)&v66 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
              }
              if (v236) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v236);
              }
              if (v234 < 0) {
                operator delete(v233);
              }
              if (v231) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v231);
              }
              if (SHIBYTE(v230) < 0) {
                operator delete((void *)v229);
              }
              if (v227) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v227);
              }
              if (v226 < 0) {
                operator delete((void *)v225.__r_.__value_.__l.__size_);
              }
              YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v238);
              continue;
            }
            while (2)
            {
              int v67 = (char *)operator new(0x140uLL);
              *((void *)v67 + 1) = 0;
              *((void *)v67 + 2) = 0;
              *(void *)int v67 = &unk_1F211F5D0;
              *(_OWORD *)(v67 + 24) = 0u;
              *(_OWORD *)(v67 + 40) = 0u;
              *(_OWORD *)(v67 + 56) = 0u;
              *(_OWORD *)(v67 + 72) = 0u;
              *(_OWORD *)(v67 + 88) = 0u;
              *(_OWORD *)(v67 + 104) = 0u;
              *(_OWORD *)(v67 + 120) = 0u;
              *(_OWORD *)(v67 + 136) = 0u;
              *(_OWORD *)(v67 + 152) = 0u;
              *(_OWORD *)(v67 + 168) = 0u;
              *(_OWORD *)(v67 + 184) = 0u;
              *(_OWORD *)(v67 + 200) = 0u;
              *(_OWORD *)(v67 + 216) = 0u;
              *(_OWORD *)(v67 + 232) = 0u;
              *(_OWORD *)(v67 + 248) = 0u;
              v220 = v67;
              *((void *)v67 + 39) = 0;
              *(_OWORD *)(v67 + 264) = 0u;
              *(_OWORD *)(v67 + 280) = 0u;
              *(_OWORD *)(v67 + 296) = 0u;
              v214 = v67 + 24;
              std::string::operator=((std::string *)v67 + 1, v216);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v295 - (char *)v294) >> 3) >= 2)
              {
                memset(__p, 0, 24);
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)__p, (long long *)((char *)v294 + 24), v295, 0xAAAAAAAAAAAAAAABLL * (((char *)v295 - ((char *)v294 + 24)) >> 3));
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v220 + 296), *(std::string **)__p, *(long long **)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3));
                *(void *)v279 = __p;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
              }
              if (!v232)
              {
                uint64_t v223 = 0;
                uint64_t v221 = 0;
                v215 = 0;
                int v70 = 0;
                *(_DWORD *)v292 = 0;
                memset(&v292[8], 0, 32);
                v293 = 0;
                goto LABEL_224;
              }
              if (v237)
              {
                YAML::detail::node_data::begin(**v237, (uint64_t)__p);
                uint64_t v68 = v235;
                unint64_t v69 = v236;
                if (v236)
                {
                  atomic_fetch_add_explicit(&v236->__shared_owners_, 1uLL, memory_order_relaxed);
                  *(_OWORD *)v292 = *(_OWORD *)__p;
                  *(_OWORD *)&v292[16] = *(_OWORD *)&__p[16];
                  *(void *)&v292[32] = v68;
                  v293 = v69;
                  atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v69);
                  if (!v232) {
                    goto LABEL_222;
                  }
                }
                else
                {
                  *(_OWORD *)v292 = *(_OWORD *)__p;
                  *(_OWORD *)&v292[16] = *(_OWORD *)&__p[16];
                  *(void *)&v292[32] = v235;
                  v293 = 0;
                }
              }
              else
              {
                *(_DWORD *)v292 = 0;
                memset(&v292[8], 0, 32);
                v293 = 0;
              }
              if (!v237)
              {
LABEL_222:
                uint64_t v223 = 0;
                uint64_t v221 = 0;
                v215 = 0;
                int v70 = 0;
                goto LABEL_224;
              }
              YAML::detail::node_data::end(**v237, (uint64_t)__p);
              unsigned int v71 = v236;
              if (v236)
              {
                atomic_fetch_add_explicit(&v236->__shared_owners_, 1uLL, memory_order_relaxed);
                int v70 = *(_DWORD *)__p;
                uint64_t v223 = *(void *)&__p[8];
                uint64_t v221 = *(void *)&__p[16];
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
                v215 = v71;
                std::__shared_weak_count::__release_shared[abi:ne180100](v71);
              }
              else
              {
                v215 = 0;
                int v70 = *(_DWORD *)__p;
                uint64_t v223 = *(void *)&__p[8];
                uint64_t v221 = *(void *)&__p[16];
              }
LABEL_224:
              if (*(_DWORD *)v292 != v70) {
                goto LABEL_229;
              }
              unint64_t v72 = &v292[8];
              uint64_t v73 = v223;
              if (v70 != 1)
              {
                if (v70 != 2) {
                  goto LABEL_508;
                }
                unint64_t v72 = &v292[16];
                uint64_t v73 = v221;
              }
              if (*(void *)v72 != v73)
              {
LABEL_229:
                YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v292);
                if (!v243)
                {
                  v181 = __cxa_allocate_exception(0x38uLL);
                  if (SHIBYTE(v245) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v279, (const std::string::value_type *)v244, *((std::string::size_type *)&v244 + 1));
                  }
                  else
                  {
                    *(_OWORD *)v279 = v244;
                    *(void *)&v279[16] = v245;
                  }
                  YAML::InvalidNode::InvalidNode(v181, (uint64_t)v279);
                }
                *(void *)v279 = &v243;
                YAML::as_if<std::string,void>::operator()(&v291, (YAML::Node **)v279);
                if ((*((unsigned char *)&v291.__r_.__value_.__s + 23) & 0x80) == 0)
                {
                  long long v74 = &v291;
                  switch(*((unsigned char *)&v291.__r_.__value_.__s + 23))
                  {
                    case 4:
                      int data = (int)v291.__r_.__value_.__l.__data_;
                      goto LABEL_235;
                    case 5:
                      if (LODWORD(v291.__r_.__value_.__l.__data_) != 1734439797
                        || v291.__r_.__value_.__s.__data_[4] != 101)
                      {
                        goto LABEL_318;
                      }
                      goto LABEL_286;
                    case 0xA:
                      goto LABEL_295;
                    case 0xD:
                      if (v291.__r_.__value_.__r.__words[0] != 0x6C754D776F6C6C61
                        || *(std::string::size_type *)((char *)v291.__r_.__value_.__r.__words + 5) != 0x656C7069746C754DLL)
                      {
                        goto LABEL_318;
                      }
                      goto LABEL_310;
                    case 0xE:
                      if (v291.__r_.__value_.__r.__words[0] != 0x56746C7561666564
                        || *(std::string::size_type *)((char *)v291.__r_.__value_.__r.__words + 6) != 0x746E616972615674)
                      {
                        goto LABEL_318;
                      }
                      goto LABEL_325;
                    case 0xF:
                      if (v291.__r_.__value_.__r.__words[0] != 0x566465776F6C6C61
                        || *(std::string::size_type *)((char *)v291.__r_.__value_.__r.__words + 7) != 0x73746E6169726156)
                      {
                        goto LABEL_318;
                      }
                      goto LABEL_276;
                    case 0x10:
                      if (v291.__r_.__value_.__r.__words[0] != 0x43746C7561666564
                        || v291.__r_.__value_.__l.__size_ != 0x746E656E6F706D6FLL)
                      {
                        goto LABEL_318;
                      }
                      goto LABEL_292;
                    default:
                      goto LABEL_318;
                  }
                }
                switch(v291.__r_.__value_.__l.__size_)
                {
                  case 4uLL:
                    int data = *(_DWORD *)v291.__r_.__value_.__l.__data_;
LABEL_235:
                    if (data != 1819047270) {
                      goto LABEL_318;
                    }
                    memset(&v290, 0, sizeof(v290));
                    if (!v249[0])
                    {
                      uint64_t v97 = 0;
                      uint64_t v98 = 0;
                      v217 = 0;
                      int v99 = 0;
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                      goto LABEL_381;
                    }
                    if (v254)
                    {
                      YAML::detail::node_data::begin(**v254, (uint64_t)v279);
                      uint64_t v76 = v252;
                      int v77 = v253;
                      if (v253)
                      {
                        atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v76;
                        v289 = v77;
                        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                        if (!v249[0]) {
                          goto LABEL_337;
                        }
                      }
                      else
                      {
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v252;
                        v289 = 0;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                    }
                    if (!v254)
                    {
LABEL_337:
                      uint64_t v97 = 0;
                      uint64_t v98 = 0;
                      v217 = 0;
                      int v99 = 0;
                      goto LABEL_381;
                    }
                    YAML::detail::node_data::end(**v254, (uint64_t)v279);
                    uint64_t v106 = v253;
                    if (v253)
                    {
                      atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                      int v99 = *(_DWORD *)v279;
                      uint64_t v98 = *(void *)&v279[16];
                      uint64_t v97 = *(void *)&v279[8];
                      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
                      v217 = v106;
                      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
                    }
                    else
                    {
                      v217 = 0;
                      int v99 = *(_DWORD *)v279;
                      uint64_t v98 = *(void *)&v279[16];
                      uint64_t v97 = *(void *)&v279[8];
                    }
LABEL_381:
                    while (2)
                    {
                      if (*(_DWORD *)v288 == v99)
                      {
                        char v111 = &v288[8];
                        uint64_t v112 = v97;
                        if (v99 != 1)
                        {
                          if (v99 != 2) {
                            goto LABEL_386;
                          }
                          char v111 = &v288[16];
                          uint64_t v112 = v98;
                        }
                        if (*(void *)v111 == v112)
                        {
LABEL_386:
                          if (v217) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v217);
                          }
                          if (v289) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v289);
                          }
                          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v220 + 25, (uint64_t *)v290.__begin_, (uint64_t *)v290.__end_, ((char *)v290.__end_ - (char *)v290.__begin_) >> 4);
                          goto LABEL_492;
                        }
                      }
                      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v279, (uint64_t)v288);
                      if (!v281)
                      {
                        v178 = __cxa_allocate_exception(0x38uLL);
                        if (SHIBYTE(v283) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__v.__first_ = __s;
                          __v.__end_ = v283;
                        }
                        YAML::InvalidNode::InvalidNode(v178, (uint64_t)&__v);
                      }
                      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v281;
                      YAML::as_if<std::string,void>::operator()(&v278, (YAML::Node **)&__v);
                      int v107 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                      if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0)
                      {
                        if (HIBYTE(v278.__r_.__value_.__r.__words[2]) == 5)
                        {
                          BOOL v108 = &v278;
                          goto LABEL_344;
                        }
LABEL_349:
                        if (v107 == 8)
                        {
                          BOOL v108 = &v278;
                          goto LABEL_354;
                        }
LABEL_356:
                        if (v107 == 8)
                        {
                          BOOL v108 = &v278;
                          goto LABEL_362;
                        }
LABEL_368:
                        if (v287) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v287);
                        }
                        if (v286 < 0) {
                          operator delete(v285);
                        }
                        if (v284) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v284);
                        }
                        if (SHIBYTE(v283) < 0) {
                          operator delete((void *)__s);
                        }
                        if (v280) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v280);
                        }
                        if ((v279[31] & 0x80000000) != 0) {
                          operator delete(*(void **)&v279[8]);
                        }
                        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v288);
                        continue;
                      }
                      break;
                    }
                    std::string::size_type v109 = v278.__r_.__value_.__l.__size_;
                    BOOL v108 = (std::string *)v278.__r_.__value_.__r.__words[0];
                    if (v278.__r_.__value_.__l.__size_ == 5)
                    {
LABEL_344:
                      if (LODWORD(v108->__r_.__value_.__l.__data_) == 1734439797
                        && v108->__r_.__value_.__s.__data_[4] == 101)
                      {
                        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)&__v, (const YAML::detail::iterator_value *)v279);
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v220 + 9, (uint64_t *)__v.__first_, (uint64_t *)__v.__begin_, ((char *)__v.__begin_ - (char *)__v.__first_) >> 4);
                        v297[0] = (void **)&__v;
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v297);
                        int v107 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                        if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0) {
                          goto LABEL_349;
                        }
                      }
                      else if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0)
                      {
                        goto LABEL_349;
                      }
                      std::string::size_type v109 = v278.__r_.__value_.__l.__size_;
                      BOOL v108 = (std::string *)v278.__r_.__value_.__r.__words[0];
                    }
                    if (v109 == 8)
                    {
LABEL_354:
                      if (v108->__r_.__value_.__r.__words[0] == 0x656469727265766FLL)
                      {
                        siri::dialogengine::ParsePatternOverrideYAML((siri::dialogengine *)&__v, a2, (const YAML::detail::iterator_value *)v279);
                        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)&v290, (long long *)&__v);
                        if (__v.__begin_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__v.__begin_);
                        }
                        int v107 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                        if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0) {
                          goto LABEL_356;
                        }
                      }
                      else if ((v107 & 0x80) == 0)
                      {
                        goto LABEL_356;
                      }
                      BOOL v108 = (std::string *)v278.__r_.__value_.__r.__words[0];
                      if (v278.__r_.__value_.__l.__size_ == 8)
                      {
LABEL_362:
                        if (v108->__r_.__value_.__r.__words[0] == 0x73656C706D617865)
                        {
                          siri::dialogengine::ParseExamplesYAML((std::vector<std::string> *)&__v, (const YAML::detail::iterator_value *)v279);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v220 + 248), __v.__first_, (long long *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
                          v297[0] = (void **)&__v;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v297);
                          if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0) {
                            goto LABEL_368;
                          }
                        }
                        else if ((v107 & 0x80) == 0)
                        {
                          goto LABEL_368;
                        }
                        BOOL v108 = (std::string *)v278.__r_.__value_.__r.__words[0];
                      }
                    }
                    operator delete(v108);
                    goto LABEL_368;
                  case 5uLL:
                    if (*(_DWORD *)v291.__r_.__value_.__l.__data_ != 1734439797
                      || *(unsigned char *)(v291.__r_.__value_.__r.__words[0] + 4) != 101)
                    {
                      goto LABEL_318;
                    }
LABEL_286:
                    siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)v279, (const YAML::detail::iterator_value *)__p);
                    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v220 + 6, *(uint64_t **)v279, *(uint64_t **)&v279[8], (uint64_t)(*(void *)&v279[8] - *(void *)v279) >> 4);
                    *(void *)v288 = v279;
                    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v288);
                    goto LABEL_493;
                  case 0xAuLL:
                    long long v74 = (std::string *)v291.__r_.__value_.__r.__words[0];
LABEL_295:
                    std::string::size_type v88 = v74->__r_.__value_.__r.__words[0];
                    int v89 = LOWORD(v74->__r_.__value_.__r.__words[1]);
                    if (v88 != 0x6974726F70707573 || v89 != 26478) {
                      goto LABEL_318;
                    }
                    memset(&v290, 0, sizeof(v290));
                    if (!v249[0])
                    {
                      uint64_t v103 = 0;
                      uint64_t v104 = 0;
                      v219 = 0;
                      int v105 = 0;
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                      goto LABEL_482;
                    }
                    if (v254)
                    {
                      YAML::detail::node_data::begin(**v254, (uint64_t)v279);
                      uint64_t v91 = v252;
                      v92 = v253;
                      if (v253)
                      {
                        atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v91;
                        v289 = v92;
                        atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v92);
                        if (!v249[0]) {
                          goto LABEL_400;
                        }
                      }
                      else
                      {
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v252;
                        v289 = 0;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                    }
                    if (!v254)
                    {
LABEL_400:
                      uint64_t v103 = 0;
                      uint64_t v104 = 0;
                      v219 = 0;
                      int v105 = 0;
                      goto LABEL_482;
                    }
                    YAML::detail::node_data::end(**v254, (uint64_t)v279);
                    unsigned int v114 = v253;
                    if (v253)
                    {
                      atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                      int v105 = *(_DWORD *)v279;
                      uint64_t v104 = *(void *)&v279[16];
                      uint64_t v103 = *(void *)&v279[8];
                      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
                      v219 = v114;
                      std::__shared_weak_count::__release_shared[abi:ne180100](v114);
                    }
                    else
                    {
                      v219 = 0;
                      int v105 = *(_DWORD *)v279;
                      uint64_t v104 = *(void *)&v279[16];
                      uint64_t v103 = *(void *)&v279[8];
                    }
                    while (1)
                    {
LABEL_482:
                      if (*(_DWORD *)v288 == v105)
                      {
                        v130 = &v288[8];
                        uint64_t v131 = v103;
                        if (v105 != 1)
                        {
                          if (v105 != 2) {
                            goto LABEL_487;
                          }
                          v130 = &v288[16];
                          uint64_t v131 = v104;
                        }
                        if (*(void *)v130 == v131)
                        {
LABEL_487:
                          if (v219) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v219);
                          }
                          if (v289) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v289);
                          }
                          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v220 + 28, (uint64_t *)v290.__begin_, (uint64_t *)v290.__end_, ((char *)v290.__end_ - (char *)v290.__begin_) >> 4);
LABEL_492:
                          *(void *)v279 = &v290;
                          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
LABEL_493:
                          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v291.__r_.__value_.__l.__data_);
                          }
                          if (v253) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v253);
                          }
                          if (SHIBYTE(v251) < 0) {
                            operator delete((void *)v250);
                          }
                          if (v247) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v247);
                          }
                          if (SHIBYTE(v245) < 0) {
                            operator delete((void *)v244);
                          }
                          if ((void)v242) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v242);
                          }
                          if ((__p[31] & 0x80000000) != 0) {
                            operator delete(*(void **)&__p[8]);
                          }
                          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v292);
                          goto LABEL_224;
                        }
                      }
                      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v279, (uint64_t)v288);
                      if (!v281)
                      {
                        v179 = __cxa_allocate_exception(0x38uLL);
                        if (SHIBYTE(v283) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__v.__first_ = __s;
                          __v.__end_ = v283;
                        }
                        YAML::InvalidNode::InvalidNode(v179, (uint64_t)&__v);
                      }
                      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v281;
                      YAML::as_if<std::string,void>::operator()(&v278, (YAML::Node **)&__v);
                      int v126 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                      if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) != 0)
                      {
                        std::string::size_type v128 = v278.__r_.__value_.__l.__size_;
                        char v127 = (std::string *)v278.__r_.__value_.__r.__words[0];
                        if (v278.__r_.__value_.__l.__size_ != 5) {
                          goto LABEL_454;
                        }
                      }
                      else
                      {
                        if (HIBYTE(v278.__r_.__value_.__r.__words[2]) != 5) {
                          goto LABEL_450;
                        }
                        char v127 = &v278;
                      }
                      if (LODWORD(v127->__r_.__value_.__l.__data_) == 1734439797
                        && v127->__r_.__value_.__s.__data_[4] == 101)
                      {
                        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)&__v, (const YAML::detail::iterator_value *)v279);
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v220 + 12, (uint64_t *)__v.__first_, (uint64_t *)__v.__begin_, ((char *)__v.__begin_ - (char *)__v.__first_) >> 4);
                        v297[0] = (void **)&__v;
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v297);
                        int v126 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                        if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) != 0)
                        {
LABEL_453:
                          std::string::size_type v128 = v278.__r_.__value_.__l.__size_;
                          char v127 = (std::string *)v278.__r_.__value_.__r.__words[0];
LABEL_454:
                          if (v128 != 8) {
                            goto LABEL_468;
                          }
                          goto LABEL_455;
                        }
                      }
                      else if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) != 0)
                      {
                        goto LABEL_453;
                      }
LABEL_450:
                      if (v126 != 8) {
                        goto LABEL_457;
                      }
                      char v127 = &v278;
LABEL_455:
                      if (v127->__r_.__value_.__r.__words[0] == 0x656469727265766FLL)
                      {
                        siri::dialogengine::ParsePatternOverrideYAML((siri::dialogengine *)&__v, a2, (const YAML::detail::iterator_value *)v279);
                        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)&v290, (long long *)&__v);
                        if (__v.__begin_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__v.__begin_);
                        }
                        int v126 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                        if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) != 0)
                        {
LABEL_462:
                          char v127 = (std::string *)v278.__r_.__value_.__r.__words[0];
                          if (v278.__r_.__value_.__l.__size_ != 8) {
                            goto LABEL_468;
                          }
                          goto LABEL_463;
                        }
                      }
                      else if ((v126 & 0x80) != 0)
                      {
                        goto LABEL_462;
                      }
LABEL_457:
                      if (v126 != 8) {
                        goto LABEL_469;
                      }
                      char v127 = &v278;
LABEL_463:
                      if (v127->__r_.__value_.__r.__words[0] == 0x73656C706D617865)
                      {
                        siri::dialogengine::ParseExamplesYAML((std::vector<std::string> *)&__v, (const YAML::detail::iterator_value *)v279);
                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v220 + 272), __v.__first_, (long long *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
                        v297[0] = (void **)&__v;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v297);
                        if ((*((unsigned char *)&v278.__r_.__value_.__s + 23) & 0x80) == 0) {
                          goto LABEL_469;
                        }
                      }
                      else if ((v126 & 0x80) == 0)
                      {
                        goto LABEL_469;
                      }
                      char v127 = (std::string *)v278.__r_.__value_.__r.__words[0];
LABEL_468:
                      operator delete(v127);
LABEL_469:
                      if (v287) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v287);
                      }
                      if (v286 < 0) {
                        operator delete(v285);
                      }
                      if (v284) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v284);
                      }
                      if (SHIBYTE(v283) < 0) {
                        operator delete((void *)__s);
                      }
                      if (v280) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v280);
                      }
                      if ((v279[31] & 0x80000000) != 0) {
                        operator delete(*(void **)&v279[8]);
                      }
                      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v288);
                    }
                  case 0xDuLL:
                    if (*(void *)v291.__r_.__value_.__l.__data_ != 0x6C754D776F6C6C61
                      || *(void *)(v291.__r_.__value_.__r.__words[0] + 5) != 0x656C7069746C754DLL)
                    {
                      goto LABEL_318;
                    }
LABEL_310:
                    if (!v249[0])
                    {
                      v183 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v251) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v279, (const std::string::value_type *)v250, *((std::string::size_type *)&v250 + 1));
                      }
                      else
                      {
                        *(_OWORD *)v279 = v250;
                        *(void *)&v279[16] = v251;
                      }
                      YAML::InvalidNode::InvalidNode(v183, (uint64_t)v279);
                    }
                    if (!v254)
                    {
                      v186 = __cxa_allocate_exception(0x38uLL);
                      *(void *)v279 = YAML::Node::Mark((YAML::Node *)v249);
                      *(_DWORD *)&v279[8] = v187;
                      YAML::BadConversion::BadConversion(v186, v279);
                      void *v186 = &unk_1F211F778;
                    }
                    v288[0] = 0;
                    if (!YAML::convert<BOOL>::decode((YAML::Node *)v249, v288))
                    {
                      v184 = __cxa_allocate_exception(0x38uLL);
                      *(void *)v279 = YAML::Node::Mark((YAML::Node *)v249);
                      *(_DWORD *)&v279[8] = v185;
                      YAML::BadConversion::BadConversion(v184, v279);
                      void *v184 = &unk_1F211F778;
                    }
                    v220[120] = v288[0];
                    goto LABEL_493;
                  case 0xEuLL:
                    if (*(void *)v291.__r_.__value_.__l.__data_ != 0x56746C7561666564
                      || *(void *)(v291.__r_.__value_.__r.__words[0] + 6) != 0x746E616972615674)
                    {
                      goto LABEL_318;
                    }
LABEL_325:
                    if (!v249[0])
                    {
                      v188 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v251) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v279, (const std::string::value_type *)v250, *((std::string::size_type *)&v250 + 1));
                      }
                      else
                      {
                        *(_OWORD *)v279 = v250;
                        *(void *)&v279[16] = v251;
                      }
                      YAML::InvalidNode::InvalidNode(v188, (uint64_t)v279);
                    }
                    *(void *)v279 = v249;
                    YAML::as_if<std::string,void>::operator()((std::string *)v288, (YAML::Node **)v279);
                    std::string::operator=((std::string *)(v220 + 152), (const std::string *)v288);
                    goto LABEL_323;
                  case 0xFuLL:
                    if (*(void *)v291.__r_.__value_.__l.__data_ != 0x566465776F6C6C61
                      || *(void *)(v291.__r_.__value_.__r.__words[0] + 7) != 0x73746E6169726156)
                    {
                      goto LABEL_318;
                    }
LABEL_276:
                    memset(&v290, 0, sizeof(v290));
                    if (!v249[0])
                    {
                      uint64_t v100 = 0;
                      uint64_t v101 = 0;
                      v218 = 0;
                      int v102 = 0;
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                      goto LABEL_429;
                    }
                    if (v254)
                    {
                      YAML::detail::node_data::begin(**v254, (uint64_t)v279);
                      uint64_t v84 = v252;
                      v85 = v253;
                      if (v253)
                      {
                        atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v84;
                        v289 = v85;
                        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v85);
                        if (!v249[0]) {
                          goto LABEL_395;
                        }
                      }
                      else
                      {
                        *(_OWORD *)v288 = *(_OWORD *)v279;
                        *(_OWORD *)&v288[16] = *(_OWORD *)&v279[16];
                        *(void *)&v288[32] = v252;
                        v289 = 0;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v288 = 0;
                      memset(&v288[8], 0, 32);
                      v289 = 0;
                    }
                    if (v254)
                    {
                      YAML::detail::node_data::end(**v254, (uint64_t)v279);
                      std::string::size_type v113 = v253;
                      if (v253)
                      {
                        atomic_fetch_add_explicit(&v253->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v102 = *(_DWORD *)v279;
                        uint64_t v101 = *(void *)&v279[16];
                        uint64_t v100 = *(void *)&v279[8];
                        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
                        v218 = v113;
                        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
                      }
                      else
                      {
                        v218 = 0;
                        int v102 = *(_DWORD *)v279;
                        uint64_t v101 = *(void *)&v279[16];
                        uint64_t v100 = *(void *)&v279[8];
                      }
                      while (1)
                      {
LABEL_429:
                        if (*(_DWORD *)v288 == v102)
                        {
                          std::string v124 = &v288[8];
                          uint64_t v125 = v100;
                          if (v102 != 1)
                          {
                            if (v102 != 2) {
                              goto LABEL_434;
                            }
                            std::string v124 = &v288[16];
                            uint64_t v125 = v101;
                          }
                          if (*(void *)v124 == v125)
                          {
LABEL_434:
                            if (v218) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v218);
                            }
                            if (v289) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v289);
                            }
                            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v220 + 176), v290.__begin_, (long long *)v290.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v290.__end_ - (char *)v290.__begin_) >> 3));
                            *(void *)v279 = &v290;
                            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
                            goto LABEL_493;
                          }
                        }
                        YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v279, (uint64_t)v288);
                        if (!v279[0])
                        {
                          v180 = __cxa_allocate_exception(0x38uLL);
                          if ((v279[31] & 0x80000000) != 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&v279[8], *(std::string::size_type *)&v279[16]);
                          }
                          else
                          {
                            *(_OWORD *)&__v.__first_ = *(_OWORD *)&v279[8];
                            __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&v279[24];
                          }
                          YAML::InvalidNode::InvalidNode(v180, (uint64_t)&__v);
                        }
                        __v.__first_ = (std::__split_buffer<std::string>::pointer)v279;
                        YAML::as_if<std::string,void>::operator()(&v278, (YAML::Node **)&__v);
                        std::vector<std::string>::pointer end = v290.__end_;
                        if (v290.__end_ >= v290.__end_cap_.__value_)
                        {
                          unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v290.__end_ - (char *)v290.__begin_) >> 3);
                          unint64_t v118 = v117 + 1;
                          if (v117 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                          }
                          if (0x5555555555555556 * (((char *)v290.__end_cap_.__value_ - (char *)v290.__begin_) >> 3) > v118) {
                            unint64_t v118 = 0x5555555555555556
                          }
                                 * (((char *)v290.__end_cap_.__value_ - (char *)v290.__begin_) >> 3);
                          if (0xAAAAAAAAAAAAAAABLL * (((char *)v290.__end_cap_.__value_ - (char *)v290.__begin_) >> 3) >= 0x555555555555555) {
                            unint64_t v119 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v119 = v118;
                          }
                          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v290.__end_cap_;
                          if (v119) {
                            v120 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v290.__end_cap_, v119);
                          }
                          else {
                            v120 = 0;
                          }
                          std::string::size_type v121 = v120 + v117;
                          __v.__first_ = v120;
                          __v.__begin_ = v121;
                          __v.__end_cap_.__value_ = &v120[v119];
                          long long v122 = *(_OWORD *)&v278.__r_.__value_.__l.__data_;
                          v121->__r_.__value_.__r.__words[2] = v278.__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
                          memset(&v278, 0, sizeof(v278));
                          __v.__end_ = v121 + 1;
                          std::vector<std::string>::__swap_out_circular_buffer(&v290, &__v);
                          std::string::size_type v123 = v290.__end_;
                          std::__split_buffer<std::string>::~__split_buffer(&__v);
                          v290.__end_ = v123;
                          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v278.__r_.__value_.__l.__data_);
                          }
                        }
                        else
                        {
                          long long v116 = *(_OWORD *)&v278.__r_.__value_.__l.__data_;
                          v290.__end_->__r_.__value_.__r.__words[2] = v278.__r_.__value_.__r.__words[2];
                          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v116;
                          v290.__end_ = end + 1;
                        }
                        if (v287) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v287);
                        }
                        if (v286 < 0) {
                          operator delete(v285);
                        }
                        if (v284) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v284);
                        }
                        if (SHIBYTE(v283) < 0) {
                          operator delete((void *)__s);
                        }
                        if (v280) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v280);
                        }
                        if ((v279[31] & 0x80000000) != 0) {
                          operator delete(*(void **)&v279[8]);
                        }
                        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v288);
                      }
                    }
LABEL_395:
                    uint64_t v100 = 0;
                    uint64_t v101 = 0;
                    v218 = 0;
                    int v102 = 0;
                    goto LABEL_429;
                  case 0x10uLL:
                    if (*(void *)v291.__r_.__value_.__l.__data_ != 0x43746C7561666564
                      || *(void *)(v291.__r_.__value_.__r.__words[0] + 8) != 0x746E656E6F706D6FLL)
                    {
                      goto LABEL_318;
                    }
LABEL_292:
                    if (!v249[0])
                    {
                      v182 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v251) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v279, (const std::string::value_type *)v250, *((std::string::size_type *)&v250 + 1));
                      }
                      else
                      {
                        *(_OWORD *)v279 = v250;
                        *(void *)&v279[16] = v251;
                      }
                      YAML::InvalidNode::InvalidNode(v182, (uint64_t)v279);
                    }
                    *(void *)v279 = v249;
                    YAML::as_if<std::string,void>::operator()((std::string *)v288, (YAML::Node **)v279);
                    std::string::operator=((std::string *)(v220 + 128), (const std::string *)v288);
                    goto LABEL_323;
                  default:
LABEL_318:
                    std::operator+<char>();
                    v95 = std::string::append((std::string *)v288, "\" in component for pattern schema");
                    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                    *(void *)&v279[16] = *((void *)&v95->__r_.__value_.__l + 2);
                    *(_OWORD *)v279 = v96;
                    v95->__r_.__value_.__l.__size_ = 0;
                    v95->__r_.__value_.__r.__words[2] = 0;
                    v95->__r_.__value_.__r.__words[0] = 0;
                    if (a2) {
                      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)v279);
                    }
                    else {
                      siri::dialogengine::Log::LogWithLevel((uint64_t)v279, 3u);
                    }
                    if ((v279[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v279);
                    }
LABEL_323:
                    if ((v288[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v288);
                    }
                    goto LABEL_493;
                }
              }
LABEL_508:
              if (v215) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v215);
              }
              if (v293) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v293);
              }
              if ((SBYTE7(v256) & 0x80000000) == 0)
              {
                std::string v132 = v214;
                if (SBYTE7(v256) == 16)
                {
                  std::string v133 = (uint64_t *)&v255;
                  goto LABEL_517;
                }
                goto LABEL_521;
              }
              std::string v132 = v214;
              if (*((void *)&v255 + 1) != 16) {
                goto LABEL_521;
              }
              std::string v133 = (uint64_t *)v255;
LABEL_517:
              uint64_t v135 = *v133;
              uint64_t v134 = v133[1];
              if (v135 == 0x6F43676F6C616964 && v134 == 0x73746E656E6F706DLL)
              {
                *(void *)&long long v277 = v132;
                char v137 = (std::__shared_weak_count *)v220;
                *((void *)&v277 + 1) = v220;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v220 + 1, 1uLL, memory_order_relaxed);
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v66 + 120), &v277);
              }
              else
              {
LABEL_521:
                *(void *)&long long v276 = v132;
                char v137 = (std::__shared_weak_count *)v220;
                *((void *)&v276 + 1) = v220;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v220 + 1, 1uLL, memory_order_relaxed);
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v66 + 144), &v276);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v137);
              std::__shared_weak_count::__release_shared[abi:ne180100](v137);
              if (++v216 == (std::string *)v213) {
                goto LABEL_525;
              }
              continue;
            }
          }
          break;
        }
        if (v205) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v205);
        }
        v138 = v239;
        if (v239) {
LABEL_595:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v138);
        goto LABEL_596;
      default:
        if (*((void *)&v255 + 1) == 27)
        {
          BOOL v27 = *(void *)v255 == 0x6F436C6175736976 && *(void *)(v255 + 8) == 0x73746E656E6F706DLL;
          BOOL v28 = v27 && *(void *)(v255 + 16) == 0x74616E69626D6F43;
          if (v28 && *(void *)(v255 + 19) == 0x6E6F6974616E6962)
          {
LABEL_98:
            uint64_t v30 = (siri::dialogengine::PatternSchemaConcreteGroup *)v274;
            (*(void (**)(unsigned char *__return_ptr, void))(*(void *)v274 + 88))(__p, v274);
            int v31 = **(_DWORD **)__p;
            if (*(void *)&__p[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
            }
            if (v31)
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Multiple \"visualComponentsCombination\" entries in group \"", 57);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v33 = &__str;
              }
              else {
                int v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
              }
              unsigned int v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\" (line ", 8);
              if (!v260)
              {
                v198 = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v262) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v279, (const std::string::value_type *)v261, *((std::string::size_type *)&v261 + 1));
                }
                else
                {
                  *(_OWORD *)v279 = v261;
                  *(void *)&v279[16] = v262;
                }
                YAML::InvalidNode::InvalidNode(v198, (uint64_t)v279);
              }
              char v139 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)")", 1);
              std::stringbuf::str();
              if (a2) {
                siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)v279);
              }
              else {
                siri::dialogengine::Log::LogWithLevel((uint64_t)v279, 3u);
              }
              if ((v279[23] & 0x80000000) != 0) {
                operator delete(*(void **)v279);
              }
              *(void *)std::string __p = v202;
              *(void *)&__p[*(void *)(v202 - 24)] = v203;
              *(void *)&__p[16] = v204;
              *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
              if (v248 < 0) {
                operator delete(v246);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C8796CC0]((char *)&v250 + 8);
            }
            char v141 = (char *)operator new(0x38uLL);
            *((void *)v141 + 1) = 0;
            *((void *)v141 + 2) = 0;
            *(void *)char v141 = &unk_1F211F670;
            *(_OWORD *)(v141 + 24) = 0u;
            v142 = v141 + 24;
            *(_OWORD *)(v141 + 40) = 0u;
            v240[0] = (uint64_t)(v141 + 24);
            v240[1] = (uint64_t)v141;
            if (!v264[0])
            {
              v197 = __cxa_allocate_exception(0x38uLL);
              if (SHIBYTE(v266) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v265, *((std::string::size_type *)&v265 + 1));
              }
              else
              {
                *(_OWORD *)std::string __p = v265;
                *(void *)&__p[16] = v266;
              }
              YAML::InvalidNode::InvalidNode(v197, (uint64_t)__p);
            }
            if (v269 && (uint64_t v143 = **v269, *(unsigned char *)v143) && *(_DWORD *)(v143 + 16) == 3)
            {
              *(_DWORD *)std::string __p = 0;
              memset(&__p[8], 0, 32);
              long long v242 = 0uLL;
              siri::dialogengine::ParseCustomCombinationYAML(a2, (siri::dialogengine::Context *)v264, (const YAML::Node *)__p, v140);
              _DWORD *v142 = 3;
              memset(v279, 0, 24);
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(v279, *(void **)&__p[32], (void *)v242, (uint64_t)(v242 - *(void *)&__p[32]) >> 4);
              v144 = *(long long **)&v279[8];
              for (std::string i = *(long long **)v279; i != v144; ++i)
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)v141 + 4, i);
              v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
              *(void *)v279 = &__p[32];
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
              if ((__p[31] & 0x80000000) != 0)
              {
                v146 = *(void **)&__p[8];
                goto LABEL_562;
              }
            }
            else
            {
              *(void *)v279 = v264;
              YAML::as_if<std::string,void>::operator()((std::string *)__p, (YAML::Node **)v279);
              _DWORD *v142 = siri::dialogengine::GetCombinationTypeFromString((uint64_t)__p);
              if ((__p[23] & 0x80000000) != 0)
              {
                v146 = *(void **)__p;
LABEL_562:
                operator delete(v146);
              }
            }
            siri::dialogengine::PatternSchemaConcreteGroup::SetVisualComponentsCombination(v30, v240);
            v138 = (std::__shared_weak_count *)v141;
            goto LABEL_595;
          }
        }
LABEL_168:
        std::operator+<char>();
        unsigned int v57 = std::string::append((std::string *)v279, "\" in group for pattern schema");
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v57->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (a2) {
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)__p);
        }
        else {
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
LABEL_173:
        if ((v279[23] & 0x80000000) != 0) {
          operator delete(*(void **)v279);
        }
LABEL_596:
        if (SBYTE7(v256) < 0) {
          operator delete((void *)v255);
        }
        if (v268) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v268);
        }
        if (SHIBYTE(v266) < 0) {
          operator delete((void *)v265);
        }
        if (v263) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v263);
        }
        if (SHIBYTE(v262) < 0) {
          operator delete((void *)v261);
        }
        if (v259) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v259);
        }
        if (v258 < 0) {
          operator delete(v257);
        }
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v270);
        unint64_t v11 = v211;
        break;
    }
  }
  if (v201) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v201);
  }
  if (v271) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v271);
  }
  v151 = (void *)HIBYTE(v273);
  char v152 = HIBYTE(v273);
  if (v273 < 0) {
    v151 = v272[1];
  }
  if (!v151)
  {
    *(_OWORD *)this = v274;
    long long v274 = 0uLL;
    if ((v152 & 0x80) == 0) {
      goto LABEL_682;
    }
    goto LABEL_681;
  }
  if (v11 >= 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Property \"aliasOf\" used with other properties in group \"", 56);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v154 = &__str;
    }
    else {
      v154 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v155 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v155 = __str.__r_.__value_.__l.__size_;
    }
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)v154, v155);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"\" (line ", 8);
    v157 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"); All other properties of this group are ignored",
      49);
    std::stringbuf::str();
    if (a2) {
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)v279);
    }
    else {
      siri::dialogengine::Log::LogWithLevel((uint64_t)v279, 3u);
    }
    if ((v279[23] & 0x80000000) != 0) {
      operator delete(*(void **)v279);
    }
    *(void *)std::string __p = v202;
    *(void *)&__p[*(void *)(v202 - 24)] = v203;
    *(void *)&__p[16] = v204;
    *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
    if (v248 < 0) {
      operator delete(v246);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C8796CC0]((char *)&v250 + 8);
  }
  siri::dialogengine::PatternSchema::GetGroup((uint64_t)a3, (uint64_t)v272, (void *)&v256 + 1);
  uint64_t v158 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1))
  {
    if (!(*(unsigned int (**)(void))(**((void **)&v256 + 1) + 16))(*((void *)&v256 + 1)))
    {
      std::allocate_shared[abi:ne180100]<siri::dialogengine::PatternSchemaAliasGroup,std::allocator<siri::dialogengine::PatternSchemaAliasGroup>,std::string const&,std::shared_ptr<siri::dialogengine::PatternSchemaGroup> &,void>(__p, (long long *)&__str, v158, (std::__shared_weak_count *)v257);
      *(_OWORD *)this = *(_OWORD *)__p;
      goto LABEL_678;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The value of property \"aliasOf\" in group \"", 42);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v160 = &__str;
    }
    else {
      v160 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v161 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v161 = __str.__r_.__value_.__l.__size_;
    }
    v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)v160, v161);
    v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"\" is invalid (\"", 15);
    if (v273 >= 0) {
      v164 = v272;
    }
    else {
      v164 = (void **)v272[0];
    }
    if (v273 >= 0) {
      uint64_t v165 = HIBYTE(v273);
    }
    else {
      uint64_t v165 = (uint64_t)v272[1];
    }
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)v164, v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"\") because that group is an alias group (line ", 46);
    v167 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)")", 1);
    std::stringbuf::str();
    v168 = (uint64_t *)a2;
    if (a2) {
      goto LABEL_650;
    }
LABEL_672:
    siri::dialogengine::Log::LogWithLevel((uint64_t)v279, 3u);
    goto LABEL_673;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Property \"aliasOf\" in group \"", 29);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v170 = &__str;
  }
  else {
    v170 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v171 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v171 = __str.__r_.__value_.__l.__size_;
  }
  v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)v170, v171);
  v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)"\" refers to group \"", 19);
  if (v273 >= 0) {
    v174 = v272;
  }
  else {
    v174 = (void **)v272[0];
  }
  if (v273 >= 0) {
    uint64_t v175 = HIBYTE(v273);
  }
  else {
    uint64_t v175 = (uint64_t)v272[1];
  }
  v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)v174, v175);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"\" that is not (yet) defined (line ", 34);
  v177 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)")", 1);
  std::stringbuf::str();
  v168 = (uint64_t *)a2;
  if (!a2) {
    goto LABEL_672;
  }
LABEL_650:
  siri::dialogengine::Context::AddSchemaError(v168, (long long *)v279);
LABEL_673:
  if ((v279[23] & 0x80000000) != 0) {
    operator delete(*(void **)v279);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)std::string __p = v202;
  *(void *)&__p[*(void *)(v202 - 24)] = v203;
  *(void *)&__p[16] = v204;
  *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
  if (v248 < 0) {
    operator delete(v246);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0]((char *)&v250 + 8);
LABEL_678:
  if (v257) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v257);
  }
  if (v273 < 0) {
LABEL_681:
  }
    operator delete(v272[0]);
LABEL_682:
  if (*((void *)&v274 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v274 + 1));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F2E998(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete((void *)STACK[0x570]);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2E0]);
  if (STACK[0x420]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (STACK[0x518]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x518]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  _Unwind_Resume(a1);
}

void YAML::Node::as<std::string>(std::string *a1, uint64_t a2)
{
  if (!*(unsigned char *)a2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a2 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    }
    else {
      std::string v5 = *(std::string *)(a2 + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  std::string::size_type v4 = (YAML::Node *)a2;
  YAML::as_if<std::string,void>::operator()(a1, &v4);
}

void sub_1C5F2F3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Mark(YAML::Node *this)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v5 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return *(void *)(**(void **)v2 + 4);
  }
  else {
    return -1;
  }
}

void sub_1C5F2F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 2)
  {
    std::string v5 = *(uint64_t **)(a2 + 16);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    std::string::size_type v4 = *(std::__shared_weak_count **)(a2 + 40);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      uint64_t v24 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *(void *)(a2 + 32);
      int v10 = *(std::__shared_weak_count **)(a2 + 40);
      v19[0] = 1;
      uint64_t v25 = v7;
      if (v10)
      {
        char v11 = 0;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = v9;
        uint64_t v17 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
        v12[0] = 1;
        uint64_t v18 = v6;
        YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v19, (const YAML::Node *)v12);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if ((v11 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      v19[0] = 1;
      uint64_t v24 = 0;
      uint64_t v25 = v7;
    }
    int v10 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v9;
    char v11 = 1;
    uint64_t v17 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)a2 != 1 || (uint64_t v2 = **(void **)(a2 + 8)) == 0)
  {
LABEL_11:
    *(unsigned char *)a1 = 1;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(unsigned char *)(a1 + 56) = 1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(unsigned char *)(a1 + 112) = 1;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    return;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  std::string::size_type v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    uint64_t v24 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    uint64_t v24 = 0;
  }
  v19[0] = 1;
  uint64_t v25 = v2;
  YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v19);
LABEL_23:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5F2F6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  char v19 = v18;
  YAML::Node::~Node((YAML::Node *)&a9);
  if ((v19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  YAML::Node::~Node((YAML::Node *)&a16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternUsagesYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::size_type v4 = (const YAML::detail::iterator_value *)((char *)a2 + 112);
  if (YAML::Node::Type((const YAML::detail::iterator_value *)((char *)a2 + 112)) == 2)
  {
    std::string v5 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v5 + 8) = 0u;
    *(void *)std::string v5 = &unk_1F211F580;
    *((_DWORD *)v5 + 6) = 0;
    *((void *)v5 + 4) = 0;
    *(_OWORD *)(v5 + 40) = 0u;
    *(void *)uint64_t v38 = v5 + 24;
    *(void *)&v38[8] = v5;
    YAML::Node::as<std::string>((std::string *)__p, (uint64_t)v4);
    *((_DWORD *)v5 + 6) = siri::dialogengine::GetPatternUsageFromString((uint64_t)__p);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, (long long *)v38);
    if (SBYTE7(v29) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = (std::__shared_weak_count *)v5;
    goto LABEL_65;
  }
  if (YAML::Node::Type(v4) != 4)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unsupported type detected for usage statement in Pattern schema", v7);
    return;
  }
  if (!*(unsigned char *)v4)
  {
    char v11 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    int v12 = 0;
    *(_DWORD *)uint64_t v38 = 0;
    memset(&v38[8], 0, 32);
    uint64_t v39 = 0;
    goto LABEL_21;
  }
  BOOL v8 = (uint64_t **)*((void *)a2 + 20);
  if (v8)
  {
    YAML::detail::node_data::begin(**v8, (uint64_t)__p);
    uint64_t v10 = *((void *)a2 + 18);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 19);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)uint64_t v38 = *(_OWORD *)__p;
      *(_OWORD *)&v38[16] = v29;
      *(void *)&v38[32] = v10;
      uint64_t v39 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (!*(unsigned char *)v4) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    *(_OWORD *)uint64_t v38 = *(_OWORD *)__p;
    *(_OWORD *)&v38[16] = v29;
    *(void *)&v38[32] = v10;
  }
  else
  {
    *(_DWORD *)uint64_t v38 = 0;
    memset(&v38[8], 0, 32);
  }
  uint64_t v39 = 0;
LABEL_16:
  uint64_t v13 = (uint64_t **)*((void *)a2 + 20);
  if (!v13)
  {
LABEL_19:
    char v11 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    int v12 = 0;
    goto LABEL_21;
  }
  YAML::detail::node_data::end(**v13, (uint64_t)__p);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 19);
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    int v12 = (int)__p[0];
    char v11 = __p[1];
    uint64_t v24 = (void *)v29;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = v14;
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  else
  {
    uint64_t v23 = 0;
    int v12 = (int)__p[0];
    char v11 = __p[1];
    uint64_t v24 = (void *)v29;
  }
LABEL_21:
  while (1)
  {
    if (*(_DWORD *)v38 == v12)
    {
      uint64_t v15 = (void **)&v38[8];
      uint64_t v16 = v11;
      if (v12 != 1)
      {
        if (v12 != 2) {
          break;
        }
        uint64_t v15 = (void **)&v38[16];
        uint64_t v16 = v24;
      }
      if (*v15 == v16) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v38);
    uint64_t v17 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v17 + 8) = 0u;
    *(void *)uint64_t v17 = &unk_1F211F580;
    *((_DWORD *)v17 + 6) = 0;
    *((void *)v17 + 4) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(void *)&long long v27 = v17 + 24;
    *((void *)&v27 + 1) = v17;
    if (!v31)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v40, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else {
        std::string v40 = v32;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v40);
    }
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    YAML::as_if<std::string,void>::operator()(&v26, (YAML::Node **)&v40);
    if (!v34)
    {
      uint64_t v22 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v40, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
      }
      else {
        std::string v40 = v35;
      }
      YAML::InvalidNode::InvalidNode(v22, (uint64_t)&v40);
    }
    if (!v37 || (uint64_t v18 = **v37, *(unsigned char *)v18) && *(_DWORD *)(v18 + 16) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
    }
    else
    {
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
      YAML::as_if<std::string,void>::operator()(&__str, (YAML::Node **)&v40);
    }
    *((_DWORD *)v17 + 6) = siri::dialogengine::GetPatternUsageFromString((uint64_t)&v26);
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v40);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v40.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(v40.__r_.__value_.__l.__data_);
LABEL_44:
          std::string::operator=((std::string *)(v17 + 32), &__str);
          goto LABEL_45;
        }
        int v20 = *(_DWORD *)v40.__r_.__value_.__l.__data_;
        operator delete(v40.__r_.__value_.__l.__data_);
        if (v20 != 1702063205) {
          goto LABEL_44;
        }
      }
      else if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v40.__r_.__value_.__l.__data_) != 1702063205)
      {
        goto LABEL_44;
      }
    }
LABEL_45:
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v27);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[1]);
    }
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v38);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v6 = v39;
  if (v39) {
LABEL_65:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C5F2FC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  *(void *)(v35 - 176) = v33;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 176));
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Type(YAML::Node *this)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v6 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v6);
  }
  uint64_t v2 = (uint64_t **)*((void *)this + 6);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = **v2;
  if (*(unsigned char *)v3) {
    return *(unsigned int *)(v3 + 16);
  }
  else {
    return 0;
  }
}

void sub_1C5F2FE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseCustomCombinationYAML(siri::dialogengine *this, siri::dialogengine::Context *a2, const YAML::Node *a3, siri::dialogengine::VisualComponentsCombination::Entry *a4)
{
  int v6 = YAML::Node::Type(a2);
  if (v6 == 4)
  {
    if (!*(unsigned char *)a2)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v67, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        *(_OWORD *)int v67 = *(_OWORD *)((char *)a2 + 8);
        *(void *)&v67[16] = *((void *)a2 + 3);
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)v67);
    }
    char v11 = (YAML::detail::node_data ***)*((void *)a2 + 6);
    if (!v11 || YAML::detail::node_data::size(**v11) != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67[16], (uint64_t)"Expected map node to have a single entry (line ", 47);
      YAML::Node::Mark(a2);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
      std::stringbuf::str();
      if (this) {
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)&__p);
      }
      else {
        siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      }
      if (v73.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(__p);
      }
      *(void *)int v67 = *MEMORY[0x1E4FBA408];
      uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)&v67[*(void *)(*(void *)v67 - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
      *(void *)&v67[16] = v21;
      *(void *)&v67[24] = MEMORY[0x1E4FBA470] + 16;
      if (v70 < 0) {
        operator delete(v69);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C8796CC0](v71);
      return;
    }
    if (*(unsigned char *)a2 && (int v12 = (uint64_t **)*((void *)a2 + 6)) != 0)
    {
      YAML::detail::node_data::begin(**v12, (uint64_t)v85);
      uint64_t v13 = *((void *)a2 + 4);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 5);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)int v67 = *(_OWORD *)v85;
        *(_OWORD *)&v67[16] = *(_OWORD *)&v85[16];
        *(void *)&v67[32] = v13;
        uint64_t v68 = v14;
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        *(_OWORD *)int v67 = *(_OWORD *)v85;
        *(_OWORD *)&v67[16] = *(_OWORD *)&v85[16];
        *(void *)&v67[32] = v13;
        uint64_t v68 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
      *(_DWORD *)int v67 = 0;
      memset(&v67[8], 0, 32);
      uint64_t v68 = 0;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&__p, (uint64_t)v67);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (!v80[0])
    {
      uint64_t v54 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v82) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v67, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        *(_OWORD *)int v67 = __s;
        *(void *)&v67[16] = v82;
      }
      YAML::InvalidNode::InvalidNode(v54, (uint64_t)v67);
    }
    if (v84 && (uint64_t v22 = **v84, *(unsigned char *)v22) && *(_DWORD *)(v22 + 16) == 3)
    {
      if (!v76)
      {
        std::string v56 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v78) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v67, (const std::string::value_type *)v77, *((std::string::size_type *)&v77 + 1));
        }
        else
        {
          *(_OWORD *)int v67 = v77;
          *(void *)&v67[16] = v78;
        }
        YAML::InvalidNode::InvalidNode(v56, (uint64_t)v67);
      }
      *(void *)int v67 = &v76;
      YAML::as_if<std::string,void>::operator()((std::string *)v85, (YAML::Node **)v67);
      int EntryTypeFromString = siri::dialogengine::GetEntryTypeFromString((uint64_t)v85);
      *(_DWORD *)a3 = EntryTypeFromString;
      if ((v85[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v85);
        int EntryTypeFromString = *(_DWORD *)a3;
      }
      if (EntryTypeFromString)
      {
        siri::dialogengine::ParseCustomCombinationYAML(this, (siri::dialogengine::Context *)v80, a3, v24);
LABEL_100:
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        if (SHIBYTE(v82) < 0) {
          operator delete((void *)__s);
        }
        if (v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        }
        if (SHIBYTE(v78) < 0) {
          operator delete((void *)v77);
        }
        if (v74) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        return;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67[16], (uint64_t)"Invalid keyword; Expected '",
              27);
      std::string::basic_string[abi:ne180100]<0>(&v87, "and");
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v87;
      }
      else {
        uint64_t v38 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      std::string v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, size);
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"'/'", 3);
      std::string::basic_string[abi:ne180100]<0>(v65, "or");
      if ((v66 & 0x80u) == 0) {
        uint64_t v42 = v65;
      }
      else {
        uint64_t v42 = (void **)v65[0];
      }
      if ((v66 & 0x80u) == 0) {
        uint64_t v43 = v66;
      }
      else {
        uint64_t v43 = (uint64_t)v65[1];
      }
      int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"'/'", 3);
      std::string::basic_string[abi:ne180100]<0>(v63, "andor");
      if ((v64 & 0x80u) == 0) {
        long long v46 = v63;
      }
      else {
        long long v46 = (void **)v63[0];
      }
      if ((v64 & 0x80u) == 0) {
        uint64_t v47 = v64;
      }
      else {
        uint64_t v47 = (uint64_t)v63[1];
      }
      char v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
      std::string v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"'", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" (line ", 7);
      if (!v76)
      {
        unsigned int v57 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v78) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v85, (const std::string::value_type *)v77, *((std::string::size_type *)&v77 + 1));
        }
        else
        {
          *(_OWORD *)v85 = v77;
          *(void *)&v85[16] = v78;
        }
        YAML::InvalidNode::InvalidNode(v57, (uint64_t)v85);
      }
      unint64_t v50 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)")", 1);
      if ((char)v64 < 0) {
        operator delete(v63[0]);
      }
      if ((char)v66 < 0) {
        operator delete(v65[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      if (this) {
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)v85);
      }
      else {
        siri::dialogengine::Log::LogWithLevel((uint64_t)v85, 3u);
      }
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67[16], (uint64_t)"Expected map node value to be a sequence (line ", 47);
      if (!v80[0])
      {
        v55 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v82) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v85, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)v85 = __s;
          *(void *)&v85[16] = v82;
        }
        YAML::InvalidNode::InvalidNode(v55, (uint64_t)v85);
      }
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)")", 1);
      std::stringbuf::str();
      if (this) {
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)v85);
      }
      else {
        siri::dialogengine::Log::LogWithLevel((uint64_t)v85, 3u);
      }
    }
    if ((v85[23] & 0x80000000) != 0) {
      operator delete(*(void **)v85);
    }
    *(void *)int v67 = *MEMORY[0x1E4FBA408];
    uint64_t v36 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&v67[*(void *)(*(void *)v67 - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&v67[16] = v36;
    *(void *)&v67[24] = MEMORY[0x1E4FBA470] + 16;
    if (v70 < 0) {
      operator delete(v69);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C8796CC0](v71);
    goto LABEL_100;
  }
  if (v6 != 3)
  {
    if (v6 == 2)
    {
      *(_DWORD *)a3 = 4;
      uint64_t v7 = (const std::string *)YAML::Node::Scalar(a2);
      std::string::operator=((std::string *)((char *)a3 + 8), v7);
    }
    else
    {
      uint64_t v15 = YAML::Node::Mark(a2);
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Unexpected node in custom VisualComponentsCombination (line %d)", v16, (HIDWORD(v15) + 1));
    }
    return;
  }
  if (!*(unsigned char *)a2)
  {
    uint64_t v18 = 0;
    uint64_t v58 = 0;
    char v19 = 0;
    int v20 = 0;
    *(_DWORD *)v85 = 0;
    memset(&v85[8], 0, 32);
    long long v86 = 0;
    goto LABEL_51;
  }
  BOOL v8 = (uint64_t **)*((void *)a2 + 6);
  if (!v8)
  {
    *(_DWORD *)v85 = 0;
    memset(&v85[8], 0, 32);
LABEL_45:
    long long v86 = 0;
    goto LABEL_46;
  }
  YAML::detail::node_data::begin(**v8, (uint64_t)v67);
  uint64_t v10 = *((void *)a2 + 4);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (!v9)
  {
    *(_OWORD *)v85 = *(_OWORD *)v67;
    *(_OWORD *)&v85[16] = *(_OWORD *)&v67[16];
    *(void *)&v85[32] = v10;
    goto LABEL_45;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)v85 = *(_OWORD *)v67;
  *(_OWORD *)&v85[16] = *(_OWORD *)&v67[16];
  *(void *)&v85[32] = v10;
  long long v86 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (!*(unsigned char *)a2) {
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v25 = (uint64_t **)*((void *)a2 + 6);
  if (!v25)
  {
LABEL_49:
    uint64_t v18 = 0;
    uint64_t v58 = 0;
    char v19 = 0;
    int v20 = 0;
    goto LABEL_51;
  }
  YAML::detail::node_data::end(**v25, (uint64_t)v67);
  char v19 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v20 = *(_DWORD *)v67;
    uint64_t v58 = *(void *)&v67[16];
    uint64_t v18 = *(void *)&v67[8];
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  else
  {
    int v20 = *(_DWORD *)v67;
    uint64_t v58 = *(void *)&v67[16];
    uint64_t v18 = *(void *)&v67[8];
  }
LABEL_51:
  uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  uint64_t v60 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v61 = *MEMORY[0x1E4FBA408];
  unint64_t v59 = v19;
  while (1)
  {
    if (*(_DWORD *)v85 == v20)
    {
      long long v27 = &v85[8];
      uint64_t v28 = v18;
      if (v20 != 1)
      {
        if (v20 != 2) {
          break;
        }
        long long v27 = &v85[16];
        uint64_t v28 = v58;
      }
      if (*(void *)v27 == v28) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&__p, (uint64_t)v85);
    if (!(_BYTE)__p)
    {
      char v51 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v67, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)int v67 = v73;
      }
      YAML::InvalidNode::InvalidNode(v51, (uint64_t)v67);
    }
    if (v75
      && (uint64_t v29 = **v75, *(unsigned char *)v29)
      && ((int v30 = *(_DWORD *)(v29 + 16), v30 != 2) ? (v31 = v30 == 4) : (v31 = 1), v31))
    {
      std::string v32 = (char *)operator new(0x50uLL);
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = 0;
      *(_OWORD *)(v32 + 24) = 0u;
      *(void *)std::string v32 = &unk_1F211F6C0;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *((void *)v32 + 9) = 0;
      *(void *)int v67 = v32 + 24;
      *(void *)&v67[8] = v32;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)a3 + 4, (long long *)v67);
      siri::dialogengine::ParseCustomCombinationYAML(this, (siri::dialogengine::Context *)&__p, (const YAML::Node *)(v32 + 24), v33);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
      char v19 = v59;
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67[16], (uint64_t)"Expected sequence node to be either a scalar or a map (line ", 60);
      if (!(_BYTE)__p)
      {
        std::string v52 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v87, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        }
        else {
          std::string v87 = v73;
        }
        YAML::InvalidNode::InvalidNode(v52, (uint64_t)&v87);
      }
      char v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)")", 1);
      std::stringbuf::str();
      if (this) {
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (long long *)&v87);
      }
      else {
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v87, 3u);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      *(void *)int v67 = v61;
      *(void *)&v67[*(void *)(v61 - 24)] = v60;
      *(void *)&v67[16] = v26;
      *(void *)&v67[24] = MEMORY[0x1E4FBA470] + 16;
      if (v70 < 0) {
        operator delete(v69);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C8796CC0](v71);
    }
    if (v83) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v83);
    }
    if (SHIBYTE(v82) < 0) {
      operator delete((void *)__s);
    }
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    if (SHIBYTE(v78) < 0) {
      operator delete((void *)v77);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v85);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
}

void sub_1C5F30D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v66);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v67 - 105) < 0) {
    operator delete(*(void **)(v67 - 128));
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  YAML::detail::iterator_value::~iterator_value((YAML::detail::iterator_value *)&a66);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternOverrideYAML(siri::dialogengine *this, siri::dialogengine::Context *a2, const YAML::detail::iterator_value *a3)
{
  std::string v5 = (char *)operator new(0x48uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)std::string v5 = &unk_1F211F620;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(void *)this = v5 + 24;
  *((void *)this + 1) = v5;
  if (*((unsigned char *)a3 + 112))
  {
    int v6 = (uint64_t **)*((void *)a3 + 20);
    if (v6)
    {
      YAML::detail::node_data::begin(**v6, (uint64_t)&v60);
      uint64_t v8 = *((void *)a3 + 18);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)a3 + 19);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)std::string v73 = v60;
        *(_OWORD *)&v73[16] = v61;
        *(void *)&v73[32] = v8;
        long long v74 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (!*((unsigned char *)a3 + 112))
        {
LABEL_13:
          uint64_t v43 = 0;
          uint64_t v42 = 0;
          uint64_t v9 = 0;
          int v45 = 0;
          goto LABEL_15;
        }
LABEL_10:
        uint64_t v10 = (uint64_t **)*((void *)a3 + 20);
        if (v10)
        {
          YAML::detail::node_data::end(**v10, (uint64_t)&v60);
          char v11 = (std::__shared_weak_count *)*((void *)a3 + 19);
          if (v11)
          {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            int v45 = v60;
            uint64_t v43 = *((void *)&v60 + 1);
            uint64_t v42 = v61;
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            uint64_t v9 = v11;
          }
          else
          {
            uint64_t v9 = 0;
            int v45 = v60;
            uint64_t v43 = *((void *)&v60 + 1);
            uint64_t v42 = v61;
          }
          goto LABEL_15;
        }
        goto LABEL_13;
      }
      *(_OWORD *)std::string v73 = v60;
      *(_OWORD *)&v73[16] = v61;
      *(void *)&v73[32] = v8;
    }
    else
    {
      *(_DWORD *)std::string v73 = 0;
      memset(&v73[8], 0, 32);
    }
    long long v74 = 0;
    goto LABEL_10;
  }
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v9 = 0;
  int v45 = 0;
  *(_DWORD *)std::string v73 = 0;
  memset(&v73[8], 0, 32);
  long long v74 = 0;
LABEL_15:
  long long v46 = v9;
  while (1)
  {
    if (*(_DWORD *)v73 == v45)
    {
      int v12 = &v73[8];
      uint64_t v13 = v43;
      if (v45 != 1)
      {
        if (v45 != 2) {
          break;
        }
        int v12 = &v73[16];
        uint64_t v13 = v42;
      }
      if (*(void *)v12 == v13) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v60, (uint64_t)v73);
    if (!v63)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v65) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v64, *((std::string::size_type *)&v64 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = v64;
        *(void *)&__p[16] = v65;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)__p);
    }
    *(void *)std::string __p = &v63;
    YAML::as_if<std::string,void>::operator()(&v59, (YAML::Node **)__p);
    if ((*((unsigned char *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v59.__r_.__value_.__l.__size_ == 5)
      {
        if (*(_DWORD *)v59.__r_.__value_.__l.__data_ == 1734439797
          && *(unsigned char *)(v59.__r_.__value_.__r.__words[0] + 4) == 101)
        {
LABEL_55:
          siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)__p, (const YAML::detail::iterator_value *)&v60);
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((uint64_t *)v5 + 3, *(uint64_t **)__p, *(uint64_t **)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 4);
          *(void *)std::string v56 = __p;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
          goto LABEL_101;
        }
        goto LABEL_43;
      }
      if (v59.__r_.__value_.__l.__size_ != 6) {
        goto LABEL_43;
      }
      uint64_t v14 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v59.__r_.__value_.__r.__words[2]) == 5)
      {
        if (LODWORD(v59.__r_.__value_.__l.__data_) == 1734439797 && v59.__r_.__value_.__s.__data_[4] == 101) {
          goto LABEL_55;
        }
LABEL_43:
        std::operator+<char>();
        uint64_t v21 = std::string::append((std::string *)v56, "\" in override for pattern schema");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v21->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (a2) {
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)__p);
        }
        else {
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if ((v56[23] & 0x80000000) != 0) {
          operator delete(*(void **)v56);
        }
        goto LABEL_101;
      }
      if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 6) {
        goto LABEL_43;
      }
      uint64_t v14 = &v59;
    }
    int data = (int)v14->__r_.__value_.__l.__data_;
    int v16 = WORD2(v14->__r_.__value_.__r.__words[0]);
    if (data != 1869177961 || v16 != 29549) {
      goto LABEL_43;
    }
    memset(&v58, 0, sizeof(v58));
    if (!v67)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v41 = 0;
      int v26 = 0;
      *(_DWORD *)std::string v56 = 0;
      memset(&v56[8], 0, 32);
      unsigned int v57 = 0;
      goto LABEL_91;
    }
    if (v72)
    {
      YAML::detail::node_data::begin(**v72, (uint64_t)__p);
      uint64_t v18 = v70;
      char v19 = v71;
      if (v71)
      {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)std::string v56 = *(_OWORD *)__p;
        *(_OWORD *)&v56[16] = *(_OWORD *)&__p[16];
        *(void *)&v56[32] = v18;
        unsigned int v57 = v19;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        if (!v67) {
          goto LABEL_62;
        }
      }
      else
      {
        *(_OWORD *)std::string v56 = *(_OWORD *)__p;
        *(_OWORD *)&v56[16] = *(_OWORD *)&__p[16];
        *(void *)&v56[32] = v70;
        unsigned int v57 = 0;
      }
    }
    else
    {
      *(_DWORD *)std::string v56 = 0;
      memset(&v56[8], 0, 32);
      unsigned int v57 = 0;
    }
    if (!v72)
    {
LABEL_62:
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v41 = 0;
      int v26 = 0;
      goto LABEL_91;
    }
    YAML::detail::node_data::end(**v72, (uint64_t)__p);
    long long v27 = v71;
    if (v71)
    {
      atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      int v26 = *(_DWORD *)__p;
      uint64_t v24 = *(void *)&__p[8];
      uint64_t v25 = *(void *)&__p[16];
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      int v41 = v27;
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    else
    {
      int v41 = 0;
      int v26 = *(_DWORD *)__p;
      uint64_t v24 = *(void *)&__p[8];
      uint64_t v25 = *(void *)&__p[16];
    }
LABEL_91:
    while (1)
    {
      if (*(_DWORD *)v56 == v26)
      {
        int v37 = &v56[8];
        uint64_t v38 = v24;
        if (v26 != 1)
        {
          if (v26 != 2) {
            break;
          }
          int v37 = &v56[16];
          uint64_t v38 = v25;
        }
        if (*(void *)v37 == v38) {
          break;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v56);
      if (!__p[0])
      {
        uint64_t v39 = __cxa_allocate_exception(0x38uLL);
        if ((__p[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        }
        else
        {
          *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p[8];
          __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&__p[24];
        }
        YAML::InvalidNode::InvalidNode(v39, (uint64_t)&__v);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)__p;
      YAML::as_if<std::string,void>::operator()(&v47, (YAML::Node **)&__v);
      std::vector<std::string>::pointer end = v58.__end_;
      if (v58.__end_ >= v58.__end_cap_.__value_)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) > v31) {
          unint64_t v31 = 0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v31;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v58.__end_cap_;
        if (v32) {
          uint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v58.__end_cap_, v32);
        }
        else {
          uint64_t v33 = 0;
        }
        char v34 = v33 + v30;
        __v.__first_ = v33;
        __v.__begin_ = v34;
        __v.__end_cap_.__value_ = &v33[v32];
        long long v35 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        v34->__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        memset(&v47, 0, sizeof(v47));
        __v.__end_ = v34 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v58, &__v);
        uint64_t v36 = v58.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v58.__end_ = v36;
        uint64_t v9 = v46;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v29 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        v58.__end_->__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
        v58.__end_ = end + 1;
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (v54 < 0) {
        operator delete(v53);
      }
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v51 < 0) {
        operator delete(v50);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v56);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v5 + 2, v58.__begin_, (long long *)v58.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3));
    *(void *)std::string __p = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_101:
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(*((void **)&v60 + 1));
    }
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v73);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
}

void sub_1C5F3186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  a49 = &a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a64 < 0) {
    operator delete(__p);
  }
  YAML::detail::iterator_value::~iterator_value((YAML::detail::iterator_value *)&a65);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  char v67 = *(std::__shared_weak_count **)(v65 - 152);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  uint64_t v68 = *(std::__shared_weak_count **)(a11 + 8);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseExamplesYAML(std::vector<std::string> *this, const YAML::detail::iterator_value *a2)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::string::size_type v4 = (char *)a2 + 112;
  if (YAML::Node::Type((const YAML::detail::iterator_value *)((char *)a2 + 112)) != 3) {
    return;
  }
  if (!*v4)
  {
    uint64_t v8 = 0;
    uint64_t v27 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    *(_DWORD *)uint64_t v38 = 0;
    memset(&v38[8], 0, 32);
    uint64_t v39 = 0;
    goto LABEL_16;
  }
  std::string v5 = (uint64_t **)*((void *)a2 + 20);
  if (!v5)
  {
    *(_DWORD *)uint64_t v38 = 0;
    memset(&v38[8], 0, 32);
LABEL_10:
    uint64_t v39 = 0;
    goto LABEL_11;
  }
  YAML::detail::node_data::begin(**v5, (uint64_t)v30);
  uint64_t v7 = *((void *)a2 + 18);
  int v6 = (std::__shared_weak_count *)*((void *)a2 + 19);
  if (!v6)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v30;
    *(_OWORD *)&v38[16] = *(_OWORD *)&v30[16];
    *(void *)&v38[32] = v7;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v30;
  *(_OWORD *)&v38[16] = *(_OWORD *)&v30[16];
  *(void *)&v38[32] = v7;
  uint64_t v39 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (!*v4) {
    goto LABEL_14;
  }
LABEL_11:
  char v11 = (uint64_t **)*((void *)a2 + 20);
  if (!v11)
  {
LABEL_14:
    uint64_t v8 = 0;
    uint64_t v27 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    goto LABEL_16;
  }
  YAML::detail::node_data::end(**v11, (uint64_t)v30);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 19);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    int v10 = *(_DWORD *)v30;
    uint64_t v8 = *(void *)&v30[8];
    uint64_t v27 = *(void *)&v30[16];
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    int v10 = *(_DWORD *)v30;
    uint64_t v8 = *(void *)&v30[8];
    uint64_t v27 = *(void *)&v30[16];
  }
LABEL_16:
  uint64_t v28 = v9;
  while (1)
  {
    if (*(_DWORD *)v38 == v10)
    {
      int v12 = &v38[8];
      uint64_t v13 = v8;
      if (v10 != 1)
      {
        if (v10 != 2) {
          break;
        }
        int v12 = &v38[16];
        uint64_t v13 = v27;
      }
      if (*(void *)v12 == v13) {
        break;
      }
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v30, (uint64_t)v38);
    if (!v30[0])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if ((v30[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&v30[8], *(std::string::size_type *)&v30[16]);
      }
      else
      {
        *(_OWORD *)&__v.__first_ = *(_OWORD *)&v30[8];
        __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&v30[24];
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&__v);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v30;
    YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&__v);
    std::vector<std::string>::pointer end = this->__end_;
    value = this->__end_cap_.__value_;
    if (end >= value)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      if (v20) {
        uint64_t v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&this->__end_cap_, v20);
      }
      else {
        uint64_t v21 = 0;
      }
      long long v22 = v21 + v17;
      __v.__first_ = v21;
      __v.__begin_ = v22;
      __v.__end_cap_.__value_ = &v21[v20];
      long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v22->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v22 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      uint64_t v24 = this->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      this->__end_ = v24;
      uint64_t v9 = v28;
      if (v25 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
      this->__end_ = end + 1;
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if ((v30[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v30[8]);
    }
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v38);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
}

void sub_1C5F31DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  *(void *)(v20 - 192) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 192));
  _Unwind_Resume(a1);
}

void *YAML::BadConversion::BadConversion(void *a1, _DWORD *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bad conversion");
  YAML::Exception::Exception((uint64_t)a1, a2, (long long *)__p);
  *a1 = &unk_1F2125CE8;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1F2125EE8;
  return a1;
}

void sub_1C5F31F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::TypedBadConversion<BOOL>::~TypedBadConversion(std::runtime_error *a1)
{
  YAML::Exception::~Exception(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t *YAML::Node::Scalar(YAML::Node *this)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v5 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  uint64_t v2 = (void **)*((void *)this + 6);
  if (v2) {
    return (uint64_t *)(**v2 + 56);
  }
  YAML::detail::node_data::empty_scalar(this);
  return &YAML::detail::node_data::empty_scalar(void)::svalue;
}

void sub_1C5F32030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  std::string::size_type v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((void *)this + 4) = *((void *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)this + 5) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 6) = *((void *)a2 + 6);
  *((unsigned char *)this + 56) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  return this;
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2, const YAML::Node *a3)
{
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((unsigned char *)this + 56) = *(unsigned char *)a2;
  uint64_t v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 8);
    v6->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)this + 11) = *((void *)a2 + 4);
  *((void *)this + 12) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 13) = *((void *)a2 + 6);
  *((unsigned char *)this + 112) = *(unsigned char *)a3;
  uint64_t v9 = (std::string *)((char *)this + 120);
  if (*((char *)a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a3 + 1), *((void *)a3 + 2));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a3 + 8);
    *((void *)this + 17) = *((void *)a3 + 3);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a3 + 5);
  *((void *)this + 18) = *((void *)a3 + 4);
  *((void *)this + 19) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 20) = *((void *)a3 + 6);
  return this;
}

void sub_1C5F32214(_Unwind_Exception *a1)
{
  YAML::Node::~Node(v2);
  YAML::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::EnsureNodeExists(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(v1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
    }
    else {
      std::string v3 = *(std::string *)(v1 + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v3);
  }
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void sub_1C5F32390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

YAML::detail::node *YAML::detail::node::get<std::string>(YAML::detail::node *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v8 = *(uint64_t **)a1;
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *v8;
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v9 = *v8;
  }
  unsigned int v10 = *(_DWORD *)(v9 + 16);
  if (v10 < 2 || v10 == 3)
  {
    if (a4)
    {
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](a4);
      uint64_t v34 = a3;
      long long v35 = a4;
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v34 = a3;
      long long v35 = 0;
    }
    YAML::detail::node_data::convert_to_map(v9, (uint64_t)&v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  else if (v10 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<std::string>(exception, a2);
  }
  int v12 = *(YAML::detail::node ***)(v9 + 112);
  if (v12 == *(YAML::detail::node ***)(v9 + 120))
  {
LABEL_59:
    if (a4) {
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v36[0] = 1;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    std::string __p = 0;
    operator new();
  }
  while (1)
  {
    uint64_t v13 = *v12;
    if (a4)
    {
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      memset(&v43, 0, sizeof(v43));
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string __p = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = a4;
    }
    else
    {
      uint64_t v14 = 0;
      memset(&v43, 0, sizeof(v43));
      std::string __p = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v40 = a3;
    int v41 = v14;
    v36[0] = 1;
    uint64_t v42 = v13;
    if (!v13 || (uint64_t v15 = **(void **)v13, !*(unsigned char *)v15) || *(_DWORD *)(v15 + 16) != 2)
    {
      int v17 = 0;
      if (!v14) {
        goto LABEL_26;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      goto LABEL_26;
    }
    long long v16 = (const std::string *)YAML::Node::Scalar((YAML::Node *)v36);
    std::string::operator=(&v43, v16);
    int v17 = 1;
    if (v14) {
      goto LABEL_25;
    }
LABEL_26:
    if (a4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a4);
    }
    if (!v17) {
      goto LABEL_48;
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *(void *)(a2 + 8);
    }
    if (size != v19)
    {
      LOBYTE(v17) = 0;
      goto LABEL_48;
    }
    if (v20 >= 0) {
      uint64_t v21 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v21 = *(unsigned __int8 **)a2;
    }
    if ((*((unsigned char *)&v43.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      unint64_t v30 = (void *)v43.__r_.__value_.__r.__words[0];
      LOBYTE(v17) = memcmp(v43.__r_.__value_.__l.__data_, v21, v43.__r_.__value_.__l.__size_) == 0;
LABEL_51:
      operator delete(v30);
LABEL_52:
      if (!a4) {
        goto LABEL_54;
      }
LABEL_53:
      std::__shared_weak_count::__release_shared[abi:ne180100](a4);
      goto LABEL_54;
    }
    if (*((unsigned char *)&v43.__r_.__value_.__s + 23))
    {
      uint64_t v22 = HIBYTE(v43.__r_.__value_.__r.__words[2]) - 1;
      long long v23 = &v43;
      do
      {
        int v25 = v23->__r_.__value_.__s.__data_[0];
        long long v23 = (std::string *)((char *)v23 + 1);
        int v24 = v25;
        int v27 = *v21++;
        int v26 = v27;
        BOOL v29 = v22-- != 0;
        LOBYTE(v17) = v24 == v26;
      }
      while (v24 == v26 && v29);
LABEL_48:
      if ((*((unsigned char *)&v43.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        unint64_t v30 = (void *)v43.__r_.__value_.__r.__words[0];
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    LOBYTE(v17) = 1;
    if (a4) {
      goto LABEL_53;
    }
LABEL_54:
    if (v17) {
      break;
    }
    v12 += 2;
    if (v12 == *(YAML::detail::node ***)(v9 + 120)) {
      goto LABEL_59;
    }
  }
  unint64_t v32 = v12[1];
  if (a4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  YAML::detail::node::add_dependency(v32, a1);
  return v32;
}

void sub_1C5F32850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v28);
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void YAML::detail::node::add_dependency(YAML::detail::node *this, YAML::detail::node *a2)
{
  if (***(unsigned char ***)this)
  {
    YAML::detail::node::mark_defined(a2);
  }
  else
  {
    long long v5 = (uint64_t **)((char *)this + 24);
    std::string::size_type v4 = (uint64_t *)*((void *)this + 3);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = (uint64_t **)v4;
          unint64_t v7 = v4[4];
          if (v7 <= (unint64_t)a2) {
            break;
          }
          std::string::size_type v4 = *v6;
          long long v5 = v6;
          if (!*v6) {
            goto LABEL_13;
          }
        }
        if (v7 >= (unint64_t)a2) {
          break;
        }
        std::string::size_type v4 = v6[1];
        if (!v4)
        {
          long long v5 = v6 + 1;
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v6 = (uint64_t **)((char *)this + 24);
LABEL_13:
      uint64_t v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = (uint64_t)a2;
      uint64_t *v8 = 0;
      v8[1] = 0;
      std::string v8[2] = (uint64_t)v6;
      *long long v5 = v8;
      uint64_t v9 = **((void **)this + 2);
      if (v9)
      {
        *((void *)this + 2) = v9;
        unsigned int v10 = *v5;
      }
      else
      {
        unsigned int v10 = v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 3), v10);
      ++*((void *)this + 4);
    }
  }
}

void YAML::detail::node::mark_defined(YAML::detail::node *this)
{
  uint64_t v1 = **(void **)this;
  if (!*(unsigned char *)v1)
  {
    if (!*(_DWORD *)(v1 + 16)) {
      *(_DWORD *)(v1 + 16) = 1;
    }
    *(unsigned char *)uint64_t v1 = 1;
    std::string v3 = (char *)*((void *)this + 2);
    std::string::size_type v4 = (char *)this + 24;
    if (v3 != (char *)this + 24)
    {
      do
      {
        YAML::detail::node::mark_defined(*((YAML::detail::node **)v3 + 4));
        long long v5 = (char *)*((void *)v3 + 1);
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            long long v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (char *)*((void *)v3 + 2);
            BOOL v7 = *(void *)v6 == (void)v3;
            std::string v3 = v6;
          }
          while (!v7);
        }
        std::string v3 = v6;
      }
      while (v6 != v4);
    }
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((void **)this + 3));
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 2) = v4;
  }
}

void *YAML::BadSubscript::BadSubscript<std::string>(void *a1, uint64_t a2)
{
  uint64_t v14 = -1;
  int v15 = -1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"operator[] call on a scalar", 27);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (key: \"", 8);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\")", 2);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v19);
  YAML::Exception::Exception((uint64_t)a1, &v14, &v12);
  *a1 = &unk_1F2125CE8;
  if (v13 < 0) {
    operator delete((void *)v12);
  }
  *a1 = &unk_1F2125F28;
  return a1;
}

void sub_1C5F32D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_1C5F32EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5F32F44(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::default_delete<YAML::detail::memory_holder>::operator()[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<YAML::detail::memory_holder>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::memory_holder>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t *std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  siri::dialogengine::PatternSchema *result = 0;
  if (v1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*a1);
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void YAML::TypedBadConversion<std::string>::~TypedBadConversion(std::runtime_error *a1)
{
  YAML::Exception::~Exception(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t siri::dialogengine::DialogDateTime::toString(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  long long v23 = 0uLL;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unsigned int v20 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v23 + 8, (uint64_t)&v23, (uint64_t)&v22, (int *)&v21 + 1, (unsigned int *)&v21, &v20, (uint64_t)v18);
  long long v4 = v23;
  uint64_t v5 = v22;
  BOOL v6 = v23 != 0;
  if (v23 != 0 || v22)
  {
    int v7 = HIDWORD(v21);
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v18, (uint64_t)&v17);
    memset(&v16, 0, sizeof(v16));
    if ((void)v4)
    {
      std::string::append(&v16, "MMMM");
      if (v5) {
        std::string::append(&v16, " d");
      }
    }
    if (*((void *)&v4 + 1))
    {
      if (v5 && (void)v4) {
        std::string::append(&v16, ",");
      }
      if (v7 >= 1000) {
        uint64_t v9 = " y";
      }
      else {
        uint64_t v9 = " y G";
      }
      std::string::append(&v16, v9);
    }
    if (!v6) {
      MEMORY[0x1C8796900](&v16, "d");
    }
    siri::dialogengine::Context::GetLocale(this, v8, (uint64_t)v13);
    siri::dialogengine::StringTrim(" \t\n\r", &v16, &__p);
    siri::dialogengine::GetICULocalizedPattern();
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    std::string v16 = v15;
    *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    siri::dialogengine::Context::GetLocale(this, v10, (uint64_t)v13);
    siri::dialogengine::GetICUFormattedDateTimeString(&v15, &v17);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    operator new();
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  return 0;
}

void sub_1C5F334F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v41, 0x10B3C40D3060B95);
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDateComponents(siri::dialogengine::Context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, unsigned int *a7, unsigned int *a8, uint64_t a9)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "year");
  *(void *)a3 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "month");
  *(void *)a4 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "day");
  *(void *)a5 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)a3) {
    int v19 = (int)*(double *)(*(void *)a3 + 72);
  }
  else {
    int v19 = 2000;
  }
  *a6 = v19;
  if (*(void *)a4) {
    int v20 = (int)*(double *)(*(void *)a4 + 72);
  }
  else {
    int v20 = 1;
  }
  *a7 = v20;
  if (*(void *)a5) {
    int v21 = (int)*(double *)(*(void *)a5 + 72);
  }
  else {
    int v21 = 1;
  }
  *a8 = v21;
  if (OptionalStringParameter)
  {
    if (OptionalStringParameter[95] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((void *)OptionalStringParameter + 10));
    }
    else {
      std::string __p = *(std::string *)(OptionalStringParameter + 3);
    }
  }
  else
  {
    siri::dialogengine::Context::GetCurrentTimeZone(a1, &__p);
  }
  if (*(char *)(a9 + 23) < 0) {
    operator delete(*(void **)a9);
  }
  *(std::string *)a9 = __p;
  if (*a7 - 13 <= 0xFFFFFFF3)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"dialog.DateTime type has an invalid month value (%d)", v17, *a7);
    unsigned int v22 = *a7;
    if ((int)*a7 <= 1) {
      unsigned int v22 = 1;
    }
    if (v22 >= 0xC) {
      unsigned int v22 = 12;
    }
    *a7 = v22;
  }
  if (*a8 - 32 <= 0xFFFFFFE0)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"dialog.DateTime type has an invalid day value (%d)", v17, *a8);
    unsigned int v23 = *a8;
    if ((int)*a8 <= 1) {
      unsigned int v23 = 1;
    }
    if (v23 >= 0x1F) {
      unsigned int v23 = 31;
    }
    *a8 = v23;
  }
}

void sub_1C5F33814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogDateTime::year(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "year");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  uint64_t v5 = OptionalNumberParameter;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
LABEL_3:
    }
      operator new();
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  return 0;
}

void sub_1C5F338F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::month(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "month");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  uint64_t v5 = OptionalNumberParameter;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
LABEL_3:
    }
      operator new();
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  return 0;
}

void sub_1C5F33A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::day(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "day");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  uint64_t v5 = OptionalNumberParameter;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
LABEL_3:
    }
      operator new();
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  return 0;
}

void sub_1C5F33B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::yearString(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "year");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p, (uint64_t)a2);
  if (v17 < 0) {
    operator delete(__p);
  }
  unsigned int v23 = OptionalNumberParameter;
  if (OptionalNumberParameter)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    unsigned int v19 = 0;
    memset(v18, 0, sizeof(v18));
    siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v23, (uint64_t)&v22, (uint64_t)&v21, (int *)&v20 + 1, (unsigned int *)&v20, &v19, (uint64_t)v18);
    int v6 = HIDWORD(v20);
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v18, (uint64_t)&__p);
    memset(&v15, 0, sizeof(v15));
    if (v6 >= 1000) {
      int v7 = "y";
    }
    else {
      int v7 = "y G";
    }
    std::string::append(&v15, v7);
    siri::dialogengine::Context::GetLocale(this, v8, (uint64_t)v12);
    siri::dialogengine::StringTrim(" \t\n\r", &v15, &v11);
    siri::dialogengine::GetICULocalizedPattern();
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string v15 = v14;
    *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
    v14.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    siri::dialogengine::Context::GetLocale(this, v9, (uint64_t)v12);
    siri::dialogengine::GetICUFormattedDateTimeString(&v14, &__p);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    operator new();
  }
  return 0;
}

void sub_1C5F33D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v41, 0x10B3C40D3060B95);
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_1C5F33E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x1C5F33E50);
  }
  JUMPOUT(0x1C5F33E54);
}

uint64_t siri::dialogengine::DialogDateTime::monthName(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned int v7 = 0;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, (int *)&v8 + 1, (unsigned int *)&v8, &v7, (uint64_t)v5);
  if (v10)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v5, (uint64_t)v4);
    operator new();
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
  return 0;
}

void sub_1C5F33FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  MEMORY[0x1C8796D70](v43, 0x10B3C40D3060B95);
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v44 - 73) < 0) {
    operator delete(*(void **)(v44 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::dayName(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned int v7 = 0;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, (int *)&v8 + 1, (unsigned int *)&v8, &v7, (uint64_t)v5);
  if (v11 && v10 && v9)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v5, (uint64_t)v4);
    operator new();
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
  return 0;
}

void sub_1C5F34204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  MEMORY[0x1C8796D70](v43, 0x10B3C40D3060B95);
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v44 - 73) < 0) {
    operator delete(*(void **)(v44 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::asCalendar(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned int v7 = 0;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, (int *)&v8 + 1, (unsigned int *)&v8, &v7, (uint64_t)v5);
  if (v11)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v5, (uint64_t)&v4);
    operator new();
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
  return 0;
}

void sub_1C5F3447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogDateTime::timeZone(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unsigned int v5 = 0;
  memset(v4, 0, sizeof(v4));
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)&v7, (int *)&v6 + 1, (unsigned int *)&v6, &v5, (uint64_t)v4);
  siri::dialogengine::GetICUTimeStampForDate((uint64_t)v4, (uint64_t)&v3);
  operator new();
}

void sub_1C5F34728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", a4);
  SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized((SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SecondaryHeader_Emphasized_default_instance_, v4);
  qword_1EB6900C0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB6900C8 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  *(void *)this = &unk_1F211FA40;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F34910(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::GetMetadata(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return qword_1EA3D9518;
}

void InitDefaultsscc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", a4);
  SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard((SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SecondaryHeader_Standard_default_instance_, v4);
  qword_1EB690F30 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690F38 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this)
{
  *(void *)this = &unk_1F211F980;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F34A40(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SecondaryHeader_Standard::GetMetadata(SnippetUI::SecondaryHeader_Standard *this)
{
  return file_level_metadata_SecondaryHeader_2eproto;
}

uint64_t SnippetUI::SecondaryHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::SecondaryHeader_Standard::MergeFrom(SnippetUI::SecondaryHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 360);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F34B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Standard::MergeFrom(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 375);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      long long v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        long long v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        char v13 = v11;
      }
      else {
        char v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F34CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Standard::CopyFrom(SnippetUI::SecondaryHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Standard::Clear(this);
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Standard::Clear(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::SecondaryHeader_Standard *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SecondaryHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        long long v12 = v5 + 2;
        do
        {
          char v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  std::string v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      std::string v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        uint64_t v20 = v5 + 2;
        do
        {
          uint64_t v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        char v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *uint64_t v20 = v22;
      }
      else
      {
        v5[2] = v19;
        char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  int v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    int v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    int v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  int v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SecondaryHeader_Standard::_InternalParse(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        char v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallback = v17;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v15;
        TagFallback = v17;
      }
      char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    char v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::SecondaryHeader_Standard::GetCachedSize(SnippetUI::SecondaryHeader_Standard *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::SecondaryHeader_Standard::ByteSizeLong(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SecondaryHeader_Standard::IsInitialized(SnippetUI::SecondaryHeader_Standard *this)
{
  return 1;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::New(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(a2);
}

SnippetUI::SecondaryHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Standard>);
  }
  SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F35384(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::New(SnippetUI::SecondaryHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(0);
}

void SnippetUI::SecondaryHeader_Standard::~SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this)
{
  SnippetUI::SecondaryHeader_Standard::~SecondaryHeader_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F211F980;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::SecondaryHeader_Emphasized::MergeFrom(SnippetUI::SecondaryHeader_Emphasized *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 658);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F355DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Emphasized::MergeFrom(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 673);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      long long v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        long long v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        char v13 = v11;
      }
      else {
        char v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F35738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Emphasized::CopyFrom(SnippetUI::SecondaryHeader_Emphasized *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Emphasized::Clear(this);
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Emphasized::Clear(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SecondaryHeader_Emphasized::InternalSerializeWithCachedSizesToArray(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        long long v12 = v5 + 2;
        do
        {
          char v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  std::string v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      std::string v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        uint64_t v20 = v5 + 2;
        do
        {
          uint64_t v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        char v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *uint64_t v20 = v22;
      }
      else
      {
        v5[2] = v19;
        char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  int v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    int v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    int v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  int v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Emphasized.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SecondaryHeader_Emphasized::_InternalParse(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        char v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Emphasized.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallback = v17;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v15;
        TagFallback = v17;
      }
      char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    char v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::GetCachedSize(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::SecondaryHeader_Emphasized::ByteSizeLong(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::IsInitialized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return 1;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::New(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(a2);
}

SnippetUI::SecondaryHeader_Emphasized *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Emphasized *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Emphasized>);
  }
  SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F35E04(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Emphasized>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::New(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(0);
}

void SnippetUI::SecondaryHeader_Emphasized::~SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  SnippetUI::SecondaryHeader_Emphasized::~SecondaryHeader_Emphasized(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F211FA40;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::SecondaryHeader_Standard::InitAsDefaultInstance(SnippetUI::SecondaryHeader_Standard *this)
{
  qword_1EB690F30 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690F38 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SecondaryHeader_Standard::_Internal::text_1(SnippetUI::SecondaryHeader_Standard::_Internal *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::SecondaryHeader_Standard::_Internal::action(SnippetUI::SecondaryHeader_Standard::_Internal *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SecondaryHeader_Standard::clear_text_1(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SecondaryHeader_Standard::clear_action(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  *(void *)this = &unk_1F211F980;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F36184(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SecondaryHeader_Standard::default_instance(SnippetUI::SecondaryHeader_Standard *this)
{
  if (atomic_load_explicit(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto);
  }
  return &SnippetUI::_SecondaryHeader_Standard_default_instance_;
}

void SnippetUI::SecondaryHeader_Standard::CopyFrom(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Standard::Clear(this);
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Standard::InternalSwap(SnippetUI::SecondaryHeader_Standard *this, SnippetUI::SecondaryHeader_Standard *a2)
{
  uint64_t v4 = (SnippetUI::SecondaryHeader_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

void SnippetUI::SecondaryHeader_Emphasized::InitAsDefaultInstance(SnippetUI::SecondaryHeader_Emphasized *this)
{
  qword_1EB6900C0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB6900C8 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::_Internal::text_1(SnippetUI::SecondaryHeader_Emphasized::_Internal *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::_Internal::action(SnippetUI::SecondaryHeader_Emphasized::_Internal *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::clear_text_1(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::clear_action(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  *(void *)this = &unk_1F211FA40;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F36574(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SecondaryHeader_Emphasized::default_instance(SnippetUI::SecondaryHeader_Emphasized *this)
{
  if (atomic_load_explicit(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto);
  }
  return &SnippetUI::_SecondaryHeader_Emphasized_default_instance_;
}

void SnippetUI::SecondaryHeader_Emphasized::CopyFrom(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Emphasized::Clear(this);
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Emphasized::InternalSwap(SnippetUI::SecondaryHeader_Emphasized *this, SnippetUI::SecondaryHeader_Emphasized *a2)
{
  uint64_t v4 = (SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

uint64_t non-virtual thunk to'siri::dialogengine::Dialog::Validate(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Dialog::Validate((siri::dialogengine::Dialog *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::Dialog::Validate(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  char v5 = siri::dialogengine::Node::Validate(this, a2);
  if (!*((unsigned char *)this + 545) || !*((unsigned char *)this + 544)) {
    goto LABEL_39;
  }
  if (*((unsigned char *)this + 547) && *((unsigned char *)this + 546))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dialog has both attributes 'printOnly' and 'spokenOnly' set to true");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, (uint64_t)this);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v5 = 0;
  }
  if (*((char *)this + 255) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 29), *((void *)this + 30));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 232);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    BOOL v7 = 1;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*((char *)this + 423) < 0) {
      std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)this + 50), *((void *)this + 51));
    }
    else {
      std::string v33 = *(std::string *)((char *)this + 400);
    }
    std::string::size_type v8 = v33.__r_.__value_.__l.__size_;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    BOOL v7 = v8 != 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_15:
      if (!v7) {
        goto LABEL_29;
      }
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&__p, "Dialog is marked 'printOnly' but includes spoken content");
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, (uint64_t)this);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
      goto LABEL_29;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v7) {
    goto LABEL_26;
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(&v33, "dialog");
  std::string::basic_string[abi:ne180100]<0>(v31, "printOnly");
  siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)v31, &__p);
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, (uint64_t)this);
    char v5 = 0;
    char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v10 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_39:
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 208), v4, (uint64_t *)&__p);
  char v11 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::Dialog *)((char *)this + 208), v12, (uint64_t *)&__p);
  char v13 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 376), v14, (uint64_t *)&__p);
  char v15 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::Dialog *)((char *)this + 376), v16, (uint64_t *)&__p);
  char v17 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  char v18 = v17 & v15 & v13 & v11 & v5;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v33, (const void ***)this + 9);
  std::string::size_type v19 = v33.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v33.__r_.__value_.__l.__data_ != &v33.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (long long *)(v19 + 32));
      std::string::basic_string[abi:ne180100]<0>(v26, "dialog");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v26, (uint64_t)&__p, v31);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      unint64_t v20 = v32;
      unsigned __int8 v21 = v32;
      if ((v32 & 0x80u) != 0) {
        unint64_t v20 = (unint64_t)v31[1];
      }
      if (v20)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v31, (uint64_t)this);
        char v18 = 0;
        unsigned __int8 v21 = v32;
      }
      if ((v21 & 0x80) != 0) {
        operator delete(v31[0]);
      }
      if (v30 < 0) {
        operator delete(v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unsigned int v22 = *(std::string **)(v19 + 8);
      if (v22)
      {
        do
        {
          unsigned int v23 = v22;
          unsigned int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        while (v22);
      }
      else
      {
        do
        {
          unsigned int v23 = *(std::string **)(v19 + 16);
          BOOL v24 = v23->__r_.__value_.__r.__words[0] == v19;
          std::string::size_type v19 = (std::string::size_type)v23;
        }
        while (!v24);
      }
      std::string::size_type v19 = (std::string::size_type)v23;
    }
    while (v23 != (std::string *)&v33.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v33.__r_.__value_.__l.__size_);
  return v18 & 1;
}

void sub_1C5F36B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'siri::dialogengine::Dialog::~Dialog(siri::dialogengine::Dialog *this)
{
  siri::dialogengine::Dialog::~Dialog((siri::dialogengine::Dialog *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Dialog::~Dialog((siri::dialogengine::Dialog *)((char *)this - 64));
}

void siri::dialogengine::Dialog::~Dialog(siri::dialogengine::Dialog *this)
{
  *(void *)this = &unk_1F2122610;
  *((void *)this + 8) = &unk_1F2122668;
  if (*((char *)this + 599) < 0) {
    operator delete(*((void **)this + 72));
  }
  if (*((char *)this + 575) < 0) {
    operator delete(*((void **)this + 69));
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 47);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 26);
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  uint64_t vars8;

  siri::dialogengine::Dialog::~Dialog(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::Dialog::Execute(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
}

void sub_1C5F372D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (v33[575] < 0) {
    operator delete(*v32);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(v31);
  siri::dialogengine::SpeakableString::~SpeakableString(v34);
  siri::dialogengine::Node::~Node((siri::dialogengine::Node *)v33);
  MEMORY[0x1C8796D70](v33, 0x10B3C401AEFB8B5);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a9);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a31);
  int v37 = *(std::__shared_weak_count **)(v35 - 128);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v35 - 112);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Dialog::ProcessString(siri::dialogengine::Context *a1@<X1>, uint64_t a2@<X8>)
{
  siri::dialogengine::SpeakableString::SpeakableString((std::string *)a2, a1);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  siri::dialogengine::RemoveUnicodeControlChars();
}

void sub_1C5F386B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v40 - 201) < 0) {
    operator delete(*(void **)(v40 - 224));
  }
  if (*(char *)(v40 - 233) < 0) {
    operator delete(*(void **)(v40 - 256));
  }
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  if (*(char *)(v40 - 137) < 0) {
    operator delete(*(void **)(v40 - 160));
  }
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(v39);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Dialog::SetFull(siri::dialogengine::Dialog *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 208), a2);
  std::string::operator=((std::string *)((char *)this + 232), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 256), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 280), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 304), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 328), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 352), a2 + 6);
}

std::string *siri::dialogengine::Dialog::SetSupporting(siri::dialogengine::Dialog *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 376), a2);
  std::string::operator=((std::string *)((char *)this + 400), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 424), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 448), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 472), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 496), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 520), a2 + 6);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

double siri::dialogengine::StripUnnecessaryPunctuation(uint64_t a1, uint64_t a2)
{
  {
    operator new();
  }
  uint64_t v4 = (std::once_flag::_State_type *)siri::dialogengine::GetPunctuationRegex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetPunctuationRegex(void)::flag, memory_order_acquire) != -1)
  {
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::string v16 = &v14;
    std::__call_once(v4, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPunctuationRegex(void)::$_0 &&>>);
  }
  char v5 = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetPunctuationRegex(void)::sRegex;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0) {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)a2;
  }
  else {
    v7.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  v8.__i_ = &v7.__i_[v6];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)a1, v7, v8, v5, "$1");
  {
    operator new();
  }
  std::string::size_type v9 = (std::once_flag::_State_type *)siri::dialogengine::GetDoublePunctuationRegex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetDoublePunctuationRegex(void)::flag, memory_order_acquire) != -1)
  {
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::string v16 = &v14;
    std::__call_once(v9, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDoublePunctuationRegex(void)::$_0 &&>>);
  }
  memset(&v14, 0, sizeof(v14));
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    v11.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  }
  else {
    v11.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  v12.__i_ = &v11.__i_[v10];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v14, v11, v12, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetDoublePunctuationRegex(void)::sRegex, "$1$2$3");
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&v14.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v14;
  return result;
}

void sub_1C5F38ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDoublePunctuationRegex(void)::$_0 &&>>()
{
}

void sub_1C5F38F78(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPunctuationRegex(void)::$_0 &&>>()
{
}

void sub_1C5F38FE8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Dialog::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

std::string *siri::dialogengine::Dialog::GetFull@<X0>(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Dialog *)((char *)this + 208));
}

std::string *siri::dialogengine::Dialog::GetSupporting@<X0>(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Dialog *)((char *)this + 376));
}

BOOL siri::dialogengine::Dialog::GetPrintOnly(siri::dialogengine::Dialog *this)
{
  return *((unsigned char *)this + 545) && *((unsigned char *)this + 544) != 0;
}

uint64_t siri::dialogengine::Dialog::SetPrintOnly(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 544) = a2;
  return result;
}

uint64_t siri::dialogengine::Dialog::IsPrintOnlyDefined(siri::dialogengine::Dialog *this)
{
  return *((unsigned __int8 *)this + 545);
}

BOOL siri::dialogengine::Dialog::GetSpokenOnly(siri::dialogengine::Dialog *this)
{
  return *((unsigned char *)this + 547) && *((unsigned char *)this + 546) != 0;
}

uint64_t siri::dialogengine::Dialog::SetSpokenOnly(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 546) = a2;
  return result;
}

uint64_t siri::dialogengine::Dialog::IsSpokenOnlyDefined(siri::dialogengine::Dialog *this)
{
  return *((unsigned __int8 *)this + 547);
}

void siri::dialogengine::Dialog::GetType(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 69), *((void *)this + 70));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 71);
  }
}

std::string *siri::dialogengine::Dialog::SetType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 23, a2);
}

void siri::dialogengine::Dialog::GetKeywords(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 599) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 72), *((void *)this + 73));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 36);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 74);
  }
}

std::string *siri::dialogengine::Dialog::SetKeywords(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 24, a2);
}

void siri::dialogengine::Dialog::GetExpandedFull(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 208), a2, &v4);
  if (v4) {
    siri::dialogengine::Dialog::ProcessString(v4, a3);
  }
  *(void *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5F39208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Dialog::GetExpandedSupporting(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 376), a2, &v4);
  if (v4) {
    siri::dialogengine::Dialog::ProcessString(v4, a3);
  }
  *(void *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5F39298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Dialog::HasRequiredVariablesOrPhrases(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  uint64_t v3 = (siri::dialogengine::Dialog *)((char *)this + 208);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 208), (const char *)a2, v13);
  if (siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v13))
  {
    uint64_t HasRequiredVariablesOrPhrases = 1;
    goto LABEL_12;
  }
  BOOL v6 = siri::dialogengine::SpeakableString::SpeakEqualsPrint(v3);
  if (!v6)
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v3, v5, v12);
    if (siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v12))
    {
      uint64_t HasRequiredVariablesOrPhrases = 1;
LABEL_11:
      v11[0] = (void **)v12;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v11);
      goto LABEL_12;
    }
  }
  std::__wrap_iter<const char *> v7 = (siri::dialogengine::Dialog *)((char *)this + 376);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 376), v5, (uint64_t *)v11);
  uint64_t HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v11);
  if ((HasRequiredVariablesOrPhrases & 1) != 0 || siri::dialogengine::SpeakableString::SpeakEqualsPrint(v7))
  {
    v10[0] = (void **)v11;
  }
  else
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v7, v8, (uint64_t *)v10);
    uint64_t HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v10);
    std::string v14 = v10;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v11;
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v10);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_12:
  v11[0] = (void **)v13;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v11);
  return HasRequiredVariablesOrPhrases;
}

void sub_1C5F393D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a13;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if ((v19 & 1) == 0)
  {
    a13 = (void **)&a16;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a13);
  }
  a13 = (void **)&a19;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::Dialog::operator==(uint64_t a1, uint64_t a2)
{
  if (!siri::dialogengine::Node::operator==(a1, a2)
    || !siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208))|| !siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 376), (unsigned __int8 *)(a2 + 376)))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 545) && *(unsigned char *)(a2 + 545))
  {
    if (*(unsigned __int8 *)(a1 + 544) != *(unsigned __int8 *)(a2 + 544)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 545) != 0) != (*(unsigned char *)(a2 + 545) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 547) && *(unsigned char *)(a2 + 547))
  {
    if (*(unsigned __int8 *)(a1 + 546) != *(unsigned __int8 *)(a2 + 546)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 547) != 0) != (*(unsigned char *)(a2 + 547) != 0))
  {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 575);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 575);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 560);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 575);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 560);
  }
  if (v5 != v6) {
    return 0;
  }
  std::__wrap_iter<const char *> v8 = (const void **)(a1 + 552);
  if (v7 >= 0) {
    std::string::size_type v9 = (unsigned __int8 *)(a2 + 552);
  }
  else {
    std::string::size_type v9 = *(unsigned __int8 **)(a2 + 552);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 560))) {
      goto LABEL_30;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 575))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      std::__wrap_iter<const char *> v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_30;
      }
    }
    return 0;
  }
LABEL_30:
  return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(a1 + 576), (unsigned __int8 *)(a2 + 576));
}

BOOL siri::dialogengine::Dialog::operator!=(uint64_t a1, uint64_t a2)
{
  return !siri::dialogengine::Dialog::operator==(a1, a2);
}

void YAML::Stream::Stream(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_1C5F397F8(_Unwind_Exception *a1)
{
  std::deque<char>::~deque[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

BOOL YAML::Stream::_ReadAheadTo(YAML::Stream *this, unint64_t a2)
{
  for (std::string i = *(void **)this; !*(_DWORD *)((char *)i + *(void *)(*i - 24) + 32); std::string i = *(void **)this)
  {
    unint64_t v5 = *((void *)this + 8);
    if (v5 > a2) {
      return v5 > a2;
    }
    switch(*((_DWORD *)this + 5))
    {
      case 0:
        YAML::Stream::StreamInUtf8(this);
        break;
      case 1:
      case 2:
        YAML::Stream::StreamInUtf16(this);
        break;
      case 3:
      case 4:
        YAML::Stream::StreamInUtf32(this);
        break;
      default:
        continue;
    }
  }
  char v7 = 4;
  std::deque<char>::push_back((void *)this + 3, &v7);
  unint64_t v5 = *((void *)this + 8);
  return v5 > a2;
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      char v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void YAML::Stream::StreamInUtf8(YAML::Stream *this)
{
  char NextByte = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    char v3 = NextByte;
    std::deque<char>::push_back((void *)this + 3, &v3);
  }
}

void YAML::Stream::StreamInUtf16(YAML::Stream *this)
{
  int v2 = *((_DWORD *)this + 5);
  char NextByte = YAML::Stream::GetNextByte(this);
  char v13 = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    BOOL v3 = v2 == 2;
    BOOL v4 = v2 != 2;
    if (v2 == 2) {
      p_char NextByte = &NextByte;
    }
    else {
      p_char NextByte = &v13;
    }
    uint64_t v6 = *p_NextByte;
    if ((v6 & 0xFC) == 0xDC)
    {
      char v7 = (void *)((char *)this + 24);
LABEL_7:
      unint64_t v8 = 65533;
    }
    else
    {
      unint64_t v9 = *(&NextByte + v3) | (unint64_t)(v6 << 8);
      if ((v6 & 0xFC) == 0xD8)
      {
        while (1)
        {
          unint64_t v10 = v9;
          char NextByte = YAML::Stream::GetNextByte(this);
          char v13 = YAML::Stream::GetNextByte(this);
          if (*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
          {
            char v7 = (void *)((char *)this + 24);
            goto LABEL_7;
          }
          unint64_t v9 = *(&NextByte + v3) | ((unint64_t)*(&NextByte + v4) << 8);
          unint64_t v11 = ((unint64_t)*(&NextByte + v4) << 8) - 57344;
          if (v11 > 0xFFFFFFFFFFFFFBFFLL) {
            break;
          }
          YAML::QueueUnicodeCodepoint((void *)this + 3, 0xFFFDuLL);
          if (v11 <= 0xFFFFFFFFFFFFF7FFLL)
          {
            char v7 = (void *)((char *)this + 24);
            unint64_t v8 = v10;
            goto LABEL_16;
          }
        }
        unint64_t v9 = (*(&NextByte + v3) | (unint64_t)((*(&NextByte + v4) << 8) & 0x3FF) | ((v10 & 0x3FF) << 10))
           + 0x10000;
      }
      char v7 = (void *)((char *)this + 24);
      unint64_t v8 = v9;
    }
LABEL_16:
    YAML::QueueUnicodeCodepoint(v7, v8);
  }
}

void YAML::Stream::StreamInUtf32(YAML::Stream *this)
{
  if (*((_DWORD *)this + 5) == 4) {
    int v2 = (char *)&unk_1C616F174;
  }
  else {
    int v2 = (char *)&YAML::Stream::StreamInUtf32(void)const::indexes;
  }
  v5[0] = YAML::Stream::GetNextByte(this);
  v5[1] = YAML::Stream::GetNextByte(this);
  v5[2] = YAML::Stream::GetNextByte(this);
  v5[3] = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v4 = v5[*(int *)&v2[v3]] | (v4 << 8);
      v3 += 4;
    }
    while (v3 != 16);
    YAML::QueueUnicodeCodepoint((void *)this + 3, v4);
  }
}

void std::deque<char>::push_back(void *a1, unsigned char *a2)
{
  unint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 9) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x1000)
    {
      a1[4] = v8 - 4096;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          int v45 = (uint64_t *)a1[1];
          unint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            unint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            char v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)char v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            unint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            unsigned int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            unsigned int v22 = (char *)a1[1];
          }
          unint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)unint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      unint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    BOOL v24 = (char *)a1[3];
    int v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      char v27 = operator new(0x1000uLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          char v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v51);
          unint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          std::string v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            std::string v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::string v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::string v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          long long v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        int v62 = (char *)a1[1];
        char v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v96);
            int v99 = &v97[8 * (v96 >> 2)];
            uint64_t v100 = (uint64_t *)a1[1];
            char v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              char v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            int v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              char v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            unsigned int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            char v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)char v63 = v64;
      }
      else
      {
        *(void *)unint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    char v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v29);
    uint64_t v32 = v31;
    std::string v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v109 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v109;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v74);
      std::string v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v106 = v36;
      long long v109 = v38;
      operator delete(v30);
      long long v36 = v106;
    }
    long long v38 = v109;
LABEL_56:
    *(void *)std::string v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        char v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          long long v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v85);
          std::string::size_type v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string::size_type v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            std::string::size_type v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            uint64_t v91 = v79;
            v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)uint64_t v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v107 = v36;
            long long v111 = v38;
            operator delete(v78);
            long long v36 = v107;
            long long v38 = v111;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          std::string::size_type v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            char v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v108 = *((void *)&v36 + 1);
            uint64_t v110 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v108;
            *(void *)&long long v38 = v110;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        std::string::size_type v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(unsigned char *)(*(void *)&v5[(v9 >> 9) & 0x7FFFFFFFFFFFF8] + (v9 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_1C5F3A1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t YAML::Stream::GetNextByte(YAML::Stream *this)
{
  unint64_t v2 = *((void *)this + 11);
  if (v2 < *((void *)this + 10)) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(*(void *)this + *(void *)(**(void **)this - 24) + 40);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 64))(v3, *((void *)this + 9), 2048);
  unint64_t v2 = 0;
  *((void *)this + 10) = v4;
  *((void *)this + 11) = 0;
  if (v4) {
    goto LABEL_5;
  }
  unint64_t v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24));
  std::ios_base::clear(v5, v5->__rdstate_ | 2);
  if (*((void *)this + 10))
  {
    unint64_t v2 = *((void *)this + 11);
LABEL_5:
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 11) = v2 + 1;
    return *(unsigned __int8 *)(v6 + v2);
  }
  return 0;
}

void YAML::QueueUnicodeCodepoint(void *a1, unint64_t a2)
{
  if (a2 == 4) {
    unint64_t v3 = 65533;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (v3 >> 16)
      {
        char v8 = (v3 >> 18) & 7 | 0xF0;
        std::deque<char>::push_back(a1, &v8);
        char v7 = (v3 >> 12) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v7);
        char v6 = (v3 >> 6) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v6);
        char v5 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v5;
      }
      else
      {
        char v11 = (v3 >> 12) | 0xE0;
        std::deque<char>::push_back(a1, &v11);
        char v10 = (v3 >> 6) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v10);
        char v9 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v9;
      }
    }
    else
    {
      char v13 = (v3 >> 6) | 0xC0;
      std::deque<char>::push_back(a1, &v13);
      char v12 = v3 & 0x3F | 0x80;
      uint64_t v4 = &v12;
    }
  }
  else
  {
    char v14 = v3;
    uint64_t v4 = &v14;
  }
  std::deque<char>::push_back(a1, v4);
}

void YAML::Stream::~Stream(YAML::Stream *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    MEMORY[0x1C8796D50](v2, 0x1000C8077774924);
  }
  std::deque<char>::~deque[abi:ne180100]((uint64_t)this + 24);
}

uint64_t YAML::Stream::peek(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
    return *(char *)(*(void *)(*((void *)this + 4)
  }
                                             + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*((void *)this + 7) & 0xFFFLL));
  else {
    return 4;
  }
}

BOOL YAML::Stream::operator BOOL(void *a1)
{
  if (!*(_DWORD *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32)) {
    return 1;
  }
  if (a1[8]) {
    return *(unsigned char *)(*(void *)(a1[4] + ((a1[7] >> 9) & 0x7FFFFFFFFFFFF8)) + (a1[7] & 0xFFFLL)) != 4;
  }
  return 0;
}

uint64_t YAML::Stream::get(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
    int v2 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
  }
                            + (*((void *)this + 7) & 0xFFFLL));
  else {
    int v2 = 4;
  }
  YAML::Stream::AdvanceCurrent(this);
  ++*((_DWORD *)this + 4);
  if (v2 == 10) {
    *(void *)((char *)this + 12) = (*((_DWORD *)this + 3) + 1);
  }
  return (char)v2;
}

void YAML::Stream::AdvanceCurrent(YAML::Stream *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = v2 - 1;
  unint64_t v4 = *((void *)this + 7) + 1;
  *((void *)this + 7) = v4;
  *((void *)this + 8) = v3;
  if (v4 >= 0x2000)
  {
    operator delete(**((void ***)this + 4));
    *((void *)this + 4) += 8;
    uint64_t v3 = *((void *)this + 8);
    *((void *)this + 7) -= 4096;
  }
  ++*((_DWORD *)this + 2);
  if (!v3)
  {
LABEL_5:
    YAML::Stream::_ReadAheadTo(this, 0);
  }
}

void YAML::Stream::get(YAML::Stream *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  if (v3 >= 1)
  {
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(a3, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_1C5F3A674(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

YAML::Stream *YAML::Stream::eat(YAML::Stream *this, int a2)
{
  if (a2 >= 1)
  {
    int v2 = a2;
    int v3 = this;
    do
    {
      this = (YAML::Stream *)YAML::Stream::get(v3);
      --v2;
    }
    while (v2);
  }
  return this;
}

double siri::dialogengine::TestSuite::TestSuite(siri::dialogengine::TestSuite *this, char a2)
{
  *(unsigned char *)this = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)this = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t siri::dialogengine::TestSuite::LoadTests(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4, unsigned __int8 *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  while (v7 != v8)
    siri::dialogengine::TestCase::~TestCase((void **)(v7 - 256));
  *(void *)(a1 + 16) = v8;
  std::string::basic_string[abi:ne180100]<0>(__p, "tests");
  siri::dialogengine::JoinPath(a2, (uint64_t)__p, (uint64_t)v42);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (siri::dialogengine::DirExists((uint64_t *)v42))
  {
    siri::dialogengine::ListDirRecursively((const char *)v42, (uint64_t)&v40);
    unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
    if (v41 == v40) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((unint64_t)v40, v41, v11, 1);
    char v12 = v40;
    char v13 = v41;
    while (v12 != v13)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".json");
      BOOL v14 = siri::dialogengine::StringEndsWith((std::string *)v12, (unsigned __int8 *)__p);
      BOOL v15 = v14;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (v15)
        {
LABEL_15:
          siri::dialogengine::CatPathToId((unsigned __int8 *)v12, &v39);
          std::string::basic_string[abi:ne180100]<0>(__p, ".catfamily");
          if (siri::dialogengine::StringContains((char **)v12, (char *)__p))
          {
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v38, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
            }
            else {
              std::string v38 = v39;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v38, "");
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, ".patternfamily");
          if (siri::dialogengine::StringContains((char **)v12, (char *)__p))
          {
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v37, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
            }
            else {
              std::string v37 = v39;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v37, "");
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          siri::dialogengine::BaseName((uint64_t)v12, __p);
          siri::dialogengine::RemoveExtension((uint64_t)__p, &v36);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          uint64_t v17 = a3[23];
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = a3[23];
          }
          else {
            uint64_t v18 = *((void *)a3 + 1);
          }
          if (!v18) {
            goto LABEL_61;
          }
          if (a4)
          {
            std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v37.__r_.__value_.__l.__size_;
            }
            if (v18 == size)
            {
              if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v16 = &v37;
              }
              else {
                uint64_t v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
              }
              if ((v17 & 0x80) == 0)
              {
                if (a3[23])
                {
                  unint64_t v20 = a3;
                  while (*v20 == v16->__r_.__value_.__s.__data_[0])
                  {
                    ++v20;
                    uint64_t v16 = (std::string *)((char *)v16 + 1);
                    if (!--v17) {
                      goto LABEL_61;
                    }
                  }
                  goto LABEL_81;
                }
LABEL_61:
                uint64_t v23 = a5[23];
                if ((v23 & 0x80u) == 0) {
                  uint64_t v24 = a5[23];
                }
                else {
                  uint64_t v24 = *((void *)a5 + 1);
                }
                if (!v24)
                {
LABEL_78:
                  char v27 = v12;
                  if (v12[1].n128_i8[7] < 0) {
                    char v27 = (__n128 *)v12->n128_u64[0];
                  }
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Loading CAT Test Case: %s", (const char *)v16, v27);
                  siri::dialogengine::JoinPath((uint64_t)v42, (uint64_t)v12, (uint64_t)v35);
                  siri::dialogengine::ReadFileToString((uint64_t)v35, &v34);
                  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v44);
                }
                std::string::size_type v25 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
                if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v25 = v36.__r_.__value_.__l.__size_;
                }
                if (v24 == v25)
                {
                  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v16 = &v36;
                  }
                  else {
                    uint64_t v16 = (std::string *)v36.__r_.__value_.__r.__words[0];
                  }
                  if ((v23 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)a5, v16, *((void *)a5 + 1))) {
                      goto LABEL_78;
                    }
                  }
                  else
                  {
                    if (!a5[23]) {
                      goto LABEL_78;
                    }
                    uint64_t v26 = a5;
                    while (*v26 == v16->__r_.__value_.__s.__data_[0])
                    {
                      ++v26;
                      uint64_t v16 = (std::string *)((char *)v16 + 1);
                      if (!--v23) {
                        goto LABEL_78;
                      }
                    }
                  }
                }
                goto LABEL_81;
              }
              goto LABEL_60;
            }
          }
          else
          {
            std::string::size_type v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v21 = v38.__r_.__value_.__l.__size_;
            }
            if (v18 == v21)
            {
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v16 = &v38;
              }
              else {
                uint64_t v16 = (std::string *)v38.__r_.__value_.__r.__words[0];
              }
              if ((v17 & 0x80) == 0)
              {
                if (a3[23])
                {
                  unsigned int v22 = a3;
                  while (*v22 == v16->__r_.__value_.__s.__data_[0])
                  {
                    ++v22;
                    uint64_t v16 = (std::string *)((char *)v16 + 1);
                    if (!--v17) {
                      goto LABEL_61;
                    }
                  }
                  goto LABEL_81;
                }
                goto LABEL_61;
              }
LABEL_60:
              if (!memcmp(*(const void **)a3, v16, *((void *)a3 + 1))) {
                goto LABEL_61;
              }
            }
          }
LABEL_81:
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (v14)
      {
        goto LABEL_15;
      }
      char v12 = (__n128 *)((char *)v12 + 24);
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = *(void *)a2;
    }
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"No 'tests' directory found under template directory: %s", v9, v28);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  return 1;
}

void sub_1C5F3B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  *(void *)(v77 + 40) = v78;
  if (*(char *)(v79 - 233) < 0) {
    operator delete(*(void **)(v79 - 256));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v79 - 208);
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a77);
  }
  *(void *)(v79 - 208) = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v79 - 208));
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestCase>>(unint64_t a1)
{
  if (HIBYTE(a1)) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 8);
}

uint64_t std::__split_buffer<siri::dialogengine::TestCase>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 256;
    siri::dialogengine::TestCase::~TestCase((void **)(i - 256));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *siri::dialogengine::TestSuite::GetTests@<X0>(std::string *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  std::string::size_type v4 = this->__r_.__value_.__r.__words[2];
  uint64_t v5 = v4 - size;
  if (v4 != size)
  {
    if (v5 < 0) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    std::string::value_type v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestCase>>(v5 >> 8);
    uint64_t v7 = 0;
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[256 * v8];
    do
    {
      this = siri::dialogengine::TestCase::TestCase((std::string *)&v6[v7], (const siri::dialogengine::TestCase *)(size + v7));
      v7 += 256;
    }
    while (size + v7 != v4);
    a2[1] = &v6[v7];
  }
  return this;
}

void sub_1C5F3B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::string *siri::dialogengine::TestSuite::GetParseErrors@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

void YAML::Exception::~Exception(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1F2127260;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

void YAML::ParserException::~ParserException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::RepresentationException::~RepresentationException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::InvalidScalar::~InvalidScalar(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::InvalidNode::~InvalidNode(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadConversion::~BadConversion(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadDereference::~BadDereference(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadPushback::~BadPushback(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadInsert::~BadInsert(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::EmitterException::~EmitterException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadFile::~BadFile(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::KeyNotFound::~KeyNotFound(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void YAML::BadSubscript::~BadSubscript(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C8796D70);
}

void sub_1C5F3BC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::CatUpdater::Encrypted::~Encrypted((siri::dialogengine::CatUpdater::Encrypted *)&a9);

  _Unwind_Resume(a1);
}

void sub_1C5F3BDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3C298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,id a36)
{
  siri::dialogengine::CatUpdater::Encrypted::~Encrypted((siri::dialogengine::CatUpdater::Encrypted *)&a20);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v44 - 136));

  _Unwind_Resume(a1);
}

void sub_1C5F3C420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3C844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,char a24)
{
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a24);
  _Unwind_Resume(a1);
}

void sub_1C5F3C99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3CE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,char a26)
{
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a26);
  _Unwind_Resume(a1);
}

void sub_1C5F3CF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3D4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, ...)
{
  va_start(va, a16);

  siri::dialogengine::CatUpdater::Encrypted::~Encrypted((siri::dialogengine::CatUpdater::Encrypted *)va);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v23 - 136));

  _Unwind_Resume(a1);
}

void sub_1C5F3D660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3D7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  siri::dialogengine::CatUpdater::Encrypted::~Encrypted((siri::dialogengine::CatUpdater::Encrypted *)va);
  _Unwind_Resume(a1);
}

void sub_1C5F3DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F3DFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F3E214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3E81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::CatUpdater::Encrypted::~Encrypted((siri::dialogengine::CatUpdater::Encrypted *)&a25);

  _Unwind_Resume(a1);
}

void sub_1C5F3EAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3EBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3EC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3EE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F3EF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::ClearPatternState(uint64_t a1, uint64_t a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v4 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 8);
  if (v13 >= 0) {
    std::string::value_type v6 = __p;
  }
  else {
    std::string::value_type v6 = (void **)__p[0];
  }
  if (v4)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    memmove(v6, v7, v4);
  }
  strcpy((char *)v6 + v4, "#pattern");
  if (v13 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear pattern state for Pattern ID [%s]", v5, v8);
  char v9 = +[DEBundle frameworkUserSettings];
  if (v13 >= 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  uint64_t v11 = [NSString stringWithUTF8String:v10];
  [v9 removeObjectForKey:v11];

  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5F3F100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = v17;

  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::Clear(uint64_t a1, const char *a2, unsigned __int8 *a3)
{
  if ((a3[23] & 0x80u) == 0) {
    size_t v4 = (uint64_t *)a3;
  }
  else {
    size_t v4 = *(uint64_t **)a3;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear dialog state for CAT ID [%s]", a2, v4);
  uint64_t v5 = +[DEBundle frameworkUserSettings];
  if ((a3[23] & 0x80u) == 0) {
    std::string::value_type v6 = (uint64_t *)a3;
  }
  else {
    std::string::value_type v6 = *(uint64_t **)a3;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  [v5 removeObjectForKey:v7];
  siri::dialogengine::GetFamilyIdFromCatId(a3, (uint64_t)__p);
  if (v13 < 0)
  {
    if (!__p[1])
    {
      uint64_t v11 = v7;
LABEL_19:
      operator delete(__p[0]);
      goto LABEL_20;
    }
    char v9 = (void **)__p[0];
  }
  else
  {
    if (!v13)
    {
      uint64_t v11 = v7;
      goto LABEL_20;
    }
    char v9 = __p;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear dialog state for CAT family [%s]", v8, v9);
  if (v13 >= 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  uint64_t v11 = [NSString stringWithUTF8String:v10];

  [v5 removeObjectForKey:v11];
  if (v13 < 0) {
    goto LABEL_19;
  }
LABEL_20:
}

void sub_1C5F3F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::PatternUpdate(double a1, uint64_t a2, const void ***a3, char *a4, _OWORD *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  char v9 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
  os_signpost_id_t v10 = os_signpost_id_generate(v9);
  uint64_t v11 = v9;
  char v12 = v11;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (a4[23] >= 0) {
      char v13 = a4;
    }
    else {
      char v13 = *(char **)a4;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v10, "UpdatePatternState", "PATTERN_ID = %s", buf, 0xCu);
  }

  BOOL v14 = +[DEBundle frameworkUserSettings];
  if (a4[23] >= 0) {
    size_t v15 = a4[23];
  }
  else {
    size_t v15 = *((void *)a4 + 1);
  }
  uint64_t v16 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v15 + 8);
  if (v34 < 0) {
    uint64_t v16 = *(unsigned char **)buf;
  }
  if (v15)
  {
    if (a4[23] >= 0) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = *(char **)a4;
    }
    memmove(v16, v17, v15);
  }
  strcpy(&v16[v15], "#pattern");
  if (v34 >= 0) {
    uint64_t v18 = buf;
  }
  else {
    uint64_t v18 = *(unsigned char **)buf;
  }
  uint64_t v19 = [NSString stringWithUTF8String:v18];
  unint64_t v20 = [v14 dictionaryForKey:v19];
  *(void *)&long long v32 = siri::dialogengine::DialogStatePatternFromNSDictionary(v20, v21);
  *((void *)&v32 + 1) = v22;

  uint64_t v23 = std::string::basic_string[abi:ne180100]<0>(__p, "");
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v28 = v29;
  siri::dialogengine::DialogStateBase::UpdateStats(a1, (uint64_t)v23, a3, (unsigned __int8 *)__p, (const void ***)&v28, 0, 0, (uint64_t)&v32);
  std::__tree<std::string>::destroy((uint64_t)&v28, v29[0]);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v25 = siri::dialogengine::DialogStatePatternToNSDictionary((siri::dialogengine *)&v32, v24);
  [v14 setObject:v25 forKey:v19];

  if (a5) {
    *a5 = v32;
  }
  uint64_t v26 = v12;
  char v27 = v26;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v27, OS_SIGNPOST_INTERVAL_END, v10, "UpdatePatternState", "", (uint8_t *)__p, 2u);
  }

  if (v34 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1C5F3F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::Update(double a1, uint64_t a2, const void ***a3, unsigned __int8 *a4, const void ***a5, uint64_t a6, uint64_t a7, _OWORD *a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  char v13 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
  os_signpost_id_t v14 = os_signpost_id_generate(v13);
  size_t v15 = v13;
  uint64_t v16 = v15;
  os_signpost_id_t spid = v14;
  unint64_t v17 = v14 - 1;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    if ((a4[23] & 0x80u) == 0) {
      uint64_t v18 = (uint64_t *)a4;
    }
    else {
      uint64_t v18 = *(uint64_t **)a4;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v18;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "SaveState", "CAT_ID = %s", buf, 0xCu);
  }

  siri::dialogengine::GetFamilyIdFromCatId(a4, (uint64_t)&__p);
  uint64_t v19 = +[DEBundle frameworkUserSettings];
  if ((a4[23] & 0x80u) == 0) {
    unint64_t v20 = (uint64_t *)a4;
  }
  else {
    unint64_t v20 = *(uint64_t **)a4;
  }
  std::string::size_type v21 = objc_msgSend(NSString, "stringWithUTF8String:", v20, spid);
  if ((v45 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  uint64_t v23 = [NSString stringWithUTF8String:p_p];
  uint64_t v24 = [v19 dictionaryForKey:v21];
  siri::dialogengine::DialogStateUseCaseFromNSDictionary(v24, buf);

  long long v42 = 0uLL;
  uint64_t v26 = v45;
  if ((v45 & 0x80u) != 0) {
    uint64_t v26 = v44;
  }
  if (v26)
  {
    char v27 = [v19 dictionaryForKey:v23];
    *(void *)&long long v42 = siri::dialogengine::DialogStateFamilyFromNSDictionary(v27, v28);
    *((void *)&v42 + 1) = v29;
  }
  siri::dialogengine::DialogStateBase::UpdateStats(a1, v25, a3, a4, a5, (uint64_t)buf, (uint64_t)&v42, 0);
  char v31 = siri::dialogengine::DialogStateUseCaseToNSDictionary((siri::dialogengine *)buf, v30);
  [v19 setObject:v31 forKey:v21];

  uint64_t v33 = v45;
  if ((v45 & 0x80u) != 0) {
    uint64_t v33 = v44;
  }
  if (v33)
  {
    char v34 = siri::dialogengine::DialogStateFamilyToNSDictionary((siri::dialogengine *)&v42, v32);
    [v19 setObject:v34 forKey:v23];
  }
  if (a7)
  {
    *(_OWORD *)a7 = *(_OWORD *)buf;
    if (buf != (uint8_t *)a7)
    {
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a7 + 16), v47, &v48);
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a7 + 40), v49, v50);
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *> *,long>>(a7 + 64, (long long *)v50[2], &v51);
    }
  }
  if (a8)
  {
    uint64_t v35 = v45;
    if ((v45 & 0x80u) != 0) {
      uint64_t v35 = v44;
    }
    if (v35) {
      *a8 = v42;
    }
  }
  std::string v36 = v16;
  std::string v37 = v36;
  if (v17 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
  {
    *(_WORD *)unint64_t v41 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v37, OS_SIGNPOST_INTERVAL_END, spida, "SaveState", "", v41, 2u);
  }

  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v51);
  std::__tree<std::string>::destroy((uint64_t)&v49, v50[0]);
  std::__tree<std::string>::destroy((uint64_t)&v47, v48);

  if ((char)v45 < 0) {
    operator delete(__p);
  }
}

void sub_1C5F3F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  if (*(void *)(a1 + 16))
  {
    std::string::value_type v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v19 = a1;
    unint64_t v20 = v8;
    std::string::size_type v21 = v8;
    if (v8)
    {
      unint64_t v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          v8[7] = *((void *)v9 + 7);
          if (v8 != (uint64_t *)v9) {
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v8 + 64, *((char **)v9 + 8), *((void *)v9 + 9), (uint64_t)(*((void *)v9 + 9) - *((void *)v9 + 8)) >> 3);
          }
          std::string::operator=((std::string *)(v8 + 11), (const std::string *)((char *)v9 + 88));
          os_signpost_id_t v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          uint64_t v8 = v20;
          std::string::size_type v21 = v20;
          if (v20) {
            unint64_t v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          }
          char v12 = (long long *)*((void *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              char v12 = *(long long **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v13 = *(void *)a2 == (void)v9;
              char v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          char v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>((uint64_t)&v19, a1, a2 + 2);
      os_signpost_id_t v14 = (uint64_t *)v19;
      size_t v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)(v19 + 32));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      uint64_t v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      uint64_t v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (long long *)*((void *)a2 + 2);
          BOOL v13 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1C5F3FC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v2);
  }
  return a1;
}

uint64_t siri::dialogengine::DialogStateClient::GetPattern(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3 = (const void *)*((unsigned __int8 *)a3 + 23);
  if ((char)v3 < 0) {
    uint64_t v3 = a3[1];
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = +[DEBundle frameworkUserSettings];
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 8);
  if (v16 < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "#pattern");
  if (v16 >= 0) {
    char v9 = __p;
  }
  else {
    char v9 = (void **)__p[0];
  }
  os_signpost_id_t v10 = [NSString stringWithUTF8String:v9];
  uint64_t v11 = [v5 dictionaryForKey:v10];
  uint64_t v13 = siri::dialogengine::DialogStatePatternFromNSDictionary(v11, v12);

  if (v16 < 0) {
    operator delete(__p[0]);
  }

  return v13;
}

void sub_1C5F3FDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStateClient::GetFamily(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 8);
  }
  if (!v3) {
    return 0;
  }
  siri::dialogengine::GetFamilyIdFromCatId((unsigned __int8 *)a3, (uint64_t)__p);
  unint64_t v4 = v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    uint64_t v5 = +[DEBundle frameworkUserSettings];
    if ((v13 & 0x80u) == 0) {
      size_t v6 = __p;
    }
    else {
      size_t v6 = (void **)__p[0];
    }
    uint64_t v7 = [NSString stringWithUTF8String:v6];
    uint64_t v8 = [v5 dictionaryForKey:v7];
    uint64_t v10 = siri::dialogengine::DialogStateFamilyFromNSDictionary(v8, v9);

    if ((v13 & 0x80) != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if ((v13 & 0x80) != 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  return v10;
}

void sub_1C5F3FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::GetUseCase(uint64_t *a1@<X2>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a1[1];
  }
  if (v3)
  {
    uint64_t v5 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
    os_signpost_id_t v6 = os_signpost_id_generate(v5);
    uint64_t v7 = v5;
    uint64_t v8 = v7;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v9 = a1;
      }
      else {
        char v9 = (uint64_t *)*a1;
      }
      int v16 = 136315138;
      unint64_t v17 = v9;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LoadState", "CAT_ID = %s", (uint8_t *)&v16, 0xCu);
    }

    uint64_t v10 = +[DEBundle frameworkUserSettings];
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = (uint64_t *)*a1;
    }
    char v12 = [NSString stringWithUTF8String:v11];
    unsigned __int8 v13 = [v10 dictionaryForKey:v12];
    siri::dialogengine::DialogStateUseCaseFromNSDictionary(v13, a2);
    os_signpost_id_t v14 = v8;
    size_t v15 = v14;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      LOWORD(v16) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v15, OS_SIGNPOST_INTERVAL_END, v6, "LoadState", "", (uint8_t *)&v16, 2u);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3] = 0;
    a2[2] = a2 + 3;
    a2[6] = 0;
    a2[4] = 0;
    a2[5] = a2 + 6;
    a2[10] = 0;
    a2[9] = 0;
    a2[7] = 0;
    a2[8] = a2 + 9;
  }
}

void sub_1C5F40144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::~DialogStateClient(siri::dialogengine::DialogStateClient *this)
{
}

void *siri::dialogengine::DialogStateClient::DialogStateClient(void *this)
{
  *this = &unk_1F211FCE8;
  return this;
}

{
  *this = &unk_1F211FCE8;
  return this;
}

std::string *siri::dialogengine::GradingAllowList::GradingAllowList(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  siri::dialogengine::GradingAllowList::ReadFile((siri::dialogengine::GradingAllowList *)this);
  return this;
}

void sub_1C5F4027C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GradingAllowList::ReadFile(siri::dialogengine::GradingAllowList *this)
{
  v52[4] = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GradingAllowList");
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog);
  os_signpost_id_t v44 = v2;
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v3 = v2;
    unint64_t v4 = siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog))
    {
      long long v5 = this;
      if (*((char *)this + 23) < 0) {
        long long v5 = *(siri::dialogengine::GradingAllowList **)this;
      }
      long long v6 = (void *)((char *)this + 24);
      if (*((char *)this + 47) < 0) {
        long long v6 = (void *)*v6;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = v5;
      __int16 v47 = 2080;
      v48[0] = v6;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "ReadFile", "bundleId = %s filePath = %s", buf, 0x16u);
    }
  }
  v50[0] = &unk_1F211FDE8;
  v50[1] = &v44;
  v50[3] = v50;
  uint64_t v51 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v52, (uint64_t)v50);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v50);
  uint64_t v7 = (void *)((char *)this + 24);
  std::ifstream::basic_ifstream((uint64_t *)buf);
  int v9 = *((char *)this + 47);
  if (*(void *)((char *)&v48[15] + 2))
  {
    if (v9 < 0) {
      uint64_t v7 = (void *)*v7;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: Begin reading allow list file: %s", v8, v7);
    uint64_t v33 = this;
    memset(&__p, 0, sizeof(__p));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
    memset(&v37, 0, sizeof(v37));
    char v36 = 0;
    uint64_t v11 = (const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
    if ((v11->__rdstate_ & 2) == 0)
    {
      char v34 = (uint64_t **)((char *)this + 48);
      char v31 = &v40[4];
      long long v32 = v40;
      char v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        std::ios_base::getloc(v11);
        unsigned __int8 v13 = std::locale::use_facet((const std::locale *)&v35, v12);
        unsigned __int8 v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v35);
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, (uint64_t)&__p, v14);
        siri::dialogengine::StringTrimLeft(" \t\n\r", &__p, &v35);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v35;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!__p.__r_.__value_.__l.__size_) {
            goto LABEL_51;
          }
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (!*((unsigned char *)&v35.__r_.__value_.__s + 23)) {
            goto LABEL_51;
          }
          p_p = &__p;
        }
        if (p_p->__r_.__value_.__s.__data_[0] != 35)
        {
          std::ios_base::clear((std::ios_base *)((char *)v38 + *(void *)(v38[0] - 24)), 0);
          std::string::operator=(&v41, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v39);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          {
            *v37.__r_.__value_.__l.__data_ = 0;
            v37.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v37.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
          }
          char v36 = 0;
          MEMORY[0x1C8796A50](&v45, v38, 0);
          if (!v45) {
            goto LABEL_50;
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          {
            *v37.__r_.__value_.__l.__data_ = 0;
            v37.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v37.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
          }
          uint64_t v16 = *(void *)(v38[0] - 24);
          uint64_t v17 = *(void *)((char *)&v38[3] + v16);
          if (v17 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = *(void *)((char *)&v38[3] + v16);
          }
          std::ios_base::getloc((const std::ios_base *)((char *)v38 + v16));
          uint64_t v19 = std::locale::use_facet((const std::locale *)&v35, v12);
          std::locale::~locale((std::locale *)&v35);
          uint64_t v20 = 0;
          if (v17 >= 1) {
            uint64_t v21 = v18;
          }
          else {
            uint64_t v21 = 0x7FFFFFFFFFFFFFF7;
          }
          while (1)
          {
            uint64_t v22 = *(void **)&v40[*(void *)(v38[0] - 24) + 8];
            uint64_t v23 = (unsigned char *)v22[3];
            if (v23 == (unsigned char *)v22[4])
            {
              int v24 = (*(uint64_t (**)(void *))(*v22 + 72))(v22);
              if (v24 == -1)
              {
                int v27 = 2;
LABEL_47:
                uint64_t v28 = v38[0];
                *(void *)&v40[*(void *)(v38[0] - 24) - 8] = 0;
                if (!v20) {
                  v27 |= 4u;
                }
                std::ios_base::clear((std::ios_base *)((char *)v38 + *(void *)(v28 - 24)), *(_DWORD *)&v40[*(void *)(v28 - 24)] | v27);
LABEL_50:
                MEMORY[0x1C8796A80](v38, &v36);
                char v29 = v36;
                v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
                std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (const void **)&v37.__r_.__value_.__l.__data_, (long long **)&v35)[56] = v29;
                break;
              }
            }
            else
            {
              LOBYTE(v24) = *v23;
            }
            if ((v24 & 0x80) == 0 && (*((_DWORD *)&v19[1].~facet + v24) & 0x4000) != 0)
            {
              int v27 = 0;
              goto LABEL_47;
            }
            std::string::push_back(&v37, v24);
            uint64_t v25 = *(void **)&v40[*(void *)(v38[0] - 24) + 8];
            uint64_t v26 = v25[3];
            if (v26 == v25[4]) {
              (*(void (**)(void *))(*v25 + 80))(v25);
            }
            else {
              v25[3] = v26 + 1;
            }
            if (v21 == ++v20)
            {
              int v27 = 0;
              uint64_t v20 = 1;
              goto LABEL_47;
            }
          }
        }
LABEL_51:
        uint64_t v11 = (const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
      }
      while ((v11->__rdstate_ & 2) == 0);
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: Finished reading allow list file. Entries stored: %zu", v10, *((void *)v33 + 8), v31, v32);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    v38[0] = *MEMORY[0x1E4FBA408];
    uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v38[2] = v30;
    uint64_t v39 = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C8796CC0](&v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v9 < 0) {
      uint64_t v7 = (void *)*v7;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"GradingAllowList: Failed to open allow list file: %s", v8, v7);
  }
  *(void *)buf = *MEMORY[0x1E4FBA3F8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8796A10]((char *)v48 + 2);
  std::istream::~istream();
  MEMORY[0x1C8796CC0](&v49);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&v51);
}

void sub_1C5F40AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  __cxa_end_catch();
  if (a24 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  if (a65 < 0) {
    operator delete(a60);
  }
  std::ifstream::~ifstream(&a69);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v69 - 144));
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  long long v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = (char *)operator new(0x40uLL);
    uint64_t v8 = (std::string *)(v6 + 32);
    int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1C5F40C2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  os_signpost_id_t v1 = **(void **)(a1 + 8);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v2 = siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog))
    {
      *(_WORD *)os_signpost_id_t v3 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v2, OS_SIGNPOST_INTERVAL_END, v1, "ReadFile", "", v3, 2u);
    }
  }
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F211FDE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F211FDE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::~__func()
{
}

void siri::dialogengine::GradingAllowList::GetBundleId(siri::dialogengine::GradingAllowList *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::GradingAllowList::GetFilePath(siri::dialogengine::GradingAllowList *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

uint64_t siri::dialogengine::GradingAllowList::size(siri::dialogengine::GradingAllowList *this)
{
  return *((void *)this + 8);
}

BOOL siri::dialogengine::GradingAllowList::IsAllowed(uint64_t *a1, char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GradingAllowList");
  }
  os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog);
  os_signpost_id_t v26 = v4;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v5 = v4;
    long long v6 = siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog))
    {
      uint64_t v7 = a1;
      if (*((char *)a1 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*a1;
      }
      if (a2[23] >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *(char **)a2;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = v7;
      __int16 v29 = 2080;
      uint64_t v30 = v8;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "IsAllowed", "bundleId = %s catId = %s", buf, 0x16u);
    }
  }
  v27[0] = &unk_1F211FD58;
  v27[1] = &v26;
  v27[3] = v27;
  *(void *)buf = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v27);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v27);
  uint64_t v10 = a1[7];
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = a1 + 7;
  do
  {
    BOOL v12 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 8), (const void **)(v10 + 32), (const void **)a2);
    unsigned __int8 v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      unsigned __int8 v13 = (uint64_t *)v10;
      uint64_t v11 = (uint64_t *)v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if (v11 == a1 + 7
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 8), (const void **)a2, (const void **)v11 + 4))
  {
LABEL_17:
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    if (a2[23] >= 0) {
      unsigned __int8 v14 = a2;
    }
    else {
      unsigned __int8 v14 = *(char **)a2;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: For bundleId [%s], catId [%s] was not found (disallowed)", v9, a1, v14);
    BOOL v15 = 0;
  }
  else
  {
    int v17 = *((unsigned __int8 *)v11 + 56);
    BOOL v15 = *((unsigned char *)v11 + 56) != 0;
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    int v18 = a2[23];
    uint64_t v19 = *(char **)a2;
    if (v17) {
      uint64_t v20 = "true";
    }
    else {
      uint64_t v20 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v20);
    if (v18 >= 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = v19;
    }
    if (v25 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: For bundleId [%s], catId [%s] allowed: %s", v21, a1, v22, v23);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)buf);
  return v15;
}

void sub_1C5F4109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a24);
  _Unwind_Resume(a1);
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  os_signpost_id_t v1 = **(void **)(a1 + 8);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v2 = siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v2, OS_SIGNPOST_INTERVAL_END, v1, "IsAllowed", "", v3, 2u);
    }
  }
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F211FD58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F211FD58;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::~__func()
{
}

void __assign_helper_atomic_property__23147(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  os_signpost_id_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__23149(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  void *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5F41354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F41650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32)
{
  std::string __p = &a29;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  _Unwind_Resume(a1);
}

void sub_1C5F41834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F418FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F419C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F41F98(_Unwind_Exception *a1)
{
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xE08]);
  if (v3[23] < 0) {
    operator delete(*(void **)(v4 - 152));
  }
  if (v3[47] < 0) {
    operator delete(*(void **)(v4 - 128));
  }
  if (v3[79] < 0) {
    operator delete(*(void **)(v4 - 96));
  }

  _Unwind_Resume(a1);
}

void sub_1C5F42154()
{
}

void sub_1C5F42284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F423D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a19);

  _Unwind_Resume(a1);
}

void sub_1C5F424A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F42550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F4261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F426E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F427E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F428CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F429A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F42C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a63);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,siri::dialogengine::Parameter>::~pair(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  *(void *)(a1 + 328) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(a1 + 344));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)(a1 + 264));
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *siri::dialogengine::RemoveDuplicateStrings(uint64_t *result)
{
  if (result)
  {
    os_signpost_id_t v1 = result;
    uint64_t v2 = *result;
    uint64_t v3 = result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 3) >= 2)
    {
      memset(v9, 0, sizeof(v9));
      int v10 = 1065353216;
      while (1)
      {
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_8;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v9, (unsigned __int8 *)v2, v2);
        if ((v4 & 1) == 0) {
          break;
        }
        v2 += 24;
      }
      if (v2 != v3)
      {
        for (uint64_t i = v2 + 24; i != v3; i += 24)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v9, (unsigned __int8 *)i, i);
          if (v7)
          {
            if (*(char *)(v2 + 23) < 0) {
              operator delete(*(void **)v2);
            }
            long long v8 = *(_OWORD *)i;
            *(void *)(v2 + 16) = *(void *)(i + 16);
            *(_OWORD *)uint64_t v2 = v8;
            v2 += 24;
            *(unsigned char *)(i + 23) = 0;
            *(unsigned char *)uint64_t i = 0;
          }
        }
      }
LABEL_8:
      uint64_t v5 = v1[1];
      if (v2 != v5)
      {
        while (v5 != v2)
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 24;
        }
        v1[1] = v2;
      }
      return (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v9);
    }
  }
  return result;
}

void sub_1C5F42E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::StringToLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  uint64_t v5 = (unsigned char *)(a2 + v3);
  if (v4 >= 0) {
    long long v6 = v5;
  }
  else {
    long long v6 = (unsigned char *)(*(void *)a2 + *(void *)(a2 + 8));
  }
  if (v4 >= 0) {
    char v7 = (unsigned char *)a2;
  }
  else {
    char v7 = *(unsigned char **)a2;
  }
  while (v7 != v6)
  {
    *char v7 = __tolower((char)*v7);
    ++v7;
  }
}

void sub_1C5F42F18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringToUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  uint64_t v5 = (unsigned char *)(a2 + v3);
  if (v4 >= 0) {
    long long v6 = v5;
  }
  else {
    long long v6 = (unsigned char *)(*(void *)a2 + *(void *)(a2 + 8));
  }
  if (v4 >= 0) {
    char v7 = (unsigned char *)a2;
  }
  else {
    char v7 = *(unsigned char **)a2;
  }
  while (v7 != v6)
  {
    *char v7 = __toupper((char)*v7);
    ++v7;
  }
}

void sub_1C5F42FBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringToCapitalized(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  siri::dialogengine::StringToLower(a1, a2);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
    uint64_t v3 = *(char **)a2;
  }
  else
  {
    uint64_t v3 = (char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      return;
    }
  }
  char v4 = __toupper(*v3);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (char *)a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  *uint64_t v5 = v4;
}

void sub_1C5F43038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringTrim(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    char v7 = a2;
  }
  else {
    char v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v9 = strlen(__s);
  if (!size) {
    goto LABEL_14;
  }
  int v10 = v7;
  size_t v11 = v9;
  if (v9)
  {
    while (memchr(__s, v10->__r_.__value_.__s.__data_[0], v11))
    {
      int v10 = (const std::string *)((char *)v10 + 1);
      if (!--size) {
        goto LABEL_14;
      }
    }
  }
  if ((char *)v10 - (char *)v7 == -1)
  {
LABEL_14:
    std::string::size_type v14 = 0;
    std::string::size_type v13 = 0;
    unsigned int v12 = 0;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string(&__p, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    unsigned int v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v13;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v16 = v12;
  }
  else {
    std::string::size_type v16 = v14;
  }
  size_t v17 = strlen(__s);
  while (v16)
  {
    std::string::size_type v18 = v16;
    if (v17)
    {
      if (memchr(__s, *((char *)&p_p[-1].__r_.__value_.__r.__words[2] + v16-- + 7), v17)) {
        continue;
      }
    }
    std::string::size_type v20 = v18;
    goto LABEL_27;
  }
  std::string::size_type v20 = 0;
LABEL_27:
  std::string::basic_string(a3, &__p, 0, v20, (std::allocator<char> *)&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F431B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::StringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    char v7 = a2;
  }
  else {
    char v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  double result = (std::string *)strlen(__s);
  if (size)
  {
    int v10 = v7;
    size_t v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        double result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result) {
          break;
        }
        int v10 = (const std::string *)((char *)v10 + 1);
        if (!--size) {
          goto LABEL_14;
        }
      }
    }
    if ((char *)v10 - (char *)v7 != -1) {
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    }
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *siri::dialogengine::StringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    char v7 = a2;
  }
  else {
    char v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v9 = strlen(__s);
  while (size)
  {
    std::string::size_type v10 = size;
    if (v9)
    {
      if (memchr(__s, *((char *)&v7[-1].__r_.__value_.__r.__words[2] + size-- + 7), v9)) {
        continue;
      }
    }
    std::string::size_type v12 = v10;
    return std::string::basic_string(a3, a2, 0, v12, (std::allocator<char> *)&v14);
  }
  std::string::size_type v12 = 0;
  return std::string::basic_string(a3, a2, 0, v12, (std::allocator<char> *)&v14);
}

void siri::dialogengine::StripWhitespace(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  {
    operator new();
  }
  char v4 = (std::once_flag::_State_type *)siri::dialogengine::GetWhitespaceRegex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetWhitespaceRegex(void)::flag, memory_order_acquire) != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    p_p = &__p;
    std::__call_once(v4, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetWhitespaceRegex(void)::$_0 &&>>);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  }
  else {
    v6.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  v7.__i_ = &v6.__i_[v5];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v6, v7, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetWhitespaceRegex(void)::sRegex, " ");
  siri::dialogengine::StringTrim(" \t\n\r", &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F4347C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetWhitespaceRegex(void)::$_0 &&>>()
{
}

void sub_1C5F434FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StripWhitespaceFromEachLine(uint64_t a1)
{
  memset(&v35, 0, sizeof(v35));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (unsigned char *)a1;
  }
  else {
    uint64_t v3 = *(unsigned char **)a1;
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  for (; v4; --v4)
  {
    if (*v3 == 10)
    {
      std::stringbuf::str();
      std::vector<std::string>::pointer end = v35.__end_;
      if (v35.__end_ >= v35.__end_cap_.__value_)
      {
        unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_ - (char *)v35.__begin_) >> 3);
        unint64_t v7 = v6 + 1;
        if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) > v7) {
          unint64_t v7 = 0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v8 = v7;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v35.__end_cap_;
        if (v8) {
          char v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v35.__end_cap_, v8);
        }
        else {
          char v9 = 0;
        }
        std::string::size_type v10 = v9 + v6;
        __v.__first_ = v9;
        __v.__begin_ = v10;
        __v.__end_cap_.__value_ = &v9[v8];
        v10->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v29 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v10 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v35, &__v);
        size_t v11 = v35.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v35.__end_ = v11;
      }
      else
      {
        v35.__end_->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v35.__end_ = end + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__v, "");
      std::string::operator=(&v33, (const std::string *)&__v);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
    }
    else
    {
      LOBYTE(__v.__first_) = *v3;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&__v, 1);
    }
    ++v3;
  }
  std::stringbuf::str();
  std::vector<std::string>::pointer v12 = v35.__end_;
  if (v35.__end_ >= v35.__end_cap_.__value_)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_ - (char *)v35.__begin_) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) > v15) {
      unint64_t v15 = 0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v35.__end_cap_;
    if (v16) {
      size_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v35.__end_cap_, v16);
    }
    else {
      size_t v17 = 0;
    }
    std::string::size_type v18 = v17 + v14;
    __v.__first_ = v17;
    __v.__begin_ = v18;
    __v.__end_cap_.__value_ = &v17[v16];
    v18->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v18 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v35, &__v);
    std::string::size_type v13 = v35.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v35.__end_ = v13;
  }
  else
  {
    v35.__end_->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    std::string::size_type v13 = v12 + 1;
    v35.__end_ = v12 + 1;
  }
  for (std::vector<std::string>::pointer i = v35.__begin_; i != v13; ++i)
  {
    siri::dialogengine::StripWhitespace((uint64_t)i, (std::string *)&__v);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i->__r_.__value_.__l.__data_);
    }
    long long v20 = *(_OWORD *)&__v.__first_;
    i->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v20;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  std::string::operator=(&v33, (const std::string *)&__v);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::vector<std::string>::pointer begin = v35.__begin_;
  std::vector<std::string>::pointer v22 = v35.__end_;
  if (v35.__begin_ != v35.__end_)
  {
    char v23 = 1;
    do
    {
      if ((v23 & 1) == 0)
      {
        LOBYTE(__v.__first_) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&__v, 1);
      }
      int v24 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v24 >= 0) {
        uint64_t v25 = (uint64_t)begin;
      }
      else {
        uint64_t v25 = begin->__r_.__value_.__r.__words[0];
      }
      if (v24 >= 0) {
        uint64_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t size = begin->__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, v25, size);
      char v23 = 0;
      ++begin;
    }
    while (begin != v22);
  }
  std::stringbuf::str();
  v30[0] = *(void ***)MEMORY[0x1E4FBA408];
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void ***)((char *)v30 + (unint64_t)*(v30[0] - 3)) = *(void ***)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v31 = v27;
  v32[0] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v34);
  v30[0] = (void **)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v30);
}

void sub_1C5F43A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v16 - 128));
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  a16 = v16 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringStripNonAscii(char *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = a1[23];
  if (v3 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  for (; v5; --v5)
  {
    int v6 = *v4;
    if (v6 >= 32) {
      std::string::push_back(a2, v6);
    }
    ++v4;
  }
}

void sub_1C5F43B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StringsEqual(uint64_t a1, uint64_t a2)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)&__s1);
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  unsigned __int8 v3 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v4 = v22;
  }
  else {
    size_t v4 = __n;
  }
  unint64_t v5 = v19;
  int v6 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v4 != v5)
  {
    BOOL v16 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v19 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v16 = memcmp(__s1, v7, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v8 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v11 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v10 = v11;
      int v13 = *(unsigned __int8 *)v7;
      unint64_t v7 = (void **)((char *)v7 + 1);
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_22:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(__p[0]);
    if ((v22 & 0x80) == 0) {
      return v16;
    }
LABEL_27:
    operator delete(__s1);
    return v16;
  }
  BOOL v16 = 1;
  if ((char)v19 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v3 & 0x80) != 0) {
    goto LABEL_27;
  }
  return v16;
}

void sub_1C5F43C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StringStartsWith(std::string *__str, unsigned __int8 *a2)
{
  if ((a2[23] & 0x80u) == 0) {
    std::string::size_type v3 = a2[23];
  }
  else {
    std::string::size_type v3 = *((void *)a2 + 1);
  }
  std::string::basic_string(&__s1, __str, 0, v3, (std::allocator<char> *)&v20);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (size == v5)
  {
    if (v6 >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(unsigned __int8 **)a2;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      size_t v17 = (void *)__s1.__r_.__value_.__r.__words[0];
      BOOL v16 = memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_) == 0;
      goto LABEL_26;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      return 1;
    }
    uint64_t v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      int v11 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      int v10 = v11;
      int v13 = *v7++;
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
  }
  else
  {
    BOOL v16 = 0;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size_t v17 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v17);
  }
  return v16;
}

BOOL siri::dialogengine::StringEndsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3 = a2[23];
  if ((v3 & 0x80u) != 0) {
    std::string::size_type v3 = *((void *)a2 + 1);
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if (v3 <= size)
  {
    std::string::basic_string(&__s1, __str, size - v3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = a2[23];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    if (v6 == v7)
    {
      if (v8 >= 0) {
        char v9 = a2;
      }
      else {
        char v9 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::size_type v18 = (void *)__s1.__r_.__value_.__r.__words[0];
        BOOL v5 = memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_30;
      }
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return 1;
      }
      uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v13 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v12 = v13;
        int v15 = *v9++;
        int v14 = v15;
        BOOL v17 = v10-- != 0;
        BOOL v5 = v12 == v14;
      }
      while (v12 == v14 && v17);
    }
    else
    {
      BOOL v5 = 0;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v5;
    }
    std::string::size_type v18 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v18);
    return v5;
  }
  return 0;
}

void siri::dialogengine::GetRegexError()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v0);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1)
{
  uint64_t v1 = std::regex_traits<char>::regex_traits(a1);
  v1[2].__ct_ = 0;
  *(_OWORD *)&v1[1].__col_ = 0u;
  *(_OWORD *)&v1[1].__loc_.__locale_ = 0u;
  std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
}

void sub_1C5F43FF4(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1C5F44404(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    int v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    char v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    int v11 = v8 + 1;
    do
    {
      int v8 = v11;
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v10 == v8) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, unsigned __int8 *a3)
{
  std::string::size_type v3 = a2;
  if (a2 == (char *)a3) {
    return (unsigned __int8 *)a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      std::string::size_type v6 = v3;
      std::string::size_type v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  int v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    char v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    int v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    std::string::size_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    int v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      int v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      int v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      int v14 = (unsigned __int8 *)&a2[v16];
    }
    if (v14 != (unsigned __int8 *)a2)
    {
LABEL_25:
      if (v14 == (unsigned __int8 *)a2 && v14 != (unsigned __int8 *)a3)
      {
        int v17 = *a2;
        if (v17 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v17 != 40)
        {
          if (v17 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v18 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        unsigned __int8 v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v19 == a3 || (char v20 = v19, *v19 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v18);
        --*(_DWORD *)(a1 + 36);
        int v14 = (unsigned __int8 *)(v20 + 1);
      }
      if (v14 != (unsigned __int8 *)a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v21 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v21);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              size_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            size_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        char v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_136;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    int v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        int v11 = a3;
        goto LABEL_114;
      }
      int v10 = *(unsigned __int8 *)v5;
      int v11 = (char *)v5;
      if (v10 != 93) {
        break;
      }
LABEL_114:
      uint64_t v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      int v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v39.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              int v17 = *v11;
              if (v17 != 93)
              {
                BOOL v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  BOOL v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if (v19 == 92)
                    {
                      if (v5) {
                        size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      }
                      else {
                        size_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
                      }
LABEL_120:
                      BOOL v20 = v21;
LABEL_121:
                      *(_OWORD *)unint64_t v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      std::string::size_type v36 = v39.__r_.__value_.__r.__words[2];
                      std::string v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      uint64_t v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v38.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v41) < 0) {
                        operator delete(v40[0]);
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      char v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v39.__r_.__value_.__l.__data_);
                      }
                      int v11 = v20;
                      if ((v29 & 1) == 0) {
                        goto LABEL_115;
                      }
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  char v29 = 1;
                  BOOL v20 = v11;
                  goto LABEL_111;
                }
                size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
            {
              size_t v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1) {
                goto LABEL_43;
              }
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            int v15 = *v11;
            if (v15 == 92)
            {
              uint64_t v16 = v11 + 1;
              if (v5)
              {
                int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                uint64_t v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (unint64_t i = 0; ; ++i)
          {
            size_t v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
              break;
            }
            if (&v8[-v5] == (char *)i) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
LABEL_135:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v27 = &__p;
          }
          else {
            int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (j = 0; ; ++j)
          {
            size_t v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93) {
              break;
            }
            if (&v8[-v5] == j) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
            goto LABEL_135;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_) {
LABEL_137:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_137;
            }
            uint64_t v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          long long v32 = (void *)HIBYTE(v41);
          if (v41 < 0) {
            long long v32 = v40[1];
          }
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v40);
          }
          else
          {
            std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
            }
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::vector<std::string> v35 = &__p;
              }
              else {
                std::vector<std::string> v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v34 = &__p;
              }
              else {
                uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0) {
            operator delete(v40[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v29 = 0;
LABEL_110:
          uint64_t v5 = (uint64_t)(v14 + 2);
          BOOL v20 = v9;
          goto LABEL_111;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    int v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_1C5F4536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  unsigned int v6 = a2;
  for (unint64_t i = a2; ; v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unsigned int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unsigned int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  size_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              size_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unsigned int v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unsigned int v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unsigned int v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_64;
    }
    unsigned int v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F45C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  std::string::size_type v3 = a2;
  if (a2 != (char *)a3)
  {
    if ((std::vector<std::string>::pointer end = a1->__end_,
          unsigned int marked_count = a1->__marked_count_,
          int v9 = (unsigned __int8 *)(a2 + 1),
          int v8 = *a2,
          a2 + 1 == (char *)a3)
      && v8 == 36
      || ((v8 - 46) <= 0x2E
        ? (BOOL v10 = ((1 << (v8 - 46)) & 0x600000000001) == 0)
        : (BOOL v10 = 1),
          !v10))
    {
      std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
      if (v11 == v3)
      {
        if (*v3 == 46) {
          operator new();
        }
        std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      std::string v11 = v3 + 1;
    }
    if (v3 == v11 && v9 != a3 && *v3 == 92)
    {
      if (2 * (v3[1] == 40))
      {
        uint64_t v12 = (uint64_t)&v3[2 * (v3[1] == 40)];
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v13 = a1->__marked_count_;
        do
        {
          std::string::value_type v14 = (unsigned __int8 *)v12;
          uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v12, a3);
        }
        while (v14 != (unsigned __int8 *)v12);
        if (v14 == a3 || v14 + 1 == a3 || *v14 != 92 || v14[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::string v11 = (char *)(v14 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v13);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        std::string v11 = &v3[v16];
      }
    }
    if (v11 != v3)
    {
      if (v11 == (char *)a3) {
        return (char *)a3;
      }
      size_t v17 = a1->__marked_count_ + 1;
      int v18 = *v11;
      if (v18 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return ++v11;
      }
      if (v11 + 1 == (char *)a3 || v18 != 92 || v11[1] != 123) {
        return v11;
      }
      BOOL v20 = (unsigned __int8 *)(v11 + 2);
      int v29 = 0;
      size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20, a3, &v29);
      if (v20 == v21) {
LABEL_46:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v21 != a3)
      {
        BOOL v22 = v21 + 1;
        int v23 = *v21;
        if (v23 == 44)
        {
          int v28 = -1;
          int v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v21 + 1, a3, &v28);
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            size_t v26 = v28;
            size_t v25 = v29;
            if (v28 == -1)
            {
              size_t v26 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_46;
            }
            std::string v11 = (char *)&v24[2 * (v24[1] == 125)];
            int v27 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v27, v25, v26, end, marked_count + 1, v17, 1);
            return v11;
          }
        }
        else if (v22 != a3 && v23 == 92 && *v22 == 125)
        {
          std::string v11 = (char *)(v21 + 2);
          size_t v25 = v29;
          int v27 = a1;
          size_t v26 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_33;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_22:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_22;
  }
  BOOL v8 = v6 == 40;
  unint64_t v7 = (char *)(a2 + 1);
  BOOL v8 = !v8 || v7 == a3;
  if (!v8)
  {
    BOOL v8 = *v7 == 63;
    int v9 = (char *)(a2 + 2);
    if (v8 && v9 != a3)
    {
      int v11 = *v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int marked_count = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v11 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int v13 = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::string::value_type v14 = (unsigned __int8 *)(v12 + 1);
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v46.__traits_.__loc_);
      if (v12 + 1 != (char *)a2) {
        return v14;
      }
    }
  }
LABEL_33:
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  int v21 = (char)*a2;
  int v22 = *a2;
  if (v21 <= 91)
  {
    int v23 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_96;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          int v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --a1->__open_count_;
            int v23 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_91;
          }
LABEL_96:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v29 = a1->__marked_count_;
        ++a1->__open_count_;
        std::string::size_type v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v30 == a3) {
          goto LABEL_96;
        }
        uint64_t v31 = v30;
        if (*v30 != 41) {
          goto LABEL_96;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        --a1->__open_count_;
        int v23 = (unsigned __int8 *)(v31 + 1);
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        operator new();
      default:
        if (v21 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_91;
        }
        if (v21 != 63) {
          goto LABEL_56;
        }
        goto LABEL_58;
    }
  }
  uint64_t v25 = (v21 - 92);
  if (v25 > 0x21) {
    goto LABEL_56;
  }
  int v23 = a2;
  if (((1 << v25) & 0x300000006) != 0) {
    goto LABEL_91;
  }
  if (v25)
  {
    if (v25 == 31) {
LABEL_58:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v22);
    int v23 = a2 + 1;
    goto LABEL_91;
  }
  int v23 = a2;
  if (v22 != 92) {
    goto LABEL_91;
  }
  size_t v26 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v27 = *v26;
  unsigned int v28 = v27 - 48;
  if (v27 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_90:
    int v23 = a2 + 2;
    goto LABEL_91;
  }
  if ((v27 - 49) <= 8)
  {
    int v23 = a2 + 2;
    if (a2 + 2 == (unsigned __int8 *)a3)
    {
      int v23 = (unsigned __int8 *)a3;
    }
    else
    {
      while (1)
      {
        int v32 = *v23;
        if ((v32 - 48) > 9) {
          break;
        }
        if (v28 >= 0x19999999) {
          goto LABEL_97;
        }
        ++v23;
        unsigned int v28 = v32 + 10 * v28 - 48;
        if (v23 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
          break;
        }
      }
      if (!v28) {
LABEL_97:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v28 > v20) {
      goto LABEL_97;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
    if (v26 != (char *)v23) {
      goto LABEL_91;
    }
  }
  int v33 = *v26;
  if (v33 > 99)
  {
    if (v33 == 119)
    {
      uint64_t v34 = a1;
      BOOL v35 = 0;
      goto LABEL_82;
    }
    if (v33 == 115)
    {
      uint64_t v42 = a1;
      BOOL v43 = 0;
      goto LABEL_88;
    }
    if (v33 != 100) {
      goto LABEL_83;
    }
    std::string::size_type v36 = a1;
    BOOL v37 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
    int v39 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v39;
    goto LABEL_90;
  }
  switch(v33)
  {
    case 'D':
      std::string::size_type v36 = a1;
      BOOL v37 = 1;
      goto LABEL_80;
    case 'S':
      uint64_t v42 = a1;
      BOOL v43 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
      int v39 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      uint64_t v34 = a1;
      BOOL v35 = 1;
LABEL_82:
      unint64_t v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      v40->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
      goto LABEL_90;
  }
LABEL_83:
  uint64_t v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v26 == (char *)v41) {
    int v23 = a2;
  }
  else {
    int v23 = (unsigned __int8 *)v41;
  }
LABEL_91:
  std::string::value_type v14 = a2;
  if (v23 == a2) {
    return v14;
  }
  size_t v44 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v23, (unsigned __int8 *)a3, end, v20 + 1, v44);
}

void sub_1C5F46600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void siri::dialogengine::StringRegexMatch()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v0);
}

void sub_1C5F4676C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::string::value_type *a9, std::string::size_type a10, int a11, __int16 a12, char a13, unsigned __int8 a14, std::string *a15, std::string *a16, uint64_t a17, long long a18, std::string::size_type a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,long long __pa,std::string::size_type a26)
{
  if (a2 == 1)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(exception_object);
    std::runtime_error::runtime_error((std::runtime_error *)(v26 - 160), exception_ptr);
    *(void *)(v26 - 160) = MEMORY[0x1E4FBA430] + 16;
    *(_DWORD *)(v26 - 144) = exception_ptr[1].__vftable;
    __cxa_begin_catch(exception_object);
    std::operator+<char>();
    unsigned int v29 = std::string::append((std::string *)&a15, "' failed: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = (char *)std::runtime_error::what((const std::runtime_error *)(v26 - 160));
    std::string::basic_string[abi:ne180100]<0>(&a9, v31);
    if ((a14 & 0x80u) == 0) {
      int v32 = (const std::string::value_type *)&a9;
    }
    else {
      int v32 = a9;
    }
    if ((a14 & 0x80u) == 0) {
      std::string::size_type v33 = a14;
    }
    else {
      std::string::size_type v33 = a10;
    }
    uint64_t v34 = std::string::append((std::string *)&a18, v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    a26 = v34->__r_.__value_.__r.__words[2];
    __pa = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__pa, 3u);
    if (SHIBYTE(a26) < 0) {
      operator delete((void *)__pa);
    }
    if ((char)a14 < 0) {
      operator delete(a9);
    }
    if (SHIBYTE(a19) < 0) {
      operator delete((void *)a18);
    }
    if (SHIBYTE(a17) < 0) {
      operator delete(a15);
    }
    std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 160));
    __cxa_end_catch();
    JUMPOUT(0x1C5F46750);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringRegexSearch()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v0);
}

void sub_1C5F46A14(_Unwind_Exception *a1, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, std::string *a8, std::string::value_type *a9, std::locale a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, long long a15, std::string::size_type a16, void *__p, long long a18, std::string::size_type a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::runtime_error __pa,int a26)
{
  if (__pa.__vftable) {
    operator delete(__pa.__vftable);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a18);
  if (a2 == 1)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
    std::runtime_error::runtime_error(&__pa, exception_ptr);
    __pa.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA430] + 16);
    a26 = (int)exception_ptr[1].__vftable;
    __cxa_begin_catch(a1);
    std::operator+<char>();
    unsigned int v29 = std::string::append((std::string *)&a12, "' failed: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a16 = v29->__r_.__value_.__r.__words[2];
    a15 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = (char *)std::runtime_error::what(&__pa);
    std::string::basic_string[abi:ne180100]<0>(&a9, v31);
    if (a11 >= 0) {
      int v32 = (const std::string::value_type *)&a9;
    }
    else {
      int v32 = a9;
    }
    if (a11 >= 0) {
      std::string::size_type locale = HIBYTE(a11);
    }
    else {
      std::string::size_type locale = (std::string::size_type)a10.__locale_;
    }
    uint64_t v34 = std::string::append((std::string *)&a15, v32, locale);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    a19 = v34->__r_.__value_.__r.__words[2];
    a18 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&a18, 3u);
    if (SHIBYTE(a19) < 0) {
      operator delete((void *)a18);
    }
    if (SHIBYTE(a11) < 0) {
      operator delete(a9);
    }
    if (SHIBYTE(a16) < 0) {
      operator delete((void *)a15);
    }
    if (SHIBYTE(a14) < 0) {
      operator delete(a12);
    }
    std::runtime_error::~runtime_error(&__pa);
    __cxa_end_catch();
    JUMPOUT(0x1C5F469F8);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::StringGlobMatch(std::string *a1, const std::string *__s)
{
  std::string::size_type v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__s->__r_.__value_.__s + 23))
    {
      if (v4 != 1 || __s->__r_.__value_.__s.__data_[0] != 42)
      {
        int v5 = __s;
        int64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
        goto LABEL_6;
      }
      return 1;
    }
    return 0;
  }
  int64_t size = __s->__r_.__value_.__l.__size_;
  if (!size) {
    return size;
  }
  int v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  if (size != 1)
  {
    if (size >= 1) {
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    size_t v13 = a1->__r_.__value_.__l.__size_;
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = a1->__r_.__value_.__l.__size_;
    }
    if ((v4 & 0x80u) == 0) {
      std::string::size_type v15 = v4;
    }
    else {
      std::string::size_type v15 = __s->__r_.__value_.__l.__size_;
    }
    if (v14 == v15)
    {
      if ((v4 & 0x80u) == 0) {
        int v16 = __s;
      }
      else {
        int v16 = (const std::string *)__s->__r_.__value_.__r.__words[0];
      }
      if ((v12 & 0x80) != 0) {
        return memcmp(a1->__r_.__value_.__l.__data_, v16, v13) == 0;
      }
      if (*((unsigned char *)&a1->__r_.__value_.__s + 23))
      {
        uint64_t v17 = v12 - 1;
        do
        {
          int v19 = a1->__r_.__value_.__s.__data_[0];
          a1 = (std::string *)((char *)a1 + 1);
          int v18 = v19;
          int v21 = v16->__r_.__value_.__s.__data_[0];
          int v16 = (const std::string *)((char *)v16 + 1);
          int v20 = v21;
          BOOL v22 = v17-- != 0;
          char v23 = v22;
          int64_t size = v18 == v20;
        }
        while (v18 == v20 && (v23 & 1) != 0);
        return size;
      }
      return 1;
    }
    return 0;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 42) {
    return size;
  }
LABEL_6:
  unint64_t v7 = (const std::string *)((char *)v5 + size);
  BOOL v8 = (std::string *)v5;
  while (1)
  {
    int v9 = (const std::string *)memchr(v8, 42, size);
    if (!v9) {
      goto LABEL_21;
    }
    if (v9->__r_.__value_.__s.__data_[0] == 42) {
      break;
    }
    BOOL v8 = (std::string *)((char *)&v9->__r_.__value_.__l.__data_ + 1);
    int64_t size = (char *)v7 - (char *)v8;
    if ((char *)v7 - (char *)v8 < 1) {
      goto LABEL_21;
    }
  }
  if (v9 == v7) {
    goto LABEL_21;
  }
  std::string::size_type v10 = (char *)v9 - (char *)v5;
  if (v9 == v5)
  {
    std::string::basic_string(&v39, __s, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v38);
    BOOL v24 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&v39);
    goto LABEL_44;
  }
  if (v10 == -1) {
    goto LABEL_21;
  }
  if ((v4 & 0x80) != 0) {
    uint64_t v11 = __s->__r_.__value_.__l.__size_ - 1;
  }
  else {
    uint64_t v11 = v4 - 1;
  }
  if (v10 == v11)
  {
    std::string::basic_string(&v39, __s, 0, v10, (std::allocator<char> *)&v38);
    BOOL v24 = siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v39);
LABEL_44:
    int64_t size = v24;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    return size;
  }
  std::operator+<char>();
  uint64_t v25 = std::string::append(&v38, "'");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v39, 3u);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  size_t v13 = a1->__r_.__value_.__l.__size_;
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v28 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v29 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  int v30 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    std::string::size_type v29 = __s->__r_.__value_.__l.__size_;
  }
  if (v28 != v29) {
    return 0;
  }
  if (v30 >= 0) {
    int v16 = __s;
  }
  else {
    int v16 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  }
  if ((v27 & 0x80) != 0) {
    return memcmp(a1->__r_.__value_.__l.__data_, v16, v13) == 0;
  }
  if (!*((unsigned char *)&a1->__r_.__value_.__s + 23)) {
    return 1;
  }
  uint64_t v31 = v27 - 1;
  do
  {
    int v33 = a1->__r_.__value_.__s.__data_[0];
    a1 = (std::string *)((char *)a1 + 1);
    int v32 = v33;
    int v35 = v16->__r_.__value_.__s.__data_[0];
    int v16 = (const std::string *)((char *)v16 + 1);
    int v34 = v35;
    BOOL v22 = v31-- != 0;
    char v36 = v22;
    int64_t size = v32 == v34;
  }
  while (v32 == v34 && (v36 & 1) != 0);
  return size;
}

void sub_1C5F46EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringContains(char **a1, char *a2)
{
  int v2 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 >= 0) {
    std::string::size_type v3 = (char *)a1;
  }
  else {
    std::string::size_type v3 = *a1;
  }
  int v4 = a2[23];
  if (v4 >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    int64_t v6 = a2[23];
  }
  else {
    int64_t v6 = *((void *)a2 + 1);
  }
  if (!v6) {
    return 1;
  }
  if ((char)v2 < 0) {
    int v2 = a1[1];
  }
  unint64_t v7 = &v2[(void)v3];
  if ((uint64_t)v2 >= v6)
  {
    int v11 = *v5;
    uint64_t v12 = v3;
    do
    {
      size_t v13 = &v2[-v6];
      if (v13 == (char *)-1) {
        break;
      }
      std::string::size_type v14 = (char *)memchr(v12, v11, (size_t)(v13 + 1));
      if (!v14) {
        break;
      }
      BOOL v8 = v14;
      if (!memcmp(v14, v5, v6)) {
        return v8 != v7 && v8 - v3 != -1;
      }
      uint64_t v12 = v8 + 1;
      int v2 = (char *)(v7 - (v8 + 1));
    }
    while ((uint64_t)v2 >= v6);
  }
  BOOL v8 = v7;
  return v8 != v7 && v8 - v3 != -1;
}

uint64_t siri::dialogengine::StringCount(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v2 = a1[23];
  uint64_t v3 = *((void *)a1 + 1);
  if ((v2 & 0x80u) == 0) {
    int v4 = a1;
  }
  else {
    int v4 = *(unsigned __int8 **)a1;
  }
  uint64_t result = 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = v3;
  }
  for (; v2; --v2)
  {
    int v6 = *v4++;
    if (v6 == a2) {
      ++result;
    }
  }
  return result;
}

unint64_t siri::dialogengine::StringFind(uint64_t a1, uint64_t a2, unint64_t a3)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  int v5 = (char *)v20;
  siri::dialogengine::StringToLower(a2, (uint64_t)v20);
  unint64_t v6 = v23;
  unsigned __int8 v7 = v23;
  if ((v23 & 0x80u) == 0) {
    BOOL v8 = __p;
  }
  else {
    BOOL v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  int v9 = (char)v21;
  std::string::size_type v10 = (void *)v20[0];
  if ((v21 & 0x80u) == 0)
  {
    int64_t v11 = v21;
  }
  else
  {
    int v5 = (char *)v20[0];
    int64_t v11 = v20[1];
  }
  if (v6 >= a3)
  {
    if (v11)
    {
      uint64_t v12 = (char *)v8 + a3;
      size_t v13 = (char *)v8 + v6;
      std::string::size_type v14 = (char *)(v6 - a3);
      if ((uint64_t)v14 >= v11)
      {
        int v17 = *v5;
        do
        {
          int v18 = &v14[-v11];
          if (v18 == (char *)-1) {
            break;
          }
          int v19 = (char *)memchr(v12, v17, (size_t)(v18 + 1));
          if (!v19) {
            break;
          }
          std::string::size_type v15 = v19;
          if (!memcmp(v19, v5, v11)) {
            goto LABEL_14;
          }
          uint64_t v12 = v15 + 1;
          std::string::size_type v14 = (char *)(v13 - (v15 + 1));
        }
        while ((uint64_t)v14 >= v11);
      }
      std::string::size_type v15 = v13;
LABEL_14:
      if (v15 == v13) {
        a3 = -1;
      }
      else {
        a3 = v15 - (char *)v8;
      }
    }
  }
  else
  {
    a3 = -1;
  }
  if (v9 < 0)
  {
    operator delete(v10);
    if ((v23 & 0x80) == 0) {
      return a3;
    }
LABEL_21:
    operator delete(__p[0]);
    return a3;
  }
  if ((v7 & 0x80) != 0) {
    goto LABEL_21;
  }
  return a3;
}

void sub_1C5F47154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringRFind(uint64_t a1, uint64_t a2, unint64_t a3)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  siri::dialogengine::StringToLower(a2, (uint64_t)v21);
  unint64_t v5 = (unint64_t)__p[1];
  if ((v24 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    unint64_t v5 = v24;
  }
  if ((v22 & 0x80u) == 0) {
    unsigned __int8 v7 = v21;
  }
  else {
    unsigned __int8 v7 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    unint64_t v8 = v22;
  }
  else {
    unint64_t v8 = (unint64_t)v21[1];
  }
  if (v5 >= a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v10 = (char *)(v5 - v9);
  int64_t v11 = (char *)(v8 + v9);
  if ((unint64_t)v10 > v8) {
    unint64_t v5 = (unint64_t)v11;
  }
  uint64_t v12 = (unsigned __int8 *)v6 + v5;
  if (v8) {
    BOOL v13 = v5 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    int v17 = (unsigned __int8 *)v6 + v5;
  }
  else
  {
    int v16 = v6;
    int v17 = (unsigned __int8 *)v6 + v5;
    do
    {
      if (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v7)
      {
        uint64_t v18 = 1;
        while (v8 != v18)
        {
          if ((unsigned __int8 *)((char *)v16 + v18) == v12) {
            goto LABEL_23;
          }
          int v19 = *((unsigned __int8 *)v16 + v18);
          int v20 = *((unsigned __int8 *)v7 + v18++);
          if (v19 != v20) {
            goto LABEL_33;
          }
        }
        int v17 = (unsigned __int8 *)v16;
      }
LABEL_33:
      int v16 = (void **)((char *)v16 + 1);
    }
    while (v16 != (void **)v12);
  }
LABEL_23:
  if ((char)v22 < 0)
  {
    operator delete(v21[0]);
    if ((v24 & 0x80) == 0) {
      goto LABEL_25;
    }
  }
  else if ((v24 & 0x80) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__p[0]);
LABEL_25:
  if (v17 != v12 || v8 == 0) {
    return v17 - (unsigned __int8 *)v6;
  }
  else {
    return -1;
  }
}

void sub_1C5F472AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringReplace(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  if (a2[23] >= 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  int v7 = *(unsigned __int8 *)(a1 + 23);
  if (!v6)
  {
    if ((v7 & 0x80) == 0) {
      goto LABEL_9;
    }
    std::string::size_type v11 = *(void *)(a1 + 8);
    goto LABEL_61;
  }
  LODWORD(v8) = a4;
  if ((v7 & 0x80) == 0)
  {
    if (v7 > a4)
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      goto LABEL_12;
    }
LABEL_9:
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    return;
  }
  std::string::size_type v11 = *(void *)(a1 + 8);
  if ((int)v11 <= a4)
  {
LABEL_61:
    uint64_t v31 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(a5, v31, v11);
    return;
  }
  std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
LABEL_12:
  unint64_t size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  int v13 = (char)size;
  if ((size & 0x80u) != 0) {
    unint64_t size = a5->__r_.__value_.__l.__size_;
  }
  if (size >= (int)v8)
  {
    std::string::size_type v8 = (int)v8;
    BOOL v33 = a2[23] < 0;
    std::string::size_type v14 = a2[23];
    std::string::size_type v32 = *((void *)a2 + 1);
    if (a2[23] >= 0) {
      int64_t v15 = a2[23];
    }
    else {
      int64_t v15 = *((void *)a2 + 1);
    }
    if (a2[23] >= 0) {
      int v16 = a2;
    }
    else {
      int v16 = *(char **)a2;
    }
    if (v13 >= 0) {
      std::string::size_type v17 = (std::string::size_type)a5;
    }
    else {
      std::string::size_type v17 = a5->__r_.__value_.__r.__words[0];
    }
    while (!v15)
    {
LABEL_35:
      if (v8 != -1)
      {
        if (v33) {
          std::string::size_type v25 = v32;
        }
        else {
          std::string::size_type v25 = v14;
        }
        int v26 = *(char *)(a3 + 23);
        if (v26 >= 0) {
          uint64_t v27 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v27 = *(const std::string::value_type **)a3;
        }
        if (v26 >= 0) {
          std::string::size_type v28 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v28 = *(void *)(a3 + 8);
        }
        std::string::replace(a5, v8, v25, v27, v28);
        uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
        if ((v29 & 0x80u) != 0) {
          uint64_t v29 = *(void *)(a3 + 8);
        }
        v8 += v29;
        unint64_t size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0) {
          std::string::size_type v17 = (std::string::size_type)a5;
        }
        else {
          std::string::size_type v17 = a5->__r_.__value_.__r.__words[0];
        }
        if ((size & 0x80u) != 0) {
          unint64_t size = a5->__r_.__value_.__l.__size_;
        }
        int v30 = a2[23];
        BOOL v33 = v30 < 0;
        std::string::size_type v14 = a2[23];
        int v16 = v30 >= 0 ? a2 : *(char **)a2;
        std::string::size_type v32 = *((void *)a2 + 1);
        int64_t v15 = v30 >= 0 ? a2[23] : *((void *)a2 + 1);
        if (size >= v8) {
          continue;
        }
      }
      return;
    }
    uint64_t v18 = (void *)(v17 + v8);
    int v19 = (char *)(v17 + size);
    int64_t v20 = size - v8;
    if (v20 >= v15)
    {
      int v21 = *v16;
      do
      {
        int64_t v22 = v20 - v15;
        if (v22 == -1) {
          break;
        }
        unsigned __int8 v23 = (char *)memchr(v18, v21, v22 + 1);
        if (!v23) {
          break;
        }
        unsigned __int8 v24 = v23;
        if (!memcmp(v23, v16, v15))
        {
          if (v24 == v19) {
            return;
          }
          std::string::size_type v8 = (std::string::size_type)&v24[-v17];
          goto LABEL_35;
        }
        uint64_t v18 = v24 + 1;
        int64_t v20 = v19 - (v24 + 1);
      }
      while (v20 >= v15);
    }
  }
}

void sub_1C5F47518(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringToInt(const std::string *a1, unsigned char *a2, char a3)
{
  unsigned int v14 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10, &v13);
  MEMORY[0x1C8796A90](v10, &v14);
  int v5 = (*(_DWORD *)((char *)&v10[4] + *(void *)(v10[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0) {
    int v5 = (*(_DWORD *)((unsigned char *)&v10[4] + *(void *)(v10[0] - 24)) & 5) == 0;
  }
  if ((*(_DWORD *)((unsigned char *)&v10[4] + *(void *)(v10[0] - 24)) & 5) != 0) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  std::string v10[2] = v7;
  void v10[3] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v12);
  if (a2) {
    *a2 = v6;
  }
  if (v6)
  {
    uint64_t v8 = v14;
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFLL;
    unsigned int v14 = 0x7FFFFFFF;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1C5F4771C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&a29);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToUInt(const std::string *a1, unsigned char *a2, char a3)
{
  unsigned int v15 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    int v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v14.__r_.__value_.__s + 23)) {
      goto LABEL_9;
    }
    int v5 = &v14;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 45)
  {
    int v6 = 0;
    if (!a2) {
      goto LABEL_18;
    }
LABEL_17:
    *a2 = v6;
    goto LABEL_18;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11, &v14);
  MEMORY[0x1C8796AA0](v11, &v15);
  int v7 = (*(_DWORD *)((char *)&v11[4] + *(void *)(v11[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0) {
    int v7 = (*(_DWORD *)((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) == 0;
  }
  if ((*(_DWORD *)((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) != 0) {
    int v6 = 0;
  }
  else {
    int v6 = v7;
  }
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[2] = v8;
  void v11[3] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v13);
  if (a2) {
    goto LABEL_17;
  }
LABEL_18:
  if (v6)
  {
    uint64_t v9 = v15;
  }
  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    unsigned int v15 = -1;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1C5F47A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&a29);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToInt64(const std::string *a1, unsigned char *a2, char a3)
{
  uint64_t v14 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10, &v13);
  MEMORY[0x1C8796AB0](v10, &v14);
  int v5 = (*(_DWORD *)((char *)&v10[4] + *(void *)(v10[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0) {
    int v5 = (*(_DWORD *)((unsigned char *)&v10[4] + *(void *)(v10[0] - 24)) & 5) == 0;
  }
  if ((*(_DWORD *)((unsigned char *)&v10[4] + *(void *)(v10[0] - 24)) & 5) != 0) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  std::string v10[2] = v7;
  void v10[3] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v12);
  if (a2) {
    *a2 = v6;
  }
  if (v6)
  {
    uint64_t v8 = v14;
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1C5F47D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&a29);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToUInt64(const std::string *a1, unsigned char *a2, char a3)
{
  uint64_t v15 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    int v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v14.__r_.__value_.__s + 23)) {
      goto LABEL_9;
    }
    int v5 = &v14;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 45)
  {
    int v6 = 0;
    if (!a2) {
      goto LABEL_18;
    }
LABEL_17:
    *a2 = v6;
    goto LABEL_18;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11, &v14);
  MEMORY[0x1C8796AC0](v11, &v15);
  int v7 = (*(_DWORD *)((char *)&v11[4] + *(void *)(v11[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0) {
    int v7 = (*(_DWORD *)((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) == 0;
  }
  if ((*(_DWORD *)((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) != 0) {
    int v6 = 0;
  }
  else {
    int v6 = v7;
  }
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[2] = v8;
  void v11[3] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v13);
  if (a2) {
    goto LABEL_17;
  }
LABEL_18:
  if (v6)
  {
    uint64_t v9 = v15;
  }
  else
  {
    uint64_t v9 = -1;
    uint64_t v15 = -1;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1C5F480E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&a29);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringFromDouble@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = this;
  uint64_t v5 = MEMORY[0x1E4FBA488] + 104;
  v34[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v6 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v29 = MEMORY[0x1E4FBA488] + 64;
  int v7 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v28[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v8;
  v28[1] = 0;
  uint64_t v9 = (std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24));
  std::ios_base::init(v9, v30);
  uint64_t v10 = MEMORY[0x1E4FBA488] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v11 = v7[5];
  uint64_t v29 = v7[4];
  *(void *)((char *)&v30[-1] + *(void *)(v29 - 24)) = v11;
  v28[0] = v7[1];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v7[6];
  v34[0] = v5;
  v28[0] = v10;
  uint64_t v29 = v6;
  std::streambuf::basic_streambuf();
  uint64_t v12 = MEMORY[0x1E4FBA470] + 16;
  v30[0] = MEMORY[0x1E4FBA470] + 16;
  long long v31 = 0u;
  long long v32 = 0u;
  int v33 = 16;
  uint64_t v13 = v29;
  *(_DWORD *)((char *)v30 + *(void *)(v29 - 24)) = *(_DWORD *)((unsigned char *)v30 + *(void *)(v29 - 24)) & 0xFFFFFEFB | 4;
  if ((v3 & 0x80000000) == 0) {
    *(void *)((char *)&v30[1] + *(void *)(v13 - 24)) = v3;
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::basic_string[abi:ne180100]<0>(v26, ".");
  if (siri::dialogengine::StringContains((char **)a2, (char *)v26))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e");
    int v14 = siri::dialogengine::StringContains((char **)a2, (char *)__p) ^ 1;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v14 = 0;
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v14) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  operator delete(v26[0]);
  if (!v14) {
    goto LABEL_24;
  }
LABEL_11:
  while ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_24;
    }
    int v16 = *(unsigned __int8 *)(a2 - 1 + v15);
    if (v16 != 48)
    {
      if (v16 != 46) {
        goto LABEL_24;
      }
      uint64_t v21 = v15 - 1;
      *(unsigned char *)(a2 + 23) = v15 - 1;
      uint64_t v18 = (char *)a2;
      goto LABEL_23;
    }
    uint64_t v17 = v15 - 1;
    *(unsigned char *)(a2 + 23) = v15 - 1;
    uint64_t v18 = (char *)a2;
LABEL_18:
    v18[v17] = 0;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19) {
    goto LABEL_24;
  }
  uint64_t v18 = *(char **)a2;
  int v20 = *(unsigned __int8 *)(*(void *)a2 + v19 - 1);
  if (v20 == 48)
  {
    uint64_t v17 = v19 - 1;
    *(void *)(a2 + 8) = v17;
    goto LABEL_18;
  }
  if (v20 != 46) {
    goto LABEL_24;
  }
  uint64_t v21 = v19 - 1;
  *(void *)(a2 + 8) = v19 - 1;
LABEL_23:
  v18[v21] = 0;
LABEL_24:
  v28[0] = *v7;
  uint64_t v22 = v7[9];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v7[8];
  uint64_t v29 = v22;
  v30[0] = v12;
  if (SBYTE7(v32) < 0) {
    operator delete((void *)v31);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8796CC0](v34);
}

void sub_1C5F48740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

double siri::dialogengine::StringToDouble(const std::string *a1, unsigned char *a2)
{
  if (siri::dialogengine::IsStringANumber(a1))
  {
    uint64_t v9 = 0;
    siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    double v5 = strtod((const char *)p_p, &v9);
    if (a2)
    {
      char v6 = (char)v9;
      if (v9) {
        char v6 = *v9 == 0;
      }
      *a2 = v6;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    double v5 = 0.0;
    if (a2) {
      *a2 = 0;
    }
  }
  return v5;
}

void sub_1C5F48864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsStringANumber(const std::string *a1)
{
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    BOOL v6 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_42;
    }
    return v6;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unsigned int v3 = (std::string *)((char *)p_p + size);
  int v4 = p_p->__r_.__value_.__s.__data_[0];
  if (v4 == 45 || v4 == 43) {
    double v5 = (std::string *)((char *)&p_p->__r_.__value_.__l.__data_ + 1);
  }
  else {
    double v5 = p_p;
  }
  int v7 = (unsigned __int8 *)p_p + size;
  uint64_t v8 = (std::string *)((char *)p_p + size);
  if (v5 == v3) {
    goto LABEL_25;
  }
  while (v5->__r_.__value_.__s.__data_[0] - 48 <= 9)
  {
    double v5 = (std::string *)((char *)v5 + 1);
    if (v5 == v3)
    {
      double v5 = (std::string *)((char *)p_p + size);
      break;
    }
  }
  uint64_t v8 = (std::string *)((char *)p_p + size);
  if (v5 == v3) {
    goto LABEL_25;
  }
  if (v5->__r_.__value_.__s.__data_[0] != 46 || (std::string *)((char *)&v5->__r_.__value_.__l.__data_ + 1) == v3)
  {
    uint64_t v8 = v5;
LABEL_25:
    uint64_t v10 = (unsigned __int8 *)v8;
    goto LABEL_26;
  }
  uint64_t v17 = (uint64_t)&v7[~(unint64_t)v5];
  int64_t v18 = (char *)p_p + size - (char *)v5;
  uint64_t v19 = 1;
  while (v5->__r_.__value_.__s.__data_[v19] - 48 <= 9)
  {
    if (v18 == ++v19)
    {
      uint64_t v10 = v7;
      goto LABEL_51;
    }
  }
  uint64_t v10 = (unsigned __int8 *)v5 + v19;
  uint64_t v17 = v19 - 1;
LABEL_51:
  uint64_t v8 = v5;
  if (!v17) {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v11 = (unsigned __int8 *)v3;
  if (v10 == (unsigned __int8 *)v3)
  {
LABEL_40:
    int v7 = v11;
    goto LABEL_41;
  }
  uint64_t v12 = v10 + 1;
  if ((*v10 | 0x20) != 0x65 || v12 == (unsigned __int8 *)v3) {
    goto LABEL_39;
  }
  int v14 = *v12;
  if (v14 == 45 || v14 == 43) {
    uint64_t v12 = v10 + 2;
  }
  if (v12 == (unsigned __int8 *)v3)
  {
LABEL_39:
    uint64_t v11 = v10;
    goto LABEL_40;
  }
  int64_t v15 = 0;
  while (v12[v15] - 48 <= 9)
  {
    if (&v12[++v15] == (unsigned __int8 *)v3)
    {
      int64_t v15 = v7 - v12;
      goto LABEL_48;
    }
  }
  int v7 = &v12[v15];
LABEL_48:
  uint64_t v11 = v10;
  if (!v15) {
    goto LABEL_40;
  }
LABEL_41:
  BOOL v6 = v3 == (std::string *)v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_42:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void siri::dialogengine::StringToU32String()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F48B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::U32StringToString()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F48C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::StringSplit(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  memset(v31, 0, sizeof(v31));
  unsigned int v5 = *a2;
  if (*a2)
  {
    BOOL v6 = a2 + 1;
    do
    {
      *((unsigned char *)v31 + v5) = 1;
      unsigned int v7 = *v6++;
      unsigned int v5 = v7;
    }
    while (v7);
  }
  uint64_t v8 = (int64x2_t *)operator new(0x80uLL);
  uint64_t v9 = v8;
  uint64_t v10 = a1[23];
  int v11 = (char)v10;
  uint64_t v12 = &a1[v10];
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = (unsigned __int8 *)(*(void *)a1 + *((void *)a1 + 1));
  }
  if (v11 >= 0) {
    int v14 = a1;
  }
  else {
    int v14 = *(unsigned __int8 **)a1;
  }
  if (v14 >= v13)
  {
    uint64_t v17 = v8;
  }
  else
  {
    int64_t v15 = v8 + 8;
    int v16 = v8;
    do
    {
      if (*((unsigned char *)v31 + *v14))
      {
        uint64_t v17 = v16;
      }
      else
      {
        if (v16 >= v15)
        {
          uint64_t v18 = v16 - v9;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v15 - (char *)v9) >> 3 > v19) {
            unint64_t v19 = ((char *)v15 - (char *)v9) >> 3;
          }
          if ((unint64_t)((char *)v15 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            if (v20 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v21 = (char *)operator new(16 * v20);
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (int64x2_t *)&v21[16 * v18];
          *uint64_t v22 = vdupq_n_s64((unint64_t)v14);
          uint64_t v17 = v22 + 1;
          if (v16 == v9)
          {
            unsigned __int8 v23 = v22;
          }
          else
          {
            do
            {
              unsigned __int8 v23 = v22 - 1;
              v22[-1] = v16[-1];
              --v16;
              --v22;
            }
            while (v16 != v9);
          }
          int64_t v15 = (int64x2_t *)&v21[16 * v20];
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v23;
        }
        else
        {
          v16->i64[0] = (uint64_t)v14;
          v16->i64[1] = (uint64_t)v14;
          uint64_t v17 = v16 + 1;
        }
        unsigned __int8 v24 = v14 + 1;
        while (v24 != v13)
        {
          unsigned int v25 = *v24++;
          if (*((unsigned char *)v31 + v25))
          {
            int v14 = v24 - 1;
            goto LABEL_38;
          }
        }
        int v14 = v13;
LABEL_38:
        v17[-1].i64[1] = (uint64_t)v14;
        int v16 = v17;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v26 = (char *)v17 - (char *)v9;
  if (v17 == v9)
  {
    if (!v9) {
      return;
    }
  }
  else
  {
    unint64_t v27 = v26 >> 4;
    std::vector<std::string>::__vallocate[abi:ne180100](a3, v26 >> 4);
    std::string::size_type v28 = (char *)a3[1];
    bzero(v28, 24 * ((24 * v27 - 24) / 0x18) + 24);
    uint64_t v29 = 0;
    a3[1] = &v28[24 * ((24 * v27 - 24) / 0x18) + 24];
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    uint64_t v30 = (char **)&v9->i64[1];
    do
    {
      std::string::append[abi:ne180100]<char const*,0>((std::string *)(*a3 + v29), *(v30 - 1), *v30);
      v30 += 2;
      v29 += 24;
      --v27;
    }
    while (v27);
  }
  operator delete(v9);
}

void sub_1C5F48F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9) {
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringJoin(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void siri::dialogengine::StringJoinInternal<std::vector<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a1, "");
  }
  else
  {
    uint64_t v6 = a2;
    if (a3 - a2 == 24)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        int64_t v15 = *(const std::string::value_type **)a2;
        std::string::size_type v16 = *(void *)(v6 + 8);
        std::string::__init_copy_ctor_external((std::string *)a1, v15, v16);
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
      }
    }
    else
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      do
      {
        uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a1 + 8);
        }
        if (v8)
        {
          int v9 = *(char *)(a4 + 23);
          if (v9 >= 0) {
            uint64_t v10 = (const std::string::value_type *)a4;
          }
          else {
            uint64_t v10 = *(const std::string::value_type **)a4;
          }
          if (v9 >= 0) {
            std::string::size_type v11 = *(unsigned __int8 *)(a4 + 23);
          }
          else {
            std::string::size_type v11 = *(void *)(a4 + 8);
          }
          std::string::append((std::string *)a1, v10, v11);
        }
        int v12 = *(char *)(v6 + 23);
        if (v12 >= 0) {
          uint64_t v13 = (const std::string::value_type *)v6;
        }
        else {
          uint64_t v13 = *(const std::string::value_type **)v6;
        }
        if (v12 >= 0) {
          std::string::size_type v14 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          std::string::size_type v14 = *(void *)(v6 + 8);
        }
        std::string::append((std::string *)a1, v13, v14);
        v6 += 24;
      }
      while (v6 != a3);
    }
  }
}

void sub_1C5F4911C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringJoin(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[2];
  if (v4 == 1)
  {
    unsigned int v5 = (void *)*a1;
    if (*(char *)(*a1 + 55) < 0)
    {
      unint64_t v20 = (const std::string::value_type *)v5[4];
      std::string::size_type v21 = v5[5];
      std::string::__init_copy_ctor_external((std::string *)a3, v20, v21);
    }
    else
    {
      long long v6 = *((_OWORD *)v5 + 2);
      *(void *)(a3 + 16) = v5[6];
      *(_OWORD *)a3 = v6;
    }
  }
  else if (v4)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unsigned int v7 = a1 + 1;
    uint64_t v8 = (void *)*a1;
    if ((void *)*a1 != a1 + 1)
    {
      do
      {
        uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(a3 + 8);
        }
        if (v10)
        {
          int v11 = *(char *)(a2 + 23);
          if (v11 >= 0) {
            int v12 = (const std::string::value_type *)a2;
          }
          else {
            int v12 = *(const std::string::value_type **)a2;
          }
          if (v11 >= 0) {
            std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            std::string::size_type v13 = *(void *)(a2 + 8);
          }
          std::string::append((std::string *)a3, v12, v13);
        }
        int v14 = *((char *)v8 + 55);
        if (v14 >= 0) {
          int64_t v15 = (const std::string::value_type *)(v8 + 4);
        }
        else {
          int64_t v15 = (const std::string::value_type *)v8[4];
        }
        if (v14 >= 0) {
          std::string::size_type v16 = *((unsigned __int8 *)v8 + 55);
        }
        else {
          std::string::size_type v16 = v8[5];
        }
        std::string::append((std::string *)a3, v15, v16);
        uint64_t v17 = (void *)v8[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v8[2];
            BOOL v19 = *v18 == (void)v8;
            uint64_t v8 = v18;
          }
          while (!v19);
        }
        uint64_t v8 = v18;
      }
      while (v18 != v7);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  }
}

void sub_1C5F49294(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringJoinMap(void *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v6 = a4;
  v38[2] = *MEMORY[0x1E4F143B8];
  memset(&v36, 0, sizeof(v36));
  int v9 = (long long *)*a1;
  unsigned int v7 = (long long *)(a1 + 1);
  uint64_t v8 = v9;
  if (v9 == v7)
  {
    std::vector<std::string>::pointer v29 = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v33, v8 + 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v33.__r_.__value_.__l.__data_, a2, (uint64_t)&v32);
      if ((v35 & 0x80u) == 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v12 = v35;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      std::string::size_type v13 = std::string::append(&v32, (const std::string::value_type *)v11, v12);
      int v14 = (char *)v13->__r_.__value_.__r.__words[0];
      v38[0] = v13->__r_.__value_.__l.__size_;
      *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer end = v36.__end_;
      if (v36.__end_ >= v36.__end_cap_.__value_)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v20) {
          unint64_t v20 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v20;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
        if (v21) {
          uint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36.__end_cap_, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unsigned __int8 v23 = v22 + v19;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        std::string::size_type v24 = v38[0];
        v23->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v23->__r_.__value_.__l.__size_ = v24;
        *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
        *((unsigned char *)&v23->__r_.__value_.__s + 23) = v15;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v36, &__v);
        uint64_t v18 = v36.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        std::string::size_type v17 = v38[0];
        v36.__end_->__r_.__value_.__l.__data_ = v14;
        end->__r_.__value_.__l.__size_ = v17;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = v15;
        uint64_t v18 = end + 1;
      }
      v36.__end_ = v18;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if ((char)v35 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      unsigned int v25 = (long long *)*((void *)v8 + 1);
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          unsigned int v25 = *(long long **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (long long *)*((void *)v8 + 2);
          BOOL v27 = *(void *)v26 == (void)v8;
          uint64_t v8 = v26;
        }
        while (!v27);
      }
      uint64_t v8 = v26;
    }
    while (v26 != v7);
    std::vector<std::string>::pointer begin = v36.__begin_;
    std::vector<std::string>::pointer v29 = v36.__end_;
    uint64_t v6 = a4;
    uint64_t v4 = a3;
  }
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(v6, (uint64_t)begin, (uint64_t)v29, v4);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1C5F49530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *__pa, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19, uint64_t a20,char a21)
{
  a15 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseStringList(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v5 = a1[1];
  }
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x1E4F14390];
    while (1)
    {
      if ((v4 & 0x80u) == 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = (uint64_t *)*a1;
      }
      unsigned int v11 = *((char *)v10 + v8);
      if ((v11 & 0x80000000) != 0) {
        int v12 = __maskrune(v11, 0x4000uLL);
      }
      else {
        int v12 = *(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000;
      }
      if (v8 < v5 && v12)
      {
        ++v8;
        goto LABEL_76;
      }
      if (v8 >= v5) {
        return;
      }
      memset(&__str, 0, sizeof(__str));
      if (*((char *)a1 + 23) >= 0) {
        std::string::size_type v13 = a1;
      }
      else {
        std::string::size_type v13 = (uint64_t *)*a1;
      }
      int v14 = *((unsigned __int8 *)v13 + v8);
      if (v14 == 44)
      {
        ++v8;
        goto LABEL_75;
      }
      if (v14 == 39) {
        int v15 = 39;
      }
      else {
        int v15 = 0;
      }
      if (v14 == 34) {
        int v16 = 34;
      }
      else {
        int v16 = v15;
      }
      std::string::push_back(&__str, v14);
      ++v8;
      while (v8 < v5)
      {
        if (*((char *)a1 + 23) >= 0) {
          std::string::size_type v17 = a1;
        }
        else {
          std::string::size_type v17 = (uint64_t *)*a1;
        }
        int v18 = *((unsigned __int8 *)v17 + v8);
        if (v18 == 39 || v18 == 34)
        {
          if ((_BYTE)v16) {
            int v19 = v16;
          }
          else {
            int v19 = v18;
          }
          if (v18 == v16) {
            int v16 = 0;
          }
          else {
            int v16 = v19;
          }
        }
        else if (v18 == 44 && v16 == 0)
        {
          ++v8;
          break;
        }
        ++v8;
        std::string::push_back(&__str, v18);
      }
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v29);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v29;
      if (a2 == 1)
      {
        LOBYTE(size) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_)
          {
            int v22 = *__str.__r_.__value_.__l.__data_;
LABEL_54:
            if (v22 == 34 || v22 == 39)
            {
              std::string::basic_string(&v29, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v29;
              LOBYTE(size) = *((unsigned char *)&v29.__r_.__value_.__s + 23);
            }
            std::string::size_type size = size;
            if ((size & 0x80u) == 0)
            {
              p_str = &__str;
            }
            else
            {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v24 = size - 1;
            int v25 = p_str->__r_.__value_.__s.__data_[size - 1];
            if (v25 == 39 || v25 == 34)
            {
              std::string::basic_string(&v29, &__str, 0, v24, (std::allocator<char> *)&v31);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v29;
            }
          }
        }
        else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
        {
          int v22 = __str.__r_.__value_.__s.__data_[0];
          goto LABEL_54;
        }
      }
      unint64_t v26 = a3[1];
      if (v26 >= a3[2])
      {
        uint64_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(void *)(v26 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v26 = v27;
        }
        uint64_t v28 = v26 + 24;
        a3[1] = v26 + 24;
      }
      a3[1] = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
LABEL_75:
      if (v8 >= v5) {
        return;
      }
LABEL_76:
      LOBYTE(v4) = *((unsigned char *)a1 + 23);
    }
  }
}

void sub_1C5F498A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  v18[1] = v19;
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::StringFromBool@<X0>(siri::dialogengine *this@<X0>, void *a2@<X8>)
{
  if (this) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *siri::dialogengine::StringFromOptionalBool@<X0>(__int16 a1@<W0>, void *a2@<X8>)
{
  uint64_t v2 = "true";
  if (!(_BYTE)a1) {
    uint64_t v2 = "false";
  }
  if ((a1 & 0xFF00) != 0) {
    unsigned int v3 = (char *)v2;
  }
  else {
    unsigned int v3 = "unset";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t siri::dialogengine::StringToBool(const std::string *a1)
{
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_15;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_15;
    }
    p_p = &__p;
  }
  __darwin_ct_rune_t v2 = __tolower(p_p->__r_.__value_.__s.__data_[0]) << 24;
  if (v2 == 822083584 || v2 == 1946157056 || v2 == 2030043136)
  {
    uint64_t v5 = 1;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v5 = 0;
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5F499E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringSplitWithDelimiters(std::string *__str@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    uint64_t v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v9 = __str;
  }
  uint64_t v10 = a2[23];
  if ((v10 & 0x80u) == 0) {
    unsigned int v11 = a2;
  }
  else {
    unsigned int v11 = *(unsigned __int8 **)a2;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v10)
  {
    int v12 = (unsigned __int8 *)v9 + size;
    std::string::size_type v13 = v9;
LABEL_13:
    uint64_t v14 = v10;
    int v15 = v11;
    while (v13->__r_.__value_.__s.__data_[0] != *v15)
    {
      ++v15;
      if (!--v14)
      {
        std::string::size_type v13 = (std::string *)((char *)v13 + 1);
        if (v13 != (std::string *)v12) {
          goto LABEL_13;
        }
        std::string::size_type v13 = (std::string *)v12;
        break;
      }
    }
    std::string::size_type v16 = (char *)v13 - (char *)v9;
    if (v13 == (std::string *)v12) {
      std::string::size_type v17 = -1;
    }
    else {
      std::string::size_type v17 = v16;
    }
  }
  else
  {
    std::string::size_type v17 = -1;
  }
  std::string::size_type v18 = 0;
  while (v17 != -1)
  {
    std::string::basic_string(&v78, __str, v18, v17 - v18, (std::allocator<char> *)&__v);
    std::string::size_type v19 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = v78.__r_.__value_.__l.__size_;
    }
    if (v19)
    {
      unint64_t v20 = *(void *)(a4 + 8);
      if (v20 >= *(void *)(a4 + 16))
      {
        uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (long long *)&v78);
      }
      else
      {
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v21 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
          *(void *)(v20 + 16) = *((void *)&v78.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v20 = v21;
        }
        uint64_t v22 = v20 + 24;
        *(void *)(a4 + 8) = v20 + 24;
      }
      *(void *)(a4 + 8) = v22;
    }
    std::string::size_type v23 = v17 + 1;
    int v24 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    std::string::size_type v25 = __str->__r_.__value_.__l.__size_;
    BOOL v26 = v24 < 0;
    if (v24 >= 0) {
      long long v27 = __str;
    }
    else {
      long long v27 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (!v26) {
      std::string::size_type v25 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    uint64_t v28 = a3[23];
    if ((v28 & 0x80u) == 0) {
      std::string v29 = a3;
    }
    else {
      std::string v29 = *(unsigned __int8 **)a3;
    }
    if ((v28 & 0x80u) != 0) {
      uint64_t v28 = *((void *)a3 + 1);
    }
    if (v25 <= v23 || v28 == 0)
    {
LABEL_49:
      std::string::basic_string(&v77, __str, v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
      unint64_t v32 = *(void *)(a4 + 8);
      unint64_t v31 = *(void *)(a4 + 16);
      if (v32 >= v31)
      {
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *(void *)a4) >> 3);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(void *)a4) >> 3);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0x555555555555555) {
          unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v45 = v43;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v45) {
          std::basic_regex<char> v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v45);
        }
        else {
          std::basic_regex<char> v46 = 0;
        }
        __int16 v47 = v46 + v42;
        __v.__first_ = v46;
        __v.__begin_ = v47;
        __v.__end_cap_.__value_ = &v46[v45];
        long long v48 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v47->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
        memset(&v77, 0, sizeof(v77));
        __v.__end_ = v47 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        uint64_t v49 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v50 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
        *(void *)(a4 + 8) = v49;
        if (v50 < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v33 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(void *)(v32 + 16) = *((void *)&v77.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v32 = v33;
        *(void *)(a4 + 8) = v32 + 24;
      }
      char v51 = 0;
      std::string::size_type v18 = -1;
    }
    else
    {
      int v34 = (unsigned __int8 *)v27 + v23;
      unsigned __int8 v35 = (unsigned __int8 *)v27 + v25;
LABEL_51:
      uint64_t v36 = v28;
      BOOL v37 = v29;
      while (*v34 != *v37)
      {
        ++v37;
        if (!--v36)
        {
          if (++v34 != v35) {
            goto LABEL_51;
          }
          goto LABEL_49;
        }
      }
      if (v34 == v35) {
        goto LABEL_49;
      }
      int64_t v38 = v34 - (unsigned __int8 *)v27;
      if (v34 - (unsigned __int8 *)v27 == -1) {
        goto LABEL_49;
      }
      std::string::basic_string(&v77, __str, v17, v38 - v17 + 1, (std::allocator<char> *)&__v);
      unint64_t v40 = *(void *)(a4 + 8);
      unint64_t v39 = *(void *)(a4 + 16);
      if (v40 >= v39)
      {
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *(void *)a4) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(void *)a4) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x555555555555555) {
          unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v55 = v53;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v55) {
          std::string v56 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v55);
        }
        else {
          std::string v56 = 0;
        }
        uint64_t v57 = v56 + v52;
        __v.__first_ = v56;
        __v.__begin_ = v57;
        __v.__end_cap_.__value_ = &v56[v55];
        long long v58 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v57->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
        memset(&v77, 0, sizeof(v77));
        __v.__end_ = v57 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        uint64_t v59 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v60 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
        *(void *)(a4 + 8) = v59;
        if (v60 < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v41 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(void *)(v40 + 16) = *((void *)&v77.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v40 = v41;
        *(void *)(a4 + 8) = v40 + 24;
      }
      std::string::size_type v18 = v38 + 1;
      int v61 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      BOOL v62 = v61 < 0;
      if (v61 >= 0) {
        char v63 = __str;
      }
      else {
        char v63 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if (v62) {
        std::string::size_type v64 = __str->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v64 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      uint64_t v65 = a2[23];
      uint64_t v66 = *(unsigned __int8 **)a2;
      if ((v65 & 0x80u) != 0) {
        uint64_t v65 = *((void *)a2 + 1);
      }
      else {
        uint64_t v66 = a2;
      }
      std::string::size_type v17 = -1;
      char v51 = 1;
      if (v64 > v18 && v65)
      {
        uint64_t v67 = (unsigned __int8 *)v63 + v18;
        uint64_t v68 = (unsigned __int8 *)v63 + v64;
LABEL_100:
        uint64_t v69 = v65;
        uint64_t v70 = v66;
        while (*v67 != *v70)
        {
          ++v70;
          if (!--v69)
          {
            if (++v67 != v68) {
              goto LABEL_100;
            }
            uint64_t v67 = v68;
            break;
          }
        }
        std::string::size_type v71 = v67 - (unsigned __int8 *)v63;
        if (v67 == v68) {
          std::string::size_type v17 = -1;
        }
        else {
          std::string::size_type v17 = v71;
        }
        char v51 = 1;
      }
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v78.__r_.__value_.__l.__data_);
      if ((v51 & 1) == 0) {
        break;
      }
    }
    else if ((v51 & 1) == 0)
    {
      break;
    }
  }
  if (v18 != -1)
  {
    std::string::basic_string((std::string *)&__v, __str, v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v77);
    std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
    char v73 = HIBYTE(__v.__end_);
    if (SHIBYTE(__v.__end_) < 0) {
      std::__split_buffer<std::string>::pointer end_high = __v.__begin_;
    }
    if (end_high)
    {
      unint64_t v74 = *(void *)(a4 + 8);
      if (v74 >= *(void *)(a4 + 16))
      {
        uint64_t v76 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (long long *)&__v);
      }
      else
      {
        if (SHIBYTE(__v.__end_) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
        }
        else
        {
          long long v75 = *(_OWORD *)&__v.__first_;
          *(void *)(v74 + 16) = __v.__end_;
          *(_OWORD *)unint64_t v74 = v75;
        }
        uint64_t v76 = v74 + 24;
        *(void *)(a4 + 8) = v74 + 24;
      }
      *(void *)(a4 + 8) = v76;
      char v73 = HIBYTE(__v.__end_);
    }
    if (v73 < 0) {
      operator delete(__v.__first_);
    }
  }
}

void sub_1C5F49F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  *(void *)(v27 + 8) = v28;
  if (a27 < 0) {
    operator delete(__p);
  }
  a16 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

double siri::dialogengine::SpeakableString::SpeakableString(siri::dialogengine::SpeakableString *this)
{
  *((void *)this + 20) = 0;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 20) = 0;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t siri::dialogengine::SpeakableString::SpeakableString(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = a1 + 48;
  *(void *)(a1 + 160) = 0;
  uint64_t v4 = a1 + 72;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  siri::dialogengine::SpeakableString::SetString(a1, a2);
  MEMORY[0x1C8796900](v3, "");
  MEMORY[0x1C8796900](v4, "");
  return a1;
}

void sub_1C5F4A0C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::SpeakableString::SetString(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v22, "SS[");
  if (siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)&v22))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    BOOL v4 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_7;
    }
LABEL_50:
    std::string::operator=((std::string *)a1, (const std::string *)a2);
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
    goto LABEL_51;
  }
  if (!v4) {
    goto LABEL_50;
  }
LABEL_7:
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::string::basic_string(&__p, (const std::string *)a2, 3uLL, v5 - 4, (std::allocator<char> *)&v22);
  std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  BOOL v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
LABEL_46:
    std::string::operator=((std::string *)a1, &__p);
    std::string::operator=((std::string *)(a1 + 24), &__p);
    goto LABEL_47;
  }
  std::string::size_type v10 = 0;
  char v11 = 0;
  char v12 = 0;
  while (1)
  {
    if (v11) {
      goto LABEL_15;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (!v7) {
      p_p = &__p;
    }
    int v14 = p_p->__r_.__value_.__s.__data_[v10];
    if (!((v14 != 47) | v12 & 1)) {
      break;
    }
    if (v14 == 92)
    {
      char v11 = 1;
      goto LABEL_42;
    }
    if (v14 == 34)
    {
      char v11 = 0;
      v12 ^= 1u;
      goto LABEL_42;
    }
LABEL_15:
    char v11 = 0;
LABEL_42:
    ++v10;
    BOOL v7 = (v6 & 0x80u) != 0;
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v18 = v6;
    }
    else {
      std::string::size_type v18 = size;
    }
    if (v10 >= v18) {
      goto LABEL_46;
    }
  }
  std::string::basic_string(&v22, &__p, v10, 5uLL, (std::allocator<char> *)&v23);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) == 5
      && LODWORD(v22.__r_.__value_.__l.__data_) == 1937011759
      && v22.__r_.__value_.__s.__data_[4] == 58)
    {
      goto LABEL_52;
    }
    goto LABEL_41;
  }
  if (v22.__r_.__value_.__l.__size_ != 5)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_41:
    char v12 = 0;
    char v11 = 0;
    std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    goto LABEL_42;
  }
  BOOL v17 = *(_DWORD *)v22.__r_.__value_.__l.__data_ != 1937011759 || *(unsigned char *)(v22.__r_.__value_.__r.__words[0] + 4) != 58;
  operator delete(v22.__r_.__value_.__l.__data_);
  if (v17) {
    goto LABEL_41;
  }
LABEL_52:
  std::string::basic_string(&v22, &__p, 0, v10, (std::allocator<char> *)&v23);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v22;
  std::string::basic_string(&v22, &__p, v10 + 5, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  unint64_t v20 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)unint64_t v20 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(void *)(a1 + 40) = *((void *)&v22.__r_.__value_.__l + 2);
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_51:
  MEMORY[0x1C8796900](a1 + 96, "");
  MEMORY[0x1C8796900](a1 + 120, "");
  return MEMORY[0x1C8796900](a1 + 144, "");
}

void sub_1C5F4A428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::SpeakableString::SpeakableString(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = a1 + 48;
  *(void *)(a1 + 160) = 0;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  siri::dialogengine::SpeakableString::SetString((std::string *)a1, a2, a3);
  MEMORY[0x1C8796900](v4, "");
  MEMORY[0x1C8796900](v5, "");
  return a1;
}

void sub_1C5F4A4FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableString::SetString(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a3);
  MEMORY[0x1C8796900](&a1[4], "");
  MEMORY[0x1C8796900](&a1[5], "");
  JUMPOUT(0x1C8796900);
}

std::string *siri::dialogengine::SpeakableString::SpeakableString(std::string *this, const siri::dialogengine::SpeakableString *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  std::string::size_type v10 = this + 6;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_1C5F4A76C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableString::GetString(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = 24;
  if (a2 == 1)
  {
    uint64_t v4 = 0;
    uint64_t v3 = a1;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + v4), *(void *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    a3->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
  }
}

void siri::dialogengine::SpeakableString::ToMultiplexedString(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
  {
    std::operator+<char>();
    std::string::push_back(&v16, 93);
    *a2 = v16;
  }
  else
  {
    std::operator+<char>();
    uint64_t v4 = std::string::append(&v14, "/tts:");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v8 = (const std::string::value_type *)*((void *)this + 3);
    long long v7 = (char *)this + 24;
    long long v6 = v8;
    int v9 = v7[23];
    if (v9 >= 0) {
      std::string::size_type v10 = v7;
    }
    else {
      std::string::size_type v10 = v6;
    }
    if (v9 >= 0) {
      std::string::size_type v11 = v7[23];
    }
    else {
      std::string::size_type v11 = *((void *)v7 + 1);
    }
    char v12 = std::string::append(&v15, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v16, 93);
    *a2 = v16;
    memset(&v16, 0, sizeof(v16));
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5F4A968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::SpeakableString::SpeakEqualsPrint(siri::dialogengine::SpeakableString *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 47);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v2 = *((void *)this + 4);
  }
  uint64_t v3 = *((unsigned __int8 *)this + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)this + 1);
  }
  if (v2 != v3) {
    return 0;
  }
  long long v5 = (const void **)((char *)this + 24);
  if (v4 >= 0) {
    long long v6 = this;
  }
  else {
    long long v6 = *(siri::dialogengine::SpeakableString **)this;
  }
  if ((v1 & 0x80) != 0) {
    return memcmp(*v5, v6, *((void *)this + 4)) == 0;
  }
  if (!*((unsigned char *)this + 47)) {
    return 1;
  }
  uint64_t v7 = v1 - 1;
  do
  {
    int v9 = *(unsigned __int8 *)v5;
    long long v5 = (const void **)((char *)v5 + 1);
    int v8 = v9;
    int v11 = *(unsigned __int8 *)v6;
    long long v6 = (siri::dialogengine::SpeakableString *)((char *)v6 + 1);
    int v10 = v11;
    BOOL v13 = v7-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

void siri::dialogengine::SpeakableString::GetSpeak(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSpeak(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::SpeakableString::GetPrint(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::SpeakableString::SetRedacted(siri::dialogengine::SpeakableString *this)
{
  MEMORY[0x1C8796900]((char *)this + 48, "[[Redacted]]");
  JUMPOUT(0x1C8796900);
}

std::string *siri::dialogengine::SpeakableString::SetRedacted(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=(a1 + 2, a2);
  return std::string::operator=(a1 + 3, a3);
}

std::string *siri::dialogengine::SpeakableString::SetRedactedPrint(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

std::string *siri::dialogengine::SpeakableString::SetRedactedSpeak(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::SpeakableString::GetRedactedPrint(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (const std::string::value_type **)((char *)this + 48);
  if (*((char *)this + 71) < 0)
  {
    std::string::size_type v4 = *((void *)this + 7);
    if (v4)
    {
      long long v5 = *v2;
      goto LABEL_10;
    }
  }
  else if (*((unsigned char *)this + 71))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    std::string::size_type v3 = *((void *)this + 8);
LABEL_8:
    a2->__r_.__value_.__r.__words[2] = v3;
    return;
  }
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    std::string::size_type v3 = *((void *)this + 2);
    goto LABEL_8;
  }
  long long v5 = *(const std::string::value_type **)this;
  std::string::size_type v4 = *((void *)this + 1);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v5, v4);
}

void siri::dialogengine::SpeakableString::GetRedactedSpeak(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    std::string::size_type v3 = *((void *)this + 10);
    if (v3)
    {
      std::string::size_type v4 = *(const std::string::value_type **)v2;
      goto LABEL_10;
    }
  }
  else if (*((unsigned char *)this + 95))
  {
LABEL_8:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    return;
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    uint64_t v2 = (char *)this + 24;
    goto LABEL_8;
  }
  std::string::size_type v4 = (const std::string::value_type *)*((void *)this + 3);
  std::string::size_type v3 = *((void *)this + 4);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v4, v3);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptValue(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptValue(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptCategory(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptCategory(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptInflection(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 18), *((void *)this + 19));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 9);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 20);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptInflection(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 6, a2);
}

BOOL siri::dialogengine::SpeakableString::IsEmpty(siri::dialogengine::SpeakableString *this)
{
  if (*((char *)this + 47) < 0)
  {
    if (*((void *)this + 4)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 47))
  {
    return 0;
  }
  if (*((char *)this + 23) < 0) {
    uint64_t v2 = *((void *)this + 1);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  return v2 == 0;
}

BOOL siri::dialogengine::SpeakableString::IsRedactedEmpty(siri::dialogengine::SpeakableString *this)
{
  if (*((char *)this + 71) < 0)
  {
    if (*((void *)this + 7)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 71))
  {
    return 0;
  }
  if (*((char *)this + 95) < 0) {
    uint64_t v2 = *((void *)this + 10);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 95);
  }
  return v2 == 0;
}

uint64_t siri::dialogengine::SpeakableString::Validate(siri::dialogengine::SpeakableString *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, v8);
  uint64_t v4 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v8, a2, 0);
  int v9 = (void **)v8;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (!siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
  {
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, v5, v8);
    int v6 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v8, a2, 0);
    int v9 = (void **)v8;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v9);
    return v6 & v4;
  }
  return v4;
}

void sub_1C5F4ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetPrintChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_8;
    }
  }
  else if (!*((unsigned char *)this + 71))
  {
    goto LABEL_8;
  }
  long long v5 = this;
  if (*((char *)this + 23) < 0) {
    long long v5 = *(siri::dialogengine::SpeakableString **)this;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Redacted print is not empty when parsing print string '%s'", a2, v5);
LABEL_8:
  siri::dialogengine::ParseSpeakableString((uint64_t)this, a3);
}

void siri::dialogengine::SpeakableString::GetSpeakChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_8;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    goto LABEL_8;
  }
  long long v5 = (void *)((char *)this + 24);
  if (*((char *)this + 47) < 0) {
    long long v5 = (void *)*v5;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Redacted speak is not empty when parsing speak string '%s'", a2, v5);
LABEL_8:
  siri::dialogengine::ParseSpeakableString((uint64_t)this + 24, a3);
}

void siri::dialogengine::SpeakableString::AppendRedacted(siri::dialogengine::SpeakableString *this, const siri::dialogengine::SpeakableString *a2)
{
  void v20[2] = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 71) < 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_5;
    }
LABEL_8:
    siri::dialogengine::SpeakableString::GetRedactedPrint(this, &v19);
    siri::dialogengine::SpeakableString::GetRedactedPrint(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
    v20[0] = v7->__r_.__value_.__l.__size_;
    *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 71) < 0) {
      operator delete(*((void **)this + 6));
    }
    uint64_t v10 = v20[0];
    *((void *)this + 6) = v8;
    *((void *)this + 7) = v10;
    *(void *)((char *)this + 63) = *(void *)((char *)v20 + 7);
    *((unsigned char *)this + 71) = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 71)) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = *((unsigned __int8 *)a2 + 71);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 7);
  }
  if (v4) {
    goto LABEL_8;
  }
LABEL_20:
  if (*((char *)this + 95) < 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_24;
    }
LABEL_27:
    siri::dialogengine::SpeakableString::GetRedactedSpeak(this, &v19);
    siri::dialogengine::SpeakableString::GetRedactedSpeak(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &__p;
    }
    else {
      char v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    std::string v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v20[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 95) < 0) {
      operator delete(*((void **)this + 9));
    }
    uint64_t v17 = v20[0];
    *((void *)this + 9) = v15;
    *((void *)this + 10) = v17;
    *(void *)((char *)this + 87) = *(void *)((char *)v20 + 7);
    *((unsigned char *)this + 95) = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*((unsigned char *)this + 95)) {
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v11 = *((unsigned __int8 *)a2 + 95);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)a2 + 10);
  }
  if (v11) {
    goto LABEL_27;
  }
}

void sub_1C5F4B0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SpeakableString::Append(siri::dialogengine::SpeakableString *this, const siri::dialogengine::SpeakableString *a2)
{
  if (*((char *)this + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else {
    std::string v22 = *(std::string *)this;
  }
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v21 = *(std::string *)((unsigned char *)this + 1);
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v21;
  }
  else {
    uint64_t v4 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  int v6 = std::string::append(&v22, (const std::string::value_type *)v4, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v8 = v24.__r_.__value_.__l.__size_ == 0;
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v8 = SHIBYTE(v24.__r_.__value_.__r.__words[2]) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  if (*((char *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else {
    std::string v21 = *(std::string *)((unsigned char *)a2 + 1);
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v9 = &v21;
  }
  else {
    char v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v21.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v13 = v24.__r_.__value_.__l.__size_ == 0;
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v13 = SHIBYTE(v24.__r_.__value_.__r.__words[2]) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::SpeakableString::AppendRedacted(this, a2);
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    std::string::size_type v15 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v15 = *(const std::string::value_type **)a2;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v16 = *((void *)a2 + 1);
  }
  std::string::append((std::string *)this, v15, v16);
  int v17 = *((char *)a2 + 47);
  if (v17 >= 0) {
    std::string::size_type v18 = (char *)a2 + 24;
  }
  else {
    std::string::size_type v18 = (const std::string::value_type *)*((void *)a2 + 3);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    std::string::size_type v19 = *((void *)a2 + 4);
  }
  BOOL result = std::string::append((std::string *)this + 1, v18, v19);
  if (v8)
  {
    std::string::operator=((std::string *)this + 4, (const std::string *)a2 + 4);
    std::string::operator=((std::string *)this + 5, (const std::string *)a2 + 5);
    return std::string::operator=((std::string *)this + 6, (const std::string *)a2 + 6);
  }
  else if (!v13)
  {
    MEMORY[0x1C8796900]((char *)this + 96, "");
    MEMORY[0x1C8796900]((char *)this + 120, "");
    return (std::string *)MEMORY[0x1C8796900]((char *)this + 144, "");
  }
  return result;
}

void sub_1C5F4B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SpeakableString::Append@<X0>(siri::dialogengine::SpeakableString *this@<X0>, const siri::dialogengine::SpeakableString *a2@<X1>, std::string *a3@<X8>)
{
  return siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)a3, a2);
}

void sub_1C5F4B49C(_Unwind_Exception *a1)
{
  siri::dialogengine::SpeakableString::~SpeakableString(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::Join(siri::dialogengine::SpeakableString **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3 = a3;
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  uint64_t v4 = *a1;
  long long v5 = a1[1];
  if (*a1 == v5)
  {
    memset(&__str, 0, sizeof(__str));
    memset(&v56, 0, sizeof(v56));
    uint64_t v27 = a2;
    goto LABEL_79;
  }
  char v6 = 0;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v7 = *(_OWORD *)v4;
        __str.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v7;
      }
      std::vector<std::string>::pointer end = v59.__end_;
      if (v59.__end_ >= v59.__end_cap_.__value_)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
        if (v12) {
          BOOL v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v59.__end_cap_, v12);
        }
        else {
          BOOL v13 = 0;
        }
        int v14 = v13 + v10;
        __v.__first_ = v13;
        __v.__begin_ = v14;
        __v.__end_cap_.__value_ = &v13[v12];
        long long v15 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v14->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        memset(&__str, 0, sizeof(__str));
        __v.__end_ = v14 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v59, &__v);
        std::string::size_type v16 = v59.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v59.__end_ = v16;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v59.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        v59.__end_ = end + 1;
      }
      if (*((char *)v4 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v4 + 3), *((void *)v4 + 4));
      }
      else
      {
        long long v17 = *(_OWORD *)((char *)v4 + 24);
        __str.__r_.__value_.__r.__words[2] = *((void *)v4 + 5);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
      }
      std::vector<std::string>::pointer v18 = v58.__end_;
      if (v58.__end_ >= v58.__end_cap_.__value_)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v58.__end_cap_;
        if (v22) {
          char v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v58.__end_cap_, v22);
        }
        else {
          char v23 = 0;
        }
        std::string v24 = v23 + v20;
        __v.__first_ = v23;
        __v.__begin_ = v24;
        __v.__end_cap_.__value_ = &v23[v22];
        long long v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        memset(&__str, 0, sizeof(__str));
        __v.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v58, &__v);
        BOOL v26 = v58.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v58.__end_ = v26;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v58.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        v58.__end_ = v18 + 1;
      }
      if (*((char *)v4 + 71) < 0)
      {
        if (*((void *)v4 + 7)) {
          goto LABEL_44;
        }
      }
      else if (*((unsigned char *)v4 + 71))
      {
        goto LABEL_44;
      }
      if (*((char *)v4 + 95) < 0) {
        break;
      }
      if (!*((unsigned char *)v4 + 95)) {
        goto LABEL_41;
      }
LABEL_44:
      uint64_t v4 = (siri::dialogengine::SpeakableString *)((char *)v4 + 168);
      char v6 = 1;
      if (v4 == v5)
      {
        memset(&__str, 0, sizeof(__str));
        memset(&v56, 0, sizeof(v56));
        std::string::size_type v3 = a3;
        uint64_t v27 = a2;
        goto LABEL_47;
      }
    }
    if (*((void *)v4 + 10)) {
      goto LABEL_44;
    }
LABEL_41:
    uint64_t v4 = (siri::dialogengine::SpeakableString *)((char *)v4 + 168);
  }
  while (v4 != v5);
  memset(&__str, 0, sizeof(__str));
  memset(&v56, 0, sizeof(v56));
  std::string::size_type v3 = a3;
  uint64_t v27 = a2;
  if ((v6 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_47:
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  std::string v29 = *a1;
  uint64_t v28 = a1[1];
  if (*a1 == v28)
  {
    std::vector<std::string>::pointer v49 = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    do
    {
      siri::dialogengine::SpeakableString::GetRedactedPrint(v29, &__p);
      std::vector<std::string>::pointer v30 = v55.__end_;
      if (v55.__end_ >= v55.__end_cap_.__value_)
      {
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55.__end_ - (char *)v55.__begin_) >> 3);
        unint64_t v33 = v32 + 1;
        if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3) > v33) {
          unint64_t v33 = 0x5555555555555556 * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v34 = v33;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v55.__end_cap_;
        if (v34) {
          unsigned __int8 v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v55.__end_cap_, v34);
        }
        else {
          unsigned __int8 v35 = 0;
        }
        uint64_t v36 = v35 + v32;
        __v.__first_ = v35;
        __v.__begin_ = v36;
        __v.__end_cap_.__value_ = &v35[v34];
        long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v36->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v36 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v55, &__v);
        int64_t v38 = v55.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v55.__end_ = v38;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v55.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        v55.__end_ = v30 + 1;
      }
      siri::dialogengine::SpeakableString::GetRedactedSpeak(v29, &__p);
      std::vector<std::string>::pointer v39 = v54.__end_;
      if (v54.__end_ >= v54.__end_cap_.__value_)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v42) {
          unint64_t v42 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v42;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
        if (v43) {
          unint64_t v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v54.__end_cap_, v43);
        }
        else {
          unint64_t v44 = 0;
        }
        unint64_t v45 = v44 + v41;
        __v.__first_ = v44;
        __v.__begin_ = v45;
        __v.__end_cap_.__value_ = &v44[v43];
        long long v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v45->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v45 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
        __int16 v47 = v54.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v54.__end_ = v47;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v54.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        v54.__end_ = v39 + 1;
      }
      std::string v29 = (siri::dialogengine::SpeakableString *)((char *)v29 + 168);
    }
    while (v29 != v28);
    std::vector<std::string>::pointer begin = v55.__begin_;
    std::vector<std::string>::pointer v49 = v55.__end_;
    std::string::size_type v3 = a3;
  }
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)begin, (uint64_t)v49, v27);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
  __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)v54.__begin_, (uint64_t)v54.__end_, v27);
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
  v56.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
LABEL_79:
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)v59.__begin_, (uint64_t)v59.__end_, v27);
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v55, (uint64_t)v58.__begin_, (uint64_t)v58.__end_, v27);
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v3, (const std::string *)&__v, (const std::string *)&v55);
  if (SHIBYTE(v55.__end_cap_.__value_) < 0) {
    operator delete(v55.__begin_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::operator=(v3 + 2, &__str);
  std::string::operator=(v3 + 3, &v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C5F4BB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a18 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  a34 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a41 = v41 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2) {
    siri::dialogengine::SpeakableString::GetPrintChunks(this, a2, a3);
  }
  else {
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, a2, a3);
  }
}

void siri::dialogengine::SpeakableString::GetExpandedSpeak(std::string *__return_ptr a1@<X8>, siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a3@<X1>)
{
  siri::dialogengine::SpeakableString::GetSpeakChunks(this, (const char *)a3, v5);
  siri::dialogengine::ChunkList::Expand((uint64_t *)v6, (siri::dialogengine::ChunkList *)v5, a3);
  siri::dialogengine::ExpandToText((uint64_t)&v7, v6[0], v6[1]);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v9;
    a1->__r_.__value_.__r.__words[2] = v10;
  }
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  unint64_t v21 = (void **)v6;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v21);
  unint64_t v21 = (void **)v5;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_1C5F4BD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  *(void *)(v15 - 40) = &a12;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetExpandedPrint(siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, v5);
  siri::dialogengine::ChunkList::Expand((uint64_t *)v6, (siri::dialogengine::ChunkList *)v5, a2);
  siri::dialogengine::ExpandToText((uint64_t)v7, v6[0], v6[1]);
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7[0], (std::string::size_type)v7[1]);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a3->__r_.__value_.__r.__words[2] = v8;
  }
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  unint64_t v21 = (void **)v6;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v21);
  unint64_t v21 = (void **)v5;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_1C5F4BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  *(void *)(v15 - 40) = &a12;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetExpanded(siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a2@<X1>, void *a3@<X8>)
{
  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, (uint64_t *)&v15);
  siri::dialogengine::ChunkList::Expand((uint64_t *)&v16, (siri::dialogengine::ChunkList *)&v15, a2);
  v11[0] = &v15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  char v6 = v16;
  long long v7 = v17;
  if (v16 == v17)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
    {
      siri::dialogengine::ExpandToText((uint64_t)&v15, v6, v7);
      operator new();
    }
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, v8, (uint64_t *)&v15);
    siri::dialogengine::ChunkList::Expand((uint64_t *)&v13, (siri::dialogengine::ChunkList *)&v15, a2);
    v11[0] = &v15;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
    if (v13 != v14)
    {
      siri::dialogengine::ExpandToText((uint64_t)&v15, v16, v17);
      siri::dialogengine::ExpandToText((uint64_t)v11, v13, v14);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string v10 = v15;
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v12;
      }
      operator new();
    }
    *a3 = 0;
    a3[1] = 0;
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1C5F4C2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a23);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v44 - 240));
  *(void *)(v44 - 240) = &a44;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 240));
  *(void *)(v44 - 240) = v44 - 72;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 240));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SpeakableString::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[47];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[47];
  }
  else {
    uint64_t v3 = *((void *)a1 + 4);
  }
  uint64_t v4 = a2[47];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 4);
  }
  if (v3 != v4) {
    return 0;
  }
  long long v7 = a1;
  std::string::size_type v8 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    long long v9 = a2 + 24;
  }
  else {
    long long v9 = (unsigned __int8 *)*((void *)a2 + 3);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((void *)a1 + 4))) {
      return 0;
    }
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      std::string::size_type v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = v7[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v7[23];
  }
  else {
    uint64_t v11 = *((void *)v7 + 1);
  }
  uint64_t v12 = a2[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 1);
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    char v14 = a2;
  }
  else {
    char v14 = *(unsigned __int8 **)a2;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*(const void **)v7, v14, *((void *)v7 + 1)) == 0;
  }
  if (!v7[23]) {
    return 1;
  }
  uint64_t v15 = v10 - 1;
  do
  {
    int v17 = *v7++;
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    uint64_t result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t result;

  uint64_t v2 = a1[47];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[47];
  }
  else {
    uint64_t v3 = *((void *)a1 + 4);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  char v6 = a1;
  long long v7 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    std::string::size_type v8 = a2;
  }
  else {
    std::string::size_type v8 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v7, v8, *((void *)a1 + 4))) {
      return 0;
    }
  }
  else if (a1[47])
  {
    long long v9 = v8;
    while (*(unsigned __int8 *)v7 == *v9)
    {
      long long v7 = (const void **)((char *)v7 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v10 = v6[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v6[23];
  }
  else {
    uint64_t v11 = *((void *)v6 + 1);
  }
  if (v11 != v3) {
    return 0;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*(const void **)v6, v8, *((void *)v6 + 1)) == 0;
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v12 = v10 - 1;
  do
  {
    char v14 = *v6++;
    int v13 = v14;
    int v16 = *v8++;
    uint64_t v15 = v16;
    int v18 = v12-- != 0;
    uint64_t result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t siri::dialogengine::SpeakableString::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return siri::dialogengine::SpeakableString::operator==(a1, a2) ^ 1;
}

{
  return siri::dialogengine::SpeakableString::operator==(a1, a2) ^ 1;
}

uint64_t siri::dialogengine::SpeakableString::Contains(char **a1, char *a2)
{
  if (siri::dialogengine::StringContains(a1 + 3, a2)) {
    return 1;
  }
  return siri::dialogengine::StringContains(a1, a2);
}

void InitDefaultsscc_info_Command_AppPunchout_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_AppPunchout::Command_AppPunchout((SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_AppPunchout_default_instance_, v4);
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::Command_AppPunchout(SnippetUI::Command_AppPunchout *this)
{
  *(void *)this = &unk_1F2120840;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_Command_AppPunchout_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_AppPunchout_ActionElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F4C784(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_AppPunchout::GetMetadata(SnippetUI::Command_AppPunchout *this)
{
  return qword_1EA3D9550;
}

uint64_t SnippetUI::Command_AppPunchout::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::Command_AppPunchout::MergeFrom(SnippetUI::Command_AppPunchout *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 840);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Command_AppPunchout::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F4C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_AppPunchout::MergeFrom(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 855);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_AppPunchout *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  long long v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    return;
  }
  int v13 = (std::string *)*((void *)this + 4);
  uint64_t v12 = (char *)this + 32;
  uint64_t v11 = v13;
  if (v13 != (std::string *)v10)
  {
    if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v12, v10);
    }
    std::string::operator=(v11, (const std::string *)v10);
  }
}

void sub_1C5F4CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_AppPunchout::CopyFrom(SnippetUI::Command_AppPunchout *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_AppPunchout::Clear(this);
    SnippetUI::Command_AppPunchout::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_AppPunchout::Clear(SnippetUI::Command_AppPunchout *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 4);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  char v5 = *((unsigned char *)this + 8);
  uint64_t v4 = (SnippetUI::Command_AppPunchout *)((char *)this + 8);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_AppPunchout::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_AppPunchout *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.punch_out_uri");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  long long v9 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    uint64_t v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_13;
    }
    long long v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  uint64_t v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.bundle_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), (char *)a2);
  }
LABEL_13:
  uint64_t v11 = (google::protobuf::internal *)*((void *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    uint64_t v12 = (const char *)*((void *)v11 + 1);
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v11 = *(google::protobuf::internal **)v11;
    goto LABEL_18;
  }
  uint64_t v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((unsigned char *)v11 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.app_display_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 4), (char *)a2);
  }
LABEL_19:
  uint64_t v13 = *((void *)this + 1);
  if ((v13 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v13 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Command_AppPunchout::_InternalParse(SnippetUI::Command_AppPunchout *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v20 = a2;
  uint64_t v4 = (std::string **)((char *)this + 32);
  char v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23))) {
      return v20;
    }
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      char v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v10);
    char v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        uint64_t v15 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v16 = (std::string::value_type *)TagFallback;
        int v17 = a3;
        int v18 = "SnippetUI.Command.AppPunchout.app_display_name";
        goto LABEL_29;
      }
    }
    else if (v11 == 2)
    {
      if (v10 == 18)
      {
        uint64_t v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v16 = (std::string::value_type *)TagFallback;
        int v17 = a3;
        int v18 = "SnippetUI.Command.AppPunchout.bundle_id";
        goto LABEL_29;
      }
    }
    else if (v11 == 1 && v10 == 10)
    {
      uint64_t v15 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      int v16 = (std::string::value_type *)TagFallback;
      int v17 = a3;
      int v18 = "SnippetUI.Command.AppPunchout.punch_out_uri";
LABEL_29:
      char v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
      goto LABEL_30;
    }
    if (!v10 || (v10 & 7) == 4) {
      break;
    }
    char v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
    char v20 = (google::protobuf::internal *)v14;
    if (!v14) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v10 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Command_AppPunchout::GetCachedSize(SnippetUI::Command_AppPunchout *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::Command_AppPunchout::ByteSizeLong(SnippetUI::Command_AppPunchout *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v6;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_18;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_18:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_AppPunchout *)((char *)this + 8), v4, (_DWORD *)this + 10);
  }
  *((_DWORD *)this + 10) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::Command_AppPunchout::IsInitialized(SnippetUI::Command_AppPunchout *this)
{
  return 1;
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::New(SnippetUI::Command_AppPunchout *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(a2);
}

SnippetUI::Command_AppPunchout *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Command_AppPunchout *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_AppPunchout>);
  }
  SnippetUI::Command_AppPunchout::Command_AppPunchout(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F4D038(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_AppPunchout>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::New(SnippetUI::Command_AppPunchout *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
}

void SnippetUI::Command_AppPunchout::~Command_AppPunchout(SnippetUI::Command_AppPunchout *this)
{
  SnippetUI::Command_AppPunchout::~Command_AppPunchout(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(void *)this = &unk_1F2120840;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Command_ResponseGroup_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_ResponseGroup::Command_ResponseGroup((SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_ResponseGroup_default_instance_, v4);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this)
{
  *(void *)this = &unk_1F21206C0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_Command_ResponseGroup_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ResponseGroup_ActionElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F4D2A8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_ResponseGroup::GetMetadata(SnippetUI::Command_ResponseGroup *this)
{
  return file_level_metadata_ActionElement_2eproto;
}

uint64_t SnippetUI::Command_ResponseGroup::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::Command_ResponseGroup::MergeFrom(SnippetUI::Command_ResponseGroup *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 387);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Command_ResponseGroup::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F4D3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ResponseGroup::MergeFrom(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 402);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_ResponseGroup *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  uint64_t v9 = (std::string *)*((void *)this + 2);
  uint64_t v8 = (char *)this + 16;
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C5F4D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ResponseGroup::CopyFrom(SnippetUI::Command_ResponseGroup *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ResponseGroup::Clear(this);
    SnippetUI::Command_ResponseGroup::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_ResponseGroup::Clear(SnippetUI::Command_ResponseGroup *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Command_ResponseGroup *)((char *)this + 8);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_ResponseGroup::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_ResponseGroup *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Command.ResponseGroup.group_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Command_ResponseGroup::_InternalParse(SnippetUI::Command_ResponseGroup *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v12 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23))) {
      return v12;
    }
    TagFallback = (google::protobuf::internal *)((char *)v12 + 1);
    uint64_t v8 = (char *)*(unsigned __int8 *)v12;
    if ((*(char *)v12 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v12 + 2);
LABEL_6:
      uint64_t v12 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v12, v8);
    uint64_t v12 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      char v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Command.ResponseGroup.group_id");
      goto LABEL_16;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    char v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    uint64_t v12 = (google::protobuf::internal *)v10;
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Command_ResponseGroup::GetCachedSize(SnippetUI::Command_ResponseGroup *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::Command_ResponseGroup::ByteSizeLong(SnippetUI::Command_ResponseGroup *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_ResponseGroup *)((char *)this + 8), v4, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::Command_ResponseGroup::IsInitialized(SnippetUI::Command_ResponseGroup *this)
{
  return 1;
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::New(SnippetUI::Command_ResponseGroup *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(a2);
}

SnippetUI::Command_ResponseGroup *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Command_ResponseGroup *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ResponseGroup>);
  }
  SnippetUI::Command_ResponseGroup::Command_ResponseGroup(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F4D860(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ResponseGroup>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::New(SnippetUI::Command_ResponseGroup *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
}

void SnippetUI::Command_ResponseGroup::~Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this)
{
  SnippetUI::Command_ResponseGroup::~Command_ResponseGroup(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F21206C0;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Command_ChangeBackground_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_ChangeBackground::Command_ChangeBackground((SnippetUI::Command_ChangeBackground *)&SnippetUI::_Command_ChangeBackground_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_ChangeBackground_default_instance_, v4);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2120780;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_Command_ChangeBackground_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ChangeBackground_ActionElement_2eproto);
  }
  return this;
}

void sub_1C5F4DA5C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_ChangeBackground::GetMetadata(SnippetUI::Command_ChangeBackground *this)
{
  return qword_1EA3D9540;
}

uint64_t SnippetUI::Command_ChangeBackground::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::Command_ChangeBackground::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 585);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Command_ChangeBackground::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F4DB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ChangeBackground::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 600);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1C5F4DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (SnippetUI::BackgroundElement **)(v6 + 8);
      char v14 = (SnippetUI::BackgroundElement **)v7;
      do
      {
        int v16 = *v13++;
        uint64_t v15 = v16;
        int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      BOOL v21 = (SnippetUI::BackgroundElement **)((char *)v8 + v20);
      unint64_t v22 = (SnippetUI::BackgroundElement **)(v20 + v6 + 8);
      do
      {
        char v23 = *v22++;
        std::string v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    BOOL v26 = this[2];
    if (*v26 < v25) {
      *BOOL v26 = v25;
    }
  }
}

void sub_1C5F4DD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(SnippetUI::BackgroundElement *a1, SnippetUI::BackgroundElement *this)
{
}

void SnippetUI::Command_ChangeBackground::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ChangeBackground::Clear((SnippetUI::Command_ChangeBackground *)this);
    SnippetUI::Command_ChangeBackground::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::Command_ChangeBackground::Clear((SnippetUI::Command_ChangeBackground *)this);
    SnippetUI::Command_ChangeBackground::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_ChangeBackground::Clear(SnippetUI::Command_ChangeBackground *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    char v3 = (SnippetUI::BackgroundElement **)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::BackgroundElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C5F4DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_ChangeBackground::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_ChangeBackground *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      uint64_t v9 = (SnippetUI::BackgroundElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16, i);
      *(unsigned char *)a2 = 10;
      unsigned int v11 = *((_DWORD *)v9 + 13);
      if (v11 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          char v14 = (char *)a2 + 2;
          do
          {
            uint64_t v15 = v14;
            *v14++ = v13 | 0x80;
            unsigned int v16 = v13 >> 7;
            unsigned int v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *char v14 = v16;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v13;
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v11;
        uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C5F4E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Command_ChangeBackground::_InternalParse(SnippetUI::Command_ChangeBackground *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v20 = a2;
  int v5 = (unint64_t *)((char *)this + 8);
  char v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      uint64_t v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v9);
    uint64_t v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 == 10)
    {
      unsigned int v11 = (char *)TagFallback - 1;
      while (1)
      {
        uint64_t v12 = (google::protobuf::internal *)(v11 + 1);
        uint64_t v20 = (google::protobuf::internal *)(v11 + 1);
        unsigned int v13 = (int *)*((void *)this + 4);
        if (!v13) {
          break;
        }
        uint64_t v14 = *((int *)this + 6);
        int v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            unsigned int v13 = (int *)*((void *)this + 4);
            int v15 = *v13;
          }
          *unsigned int v13 = v15 + 1;
          unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                          + 2));
          uint64_t v17 = *((void *)this + 4);
          uint64_t v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(void *)(v17 + 8 * v18 + 8) = v16;
          uint64_t v12 = v20;
          goto LABEL_22;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        unsigned int v16 = *(SnippetUI::BackgroundElement **)&v13[2 * v14 + 2];
LABEL_22:
        unsigned int v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(a3, v16, v12);
        uint64_t v20 = (google::protobuf::internal *)v11;
        if (!v11) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
          goto LABEL_2;
        }
      }
      int v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if (v9) {
      BOOL v10 = (v9 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v20) {
      return 0;
    }
  }
  return v20;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::BackgroundElement *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)SnippetUI::BackgroundElement::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::Command_ChangeBackground::GetCachedSize(SnippetUI::Command_ChangeBackground *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::Command_ChangeBackground::ByteSizeLong(SnippetUI::Command_ChangeBackground *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::BackgroundElement **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      int v6 = *v4++;
      char v7 = SnippetUI::BackgroundElement::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_ChangeBackground *)((char *)this + 8), v2, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::Command_ChangeBackground::IsInitialized(SnippetUI::Command_ChangeBackground *this)
{
  return 1;
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::New(SnippetUI::Command_ChangeBackground *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(a2);
}

SnippetUI::Command_ChangeBackground *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Command_ChangeBackground *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ChangeBackground>);
  }
  SnippetUI::Command_ChangeBackground::Command_ChangeBackground(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F4E4FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ChangeBackground>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::New(SnippetUI::Command_ChangeBackground *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
}

void SnippetUI::Command_ChangeBackground::~Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this)
{
  *(void *)this = &unk_1F2120780;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2120780;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2120780;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

void InitDefaultsscc_info_Command_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command::Command((SnippetUI::Command *)&SnippetUI::_Command_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_default_instance_, v4);
  byte_1EB690608 = 0;
  qword_1EB690610 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690618 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690620 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690628 = &SnippetUI::_Command_ChangeBackground_default_instance_;
  qword_1EB690630 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690638 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690640 = (uint64_t)&SnippetUI::_Command_ResponseGroup_default_instance_;
  unk_1EB690648 = &SnippetUI::_Command_AppPunchout_default_instance_;
  qword_1EB690650 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
}

SnippetUI::Command *SnippetUI::Command::Command(SnippetUI::Command *this)
{
  *(void *)this = &unk_1F2120900;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_Command_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ActionElement_2eproto);
  }
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1C5F4E720(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command::GetMetadata(SnippetUI::Command *this)
{
  return qword_1EA3D9560;
}

uint64_t SnippetUI::Command::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::Command::MergeFrom(SnippetUI::Command *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1430);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Command::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F4E83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Command::MergeFrom(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1445);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (*((unsigned char *)a2 + 16)) {
    *((unsigned char *)this + 16) = 1;
  }
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      char v6 = *((unsigned char *)a2 + 24);
      if (*((_DWORD *)this + 9) != 1)
      {
        SnippetUI::Command::clear_value((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
      }
      *((unsigned char *)this + 24) = v6;
      return;
    case 2:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) == 2) {
        goto LABEL_28;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      int v8 = 2;
      goto LABEL_37;
    case 3:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) == 3) {
        goto LABEL_28;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      int v8 = 3;
      goto LABEL_37;
    case 4:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) == 4) {
        goto LABEL_28;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      int v8 = 4;
      goto LABEL_37;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        uint64_t v9 = (int **)*((void *)this + 3);
LABEL_31:
        BOOL v13 = (int **)*((void *)a2 + 3);
        goto LABEL_40;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
      *((void *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) == 5) {
        goto LABEL_31;
      }
      BOOL v13 = (int **)&SnippetUI::_Command_ChangeBackground_default_instance_;
LABEL_40:
      SnippetUI::Command_ChangeBackground::MergeFrom(v9, v13);
      return;
    case 6:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) == 6) {
        goto LABEL_28;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      int v8 = 6;
      goto LABEL_37;
    case 7:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) == 7) {
        goto LABEL_28;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      int v8 = 7;
      goto LABEL_37;
    case 9:
      if (*((_DWORD *)this + 9) == 9)
      {
        int v10 = (SnippetUI::Command_ResponseGroup *)*((void *)this + 3);
LABEL_33:
        int v14 = (const SnippetUI::Command_ResponseGroup *)*((void *)a2 + 3);
        goto LABEL_42;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 9;
      int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
      *((void *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) == 9) {
        goto LABEL_33;
      }
      int v14 = (const SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_;
LABEL_42:
      SnippetUI::Command_ResponseGroup::MergeFrom(v10, v14);
      return;
    case 0xA:
      if (*((_DWORD *)this + 9) == 10)
      {
        int v11 = (SnippetUI::Command_AppPunchout *)*((void *)this + 3);
LABEL_35:
        int v15 = (const SnippetUI::Command_AppPunchout *)*((void *)a2 + 3);
        goto LABEL_44;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 10;
      int v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
      *((void *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 10) {
        goto LABEL_35;
      }
      int v15 = (const SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_;
LABEL_44:
      SnippetUI::Command_AppPunchout::MergeFrom(v11, v15);
      return;
    case 0xB:
      char v7 = (const std::string *)*((void *)a2 + 3);
      if (*((_DWORD *)this + 9) != 11)
      {
        SnippetUI::Command::clear_value((uint64_t)this);
        int v8 = 11;
LABEL_37:
        *((_DWORD *)this + 9) = v8;
        *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_38:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v7);
      }
LABEL_28:
      int v12 = (std::string *)*((void *)this + 3);
      if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_38;
      }
      std::string::operator=(v12, v7);
      return;
    default:
      return;
  }
}

void sub_1C5F4EB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 0xB:
      uint64_t v2 = *(void *)(this + 24);
      if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0) {
          operator delete(*(void **)v2);
        }
        this = MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
      }
      break;
    case 5:
    case 9:
    case 0xA:
      this = *(void *)(this + 24);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void SnippetUI::Command::CopyFrom(SnippetUI::Command *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command::Clear(this);
    SnippetUI::Command::MergeFrom(this, a2);
  }
}

void SnippetUI::Command::Clear(SnippetUI::Command *this)
{
  *((unsigned char *)this + 16) = 0;
  SnippetUI::Command::clear_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Command *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command::InternalSerializeWithCachedSizesToArray(SnippetUI::Command *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = a2;
  int v7 = *((_DWORD *)this + 9);
  if (v7 == 1)
  {
    BOOL v8 = (*(void *)a3 > (unint64_t)a2
       || (uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2), *((_DWORD *)this + 9) == 1))
      && *((unsigned char *)this + 24) != 0;
    *uint64_t v5 = 8;
    v5[1] = v8;
    v5 += 2;
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 2)
  {
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), v5);
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 3)
  {
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 3), v5);
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 4)
  {
    uint64_t v9 = (unsigned __int8 *)*((void *)this + 3);
    if ((char)v9[23] < 0)
    {
      uint64_t v9 = *(unsigned __int8 **)v9;
      int v10 = *(const char **)(*((void *)this + 3) + 8);
    }
    else
    {
      int v10 = (const char *)v9[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, v10, 1, (google::protobuf::internal *)"SnippetUI.Command.utterance");
    if (*((_DWORD *)this + 9) == 4) {
      int v11 = (const void **)*((void *)this + 3);
    }
    else {
      int v11 = (const void **)&google::protobuf::internal::fixed_address_empty_string;
    }
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, v11, v5);
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 5)
  {
    if ((unint64_t)v5 >= *(void *)a3) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    int v12 = (SnippetUI::Command_ChangeBackground *)*((void *)this + 3);
    *uint64_t v5 = 42;
    unsigned int v13 = *((_DWORD *)v12 + 10);
    if (v13 > 0x7F)
    {
      v5[1] = v13 | 0x80;
      unsigned int v15 = v13 >> 7;
      if (v13 >> 14)
      {
        char v16 = v5 + 2;
        do
        {
          uint64_t v17 = v16;
          *v16++ = v15 | 0x80;
          unsigned int v18 = v15 >> 7;
          unsigned int v19 = v15 >> 14;
          v15 >>= 7;
        }
        while (v19);
        int v14 = (google::protobuf::UnknownFieldSet *)(v17 + 2);
        *char v16 = v18;
      }
      else
      {
        v5[2] = v15;
        int v14 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v13;
      int v14 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::Command_ChangeBackground::InternalSerializeWithCachedSizesToArray(v12, v14, a3, a4);
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 6)
  {
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 3), v5);
    int v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 7) {
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 3), v5);
  }
  if (*((unsigned char *)this + 16))
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v20 = *((unsigned char *)this + 16);
    }
    else
    {
      char v20 = 1;
    }
    *uint64_t v5 = 64;
    v5[1] = v20;
    v5 += 2;
  }
  int v21 = *((_DWORD *)this + 9);
  if (v21 == 9)
  {
    if ((unint64_t)v5 >= *(void *)a3) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    unint64_t v22 = (SnippetUI::Command_ResponseGroup *)*((void *)this + 3);
    *uint64_t v5 = 74;
    unsigned int v23 = *((_DWORD *)v22 + 6);
    if (v23 > 0x7F)
    {
      v5[1] = v23 | 0x80;
      unsigned int v25 = v23 >> 7;
      if (v23 >> 14)
      {
        BOOL v26 = v5 + 2;
        do
        {
          char v27 = v26;
          *v26++ = v25 | 0x80;
          unsigned int v28 = v25 >> 7;
          unsigned int v29 = v25 >> 14;
          v25 >>= 7;
        }
        while (v29);
        std::string v24 = (google::protobuf::UnknownFieldSet *)(v27 + 2);
        *BOOL v26 = v28;
      }
      else
      {
        v5[2] = v25;
        std::string v24 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v23;
      std::string v24 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::Command_ResponseGroup::InternalSerializeWithCachedSizesToArray(v22, v24, a3, a4);
    int v21 = *((_DWORD *)this + 9);
  }
  if (v21 == 10)
  {
    if ((unint64_t)v5 >= *(void *)a3) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    std::vector<std::string>::pointer v30 = (SnippetUI::Command_AppPunchout *)*((void *)this + 3);
    *uint64_t v5 = 82;
    unsigned int v31 = *((_DWORD *)v30 + 10);
    if (v31 > 0x7F)
    {
      v5[1] = v31 | 0x80;
      unsigned int v33 = v31 >> 7;
      if (v31 >> 14)
      {
        unint64_t v34 = v5 + 2;
        do
        {
          unsigned __int8 v35 = v34;
          *v34++ = v33 | 0x80;
          unsigned int v36 = v33 >> 7;
          unsigned int v37 = v33 >> 14;
          v33 >>= 7;
        }
        while (v37);
        unint64_t v32 = (google::protobuf::UnknownFieldSet *)(v35 + 2);
        *unint64_t v34 = v36;
      }
      else
      {
        v5[2] = v33;
        unint64_t v32 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v31;
      unint64_t v32 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::Command_AppPunchout::InternalSerializeWithCachedSizesToArray(v30, v32, a3, a4);
    int v21 = *((_DWORD *)this + 9);
  }
  if (v21 == 11) {
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((const void ***)this + 3), v5);
  }
  uint64_t v38 = *((void *)this + 1);
  if ((v38 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Command::_InternalParse(SnippetUI::Command *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  long long v48 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  char v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v48, *((_DWORD *)a3 + 23))) {
      return v48;
    }
    TagFallback = (google::protobuf::internal *)((char *)v48 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v48;
    if ((*(char *)v48 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v48 + 2);
LABEL_6:
      long long v48 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v48, v9);
    long long v48 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_49;
        }
        int v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
        uint64_t v11 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          int v12 = v11 + (*(unsigned __int8 *)v10 << 7);
          uint64_t v11 = (v12 - 128);
          if (*(char *)v10 < 0)
          {
            int v10 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, (v12 - 128));
            uint64_t v11 = v44;
          }
          else
          {
            int v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
          }
        }
        long long v48 = v10;
        if (*((_DWORD *)this + 9) != 1)
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 1;
          int v10 = v48;
        }
        *(unsigned char *)uint64_t v5 = v11 != 0;
        if (!v10) {
          goto LABEL_94;
        }
        continue;
      case 2u:
        if (v9 != 18) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 2) {
          goto LABEL_47;
        }
        SnippetUI::Command::clear_value((uint64_t)this);
        int v13 = 2;
        goto LABEL_33;
      case 3u:
        if (v9 != 26) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 3) {
          goto LABEL_47;
        }
        SnippetUI::Command::clear_value((uint64_t)this);
        int v13 = 3;
        goto LABEL_33;
      case 4u:
        if (v9 != 34) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) != 4)
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 4;
          *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_55:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_55;
        }
        int v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Command.utterance");
        goto LABEL_70;
      case 5u:
        if (v9 != 42) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 5)
        {
          int v14 = (SnippetUI::Command_ChangeBackground *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 5;
          int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
          *((void *)this + 3) = v14;
          TagFallback = v48;
        }
        unsigned int v22 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_94;
          }
          unsigned int v23 = SizeFallback;
          unsigned int v22 = v29;
        }
        else
        {
          unsigned int v23 = (char *)TagFallback + 1;
        }
        int v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        int v31 = *((_DWORD *)a3 + 22);
        BOOL v32 = __OFSUB__(v31--, 1);
        *((_DWORD *)a3 + 22) = v31;
        if (v31 < 0 != v32) {
          goto LABEL_94;
        }
        int v33 = v30;
        unint64_t v34 = SnippetUI::Command_ChangeBackground::_InternalParse(v14, (google::protobuf::internal *)v23, a3);
        if (!v34) {
          goto LABEL_94;
        }
        goto LABEL_86;
      case 6u:
        if (v9 != 50) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 6) {
          goto LABEL_47;
        }
        SnippetUI::Command::clear_value((uint64_t)this);
        int v13 = 6;
        goto LABEL_33;
      case 7u:
        if (v9 != 58) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 7) {
          goto LABEL_47;
        }
        SnippetUI::Command::clear_value((uint64_t)this);
        int v13 = 7;
LABEL_33:
        *((_DWORD *)this + 9) = v13;
        goto LABEL_67;
      case 8u:
        if (v9 != 64) {
          goto LABEL_49;
        }
        unsigned int v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v16 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_38;
        }
        int v17 = *(char *)v15;
        unint64_t v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          unint64_t v45 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          long long v48 = v45;
          *((unsigned char *)this + 16) = v46 != 0;
          if (!v45) {
            goto LABEL_94;
          }
        }
        else
        {
          unsigned int v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
          long long v48 = v15;
          *((unsigned char *)this + 16) = v16 != 0;
        }
        continue;
      case 9u:
        if (v9 != 74) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 9)
        {
          unsigned int v18 = (SnippetUI::Command_ResponseGroup *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 9;
          unsigned int v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
          *((void *)this + 3) = v18;
          TagFallback = v48;
        }
        unsigned int v24 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned __int8 v35 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v35) {
            goto LABEL_94;
          }
          unsigned int v25 = v35;
          unsigned int v24 = v36;
        }
        else
        {
          unsigned int v25 = (char *)TagFallback + 1;
        }
        int v37 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
        int v38 = *((_DWORD *)a3 + 22);
        BOOL v32 = __OFSUB__(v38--, 1);
        *((_DWORD *)a3 + 22) = v38;
        if (v38 < 0 != v32) {
          goto LABEL_94;
        }
        int v33 = v37;
        unint64_t v34 = SnippetUI::Command_ResponseGroup::_InternalParse(v18, (google::protobuf::internal *)v25, a3);
        if (!v34) {
          goto LABEL_94;
        }
        goto LABEL_86;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) == 10)
        {
          unsigned int v19 = (SnippetUI::Command_AppPunchout *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          unsigned int v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
          *((void *)this + 3) = v19;
          TagFallback = v48;
        }
        unsigned int v26 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          std::vector<std::string>::pointer v39 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v39) {
            goto LABEL_94;
          }
          char v27 = v39;
          unsigned int v26 = v40;
        }
        else
        {
          char v27 = (char *)TagFallback + 1;
        }
        int v41 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v27, v26);
        int v42 = *((_DWORD *)a3 + 22);
        BOOL v32 = __OFSUB__(v42--, 1);
        *((_DWORD *)a3 + 22) = v42;
        if (v42 < 0 != v32) {
          goto LABEL_94;
        }
        int v33 = v41;
        unint64_t v34 = SnippetUI::Command_AppPunchout::_InternalParse(v19, (google::protobuf::internal *)v27, a3);
        if (!v34) {
          goto LABEL_94;
        }
LABEL_86:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_94;
        }
        int v43 = *((_DWORD *)a3 + 7) + v33;
        *((_DWORD *)a3 + 7) = v43;
        *(void *)a3 = *((void *)a3 + 1) + (v43 & (v43 >> 31));
        long long v48 = v34;
        continue;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_49;
        }
        if (*((_DWORD *)this + 9) != 11)
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 11;
LABEL_67:
          *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_68:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_47:
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_68;
        }
        int v21 = google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_70;
      default:
LABEL_49:
        if (v9) {
          BOOL v20 = (v9 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        int v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_70:
        long long v48 = (google::protobuf::internal *)v21;
        if (v21) {
          continue;
        }
LABEL_94:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Command::GetCachedSize(SnippetUI::Command *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::Command::ByteSizeLong(SnippetUI::Command *this)
{
  uint64_t v2 = 2 * *((unsigned __int8 *)this + 16);
  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v2 += 2;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 0xB:
      uint64_t v3 = *((void *)this + 3);
      uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
      uint64_t v5 = *(void *)(v3 + 8);
      if ((v4 & 0x80u) == 0) {
        uint64_t v5 = v4;
      }
      uint64_t v2 = (v2 | 1) + v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      break;
    case 5:
      char v6 = SnippetUI::Command_ChangeBackground::ByteSizeLong(*((SnippetUI::Command_ChangeBackground **)this + 3));
      goto LABEL_9;
    case 9:
      char v6 = SnippetUI::Command_ResponseGroup::ByteSizeLong(*((SnippetUI::Command_ResponseGroup **)this + 3));
      goto LABEL_9;
    case 0xA:
      char v6 = SnippetUI::Command_AppPunchout::ByteSizeLong(*((SnippetUI::Command_AppPunchout **)this + 3));
LABEL_9:
      uint64_t v2 = (uint64_t)&v6[(v2 | 1) + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
      break;
    default:
      break;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::Command::IsInitialized(SnippetUI::Command *this)
{
  return 1;
}

SnippetUI::Command *SnippetUI::Command::New(SnippetUI::Command *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(a2);
}

SnippetUI::Command *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Command *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command>);
  }
  SnippetUI::Command::Command(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F4F8E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A3C40C637D3DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Command *SnippetUI::Command::New(SnippetUI::Command *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
}

void SnippetUI::Command::~Command(SnippetUI::Command *this)
{
  SnippetUI::Command::~Command(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2120900;
  if (*((_DWORD *)this + 9)) {
    SnippetUI::Command::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ActionElement_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::ActionElement::ActionElement((SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ActionElement_default_instance_, v4);
  qword_1EB690868 = (uint64_t)&SnippetUI::_Command_default_instance_;
}

SnippetUI::ActionElement *SnippetUI::ActionElement::ActionElement(SnippetUI::ActionElement *this)
{
  *(void *)this = &unk_1F21209C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (atomic_load_explicit(scc_info_ActionElement_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ActionElement_ActionElement_2eproto);
  }
  *((void *)this + 8) = 0;
  return this;
}

void sub_1C5F4FAB8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ActionElement::GetMetadata(SnippetUI::ActionElement *this)
{
  return qword_1EA3D9570;
}

uint64_t SnippetUI::ActionElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void SnippetUI::ActionElement::MergeFrom(SnippetUI::ActionElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1753);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ActionElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F4FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionElement::MergeFrom(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1768);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ActionElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 10, (int *)a2 + 10);
  if (a2 != (const SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    char v6 = (const SnippetUI::Command *)*((void *)a2 + 8);
    if (v6)
    {
      char v7 = (SnippetUI::Command *)*((void *)this + 8);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
        *((void *)this + 8) = v7;
        char v6 = (const SnippetUI::Command *)*((void *)a2 + 8);
      }
      if (v6) {
        BOOL v8 = v6;
      }
      else {
        BOOL v8 = (const SnippetUI::Command *)&SnippetUI::_Command_default_instance_;
      }
      SnippetUI::Command::MergeFrom(v7, v8);
    }
  }
}

void sub_1C5F4FCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    BOOL v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      int v13 = (SnippetUI::TextElement **)(v6 + 8);
      int v14 = (SnippetUI::TextElement **)v7;
      do
      {
        unint64_t v16 = *v13++;
        unsigned int v15 = v16;
        int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      int v21 = (SnippetUI::TextElement **)((char *)v8 + v20);
      unsigned int v22 = (SnippetUI::TextElement **)(v20 + v6 + 8);
      do
      {
        unsigned int v23 = *v22++;
        unsigned int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    unsigned int v26 = this[2];
    if (*v26 < v25) {
      *unsigned int v26 = v25;
    }
  }
}

void sub_1C5F4FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(SnippetUI::TextElement *a1, SnippetUI::TextElement *this)
{
}

void SnippetUI::ActionElement::CopyFrom(SnippetUI::ActionElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ActionElement::Clear(this);
    SnippetUI::ActionElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ActionElement::Clear(SnippetUI::ActionElement *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::ActionElement *)((char *)this + 8);
  *((void *)v3 + 7) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (SnippetUI::TextElement **)(*(void *)(a1 + 16) + 8);
    do
    {
      char v4 = *v3++;
      SnippetUI::TextElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C5F4FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::ActionElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ActionElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v5 = (char *)a2;
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    char v7 = (SnippetUI::Command *)*((void *)this + 8);
    if (v7)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v7 = (SnippetUI::Command *)*((void *)this + 8);
      }
      *int v5 = 10;
      unsigned int v8 = *((_DWORD *)v7 + 8);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          int v11 = v5 + 2;
          do
          {
            uint64_t v12 = v11;
            *v11++ = v10 | 0x80;
            unsigned int v13 = v10 >> 7;
            unsigned int v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          uint64_t v9 = v12 + 2;
          unsigned char *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          uint64_t v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        uint64_t v9 = v5 + 2;
      }
      int v5 = (char *)SnippetUI::Command::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  int v15 = *((_DWORD *)this + 6);
  if (v15)
  {
    for (int i = 0; i != v15; ++i)
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      int v17 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *int v5 = 18;
      unsigned int v19 = *((_DWORD *)v17 + 24);
      if (v19 > 0x7F)
      {
        v5[1] = v19 | 0x80;
        unsigned int v21 = v19 >> 7;
        if (v19 >> 14)
        {
          unsigned int v22 = v5 + 2;
          do
          {
            unsigned int v23 = v22;
            *v22++ = v21 | 0x80;
            unsigned int v24 = v21 >> 7;
            unsigned int v25 = v21 >> 14;
            v21 >>= 7;
          }
          while (v25);
          uint64_t v20 = (google::protobuf::UnknownFieldSet *)(v23 + 2);
          *unsigned int v22 = v24;
        }
        else
        {
          v5[2] = v21;
          uint64_t v20 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v19;
        uint64_t v20 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      int v5 = (char *)SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v17, v20, a3, v18);
    }
  }
  unsigned int v26 = *((_DWORD *)this + 14);
  if ((int)v26 > 0)
  {
    unint64_t v27 = *(void *)a3;
    if ((unint64_t)v5 >= *(void *)a3)
    {
      int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v27 = *(void *)a3;
    }
    if (v27 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      unsigned int v28 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v28->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    }
    *int v5 = 26;
    unsigned int v29 = v5 + 1;
    if (v26 >= 0x80)
    {
      do
      {
        *v29++ = v26 | 0x80;
        unsigned int v41 = v26 >> 14;
        v26 >>= 7;
      }
      while (v41);
      int v5 = v29 - 1;
    }
    v5 += 2;
    *unsigned int v29 = v26;
    int v30 = (int *)*((void *)this + 6);
    int v31 = &v30[*((int *)this + 10)];
    do
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      unint64_t v33 = *v30++;
      unint64_t v32 = v33;
      if (v33 > 0x7F)
      {
        *int v5 = v32 | 0x80;
        unint64_t v34 = v32 >> 7;
        if (v32 >> 14)
        {
          unsigned __int8 v35 = v5 + 1;
          do
          {
            unsigned int v36 = v35;
            *v35++ = v34 | 0x80;
            unint64_t v37 = v34 >> 7;
            unint64_t v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          int v5 = v36 + 2;
          *unsigned __int8 v35 = v37;
        }
        else
        {
          v5[1] = v34;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v32;
      }
    }
    while (v30 < v31);
  }
  uint64_t v39 = *((void *)this + 1);
  if (v39) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  }
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1C5F50310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C5F503E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::ActionElement::_InternalParse(SnippetUI::ActionElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v37 = a2;
  int v5 = (SnippetUI::ActionElement *)((char *)this + 40);
  char v6 = (unsigned int *)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v37, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v37 + 1);
    int v11 = (char *)*(unsigned __int8 *)v37;
    if (*(char *)v37 < 0)
    {
      int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if (*(char *)TagFallback < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v11);
        unint64_t v37 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)((char *)v37 + 2);
    }
    unint64_t v37 = TagFallback;
LABEL_7:
    unsigned int v12 = v11 >> 3;
    if (v11 >> 3 == 3)
    {
      if (v11 == 26)
      {
        int v15 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
        goto LABEL_20;
      }
      if (v11 != 24) {
        goto LABEL_13;
      }
      int v35 = google::protobuf::internal::ReadVarint(&v37, (const char **)v11);
      if (!v37) {
        return 0;
      }
      SnippetUI::ImageElement::_internal_add_idioms((uint64_t)this, v35);
    }
    else if (v12 == 2)
    {
      if (v11 == 18)
      {
        unint64_t v16 = (char *)TagFallback - 1;
        while (1)
        {
          int v17 = (google::protobuf::internal *)(v16 + 1);
          unint64_t v37 = (google::protobuf::internal *)(v16 + 1);
          unsigned int v18 = (int *)*((void *)this + 4);
          if (!v18) {
            break;
          }
          uint64_t v19 = *((int *)this + 6);
          int v20 = *v18;
          if ((int)v19 >= *v18)
          {
            if (v20 == *((_DWORD *)this + 7))
            {
LABEL_29:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v20 + 1);
              unsigned int v18 = (int *)*((void *)this + 4);
              int v20 = *v18;
            }
            int *v18 = v20 + 1;
            unsigned int v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                      + 2));
            uint64_t v22 = *((void *)this + 4);
            uint64_t v23 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v23 + 1;
            *(void *)(v22 + 8 * v23 + 8) = v21;
            int v17 = v37;
            goto LABEL_31;
          }
          *((_DWORD *)this + 6) = v19 + 1;
          unsigned int v21 = *(SnippetUI::TextElement **)&v18[2 * v19 + 2];
LABEL_31:
          unint64_t v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v21, v17);
          unint64_t v37 = (google::protobuf::internal *)v16;
          if (!v16) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v16 || *v16 != 18) {
            goto LABEL_2;
          }
        }
        int v20 = *((_DWORD *)this + 7);
        goto LABEL_29;
      }
LABEL_13:
      if (v11) {
        BOOL v14 = (v11 & 7) == 4;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        *((_DWORD *)a3 + 20) = v11 - 1;
        return TagFallback;
      }
      int v15 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_20:
      unint64_t v37 = (google::protobuf::internal *)v15;
      if (!v15) {
        return 0;
      }
    }
    else
    {
      if (v12 != 1 || v11 != 10) {
        goto LABEL_13;
      }
      unsigned int v24 = (SnippetUI::Command *)*((void *)this + 8);
      if (!v24)
      {
        unsigned int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
        *((void *)this + 8) = v24;
        TagFallback = v37;
      }
      unsigned int v25 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        unsigned int v26 = SizeFallback;
        unsigned int v25 = v28;
      }
      else
      {
        unsigned int v26 = (char *)TagFallback + 1;
      }
      int v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v26, v25);
      int v30 = *((_DWORD *)a3 + 22);
      BOOL v31 = __OFSUB__(v30--, 1);
      *((_DWORD *)a3 + 22) = v30;
      if (v30 < 0 != v31) {
        return 0;
      }
      int v32 = v29;
      unint64_t v33 = SnippetUI::Command::_InternalParse(v24, (google::protobuf::internal *)v26, a3);
      if (!v33) {
        return 0;
      }
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v34 = *((_DWORD *)a3 + 7) + v32;
      *((_DWORD *)a3 + 7) = v34;
      *(void *)a3 = *((void *)a3 + 1) + (v34 & (v34 >> 31));
      unint64_t v37 = v33;
    }
  }
  return v37;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::TextElement *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)SnippetUI::TextElement::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::ActionElement::GetCachedSize(SnippetUI::ActionElement *this)
{
  return *((unsigned int *)this + 18);
}

char *SnippetUI::ActionElement::ByteSizeLong(SnippetUI::ActionElement *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    char v4 = (SnippetUI::TextElement **)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      char v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 10);
  if (!v8)
  {
    uint64_t v10 = 0;
LABEL_19:
    int v14 = 0;
    goto LABEL_22;
  }
  int v9 = 0;
  uint64_t v10 = 0;
  do
  {
    int v11 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 10, v9);
    if (v11 < 0) {
      uint64_t v12 = 10;
    }
    else {
      uint64_t v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
    }
    v10 += v12;
    ++v9;
  }
  while (v8 != v9);
  if (!v10) {
    goto LABEL_19;
  }
  if ((v10 & 0x80000000) != 0) {
    uint64_t v13 = 11;
  }
  else {
    uint64_t v13 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v2 += v13;
  int v14 = v10;
LABEL_22:
  *((_DWORD *)this + 14) = v14;
  int v15 = (const google::protobuf::UnknownFieldSet *)(v2 + v10);
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    unint64_t v16 = (SnippetUI::Command *)*((void *)this + 8);
    if (v16)
    {
      int v17 = SnippetUI::Command::ByteSizeLong(v16);
      int v15 = (const google::protobuf::UnknownFieldSet *)&v17[(void)v15
                                                          + 1
                                                          + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ActionElement *)((char *)this + 8), v15, (_DWORD *)this + 18);
  }
  else
  {
    *((_DWORD *)this + 18) = v15;
    return (char *)v15;
  }
}

uint64_t SnippetUI::ActionElement::IsInitialized(SnippetUI::ActionElement *this)
{
  return 1;
}

SnippetUI::ActionElement *SnippetUI::ActionElement::New(SnippetUI::ActionElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(a2);
}

SnippetUI::ActionElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ActionElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ActionElement>);
  }
  SnippetUI::ActionElement::ActionElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F50A00(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4053CFED8BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ActionElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ActionElement *SnippetUI::ActionElement::New(SnippetUI::ActionElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(0);
}

void SnippetUI::ActionElement::~ActionElement(SnippetUI::ActionElement *this)
{
  SnippetUI::ActionElement::~ActionElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F21209C0;
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::ActionElement *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  *(void *)this = &unk_1F21206C0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_ResponseGroup *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  return this;
}

void sub_1C5F50BCC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Command_ResponseGroup::default_instance(SnippetUI::Command_ResponseGroup *this)
{
  if (atomic_load_explicit(scc_info_Command_ResponseGroup_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ResponseGroup_ActionElement_2eproto);
  }
  return &SnippetUI::_Command_ResponseGroup_default_instance_;
}

void SnippetUI::Command_ResponseGroup::CopyFrom(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ResponseGroup::Clear(this);
    SnippetUI::Command_ResponseGroup::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::Command_ResponseGroup::InternalSwap(SnippetUI::Command_ResponseGroup *this, SnippetUI::Command_ResponseGroup *a2)
{
  uint64_t v4 = (SnippetUI::Command_ResponseGroup *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v10 = (uint64_t *)*((void *)this + 2);
  int v8 = (std::string **)((char *)this + 16);
  int v9 = (std::string *)v10;
  int v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v9 = *v8;
  }
  uint64_t v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void SnippetUI::Command_ChangeBackground::clear_background(SnippetUI::Command_ChangeBackground *this)
{
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this, const SnippetUI::Command_ChangeBackground *a2)
{
  *(void *)this = &unk_1F2120780;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5F50DEC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Command_ChangeBackground::default_instance(SnippetUI::Command_ChangeBackground *this)
{
  if (atomic_load_explicit(scc_info_Command_ChangeBackground_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ChangeBackground_ActionElement_2eproto);
  }
  return &SnippetUI::_Command_ChangeBackground_default_instance_;
}

void SnippetUI::Command_ChangeBackground::InternalSwap(SnippetUI::Command_ChangeBackground *this, SnippetUI::Command_ChangeBackground *a2)
{
  uint64_t v4 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Command_ChangeBackground *)((char *)this + 16), (SnippetUI::Command_ChangeBackground *)((char *)a2 + 16));
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::Command_AppPunchout(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  *(void *)this = &unk_1F2120840;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_AppPunchout *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
  }
  return this;
}

void sub_1C5F51080(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Command_AppPunchout::default_instance(SnippetUI::Command_AppPunchout *this)
{
  if (atomic_load_explicit(scc_info_Command_AppPunchout_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_AppPunchout_ActionElement_2eproto);
  }
  return &SnippetUI::_Command_AppPunchout_default_instance_;
}

void SnippetUI::Command_AppPunchout::CopyFrom(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_AppPunchout::Clear(this);
    SnippetUI::Command_AppPunchout::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::Command_AppPunchout::InternalSwap(SnippetUI::Command_AppPunchout *this, SnippetUI::Command_AppPunchout *a2)
{
  uint64_t v4 = (SnippetUI::Command_AppPunchout *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v8 = (uint64_t *)*((void *)this + 2);
  uint64_t v9 = (uint64_t **)((char *)a2 + 16);
  if (v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v9 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v8 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v10 = *v9;
  if (*v9 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v10 = *v9;
  }
  uint64_t v11 = v8[2];
  __n128 result = *(__n128 *)v8;
  uint64_t v12 = v10[2];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v10;
  std::string v8[2] = v12;
  *(__n128 *)uint64_t v10 = result;
  std::string v10[2] = v11;
LABEL_13:
  std::string::size_type v13 = (uint64_t *)*((void *)this + 3);
  std::string::size_type v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    std::string::size_type v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  __n128 result = *(__n128 *)v13;
  uint64_t v17 = v15[2];
  *(_OWORD *)std::string::size_type v13 = *(_OWORD *)v15;
  std::string v13[2] = v17;
  *(__n128 *)int v15 = result;
  std::string v15[2] = v16;
LABEL_19:
  int v20 = (uint64_t *)*((void *)this + 4);
  unsigned int v18 = (std::string **)((char *)this + 32);
  uint64_t v19 = (std::string *)v20;
  unsigned int v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v19 = *v18;
  }
  uint64_t v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v22 = *v21;
  }
  std::string::size_type v23 = v19->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

void SnippetUI::Command::InitAsDefaultInstance(SnippetUI::Command *this)
{
  byte_1EB690608 = 0;
  qword_1EB690610 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690618 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690620 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690628 = &SnippetUI::_Command_ChangeBackground_default_instance_;
  qword_1EB690630 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690638 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB690640 = (uint64_t)&SnippetUI::_Command_ResponseGroup_default_instance_;
  unk_1EB690648 = &SnippetUI::_Command_AppPunchout_default_instance_;
  qword_1EB690650 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
}

uint64_t SnippetUI::Command::_Internal::change_background(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Command::_Internal::response_group(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Command::_Internal::app_punchout(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Command::set_allocated_change_background(SnippetUI::Command *this, SnippetUI::Command_ChangeBackground *a2)
{
  uint64_t result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 5;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Command::set_allocated_response_group(SnippetUI::Command *this, SnippetUI::Command_ResponseGroup *a2)
{
  uint64_t result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 9;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Command::set_allocated_app_punchout(SnippetUI::Command *this, SnippetUI::Command_AppPunchout *a2)
{
  uint64_t result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 10;
    *((void *)this + 3) = a2;
  }
  return result;
}

SnippetUI::Command *SnippetUI::Command::Command(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  *(void *)this = &unk_1F2120900;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((unsigned char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16) = *((unsigned char *)a2 + 16);
  *((_DWORD *)this + 9) = 0;
  int v5 = *((_DWORD *)a2 + 9);
  switch(v5)
  {
    case 1:
      char v6 = *((unsigned char *)a2 + 24);
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      *((unsigned char *)this + 24) = v6;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 11:
      uint64_t v13 = *((void *)a2 + 3);
      SnippetUI::Command::clear_value((uint64_t)this);
      *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
      *((_DWORD *)this + 9) = v5;
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v13);
    case 5:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
      *((void *)this + 3) = v7;
      if (*((_DWORD *)a2 + 9) == 5) {
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      else {
        uint64_t v8 = (int **)&SnippetUI::_Command_ChangeBackground_default_instance_;
      }
      SnippetUI::Command_ChangeBackground::MergeFrom(v7, v8);
      break;
    case 9:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 9;
      uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
      *((void *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) == 9) {
        uint64_t v10 = (const SnippetUI::Command_ResponseGroup *)*((void *)a2 + 3);
      }
      else {
        uint64_t v10 = (const SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_;
      }
      SnippetUI::Command_ResponseGroup::MergeFrom(v9, v10);
      break;
    case 10:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 10;
      uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
      *((void *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 10) {
        uint64_t v12 = (const SnippetUI::Command_AppPunchout *)*((void *)a2 + 3);
      }
      else {
        uint64_t v12 = (const SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_;
      }
      SnippetUI::Command_AppPunchout::MergeFrom(v11, v12);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1C5F51604(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Command::default_instance(SnippetUI::Command *this)
{
  if (atomic_load_explicit(scc_info_Command_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ActionElement_2eproto);
  }
  return &SnippetUI::_Command_default_instance_;
}

void SnippetUI::Command::CopyFrom(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command::Clear(this);
    SnippetUI::Command::MergeFrom(this, a2);
  }
}

void SnippetUI::Command::InternalSwap(SnippetUI::Command *this, SnippetUI::Command *a2)
{
  uint64_t v4 = (SnippetUI::Command *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  char v7 = *((unsigned char *)this + 16);
  *((unsigned char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

void SnippetUI::ActionElement::InitAsDefaultInstance(SnippetUI::ActionElement *this)
{
  qword_1EB690868 = (uint64_t)&SnippetUI::_Command_default_instance_;
}

uint64_t SnippetUI::ActionElement::_Internal::command(SnippetUI::ActionElement::_Internal *this, const SnippetUI::ActionElement *a2)
{
  return *((void *)this + 8);
}

void SnippetUI::ActionElement::clear_text_elements(SnippetUI::ActionElement *this)
{
}

SnippetUI::ActionElement *SnippetUI::ActionElement::ActionElement(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  *(void *)this = &unk_1F21209C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::ActionElement *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 40, (int *)a2 + 10);
  *((_DWORD *)this + 18) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_ && *((void *)a2 + 8)) {
    operator new();
  }
  *((void *)this + 8) = 0;
  return this;
}

void sub_1C5F5186C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v4, 0x10A3C40C637D3DALL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ActionElement::default_instance(SnippetUI::ActionElement *this)
{
  if (atomic_load_explicit(scc_info_ActionElement_ActionElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ActionElement_ActionElement_2eproto);
  }
  return &SnippetUI::_ActionElement_default_instance_;
}

void SnippetUI::ActionElement::CopyFrom(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ActionElement::Clear(this);
    SnippetUI::ActionElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ActionElement::InternalSwap(SnippetUI::ActionElement *this, SnippetUI::ActionElement *a2)
{
  uint64_t v4 = (SnippetUI::ActionElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ActionElement *)((char *)this + 16), (SnippetUI::ActionElement *)((char *)a2 + 16));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 40, (uint64_t)a2 + 40);
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
}

void InitDefaultsscc_info_SectionHeader_Rich_SectionHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", a4);
  SnippetUI::SectionHeader_Rich::SectionHeader_Rich((SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SectionHeader_Rich_default_instance_, v4);
  qword_1EA3DB1E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB1F0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EA3DB1F8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this)
{
  *(void *)this = &unk_1F2120BB8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_SectionHeader_Rich_SectionHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Rich_SectionHeader_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5F51ADC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SectionHeader_Rich::GetMetadata(SnippetUI::SectionHeader_Rich *this)
{
  return qword_1EA3D95A0;
}

void InitDefaultsscc_info_SectionHeader_Standard_SectionHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", a4);
  SnippetUI::SectionHeader_Standard::SectionHeader_Standard((SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SectionHeader_Standard_default_instance_, v4);
  qword_1EA3DB1B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB1C0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this)
{
  *(void *)this = &unk_1F2120AF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_SectionHeader_Standard_SectionHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Standard_SectionHeader_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F51C0C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SectionHeader_Standard::GetMetadata(SnippetUI::SectionHeader_Standard *this)
{
  return file_level_metadata_SectionHeader_2eproto;
}

uint64_t SnippetUI::SectionHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::SectionHeader_Standard::MergeFrom(SnippetUI::SectionHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 365);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SectionHeader_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F51D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Standard::MergeFrom(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 380);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F51E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Standard::CopyFrom(SnippetUI::SectionHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Standard::Clear(this);
    SnippetUI::SectionHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Standard::Clear(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::SectionHeader_Standard *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SectionHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SectionHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        int v20 = v5 + 2;
        do
        {
          unsigned int v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        unsigned int v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *int v20 = v22;
      }
      else
      {
        v5[2] = v19;
        unsigned int v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      unsigned int v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  std::string::size_type v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    unsigned int v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    std::string::size_type v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  unsigned int v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SectionHeader_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SectionHeader_Standard::_InternalParse(SnippetUI::SectionHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SectionHeader_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallback = v17;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v15;
        TagFallback = v17;
      }
      uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::SectionHeader_Standard::GetCachedSize(SnippetUI::SectionHeader_Standard *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::SectionHeader_Standard::ByteSizeLong(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SectionHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SectionHeader_Standard::IsInitialized(SnippetUI::SectionHeader_Standard *this)
{
  return 1;
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::New(SnippetUI::SectionHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(a2);
}

SnippetUI::SectionHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SectionHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Standard>);
  }
  SnippetUI::SectionHeader_Standard::SectionHeader_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F52550(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::New(SnippetUI::SectionHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(0);
}

void SnippetUI::SectionHeader_Standard::~SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this)
{
  SnippetUI::SectionHeader_Standard::~SectionHeader_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F2120AF8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::SectionHeader_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::SectionHeader_Rich::MergeFrom(SnippetUI::SectionHeader_Rich *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 708);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SectionHeader_Rich::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F527A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Rich::MergeFrom(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 723);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v12, v13);
    }
    unsigned int v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      unsigned int v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        unsigned int v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 5) = v15;
        unsigned int v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1C5F52934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Rich::CopyFrom(SnippetUI::SectionHeader_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Rich::Clear(this);
    SnippetUI::SectionHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Rich::Clear(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::SectionHeader_Rich *)((char *)this + 8);
  *((void *)v6 + 4) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SectionHeader_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::SectionHeader_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_) {
    goto LABEL_37;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::VisualProperty *)*((void *)this + 4);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v16 = (SnippetUI::VisualProperty *)*((void *)this + 4);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unsigned int v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      int v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unsigned int v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  int v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  unsigned int v25 = (SnippetUI::ActionProperty *)*((void *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v25 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *uint64_t v5 = 26;
    unsigned int v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      unsigned int v28 = v26 >> 7;
      if (v26 >> 14)
      {
        int v29 = v5 + 2;
        do
        {
          int v30 = v29;
          *v29++ = v28 | 0x80;
          unsigned int v31 = v28 >> 7;
          unsigned int v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        unint64_t v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *int v29 = v31;
      }
      else
      {
        v5[2] = v28;
        unint64_t v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      unint64_t v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  unint64_t v33 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v33 + 23) < 0)
  {
    int v34 = (const char *)*((void *)v33 + 1);
    if (!v34) {
      goto LABEL_43;
    }
    unint64_t v33 = *(google::protobuf::internal **)v33;
    goto LABEL_42;
  }
  int v34 = (const char *)*((unsigned __int8 *)v33 + 23);
  if (*((unsigned char *)v33 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (google::protobuf::internal *)"SnippetUI.SectionHeader_Rich.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 2), v5);
  }
LABEL_43:
  uint64_t v35 = *((void *)this + 1);
  if ((v35 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v35 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SectionHeader_Rich::_InternalParse(SnippetUI::SectionHeader_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v16 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23))) {
      return v16;
    }
    TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v16;
    if ((*(char *)v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
      uint64_t v16 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v9);
    uint64_t v16 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_24;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 3);
        if (!v10)
        {
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 3) = v10;
          TagFallback = v16;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18) {
          goto LABEL_24;
        }
        uint64_t v12 = (SnippetUI::VisualProperty *)*((void *)this + 4);
        if (!v12)
        {
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 4) = v12;
          TagFallback = v16;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v12, TagFallback);
        goto LABEL_29;
      case 3u:
        if (v9 != 26) {
          goto LABEL_24;
        }
        uint64_t v13 = (SnippetUI::ActionProperty *)*((void *)this + 5);
        if (!v13)
        {
          uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 5) = v13;
          TagFallback = v16;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34) {
          goto LABEL_24;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SectionHeader_Rich.component_name");
        goto LABEL_29;
      default:
LABEL_24:
        if (v9) {
          BOOL v14 = (v9 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        uint64_t v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        uint64_t v16 = (google::protobuf::internal *)v11;
        if (v11) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::SectionHeader_Rich::GetCachedSize(SnippetUI::SectionHeader_Rich *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::SectionHeader_Rich::ByteSizeLong(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    uint64_t v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::VisualProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::VisualProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v10 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v10)
    {
      uint64_t v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v11[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SectionHeader_Rich *)((char *)this + 8), v5, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SectionHeader_Rich::IsInitialized(SnippetUI::SectionHeader_Rich *this)
{
  return 1;
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::New(SnippetUI::SectionHeader_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(a2);
}

SnippetUI::SectionHeader_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SectionHeader_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Rich>);
  }
  SnippetUI::SectionHeader_Rich::SectionHeader_Rich(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F53160(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Rich>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::New(SnippetUI::SectionHeader_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(0);
}

void SnippetUI::SectionHeader_Rich::~SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this)
{
  SnippetUI::SectionHeader_Rich::~SectionHeader_Rich(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_1F2120BB8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::SectionHeader_Standard::InitAsDefaultInstance(SnippetUI::SectionHeader_Standard *this)
{
  qword_1EA3DB1B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB1C0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SectionHeader_Standard::_Internal::text_1(SnippetUI::SectionHeader_Standard::_Internal *this, const SnippetUI::SectionHeader_Standard *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::SectionHeader_Standard::_Internal::action(SnippetUI::SectionHeader_Standard::_Internal *this, const SnippetUI::SectionHeader_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SectionHeader_Standard::clear_text_1(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Standard::clear_action(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  *(void *)this = &unk_1F2120AF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F5350C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SectionHeader_Standard::default_instance(SnippetUI::SectionHeader_Standard *this)
{
  if (atomic_load_explicit(scc_info_SectionHeader_Standard_SectionHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Standard_SectionHeader_2eproto);
  }
  return &SnippetUI::_SectionHeader_Standard_default_instance_;
}

void SnippetUI::SectionHeader_Standard::CopyFrom(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Standard::Clear(this);
    SnippetUI::SectionHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Standard::InternalSwap(SnippetUI::SectionHeader_Standard *this, SnippetUI::SectionHeader_Standard *a2)
{
  uint64_t v4 = (SnippetUI::SectionHeader_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

void SnippetUI::SectionHeader_Rich::InitAsDefaultInstance(SnippetUI::SectionHeader_Rich *this)
{
  qword_1EA3DB1E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB1F0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EA3DB1F8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::text_1(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::thumbnail(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::action(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::SectionHeader_Rich::clear_text_1(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Rich::clear_thumbnail(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Rich::clear_action(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  *(void *)this = &unk_1F2120BB8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5F53998(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SectionHeader_Rich::default_instance(SnippetUI::SectionHeader_Rich *this)
{
  if (atomic_load_explicit(scc_info_SectionHeader_Rich_SectionHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Rich_SectionHeader_2eproto);
  }
  return &SnippetUI::_SectionHeader_Rich_default_instance_;
}

void SnippetUI::SectionHeader_Rich::CopyFrom(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Rich::Clear(this);
    SnippetUI::SectionHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Rich::InternalSwap(SnippetUI::SectionHeader_Rich *this, SnippetUI::SectionHeader_Rich *a2)
{
  uint64_t v4 = (SnippetUI::SectionHeader_Rich *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
}

void siri::dialogengine::ExecuteTableSet::Execute(siri::dialogengine **this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "conclusionInSingleWindowResponse");
  BOOL BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "windowSize");
  double NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)&__p, 0.0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isFirstWindow");
  BOOL v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isLastWindow");
  BOOL v7 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isConclusion");
  BOOL v8 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "promptType");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)this, (const void **)v23, (char *)v21, &v25);
  siri::dialogengine::StringToUpper((uint64_t)&v25, (uint64_t)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v9, v10)
    && (std::string::basic_string[abi:ne180100]<0>(&v25, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25),
        SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      goto LABEL_50;
    }
  }
  else if (v8)
  {
    goto LABEL_20;
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Table");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (!BooleanParameter) {
        goto LABEL_50;
      }
    }
    else if (!BooleanParameter)
    {
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    goto LABEL_50;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  int v11 = v6 && v7;
  if ((v11 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Table");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_62;
    }
  }
  else if (!v7)
  {
    goto LABEL_62;
  }
  int v12 = v28;
  if ((char)v28 < 0)
  {
    if (v27 == 12)
    {
      p_p = __p;
LABEL_58:
      uint64_t v14 = *(void *)p_p;
      int v15 = p_p[2];
      if (v14 == 0x41554E49544E4F43 && v15 == 1313818964) {
        goto LABEL_67;
      }
    }
  }
  else if (v28 == 12)
  {
    p_p = &__p;
    goto LABEL_58;
  }
LABEL_62:
  std::string::basic_string[abi:ne180100]<0>(&v25, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_76;
    }
  }
  else if (!v7)
  {
    goto LABEL_76;
  }
  int v12 = v28;
LABEL_67:
  if ((v12 & 0x80) != 0)
  {
    if (v27 != 12) {
      goto LABEL_76;
    }
    unsigned int v17 = __p;
  }
  else
  {
    if (v12 != 12) {
      goto LABEL_76;
    }
    unsigned int v17 = &__p;
  }
  uint64_t v18 = *(void *)v17;
  int v19 = v17[2];
  if (v18 == 0x41554E49544E4F43 && v19 == 1313818964)
  {
    if ((v11 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_50;
  }
LABEL_76:
  siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
}

void sub_1C5F54150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteTableSet::~ExecuteTableSet(siri::dialogengine::ExecuteTableSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::GetCatVersionForOS(std::vector<std::pair<std::string, std::string>> *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  if (this->__begin_ == this->__end_)
  {
    {
      operator new();
    }
    BOOL v6 = (std::once_flag::_State_type *)siri::dialogengine::GetOSCatVersions(void)::flag;
    if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetOSCatVersions(void)::flag, memory_order_acquire) != -1)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::__call_once(v6, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetOSCatVersions(void)::$_0 &&>>);
    }
    if ((std::vector<std::pair<std::string, std::string>> *)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions != this) {
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, *(std::string **)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions, *(std::string **)(siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions + 8)- *(void *)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions) >> 4));
    }
  }
  siri::dialogengine::StringToLower(a2, (uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "release/");
  BOOL v7 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&__p);
  BOOL v8 = v7;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v7) {
      goto LABEL_14;
    }
LABEL_11:
    siri::dialogengine::StringSplit((unsigned __int8 *)&__str, "-", &__p);
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 48) {
      std::string::operator=(&__str, (const std::string *)(__p.__r_.__value_.__r.__words[0] + 24));
    }
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    goto LABEL_14;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v8) {
    goto LABEL_11;
  }
LABEL_14:
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)((char *)this->__end_ - (char *)this->__begin_) == (std::vector<std::pair<std::string, std::string>>::pointer)48)
  {
    unint64_t v10 = 0;
LABEL_16:
    int v11 = &begin[v10];
    if (SHIBYTE(v11->second.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v11->second.__r_.__value_.__l.__data_, v11->second.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v12 = *(_OWORD *)&v11->second.__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v11->second.__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
    }
    goto LABEL_84;
  }
  uint64_t v13 = 0;
  while (1)
  {
    siri::dialogengine::StringToLower((uint64_t)&begin[v13], (uint64_t)&__p);
    unint64_t v14 = v13 + 1;
    siri::dialogengine::StringToLower((uint64_t)&this->__begin_[v13 + 1], (uint64_t)&v35);
    if (!siri::dialogengine::IsSameBaseOS(&__str, &__p))
    {
      char v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      goto LABEL_67;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v17 >= size) {
      size_t v19 = size;
    }
    else {
      size_t v19 = v17;
    }
    int v20 = memcmp(p_p, p_str, v19);
    BOOL v21 = size >= v17;
    if (v20) {
      BOOL v21 = v20 >= 0;
    }
    if (v21) {
      break;
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v35.__r_.__value_.__l.__size_;
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v23 = &v35;
    }
    else {
      unsigned int v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if (v22 >= v17) {
      size_t v24 = v17;
    }
    else {
      size_t v24 = v22;
    }
    int v25 = memcmp(p_str, v23, v24);
    BOOL v26 = v17 < v22;
    if (v25) {
      BOOL v26 = v25 < 0;
    }
    if (v26 || !siri::dialogengine::IsSameBaseOS(&__str, &v35)) {
      break;
    }
    uint64_t v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
    }
    std::string::size_type v29 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    char v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v29 = v35.__r_.__value_.__l.__size_;
    }
    if (v28 == v29)
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v31 = &v35;
      }
      else {
        unsigned int v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__str.__r_.__value_.__l.__data_, v31, __str.__r_.__value_.__l.__size_))
        {
LABEL_74:
          unint64_t v33 = &this->__begin_[v14];
          goto LABEL_77;
        }
      }
      else
      {
        if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
          goto LABEL_74;
        }
        unsigned int v32 = &__str;
        while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
        {
          unsigned int v32 = (std::string *)((char *)v32 + 1);
          unsigned int v31 = (std::string *)((char *)v31 + 1);
          if (!--v27) {
            goto LABEL_74;
          }
        }
      }
    }
LABEL_67:
    if (v30 < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 4) - 1;
    ++v13;
    if (v14 >= v10) {
      goto LABEL_16;
    }
  }
  unint64_t v33 = &this->__begin_[v13];
LABEL_77:
  if (SHIBYTE(v33->second.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, v33->second.__r_.__value_.__l.__data_, v33->second.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v34 = *(_OWORD *)&v33->second.__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v33->second.__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v34;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_84:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F5469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

BOOL siri::dialogengine::IsSameBaseOS(std::string *__str, std::string *a2)
{
  uint64_t v2 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size_t size = __str->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v4 = __str->__r_.__value_.__l.__size_;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a2;
  std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type v7 = (v6 & 0x80u) == 0 ? HIBYTE(a2->__r_.__value_.__r.__words[2]) : a2->__r_.__value_.__l.__size_;
  if (!v7) {
    return 0;
  }
  if ((v6 & 0x80) != 0)
  {
    if (v4 <= a2->__r_.__value_.__l.__size_) {
      goto LABEL_32;
    }
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  else if (v4 <= v6)
  {
LABEL_32:
    if (v4 < v7)
    {
      std::string::basic_string(&v53, a2, 0, v4, (std::allocator<char> *)&v52);
      char v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      size_t v10 = v53.__r_.__value_.__l.__size_;
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v53.__r_.__value_.__l.__size_;
      }
      std::string::size_type v25 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      int v26 = (char)v25;
      if ((v25 & 0x80u) != 0) {
        std::string::size_type v25 = __str->__r_.__value_.__l.__size_;
      }
      if (v24 == v25)
      {
        if (v26 >= 0) {
          unint64_t v14 = __str;
        }
        else {
          unint64_t v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v53.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&v53.__r_.__value_.__s + 23))
          {
            uint64_t v27 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
            std::string::size_type v28 = &v53;
            do
            {
              int v30 = v28->__r_.__value_.__s.__data_[0];
              std::string::size_type v28 = (std::string *)((char *)v28 + 1);
              int v29 = v30;
              int v32 = v14->__r_.__value_.__s.__data_[0];
              unint64_t v14 = (std::string *)((char *)v14 + 1);
              int v31 = v32;
              BOOL v21 = v27-- != 0;
              char v33 = v21;
              BOOL v23 = v29 == v31;
            }
            while (v29 == v31 && (v33 & 1) != 0);
            goto LABEL_52;
          }
          return 1;
        }
LABEL_61:
        std::string::size_type v34 = v53.__r_.__value_.__r.__words[0];
        BOOL v23 = memcmp(v53.__r_.__value_.__l.__data_, v14, v10) == 0;
        goto LABEL_62;
      }
LABEL_51:
      BOOL v23 = 0;
      goto LABEL_52;
    }
    if ((v2 & 0x80) != 0)
    {
      if (size < 2)
      {
        if (v4 == v7)
        {
          if ((v6 & 0x80u) != 0) {
            a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          return memcmp(__str->__r_.__value_.__l.__data_, a2, size) == 0;
        }
        return 0;
      }
    }
    else
    {
      if (v2 < 2)
      {
        if (v7 == v2)
        {
          if ((v6 & 0x80u) == 0) {
            std::string v35 = a2;
          }
          else {
            std::string v35 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          return __str->__r_.__value_.__s.__data_[0] == v35->__r_.__value_.__s.__data_[0];
        }
        return 0;
      }
      size_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    std::string::basic_string(&v53, __str, 0, size - 1, (std::allocator<char> *)&v52);
    std::string::size_type v39 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    if ((v39 & 0x80u) != 0) {
      std::string::size_type v39 = v5->__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v52, v5, 0, v39 - 1, (std::allocator<char> *)&v54);
    char v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v41 = v53.__r_.__value_.__l.__size_;
    }
    std::string::size_type v42 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    int v43 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = v52.__r_.__value_.__l.__size_;
    }
    if (v41 == v42)
    {
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v52;
      }
      else {
        uint64_t v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v23 = memcmp(v53.__r_.__value_.__l.__data_, v44, v53.__r_.__value_.__l.__size_) == 0;
      }
      else if (*((unsigned char *)&v53.__r_.__value_.__s + 23))
      {
        uint64_t v45 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
        uint64_t v46 = &v53;
        do
        {
          int v48 = v46->__r_.__value_.__s.__data_[0];
          uint64_t v46 = (std::string *)((char *)v46 + 1);
          int v47 = v48;
          int v50 = v44->__r_.__value_.__s.__data_[0];
          uint64_t v44 = (std::string *)((char *)v44 + 1);
          int v49 = v50;
          BOOL v21 = v45-- != 0;
          char v51 = v21;
          BOOL v23 = v47 == v49;
        }
        while (v47 == v49 && (v51 & 1) != 0);
      }
      else
      {
        BOOL v23 = 1;
      }
    }
    else
    {
      BOOL v23 = 0;
    }
    if (v43 < 0)
    {
      operator delete(v52.__r_.__value_.__l.__data_);
      char v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    if (v40 < 0)
    {
      unint64_t v37 = (void *)v53.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
    return v23;
  }
  std::string::basic_string(&v53, __str, 0, v6, (std::allocator<char> *)&v52);
  char v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  size_t v10 = v53.__r_.__value_.__l.__size_;
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v53.__r_.__value_.__l.__size_;
  }
  std::string::size_type v12 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v5->__r_.__value_.__l.__size_;
  }
  if (v11 != v12) {
    goto LABEL_51;
  }
  if (v13 >= 0) {
    unint64_t v14 = v5;
  }
  else {
    unint64_t v14 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v53.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_61;
  }
  if (!*((unsigned char *)&v53.__r_.__value_.__s + 23)) {
    return 1;
  }
  uint64_t v15 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
  uint64_t v16 = &v53;
  do
  {
    int v18 = v16->__r_.__value_.__s.__data_[0];
    uint64_t v16 = (std::string *)((char *)v16 + 1);
    int v17 = v18;
    int v20 = v14->__r_.__value_.__s.__data_[0];
    unint64_t v14 = (std::string *)((char *)v14 + 1);
    int v19 = v20;
    BOOL v21 = v15-- != 0;
    char v22 = v21;
    BOOL v23 = v17 == v19;
  }
  while (v17 == v19 && (v22 & 1) != 0);
LABEL_52:
  if (v9 < 0)
  {
    std::string::size_type v34 = v53.__r_.__value_.__r.__words[0];
LABEL_62:
    unint64_t v37 = (void *)v34;
LABEL_63:
    operator delete(v37);
  }
  return v23;
}

void sub_1C5F54A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetOSCatVersions(void)::$_0 &&>>()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v28 = 4;
  strcpy((char *)v27, "AZUL");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v26, v27, 66);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v25, v27, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v24, v27, 70);
  char v23 = 3;
  int v22 = 5851987;
  uint64_t v20 = 0;
  uint64_t v21 = 0x700000000000000;
  strcpy(v19, "SKYECHO");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v18, v27, 70);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v17, v27, 71);
  char v16 = 6;
  strcpy((char *)v15, "SYDNEY");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v14, v15, 67);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v13, v15, 68);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v12, v15, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v11, v15, 70);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v10, v15, 71);
  char v9 = 4;
  strcpy((char *)v8, "DAWN");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v7, v8, 66);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v6, v8, 67);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v5, v8, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v4, v8, 70);
  char v3 = 7;
  v2[0] = (const void *)0x4C415453595243;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v1, v2, 66);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&__p, v2, 67);
  operator new();
}

void sub_1C5F55050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  *(void *)(v84 + 8) = v85;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  uint64_t v87 = 1056;
  while (1)
  {
    std::string::size_type v88 = (void **)((char *)&STACK[0x228] + v87);
    if (*((char *)&STACK[0x228] + v87 - 1) < 0) {
      operator delete(*(v88 - 3));
    }
    if (*((char *)v88 - 25) < 0) {
      operator delete(*(v88 - 6));
    }
    v87 -= 48;
    if (!v87)
    {
      MEMORY[0x1C8796D70](v84, 0x20C40960023A9);
      if (a15 < 0) {
        operator delete(__p);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a30 < 0) {
        operator delete(a25);
      }
      if (a36 < 0) {
        operator delete(a31);
      }
      if (a42 < 0) {
        operator delete(a37);
      }
      if (a48 < 0) {
        operator delete(a43);
      }
      if (a57 < 0) {
        operator delete(a52);
      }
      if (a63 < 0) {
        operator delete(a58);
      }
      if (a69 < 0) {
        operator delete(a64);
      }
      if (a72 < 0) {
        operator delete(a70);
      }
      if (a74 < 0) {
        operator delete(a73);
      }
      if (a76 < 0) {
        operator delete(a75);
      }
      if (a78 < 0) {
        operator delete(a77);
      }
      if (a80 < 0) {
        operator delete(a79);
      }
      if (a82 < 0) {
        operator delete(a81);
      }
      if (a84 < 0) {
        operator delete(a83);
      }
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(std::string *this, long long *a2, char *__s)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, __s);
  return this;
}

void sub_1C5F552E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::GetVersionMajorMinorBuild@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3402.35.1");
}

void siri::dialogengine::GetValidVersion(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = *(void *)(a1 + 16);
  }
  if ((siri::dialogengine::IsValidVersionNumber((char *)a2) & 1) == 0)
  {
    memset(&v7, 0, sizeof(v7));
    siri::dialogengine::GetCatVersionForOS(&v7, a2, &__p);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v9 = &v7;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "5.2");
  int v3 = siri::dialogengine::VersionGreaterThan(a2, (uint64_t)&__p);
  int v5 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v6 = (void *)a2;
  }
  else {
    std::string::size_type v6 = *(void **)a2;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Request to upgrade CAT to version to %s which is greater than the max version %s", v4, v6, "5.2");
  MEMORY[0x1C8796900](a2, "5.2");
}

void sub_1C5F55438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v22 - 40) = v21;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 40));
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ChangeVersionForCATXML(std::string *a1, uint64_t a2)
{
  BOOL v4 = 0;
  if (siri::dialogengine::HasCATExtension(a1, 0))
  {
    if (siri::dialogengine::FileExists((uint64_t *)a1))
    {
      siri::dialogengine::ReadFileToString((uint64_t)a1, &__p);
      int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        p_p = &__p;
      }
      else
      {
        int64_t size = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size >= 25)
      {
        BOOL v8 = (char *)p_p + size;
        char v9 = p_p;
        do
        {
          size_t v10 = (char *)memchr(v9, 117, size - 24);
          if (!v10) {
            break;
          }
          if (*(void *)v10 == 0x6C7070613A6E7275
            && *((void *)v10 + 1) == 0x3A73656D616E3A65
            && *((void *)v10 + 2) == 0x7461633A69726973
            && v10[24] == 58)
          {
            BOOL v4 = 0;
            if (v10 == v8) {
              goto LABEL_34;
            }
            int64_t v14 = v10 - (char *)p_p;
            if (v14 == -1) {
              goto LABEL_34;
            }
            std::string::basic_string[abi:ne180100]<0>(v36, "urn:apple:names:siri:cat:");
            if (SHIBYTE(v37) < 0)
            {
              uint64_t v15 = v36[1];
              operator delete(v36[0]);
            }
            else
            {
              uint64_t v15 = (void *)HIBYTE(v37);
            }
            std::string::size_type v16 = (std::string::size_type)v15 + v14;
            std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v18 = &__p;
            }
            else {
              int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
            }
            if (v17 >= v16)
            {
              uint64_t v20 = (char *)v18 + v16;
              uint64_t v21 = (char *)v18 + v17;
              while (v21 - v20 >= 1)
              {
                uint64_t v22 = memchr(v20, 34, v21 - v20);
                if (!v22) {
                  break;
                }
                if (*v22 == 34)
                {
                  BOOL v4 = 0;
                  if (v22 != v21)
                  {
                    std::string::size_type v23 = v22 - (unsigned char *)v18;
                    if (v23 != -1)
                    {
                      std::string::basic_string(&v34, &__p, 0, v16, (std::allocator<char> *)&v33);
                      int v24 = *(char *)(a2 + 23);
                      if (v24 >= 0) {
                        std::string::size_type v25 = (const std::string::value_type *)a2;
                      }
                      else {
                        std::string::size_type v25 = *(const std::string::value_type **)a2;
                      }
                      if (v24 >= 0) {
                        std::string::size_type v26 = *(unsigned __int8 *)(a2 + 23);
                      }
                      else {
                        std::string::size_type v26 = *(void *)(a2 + 8);
                      }
                      uint64_t v27 = std::string::append(&v34, v25, v26);
                      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                      v35.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v28;
                      v27->__r_.__value_.__l.__size_ = 0;
                      v27->__r_.__value_.__r.__words[2] = 0;
                      v27->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string(&v33, &__p, v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
                      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v29 = &v33;
                      }
                      else {
                        uint64_t v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
                      }
                      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v30 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v30 = v33.__r_.__value_.__l.__size_;
                      }
                      int v31 = std::string::append(&v35, (const std::string::value_type *)v29, v30);
                      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
                      std::string::size_type v37 = v31->__r_.__value_.__r.__words[2];
                      *(_OWORD *)unsigned int v36 = v32;
                      v31->__r_.__value_.__l.__size_ = 0;
                      v31->__r_.__value_.__r.__words[2] = 0;
                      v31->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v33.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v35.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v34.__r_.__value_.__l.__data_);
                      }
                      BOOL v4 = siri::dialogengine::WriteFileFromString(a1, (uint64_t)v36);
                      if (SHIBYTE(v37) < 0) {
                        operator delete(v36[0]);
                      }
                      char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    }
                  }
                  goto LABEL_34;
                }
                uint64_t v20 = v22 + 1;
              }
            }
            break;
          }
          char v9 = (std::string *)(v10 + 1);
          int64_t size = v8 - (char *)v9;
        }
        while (v8 - (char *)v9 >= 25);
      }
      BOOL v4 = 0;
LABEL_34:
      if (v6 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1C5F55768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UpgradeVersion(void *a1, unsigned __int8 *a2)
{
  siri::dialogengine::GetValidVersion((uint64_t)a2, (uint64_t)&__str);
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v4 + 152), *(void *)(v4 + 160));
  }
  else {
    std::string v14 = *(std::string *)(v4 + 152);
  }
  BOOL v5 = (siri::dialogengine::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)&v14) & 1) != 0
    || siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_9;
    }
  }
  else if (v5)
  {
LABEL_9:
    uint64_t v6 = 1;
    goto LABEL_30;
  }
  uint64_t v8 = *a1;
  std::vector<std::pair<std::string, std::string>> v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "2.4");
  if (*(char *)(v8 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v8 + 152), *(void *)(v8 + 160));
  }
  else {
    std::string v14 = *(std::string *)(v8 + 152);
  }
  if (siri::dialogengine::VersionLessThan((unsigned __int8 *)&v14, (unsigned __int8 *)__p))
  {
    if (siri::dialogengine::VersionEqual(a2, (unsigned __int8 *)__p)) {
      int v9 = 1;
    }
    else {
      int v9 = siri::dialogengine::VersionGreaterThan((uint64_t)a2, (uint64_t)__p);
    }
  }
  else
  {
    int v9 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::operator=((std::string *)(*a1 + 152), &__str);
  if (v9) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 2;
  }
LABEL_30:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C5F55984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::MorphunUpdater::GetPaths(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

void *siri::dialogengine::MorphunUpdater::GetPath@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t siri::dialogengine::MorphunUpdater::DeleteAll(siri::dialogengine::MorphunUpdater *this)
{
  return 0;
}

uint64_t siri::dialogengine::MorphunUpdater::Delete()
{
  return 0;
}

{
  return 0;
}

uint64_t siri::dialogengine::MorphunUpdater::Download()
{
  return 0;
}

{
  return 0;
}

void siri::dialogengine::MorphunUpdater::~MorphunUpdater(siri::dialogengine::MorphunUpdater *this)
{
}

uint64_t *YAML::detail::node_data::empty_scalar(YAML::detail::node_data *this)
{
  {
    YAML::detail::node_data::empty_scalar(void)::svalue = 0;
    unk_1EA3D95D0 = 0;
    qword_1EA3D95D8 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA210], &YAML::detail::node_data::empty_scalar(void)::svalue, &dword_1C5C1E000);
  }
  return &YAML::detail::node_data::empty_scalar(void)::svalue;
}

double YAML::detail::node_data::node_data(YAML::detail::node_data *this)
{
  *(unsigned char *)this = 0;
  *(void *)((char *)this + 4) = -1;
  *(void *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = (char *)this + 136;
  *((void *)this + 18) = (char *)this + 136;
  *((void *)this + 19) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  *(void *)((char *)this + 4) = -1;
  *(void *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = (char *)this + 136;
  *((void *)this + 18) = (char *)this + 136;
  *((void *)this + 19) = 0;
  return result;
}

uint64_t YAML::detail::node_data::mark_defined(uint64_t this)
{
  if (!*(_DWORD *)(this + 16)) {
    *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 1;
  }
  *(unsigned char *)this = 1;
  return this;
}

uint64_t YAML::detail::node_data::set_mark(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 2);
  *(void *)(result + 4) = v2;
  return result;
}

void *YAML::detail::node_data::set_type(void *result, int a2)
{
  if (a2)
  {
    *(unsigned char *)double result = 1;
    if (*((_DWORD *)result + 4) != a2)
    {
      *((_DWORD *)result + 4) = a2;
      switch(a2)
      {
        case 4:
          result[15] = result[14];
          return std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear(result + 17);
        case 3:
          result[11] = result[10];
          result[13] = 0;
          break;
        case 2:
          if (*((char *)result + 79) < 0)
          {
            *(unsigned char *)result[7] = 0;
            result[8] = 0;
          }
          else
          {
            *((unsigned char *)result + 56) = 0;
            *((unsigned char *)result + 79) = 0;
          }
          break;
      }
    }
  }
  else
  {
    *((_DWORD *)result + 4) = 0;
    *(unsigned char *)double result = 0;
  }
  return result;
}

void *std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *YAML::detail::node_data::reset_sequence(void *this)
{
  this[11] = this[10];
  this[13] = 0;
  return this;
}

void *YAML::detail::node_data::reset_map(YAML::detail::node_data *this)
{
  *((void *)this + 15) = *((void *)this + 14);
  return std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((void *)this + 17);
}

std::string *YAML::detail::node_data::set_tag(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t YAML::detail::node_data::set_style(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t YAML::detail::node_data::set_null(uint64_t this)
{
  *(unsigned char *)this = 1;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 1;
  return this;
}

std::string *YAML::detail::node_data::set_scalar(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 2;
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

uint64_t YAML::detail::node_data::size(YAML::detail::node_data *this)
{
  if (!*(unsigned char *)this) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 4);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      YAML::detail::node_data::compute_seq_size(this);
      return *((void *)this + 13);
    }
    return 0;
  }
  YAML::detail::node_data::compute_map_size(this);
  return ((uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 4) - *((void *)this + 19);
}

void *YAML::detail::node_data::compute_seq_size(void *this)
{
  uint64_t v1 = this[10];
  uint64_t v2 = this[11] - v1;
  unint64_t v3 = this[13];
  if (v3 < v2 >> 3)
  {
    uint64_t v4 = v2 >> 3;
    do
    {
      if (!****(unsigned char ****)(v1 + 8 * v3)) {
        break;
      }
      this[13] = ++v3;
    }
    while (v4 != v3);
  }
  return this;
}

void YAML::detail::node_data::compute_map_size(YAML::detail::node_data *this)
{
  uint64_t v1 = (char *)this + 136;
  uint64_t v2 = (char *)*((void *)this + 18);
  if (v2 != (char *)this + 136)
  {
    do
    {
      uint64_t v4 = (uint64_t *)v2;
      uint64_t v2 = (char *)*((void *)v2 + 1);
      if (***(unsigned char ***)v4[2])
      {
        if (***(unsigned char ***)v4[3])
        {
          uint64_t v5 = *v4;
          *(void *)(v5 + 8) = v2;
          *(void *)v4[1] = v5;
          --*((void *)this + 19);
          operator delete(v4);
        }
      }
    }
    while (v2 != v1);
  }
}

uint64_t YAML::detail::node_data::begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(unsigned char *****)(this + 112), *(unsigned char *****)(this + 120));
}

{
  int v2;
  uint64_t v3;

  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(unsigned char *****)(this + 112), *(unsigned char *****)(this + 120));
}

uint64_t YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(uint64_t result, unsigned char ****a2, unsigned char ****a3)
{
  *(_DWORD *)double result = 2;
  *(void *)(result + 8) = 0;
  *(void *)(result + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  *(void *)(result + 24) = a3;
  if (a3 != a2)
  {
    while (!****a2 || !***a2[1])
    {
      a2 += 2;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  *(void *)(result + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return result;
}

uint64_t YAML::detail::node_data::end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(unsigned char *****)(this + 120), *(unsigned char *****)(this + 120));
}

{
  int v2;
  uint64_t v3;

  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(unsigned char *****)(this + 120), *(unsigned char *****)(this + 120));
}

void YAML::detail::node_data::push_back(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 > 1)
  {
    if (v4 != 3)
    {
      exception = (YAML::BadPushback *)__cxa_allocate_exception(0x38uLL);
      YAML::BadPushback::BadPushback(exception);
    }
    uint64_t v5 = *(void **)(a1 + 88);
  }
  else
  {
    *(_DWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 3;
    uint64_t v5 = *(void **)(a1 + 80);
    *(void *)(a1 + 88) = v5;
    *(void *)(a1 + 104) = 0;
  }
  unint64_t v6 = *(void *)(a1 + 96);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    std::string v14 = (void *)(v12 + 8 * v9);
    unint64_t v15 = v12 + 8 * v13;
    *std::string v14 = a2;
    std::vector<std::pair<std::string, std::string>> v7 = v14 + 1;
    std::string::size_type v17 = *(char **)(a1 + 80);
    std::string::size_type v16 = *(char **)(a1 + 88);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      std::string::size_type v16 = *(char **)(a1 + 80);
    }
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 96) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    std::vector<std::pair<std::string, std::string>> v7 = v5 + 1;
  }
  *(void *)(a1 + 88) = v7;
}

void sub_1C5F560F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

YAML::BadPushback *YAML::BadPushback::BadPushback(YAML::BadPushback *this)
{
  uint64_t v5 = -1;
  int v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "appending to a non-sequence");
  YAML::Exception::Exception((uint64_t)this, &v5, (long long *)__p);
  *(void *)this = &unk_1F2125CE8;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F2120D68;
  return this;
}

void sub_1C5F561B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::detail::node_data::insert(YAML::detail::node_data *a1, YAML::detail::node *a2, YAML::detail::node *a3, void *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 4);
  if (v7 < 2 || v7 == 3)
  {
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    v11[0] = *a4;
    v11[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    YAML::detail::node_data::convert_to_map((uint64_t)a1, (uint64_t)v11);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else if (v7 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<YAML::detail::node>(exception);
  }
  YAML::detail::node_data::insert_map_pair(a1, a2, a3);
}

void sub_1C5F5629C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::detail::node_data::convert_to_map(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 2)
  {
    *(void *)(a1 + 120) = *(void *)(a1 + 112);
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((void *)(a1 + 136));
    *(_DWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 4;
  }
  else if (v3 == 3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    v5[0] = *(YAML::detail::memory ***)a2;
    v5[1] = (YAML::detail::memory **)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    YAML::detail::node_data::convert_sequence_to_map(a1, v5);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
    }
  }
  else if (v3 == 2)
  {
    __assert_rtn("convert_to_map", "node_data.cpp", 294, "false");
  }
}

void sub_1C5F5638C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *YAML::BadSubscript::BadSubscript<YAML::detail::node>(void *a1)
{
  uint64_t v5 = -1;
  int v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "operator[] call on a scalar");
  YAML::Exception::Exception((uint64_t)a1, &v5, (long long *)__p);
  *a1 = &unk_1F2125CE8;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1F2125F28;
  return a1;
}

void sub_1C5F56448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::detail::node_data::insert_map_pair(YAML::detail::node_data *this, YAML::detail::node *a2, YAML::detail::node *a3)
{
  unsigned int v7 = (char *)*((void *)this + 15);
  unint64_t v6 = *((void *)this + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (char *)*((void *)this + 14);
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string v14 = (char *)operator new(16 * v13);
    unint64_t v15 = &v14[16 * v10];
    *(void *)unint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    uint64_t v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      unsigned int v7 = v9;
    }
    *((void *)this + 14) = v15;
    *((void *)this + 15) = v8;
    *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = &v14[16 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)unsigned int v7 = a2;
    *((void *)v7 + 1) = a3;
    uint64_t v8 = v7 + 16;
  }
  *((void *)this + 15) = v8;
  if (!***(unsigned char ***)a2 || !***(unsigned char ***)a3)
  {
    std::string::size_type v16 = operator new(0x20uLL);
    void v16[2] = a2;
    v16[3] = a3;
    uint64_t v18 = *((void *)this + 17);
    std::string::size_type v17 = (void *)((char *)this + 136);
    *std::string::size_type v16 = v18;
    v16[1] = v17;
    *(void *)(v18 + 8) = v16;
    *std::string::size_type v17 = v16;
    ++v17[2];
  }
}

void *YAML::detail::node_data::convert_sequence_to_map(uint64_t a1, YAML::detail::memory ***a2)
{
  if (*(_DWORD *)(a1 + 16) != 3) {
    __assert_rtn("convert_sequence_to_map", "node_data.cpp", 300, "m_type == NodeType::Sequence");
  }
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  double result = std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((void *)(a1 + 136));
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 != *(void *)(a1 + 80))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v6);
    std::ostream::operator<<();
    YAML::detail::memory::create_node(**a2);
  }
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 4;
  return result;
}

void sub_1C5F56814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t YAML::detail::node_data::get(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 16) != 4) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  if (v2 == v3) {
    return 0;
  }
  while (**(void **)v2 != *a2)
  {
    v2 += 16;
    if (v2 == v3) {
      return 0;
    }
  }
  return *(void *)(v2 + 8);
}

uint64_t YAML::detail::node_data::get(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 < 2 || v6 == 3)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
    v13[0] = *(void *)a3;
    v13[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    YAML::detail::node_data::convert_to_map(a1, (uint64_t)v13);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else if (v6 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<YAML::detail::node>(exception);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  if (v9 == v10) {
LABEL_14:
  }
    YAML::detail::memory::create_node(**(YAML::detail::memory ***)a3);
  while (**(void **)v9 != *a2)
  {
    v9 += 16;
    if (v9 == v10) {
      goto LABEL_14;
    }
  }
  return *(void *)(v9 + 8);
}

void sub_1C5F5699C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node_data::remove(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 16) != 4) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(a1 + 136);
  uint64_t v5 = *(uint64_t **)(a1 + 144);
  if (v5 != v4)
  {
    do
    {
      unsigned int v6 = (uint64_t *)v5[1];
      if (*(void *)v5[2] == *a2)
      {
        uint64_t v7 = *v5;
        *(void *)(v7 + 8) = v6;
        *(void *)v5[1] = v7;
        --*(void *)(a1 + 152);
        operator delete(v5);
      }
      uint64_t v5 = v6;
    }
    while (v6 != v4);
  }
  uint64_t v9 = *(void ***)(a1 + 112);
  uint64_t v8 = *(void ***)(a1 + 120);
  if (v9 == v8) {
    return 0;
  }
  while (**v9 != *a2)
  {
    v9 += 2;
    if (v9 == v8) {
      return 0;
    }
  }
  unint64_t v11 = v9 + 2;
  if (v9 + 2 != v8)
  {
    do
    {
      uint64_t v12 = v11[1];
      *(v11 - 2) = *v11;
      *(v11 - 1) = v12;
      v11 += 2;
    }
    while (v11 != v8);
    uint64_t v9 = (void **)(v11 - 2);
  }
  *(void *)(a1 + 120) = v9;
  return 1;
}

void siri::dialogengine::DialogMetadataSemanticValue::ToString(siri::dialogengine::DialogMetadataSemanticValue *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v4 = *((void *)this + 1);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v37, v4 + 1);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v37;
  }
  else {
    uint64_t v5 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)this + 23) >= 0) {
      unsigned int v6 = this;
    }
    else {
      unsigned int v6 = *(siri::dialogengine::DialogMetadataSemanticValue **)this;
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 35;
  int v7 = *((char *)this + 47);
  if (v7 >= 0) {
    uint64_t v8 = (char *)this + 24;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)*((void *)this + 3);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 47);
  }
  else {
    std::string::size_type v9 = *((void *)this + 4);
  }
  uint64_t v10 = std::string::append(&v37, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v35, ": ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = a2;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  memset(&v37, 0, sizeof(v37));
  std::string v14 = (long long *)*((void *)this + 6);
  for (int i = (long long *)*((void *)this + 7); v14 != i; v14 += 3)
  {
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v16 = *v14;
      v35.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
    }
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v36, (const void ***)v14 + 3);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v35.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v34, size + 1);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v34;
    }
    else {
      uint64_t v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v19 = &v35;
      }
      else {
        int v19 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      memmove(v18, v19, size);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + size) = 32;
    std::string::basic_string[abi:ne180100]<0>(v30, "=");
    std::string::basic_string[abi:ne180100]<0>(v28, ", ");
    siri::dialogengine::StringJoinMap(v36, (const void **)v30, (uint64_t)v28, (uint64_t)__p);
    if ((v33 & 0x80u) == 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    if ((v33 & 0x80u) == 0) {
      std::string::size_type v21 = v33;
    }
    else {
      std::string::size_type v21 = (std::string::size_type)__p[1];
    }
    std::string::append(&v34, (const std::string::value_type *)v20, v21);
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    uint64_t v22 = (_OWORD *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_ >= v37.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v37, (long long *)&v34);
    }
    else
    {
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v37.__r_.__value_.__l.__size_, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v23 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
        *(void *)(v37.__r_.__value_.__l.__size_ + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v34.__r_.__value_.__l + 2);
        *uint64_t v22 = v23;
      }
      std::string::size_type v24 = (std::string::size_type)v22 + 24;
    }
    v37.__r_.__value_.__l.__size_ = v24;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v36[1]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v35, (uint64_t)v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)&v34);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = &v35;
  }
  else {
    std::string::size_type v25 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v35.__r_.__value_.__l.__size_;
  }
  std::string::append(v27, (const std::string::value_type *)v25, v26);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1C5F56E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  std::string __p = (void *)(v40 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(a10 + 23) < 0) {
    operator delete(*(void **)a10);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
}

void sub_1C5F56F9C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  MEMORY[0x1C8796D70](v1, 0x10A0C40E967F5FALL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataWriter::~DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    *(void *)(v1 + 24) = &unk_1F2119120;
    google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v1 + 32));
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
    MEMORY[0x1C8796D70](v1, 0x10A0C40E967F5FALL);
  }
}

void siri::dialogengine::DialogMetadataWriter::AddSemanticValue(siri::dialogengine::DialogMetadataWriter *this, long long **a2)
{
  siri::dialogengine::DialogMetadataSemanticValue::ToString((siri::dialogengine::DialogMetadataSemanticValue *)a2, &v44);
  uint64_t v4 = std::__tree<std::string>::find<std::string>(*(void *)this, (const void **)&v44.__r_.__value_.__l.__data_);
  uint64_t v5 = *(void *)this;
  if (*(void *)this + 8 == v4)
  {
    unsigned int v6 = *(int **)(v5 + 64);
    if (v6)
    {
      uint64_t v7 = *(int *)(v5 + 56);
      int v8 = *v6;
      if ((int)v7 < *v6)
      {
        *(_DWORD *)(v5 + 56) = v7 + 1;
        std::string::size_type v9 = *(siri::dialogengine::DialogMetadata::SemanticValue **)&v6[2 * v7 + 2];
        goto LABEL_11;
      }
      if (v8 != *(_DWORD *)(v5 + 60))
      {
LABEL_10:
        int *v6 = v8 + 1;
        std::string::size_type v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::SemanticValue>(*(google::protobuf::internal::ArenaImpl **)(v5 + 48));
        uint64_t v10 = *(void *)(v5 + 64);
        uint64_t v11 = *(int *)(v5 + 56);
        *(_DWORD *)(v5 + 56) = v11 + 1;
        *(void *)(v10 + 8 * v11 + 8) = v9;
LABEL_11:
        uint64_t v12 = (std::string *)*((void *)v9 + 6);
        *((_DWORD *)v9 + 4) |= 1u;
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9 + 48, (uint64_t)a2);
        }
        std::string::operator=(v12, (const std::string *)a2);
        long long v13 = (const std::string *)(a2 + 3);
        std::string v14 = (std::string *)*((void *)v9 + 7);
        *((_DWORD *)v9 + 4) |= 2u;
        if (v14 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9 + 56, (uint64_t)v13);
        }
        std::string::operator=(v14, v13);
        unint64_t v15 = a2[6];
        unint64_t v38 = a2[7];
        if (v15 == v38)
        {
LABEL_58:
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)this, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&v44);
          goto LABEL_59;
        }
        while (1)
        {
          if (*((char *)v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v15, *((void *)v15 + 1));
          }
          else
          {
            long long v16 = *v15;
            __p.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
          }
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v42, (const void ***)v15 + 3);
          std::string::size_type v17 = (int *)*((void *)v9 + 5);
          if (!v17) {
            break;
          }
          uint64_t v18 = *((int *)v9 + 8);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *((_DWORD *)v9 + 8) = v18 + 1;
            uint64_t v20 = *(siri::dialogengine::DialogMetadata::DisplayValue **)&v17[2 * v18 + 2];
            goto LABEL_28;
          }
          if (v19 == *((_DWORD *)v9 + 9)) {
            goto LABEL_26;
          }
LABEL_27:
          *std::string::size_type v17 = v19 + 1;
          uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::DisplayValue>(*((google::protobuf::internal::ArenaImpl **)v9 + 3));
          uint64_t v21 = *((void *)v9 + 5);
          uint64_t v22 = *((int *)v9 + 8);
          *((_DWORD *)v9 + 8) = v22 + 1;
          *(void *)(v21 + 8 * v22 + 8) = v20;
LABEL_28:
          long long v23 = (std::string *)*((void *)v20 + 6);
          *((_DWORD *)v20 + 4) |= 1u;
          if (v23 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v20 + 48, (uint64_t)&__p);
          }
          std::string::operator=(v23, &__p);
          std::string::size_type v24 = v42;
          if (v42 != (long long *)v43)
          {
            while (1)
            {
              std::pair<std::string const,std::string>::pair[abi:ne180100](&__str, v24 + 2);
              std::string::size_type v25 = (int *)*((void *)v20 + 5);
              if (!v25) {
                break;
              }
              uint64_t v26 = *((int *)v20 + 8);
              int v27 = *v25;
              if ((int)v26 >= *v25)
              {
                if (v27 == *((_DWORD *)v20 + 9))
                {
LABEL_37:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v20 + 6, v27 + 1);
                  std::string::size_type v25 = (int *)*((void *)v20 + 5);
                  int v27 = *v25;
                }
                *std::string::size_type v25 = v27 + 1;
                long long v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::Constraint>(*((google::protobuf::internal::ArenaImpl **)v20 + 3));
                uint64_t v29 = *((void *)v20 + 5);
                uint64_t v30 = *((int *)v20 + 8);
                *((_DWORD *)v20 + 8) = v30 + 1;
                *(void *)(v29 + 8 * v30 + 8) = v28;
                goto LABEL_39;
              }
              *((_DWORD *)v20 + 8) = v26 + 1;
              long long v28 = *(siri::dialogengine::DialogMetadata::Constraint **)&v25[2 * v26 + 2];
LABEL_39:
              char v31 = (std::string *)*((void *)v28 + 3);
              *((_DWORD *)v28 + 4) |= 1u;
              if (v31 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v28 + 24, (uint64_t)&__str);
              }
              std::string::operator=(v31, &__str);
              std::string v34 = (uint64_t *)*((void *)v28 + 4);
              uint64_t v33 = (uint64_t)v28 + 32;
              long long v32 = (std::string *)v34;
              *(_DWORD *)(v33 - 16) |= 2u;
              if (v34 == &google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v33, (uint64_t)&v40);
              }
              std::string::operator=(v32, &v40);
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v40.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string v35 = (long long *)*((void *)v24 + 1);
              if (v35)
              {
                do
                {
                  unsigned int v36 = v35;
                  std::string v35 = *(long long **)v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  unsigned int v36 = (long long *)*((void *)v24 + 2);
                  BOOL v37 = *(void *)v36 == (void)v24;
                  std::string::size_type v24 = v36;
                }
                while (!v37);
              }
              std::string::size_type v24 = v36;
              if (v36 == (long long *)v43) {
                goto LABEL_55;
              }
            }
            int v27 = *((_DWORD *)v20 + 9);
            goto LABEL_37;
          }
LABEL_55:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v43[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v15 += 3;
          if (v15 == v38) {
            goto LABEL_58;
          }
        }
        int v19 = *((_DWORD *)v9 + 9);
LABEL_26:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v9 + 6, v19 + 1);
        std::string::size_type v17 = (int *)*((void *)v9 + 5);
        int v19 = *v17;
        goto LABEL_27;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(v5 + 60);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 48), v8 + 1);
    unsigned int v6 = *(int **)(v5 + 64);
    int v8 = *v6;
    goto LABEL_10;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 1u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_59:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F574A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 89) < 0) {
    operator delete(*(void **)(v24 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded(uint64_t *this, char a2)
{
  uint64_t v2 = *this;
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(*this + 40) | 1;
  *(unsigned char *)(v2 + 72) = a2;
  return this;
}

void siri::dialogengine::DialogMetadataWriter::ToBytes(siri::dialogengine::DialogMetadataWriter *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 56))
  {
    memset(&__p, 0, sizeof(__p));
    if (google::protobuf::MessageLite::SerializeToString((const char *)(v4 + 24), &__p))
    {
      *a3 = __p;
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while serializing dialog metadata data", v5);
      std::string::basic_string[abi:ne180100]<0>(a3, "");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No dialog metadata", a2);
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1C5F575EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogMetadataWriter::Save(uint64_t *a1, std::string *a2)
{
  uint64_t v3 = *a1;
  if (*(_DWORD *)(*a1 + 56))
  {
    memset(&__p, 0, sizeof(__p));
    if (google::protobuf::MessageLite::SerializeToString((const char *)(v3 + 24), &__p))
    {
      BOOL v4 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v6, 3u);
      if (v7 < 0) {
        operator delete(v6);
      }
      BOOL v4 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  return v4;
}

void sub_1C5F576E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_Table_EmptyCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_EmptyCell_default_instance_ = (uint64_t)&unk_1F2120FD0;
  unk_1EB68F8D0 = 0;
  dword_1EB68F8D8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_EmptyCell_default_instance_, v4);
}

uint64_t SnippetUI::Table_EmptyCell::GetMetadata(SnippetUI::Table_EmptyCell *this)
{
  return qword_1EA3D9620;
}

void InitDefaultsscc_info_Table_SpacerColumnCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_SpacerColumnCell_default_instance_ = (uint64_t)&unk_1F2121210;
  *(void *)algn_1EB68FFF8 = 0;
  dword_1EB690000 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_SpacerColumnCell_default_instance_, v4);
}

uint64_t SnippetUI::Table_SpacerColumnCell::GetMetadata(SnippetUI::Table_SpacerColumnCell *this)
{
  return qword_1EA3D9650;
}

uint64_t SnippetUI::Table_SpacerColumnCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

void SnippetUI::Table_SpacerColumnCell::MergeFrom(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2256);
    BOOL v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F57948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_SpacerColumnCell::MergeFrom(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2271);
    BOOL v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_SpacerColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
}

void sub_1C5F579E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_SpacerColumnCell::CopyFrom(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_SpacerColumnCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  }
  else {
    return a2;
  }
}

google::protobuf::internal *SnippetUI::Table_SpacerColumnCell::_InternalParse(SnippetUI::Table_SpacerColumnCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v10 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23))) {
      return v10;
    }
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    char v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    char v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      uint64_t v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    uint64_t v10 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    uint64_t v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v7 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Table_SpacerColumnCell::GetCachedSize(SnippetUI::Table_SpacerColumnCell *this)
{
  return *((unsigned int *)this + 4);
}

char *SnippetUI::Table_SpacerColumnCell::ByteSizeLong(SnippetUI::Table_SpacerColumnCell *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  uint64_t v3 = (_DWORD *)((char *)v1 + 8);
  if (v2) {
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  }
  _DWORD *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_SpacerColumnCell::IsInitialized(SnippetUI::Table_SpacerColumnCell *this)
{
  return 1;
}

void SnippetUI::Table_SpacerColumnCell::Clear(SnippetUI::Table_SpacerColumnCell *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::Table_SpacerColumnCell::New(SnippetUI::Table_SpacerColumnCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(a2);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_SpacerColumnCell>);
  }
  void *result = &unk_1F2121210;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_SpacerColumnCell>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *SnippetUI::Table_SpacerColumnCell::New(SnippetUI::Table_SpacerColumnCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
}

void SnippetUI::Table_SpacerColumnCell::~Table_SpacerColumnCell(SnippetUI::Table_SpacerColumnCell *this)
{
  *(void *)this = &unk_1F2121210;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2121210;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F2121210;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_HeaderCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_HeaderCell::Table_HeaderCell((SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_HeaderCell_default_instance_, v4);
  qword_1EB68FA38 = (uint64_t)&SnippetUI::_Table_Content_default_instance_;
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::Table_HeaderCell(SnippetUI::Table_HeaderCell *this)
{
  *(void *)this = &unk_1F2121090;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_Table_HeaderCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_HeaderCell_Table_2eproto);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_1C5F57DD0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_HeaderCell::GetMetadata(SnippetUI::Table_HeaderCell *this)
{
  return qword_1EA3D9630;
}

uint64_t SnippetUI::Table_HeaderCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::Table_HeaderCell::MergeFrom(SnippetUI::Table_HeaderCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1782);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_HeaderCell::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F57EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_HeaderCell::MergeFrom(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1797);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_HeaderCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    char v6 = (const SnippetUI::Table_Content *)*((void *)a2 + 2);
    if (v6)
    {
      char v7 = (SnippetUI::Table_Content *)*((void *)this + 2);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
        *((void *)this + 2) = v7;
        char v6 = (const SnippetUI::Table_Content *)*((void *)a2 + 2);
      }
      if (v6) {
        int v8 = v6;
      }
      else {
        int v8 = (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_;
      }
      SnippetUI::Table_Content::MergeFrom(v7, v8);
    }
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    *((_DWORD *)this + 6) = v9;
  }
  int v10 = *((_DWORD *)a2 + 7);
  if (v10) {
    *((_DWORD *)this + 7) = v10;
  }
}

void sub_1C5F57FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Table_Content *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_Content *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Content>);
  }
  SnippetUI::Table_Content::Table_Content(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F58088(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Content::MergeFrom(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1367);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Content *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    char v6 = (const SnippetUI::OptionalInt *)*((void *)a2 + 2);
    if (v6)
    {
      char v7 = (SnippetUI::OptionalInt *)*((void *)this + 2);
      if (!v7)
      {
        char v7 = (SnippetUI::OptionalInt *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(0);
        *((void *)this + 2) = v7;
        char v6 = (const SnippetUI::OptionalInt *)*((void *)a2 + 2);
      }
      if (v6) {
        int v8 = v6;
      }
      else {
        int v8 = (const SnippetUI::OptionalInt *)&SnippetUI::_OptionalInt_default_instance_;
      }
      SnippetUI::OptionalInt::MergeFrom(v7, v8);
    }
  }
  int v9 = *((_DWORD *)a2 + 9);
  if (v9 == 3)
  {
    if (*((_DWORD *)this + 9) == 3)
    {
      char v11 = (int **)*((void *)this + 3);
    }
    else
    {
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      char v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
      *((void *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) != 3)
      {
        std::string v14 = (int **)&SnippetUI::_VisualProperty_default_instance_;
        goto LABEL_31;
      }
    }
    std::string v14 = (int **)*((void *)a2 + 3);
LABEL_31:
    SnippetUI::VisualProperty::MergeFrom(v11, v14);
    return;
  }
  if (v9 != 2)
  {
    if (v9 != 1) {
      return;
    }
    if (*((_DWORD *)this + 9) == 1)
    {
      int v10 = (SnippetUI::Table_EmptyCell *)*((void *)this + 3);
    }
    else
    {
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      int v10 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
      *((void *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        long long v13 = (const SnippetUI::Table_EmptyCell *)&SnippetUI::_Table_EmptyCell_default_instance_;
        goto LABEL_29;
      }
    }
    long long v13 = (const SnippetUI::Table_EmptyCell *)*((void *)a2 + 3);
LABEL_29:
    SnippetUI::Table_EmptyCell::MergeFrom(v10, v13);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    uint64_t v12 = (int **)*((void *)this + 3);
  }
  else
  {
    SnippetUI::Table_Content::clear_value((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
    *((void *)this + 3) = v12;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      unint64_t v15 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      goto LABEL_33;
    }
  }
  unint64_t v15 = (int **)*((void *)a2 + 3);
LABEL_33:
  SnippetUI::MultilineTextProperty::MergeFrom(v12, v15);
}

void sub_1C5F58284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Content::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 3 || v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_EmptyCell>);
  }
  void *result = &unk_1F2120FD0;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

void SnippetUI::Table_EmptyCell::MergeFrom(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1548);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_EmptyCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
}

void sub_1C5F58428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_EmptyCell>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_Content *SnippetUI::Table_Content::Table_Content(SnippetUI::Table_Content *this)
{
  *(void *)this = &unk_1F2120F10;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_Table_Content_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Content_Table_2eproto);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1C5F584D8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Content>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::Table_Content::GetMetadata(SnippetUI::Table_Content *this)
{
  return qword_1EA3D9610;
}

uint64_t SnippetUI::Table_Content::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::Table_Content::MergeFrom(SnippetUI::Table_Content *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1352);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_Content::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F58618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Content::CopyFrom(SnippetUI::Table_Content *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Content::Clear(this);
    SnippetUI::Table_Content::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Content::Clear(SnippetUI::Table_Content *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  SnippetUI::Table_Content::clear_value((uint64_t)this);
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::Table_Content *)((char *)this + 8);
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Content *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v7 = *((void *)this + 3);
    *a2 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 16);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v9 = v8 >> 7;
      if (v8 >> 14)
      {
        int v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          char v11 = v10;
          *v10++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        a2 = (char *)(v11 + 2);
        unsigned __int8 *v10 = v12;
      }
      else
      {
        a2[2] = v9;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v8;
      a2 += 2;
    }
    uint64_t v14 = *(void *)(v7 + 8);
    if (v14) {
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
    }
    int v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    unint64_t v15 = (SnippetUI::MultilineTextProperty *)*((void *)this + 3);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 15);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        int v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        std::string::size_type v17 = v20 + 2;
        unsigned __int8 *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        std::string::size_type v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      std::string::size_type v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    int v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    long long v23 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    *a2 = 26;
    unsigned int v24 = *((_DWORD *)v23 + 15);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      unsigned int v26 = v24 >> 7;
      if (v24 >> 14)
      {
        int v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          long long v28 = v27;
          *v27++ = v26 | 0x80;
          unsigned int v29 = v26 >> 7;
          unsigned int v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        std::string::size_type v25 = v28 + 2;
        unsigned __int8 *v27 = v29;
      }
      else
      {
        a2[2] = v26;
        std::string::size_type v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      std::string::size_type v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
  }
  if (this != (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    char v31 = (SnippetUI::OptionalInt *)*((void *)this + 2);
    if (v31)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        char v31 = (SnippetUI::OptionalInt *)*((void *)this + 2);
      }
      *a2 = 34;
      unsigned int v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        a2[1] = v32 | 0x80;
        unsigned int v34 = v32 >> 7;
        if (v32 >> 14)
        {
          std::string v35 = (unsigned __int8 *)(a2 + 2);
          do
          {
            unsigned int v36 = v35;
            *v35++ = v34 | 0x80;
            unsigned int v37 = v34 >> 7;
            unsigned int v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          uint64_t v33 = v36 + 2;
          *std::string v35 = v37;
        }
        else
        {
          a2[2] = v34;
          uint64_t v33 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v32;
        uint64_t v33 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::OptionalInt::InternalSerializeWithCachedSizesToArray(v31, (char *)v33, a3, a4);
    }
  }
  uint64_t v39 = *((void *)this + 1);
  if ((v39 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Table_Content::_InternalParse(SnippetUI::Table_Content *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v32 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23))) {
      return v32;
    }
    TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
    unsigned int v8 = (char *)*(unsigned __int8 *)v32;
    if ((*(char *)v32 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
LABEL_6:
      unsigned int v32 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v8);
    unsigned int v32 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_22;
        }
        if (*((_DWORD *)this + 9) == 1)
        {
          unsigned int v9 = (SnippetUI::Table_EmptyCell *)*((void *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 1;
          unsigned int v9 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
          *((void *)this + 3) = v9;
          TagFallback = v32;
        }
        unsigned int v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_50;
          }
          unsigned int v18 = SizeFallback;
          unsigned int v17 = v27;
        }
        else
        {
          unsigned int v18 = (char *)TagFallback + 1;
        }
        int v28 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        int v29 = *((_DWORD *)a3 + 22);
        BOOL v23 = __OFSUB__(v29--, 1);
        *((_DWORD *)a3 + 22) = v29;
        if (v29 < 0 != v23) {
          goto LABEL_50;
        }
        int v24 = v28;
        std::string::size_type v25 = SnippetUI::Table_EmptyCell::_InternalParse(v9, (google::protobuf::internal *)v18, a3);
        if (!v25) {
          goto LABEL_50;
        }
        goto LABEL_47;
      case 2u:
        if (v8 != 18) {
          goto LABEL_22;
        }
        if (*((_DWORD *)this + 9) == 2)
        {
          int v10 = (SnippetUI::MultilineTextProperty *)*((void *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 2;
          int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((void *)this + 3) = v10;
          TagFallback = v32;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v10, TagFallback);
        goto LABEL_36;
      case 3u:
        if (v8 != 26) {
          goto LABEL_22;
        }
        if (*((_DWORD *)this + 9) == 3)
        {
          char v11 = (SnippetUI::VisualProperty *)*((void *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 3;
          char v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 3) = v11;
          TagFallback = v32;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v11, TagFallback);
        goto LABEL_36;
      case 4u:
        if (v8 != 34) {
          goto LABEL_22;
        }
        unsigned int v12 = (SnippetUI::OptionalInt *)*((void *)this + 2);
        if (!v12)
        {
          unsigned int v12 = (SnippetUI::OptionalInt *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(0);
          *((void *)this + 2) = v12;
          TagFallback = v32;
        }
        unsigned int v13 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          int v19 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v19) {
            goto LABEL_50;
          }
          uint64_t v14 = v19;
          unsigned int v13 = v20;
        }
        else
        {
          uint64_t v14 = (char *)TagFallback + 1;
        }
        int v21 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
        int v22 = *((_DWORD *)a3 + 22);
        BOOL v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a3 + 22) = v22;
        if (v22 < 0 != v23) {
          goto LABEL_50;
        }
        int v24 = v21;
        std::string::size_type v25 = SnippetUI::OptionalInt::_InternalParse(v12, (google::protobuf::internal *)v14, a3);
        if (!v25) {
          goto LABEL_50;
        }
LABEL_47:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_50;
        }
        int v30 = *((_DWORD *)a3 + 7) + v24;
        *((_DWORD *)a3 + 7) = v30;
        *(void *)a3 = *((void *)a3 + 1) + (v30 & (v30 >> 31));
        unsigned int v32 = v25;
        continue;
      default:
LABEL_22:
        if (v8) {
          BOOL v15 = (v8 & 7) == 4;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          *((_DWORD *)a3 + 20) = v8 - 1;
          return TagFallback;
        }
        unsigned int v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_36:
        unsigned int v32 = (google::protobuf::internal *)v16;
        if (v16) {
          continue;
        }
LABEL_50:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

google::protobuf::internal *SnippetUI::Table_EmptyCell::_InternalParse(SnippetUI::Table_EmptyCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v10 = a2;
  char v4 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23))) {
      return v10;
    }
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    uint64_t v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      int v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    int v10 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    int v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v7 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Table_Content::GetCachedSize(SnippetUI::Table_Content *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::Table_Content::ByteSizeLong(SnippetUI::Table_Content *this)
{
  if (this == (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_
    || (uint64_t v2 = (SnippetUI::OptionalInt *)*((void *)this + 2)) == 0)
  {
    char v4 = 0;
  }
  else
  {
    uint64_t v3 = SnippetUI::OptionalInt::ByteSizeLong(v2);
    char v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  int v5 = *((_DWORD *)this + 9);
  switch(v5)
  {
    case 3:
      int v10 = SnippetUI::VisualProperty::ByteSizeLong(*((SnippetUI::VisualProperty **)this + 3));
      break;
    case 2:
      int v10 = SnippetUI::MultilineTextProperty::ByteSizeLong(*((SnippetUI::MultilineTextProperty **)this + 3));
      break;
    case 1:
      uint64_t v6 = *((void *)this + 3);
      char v8 = *(unsigned char *)(v6 + 8);
      uint64_t v7 = (google::protobuf::UnknownFieldSet *)(v6 + 8);
      unsigned int v9 = (_DWORD *)((char *)v7 + 8);
      if (v8)
      {
        int v10 = google::protobuf::internal::ComputeUnknownFieldsSize(v7, 0, v9);
      }
      else
      {
        int v10 = 0;
        _DWORD *v9 = 0;
      }
      break;
    default:
      goto LABEL_13;
  }
  char v4 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v4
                                                     + 1
                                                     + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_13:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Content *)((char *)this + 8), v4, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::Table_Content::IsInitialized(SnippetUI::Table_Content *this)
{
  return 1;
}

SnippetUI::Table_Content *SnippetUI::Table_Content::New(SnippetUI::Table_Content *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(a2);
}

SnippetUI::Table_Content *SnippetUI::Table_Content::New(SnippetUI::Table_Content *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
}

void SnippetUI::Table_Content::~Table_Content(SnippetUI::Table_Content *this)
{
  SnippetUI::Table_Content::~Table_Content(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2120F10;
  if (this != (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  if (*((_DWORD *)this + 9)) {
    SnippetUI::Table_Content::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::Table_HeaderCell::CopyFrom(SnippetUI::Table_HeaderCell *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_HeaderCell::Clear(this);
    SnippetUI::Table_HeaderCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_HeaderCell::Clear(SnippetUI::Table_HeaderCell *this)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v5 = *((unsigned char *)this + 8);
  char v4 = (SnippetUI::Table_HeaderCell *)((char *)this + 8);
  void *v3 = 0;
  v3[1] = 0;
  if (v5)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_HeaderCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_HeaderCell *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (this != (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    uint64_t v6 = (SnippetUI::Table_Content *)*((void *)this + 2);
    if (v6)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        uint64_t v6 = (SnippetUI::Table_Content *)*((void *)this + 2);
      }
      *a2 = 10;
      unsigned int v7 = *((_DWORD *)v6 + 8);
      if (v7 > 0x7F)
      {
        a2[1] = v7 | 0x80;
        unsigned int v9 = v7 >> 7;
        if (v7 >> 14)
        {
          int v10 = (unsigned __int8 *)(a2 + 2);
          do
          {
            char v11 = v10;
            *v10++ = v9 | 0x80;
            unsigned int v12 = v9 >> 7;
            unsigned int v13 = v9 >> 14;
            v9 >>= 7;
          }
          while (v13);
          char v8 = v11 + 2;
          unsigned __int8 *v10 = v12;
        }
        else
        {
          a2[2] = v9;
          char v8 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v7;
        char v8 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(v6, (char *)v8, a3, a4);
    }
  }
  unsigned int v14 = *((_DWORD *)this + 6);
  if (v14)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v14 = *((_DWORD *)this + 6);
    }
    *a2 = 16;
    if (v14 > 0x7F)
    {
      a2[1] = v14 | 0x80;
      unint64_t v15 = (unint64_t)(int)v14 >> 7;
      if (v14 >> 14)
      {
        unsigned int v16 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unsigned int v17 = v16;
          *v16++ = v15 | 0x80;
          unint64_t v18 = v15 >> 7;
          unint64_t v19 = v15 >> 14;
          v15 >>= 7;
        }
        while (v19);
        a2 = (char *)(v17 + 2);
        *unsigned int v16 = v18;
      }
      else
      {
        a2[2] = v15;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v14;
      a2 += 2;
    }
  }
  unsigned int v20 = *((_DWORD *)this + 7);
  if (v20)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v20 = *((_DWORD *)this + 7);
    }
    *a2 = 24;
    if (v20 > 0x7F)
    {
      a2[1] = v20 | 0x80;
      unint64_t v21 = (unint64_t)(int)v20 >> 7;
      if (v20 >> 14)
      {
        int v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          BOOL v23 = v22;
          *v22++ = v21 | 0x80;
          unint64_t v24 = v21 >> 7;
          unint64_t v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        a2 = (char *)(v23 + 2);
        *int v22 = v24;
      }
      else
      {
        a2[2] = v21;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v20;
      a2 += 2;
    }
  }
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Table_HeaderCell::_InternalParse(SnippetUI::Table_HeaderCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  BOOL v23 = a2;
  char v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23; {
        TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
        }
        char v8 = (char *)*(unsigned __int8 *)v23;
        if ((*(char *)v23 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        char v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
          BOOL v23 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v8);
        BOOL v23 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        unsigned int v9 = v8 >> 3;
        if (v8 >> 3 != 3) {
          break;
        }
        if (v8 != 24) {
          goto LABEL_13;
        }
        unsigned int v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v14) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v15 = *(char *)v13;
        unint64_t v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          BOOL v23 = v13;
          goto LABEL_23;
        }
        BOOL v23 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
        if (!v23) {
          return 0;
        }
LABEL_23:
        *((_DWORD *)this + 7) = v14;
      }
      if (v9 != 2) {
        break;
      }
      if (v8 != 16) {
        goto LABEL_13;
      }
      unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(vgoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = *(unsigned __int8 *)TagFallback;
      if ((v16 & 0x80) != 0)
      {
        int v18 = *(char *)v17;
        unint64_t v16 = v16 + (v18 << 7) - 128;
        if ((v18 & 0x80000000) == 0)
        {
          unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
          goto LABEL_28;
        }
        unsigned int v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
        BOOL v23 = v20;
        *((_DWORD *)this + 6) = v21;
        if (!v20) {
          return 0;
        }
      }
      else
      {
LABEL_28:
        BOOL v23 = v17;
        *((_DWORD *)this + 6) = v16;
      }
    }
    if (v9 == 1 && v8 == 10)
    {
      unint64_t v19 = (SnippetUI::Table_Content *)*((void *)this + 2);
      if (!v19)
      {
        unint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
        *((void *)this + 2) = v19;
        TagFallback = v23;
      }
      unsigned int v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(a3, v19, TagFallback);
      goto LABEL_32;
    }
LABEL_13:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    unsigned int v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_32:
    BOOL v23 = (google::protobuf::internal *)v12;
    if (!v12) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Table_Content *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unsigned int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    char v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    char v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::Table_Content::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::Table_HeaderCell::GetCachedSize(SnippetUI::Table_HeaderCell *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::Table_HeaderCell::ByteSizeLong(SnippetUI::Table_HeaderCell *this)
{
  if (this == (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_
    || (uint64_t v2 = (SnippetUI::Table_Content *)*((void *)this + 2)) == 0)
  {
    char v4 = 0;
  }
  else
  {
    uint64_t v3 = SnippetUI::Table_Content::ByteSizeLong(v2);
    char v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    char v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6);
  }
  int v7 = *((_DWORD *)this + 7);
  if (v7)
  {
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    char v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v8);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_HeaderCell *)((char *)this + 8), v4, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::Table_HeaderCell::IsInitialized(SnippetUI::Table_HeaderCell *this)
{
  return 1;
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::New(SnippetUI::Table_HeaderCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(a2);
}

SnippetUI::Table_HeaderCell *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_HeaderCell *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_HeaderCell>);
  }
  SnippetUI::Table_HeaderCell::Table_HeaderCell(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5973C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_HeaderCell>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::New(SnippetUI::Table_HeaderCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(0);
}

void SnippetUI::Table_HeaderCell::~Table_HeaderCell(SnippetUI::Table_HeaderCell *this)
{
  SnippetUI::Table_HeaderCell::~Table_HeaderCell(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2121090;
  if (this != (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_FixedColumnSize_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  qword_1EB68FEF0 = 0;
  unk_1EB68FEF8 = 0;
  SnippetUI::_Table_FixedColumnSize_default_instance_ = (uint64_t)&unk_1F2121450;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_FixedColumnSize_default_instance_, v4);
}

uint64_t SnippetUI::Table_FixedColumnSize::GetMetadata(SnippetUI::Table_FixedColumnSize *this)
{
  return qword_1EA3D9680;
}

uint64_t SnippetUI::Table_FixedColumnSize::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void SnippetUI::Table_FixedColumnSize::MergeFrom(SnippetUI::Table_FixedColumnSize *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2926);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F599CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_FixedColumnSize::MergeFrom(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2941);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  float v6 = *((float *)a2 + 4);
  if (v6 != 0.0) {
    *((float *)this + 4) = v6;
  }
}

void sub_1C5F59A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_FixedColumnSize::CopyFrom(SnippetUI::Table_FixedColumnSize *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
    *((_DWORD *)v5 + 2) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_FixedColumnSize::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_FixedColumnSize *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (*((float *)this + 4) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      int v6 = *((_DWORD *)this + 4);
    }
    else
    {
      int v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Table_FixedColumnSize::_InternalParse(SnippetUI::Table_FixedColumnSize *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v11 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v11, *((_DWORD *)a3 + 23))) {
        return v11;
      }
      TagFallback = (char *)v11 + 1;
      uint64_t v8 = (char *)*(unsigned __int8 *)v11;
      if ((*(char *)v11 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      uint64_t v8 = (char *)(v8 + (*TagFallback << 7) - 128);
      if ((*TagFallback & 0x80000000) == 0)
      {
        TagFallback = (char *)v11 + 2;
LABEL_6:
        int v11 = (google::protobuf::internal *)TagFallback;
        goto LABEL_7;
      }
      TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v11, v8);
      int v11 = (google::protobuf::internal *)TagFallback;
      if (!TagFallback) {
        return (google::protobuf::internal *)TagFallback;
      }
LABEL_7:
      if (v8 != 13) {
        break;
      }
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      int v11 = (google::protobuf::internal *)(TagFallback + 4);
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    int v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v11) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

uint64_t SnippetUI::Table_FixedColumnSize::GetCachedSize(SnippetUI::Table_FixedColumnSize *this)
{
  return *((unsigned int *)this + 5);
}

char *SnippetUI::Table_FixedColumnSize::ByteSizeLong(SnippetUI::Table_FixedColumnSize *this)
{
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = 5;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v1, (_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v1;
  return (char *)v1;
}

uint64_t SnippetUI::Table_FixedColumnSize::IsInitialized(SnippetUI::Table_FixedColumnSize *this)
{
  return 1;
}

void SnippetUI::Table_FixedColumnSize::Clear(SnippetUI::Table_FixedColumnSize *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
  *((_DWORD *)v1 + 2) = 0;
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::Table_FixedColumnSize::New(SnippetUI::Table_FixedColumnSize *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(a2);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_FixedColumnSize>);
  }
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F2121450;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_FixedColumnSize>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *SnippetUI::Table_FixedColumnSize::New(SnippetUI::Table_FixedColumnSize *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
}

void SnippetUI::Table_FixedColumnSize::~Table_FixedColumnSize(SnippetUI::Table_FixedColumnSize *this)
{
  *(void *)this = &unk_1F2121450;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2121450;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F2121450;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_ContentColumnCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell((SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_ContentColumnCell_default_instance_, v4);
  qword_1EB690098 = (uint64_t)&SnippetUI::_Table_AutoColumnSize_default_instance_;
  unk_1EB6900A0 = &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this)
{
  *(void *)this = &unk_1F21212D0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_Table_ContentColumnCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_ContentColumnCell_Table_2eproto);
  }
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1C5F59F2C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_ContentColumnCell::GetMetadata(SnippetUI::Table_ContentColumnCell *this)
{
  return qword_1EA3D9660;
}

uint64_t SnippetUI::Table_ContentColumnCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::Table_ContentColumnCell::MergeFrom(SnippetUI::Table_ContentColumnCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2569);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F5A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_ContentColumnCell::MergeFrom(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2584);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 4);
  if (v6) {
    *((_DWORD *)this + 4) = v6;
  }
  int v7 = *((_DWORD *)a2 + 9);
  if (v7 != 2)
  {
    if (v7 != 1) {
      return;
    }
    if (*((_DWORD *)this + 9) == 1)
    {
      uint64_t v8 = (SnippetUI::Table_AutoColumnSize *)*((void *)this + 3);
    }
    else
    {
      SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      uint64_t v8 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
      *((void *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        int v10 = (const SnippetUI::Table_AutoColumnSize *)&SnippetUI::_Table_AutoColumnSize_default_instance_;
        goto LABEL_18;
      }
    }
    int v10 = (const SnippetUI::Table_AutoColumnSize *)*((void *)a2 + 3);
LABEL_18:
    SnippetUI::Table_AutoColumnSize::MergeFrom(v8, v10);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    unsigned int v9 = (SnippetUI::Table_FixedColumnSize *)*((void *)this + 3);
  }
  else
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    unsigned int v9 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
    *((void *)this + 3) = v9;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      int v11 = (const SnippetUI::Table_FixedColumnSize *)&SnippetUI::_Table_FixedColumnSize_default_instance_;
      goto LABEL_20;
    }
  }
  int v11 = (const SnippetUI::Table_FixedColumnSize *)*((void *)a2 + 3);
LABEL_20:
  SnippetUI::Table_FixedColumnSize::MergeFrom(v9, v11);
}

void sub_1C5F5A1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_ContentColumnCell::clear_size(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_AutoColumnSize>);
  }
  void *result = &unk_1F2121390;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

void SnippetUI::Table_AutoColumnSize::MergeFrom(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2761);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_AutoColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
}

void sub_1C5F5A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_AutoColumnSize::GetMetadata(SnippetUI::Table_AutoColumnSize *this)
{
  return qword_1EA3D9670;
}

uint64_t SnippetUI::Table_AutoColumnSize::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

void SnippetUI::Table_AutoColumnSize::MergeFrom(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2746);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F5A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_AutoColumnSize::CopyFrom(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_AutoColumnSize::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  }
  else {
    return a2;
  }
}

google::protobuf::internal *SnippetUI::Table_AutoColumnSize::_InternalParse(SnippetUI::Table_AutoColumnSize *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v10 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23))) {
      return v10;
    }
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    char v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    char v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      int v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    int v10 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    int v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v7 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Table_AutoColumnSize::GetCachedSize(SnippetUI::Table_AutoColumnSize *this)
{
  return *((unsigned int *)this + 4);
}

char *SnippetUI::Table_AutoColumnSize::ByteSizeLong(SnippetUI::Table_AutoColumnSize *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  uint64_t v3 = (_DWORD *)((char *)v1 + 8);
  if (v2) {
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  }
  _DWORD *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_AutoColumnSize::IsInitialized(SnippetUI::Table_AutoColumnSize *this)
{
  return 1;
}

void SnippetUI::Table_AutoColumnSize::Clear(SnippetUI::Table_AutoColumnSize *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::Table_AutoColumnSize::New(SnippetUI::Table_AutoColumnSize *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(a2);
}

void *SnippetUI::Table_AutoColumnSize::New(SnippetUI::Table_AutoColumnSize *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
}

void SnippetUI::Table_AutoColumnSize::~Table_AutoColumnSize(SnippetUI::Table_AutoColumnSize *this)
{
  *(void *)this = &unk_1F2121390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2121390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F2121390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_AutoColumnSize>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void SnippetUI::Table_ContentColumnCell::CopyFrom(SnippetUI::Table_ContentColumnCell *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_ContentColumnCell::Clear(this);
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_ContentColumnCell::Clear(SnippetUI::Table_ContentColumnCell *this)
{
  *((_DWORD *)this + 4) = 0;
  SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Table_ContentColumnCell *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_ContentColumnCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_ContentColumnCell *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v7 = *((void *)this + 3);
    *a2 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 16);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v9 = v8 >> 7;
      if (v8 >> 14)
      {
        int v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v11 = v10;
          *v10++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        a2 = (char *)(v11 + 2);
        unsigned __int8 *v10 = v12;
      }
      else
      {
        a2[2] = v9;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v8;
      a2 += 2;
    }
    uint64_t v14 = *(void *)(v7 + 8);
    if (v14) {
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
    }
    int v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v15 = (SnippetUI::Table_FixedColumnSize *)*((void *)this + 3);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        unint64_t v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unsigned int v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        unsigned int v17 = v20 + 2;
        unsigned __int8 *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        unsigned int v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      unsigned int v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Table_FixedColumnSize::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
  }
  unsigned int v23 = *((_DWORD *)this + 4);
  if (v23)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v23 = *((_DWORD *)this + 4);
    }
    *a2 = 24;
    if (v23 > 0x7F)
    {
      a2[1] = v23 | 0x80;
      unint64_t v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        unint64_t v25 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v26 = v25;
          *v25++ = v24 | 0x80;
          unint64_t v27 = v24 >> 7;
          unint64_t v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (char *)(v26 + 2);
        *unint64_t v25 = v27;
      }
      else
      {
        a2[2] = v24;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v23;
      a2 += 2;
    }
  }
  uint64_t v29 = *((void *)this + 1);
  if ((v29 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Table_ContentColumnCell::_InternalParse(SnippetUI::Table_ContentColumnCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v34 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)))return v34; {
        TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
        }
        unsigned int v8 = (char *)*(unsigned __int8 *)v34;
        if ((*(char *)v34 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
          unsigned int v34 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v8);
        unsigned int v34 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        unsigned int v9 = v8 >> 3;
        if (v8 >> 3 != 3) {
          break;
        }
        if (v8 != 24) {
          goto LABEL_13;
        }
        unsigned int v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_23;
        }
        int v14 = *(char *)v12;
        unint64_t v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          unsigned int v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
          unsigned int v34 = v12;
          goto LABEL_24;
        }
        unsigned int v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
        if (!v34) {
          return 0;
        }
LABEL_24:
        *((_DWORD *)this + 4) = v13;
      }
      if (v9 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_13;
      }
      if (*((_DWORD *)this + 9) == 2)
      {
        int v15 = (SnippetUI::Table_FixedColumnSize *)*((void *)this + 3);
      }
      else
      {
        SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        int v15 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
        *((void *)this + 3) = v15;
        TagFallback = v34;
      }
      unsigned int v17 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        unsigned int v18 = SizeFallback;
        unsigned int v17 = v22;
      }
      else
      {
        unsigned int v18 = (char *)TagFallback + 1;
      }
      int v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
      int v24 = *((_DWORD *)a3 + 22);
      BOOL v25 = __OFSUB__(v24--, 1);
      *((_DWORD *)a3 + 22) = v24;
      if (v24 < 0 != v25) {
        return 0;
      }
      int v26 = v23;
      unint64_t v27 = SnippetUI::Table_FixedColumnSize::_InternalParse(v15, (google::protobuf::internal *)v18, a3);
      if (!v27) {
        return 0;
      }
LABEL_47:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v32 = *((_DWORD *)a3 + 7) + v26;
      *((_DWORD *)a3 + 7) = v32;
      *(void *)a3 = *((void *)a3 + 1) + (v32 & (v32 >> 31));
      unsigned int v34 = v27;
    }
    if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 9) == 1)
      {
        unsigned int v16 = (SnippetUI::Table_AutoColumnSize *)*((void *)this + 3);
      }
      else
      {
        SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        unsigned int v16 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
        *((void *)this + 3) = v16;
        TagFallback = v34;
      }
      unsigned int v19 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        unint64_t v28 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v28) {
          return 0;
        }
        unsigned int v20 = v28;
        unsigned int v19 = v29;
      }
      else
      {
        unsigned int v20 = (char *)TagFallback + 1;
      }
      int v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
      int v31 = *((_DWORD *)a3 + 22);
      BOOL v25 = __OFSUB__(v31--, 1);
      *((_DWORD *)a3 + 22) = v31;
      if (v31 < 0 != v25) {
        return 0;
      }
      int v26 = v30;
      unint64_t v27 = SnippetUI::Table_AutoColumnSize::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
      if (!v27) {
        return 0;
      }
      goto LABEL_47;
    }
LABEL_13:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    unsigned int v34 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v34) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Table_ContentColumnCell::GetCachedSize(SnippetUI::Table_ContentColumnCell *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::Table_ContentColumnCell::ByteSizeLong(SnippetUI::Table_ContentColumnCell *this)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    if (v2 < 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = *((_DWORD *)this + 9);
  if (v4 == 2)
  {
    unsigned int v9 = SnippetUI::Table_FixedColumnSize::ByteSizeLong(*((SnippetUI::Table_FixedColumnSize **)this + 3));
  }
  else
  {
    if (v4 != 1) {
      goto LABEL_12;
    }
    uint64_t v5 = *((void *)this + 3);
    char v7 = *(unsigned char *)(v5 + 8);
    int v6 = (google::protobuf::UnknownFieldSet *)(v5 + 8);
    unsigned int v8 = (_DWORD *)((char *)v6 + 8);
    if (v7)
    {
      unsigned int v9 = google::protobuf::internal::ComputeUnknownFieldsSize(v6, 0, v8);
    }
    else
    {
      unsigned int v9 = 0;
      _DWORD *v8 = 0;
    }
  }
  v3 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
LABEL_12:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v3, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v3;
    return (char *)v3;
  }
}

uint64_t SnippetUI::Table_ContentColumnCell::IsInitialized(SnippetUI::Table_ContentColumnCell *this)
{
  return 1;
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::New(SnippetUI::Table_ContentColumnCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(a2);
}

SnippetUI::Table_ContentColumnCell *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_ContentColumnCell *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_ContentColumnCell>);
  }
  SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5AE2C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E7D3C9D8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_ContentColumnCell>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::New(SnippetUI::Table_ContentColumnCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
}

void SnippetUI::Table_ContentColumnCell::~Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this)
{
  SnippetUI::Table_ContentColumnCell::~Table_ContentColumnCell(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F21212D0;
  if (*((_DWORD *)this + 9)) {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_AutoColumnSize_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_AutoColumnSize_default_instance_ = (uint64_t)&unk_1F2121390;
  *(void *)algn_1EB68FEB8 = 0;
  dword_1EB68FEC0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_AutoColumnSize_default_instance_, v4);
}

uint64_t SnippetUI::Table_EmptyCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

void SnippetUI::Table_EmptyCell::MergeFrom(SnippetUI::Table_EmptyCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1533);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_EmptyCell::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F5B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_EmptyCell::CopyFrom(SnippetUI::Table_EmptyCell *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_EmptyCell::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_EmptyCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_EmptyCell *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  }
  else {
    return a2;
  }
}

uint64_t SnippetUI::Table_EmptyCell::GetCachedSize(SnippetUI::Table_EmptyCell *this)
{
  return *((unsigned int *)this + 4);
}

char *SnippetUI::Table_EmptyCell::ByteSizeLong(SnippetUI::Table_EmptyCell *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  uint64_t v3 = (_DWORD *)((char *)v1 + 8);
  if (v2) {
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  }
  _DWORD *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_EmptyCell::IsInitialized(SnippetUI::Table_EmptyCell *this)
{
  return 1;
}

void SnippetUI::Table_EmptyCell::Clear(SnippetUI::Table_EmptyCell *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::Table_EmptyCell::New(SnippetUI::Table_EmptyCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(a2);
}

void *SnippetUI::Table_EmptyCell::New(SnippetUI::Table_EmptyCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
}

void SnippetUI::Table_EmptyCell::~Table_EmptyCell(SnippetUI::Table_EmptyCell *this)
{
  *(void *)this = &unk_1F2120FD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2120FD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F2120FD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_Content_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Content::Table_Content((SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Content_default_instance_, v4);
  qword_1EB68F678 = (uint64_t)&SnippetUI::_Table_EmptyCell_default_instance_;
  unk_1EB68F680 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB68F688 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F660 = (uint64_t)&SnippetUI::_OptionalInt_default_instance_;
}

void InitDefaultsscc_info_Table_Row_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Row::Table_Row((SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Row_default_instance_, v4);
  qword_1EB68F458 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Table_Row *SnippetUI::Table_Row::Table_Row(SnippetUI::Table_Row *this)
{
  *(void *)this = &unk_1F2120E50;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (atomic_load_explicit(scc_info_Table_Row_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Row_Table_2eproto);
  }
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C5F5B36C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Row::GetMetadata(SnippetUI::Table_Row *this)
{
  return qword_1EA3D9600;
}

uint64_t SnippetUI::Table_Row::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

void SnippetUI::Table_Row::MergeFrom(SnippetUI::Table_Row *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 940);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_Row::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F5B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Row::MergeFrom(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 955);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Row *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  uint64_t v6 = *((void *)a2 + 8);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 8);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, v6);
    }
    std::string::operator=(*((std::string **)this + 8), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 9);
    if (v8)
    {
      unsigned int v9 = (int **)*((void *)this + 9);
      if (!v9)
      {
        unsigned int v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 9) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 9);
      }
      if (v8) {
        int v10 = v8;
      }
      else {
        int v10 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v9, v10);
    }
  }
}

void sub_1C5F5B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = (SnippetUI::Table_Content **)(v6 + 8);
      int v14 = (SnippetUI::Table_Content **)v7;
      do
      {
        unsigned int v16 = *v13++;
        int v15 = v16;
        unsigned int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unsigned int v21 = (SnippetUI::Table_Content **)((char *)v8 + v20);
      unsigned int v22 = (SnippetUI::Table_Content **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      *int v26 = v25;
    }
  }
}

void sub_1C5F5B750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(SnippetUI::Table_Content *a1, SnippetUI::Table_Content *this)
{
}

void SnippetUI::Table_Row::CopyFrom(SnippetUI::Table_Row *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Row::Clear(this);
    SnippetUI::Table_Row::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Row::Clear(SnippetUI::Table_Row *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (SnippetUI::Table_Content **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::Table_Content::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40);
  uint64_t v6 = *((void *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  uint64_t v7 = *((void *)this + 9);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = *((unsigned char *)this + 8);
  unsigned int v8 = (SnippetUI::Table_Row *)((char *)this + 8);
  *((void *)v8 + 8) = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
  }
}

void sub_1C5F5B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Row::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Row *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        char v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::Table_Content **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 8);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          int v15 = (char *)a2 + 2;
          do
          {
            unsigned int v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          unint64_t v13 = v16 + 2;
          *int v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          unint64_t v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        unint64_t v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v9 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    int v19 = (SnippetUI::ActionProperty *)*((void *)this + 9);
    if (v19)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        int v19 = (SnippetUI::ActionProperty *)*((void *)this + 9);
      }
      *(unsigned char *)a2 = 18;
      unsigned int v20 = *((_DWORD *)v19 + 12);
      if (v20 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v20 | 0x80;
        unsigned int v22 = v20 >> 7;
        if (v20 >> 14)
        {
          int v23 = (char *)a2 + 2;
          do
          {
            int v24 = v23;
            *v23++ = v22 | 0x80;
            unsigned int v25 = v22 >> 7;
            unsigned int v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          unsigned int v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          *int v23 = v25;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v22;
          unsigned int v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v20;
        unsigned int v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
    }
  }
  int v27 = *((_DWORD *)this + 12);
  if (v27)
  {
    for (int i = 0; i != v27; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      unsigned int v29 = (SnippetUI::BackgroundElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40, i);
      *(unsigned char *)a2 = 26;
      unsigned int v31 = *((_DWORD *)v29 + 13);
      if (v31 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v31 | 0x80;
        unsigned int v33 = v31 >> 7;
        if (v31 >> 14)
        {
          unsigned int v34 = (char *)a2 + 2;
          do
          {
            std::string v35 = v34;
            *v34++ = v33 | 0x80;
            unsigned int v36 = v33 >> 7;
            unsigned int v37 = v33 >> 14;
            v33 >>= 7;
          }
          while (v37);
          int v32 = (google::protobuf::UnknownFieldSet *)(v35 + 2);
          *unsigned int v34 = v36;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v33;
          int v32 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v31;
        int v32 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(v29, v32, a3, v30);
    }
  }
  unsigned int v38 = (google::protobuf::internal *)*((void *)this + 8);
  if (*((char *)v38 + 23) < 0)
  {
    uint64_t v39 = (const char *)*((void *)v38 + 1);
    if (!v39) {
      goto LABEL_49;
    }
    unsigned int v38 = *(google::protobuf::internal **)v38;
    goto LABEL_48;
  }
  uint64_t v39 = (const char *)*((unsigned __int8 *)v38 + 23);
  if (*((unsigned char *)v38 + 23))
  {
LABEL_48:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (google::protobuf::internal *)"SnippetUI.Table.Row.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 8), (char *)a2);
  }
LABEL_49:
  uint64_t v40 = *((void *)this + 1);
  if ((v40 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C5F5BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Table_Row::_InternalParse(SnippetUI::Table_Row *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v32 = a2;
  int v5 = (std::string **)((char *)this + 64);
  uint64_t v6 = (unsigned int *)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 16);
  int v8 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      int v11 = (char *)*(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v11);
          int v32 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10) {
                goto LABEL_42;
              }
              unsigned int v12 = (char *)TagFallback - 1;
              while (1)
              {
                unint64_t v13 = (google::protobuf::internal *)(v12 + 1);
                int v32 = (google::protobuf::internal *)(v12 + 1);
                unsigned int v14 = (int *)*((void *)this + 4);
                if (!v14) {
                  break;
                }
                uint64_t v15 = *((int *)this + 6);
                int v16 = *v14;
                if ((int)v15 >= *v14)
                {
                  if (v16 == *((_DWORD *)this + 7))
                  {
LABEL_15:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                    unsigned int v14 = (int *)*((void *)this + 4);
                    int v16 = *v14;
                  }
                  *unsigned int v14 = v16 + 1;
                  unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 2));
                  uint64_t v18 = *((void *)this + 4);
                  uint64_t v19 = *((int *)this + 6);
                  *((_DWORD *)this + 6) = v19 + 1;
                  *(void *)(v18 + 8 * v19 + 8) = v17;
                  unint64_t v13 = v32;
                  goto LABEL_17;
                }
                *((_DWORD *)this + 6) = v15 + 1;
                unsigned int v17 = *(SnippetUI::Table_Content **)&v14[2 * v15 + 2];
LABEL_17:
                unsigned int v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(a3, v17, v13);
                int v32 = (google::protobuf::internal *)v12;
                if (!v12) {
                  return 0;
                }
                if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
                  goto LABEL_2;
                }
              }
              int v16 = *((_DWORD *)this + 7);
              goto LABEL_15;
            case 2u:
              if (v11 != 18) {
                goto LABEL_42;
              }
              unsigned int v20 = (SnippetUI::ActionProperty *)*((void *)this + 9);
              if (!v20)
              {
                unsigned int v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((void *)this + 9) = v20;
                TagFallback = v32;
              }
              unsigned int v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v20, TagFallback);
              goto LABEL_47;
            case 3u:
              if (v11 != 26) {
                goto LABEL_42;
              }
              unsigned int v22 = (char *)TagFallback - 1;
              break;
            case 4u:
              if (v11 != 34) {
                goto LABEL_42;
              }
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              unsigned int v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Table.Row.component_name");
              goto LABEL_47;
            default:
LABEL_42:
              if (v11) {
                BOOL v30 = (v11 & 7) == 4;
              }
              else {
                BOOL v30 = 1;
              }
              if (v30)
              {
                *((_DWORD *)a3 + 20) = v11 - 1;
                return TagFallback;
              }
              unsigned int v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_47:
              int v32 = (google::protobuf::internal *)v21;
              if (!v21) {
                return 0;
              }
              continue;
          }
          while (1)
          {
            int v23 = (google::protobuf::internal *)(v22 + 1);
            int v32 = (google::protobuf::internal *)(v22 + 1);
            int v24 = (int *)*((void *)this + 7);
            if (!v24) {
              break;
            }
            uint64_t v25 = *((int *)this + 12);
            int v26 = *v24;
            if ((int)v25 >= *v24)
            {
              if (v26 == *((_DWORD *)this + 13))
              {
LABEL_32:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v26 + 1);
                int v24 = (int *)*((void *)this + 7);
                int v26 = *v24;
              }
              *int v24 = v26 + 1;
              int v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 5));
              uint64_t v28 = *((void *)this + 7);
              uint64_t v29 = *((int *)this + 12);
              *((_DWORD *)this + 12) = v29 + 1;
              *(void *)(v28 + 8 * v29 + 8) = v27;
              int v23 = v32;
              goto LABEL_34;
            }
            *((_DWORD *)this + 12) = v25 + 1;
            int v27 = *(SnippetUI::BackgroundElement **)&v24[2 * v25 + 2];
LABEL_34:
            unsigned int v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(a3, v27, v23);
            int v32 = (google::protobuf::internal *)v22;
            if (!v22) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v22 || *v22 != 26) {
              goto LABEL_2;
            }
          }
          int v26 = *((_DWORD *)this + 13);
          goto LABEL_32;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      int v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

uint64_t SnippetUI::Table_Row::GetCachedSize(SnippetUI::Table_Row *this)
{
  return *((unsigned int *)this + 20);
}

char *SnippetUI::Table_Row::ByteSizeLong(SnippetUI::Table_Row *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::Table_Content **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::Table_Content::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((int *)this + 12);
  char v9 = (const google::protobuf::UnknownFieldSet *)(v2 + v8);
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    int v11 = (SnippetUI::BackgroundElement **)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      unint64_t v13 = *v11++;
      unsigned int v14 = SnippetUI::BackgroundElement::ByteSizeLong(v13);
      char v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                     + (void)v14
                                                     + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6));
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *((void *)this + 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  char v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_20:
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    uint64_t v18 = (SnippetUI::ActionProperty *)*((void *)this + 9);
    if (v18)
    {
      uint64_t v19 = SnippetUI::ActionProperty::ByteSizeLong(v18);
      char v9 = (const google::protobuf::UnknownFieldSet *)&v19[((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6)
                                                         + 1
                                                         + (void)v9];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Row *)((char *)this + 8), v9, (_DWORD *)this + 20);
  }
  else
  {
    *((_DWORD *)this + 20) = v9;
    return (char *)v9;
  }
}

uint64_t SnippetUI::Table_Row::IsInitialized(SnippetUI::Table_Row *this)
{
  return 1;
}

SnippetUI::Table_Row *SnippetUI::Table_Row::New(SnippetUI::Table_Row *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(a2);
}

SnippetUI::Table_Row *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_Row *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Row>);
  }
  SnippetUI::Table_Row::Table_Row(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5C26C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40B9C9D170);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Row>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_Row *SnippetUI::Table_Row::New(SnippetUI::Table_Row *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(0);
}

void SnippetUI::Table_Row::~Table_Row(SnippetUI::Table_Row *this)
{
  SnippetUI::Table_Row::~Table_Row(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;

  *(void *)this = &unk_1F2120E50;
  uint64_t v2 = *((void *)this + 8);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    uint64_t v4 = *((void *)this + 9);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Row *)((char *)this + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Row *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_Header_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Header::Table_Header((SnippetUI::Table_Header *)&SnippetUI::_Table_Header_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Header_default_instance_, v4);
}

SnippetUI::Table_Header *SnippetUI::Table_Header::Table_Header(SnippetUI::Table_Header *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2120D90;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_Table_Header_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Header_Table_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F5C4C0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Header::GetMetadata(SnippetUI::Table_Header *this)
{
  return file_level_metadata_Table_2eproto;
}

uint64_t SnippetUI::Table_Header::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::Table_Header::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 634);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_Header::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F5C5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Header::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 649);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  uint64_t v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  char v9 = (std::string *)this[5];
  uint64_t v8 = (char *)(this + 5);
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C5F5C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = (SnippetUI::Table_HeaderCell **)(v6 + 8);
      unsigned int v14 = (SnippetUI::Table_HeaderCell **)v7;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unsigned int v21 = (SnippetUI::Table_HeaderCell **)((char *)v8 + v20);
      unsigned int v22 = (SnippetUI::Table_HeaderCell **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      *int v26 = v25;
    }
  }
}

void sub_1C5F5C848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(SnippetUI::Table_HeaderCell *a1, SnippetUI::Table_HeaderCell *this)
{
}

void SnippetUI::Table_Header::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Header::Clear((SnippetUI::Table_Header *)this);
    SnippetUI::Table_Header::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::Table_Header::Clear((SnippetUI::Table_Header *)this);
    SnippetUI::Table_Header::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Header::Clear(SnippetUI::Table_Header *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (SnippetUI::Table_HeaderCell **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::Table_HeaderCell::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::Table_Header *)((char *)this + 8);
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

void sub_1C5F5C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Header::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Header *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::Table_HeaderCell **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 8);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          uint64_t v15 = (char *)a2 + 2;
          do
          {
            uint64_t v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          unint64_t v13 = v16 + 2;
          *uint64_t v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          unint64_t v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        unint64_t v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Table_HeaderCell::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v9 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  int v19 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v19 + 23) < 0)
  {
    uint64_t v20 = (const char *)*((void *)v19 + 1);
    if (!v20) {
      goto LABEL_25;
    }
    int v19 = *(google::protobuf::internal **)v19;
    goto LABEL_24;
  }
  uint64_t v20 = (const char *)*((unsigned __int8 *)v19 + 23);
  if (*((unsigned char *)v19 + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v19, v20, 1, (google::protobuf::internal *)"SnippetUI.Table.Header.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 5), (char *)a2);
  }
LABEL_25:
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v21 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C5F5CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Table_Header::_InternalParse(SnippetUI::Table_Header *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v33 = a2;
  int v5 = (std::string **)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v33, *((_DWORD *)a3 + 23))) {
      return v33;
    }
    TagFallback = (google::protobuf::internal *)((char *)v33 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v33;
    if ((*(char *)v33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v33 + 2);
LABEL_6:
      unsigned int v33 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v33, v10);
    unsigned int v33 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v10 >> 3 != 2)
    {
      if (v10 >> 3 != 1 || v10 != 10) {
        goto LABEL_12;
      }
      unsigned int v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        uint64_t v15 = (google::protobuf::internal *)((char *)v14 + 1);
        unsigned int v33 = v15;
        uint64_t v16 = (int *)*((void *)this + 4);
        if (!v16) {
          break;
        }
        uint64_t v17 = *((int *)this + 6);
        int v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 6) = v17 + 1;
          int v19 = *(SnippetUI::Table_HeaderCell **)&v16[2 * v17 + 2];
          goto LABEL_31;
        }
        if (v18 == *((_DWORD *)this + 7)) {
          goto LABEL_29;
        }
LABEL_30:
        *uint64_t v16 = v18 + 1;
        int v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                       + 2));
        uint64_t v20 = *((void *)this + 4);
        uint64_t v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(void *)(v20 + 8 * v21 + 8) = v19;
        uint64_t v15 = v33;
LABEL_31:
        unsigned int v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback) {
            return 0;
          }
          char v23 = SizeFallback;
          unsigned int v22 = v25;
        }
        else
        {
          char v23 = (char *)v15 + 1;
        }
        int v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        int v27 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 != v28) {
          return 0;
        }
        int v29 = v26;
        unsigned int v14 = SnippetUI::Table_HeaderCell::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
        if (!v14) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v30 = *((_DWORD *)a3 + 7) + v29;
        *((_DWORD *)a3 + 7) = v30;
        unint64_t v31 = *((void *)a3 + 1) + (v30 & (v30 >> 31));
        *(void *)a3 = v31;
        unsigned int v33 = v14;
        if (v31 <= (unint64_t)v14 || *(unsigned char *)v14 != 10) {
          goto LABEL_2;
        }
      }
      int v18 = *((_DWORD *)this + 7);
LABEL_29:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v18 + 1);
      uint64_t v16 = (int *)*((void *)this + 4);
      int v18 = *v16;
      goto LABEL_30;
    }
    if (v10 == 18)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      unint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Table.Header.component_name");
      goto LABEL_21;
    }
LABEL_12:
    if (v10) {
      BOOL v12 = (v10 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      *((_DWORD *)a3 + 20) = v10 - 1;
      return TagFallback;
    }
    unint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_21:
    unsigned int v33 = (google::protobuf::internal *)v13;
  }
  while (v13);
  return 0;
}

uint64_t SnippetUI::Table_Header::GetCachedSize(SnippetUI::Table_Header *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::Table_Header::ByteSizeLong(SnippetUI::Table_Header *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::Table_HeaderCell **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::Table_HeaderCell::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Header *)((char *)this + 8), v2, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::Table_Header::IsInitialized(SnippetUI::Table_Header *this)
{
  return 1;
}

SnippetUI::Table_Header *SnippetUI::Table_Header::New(SnippetUI::Table_Header *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(a2);
}

SnippetUI::Table_Header *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_Header *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Header>);
  }
  SnippetUI::Table_Header::Table_Header(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5D080(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Header>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_Header *SnippetUI::Table_Header::New(SnippetUI::Table_Header *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
}

void SnippetUI::Table_Header::~Table_Header(SnippetUI::Table_Header *this)
{
  SnippetUI::Table_Header::~Table_Header(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2120D90;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Header *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_Column_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Column::Table_Column((SnippetUI::Table_Column *)&SnippetUI::_Table_Column_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Column_default_instance_, v4);
  qword_1EB68F590 = (uint64_t)&SnippetUI::_Table_ContentColumnCell_default_instance_;
  unk_1EB68F598 = &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

SnippetUI::Table_Column *SnippetUI::Table_Column::Table_Column(SnippetUI::Table_Column *this)
{
  *(void *)this = &unk_1F2121150;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_Table_Column_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Column_Table_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C5F5D280(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Column::GetMetadata(SnippetUI::Table_Column *this)
{
  return qword_1EA3D9640;
}

uint64_t SnippetUI::Table_Column::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::Table_Column::MergeFrom(SnippetUI::Table_Column *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2083);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table_Column::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F5D39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Column::MergeFrom(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2098);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Column *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 7);
  if (v6 != 1)
  {
    if (v6 != 2) {
      return;
    }
    if (*((_DWORD *)this + 7) == 2)
    {
      char v7 = (SnippetUI::Table_SpacerColumnCell *)*((void *)this + 2);
    }
    else
    {
      SnippetUI::Table_Column::clear_cell((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      char v7 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        uint64_t v9 = (const SnippetUI::Table_SpacerColumnCell *)&SnippetUI::_Table_SpacerColumnCell_default_instance_;
        goto LABEL_16;
      }
    }
    uint64_t v9 = (const SnippetUI::Table_SpacerColumnCell *)*((void *)a2 + 2);
LABEL_16:
    SnippetUI::Table_SpacerColumnCell::MergeFrom(v7, v9);
    return;
  }
  if (*((_DWORD *)this + 7) == 1)
  {
    uint64_t v8 = (SnippetUI::Table_ContentColumnCell *)*((void *)this + 2);
  }
  else
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 1;
    uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
    *((void *)this + 2) = v8;
    if (*((_DWORD *)a2 + 7) != 1)
    {
      uint64_t v10 = (const SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_;
      goto LABEL_18;
    }
  }
  uint64_t v10 = (const SnippetUI::Table_ContentColumnCell *)*((void *)a2 + 2);
LABEL_18:
  SnippetUI::Table_ContentColumnCell::MergeFrom(v8, v10);
}

void sub_1C5F5D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Column::clear_cell(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void SnippetUI::Table_Column::CopyFrom(SnippetUI::Table_Column *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Column::Clear(this);
    SnippetUI::Table_Column::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Column::Clear(SnippetUI::Table_Column *this)
{
  SnippetUI::Table_Column::clear_cell((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Table_Column *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Column::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Column *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v7 = (SnippetUI::Table_ContentColumnCell *)*((void *)this + 2);
    *a2 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          BOOL v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        uint64_t v9 = v12 + 2;
        unsigned __int8 *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        uint64_t v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      uint64_t v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Table_ContentColumnCell::InternalSerializeWithCachedSizesToArray(v7, (char *)v9, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v15 = *((void *)this + 2);
    *a2 = 18;
    unsigned int v16 = *(_DWORD *)(v15 + 16);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v17 = v16 >> 7;
      if (v16 >> 14)
      {
        int v18 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v19 = v18;
          *v18++ = v17 | 0x80;
          unsigned int v20 = v17 >> 7;
          unsigned int v21 = v17 >> 14;
          v17 >>= 7;
        }
        while (v21);
        a2 = (char *)(v19 + 2);
        unsigned __int8 *v18 = v20;
      }
      else
      {
        a2[2] = v17;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v16;
      a2 += 2;
    }
    uint64_t v22 = *(void *)(v15 + 8);
    if (v22) {
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v22 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
    }
  }
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Table_Column::_InternalParse(SnippetUI::Table_Column *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v30 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23))) {
        return v30;
      }
      TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
      unsigned int v8 = (char *)*(unsigned __int8 *)v30;
      if ((*(char *)v30 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
        int v30 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v8);
      int v30 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v8 >> 3 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_12;
      }
      if (*((_DWORD *)this + 7) == 2)
      {
        char v11 = (SnippetUI::Table_SpacerColumnCell *)*((void *)this + 2);
      }
      else
      {
        SnippetUI::Table_Column::clear_cell((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        char v11 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
        *((void *)this + 2) = v11;
        TagFallback = v30;
      }
      unsigned int v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        unsigned int v14 = SizeFallback;
        unsigned int v13 = v18;
      }
      else
      {
        unsigned int v14 = (char *)TagFallback + 1;
      }
      int v19 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
      int v20 = *((_DWORD *)a3 + 22);
      BOOL v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)a3 + 22) = v20;
      if (v20 < 0 != v21) {
        return 0;
      }
      int v22 = v19;
      uint64_t v23 = SnippetUI::Table_SpacerColumnCell::_InternalParse(v11, (google::protobuf::internal *)v14, a3);
      if (!v23) {
        return 0;
      }
LABEL_40:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v28 = *((_DWORD *)a3 + 7) + v22;
      *((_DWORD *)a3 + 7) = v28;
      *(void *)a3 = *((void *)a3 + 1) + (v28 & (v28 >> 31));
      int v30 = v23;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        BOOL v12 = (SnippetUI::Table_ContentColumnCell *)*((void *)this + 2);
      }
      else
      {
        SnippetUI::Table_Column::clear_cell((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        BOOL v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
        *((void *)this + 2) = v12;
        TagFallback = v30;
      }
      unsigned int v15 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        int v24 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v24) {
          return 0;
        }
        unsigned int v16 = v24;
        unsigned int v15 = v25;
      }
      else
      {
        unsigned int v16 = (char *)TagFallback + 1;
      }
      int v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v16, v15);
      int v27 = *((_DWORD *)a3 + 22);
      BOOL v21 = __OFSUB__(v27--, 1);
      *((_DWORD *)a3 + 22) = v27;
      if (v27 < 0 != v21) {
        return 0;
      }
      int v22 = v26;
      uint64_t v23 = SnippetUI::Table_ContentColumnCell::_InternalParse(v12, (google::protobuf::internal *)v16, a3);
      if (!v23) {
        return 0;
      }
      goto LABEL_40;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    int v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v30) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Table_Column::GetCachedSize(SnippetUI::Table_Column *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::Table_Column::ByteSizeLong(SnippetUI::Table_Column *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    uint64_t v4 = *((void *)this + 2);
    char v6 = *(unsigned char *)(v4 + 8);
    uint64_t v5 = (google::protobuf::UnknownFieldSet *)(v4 + 8);
    char v7 = (_DWORD *)((char *)v5 + 8);
    if (v6)
    {
      char v3 = google::protobuf::internal::ComputeUnknownFieldsSize(v5, 0, v7);
    }
    else
    {
      char v3 = 0;
      *char v7 = 0;
    }
    goto LABEL_6;
  }
  if (v2 == 1)
  {
    char v3 = SnippetUI::Table_ContentColumnCell::ByteSizeLong(*((SnippetUI::Table_ContentColumnCell **)this + 2));
LABEL_6:
    unsigned int v8 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    goto LABEL_8;
  }
  unsigned int v8 = 0;
LABEL_8:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Column *)((char *)this + 8), v8, (_DWORD *)this + 6);
  }
  else
  {
    *((_DWORD *)this + 6) = v8;
    return (char *)v8;
  }
}

uint64_t SnippetUI::Table_Column::IsInitialized(SnippetUI::Table_Column *this)
{
  return 1;
}

SnippetUI::Table_Column *SnippetUI::Table_Column::New(SnippetUI::Table_Column *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(a2);
}

SnippetUI::Table_Column *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table_Column *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Column>);
  }
  SnippetUI::Table_Column::Table_Column(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5DB9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Column>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table_Column *SnippetUI::Table_Column::New(SnippetUI::Table_Column *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(0);
}

void SnippetUI::Table_Column::~Table_Column(SnippetUI::Table_Column *this)
{
  SnippetUI::Table_Column::~Table_Column(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2121150;
  if (*((_DWORD *)this + 7)) {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Table_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table::Table((SnippetUI::Table *)&SnippetUI::_Table_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_default_instance_, v4);
  qword_1EB68F2F8 = (uint64_t)&SnippetUI::_Table_Header_default_instance_;
}

SnippetUI::Table *SnippetUI::Table::Table(SnippetUI::Table *this)
{
  *(void *)this = &unk_1F2121510;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (atomic_load_explicit(scc_info_Table_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Table_2eproto);
  }
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_1C5F5DD7C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table::GetMetadata(SnippetUI::Table *this)
{
  return qword_1EA3D9690;
}

uint64_t SnippetUI::Table::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

void SnippetUI::Table::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 3210);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Table::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F5DEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 3225);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>(this + 5, (uint64_t)(a2 + 5));
  if (a2 != (int **)&SnippetUI::_Table_default_instance_)
  {
    char v6 = (int **)a2[8];
    if (v6)
    {
      char v7 = (int **)this[8];
      if (!v7)
      {
        char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
        this[8] = (int *)v7;
        char v6 = (int **)a2[8];
      }
      if (v6) {
        unsigned int v8 = v6;
      }
      else {
        unsigned int v8 = (int **)&SnippetUI::_Table_Header_default_instance_;
      }
      SnippetUI::Table_Header::MergeFrom(v7, v8);
    }
  }
  if (*((unsigned char *)a2 + 72)) {
    *((unsigned char *)this + 72) = 1;
  }
}

void sub_1C5F5DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unsigned int v13 = (SnippetUI::Table_Column **)(v6 + 8);
      unsigned int v14 = (SnippetUI::Table_Column **)v7;
      do
      {
        unsigned int v16 = *v13++;
        unsigned int v15 = v16;
        unsigned int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      BOOL v21 = (SnippetUI::Table_Column **)((char *)v8 + v20);
      int v22 = (SnippetUI::Table_Column **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      *int v26 = v25;
    }
  }
}

void sub_1C5F5E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unsigned int v13 = (SnippetUI::Table_Row **)(v6 + 8);
      unsigned int v14 = (SnippetUI::Table_Row **)v7;
      do
      {
        unsigned int v16 = *v13++;
        unsigned int v15 = v16;
        unsigned int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      BOOL v21 = (SnippetUI::Table_Row **)((char *)v8 + v20);
      int v22 = (SnippetUI::Table_Row **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      *int v26 = v25;
    }
  }
}

void sub_1C5F5E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(SnippetUI::Table_Row *a1, SnippetUI::Table_Row *this)
{
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(SnippetUI::Table_Column *a1, SnippetUI::Table_Column *this)
{
}

void SnippetUI::Table::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Table::Clear((SnippetUI::Table *)this);
    SnippetUI::Table::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::Table::Clear((SnippetUI::Table *)this);
    SnippetUI::Table::MergeFrom(this, a2);
  }
}

void SnippetUI::Table::Clear(SnippetUI::Table *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    char v3 = (SnippetUI::Table_Column **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::Table_Column::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  else if (v6)
  {
    char v7 = (SnippetUI::Table_Row **)(*((void *)this + 7) + 8);
    do
    {
      unsigned int v8 = *v7++;
      SnippetUI::Table_Row::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 12) = 0;
  }
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  char v12 = *((unsigned char *)this + 8);
  int v11 = (char *)this + 8;
  *((void *)v11 + 7) = 0;
  v11[64] = 0;
  if (v12)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v11);
  }
}

void sub_1C5F5E478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table::InternalSerializeWithCachedSizesToArray(SnippetUI::Table *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v5 = (char *)a2;
  if (*((unsigned char *)this + 72))
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = *((unsigned char *)this + 72);
    }
    else
    {
      char v7 = 1;
    }
    *int v5 = 8;
    v5[1] = v7;
    v5 += 2;
  }
  int v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    int v9 = 0;
    while ((unint64_t)v5 < *(void *)a3)
    {
      if (v9 < 0) {
        goto LABEL_9;
      }
LABEL_10:
      if (*((_DWORD *)this + 6) <= v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        int v11 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      char v12 = *(SnippetUI::Table_Column **)(*((void *)this + 4) + 8 * v9 + 8);
      *int v5 = 18;
      unsigned int v13 = *((_DWORD *)v12 + 6);
      if (v13 > 0x7F)
      {
        v5[1] = v13 | 0x80;
        unsigned int v15 = v13 >> 7;
        if (v13 >> 14)
        {
          unsigned int v16 = v5 + 2;
          do
          {
            unsigned int v17 = v16;
            *v16++ = v15 | 0x80;
            unsigned int v18 = v15 >> 7;
            unsigned int v19 = v15 >> 14;
            v15 >>= 7;
          }
          while (v19);
          unsigned int v14 = v17 + 2;
          *unsigned int v16 = v18;
        }
        else
        {
          v5[2] = v15;
          unsigned int v14 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v13;
        unsigned int v14 = v5 + 2;
      }
      int v5 = (char *)SnippetUI::Table_Column::InternalSerializeWithCachedSizesToArray(v12, v14, a3, a4);
      if (++v9 == v8) {
        goto LABEL_23;
      }
    }
    int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
LABEL_23:
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    uint64_t v20 = (SnippetUI::Table_Header *)*((void *)this + 8);
    if (v20)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        uint64_t v20 = (SnippetUI::Table_Header *)*((void *)this + 8);
      }
      *int v5 = 26;
      unsigned int v21 = *((_DWORD *)v20 + 12);
      if (v21 > 0x7F)
      {
        v5[1] = v21 | 0x80;
        unsigned int v23 = v21 >> 7;
        if (v21 >> 14)
        {
          int v24 = v5 + 2;
          do
          {
            int v25 = v24;
            *v24++ = v23 | 0x80;
            unsigned int v26 = v23 >> 7;
            unsigned int v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          int v22 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
          *int v24 = v26;
        }
        else
        {
          v5[2] = v23;
          int v22 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v21;
        int v22 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      int v5 = (char *)SnippetUI::Table_Header::InternalSerializeWithCachedSizesToArray(v20, v22, a3, a4);
    }
  }
  int v28 = *((_DWORD *)this + 12);
  if (v28)
  {
    int v29 = 0;
    while ((unint64_t)v5 < *(void *)a3)
    {
      if (v29 < 0) {
        goto LABEL_39;
      }
LABEL_40:
      if (*((_DWORD *)this + 12) <= v29)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        unint64_t v31 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v31->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      int v32 = *(SnippetUI::Table_Row **)(*((void *)this + 7) + 8 * v29 + 8);
      *int v5 = 34;
      unsigned int v33 = *((_DWORD *)v32 + 20);
      if (v33 > 0x7F)
      {
        v5[1] = v33 | 0x80;
        unsigned int v35 = v33 >> 7;
        if (v33 >> 14)
        {
          unsigned int v36 = v5 + 2;
          do
          {
            unsigned int v37 = v36;
            *v36++ = v35 | 0x80;
            unsigned int v38 = v35 >> 7;
            unsigned int v39 = v35 >> 14;
            v35 >>= 7;
          }
          while (v39);
          unsigned int v34 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
          *unsigned int v36 = v38;
        }
        else
        {
          v5[2] = v35;
          unsigned int v34 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v33;
        unsigned int v34 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      int v5 = (char *)SnippetUI::Table_Row::InternalSerializeWithCachedSizesToArray(v32, v34, a3, a4);
      if (++v29 == v28) {
        goto LABEL_53;
      }
    }
    int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_40;
    }
LABEL_39:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    int v30 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v30->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_40;
  }
LABEL_53:
  uint64_t v40 = *((void *)this + 1);
  if ((v40 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

void sub_1C5F5E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Table::_InternalParse(SnippetUI::Table *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v63 = a2;
  int v5 = (unsigned int *)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v63, *((_DWORD *)a3 + 23))) {
      return v63;
    }
    TagFallback = (google::protobuf::internal *)((char *)v63 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v63;
    if ((*(char *)v63 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v63 + 2);
LABEL_6:
      char v63 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v63, v10);
    char v63 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8) {
          goto LABEL_56;
        }
        int v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v12 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_12;
        }
        int v13 = *(char *)v11;
        unint64_t v12 = v12 + (v13 << 7) - 128;
        if ((v13 & 0x80000000) == 0)
        {
          int v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
          char v63 = v11;
          *((unsigned char *)this + 72) = v12 != 0;
          continue;
        }
        int v60 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v12);
        char v63 = v60;
        *((unsigned char *)this + 72) = v61 != 0;
        if (v60) {
          continue;
        }
        goto LABEL_71;
      case 2u:
        if (v10 != 18) {
          goto LABEL_56;
        }
        unsigned int v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_15:
        unsigned int v15 = (google::protobuf::internal *)((char *)v14 + 1);
        char v63 = v15;
        unsigned int v16 = (int *)*((void *)this + 4);
        if (!v16)
        {
          int v18 = *((_DWORD *)this + 7);
LABEL_20:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v18 + 1);
          unsigned int v16 = (int *)*((void *)this + 4);
          int v18 = *v16;
          goto LABEL_21;
        }
        uint64_t v17 = *((int *)this + 6);
        int v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 6) = v17 + 1;
          unsigned int v19 = *(SnippetUI::Table_Column **)&v16[2 * v17 + 2];
          goto LABEL_22;
        }
        if (v18 == *((_DWORD *)this + 7)) {
          goto LABEL_20;
        }
LABEL_21:
        *unsigned int v16 = v18 + 1;
        unsigned int v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
        uint64_t v20 = *((void *)this + 4);
        uint64_t v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(void *)(v20 + 8 * v21 + 8) = v19;
        unsigned int v15 = v63;
LABEL_22:
        unsigned int v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback) {
            goto LABEL_71;
          }
          unsigned int v23 = SizeFallback;
          unsigned int v22 = v25;
        }
        else
        {
          unsigned int v23 = (char *)v15 + 1;
        }
        int v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        int v27 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 == v28)
        {
          int v29 = v26;
          unsigned int v14 = SnippetUI::Table_Column::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
          if (v14)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              int v30 = *((_DWORD *)a3 + 7) + v29;
              *((_DWORD *)a3 + 7) = v30;
              unint64_t v31 = *((void *)a3 + 1) + (v30 & (v30 >> 31));
              *(void *)a3 = v31;
              char v63 = v14;
              if (v31 <= (unint64_t)v14 || *(unsigned char *)v14 != 18) {
                continue;
              }
              goto LABEL_15;
            }
          }
        }
        goto LABEL_71;
      case 3u:
        if (v10 != 26) {
          goto LABEL_56;
        }
        int v32 = (SnippetUI::Table_Header *)*((void *)this + 8);
        if (!v32)
        {
          int v32 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
          *((void *)this + 8) = v32;
          TagFallback = v63;
        }
        unsigned int v33 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          std::string v53 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v53) {
            goto LABEL_71;
          }
          unsigned int v34 = v53;
          unsigned int v33 = v54;
        }
        else
        {
          unsigned int v34 = (char *)TagFallback + 1;
        }
        int v55 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v34, v33);
        int v56 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v56--, 1);
        *((_DWORD *)a3 + 22) = v56;
        if (v56 < 0 != v28) {
          goto LABEL_71;
        }
        int v57 = v55;
        std::vector<std::string> v58 = SnippetUI::Table_Header::_InternalParse(v32, (google::protobuf::internal *)v34, a3);
        if (!v58) {
          goto LABEL_71;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_71;
        }
        int v59 = *((_DWORD *)a3 + 7) + v57;
        *((_DWORD *)a3 + 7) = v59;
        *(void *)a3 = *((void *)a3 + 1) + (v59 & (v59 >> 31));
        char v63 = v58;
        continue;
      case 4u:
        if (v10 != 34) {
          goto LABEL_56;
        }
        unsigned int v35 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_39:
        unsigned int v36 = (google::protobuf::internal *)((char *)v35 + 1);
        char v63 = v36;
        unsigned int v37 = (int *)*((void *)this + 7);
        if (!v37)
        {
          int v39 = *((_DWORD *)this + 13);
LABEL_44:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v39 + 1);
          unsigned int v37 = (int *)*((void *)this + 7);
          int v39 = *v37;
          goto LABEL_45;
        }
        uint64_t v38 = *((int *)this + 12);
        int v39 = *v37;
        if ((int)v38 < *v37)
        {
          *((_DWORD *)this + 12) = v38 + 1;
          uint64_t v40 = *(SnippetUI::Table_Row **)&v37[2 * v38 + 2];
          goto LABEL_46;
        }
        if (v39 == *((_DWORD *)this + 13)) {
          goto LABEL_44;
        }
LABEL_45:
        int *v37 = v39 + 1;
        uint64_t v40 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                + 5));
        uint64_t v41 = *((void *)this + 7);
        uint64_t v42 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v42 + 1;
        *(void *)(v41 + 8 * v42 + 8) = v40;
        unsigned int v36 = v63;
LABEL_46:
        unsigned int v43 = *(unsigned __int8 *)v36;
        if (*(char *)v36 < 0)
        {
          uint64_t v45 = google::protobuf::internal::ReadSizeFallback(v36, (const char *)*(unsigned __int8 *)v36);
          if (!v45) {
            goto LABEL_71;
          }
          std::string v44 = v45;
          unsigned int v43 = v46;
        }
        else
        {
          std::string v44 = (char *)v36 + 1;
        }
        int v47 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v44, v43);
        int v48 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v48--, 1);
        *((_DWORD *)a3 + 22) = v48;
        if (v48 < 0 == v28)
        {
          int v49 = v47;
          unsigned int v35 = SnippetUI::Table_Row::_InternalParse(v40, (google::protobuf::internal *)v44, a3);
          if (v35)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              int v50 = *((_DWORD *)a3 + 7) + v49;
              *((_DWORD *)a3 + 7) = v50;
              unint64_t v51 = *((void *)a3 + 1) + (v50 & (v50 >> 31));
              *(void *)a3 = v51;
              char v63 = v35;
              if (v51 <= (unint64_t)v35 || *(unsigned char *)v35 != 34) {
                continue;
              }
              goto LABEL_39;
            }
          }
        }
LABEL_71:
        TagFallback = 0;
        break;
      default:
LABEL_56:
        if (v10) {
          BOOL v52 = (v10 & 7) == 4;
        }
        else {
          BOOL v52 = 1;
        }
        if (v52)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v63 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
        if (!v63) {
          goto LABEL_71;
        }
        continue;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Table::GetCachedSize(SnippetUI::Table *this)
{
  return *((unsigned int *)this + 19);
}

char *SnippetUI::Table::ByteSizeLong(SnippetUI::Table *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::Table_Column **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      char v7 = SnippetUI::Table_Column::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((int *)this + 12);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    int v11 = (SnippetUI::Table_Row **)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      int v13 = *v11++;
      unsigned int v14 = SnippetUI::Table_Row::ByteSizeLong(v13);
      v9 += (uint64_t)&v14[(9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6];
      v12 -= 8;
    }
    while (v12);
  }
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    unsigned int v15 = (SnippetUI::Table_Header *)*((void *)this + 8);
    if (v15)
    {
      unsigned int v16 = SnippetUI::Table_Header::ByteSizeLong(v15);
      v9 += (uint64_t)&v16[((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 72)) {
    uint64_t v17 = (const google::protobuf::UnknownFieldSet *)(v9 + 2);
  }
  else {
    uint64_t v17 = (const google::protobuf::UnknownFieldSet *)v9;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table *)((char *)this + 8), v17, (_DWORD *)this + 19);
  }
  else
  {
    *((_DWORD *)this + 19) = v17;
    return (char *)v17;
  }
}

uint64_t SnippetUI::Table::IsInitialized(SnippetUI::Table *this)
{
  return 1;
}

SnippetUI::Table *SnippetUI::Table::New(SnippetUI::Table *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(a2);
}

SnippetUI::Table *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Table *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table>);
  }
  SnippetUI::Table::Table(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F5EFD4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406BE5C661);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Table *SnippetUI::Table::New(SnippetUI::Table *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(0);
}

void SnippetUI::Table::~Table(SnippetUI::Table *this)
{
  SnippetUI::Table::~Table(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2121510;
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table *)((char *)this + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Table_ColumnAlignment_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_Table_2eproto;
}

BOOL SnippetUI::Table_ColumnAlignment_IsValid(SnippetUI *this)
{
  return this < 4;
}

SnippetUI::Table_Header *SnippetUI::Table_Header::Table_Header(SnippetUI::Table_Header *this, const SnippetUI::Table_Header *a2)
{
  *(void *)this = &unk_1F2120D90;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::Table_Header *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  return this;
}

void sub_1C5F5F1EC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_Header::default_instance(SnippetUI::Table_Header *this)
{
  if (atomic_load_explicit(scc_info_Table_Header_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Header_Table_2eproto);
  }
  return &SnippetUI::_Table_Header_default_instance_;
}

__n128 SnippetUI::Table_Header::InternalSwap(SnippetUI::Table_Header *this, SnippetUI::Table_Header *a2)
{
  uint64_t v4 = (SnippetUI::Table_Header *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Header *)((char *)this + 16), (SnippetUI::Table_Header *)((char *)a2 + 16));
  uint64_t v10 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (std::string **)((char *)this + 40);
  uint64_t v9 = (std::string *)v10;
  int v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void SnippetUI::Table_Row::InitAsDefaultInstance(SnippetUI::Table_Row *this)
{
  qword_1EB68F458 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Table_Row::_Internal::action(SnippetUI::Table_Row::_Internal *this, const SnippetUI::Table_Row *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::Table_Row::clear_action(SnippetUI::Table_Row *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

void SnippetUI::Table_Row::clear_backgrounds(SnippetUI::Table_Row *this)
{
}

SnippetUI::Table_Row *SnippetUI::Table_Row::Table_Row(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  *(void *)this = &unk_1F2120E50;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::Table_Row *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  *((_DWORD *)this + 20) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 8);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, v6);
  }
  if (a2 != (const SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_ && *((void *)a2 + 9)) {
    operator new();
  }
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C5F5F534(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v4, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_Row::default_instance(SnippetUI::Table_Row *this)
{
  if (atomic_load_explicit(scc_info_Table_Row_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Row_Table_2eproto);
  }
  return &SnippetUI::_Table_Row_default_instance_;
}

void SnippetUI::Table_Row::CopyFrom(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Row::Clear(this);
    SnippetUI::Table_Row::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Row::InternalSwap(SnippetUI::Table_Row *this, SnippetUI::Table_Row *a2)
{
  uint64_t v4 = (SnippetUI::Table_Row *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Row *)((char *)this + 16), (SnippetUI::Table_Row *)((char *)a2 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Row *)((char *)this + 40), (SnippetUI::Table_Row *)((char *)a2 + 40));
  uint64_t v7 = (uint64_t *)*((void *)this + 8);
  uint64_t v8 = (uint64_t **)((char *)a2 + 64);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 8);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
}

void SnippetUI::Table_Content::InitAsDefaultInstance(SnippetUI::Table_Content *this)
{
  qword_1EB68F678 = (uint64_t)&SnippetUI::_Table_EmptyCell_default_instance_;
  unk_1EB68F680 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB68F688 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F660 = (uint64_t)&SnippetUI::_OptionalInt_default_instance_;
}

uint64_t SnippetUI::Table_Content::_Internal::empty(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::text(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::visual(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::line_limit(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Table_Content::set_allocated_empty(SnippetUI::Table_Content *this, SnippetUI::Table_EmptyCell *a2)
{
  uint64_t result = SnippetUI::Table_Content::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::set_allocated_text(uint64_t a1, uint64_t a2)
{
  uint64_t result = SnippetUI::Table_Content::clear_value(a1);
  if (a2)
  {
    *(_DWORD *)(a1 + 36) = 2;
    *(void *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::clear_text(uint64_t this)
{
  if (*(_DWORD *)(this + 36) == 2)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Table_Content::set_allocated_visual(uint64_t a1, uint64_t a2)
{
  uint64_t result = SnippetUI::Table_Content::clear_value(a1);
  if (a2)
  {
    *(_DWORD *)(a1 + 36) = 3;
    *(void *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::clear_visual(uint64_t this)
{
  if (*(_DWORD *)(this + 36) == 3)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Table_Content::clear_line_limit(SnippetUI::Table_Content *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

SnippetUI::Table_Content *SnippetUI::Table_Content::Table_Content(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  *(void *)this = &unk_1F2120F10;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Content *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_
    && *((void *)a2 + 2) != 0)
  {
    operator new();
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 9) = 0;
  int v6 = *((_DWORD *)a2 + 9);
  switch(v6)
  {
    case 3:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
      *((void *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) == 3) {
        uint64_t v10 = (int **)*((void *)a2 + 3);
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
      break;
    case 2:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      long long v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
      *((void *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 2) {
        uint64_t v12 = (int **)*((void *)a2 + 3);
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v11, v12);
      break;
    case 1:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      uint64_t v7 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
      *((void *)this + 3) = v7;
      if (*((_DWORD *)a2 + 9) == 1) {
        uint64_t v8 = (const SnippetUI::Table_EmptyCell *)*((void *)a2 + 3);
      }
      else {
        uint64_t v8 = (const SnippetUI::Table_EmptyCell *)&SnippetUI::_Table_EmptyCell_default_instance_;
      }
      SnippetUI::Table_EmptyCell::MergeFrom(v7, v8);
      break;
  }
  return this;
}

void sub_1C5F5FAD4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x1081C40CC6EE3FDLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_Content::default_instance(SnippetUI::Table_Content *this)
{
  if (atomic_load_explicit(scc_info_Table_Content_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Content_Table_2eproto);
  }
  return &SnippetUI::_Table_Content_default_instance_;
}

void SnippetUI::Table_Content::CopyFrom(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Content::Clear(this);
    SnippetUI::Table_Content::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Content::InternalSwap(SnippetUI::Table_Content *this, SnippetUI::Table_Content *a2)
{
  uint64_t v4 = (SnippetUI::Table_Content *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

uint64_t SnippetUI::Table_EmptyCell::Table_EmptyCell(uint64_t this)
{
  *(void *)this = &unk_1F2120FD0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F2120FD0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

SnippetUI::Table_EmptyCell *SnippetUI::Table_EmptyCell::Table_EmptyCell(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  *(void *)this = &unk_1F2120FD0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  uint64_t v3 = *((void *)a2 + 1);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_EmptyCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5F5FCD4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::Table_EmptyCell::default_instance(SnippetUI::Table_EmptyCell *this)
{
  if (atomic_load_explicit(scc_info_Table_EmptyCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_EmptyCell_Table_2eproto);
  }
  return &SnippetUI::_Table_EmptyCell_default_instance_;
}

void SnippetUI::Table_EmptyCell::CopyFrom(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_EmptyCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_EmptyCell::InternalSwap(SnippetUI::Table_EmptyCell *this, SnippetUI::Table_EmptyCell *a2)
{
  uint64_t v2 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = (unint64_t *)((char *)a2 + 8);
  uint64_t v4 = v5;
  if (*((unsigned char *)this + 8))
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      char v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v4 & 1) == 0)
  {
    return;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
}

void SnippetUI::Table_HeaderCell::InitAsDefaultInstance(SnippetUI::Table_HeaderCell *this)
{
  qword_1EB68FA38 = (uint64_t)&SnippetUI::_Table_Content_default_instance_;
}

uint64_t SnippetUI::Table_HeaderCell::_Internal::content(SnippetUI::Table_HeaderCell::_Internal *this, const SnippetUI::Table_HeaderCell *a2)
{
  return *((void *)this + 2);
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::Table_HeaderCell(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  *(void *)this = &unk_1F2121090;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_HeaderCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_
    && *((void *)a2 + 2) != 0)
  {
    operator new();
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = *((void *)a2 + 3);
  return this;
}

void sub_1C5F5FF04(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40EE95837BLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_HeaderCell::default_instance(SnippetUI::Table_HeaderCell *this)
{
  if (atomic_load_explicit(scc_info_Table_HeaderCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_HeaderCell_Table_2eproto);
  }
  return &SnippetUI::_Table_HeaderCell_default_instance_;
}

void SnippetUI::Table_HeaderCell::CopyFrom(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_HeaderCell::Clear(this);
    SnippetUI::Table_HeaderCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_HeaderCell::InternalSwap(SnippetUI::Table_HeaderCell *this, SnippetUI::Table_HeaderCell *a2)
{
  uint64_t v4 = (SnippetUI::Table_HeaderCell *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void SnippetUI::Table_Column::InitAsDefaultInstance(SnippetUI::Table_Column *this)
{
  qword_1EB68F590 = (uint64_t)&SnippetUI::_Table_ContentColumnCell_default_instance_;
  unk_1EB68F598 = &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

uint64_t SnippetUI::Table_Column::_Internal::content(SnippetUI::Table_Column::_Internal *this, const SnippetUI::Table_Column *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Table_Column::_Internal::spacer(SnippetUI::Table_Column::_Internal *this, const SnippetUI::Table_Column *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Table_Column::set_allocated_content(SnippetUI::Table_Column *this, SnippetUI::Table_ContentColumnCell *a2)
{
  uint64_t result = SnippetUI::Table_Column::clear_cell((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Column::set_allocated_spacer(SnippetUI::Table_Column *this, SnippetUI::Table_SpacerColumnCell *a2)
{
  uint64_t result = SnippetUI::Table_Column::clear_cell((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((void *)this + 2) = a2;
  }
  return result;
}

SnippetUI::Table_Column *SnippetUI::Table_Column::Table_Column(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  *(void *)this = &unk_1F2121150;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Column *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 1)
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 1;
    uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
    *((void *)this + 2) = v8;
    if (*((_DWORD *)a2 + 7) == 1) {
      uint64_t v9 = (const SnippetUI::Table_ContentColumnCell *)*((void *)a2 + 2);
    }
    else {
      uint64_t v9 = (const SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_;
    }
    SnippetUI::Table_ContentColumnCell::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 2;
    char v6 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
    *((void *)this + 2) = v6;
    if (*((_DWORD *)a2 + 7) == 2) {
      uint64_t v7 = (const SnippetUI::Table_SpacerColumnCell *)*((void *)a2 + 2);
    }
    else {
      uint64_t v7 = (const SnippetUI::Table_SpacerColumnCell *)&SnippetUI::_Table_SpacerColumnCell_default_instance_;
    }
    SnippetUI::Table_SpacerColumnCell::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1C5F601F4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_Column::default_instance(SnippetUI::Table_Column *this)
{
  if (atomic_load_explicit(scc_info_Table_Column_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Column_Table_2eproto);
  }
  return &SnippetUI::_Table_Column_default_instance_;
}

void SnippetUI::Table_Column::CopyFrom(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Column::Clear(this);
    SnippetUI::Table_Column::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Column::InternalSwap(SnippetUI::Table_Column *this, SnippetUI::Table_Column *a2)
{
  uint64_t v4 = (SnippetUI::Table_Column *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

uint64_t SnippetUI::Table_SpacerColumnCell::Table_SpacerColumnCell(uint64_t this)
{
  *(void *)this = &unk_1F2121210;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F2121210;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

SnippetUI::Table_SpacerColumnCell *SnippetUI::Table_SpacerColumnCell::Table_SpacerColumnCell(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  *(void *)this = &unk_1F2121210;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  uint64_t v3 = *((void *)a2 + 1);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_SpacerColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5F603C4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::Table_SpacerColumnCell::default_instance(SnippetUI::Table_SpacerColumnCell *this)
{
  if (atomic_load_explicit(scc_info_Table_SpacerColumnCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_SpacerColumnCell_Table_2eproto);
  }
  return &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

void SnippetUI::Table_SpacerColumnCell::CopyFrom(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_SpacerColumnCell::InternalSwap(SnippetUI::Table_SpacerColumnCell *this, SnippetUI::Table_SpacerColumnCell *a2)
{
  uint64_t v2 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = (unint64_t *)((char *)a2 + 8);
  uint64_t v4 = v5;
  if (*((unsigned char *)this + 8))
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      char v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v4 & 1) == 0)
  {
    return;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
}

void SnippetUI::Table_ContentColumnCell::InitAsDefaultInstance(SnippetUI::Table_ContentColumnCell *this)
{
  qword_1EB690098 = (uint64_t)&SnippetUI::_Table_AutoColumnSize_default_instance_;
  unk_1EB6900A0 = &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

uint64_t SnippetUI::Table_ContentColumnCell::_Internal::auto_(SnippetUI::Table_ContentColumnCell::_Internal *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Table_ContentColumnCell::_Internal::fixed(SnippetUI::Table_ContentColumnCell::_Internal *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Table_ContentColumnCell::set_allocated_auto_(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_AutoColumnSize *a2)
{
  uint64_t result = SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_ContentColumnCell::set_allocated_fixed(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_FixedColumnSize *a2)
{
  uint64_t result = SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 2;
    *((void *)this + 3) = a2;
  }
  return result;
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  *(void *)this = &unk_1F21212D0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 9) = 0;
  int v5 = *((_DWORD *)a2 + 9);
  if (v5 == 1)
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    uint64_t v8 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
    *((void *)this + 3) = v8;
    if (*((_DWORD *)a2 + 9) == 1) {
      uint64_t v9 = (const SnippetUI::Table_AutoColumnSize *)*((void *)a2 + 3);
    }
    else {
      uint64_t v9 = (const SnippetUI::Table_AutoColumnSize *)&SnippetUI::_Table_AutoColumnSize_default_instance_;
    }
    SnippetUI::Table_AutoColumnSize::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    char v6 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
    *((void *)this + 3) = v6;
    if (*((_DWORD *)a2 + 9) == 2) {
      uint64_t v7 = (const SnippetUI::Table_FixedColumnSize *)*((void *)a2 + 3);
    }
    else {
      uint64_t v7 = (const SnippetUI::Table_FixedColumnSize *)&SnippetUI::_Table_FixedColumnSize_default_instance_;
    }
    SnippetUI::Table_FixedColumnSize::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1C5F606BC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table_ContentColumnCell::default_instance(SnippetUI::Table_ContentColumnCell *this)
{
  if (atomic_load_explicit(scc_info_Table_ContentColumnCell_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_ContentColumnCell_Table_2eproto);
  }
  return &SnippetUI::_Table_ContentColumnCell_default_instance_;
}

void SnippetUI::Table_ContentColumnCell::CopyFrom(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_ContentColumnCell::Clear(this);
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_ContentColumnCell::InternalSwap(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_ContentColumnCell *a2)
{
  uint64_t v4 = (SnippetUI::Table_ContentColumnCell *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

uint64_t SnippetUI::Table_AutoColumnSize::Table_AutoColumnSize(uint64_t this)
{
  *(void *)this = &unk_1F2121390;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F2121390;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return this;
}

SnippetUI::Table_AutoColumnSize *SnippetUI::Table_AutoColumnSize::Table_AutoColumnSize(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  *(void *)this = &unk_1F2121390;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  uint64_t v3 = *((void *)a2 + 1);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_AutoColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5F6089C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::Table_AutoColumnSize::default_instance(SnippetUI::Table_AutoColumnSize *this)
{
  if (atomic_load_explicit(scc_info_Table_AutoColumnSize_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_AutoColumnSize_Table_2eproto);
  }
  return &SnippetUI::_Table_AutoColumnSize_default_instance_;
}

void SnippetUI::Table_AutoColumnSize::CopyFrom(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_AutoColumnSize::InternalSwap(SnippetUI::Table_AutoColumnSize *this, SnippetUI::Table_AutoColumnSize *a2)
{
  uint64_t v2 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = (unint64_t *)((char *)a2 + 8);
  uint64_t v4 = v5;
  if (*((unsigned char *)this + 8))
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      char v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v4 & 1) == 0)
  {
    return;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
}

void *SnippetUI::Table_FixedColumnSize::Table_FixedColumnSize(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F2121450;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F2121450;
  return this;
}

SnippetUI::Table_FixedColumnSize *SnippetUI::Table_FixedColumnSize::Table_FixedColumnSize(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  *(void *)this = &unk_1F2121450;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return this;
}

void sub_1C5F60AB0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::Table_FixedColumnSize::default_instance(SnippetUI::Table_FixedColumnSize *this)
{
  if (atomic_load_explicit(scc_info_Table_FixedColumnSize_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_FixedColumnSize_Table_2eproto);
  }
  return &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

void SnippetUI::Table_FixedColumnSize::CopyFrom(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
    *((_DWORD *)v5 + 2) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, a2);
  }
}

float SnippetUI::Table_FixedColumnSize::InternalSwap(SnippetUI::Table_FixedColumnSize *this, SnippetUI::Table_FixedColumnSize *a2)
{
  uint64_t v4 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

void SnippetUI::Table::InitAsDefaultInstance(SnippetUI::Table *this)
{
  qword_1EB68F2F8 = (uint64_t)&SnippetUI::_Table_Header_default_instance_;
}

uint64_t SnippetUI::Table::_Internal::header(SnippetUI::Table::_Internal *this, const SnippetUI::Table *a2)
{
  return *((void *)this + 8);
}

SnippetUI::Table *SnippetUI::Table::Table(SnippetUI::Table *this, const SnippetUI::Table *a2)
{
  *(void *)this = &unk_1F2121510;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::Table *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  *((_DWORD *)this + 19) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::Table *)&SnippetUI::_Table_default_instance_ && *((void *)a2 + 8)) {
    operator new();
  }
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  return this;
}

void sub_1C5F60D24(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v4, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Table::default_instance(SnippetUI::Table *this)
{
  if (atomic_load_explicit(scc_info_Table_Table_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Table_2eproto);
  }
  return &SnippetUI::_Table_default_instance_;
}

void SnippetUI::Table::InternalSwap(SnippetUI::Table *this, SnippetUI::Table *a2)
{
  uint64_t v4 = (SnippetUI::Table *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table *)((char *)this + 16), (SnippetUI::Table *)((char *)a2 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table *)((char *)this + 40), (SnippetUI::Table *)((char *)a2 + 40));
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 72);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v7;
}

uint64_t *siri::dialogengine::ExecuteDetailedResult::Execute@<X0>(siri::dialogengine **this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "conclusionInSingleWindowResponse");
  BOOL BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "windowSize");
  double NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)__p, 0.0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isFirstWindow");
  BOOL v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isLastWindow");
  BOOL v9 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v7, v8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Sash");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Detail");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Visual");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!BooleanParameter) {
        goto LABEL_41;
      }
    }
    else if (!BooleanParameter)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(__p, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      goto LABEL_48;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_41;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  int v10 = v6 && v9;
  if ((v10 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Detail");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Visual");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_38;
    }
  }
  else if (v9)
  {
LABEL_38:
    if ((v10 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
LABEL_48:
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
}

void sub_1C5F612EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteDetailedResult::~ExecuteDetailedResult(siri::dialogengine::ExecuteDetailedResult *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C8796D70);
}

BOOL siri::dialogengine::ConceptCallbacks::HasCallback(uint64_t a1, std::string *a2)
{
  return siri::dialogengine::IsBuiltinType(a2) || *(void *)(a1 + 792) != 0;
}

void siri::dialogengine::ConceptCallbacks::InvokeCallback(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  {
    operator new();
  }
  long long v11 = (std::once_flag::_State_type *)siri::dialogengine::ConceptCallbacks::InvokeCallback(siri::dialogengine::Context *,std::string const&,std::string const&,siri::dialogengine::VariableObject const*,std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ConceptCallbacks::InvokeCallback(siri::dialogengine::Context *,std::string const&,std::string const&,siri::dialogengine::VariableObject const*,std::string const&)::flag, memory_order_acquire) != -1)
  {
    v60[0] = siri::dialogengine::ConceptCallbacks::RegisterConcepts;
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    std::__call_once(v11, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  siri::dialogengine::VariableObject::VariableObject((siri::dialogengine::VariableObject *)v60);
  if (a4) {
    uint64_t v12 = (void *)a4;
  }
  else {
    uint64_t v12 = v60;
  }
  BOOL v52 = v12;
  if (a4) {
    char v13 = (uint64_t *)(a4 + 56);
  }
  else {
    char v13 = &v61;
  }
  if (a4) {
    std::string::size_type v14 = (unsigned __int8 *)(a4 + 65);
  }
  else {
    std::string::size_type v14 = v62;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v59 = *(std::string *)a2;
  }
  size_t v15 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v59.__r_.__value_.__l.__size_;
  do
  {
    if ((v15 & 0x80u) == 0) {
      size_t v17 = v15;
    }
    else {
      size_t v17 = size;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v56, v17 + 1);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v56;
    }
    else {
      int v18 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v19 = &v59;
      }
      else {
        unsigned int v19 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      memmove(v18, v19, v17);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 46;
    int v20 = *(char *)(a3 + 23);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a3;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a3 + 8);
    }
    unsigned int v23 = std::string::append(&v56, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v58 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = siri::dialogengine::ConceptCallbacks::mCallbacks + 8;
    uint64_t v25 = *(void *)(siri::dialogengine::ConceptCallbacks::mCallbacks + 8);
    if (!v25) {
      goto LABEL_43;
    }
    uint64_t v27 = siri::dialogengine::ConceptCallbacks::mCallbacks + 16;
    uint64_t v28 = siri::dialogengine::ConceptCallbacks::mCallbacks + 8;
    do
    {
      BOOL v29 = std::less<std::string>::operator()[abi:ne180100](v27, (const void **)(v25 + 32), (const void **)__p);
      int v30 = (uint64_t *)(v25 + 8);
      if (!v29)
      {
        int v30 = (uint64_t *)v25;
        uint64_t v28 = v25;
      }
      uint64_t v25 = *v30;
    }
    while (*v30);
    if (v28 == v26
      || std::less<std::string>::operator()[abi:ne180100](v27, (const void **)__p, (const void **)(v28 + 32)))
    {
LABEL_43:
      uint64_t v28 = v26;
    }
    if (siri::dialogengine::ConceptCallbacks::mCallbacks + 8 != v28)
    {
      uint64_t v39 = (*(uint64_t (**)(uint64_t, void *))(v28 + 56))(a1, v52);
      std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(a6, v39);
    }
    if (a1)
    {
      uint64_t v31 = *(void *)(a1 + 792);
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(v31 + 16))(v31, a5, &v59, a3);
        if (*a6)
        {
          LOBYTE(v47) = 1;
          uint64_t v48 = *a6;
          do
          {
            int v49 = *(unsigned __int8 *)(v48 + 65);
            uint64_t v48 = *(void *)(v48 + 56);
            int v47 = v47 & (v49 != 0);
          }
          while (v48);
          if (v47)
          {
            LOBYTE(v47) = 1;
            do
            {
              int v50 = *v14;
              uint64_t v51 = *v13;
              char v13 = (uint64_t *)(*v13 + 56);
              std::string::size_type v14 = (unsigned __int8 *)(v51 + 65);
              LOBYTE(v47) = v47 & (v50 != 0);
            }
            while (v51);
          }
          *(unsigned char *)(*a6 + 65) = v47;
          if (SHIBYTE(v58) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_97;
        }
      }
      else
      {
        *a6 = 0;
        a6[1] = 0;
      }
      int v32 = (std::__shared_weak_count *)a6[1];
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
    siri::dialogengine::ObjectRegistry::GetObject(a1, (const std::string::value_type **)&v59.__r_.__value_.__l.__data_, (uint64_t *)&v55);
    if (v55.__r_.__value_.__r.__words[0])
    {
      if (*(char *)(v55.__r_.__value_.__r.__words[0] + 95) < 0) {
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v55.__r_.__value_.__r.__words[0] + 72), *(void *)(v55.__r_.__value_.__r.__words[0] + 80));
      }
      else {
        std::string v56 = *(std::string *)(v55.__r_.__value_.__r.__words[0] + 72);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "");
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::string v59 = v56;
    if (v55.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
    size_t v15 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v59.__r_.__value_.__l.__size_;
    }
  }
  while (v33);
  if (a1 && *(void *)(a1 + 792))
  {
    std::operator+<char>();
    unsigned int v34 = std::string::append(&v54, "' of type '");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    int v36 = *(char *)(a2 + 23);
    if (v36 >= 0) {
      unsigned int v37 = (const std::string::value_type *)a2;
    }
    else {
      unsigned int v37 = *(const std::string::value_type **)a2;
    }
    if (v36 >= 0) {
      std::string::size_type v38 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v38 = *(void *)(a2 + 8);
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v40 = std::string::append(&v54, "' of type '");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    int v42 = *(char *)(a2 + 23);
    if (v42 >= 0) {
      unsigned int v37 = (const std::string::value_type *)a2;
    }
    else {
      unsigned int v37 = *(const std::string::value_type **)a2;
    }
    if (v42 >= 0) {
      std::string::size_type v38 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v38 = *(void *)(a2 + 8);
    }
  }
  unsigned int v43 = std::string::append(&v55, v37, v38);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  uint64_t v45 = std::string::append(&v56, "'");
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  std::string::size_type v58 = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v58) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  *a6 = 0;
  a6[1] = 0;
LABEL_97:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::VariableObject::~VariableObject((siri::dialogengine::VariableObject *)v60);
}

void sub_1C5F61954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
}

void siri::dialogengine::ConceptCallbacks::RegisterConcepts(siri::dialogengine::ConceptCallbacks *this)
{
  MEMORY[0x1F4188790](this);
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F6489C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  {
    operator new();
  }
  int v10 = (std::once_flag::_State_type *)siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(siri::dialogengine::Context *,std::string const&,std::string const&,std::shared_ptr<siri::dialogengine::Variable>)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(siri::dialogengine::Context *,std::string const&,std::string const&,std::shared_ptr<siri::dialogengine::Variable>)::flag, memory_order_acquire) != -1)
  {
    __p[0] = siri::dialogengine::ConceptCallbacks::RegisterPrimitiveMethods;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::__call_once(v10, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  uint64_t v12 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v11 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v13 = a2;
    }
    else {
      char v13 = *a2;
    }
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    size_t v15 = (const std::string::value_type *)a3;
  }
  else {
    size_t v15 = *(const std::string::value_type **)a3;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a3 + 8);
  }
  size_t v17 = std::string::append(&v29, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8;
  uint64_t v20 = *(void *)(siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8);
  if (!v20) {
    goto LABEL_29;
  }
  uint64_t v21 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 16;
  uint64_t v22 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8;
  do
  {
    BOOL v23 = std::less<std::string>::operator()[abi:ne180100](v21, (const void **)(v20 + 32), (const void **)__p);
    long long v24 = (uint64_t *)(v20 + 8);
    if (!v23)
    {
      long long v24 = (uint64_t *)v20;
      uint64_t v22 = v20;
    }
    uint64_t v20 = *v24;
  }
  while (*v24);
  if (v22 == v19
    || std::less<std::string>::operator()[abi:ne180100](v21, (const void **)__p, (const void **)(v22 + 32)))
  {
LABEL_29:
    uint64_t v22 = v19;
  }
  if (siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8 != v22)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void))(v22 + 56))(a1, *a4);
    if (v25) {
      std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(a5, v25);
    }
  }
  std::operator+<char>();
  uint64_t v26 = std::string::append(&v28, "'");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v29, 3u);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *a5 = 0;
  a5[1] = 0;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5F64BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void siri::dialogengine::ConceptCallbacks::RegisterPrimitiveMethods(siri::dialogengine::ConceptCallbacks *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F653DC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatLength(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  uint64_t v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      BOOL v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
LABEL_12:
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_12;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5F65C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a45);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogLength::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::abbreviated(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::approximate(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::compactDecimalLong(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::compactDecimalShort(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::symbolic(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogLength::units(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5F65F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogLength::value(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&v6, (uint64_t)a2);
  uint64_t v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(v6);
    if (v5) {
LABEL_3:
    }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5F660D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__24061(siri::dialogengine::PropertyBase *this, siri::dialogengine::PropertyBase *a2)
{
  if (*((unsigned __int8 *)this + 160) == *((unsigned __int8 *)a2 + 160))
  {
    if (*((unsigned char *)this + 160))
    {
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
      std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)a2 + 80));
      std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)((char *)a2 + 128));
      __int16 v4 = *((_WORD *)a2 + 76);
      *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
      *((_WORD *)this + 76) = v4;
      *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
    }
  }
  else if (*((unsigned char *)this + 160))
  {
    siri::dialogengine::PropertyBase::~PropertyBase((void **)this);
    *((unsigned char *)this + 160) = 0;
  }
  else
  {
    siri::dialogengine::PropertyBase::PropertyBase(this, a2);
    *(void *)this = &unk_1F21270B8;
    *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
    *((unsigned char *)this + 160) = 1;
  }
}

siri::dialogengine::PropertyBase *std::__optional_copy_base<siri::dialogengine::ObjectInput,false>::__optional_copy_base[abi:ne180100](siri::dialogengine::PropertyBase *this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 160) = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    siri::dialogengine::PropertyBase::PropertyBase(this, (const siri::dialogengine::PropertyBase *)a2);
    *(void *)this = &unk_1F21270B8;
    *((_DWORD *)this + 39) = *(_DWORD *)(a2 + 156);
    *((unsigned char *)this + 160) = 1;
  }
  return this;
}

void sub_1C5F66324(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 160)) {
    siri::dialogengine::PropertyBase::~PropertyBase((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F664C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a39) {
    siri::dialogengine::PropertyBase::~PropertyBase(&a19);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F665F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a30) {
    siri::dialogengine::PropertyBase::~PropertyBase(&a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F66694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a30) {
    siri::dialogengine::PropertyBase::~PropertyBase(&a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F668E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,std::__shared_weak_count *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  if (a62) {
    siri::dialogengine::PropertyBase::~PropertyBase(&a42);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F66AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseSpeakableString(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v88, "parse-speakable-string");
    std::operator+<char>();
    uint64_t v5 = std::string::append(&__str, ">");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = *(char *)(a1 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)a1;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 8);
    }
    int v10 = std::string::append(&v92, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v83, "</");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((v90 & 0x80u) == 0) {
      int v14 = (const std::string::value_type *)&v88;
    }
    else {
      int v14 = v88;
    }
    if ((v90 & 0x80u) == 0) {
      std::string::size_type v15 = v90;
    }
    else {
      std::string::size_type v15 = v89;
    }
    std::string::size_type v16 = std::string::append(&v75, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v79, ">");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t v87 = v18->__r_.__value_.__r.__words[2];
    long long v86 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v87 >= 0) {
      uint64_t v20 = (const char *)&v86;
    }
    else {
      uint64_t v20 = (const char *)v86;
    }
    if (v87 >= 0) {
      int v21 = HIBYTE(v87);
    }
    else {
      int v21 = DWORD2(v86);
    }
    uint64_t v22 = xmlReaderForMemory(v20, v21, 0, 0, 0);
    uint64_t v84 = v22;
    if (v22)
    {
      siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&v83, 0);
      *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v80 = 0;
      siri::dialogengine::ReadNextNode(v22, (uint64_t)&v75);
      int data = (int)v75.__r_.__value_.__l.__data_;
      LODWORD(v79.__r_.__value_.__l.__data_) = v75.__r_.__value_.__l.__data_;
      if (SHIBYTE(v80) < 0)
      {
        operator delete((void *)v79.__r_.__value_.__l.__size_);
        int data = (int)v79.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = *(_OWORD *)&v75.__r_.__value_.__r.__words[1];
      uint64_t v80 = v76;
      long long v81 = v77;
      __int16 v82 = v78;
      if (data == 1)
      {
        int v62 = 0;
        do
        {
          std::string::size_type v24 = v79.__r_.__value_.__r.__words[2];
          if (v80 >= 0) {
            std::string::size_type v25 = HIBYTE(v80);
          }
          else {
            std::string::size_type v25 = v79.__r_.__value_.__r.__words[2];
          }
          std::string::size_type v26 = v90;
          if ((v90 & 0x80u) != 0) {
            std::string::size_type v26 = v89;
          }
          if (v25 != v26) {
            goto LABEL_52;
          }
          if ((v90 & 0x80u) == 0) {
            long long v27 = (void **)&v88;
          }
          else {
            long long v27 = (void **)v88;
          }
          if (v80 < 0)
          {
            if (memcmp((const void *)v79.__r_.__value_.__l.__size_, v27, v79.__r_.__value_.__r.__words[2])) {
              goto LABEL_61;
            }
          }
          else if (HIBYTE(v80))
          {
            p_std::string::size_type size = &v79.__r_.__value_.__l.__size_;
            uint64_t v29 = HIBYTE(v80);
            while (*(unsigned __int8 *)p_size == *(unsigned __int8 *)v27)
            {
              p_std::string::size_type size = (std::string::size_type *)((char *)p_size + 1);
              long long v27 = (void **)((char *)v27 + 1);
              if (!--v29) {
                goto LABEL_152;
              }
            }
LABEL_52:
            if ((v80 & 0x8000000000000000) == 0)
            {
              std::string::size_type size = &v79.__r_.__value_.__l.__size_;
              switch(HIBYTE(v80))
              {
                case 3:
                  if (LOWORD(v79.__r_.__value_.__r.__words[1]) != 24950 || v79.__r_.__value_.__s.__data_[10] != 114) {
                    goto LABEL_111;
                  }
                  goto LABEL_67;
                case 5:
                  if (LODWORD(v79.__r_.__value_.__r.__words[1]) != 2019914787
                    || v79.__r_.__value_.__s.__data_[12] != 116)
                  {
                    goto LABEL_111;
                  }
                  goto LABEL_89;
                case 6:
                  if (LODWORD(v79.__r_.__value_.__r.__words[1]) != 1634887792
                    || WORD2(v79.__r_.__value_.__r.__words[1]) != 25971)
                  {
                    goto LABEL_111;
                  }
                  goto LABEL_98;
                case 8:
                  goto LABEL_110;
                default:
                  goto LABEL_111;
              }
            }
LABEL_61:
            switch(v24)
            {
              case 3uLL:
                if (*(_WORD *)v79.__r_.__value_.__l.__size_ != 24950
                  || *(unsigned char *)(v79.__r_.__value_.__l.__size_ + 2) != 114)
                {
                  goto LABEL_111;
                }
LABEL_67:
                siri::dialogengine::GetOuterXml(v22, &v75);
                std::string::basic_string[abi:ne180100]<0>(__p, "name");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)__p, &v92);
                if (v73 < 0) {
                  operator delete(__p[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v70, "id");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v70, &__str);
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
                std::string::size_type v33 = (char *)operator new(0x118uLL);
                *((void *)v33 + 1) = 0;
                *((void *)v33 + 2) = 0;
                *(void *)std::string::size_type v33 = &unk_1F2121AB8;
                siri::dialogengine::ChunkText::ChunkText((uint64_t)(v33 + 24), (uint64_t)&v75);
                *((void *)v33 + 3) = &unk_1F211E508;
                *((_OWORD *)v33 + 14) = 0u;
                *((_OWORD *)v33 + 15) = 0u;
                *((_OWORD *)v33 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
                v33[272] = 0;
                siri::dialogengine::ChunkVariable::SetName((uint64_t)(v33 + 24), &v92);
                std::string::operator=((std::string *)(v33 + 248), &__str);
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v94);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v33 + 200), (long long *)v94, (long long *)((char *)&v94 + 8));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)&v94 + 1));
                v33[272] = v62 > 0;
                *(void *)&long long v69 = v33 + 24;
                *((void *)&v69 + 1) = v33;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
                siri::dialogengine::ChunkList::AddChunk(a2, &v69);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
                siri::dialogengine::SkipNodeBranch(v22, (int *)&v79);
                goto LABEL_103;
              case 5uLL:
                if (*(_DWORD *)v79.__r_.__value_.__l.__size_ != 2019914787
                  || *(unsigned char *)(v79.__r_.__value_.__l.__size_ + 4) != 116)
                {
                  goto LABEL_111;
                }
LABEL_89:
                unsigned int v37 = xmlTextReaderConstValue(v22);
                if (v37) {
                  std::string::size_type v38 = (char *)v37;
                }
                else {
                  std::string::size_type v38 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&v75, v38);
                uint64_t v39 = (std::__shared_weak_count *)operator new(0xE0uLL);
                v39->__shared_owners_ = 0;
                v39->__shared_weak_owners_ = 0;
                v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21265D8;
                *(void *)&long long v74 = siri::dialogengine::ChunkText::ChunkText((uint64_t)&v39[1], (uint64_t)&v75);
                *((void *)&v74 + 1) = v39;
                siri::dialogengine::ChunkList::AddChunk(a2, &v74);
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                goto LABEL_107;
              case 6uLL:
                if (*(_DWORD *)v79.__r_.__value_.__l.__size_ != 1634887792
                  || *(_WORD *)(v79.__r_.__value_.__l.__size_ + 4) != 25971)
                {
                  goto LABEL_111;
                }
LABEL_98:
                siri::dialogengine::GetOuterXml(v22, &v75);
                std::string::basic_string[abi:ne180100]<0>(v67, "name");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v67, &v92);
                if (v68 < 0) {
                  operator delete(v67[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v65, "id");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v65, &__str);
                if (v66 < 0) {
                  operator delete(v65[0]);
                }
                std::string::size_type v33 = (char *)operator new(0x118uLL);
                *((void *)v33 + 1) = 0;
                *((void *)v33 + 2) = 0;
                *(void *)std::string::size_type v33 = &unk_1F2121B08;
                siri::dialogengine::ChunkPhrase::ChunkPhrase((uint64_t)(v33 + 24), (uint64_t)&v75);
                siri::dialogengine::ChunkPhrase::SetName((uint64_t)(v33 + 24), &v92);
                std::string::operator=((std::string *)(v33 + 248), &__str);
                v33[272] = v62 > 0;
                *(void *)&long long v64 = v33 + 24;
                *((void *)&v64 + 1) = v33;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
                siri::dialogengine::ChunkList::AddChunk(a2, &v64);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v94);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v33 + 200), (long long *)v94, (long long *)((char *)&v94 + 8));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)&v94 + 1));
                siri::dialogengine::SkipNodeBranch(v22, (int *)&v79);
LABEL_103:
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v92.__r_.__value_.__l.__data_);
                }
LABEL_107:
                if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  break;
                }
                long long v41 = (void *)v75.__r_.__value_.__r.__words[0];
                goto LABEL_151;
              case 8uLL:
                std::string::size_type size = (void *)v79.__r_.__value_.__l.__size_;
LABEL_110:
                if (*size != 0x746E656D6D6F6323) {
                  goto LABEL_111;
                }
                break;
              default:
LABEL_111:
                if (HIBYTE(v82) && !(_BYTE)v82)
                {
                  std::operator+<char>();
                  int v42 = std::string::append(&v75, ">");
                  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v43;
                  v42->__r_.__value_.__l.__size_ = 0;
                  v42->__r_.__value_.__r.__words[2] = 0;
                  v42->__r_.__value_.__r.__words[0] = 0;
                  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_138;
                  }
                  goto LABEL_137;
                }
                siri::dialogengine::GetOuterXml(v22, &v75);
                memset(&__str, 0, sizeof(__str));
                if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v44 = &v75;
                }
                else {
                  long long v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
                }
                if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
                }
                if (v45)
                {
                  char v46 = 0;
                  do
                  {
                    std::string::value_type v47 = v44->__r_.__value_.__s.__data_[0];
                    std::string::push_back(&__str, v44->__r_.__value_.__s.__data_[0]);
                    if (!((v47 != 62) | v46 & 1)) {
                      break;
                    }
                    v46 ^= v47 == 34;
                    long long v44 = (std::string *)((char *)v44 + 1);
                    --v45;
                  }
                  while (v45);
                }
                if (HIBYTE(v82)) {
                  goto LABEL_136;
                }
                std::string::basic_string[abi:ne180100]<0>(&v92, "/>");
                BOOL v48 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v92);
                BOOL v49 = v48;
                if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v92.__r_.__value_.__l.__data_);
                  if (!v49) {
                    goto LABEL_136;
                  }
                }
                else if (!v48)
                {
                  goto LABEL_136;
                }
                std::string::size_type v50 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v50 = __str.__r_.__value_.__l.__size_;
                }
                uint64_t v51 = std::string::basic_string(&v92, &__str, 0, v50 - 2, (std::allocator<char> *)&v93);
                BOOL v52 = std::string::append(v51, ">");
                std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
                *(void *)&long long v94 = v52->__r_.__value_.__l.__size_;
                *(void *)((char *)&v94 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
                v52->__r_.__value_.__l.__size_ = 0;
                v52->__r_.__value_.__r.__words[2] = 0;
                v52->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                __str.__r_.__value_.__r.__words[0] = v53;
                __str.__r_.__value_.__l.__size_ = v94;
                *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v94 + 7);
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = v54;
                if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v92.__r_.__value_.__l.__data_);
                }
LABEL_136:
                if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_138;
                }
LABEL_137:
                operator delete(v75.__r_.__value_.__l.__data_);
LABEL_138:
                std::string v55 = (char *)operator new(0x100uLL);
                *((void *)v55 + 1) = 0;
                *((void *)v55 + 2) = 0;
                *(void *)std::string v55 = &unk_1F2121B58;
                siri::dialogengine::ChunkText::ChunkText((uint64_t)(v55 + 24), (uint64_t)&__str);
                *((void *)v55 + 28) = 0;
                *((void *)v55 + 3) = &unk_1F211EAB0;
                *((void *)v55 + 29) = 0;
                *((void *)v55 + 30) = 0;
                *((_WORD *)v55 + 124) = 0;
                std::string::operator=((std::string *)(v55 + 224), (const std::string *)&v79.__r_.__value_.__r.__words[1]);
                *((_WORD *)v55 + 124) = v82;
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v75);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v55 + 200), (long long *)v75.__r_.__value_.__l.__data_, (long long *)&v75.__r_.__value_.__r.__words[1]);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v75.__r_.__value_.__l.__size_);
                *(void *)&long long v63 = v55 + 24;
                *((void *)&v63 + 1) = v55;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
                siri::dialogengine::ChunkList::AddChunk(a2, &v63);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
                if (SHIBYTE(v80) < 0)
                {
                  if (v79.__r_.__value_.__r.__words[2] != 3) {
                    goto LABEL_149;
                  }
                  std::string v56 = (std::string::size_type *)v79.__r_.__value_.__l.__size_;
                }
                else
                {
                  std::string v56 = &v79.__r_.__value_.__l.__size_;
                  if (SHIBYTE(v80) != 3) {
                    goto LABEL_149;
                  }
                }
                int v57 = *(unsigned __int16 *)v56;
                int v58 = *((unsigned __int8 *)v56 + 2);
                if (v57 == 28783 && v58 == 116) {
                  int v62 = v62 + v82 - SHIBYTE(v82);
                }
LABEL_149:
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  long long v41 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_151:
                  operator delete(v41);
                }
                break;
            }
          }
LABEL_152:
          siri::dialogengine::ReadNextNode(v22, (uint64_t)&v75);
          int v60 = (int)v75.__r_.__value_.__l.__data_;
          LODWORD(v79.__r_.__value_.__l.__data_) = v75.__r_.__value_.__l.__data_;
          if (SHIBYTE(v80) < 0)
          {
            operator delete((void *)v79.__r_.__value_.__l.__size_);
            int v60 = (int)v79.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = *(_OWORD *)&v75.__r_.__value_.__r.__words[1];
          uint64_t v80 = v76;
          long long v81 = v77;
          __int16 v82 = v78;
        }
        while (v60 == 1);
      }
      if (SHIBYTE(v80) < 0) {
        operator delete((void *)v79.__r_.__value_.__l.__size_);
      }
      siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&v83);
      uint64_t v84 = 0;
      xmlFreeTextReader(v22);
    }
    if (SHIBYTE(v87) < 0) {
      operator delete((void *)v86);
    }
    if ((char)v90 < 0) {
      operator delete(v88);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v61 = (char *)operator new(0xE0uLL);
    *(_OWORD *)(v61 + 8) = 0u;
    *(void *)uint64_t v61 = &unk_1F21265D8;
    *((void *)v61 + 3) = &unk_1F21244A0;
    *((_OWORD *)v61 + 2) = 0u;
    *((_OWORD *)v61 + 3) = 0u;
    *((_OWORD *)v61 + 4) = 0u;
    *((_OWORD *)v61 + 5) = 0u;
    *((_OWORD *)v61 + 6) = 0u;
    *((_OWORD *)v61 + 7) = 0u;
    *((_OWORD *)v61 + 8) = 0u;
    *((_OWORD *)v61 + 9) = 0u;
    *((_OWORD *)v61 + 10) = 0u;
    *((_OWORD *)v61 + 11) = 0u;
    *((_OWORD *)v61 + 13) = 0u;
    *((void *)v61 + 24) = 0;
    *((void *)v61 + 25) = v61 + 208;
    *(void *)&long long v91 = v61 + 24;
    *((void *)&v91 + 1) = v61;
    siri::dialogengine::ChunkList::AddChunk(a2, &v91);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61);
  }
}

void sub_1C5F677AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,xmlTextReader *a60)
{
  if (*(char *)(v60 - 137) < 0) {
    operator delete(*(void **)(v60 - 160));
  }
  if (*(char *)(v60 - 233) < 0) {
    operator delete(*(void **)(v60 - 256));
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&a55);
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100](&a60);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  if (*(char *)(v60 - 201) < 0) {
    operator delete(*(void **)(v60 - 224));
  }
  if (*(char *)(v60 - 177) < 0) {
    operator delete(*(void **)(v60 - 200));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::SkipNodeBranch(siri::dialogengine *this, int *a2)
{
  __int16 v4 = (unsigned __int8 *)(a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v19.__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
  }
  if (*((unsigned char *)a2 + 49)) {
    goto LABEL_5;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v19.__r_.__value_.__l.__size_ == 8)
    {
      uint64_t v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
LABEL_13:
      if (v5->__r_.__value_.__r.__words[0] == 0x746E656D6D6F6323) {
        goto LABEL_5;
      }
    }
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) == 8)
  {
    uint64_t v5 = &v19;
    goto LABEL_13;
  }
  siri::dialogengine::ReadNextNode(this, (uint64_t)&v14);
  int v6 = v14;
  *a2 = v14;
  if (*((char *)a2 + 31) < 0)
  {
    operator delete(*((void **)a2 + 1));
    int v6 = *a2;
  }
  *(_OWORD *)__int16 v4 = v15;
  *((void *)v4 + 2) = v16;
  *((_OWORD *)a2 + 2) = v17;
  *((_WORD *)a2 + 24) = v18;
  if (v6 == 1)
  {
    int v7 = 1;
    do
    {
      uint64_t v8 = *((unsigned __int8 *)a2 + 31);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *((unsigned __int8 *)a2 + 31);
      }
      else {
        uint64_t v9 = *((void *)a2 + 2);
      }
      std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
      }
      if (v9 == size)
      {
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v11 = &v19;
        }
        else {
          long long v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, v11, *((void *)a2 + 2)))
          {
LABEL_34:
            int v7 = v7 + *((unsigned __int8 *)a2 + 48) - *((char *)a2 + 49);
            if (v7 < 1) {
              break;
            }
          }
        }
        else
        {
          if (!*((unsigned char *)a2 + 31)) {
            goto LABEL_34;
          }
          uint64_t v12 = v4;
          while (*v12 == v11->__r_.__value_.__s.__data_[0])
          {
            ++v12;
            long long v11 = (std::string *)((char *)v11 + 1);
            if (!--v8) {
              goto LABEL_34;
            }
          }
        }
      }
      siri::dialogengine::ReadNextNode(this, (uint64_t)&v14);
      int v13 = v14;
      *a2 = v14;
      if (*((char *)a2 + 31) < 0)
      {
        operator delete(*((void **)a2 + 1));
        int v13 = *a2;
      }
      *(_OWORD *)__int16 v4 = v15;
      *((void *)v4 + 2) = v16;
      *((_OWORD *)a2 + 2) = v17;
      *((_WORD *)a2 + 24) = v18;
    }
    while (v13 == 1);
  }
LABEL_5:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F67CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100](xmlTextReader **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    xmlFreeTextReader(v2);
  }
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void siri::dialogengine::ParseXmlFile(Context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) >= 0) {
    int v6 = (const char *)a2;
  }
  else {
    int v6 = *(const char **)a2;
  }
  int v7 = xmlReaderForFile(v6, 0, 0);
  if (v7)
  {
    siri::dialogengine::ParseXmlInternal((long long *)a3, a1, v7, a2);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v9 < 0) {
      operator delete(__p);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

void sub_1C5F67FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseXmlInternal(long long *a1, Context *a2, siri::dialogengine *a3, uint64_t a4)
{
  __int16 v4 = a3;
  v553 = a3;
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: ParseXmlInternal passed a NULL context.", 0);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    goto LABEL_1471;
  }
  uint64_t v9 = *((void *)a2 + 63);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 64);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (v9)
    {
LABEL_11:
      uint64_t v12 = *((void *)a2 + 64);
      *(void *)&long long v552 = *((void *)a2 + 63);
      *((void *)&v552 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_13;
    }
LABEL_8:
    int v10 = (std::__shared_weak_count *)operator new(0x320uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123380;
    bzero(&v10[1], 0x308uLL);
    siri::dialogengine::File::File((siri::dialogengine::File *)&v10[1]);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v11 = (std::__shared_weak_count *)*((void *)a2 + 64);
    *((void *)a2 + 63) = v10 + 1;
    *((void *)a2 + 64) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_11;
  }
  if (!v9) {
    goto LABEL_8;
  }
  long long v552 = *((unint64_t *)a2 + 63);
LABEL_13:
  long long __p = 0uLL;
  v549 = 0;
  v545 = 0;
  v544 = 0;
  unint64_t v546 = 0;
  uint64_t v542 = 0;
  uint64_t v541 = 0;
  uint64_t v543 = 0;
  int v13 = *((_DWORD *)a2 + 2);
  siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v538, a2);
  int v476 = v13;
  v478 = a2;
  siri::dialogengine::ReadNextNode(v4, (uint64_t)&v518);
  p_p = &__p;
  unsigned int data = v518.__r_.__value_.__l.__data_;
  unsigned int v547 = v518.__r_.__value_.__l.__data_;
  if (SHIBYTE(v549) < 0)
  {
    operator delete((void *)__p);
    unsigned int data = v547;
  }
  long long __p = *(_OWORD *)&v518.__r_.__value_.__r.__words[1];
  v549 = v519;
  long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
  __int16 v551 = v520.__r_.__value_.__r.__words[2];
  if (data != 1) {
    goto LABEL_1461;
  }
  char v470 = 0;
  char v17 = 1;
  reader = v4;
  while (2)
  {
    if (v17)
    {
      std::string::basic_string[abi:ne180100]<0>(&v571, "cat");
      if (v476 == 1) {
        MEMORY[0x1C8796900](&v571, "visualcat");
      }
      long long v18 = v552;
      if (*((void *)&v552 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v552 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v569, "5.2");
      siri::dialogengine::GetMajorVersion(&v569, &v570);
      if (SHIBYTE(v549) < 0)
      {
        if (*((void *)&__p + 1) != 3)
        {
LABEL_31:
          siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
          BOOL v23 = std::string::insert(&__str, 0, "Root node in XML file is not <cat> ");
          std::string v518 = *v23;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::File::AddValidationError(v18, (long long *)&v518, 0);
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          char v24 = 0;
          unsigned int v547 = -1;
          goto LABEL_36;
        }
        std::string v19 = (unsigned __int16 *)__p;
      }
      else
      {
        std::string v19 = (unsigned __int16 *)p_p;
        if (SHIBYTE(v549) != 3) {
          goto LABEL_31;
        }
      }
      int v20 = *v19;
      int v21 = *((unsigned __int8 *)v19 + 2);
      if (v20 != 24931 || v21 != 116) {
        goto LABEL_31;
      }
      std::string::basic_string[abi:ne180100]<0>(&v578, "xmlns");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v578, &__str);
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v518);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v578.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::StringSplit((unsigned __int8 *)&v518, ":", &__str);
      if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      {
        siri::dialogengine::GetXmlLineString((uint64_t)&v547, &v576);
        long long v94 = std::string::insert(&v576, 0, "XML <cat> element does not specify an xmlns attribute ");
        std::string v577 = *v94;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v18, (long long *)&v577, 0);
        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v577.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v576.__r_.__value_.__l.__data_);
        }
        char v24 = 0;
        unsigned int v547 = -1;
        goto LABEL_432;
      }
      if (*(char *)(__str.__r_.__value_.__l.__size_ - 25) < 0)
      {
        std::string::__init_copy_ctor_external(&v577, *(const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 48), *(void *)(__str.__r_.__value_.__l.__size_ - 40));
      }
      else
      {
        long long v27 = *(_OWORD *)(__str.__r_.__value_.__l.__size_ - 48);
        v577.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__l.__size_ - 32);
        *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v27;
      }
      if (!siri::dialogengine::StringsEqual((uint64_t)&v577, (uint64_t)&v571))
      {
        std::operator+<char>();
        uint64_t v103 = std::string::append(&v573, "\" not \"");
        long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v574.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v574.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        if ((v571.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v105 = &v571;
        }
        else {
          int v105 = (std::string *)v571.__r_.__value_.__r.__words[0];
        }
        if ((v571.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v571.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v571.__r_.__value_.__l.__size_;
        }
        long long v107 = std::string::append(&v574, (const std::string::value_type *)v105, size);
        long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        v575.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v575.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        long long v109 = std::string::append(&v575, "\"");
        std::string v576 = *v109;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v18, (long long *)&v576, 0);
        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v576.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v575.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v574.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v573.__r_.__value_.__l.__data_);
        }
        char v24 = 0;
        unsigned int v547 = -1;
        goto LABEL_430;
      }
      if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v571.__r_.__value_.__l.__size_ == 9)
        {
          uint64_t v102 = (std::string *)v571.__r_.__value_.__r.__words[0];
LABEL_380:
          std::string::size_type v111 = v102->__r_.__value_.__r.__words[0];
          int v112 = v102->__r_.__value_.__s.__data_[8];
          if (v111 == 0x61636C6175736976 && v112 == 116) {
            goto LABEL_409;
          }
        }
      }
      else if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) == 9)
      {
        uint64_t v102 = &v571;
        goto LABEL_380;
      }
      unsigned int v114 = (const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 24);
      if (*(char *)(__str.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v576, *v114, *(void *)(__str.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        long long v115 = *(_OWORD *)v114;
        v576.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v115;
      }
      siri::dialogengine::GetMajorVersion(&v576, &v575);
      if (siri::dialogengine::VersionGreaterThan((uint64_t)&v575, (uint64_t)&v570))
      {
        std::operator+<char>();
        long long v116 = std::string::append(&v572, ") is too new: ");
        long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v573.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v573.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        int v118 = *(char *)(a4 + 23);
        if (v118 >= 0) {
          unint64_t v119 = (const std::string::value_type *)a4;
        }
        else {
          unint64_t v119 = *(const std::string::value_type **)a4;
        }
        if (v118 >= 0) {
          std::string::size_type v120 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          std::string::size_type v120 = *(void *)(a4 + 8);
        }
        std::string::size_type v121 = std::string::append(&v573, v119, v120);
        std::string v574 = *v121;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v18, (long long *)&v574, 0);
        if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v574.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v573.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v572.__r_.__value_.__l.__data_);
        }
        unsigned int v547 = -1;
        if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v575.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v576.__r_.__value_.__l.__data_);
        }
        char v24 = 0;
LABEL_430:
        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v577.__r_.__value_.__l.__data_);
        }
LABEL_432:
        v577.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v577);
        if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v518.__r_.__value_.__l.__data_);
        }
LABEL_36:
        if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v570.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v569.__r_.__value_.__l.__data_);
          if (!*((void *)&v18 + 1))
          {
LABEL_41:
            if (v24)
            {
              std::string::basic_string[abi:ne180100]<0>(v536, "xmlns");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v536, &__str);
              siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ":", &v518);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (v537 < 0) {
                operator delete(v536[0]);
              }
              if (v518.__r_.__value_.__l.__size_ != v518.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v25 = (const std::string::value_type **)(v518.__r_.__value_.__l.__size_ - 24);
                if (*(char *)(v518.__r_.__value_.__l.__size_ - 1) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *v25, *(void *)(v518.__r_.__value_.__l.__size_ - 16));
                }
                else
                {
                  long long v26 = *(_OWORD *)v25;
                  __str.__r_.__value_.__r.__words[2] = *(void *)(v518.__r_.__value_.__l.__size_ - 8);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
                }
                if (siri::dialogengine::IsValidVersionNumber((char *)&__str))
                {
                  std::string::operator=((std::string *)(v552 + 152), &__str);
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v578, "CAT file does not define a valid version number in an xmlns attribute");
                  siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v578, 0);
                  if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v578.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v518;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            }
            if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v571.__r_.__value_.__l.__data_);
            }
            if ((v24 & 1) == 0) {
              goto LABEL_1460;
            }
            goto LABEL_69;
          }
        }
        else if (!*((void *)&v18 + 1))
        {
          goto LABEL_41;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
        goto LABEL_41;
      }
      if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v575.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v576.__r_.__value_.__l.__data_);
      }
LABEL_409:
      std::string::basic_string[abi:ne180100]<0>(&v574, "id");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v574, &v575);
      siri::dialogengine::StringTrim(" \t\n\r", &v575, &v576);
      if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v575.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v574.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v572, "locale");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v572, &v573);
      siri::dialogengine::StringTrim(" \t\n\r", &v573, &v575);
      if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v573.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v572.__r_.__value_.__l.__data_);
      }
      std::string::size_type v122 = HIBYTE(v576.__r_.__value_.__r.__words[2]);
      if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v122 = v576.__r_.__value_.__l.__size_;
      }
      if (v122) {
        std::string::operator=((std::string *)(v18 + 104), &v576);
      }
      std::string::size_type v123 = HIBYTE(v575.__r_.__value_.__r.__words[2]);
      char v124 = HIBYTE(v575.__r_.__value_.__r.__words[2]);
      if ((v575.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v123 = v575.__r_.__value_.__l.__size_;
      }
      if (v123)
      {
        siri::dialogengine::File::SetLocale(v18, &v575);
        char v124 = HIBYTE(v575.__r_.__value_.__r.__words[2]);
      }
      if (v124 < 0) {
        operator delete(v575.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v576.__r_.__value_.__l.__data_);
      }
      char v24 = 1;
      goto LABEL_430;
    }
LABEL_69:
    if (SHIBYTE(v549) < 0)
    {
      if (*((void *)&__p + 1) != 8) {
        goto LABEL_77;
      }
      std::string v28 = (long long *)__p;
    }
    else
    {
      std::string v28 = p_p;
      if (SHIBYTE(v549) != 8) {
        goto LABEL_77;
      }
    }
    if (*(void *)v28 == 0x746E656D6D6F6323)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "XML comments are not supported in CAT files. Use a 'note' attribute or <meta/> element instead");
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, *((uint64_t *)&v550 + 1), (const std::string *)a4);
      siri::dialogengine::Context::AddValidationWarning((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
LABEL_77:
    if (!(_BYTE)v551) {
      goto LABEL_1064;
    }
    uint64_t v29 = v545;
    if ((unint64_t)v545 >= v546)
    {
      std::string::size_type v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v544, p_p);
    }
    else
    {
      if (SHIBYTE(v549) < 0)
      {
        std::string::__init_copy_ctor_external(v545, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        long long v30 = *p_p;
        v545->__r_.__value_.__r.__words[2] = *((void *)p_p + 2);
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
      }
      std::string::size_type v31 = v29 + 1;
    }
    v545 = v31;
    int v32 = HIBYTE(v549);
    if ((HIBYTE(v549) & 0x80) != 0)
    {
      uint64_t v34 = *((void *)&__p + 1);
      if (*((void *)&__p + 1) != 4) {
        goto LABEL_103;
      }
      std::string::size_type v33 = (long long *)__p;
LABEL_89:
      if (*(_DWORD *)v33 != 1635018093)
      {
LABEL_90:
        if ((SHIBYTE(v549) & 0x80000000) == 0)
        {
          int v32 = HIBYTE(v549);
          goto LABEL_92;
        }
        uint64_t v34 = *((void *)&__p + 1);
LABEL_103:
        if (v34 != 9) {
          goto LABEL_109;
        }
        long long v35 = (long long *)__p;
        goto LABEL_105;
      }
      siri::dialogengine::EnclosingElement(&v518, (uint64_t)v544, (uint64_t)v31);
      if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string v79 = (void *)v518.__r_.__value_.__r.__words[0];
        if (v518.__r_.__value_.__l.__size_ != 3)
        {
LABEL_1174:
          operator delete(v79);
          goto LABEL_90;
        }
        BOOL v81 = *(_WORD *)v518.__r_.__value_.__l.__data_ != 24931
           || *(unsigned char *)(v518.__r_.__value_.__r.__words[0] + 2) != 116;
        operator delete(v518.__r_.__value_.__l.__data_);
        if (v81) {
          goto LABEL_90;
        }
      }
      else
      {
        if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) != 3) {
          goto LABEL_90;
        }
        if (LOWORD(v518.__r_.__value_.__l.__data_) != 24931 || v518.__r_.__value_.__s.__data_[2] != 116) {
          goto LABEL_90;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v534, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v534, &v518);
      siri::dialogengine::StringToLower((uint64_t)&v518, (uint64_t)&__str);
      if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v518.__r_.__value_.__l.__data_);
      }
      if (v535 < 0) {
        operator delete(v534[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v532, "value");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v532, &v578);
      if (v533 < 0) {
        operator delete(v532[0]);
      }
      uint64_t v82 = v552;
      siri::dialogengine::File::GetMetadata(v552, (uint64_t)&__str, (uint64_t *)&v577);
      if (&v577.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v577, (const void **)&v578.__r_.__value_.__l.__data_))
      {
        siri::dialogengine::File::AddMetadata(v82, (uint64_t)&__str, (const void **)&v578.__r_.__value_.__l.__data_);
      }
      else
      {
        siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, *((uint64_t *)&v550 + 1), (const std::string *)a4);
        std::operator+<char>();
        std::string v83 = std::string::append(&v575, "'.");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v576.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v478, (long long *)&v576, (uint64_t)&v518);
        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v576.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v575.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)&v577, (char *)v577.__r_.__value_.__l.__size_);
      if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v578.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_90;
      }
      std::string v79 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_1174;
    }
    std::string::size_type v33 = p_p;
    if (HIBYTE(v549) == 4) {
      goto LABEL_89;
    }
LABEL_92:
    long long v35 = p_p;
    if (v32 != 9) {
      goto LABEL_109;
    }
LABEL_105:
    uint64_t v37 = *(void *)v35;
    int v38 = *((unsigned __int8 *)v35 + 8);
    if (v37 != 0x6574656D61726170 || v38 != 114) {
      goto LABEL_109;
    }
    siri::dialogengine::EnclosingElement(&v518, (uint64_t)v544, (uint64_t)v545);
    if ((SHIBYTE(v518.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) != 10) {
        goto LABEL_109;
      }
      if (v518.__r_.__value_.__r.__words[0] != 0x6574656D61726170
        || LOWORD(v518.__r_.__value_.__r.__words[1]) != 29554)
      {
        goto LABEL_109;
      }
      goto LABEL_251;
    }
    if (v518.__r_.__value_.__l.__size_ != 10)
    {
      operator delete(v518.__r_.__value_.__l.__data_);
      goto LABEL_109;
    }
    BOOL v86 = *(void *)v518.__r_.__value_.__l.__data_ != 0x6574656D61726170
       || *(_WORD *)(v518.__r_.__value_.__r.__words[0] + 8) != 29554;
    operator delete(v518.__r_.__value_.__l.__data_);
    if (!v86)
    {
LABEL_251:
      siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)&v518);
      std::string::basic_string[abi:ne180100]<0>(v516, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v516, &__str);
      std::string::operator=((std::string *)&v518.__r_.__value_.__r.__words[1], &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v517 < 0) {
        operator delete(v516[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v514, "type");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v514, &__str);
      std::string::operator=(&v520, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v515 < 0) {
        operator delete(v514[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v512, "description");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v512, &__str);
      std::string::operator=(&v521, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v513 < 0) {
        operator delete(v512[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v510, "semanticConcept");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v510, &__str);
      std::string::operator=(&v529, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v511 < 0) {
        operator delete(v510[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v508, "sampleValue");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v508, &__str);
      std::string::operator=(&v522, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v509 < 0) {
        operator delete(v508[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v506, "deprecated");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v506, &__str);
      std::string::operator=(&v525, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v507 < 0) {
        operator delete(v506[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v504, "valueFromCat");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v504, &__str);
      std::string::operator=(v530, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v505 < 0) {
        operator delete(v504[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v502, "profanityFilter");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v502, &__str);
      if (v503 < 0) {
        operator delete(v502[0]);
      }
      std::string::size_type v87 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v87 = __str.__r_.__value_.__l.__size_;
      }
      if (v87) {
        char v526 = siri::dialogengine::StringToBool(&__str);
      }
      std::string::basic_string[abi:ne180100]<0>(v500, "optional");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v500, &v578);
      if (v501 < 0) {
        operator delete(v500[0]);
      }
      std::string::size_type v88 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
      if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v88 = v578.__r_.__value_.__l.__size_;
      }
      if (v88) {
        char v527 = siri::dialogengine::StringToBool(&v578);
      }
      std::string::basic_string[abi:ne180100]<0>(v498, "redacted");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v498, &v577);
      if (v499 < 0) {
        operator delete(v498[0]);
      }
      std::string::size_type v89 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
      if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v89 = v577.__r_.__value_.__l.__size_;
      }
      if (v89) {
        char v528 = siri::dialogengine::StringToBool(&v577);
      }
      v531[1] = *((void **)&v550 + 1);
      siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)v531, (const std::string *)a4);
      siri::dialogengine::File::AddParameter((siri::dialogengine::File *)v552, (const siri::dialogengine::Parameter *)&v518);
      if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v577.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v578.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v531[8] = &unk_1F21271E8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v531[10]);
      siri::dialogengine::LineNumberBase::~LineNumberBase(v531);
      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v518.__r_.__value_.__l.__data_);
    }
LABEL_109:
    int v40 = HIBYTE(v549);
    if (SHIBYTE(v549) < 0)
    {
      uint64_t v42 = *((void *)&__p + 1);
      if (*((void *)&__p + 1) != 9) {
        goto LABEL_139;
      }
      long long v41 = (long long *)__p;
    }
    else
    {
      long long v41 = p_p;
      if (HIBYTE(v549) != 9)
      {
LABEL_119:
        if (v40 != 7)
        {
          long long v563 = 0uLL;
          long long v562 = 0uLL;
LABEL_153:
          int v55 = v40 - 3;
          std::string v56 = p_p;
          switch(v55)
          {
            case 0:
              if ((unsigned __int16)__p == 27745 && BYTE2(__p) == 108) {
                goto LABEL_168;
              }
              goto LABEL_527;
            case 2:
              if (__p == 1936877926 && BYTE4(__p) == 116) {
                goto LABEL_207;
              }
              goto LABEL_527;
            case 3:
              if (__p == 1684955506 && WORD2(__p) == 28015) {
                goto LABEL_201;
              }
              if (__p != 1953068915 || WORD2(__p) != 26723) {
                goto LABEL_527;
              }
              goto LABEL_200;
            case 5:
              goto LABEL_210;
            default:
              goto LABEL_527;
          }
        }
        char v46 = (int *)p_p;
        goto LABEL_141;
      }
    }
    uint64_t v43 = *(void *)v41;
    int v44 = *((unsigned __int8 *)v41 + 8);
    if (v43 != 0x6F697469646E6F63 || v44 != 110) {
      goto LABEL_118;
    }
    siri::dialogengine::EnclosingElement(&v518, (uint64_t)v544, (uint64_t)v545);
    if ((SHIBYTE(v518.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) != 10) {
        goto LABEL_118;
      }
      if (v518.__r_.__value_.__r.__words[0] != 0x6F697469646E6F63
        || LOWORD(v518.__r_.__value_.__r.__words[1]) != 29550)
      {
        goto LABEL_118;
      }
LABEL_312:
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ConditionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v569);
      std::string::basic_string[abi:ne180100]<0>(&v577, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v577, &v578);
      if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v577.__r_.__value_.__l.__data_);
      }
      std::string v92 = (std::string *)v569.__r_.__value_.__r.__words[0];
      std::string::operator=((std::string *)(v569.__r_.__value_.__r.__words[0] + 96), &v578);
      std::string::basic_string[abi:ne180100]<0>(&v576, "note");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v576, &v518);
      std::string::operator=(v92 + 5, &v518);
      if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v518.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v576.__r_.__value_.__l.__data_);
      }
      v92->__r_.__value_.__l.__size_ = *((void *)&v550 + 1);
      siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)v92, (const std::string *)a4);
      unsigned int v93 = v547;
      LODWORD(v518.__r_.__value_.__l.__data_) = v547;
      if (SHIBYTE(v549) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v518.__r_.__value_.__r.__words[1], (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        unsigned int v93 = v518.__r_.__value_.__l.__data_;
      }
      else
      {
        *(_OWORD *)&v518.__r_.__value_.__r.__words[1] = *p_p;
        v519 = (void *)*((void *)p_p + 2);
      }
      *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v550;
      LOWORD(v520.__r_.__value_.__r.__words[2]) = v551;
      memset(&v575, 0, sizeof(v575));
      if (v93 == -1)
      {
LABEL_1311:
        unsigned int v547 = v93;
        std::string::operator=((std::string *)p_p, (const std::string *)&v518.__r_.__value_.__r.__words[1]);
        long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
        __int16 v551 = v520.__r_.__value_.__r.__words[2];
        long long v497 = *(_OWORD *)&v569.__r_.__value_.__l.__data_;
        v421 = &v569;
        goto LABEL_1318;
      }
      uint64_t v391 = 1;
      while (2)
      {
        int v392 = v520.__r_.__value_.__s.__data_[17];
        if (v520.__r_.__value_.__s.__data_[17])
        {
          if ((HIBYTE(v519) & 0x80) == 0)
          {
            int v393 = 0;
            p_std::string::size_type size = (std::string::size_type)&v518.__r_.__value_.__l.__size_;
            std::string::size_type v395 = (std::string::size_type)&v518.__r_.__value_.__l.__size_;
            switch(HIBYTE(v519))
            {
              case 2:
                goto LABEL_1214;
              case 3:
                goto LABEL_1204;
              case 9:
                goto LABEL_1183;
              case 0xA:
                goto LABEL_1197;
              default:
                goto LABEL_1216;
            }
          }
          std::string::size_type v396 = v518.__r_.__value_.__r.__words[2];
          if (v518.__r_.__value_.__r.__words[2] == 9)
          {
            std::string::size_type v395 = v518.__r_.__value_.__l.__size_;
LABEL_1183:
            if (*(void *)v395 == 0x6F697469646E6F63 && *(unsigned char *)(v395 + 8) == 110)
            {
LABEL_1310:
              if (v391) {
                goto LABEL_1311;
              }
              std::operator+<char>();
              v422 = std::string::append(&v570, "'. Possibly old style?");
              long long v423 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v422->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v423;
              v422->__r_.__value_.__l.__size_ = 0;
              v422->__r_.__value_.__r.__words[2] = 0;
              v422->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)v92);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v570.__r_.__value_.__l.__data_);
              }
              v421 = (std::string *)&v497;
LABEL_1318:
              v421->__r_.__value_.__r.__words[0] = 0;
              v421->__r_.__value_.__l.__size_ = 0;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v575;
              std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              if (SHIBYTE(v519) < 0) {
                operator delete((void *)v518.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v578.__r_.__value_.__l.__data_);
              }
              if (v569.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v569.__r_.__value_.__l.__size_);
              }
              uint64_t v424 = v497;
              if ((void)v497)
              {
                uint64_t v425 = v552;
                v426 = (_OWORD *)(v497 + 96);
                if (*(char *)(v497 + 119) < 0)
                {
                  std::string::__init_copy_ctor_external(&v518, *(const std::string::value_type **)(v497 + 96), *(void *)(v497 + 104));
                }
                else
                {
                  *(_OWORD *)&v518.__r_.__value_.__l.__data_ = *v426;
                  v518.__r_.__value_.__r.__words[2] = *(void *)(v497 + 112);
                }
                uint64_t v427 = std::__tree<std::string>::find<std::string>(v425 + 272, (const void **)&v518.__r_.__value_.__l.__data_);
                if (v425 + 280 == v427)
                {
                  BOOL v430 = 1;
                }
                else
                {
                  uint64_t v429 = *(void *)(v427 + 56);
                  v428 = *(std::__shared_weak_count **)(v427 + 64);
                  if (v428)
                  {
                    atomic_fetch_add_explicit(&v428->__shared_owners_, 1uLL, memory_order_relaxed);
                    BOOL v430 = v429 == 0;
                    std::__shared_weak_count::__release_shared[abi:ne180100](v428);
                  }
                  else
                  {
                    BOOL v430 = v429 == 0;
                  }
                }
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v518.__r_.__value_.__l.__data_);
                  if (v430) {
                    goto LABEL_1447;
                  }
                }
                else if (v430)
                {
                  goto LABEL_1447;
                }
                if (*(char *)(v424 + 119) < 0)
                {
                  std::string::__init_copy_ctor_external(&v578, *(const std::string::value_type **)(v424 + 96), *(void *)(v424 + 104));
                }
                else
                {
                  *(_OWORD *)&v578.__r_.__value_.__l.__data_ = *v426;
                  v578.__r_.__value_.__r.__words[2] = *(void *)(v424 + 112);
                }
                v456 = std::string::insert(&v578, 0, "Duplicate condition name: '");
                long long v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v457;
                v456->__r_.__value_.__l.__size_ = 0;
                v456->__r_.__value_.__r.__words[2] = 0;
                v456->__r_.__value_.__r.__words[0] = 0;
                v458 = std::string::append(&__str, "'.");
                long long v459 = *(_OWORD *)&v458->__r_.__value_.__l.__data_;
                v518.__r_.__value_.__r.__words[2] = v458->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v459;
                v458->__r_.__value_.__l.__size_ = 0;
                v458->__r_.__value_.__r.__words[2] = 0;
                v458->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, v424);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v578.__r_.__value_.__l.__data_);
                }
LABEL_1447:
                v460 = (std::__shared_weak_count *)*((void *)&v497 + 1);
                v496[0] = v424;
                v496[1] = *((void *)&v497 + 1);
                if (*((void *)&v497 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v497 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::File::AddCondition(v425, (uint64_t)v496);
                if (v460)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v460);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v460);
                }
                goto LABEL_118;
              }
              unsigned int v547 = -1;
              if (*((void *)&v497 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v497 + 1));
              }
LABEL_1460:
              unsigned int data = v547;
              goto LABEL_1461;
            }
            goto LABEL_1187;
          }
LABEL_1193:
          switch(v396)
          {
            case 2uLL:
              if (*(_WORD *)v518.__r_.__value_.__l.__size_ != 29295) {
                goto LABEL_1260;
              }
              break;
            case 3uLL:
              if ((*(_WORD *)v518.__r_.__value_.__l.__size_ != 28526
                 || *(unsigned char *)(v518.__r_.__value_.__l.__size_ + 2) != 116)
                && (*(_WORD *)v518.__r_.__value_.__l.__size_ != 28257
                 || *(unsigned char *)(v518.__r_.__value_.__l.__size_ + 2) != 100))
              {
                goto LABEL_1260;
              }
              break;
            case 0xAuLL:
              int v393 = 1;
              p_std::string::size_type size = v518.__r_.__value_.__l.__size_;
LABEL_1197:
              BOOL v398 = v520.__r_.__value_.__s.__data_[16] == 0;
              if (*(void *)p_size ^ 0x6973736572707865 | *(unsigned __int16 *)(p_size + 8) ^ 0x6E6FLL) {
                BOOL v399 = 1;
              }
              else {
                BOOL v399 = v520.__r_.__value_.__s.__data_[16] == 0;
              }
              if (!v399)
              {
                v404 = (char *)operator new(0xF8uLL);
                *(_OWORD *)(v404 + 8) = 0u;
                *(void *)v404 = &unk_1F21228A0;
                *(_OWORD *)(v404 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
                uint64_t v405 = (uint64_t)(v404 + 24);
                *((void *)v404 + 4) = v404 + 40;
                *((_OWORD *)v404 + 4) = 0u;
                *((_OWORD *)v404 + 5) = 0u;
                *((_OWORD *)v404 + 6) = 0u;
                *((_DWORD *)v404 + 14) = 3;
                *(_OWORD *)(v404 + 120) = 0u;
                *(_OWORD *)(v404 + 136) = 0u;
                *(_OWORD *)(v404 + 152) = 0u;
                *((void *)v404 + 21) = 0;
                *((void *)v404 + 3) = &unk_1F211A4F0;
                *((void *)v404 + 14) = &unk_1F211A530;
                *((_OWORD *)v404 + 11) = 0u;
                *((_OWORD *)v404 + 12) = 0u;
                *((_OWORD *)v404 + 13) = 0u;
                *((_OWORD *)v404 + 14) = 0u;
                *((void *)v404 + 30) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v574, "name");
                siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v574, &__str);
                siri::dialogengine::ConditionExpression::SetName((uint64_t)(v404 + 24), &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v574.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v573, "op");
                siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v573, &__str);
                siri::dialogengine::ConditionExpression::SetOperator(v405, (uint64_t)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v573.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v572, "value");
                siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v572, &__str);
                siri::dialogengine::ConditionExpression::SetValue(v405, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v572.__r_.__value_.__l.__data_);
                }
                *((void *)v404 + 15) = v520.__r_.__value_.__l.__size_;
                siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)(v404 + 112), (const std::string *)a4);
                if (v391)
                {
                  *(void *)&long long v561 = v404 + 24;
                  *((void *)&v561 + 1) = v404;
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v404 + 1, 1uLL, memory_order_relaxed);
                  v406 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
                  v560[0] = (uint64_t)v92;
                  v560[1] = v569.__r_.__value_.__l.__size_;
                  if (v569.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v569.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v407 = siri::dialogengine::AddConditionEntry(&v561, reader, (uint64_t)&v575, v560);
                  goto LABEL_1273;
                }
LABEL_1276:
                uint64_t v391 = 0;
                goto LABEL_1277;
              }
              if (v393)
              {
                std::string::size_type v396 = v518.__r_.__value_.__r.__words[2];
                goto LABEL_1261;
              }
              goto LABEL_1307;
            default:
LABEL_1260:
              BOOL v398 = v520.__r_.__value_.__s.__data_[16] == 0;
LABEL_1261:
              if (v396 != 13)
              {
LABEL_1307:
                siri::dialogengine::ReadNextNode(v4, (uint64_t)&__str);
                unsigned int v93 = __str.__r_.__value_.__l.__data_;
                LODWORD(v518.__r_.__value_.__l.__data_) = __str.__r_.__value_.__l.__data_;
                if (SHIBYTE(v519) < 0)
                {
                  operator delete((void *)v518.__r_.__value_.__l.__size_);
                  unsigned int v93 = v518.__r_.__value_.__l.__data_;
                }
                *(_OWORD *)&v518.__r_.__value_.__r.__words[1] = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
                v519 = v555;
                *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v556;
                LOWORD(v520.__r_.__value_.__r.__words[2]) = v557;
                if (v93 == -1) {
                  goto LABEL_1310;
                }
                continue;
              }
              v403 = (void *)v518.__r_.__value_.__l.__size_;
LABEL_1263:
              if (!(*v403 ^ 0x646E6F632D627573 | *(void *)((char *)v403 + 5) ^ 0x6E6F697469646E6FLL) && !v398)
              {
                v404 = (char *)operator new(0xC8uLL);
                *(_OWORD *)(v404 + 8) = 0u;
                *(void *)v404 = &unk_1F2121768;
                *(_OWORD *)(v404 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
                *((void *)v404 + 4) = v404 + 40;
                *((_OWORD *)v404 + 4) = 0u;
                *((_OWORD *)v404 + 5) = 0u;
                *((_OWORD *)v404 + 6) = 0u;
                *((_DWORD *)v404 + 14) = 4;
                *(_OWORD *)(v404 + 120) = 0u;
                *(_OWORD *)(v404 + 136) = 0u;
                *(_OWORD *)(v404 + 152) = 0u;
                *(_OWORD *)(v404 + 168) = 0u;
                *((void *)v404 + 3) = &unk_1F211D038;
                *((void *)v404 + 14) = &unk_1F211D078;
                *(_OWORD *)(v404 + 184) = 0u;
                std::string::basic_string[abi:ne180100]<0>(&v571, "name");
                siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v571, &__str);
                siri::dialogengine::ConditionSubCondition::SetName((uint64_t)(v404 + 24), &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v571.__r_.__value_.__l.__data_);
                }
                *((void *)v404 + 15) = v520.__r_.__value_.__l.__size_;
                siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)(v404 + 112), (const std::string *)a4);
                if ((v391 & 1) == 0) {
                  goto LABEL_1276;
                }
                *(void *)&long long v559 = v404 + 24;
                *((void *)&v559 + 1) = v404;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v404 + 1, 1uLL, memory_order_relaxed);
                v406 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
                v558[0] = (uint64_t)v92;
                v558[1] = v569.__r_.__value_.__l.__size_;
                if (v569.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v569.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v407 = siri::dialogengine::AddConditionEntry(&v559, reader, (uint64_t)&v575, v558);
LABEL_1273:
                uint64_t v391 = v407;
                if (v406) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v406);
                }
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v404);
LABEL_1277:
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v404);
                __int16 v4 = reader;
              }
              goto LABEL_1307;
          }
          int v402 = 1;
        }
        else
        {
LABEL_1187:
          if ((HIBYTE(v519) & 0x80) != 0)
          {
            std::string::size_type v396 = v518.__r_.__value_.__r.__words[2];
            goto LABEL_1193;
          }
          switch(HIBYTE(v519))
          {
            case 2u:
LABEL_1214:
              if (LOWORD(v518.__r_.__value_.__r.__words[1]) != 29295) {
                goto LABEL_1307;
              }
              break;
            case 3u:
LABEL_1204:
              if ((LOWORD(v518.__r_.__value_.__r.__words[1]) != 28526 || v518.__r_.__value_.__s.__data_[10] != 116)
                && (LOWORD(v518.__r_.__value_.__r.__words[1]) != 28257 || v518.__r_.__value_.__s.__data_[10] != 100))
              {
                goto LABEL_1307;
              }
              break;
            case 0xAu:
              int v393 = 0;
              p_std::string::size_type size = (std::string::size_type)&v518.__r_.__value_.__l.__size_;
              goto LABEL_1197;
            default:
LABEL_1216:
              BOOL v398 = v520.__r_.__value_.__s.__data_[16] == 0;
              if (HIBYTE(v519) != 13) {
                goto LABEL_1307;
              }
              v403 = &v518.__r_.__value_.__l.__size_;
              goto LABEL_1263;
          }
          int v402 = 0;
        }
        break;
      }
      if (v520.__r_.__value_.__s.__data_[16])
      {
        if (v402)
        {
          if (v518.__r_.__value_.__r.__words[2] != 2)
          {
            if (v518.__r_.__value_.__r.__words[2] == 3)
            {
              v410 = (std::string::size_type *)v518.__r_.__value_.__l.__size_;
              if (*(_WORD *)v518.__r_.__value_.__l.__size_ != 28257
                || *(unsigned char *)(v518.__r_.__value_.__l.__size_ + 2) != 100)
              {
                goto LABEL_1252;
              }
LABEL_1285:
              if (v391)
              {
                std::allocate_shared[abi:ne180100]<siri::dialogengine::ConditionEntry,std::allocator<siri::dialogengine::ConditionEntry>,siri::dialogengine::ConditionEntry::Type,void>(&v568, 0);
                v417 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
                v567.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
                v567.__r_.__value_.__l.__size_ = v569.__r_.__value_.__l.__size_;
                if (v569.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v569.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v413 = siri::dialogengine::AddConditionEntry((long long *)&v568, reader, (uint64_t)&v575, (uint64_t *)&v567);
                if (v417) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v417);
                }
                v415 = (std::__shared_weak_count *)v568.__r_.__value_.__l.__size_;
                goto LABEL_1301;
              }
              uint64_t v413 = 0;
              goto LABEL_1304;
            }
LABEL_1291:
            uint64_t v413 = v391;
            goto LABEL_1304;
          }
          int v418 = *(unsigned __int16 *)v518.__r_.__value_.__l.__size_;
        }
        else
        {
          if (HIBYTE(v519) != 2)
          {
            if (HIBYTE(v519) == 3)
            {
              BOOL v416 = LOWORD(v518.__r_.__value_.__r.__words[1]) == 28257 && v518.__r_.__value_.__s.__data_[10] == 100;
              v410 = &v518.__r_.__value_.__l.__size_;
              if (v416) {
                goto LABEL_1285;
              }
LABEL_1252:
              int v412 = *(unsigned __int16 *)v410 ^ 0x6F6E | *((unsigned __int8 *)v410 + 2) ^ 0x74;
              uint64_t v413 = (v412 != 0) & v391;
              if (!v412 && ((v391 ^ 1) & 1) == 0)
              {
                std::allocate_shared[abi:ne180100]<siri::dialogengine::ConditionEntry,std::allocator<siri::dialogengine::ConditionEntry>,siri::dialogengine::ConditionEntry::Type,void>(&v563, 2);
                v414 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
                *(void *)&long long v562 = v92;
                *((void *)&v562 + 1) = v569.__r_.__value_.__l.__size_;
                if (v569.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v569.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v413 = siri::dialogengine::AddConditionEntry(&v563, reader, (uint64_t)&v575, (uint64_t *)&v562);
                if (v414) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v414);
                }
                v415 = (std::__shared_weak_count *)*((void *)&v563 + 1);
                goto LABEL_1301;
              }
              goto LABEL_1304;
            }
            goto LABEL_1291;
          }
          int v418 = LOWORD(v518.__r_.__value_.__r.__words[1]);
        }
        uint64_t v413 = (v418 != 29295) & v391;
        if (v418 == 29295 && ((v391 ^ 1) & 1) == 0)
        {
          std::allocate_shared[abi:ne180100]<siri::dialogengine::ConditionEntry,std::allocator<siri::dialogengine::ConditionEntry>,siri::dialogengine::ConditionEntry::Type,void>(&v566, 1);
          v419 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
          uint64_t v564 = (uint64_t)v92;
          v565 = (std::__shared_weak_count *)v569.__r_.__value_.__l.__size_;
          if (v569.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v569.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v413 = siri::dialogengine::AddConditionEntry(&v566, reader, (uint64_t)&v575, &v564);
          if (v419) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v419);
          }
          v415 = (std::__shared_weak_count *)*((void *)&v566 + 1);
LABEL_1301:
          __int16 v4 = reader;
          if (v415) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v415);
          }
        }
LABEL_1304:
        memset(&__str, 0, sizeof(__str));
        std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100]((void ***)&v575, (uint64_t)&__str);
        v570.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v570);
        int v392 = v520.__r_.__value_.__s.__data_[17];
        uint64_t v391 = v413;
      }
      if (v392)
      {
        std::string::size_type v420 = v575.__r_.__value_.__l.__size_ - 24;
        __str.__r_.__value_.__r.__words[0] = v575.__r_.__value_.__l.__size_ - 24;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        v575.__r_.__value_.__l.__size_ = v420;
      }
      goto LABEL_1307;
    }
    if (v518.__r_.__value_.__l.__size_ != 10)
    {
      operator delete(v518.__r_.__value_.__l.__data_);
      goto LABEL_118;
    }
    BOOL v91 = *(void *)v518.__r_.__value_.__l.__data_ != 0x6F697469646E6F63
       || *(_WORD *)(v518.__r_.__value_.__r.__words[0] + 8) != 29550;
    operator delete(v518.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_312;
    }
LABEL_118:
    int v40 = HIBYTE(v549);
    if ((SHIBYTE(v549) & 0x80000000) == 0) {
      goto LABEL_119;
    }
    uint64_t v42 = *((void *)&__p + 1);
LABEL_139:
    if (v42 == 7)
    {
      char v46 = (int *)__p;
LABEL_141:
      int v49 = *v46;
      int v50 = *(int *)((char *)v46 + 3);
      if (v49 == 1634887792 && v50 == 1936028513)
      {
        uint64_t v52 = v541;
        uint64_t v53 = v542;
        if (v542 != v541)
        {
          do
          {
            char v54 = *(std::__shared_weak_count **)(v53 - 8);
            if (v54) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            }
            v53 -= 16;
          }
          while (v53 != v52);
          int v40 = HIBYTE(v549);
        }
        uint64_t v542 = v52;
        char v470 = 1;
      }
      long long v563 = 0uLL;
      long long v562 = 0uLL;
      if ((v40 & 0x80) == 0) {
        goto LABEL_153;
      }
      uint64_t v42 = *((void *)&__p + 1);
      goto LABEL_162;
    }
    long long v563 = 0uLL;
    long long v562 = 0uLL;
LABEL_162:
    switch(v42)
    {
      case 3:
        if (*(_WORD *)__p == 27745 && *(unsigned char *)(__p + 2) == 108)
        {
LABEL_168:
          if ((v470 & 1) == 0)
          {
            long long v69 = operator new(0x118uLL);
            v69[1] = 0;
            v69[2] = 0;
            void *v69 = &unk_1F21217B8;
            std::string::size_type v70 = (std::string::size_type)(v69 + 3);
            siri::dialogengine::GroupAll::GroupAll((siri::dialogengine::GroupAll *)(v69 + 3));
            char v470 = 0;
            goto LABEL_326;
          }
          uint64_t v59 = *((void *)&v550 + 1);
          uint64_t v60 = xmlTextReaderConstBaseUri(v4);
          if (v60) {
            uint64_t v61 = (char *)v60;
          }
          else {
            uint64_t v61 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v61);
          siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v59, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::GetXmlLineString((uint64_t)&v547, &v578);
          int v62 = std::string::insert(&v578, 0, "Cannot use the 'all' grouping element in a phrase ");
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
          goto LABEL_218;
        }
        goto LABEL_527;
      case 5:
        if (*(_DWORD *)__p == 1936877926 && *(unsigned char *)(__p + 4) == 116)
        {
LABEL_207:
          _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v518);
          long long v563 = *(_OWORD *)&v518.__r_.__value_.__l.__data_;
          std::string::size_type v70 = v518.__r_.__value_.__r.__words[0];
          if (v518.__r_.__value_.__r.__words[0]) {
            goto LABEL_328;
          }
        }
        goto LABEL_527;
      case 6:
        if (*(_DWORD *)__p == 1684955506 && *(_WORD *)(__p + 4) == 28015)
        {
LABEL_201:
          char v71 = (char *)operator new(0x118uLL);
          *(_OWORD *)(v71 + 8) = 0u;
          *(void *)char v71 = &unk_1F2121808;
          std::string::size_type v70 = (std::string::size_type)(v71 + 24);
          *((void *)v71 + 27) = 0;
          *((_OWORD *)v71 + 2) = 0u;
          *((_OWORD *)v71 + 3) = 0u;
          *((_OWORD *)v71 + 4) = 0u;
          *(_OWORD *)(v71 + 104) = 0u;
          *((void *)v71 + 12) = v71 + 104;
          *(_OWORD *)(v71 + 120) = 0u;
          *(_OWORD *)(v71 + 136) = 0u;
          *(_OWORD *)(v71 + 152) = 0u;
          *(_OWORD *)(v71 + 168) = 0u;
          *(_OWORD *)(v71 + 184) = 0u;
          *(_OWORD *)(v71 + 200) = 0u;
          *((_DWORD *)v71 + 54) = 1065353216;
          *((void *)v71 + 34) = 0;
          *((_OWORD *)v71 + 15) = 0u;
          *((_OWORD *)v71 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
          *((_OWORD *)v71 + 14) = 0u;
          *((void *)v71 + 3) = &unk_1F2126B40;
          *((void *)v71 + 10) = 0;
          *((void *)v71 + 11) = &unk_1F2126BA0;
          *(void *)&long long v72 = v71 + 24;
          *((void *)&v72 + 1) = v71;
        }
        else
        {
          if (*(_DWORD *)__p != 1953068915 || *(_WORD *)(__p + 4) != 26723) {
            goto LABEL_527;
          }
LABEL_200:
          long long v69 = operator new(0x130uLL);
          v69[1] = 0;
          v69[2] = 0;
          void *v69 = &unk_1F21218A8;
          std::string::size_type v70 = (std::string::size_type)(v69 + 3);
          siri::dialogengine::GroupSwitch::GroupSwitch((siri::dialogengine::GroupSwitch *)(v69 + 3));
LABEL_326:
          *(void *)&long long v72 = v70;
          *((void *)&v72 + 1) = v69;
        }
        long long v563 = v72;
LABEL_328:
        std::string::basic_string[abi:ne180100]<0>(v494, "phrase");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v494, &v518);
        if (v495 < 0) {
          operator delete(v494[0]);
        }
        std::string::operator=((std::string *)(v70 + 232), &v518);
        uint64_t v95 = v563;
        *(void *)(v563 + 8) = *((void *)&v550 + 1);
        siri::dialogengine::LineNumberBase::SetFullPath(v95, (const std::string *)a4);
        if (*(char *)(v95 + 255) < 0) {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v95 + 232), *(void *)(v95 + 240));
        }
        else {
          std::string __str = *(std::string *)(v95 + 232);
        }
        std::string::size_type v96 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v96 = __str.__r_.__value_.__l.__size_;
        }
        if (v96)
        {
          BOOL v97 = 0;
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_337;
          }
        }
        else
        {
          siri::dialogengine::EnclosingElement(&v578, (uint64_t)v544, (uint64_t)v545);
          if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
          {
            BOOL v97 = v578.__r_.__value_.__l.__size_ == 7
               && *(_DWORD *)v578.__r_.__value_.__l.__data_ == 1634887792
               && *(_DWORD *)(v578.__r_.__value_.__r.__words[0] + 3) == 1936028513;
            operator delete(v578.__r_.__value_.__l.__data_);
          }
          else
          {
            BOOL v97 = SHIBYTE(v578.__r_.__value_.__r.__words[2]) == 7
               && LODWORD(v578.__r_.__value_.__l.__data_) == 1634887792
               && *(_DWORD *)((char *)v578.__r_.__value_.__r.__words + 3) == 1936028513;
          }
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_337:
            if (!v97) {
              goto LABEL_440;
            }
            goto LABEL_438;
          }
        }
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v97) {
          goto LABEL_440;
        }
LABEL_438:
        std::string::basic_string[abi:ne180100]<0>(&__str, "Grouping elements under a phrases section must define a name attribute.");
        siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, v95);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
LABEL_440:
        uint64_t v125 = v552;
        uint64_t v126 = *(void *)(v552 + 224);
        char v127 = *(std::__shared_weak_count **)(v552 + 232);
        if (v127) {
          atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v126) {
          goto LABEL_453;
        }
        siri::dialogengine::EnclosingElement(&__str, (uint64_t)v544, (uint64_t)v545);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v129 = __str.__r_.__value_.__l.__size_ == 3
              && *(_WORD *)__str.__r_.__value_.__l.__data_ == 24931
              && *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + 2) == 116;
          operator delete(__str.__r_.__value_.__l.__data_);
          if (v127) {
            goto LABEL_454;
          }
        }
        else
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 3)
          {
LABEL_453:
            BOOL v129 = 0;
            if (!v127) {
              goto LABEL_455;
            }
LABEL_454:
            std::__shared_weak_count::__release_shared[abi:ne180100](v127);
            goto LABEL_455;
          }
          BOOL v129 = LOWORD(__str.__r_.__value_.__l.__data_) == 24931 && __str.__r_.__value_.__s.__data_[2] == 116;
          if (v127) {
            goto LABEL_454;
          }
        }
LABEL_455:
        if (v129)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "Multiple root elements found. There can be only one.");
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, v95);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v492, "id");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v492, &v578);
        siri::dialogengine::StringTrim(" \t\n\r", &v578, &__str);
        std::string::operator=((std::string *)(v95 + 96), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v578.__r_.__value_.__l.__data_);
        }
        if (v493 < 0) {
          operator delete(v492[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v490, "note");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v490, &v578);
        siri::dialogengine::StringTrim(" \t\n\r", &v578, &__str);
        std::string::operator=((std::string *)(v95 + 168), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v578.__r_.__value_.__l.__data_);
        }
        if (v491 < 0) {
          operator delete(v490[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v488, "case");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v488, &__str);
        std::string::operator=((std::string *)(v95 + 144), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v489 < 0) {
          operator delete(v488[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v486, "condition");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v486, &__str);
        std::string::operator=((std::string *)(v95 + 120), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v487 < 0) {
          operator delete(v486[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v484, "weight");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v484, &__str);
        if (v485 < 0) {
          operator delete(v484[0]);
        }
        std::string::size_type v130 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v130 = __str.__r_.__value_.__l.__size_;
        }
        if (v130)
        {
          float v131 = siri::dialogengine::StringToDouble(&__str, 0);
          *(float *)(v95 + 192) = fmaxf(v131, 0.0);
        }
        if (v132)
        {
          std::string v133 = v132;
          std::string::basic_string[abi:ne180100]<0>(v482, "value");
          siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v482, &v578);
          std::string::operator=((std::string *)(v133 + 256), &v578);
          if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v578.__r_.__value_.__l.__data_);
          }
          if (v483 < 0) {
            operator delete(v482[0]);
          }
        }
        if (v541 == v542)
        {
          if (v470)
          {
            uint64_t v135 = (std::__shared_weak_count *)*((void *)&v563 + 1);
            v481[0] = v95;
            v481[1] = *((void *)&v563 + 1);
            if (*((void *)&v563 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v563 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::File::AddPhrase(v125, v481);
          }
          else
          {
            uint64_t v135 = (std::__shared_weak_count *)*((void *)&v563 + 1);
            if (*((void *)&v563 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v563 + 1) + 8), 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v137 = *(std::__shared_weak_count **)(v125 + 232);
            *(void *)(v125 + 224) = v95;
            *(void *)(v125 + 232) = v135;
            if (v137) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v137);
            }
          }
        }
        else
        {
          uint64_t v134 = *(void **)(v542 - 16);
          uint64_t v135 = (std::__shared_weak_count *)*((void *)&v563 + 1);
          v578.__r_.__value_.__r.__words[0] = v95;
          v578.__r_.__value_.__l.__size_ = *((void *)&v563 + 1);
          if (*((void *)&v563 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v563 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::Group::AddNode(v134, &v578);
        }
        if (v135) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v135);
        }
        siri::dialogengine::GetXmlAttrs(v4, (uint64_t)&v578);
        if ((std::string *)(v95 + 72) != &v578) {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v95 + 72, (long long *)v578.__r_.__value_.__l.__data_, (long long *)&v578.__r_.__value_.__r.__words[1]);
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v578.__r_.__value_.__l.__size_);
        std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100]((uint64_t)&v541, &v563);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v518.__r_.__value_.__l.__data_);
        }
        uint64_t v100 = v562;
        if ((void)v562) {
          goto LABEL_517;
        }
LABEL_527:
        if (SHIBYTE(v549) < 0)
        {
          if (*((void *)&__p + 1) != 4) {
            goto LABEL_565;
          }
          char v141 = (long long *)__p;
        }
        else
        {
          char v141 = p_p;
          if (HIBYTE(v549) != 4) {
            goto LABEL_565;
          }
        }
        if (*(_DWORD *)v141 != 1954047348) {
          goto LABEL_565;
        }
        uint64_t v142 = v542;
        if (v541 == v542)
        {
          siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
          v144 = std::string::insert(&__str, 0, "Text elements must be contained within grouping elements like first or random ");
          long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, 0);
        }
        else
        {
          if (v470)
          {
            if ((HIBYTE(v549) & 0x80) != 0)
            {
              if (*((void *)&__p + 1) != 4) {
                goto LABEL_550;
              }
              uint64_t v143 = (long long *)__p;
            }
            else
            {
              uint64_t v143 = p_p;
              if (HIBYTE(v549) != 4)
              {
LABEL_550:
                std::operator+<char>();
                v149 = std::string::append(&v578, "\" node ");
                long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v150;
                v149->__r_.__value_.__l.__size_ = 0;
                v149->__r_.__value_.__r.__words[2] = 0;
                v149->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::GetXmlLineString((uint64_t)&v547, &v577);
                if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v151 = &v577;
                }
                else {
                  v151 = (std::string *)v577.__r_.__value_.__r.__words[0];
                }
                if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v152 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v152 = v577.__r_.__value_.__l.__size_;
                }
                v153 = std::string::append(&__str, (const std::string::value_type *)v151, v152);
                long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                v518.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v154;
                v153->__r_.__value_.__l.__size_ = 0;
                v153->__r_.__value_.__r.__words[2] = 0;
                v153->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v518, 3u);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v577.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
                {
                  v148 = (void *)v578.__r_.__value_.__r.__words[0];
                  goto LABEL_564;
                }
                goto LABEL_565;
              }
            }
            if (*(_DWORD *)v143 == 1954047348)
            {
              v431 = (char *)operator new(0x190uLL);
              *((void *)v431 + 1) = 0;
              *((void *)v431 + 2) = 0;
              *(_OWORD *)(v431 + 24) = 0u;
              v432 = (siri::dialogengine::Text *)(v431 + 24);
              *(void *)v431 = &unk_1F2121948;
              *(_OWORD *)(v431 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
              *(_OWORD *)(v431 + 56) = 0u;
              *(_OWORD *)(v431 + 72) = 0u;
              *(_OWORD *)(v431 + 88) = 0u;
              *(_OWORD *)(v431 + 104) = 0u;
              *(_OWORD *)(v431 + 120) = 0u;
              *(_OWORD *)(v431 + 136) = 0u;
              *(_OWORD *)(v431 + 152) = 0u;
              *(_OWORD *)(v431 + 168) = 0u;
              *(_OWORD *)(v431 + 184) = 0u;
              *(_OWORD *)(v431 + 200) = 0u;
              *(_OWORD *)(v431 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
              *(_OWORD *)(v431 + 232) = 0u;
              *(_OWORD *)(v431 + 248) = 0u;
              *((void *)v431 + 49) = 0;
              *(_OWORD *)(v431 + 264) = 0u;
              *(_OWORD *)(v431 + 280) = 0u;
              *(_OWORD *)(v431 + 296) = 0u;
              *(_OWORD *)(v431 + 312) = 0u;
              *(_OWORD *)(v431 + 328) = 0u;
              *(_OWORD *)(v431 + 344) = 0u;
              *(_OWORD *)(v431 + 360) = 0u;
              *(_OWORD *)(v431 + 376) = 0u;
              siri::dialogengine::Text::Text((siri::dialogengine::Text *)(v431 + 24));
              v433 = *(void **)(v142 - 16);
              v518.__r_.__value_.__r.__words[0] = (std::string::size_type)(v431 + 24);
              v518.__r_.__value_.__l.__size_ = (std::string::size_type)v431;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v431 + 1, 1uLL, memory_order_relaxed);
              siri::dialogengine::Group::AddNode(v433, &v518);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v431);
              std::string::basic_string[abi:ne180100]<0>(&v578, "id");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v578, &__str);
              siri::dialogengine::StringTrim(" \t\n\r", &__str, &v518);
              std::string::operator=((std::string *)v431 + 5, &v518);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v578.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v577, "note");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v577, &__str);
              siri::dialogengine::StringTrim(" \t\n\r", &__str, &v518);
              std::string::operator=((std::string *)v431 + 8, &v518);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v577.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "condition");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&__str, &v518);
              std::string::operator=((std::string *)v431 + 6, &v518);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v576, "case");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v576, &v518);
              std::string::operator=((std::string *)v431 + 7, &v518);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v576.__r_.__value_.__l.__data_);
              }
              *((void *)v431 + 4) = *((void *)&v550 + 1);
              siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)v432, (const std::string *)a4);
              std::string::basic_string[abi:ne180100]<0>(&v574, "weight");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v574, &v575);
              if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v574.__r_.__value_.__l.__data_);
              }
              std::string::size_type v434 = HIBYTE(v575.__r_.__value_.__r.__words[2]);
              if ((v575.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v434 = v575.__r_.__value_.__l.__size_;
              }
              if (v434)
              {
                float v435 = siri::dialogengine::StringToDouble(&v575, 0);
                *((float *)v431 + 54) = fmaxf(v435, 0.0);
              }
              std::string::basic_string[abi:ne180100]<0>(&v573, "text");
              siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&v518, (uint64_t)v478, v4, (uint64_t)&v547, (uint64_t)&v573, (uint64_t)v432);
              siri::dialogengine::Text::SetValue(v432, &v518);
              if (v529.__r_.__value_.__s.__data_[7] < 0) {
                operator delete((void *)v525.__r_.__value_.__r.__words[2]);
              }
              if (v525.__r_.__value_.__s.__data_[15] < 0) {
                operator delete(v524);
              }
              if (v523 < 0) {
                operator delete((void *)v522.__r_.__value_.__r.__words[2]);
              }
              if (v522.__r_.__value_.__s.__data_[15] < 0) {
                operator delete((void *)v521.__r_.__value_.__r.__words[2]);
              }
              if (v521.__r_.__value_.__s.__data_[15] < 0) {
                operator delete((void *)v520.__r_.__value_.__r.__words[2]);
              }
              if (v520.__r_.__value_.__s.__data_[15] < 0) {
                operator delete(v519);
              }
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v573.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::GetXmlAttrs(v4, (uint64_t)&v518);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v431 + 96), (long long *)v518.__r_.__value_.__l.__data_, (long long *)&v518.__r_.__value_.__r.__words[1]);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v518.__r_.__value_.__l.__size_);
              if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v575.__r_.__value_.__l.__data_);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v431);
              goto LABEL_565;
            }
            goto LABEL_550;
          }
          siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
          v146 = std::string::insert(&__str, 0, "Cannot have text element outside of the phrases section ");
          long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, 0);
        }
        if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v518.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v148 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_564:
          operator delete(v148);
        }
LABEL_565:
        if (v476 != 1)
        {
          if (v476) {
            goto LABEL_1056;
          }
          if (SHIBYTE(v549) < 0)
          {
            if (*((void *)&__p + 1) != 6) {
              goto LABEL_1056;
            }
            v156 = (long long *)__p;
            if (*(_DWORD *)__p != 1818323300 || *(_WORD *)(__p + 4) != 26479)
            {
LABEL_573:
              int v157 = *(_DWORD *)v156;
              int v158 = *((unsigned __int16 *)v156 + 2);
              if (v157 != 1970497910 || v158 != 27745) {
                goto LABEL_1056;
              }
              if (v470)
              {
                siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
                v160 = std::string::insert(&__str, 0, "Cannot have a visual reference element in the phrases section ");
                long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
                v518.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v161;
                v160->__r_.__value_.__l.__size_ = 0;
                v160->__r_.__value_.__r.__words[2] = 0;
                v160->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, 0);
                goto LABEL_1051;
              }
              uint64_t v386 = v552;
              uint64_t v388 = *(void *)(v552 + 240);
              v387 = *(std::__shared_weak_count **)(v552 + 248);
              if (v387)
              {
                atomic_fetch_add_explicit(&v387->__shared_owners_, 1uLL, memory_order_relaxed);
                std::__shared_weak_count::__release_shared[abi:ne180100](v387);
              }
              if (v388)
              {
                siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
                v389 = std::string::insert(&__str, 0, "Cannot have more than one visual reference element ");
                long long v390 = *(_OWORD *)&v389->__r_.__value_.__l.__data_;
                v518.__r_.__value_.__r.__words[2] = v389->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v390;
                v389->__r_.__value_.__l.__size_ = 0;
                v389->__r_.__value_.__r.__words[2] = 0;
                v389->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, 0);
LABEL_1051:
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                goto LABEL_1056;
              }
              uint64_t v437 = *((void *)v478 + 63);
              v436 = (std::__shared_weak_count *)*((void *)v478 + 64);
              if (v436)
              {
                atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
                std::__shared_weak_count::__release_shared[abi:ne180100](v436);
              }
              if (v437)
              {
                _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9VisualRefENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v518);
                v438 = (std::__shared_weak_count *)v518.__r_.__value_.__l.__size_;
                v439 = (std::string *)v518.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&v578, "id");
                siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v578, &__str);
                siri::dialogengine::StringTrim(" \t\n\r", &__str, &v518);
                std::string::operator=(v439 + 4, &v518);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v578.__r_.__value_.__l.__data_);
                }
                if (!HIBYTE(v551) && v547 != -1)
                {
                  int v440 = 1;
                  while (1)
                  {
                    siri::dialogengine::ReadNextNode(reader, (uint64_t)&v518);
                    if (v520.__r_.__value_.__s.__data_[16]) {
                      break;
                    }
LABEL_1431:
                    int v453 = v520.__r_.__value_.__s.__data_[17];
                    if (SHIBYTE(v519) < 0) {
                      operator delete((void *)v518.__r_.__value_.__l.__size_);
                    }
                    v440 -= v453;
                    if (v440 < 1 || v547 == -1) {
                      goto LABEL_1438;
                    }
                  }
                  if (v440 == 1)
                  {
                    if ((SHIBYTE(v519) & 0x80000000) == 0)
                    {
                      std::string::size_type v441 = (std::string::size_type)&v518.__r_.__value_.__l.__size_;
                      if (SHIBYTE(v519) != 5) {
                        goto LABEL_1430;
                      }
LABEL_1403:
                      int v442 = *(_DWORD *)v441;
                      int v443 = *(unsigned __int8 *)(v441 + 4);
                      if (v442 == 1634886000 && v443 == 109)
                      {
                        siri::dialogengine::GetExpandedValue(&__str, reader);
                        std::string::basic_string[abi:ne180100]<0>(&v575, "name");
                        siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v575, &v576);
                        siri::dialogengine::StringTrim(" \t\n\r", &v576, &v577);
                        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v576.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v575.__r_.__value_.__l.__data_);
                        }
                        std::operator+<char>();
                        v445 = std::string::append(&v572, "\" content=\"");
                        long long v446 = *(_OWORD *)&v445->__r_.__value_.__l.__data_;
                        v573.__r_.__value_.__r.__words[2] = v445->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v573.__r_.__value_.__l.__data_ = v446;
                        v445->__r_.__value_.__l.__size_ = 0;
                        v445->__r_.__value_.__r.__words[2] = 0;
                        v445->__r_.__value_.__r.__words[0] = 0;
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          p_str = &__str;
                        }
                        else {
                          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                        }
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v448 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v448 = __str.__r_.__value_.__l.__size_;
                        }
                        v449 = std::string::append(&v573, (const std::string::value_type *)p_str, v448);
                        long long v450 = *(_OWORD *)&v449->__r_.__value_.__l.__data_;
                        v574.__r_.__value_.__r.__words[2] = v449->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v574.__r_.__value_.__l.__data_ = v450;
                        v449->__r_.__value_.__l.__size_ = 0;
                        v449->__r_.__value_.__r.__words[2] = 0;
                        v449->__r_.__value_.__r.__words[0] = 0;
                        v451 = std::string::append(&v574, "\"");
                        long long v452 = *(_OWORD *)&v451->__r_.__value_.__l.__data_;
                        v576.__r_.__value_.__r.__words[2] = v451->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v452;
                        v451->__r_.__value_.__l.__size_ = 0;
                        v451->__r_.__value_.__r.__words[2] = 0;
                        v451->__r_.__value_.__r.__words[0] = 0;
                        siri::dialogengine::Log::Debug((siri::dialogengine *)&v576);
                        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v576.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v574.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v573.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v572.__r_.__value_.__l.__data_);
                        }
                        siri::dialogengine::VisualRef::SetParam((uint64_t)v439, (long long *)&v577, &__str);
                        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v577.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                      }
                      goto LABEL_1430;
                    }
                    if (v518.__r_.__value_.__r.__words[2] == 5)
                    {
                      std::string::size_type v441 = v518.__r_.__value_.__l.__size_;
                      goto LABEL_1403;
                    }
                  }
LABEL_1430:
                  ++v440;
                  goto LABEL_1431;
                }
LABEL_1438:
                if (v438)
                {
                  char v455 = 0;
                  atomic_fetch_add_explicit(&v438->__shared_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v438->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  char v455 = 1;
                }
                __int16 v4 = reader;
              }
              else
              {
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"ParseVisualRefNode received context with null file", v14);
                v438 = 0;
                v439 = 0;
                char v455 = 1;
              }
              v461 = *(std::__shared_weak_count **)(v386 + 248);
              *(void *)(v386 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = v439;
              *(void *)(v386 + 248) = v438;
              if (v461) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v461);
              }
              if ((v455 & 1) == 0)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v438);
                std::__shared_weak_count::__release_shared[abi:ne180100](v438);
              }
              goto LABEL_1056;
            }
          }
          else
          {
            if (SHIBYTE(v549) != 6) {
              goto LABEL_1056;
            }
            BOOL v155 = __p == 1818323300 && WORD2(__p) == 26479;
            v156 = p_p;
            if (!v155) {
              goto LABEL_573;
            }
          }
          if (v470)
          {
            siri::dialogengine::GetXmlLineString((uint64_t)&v547, &__str);
            v164 = std::string::insert(&__str, 0, "Cannot have dialog element in the phrases section ");
            long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
            v518.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v165;
            v164->__r_.__value_.__l.__size_ = 0;
            v164->__r_.__value_.__r.__words[2] = 0;
            v164->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, 0);
            goto LABEL_1051;
          }
          if (siri::dialogengine::ParseDialogNode((uint64_t)v478, v4, (uint64_t)v538, (const std::string *)a4, (uint64_t)&v547, &v541))goto LABEL_1056; {
          char v470 = 0;
          }
          int v345 = 2;
          goto LABEL_1057;
        }
        if (SHIBYTE(v549) < 0)
        {
          if (*((void *)&__p + 1) != 8) {
            goto LABEL_594;
          }
          v162 = (long long *)__p;
        }
        else
        {
          v162 = p_p;
          if (SHIBYTE(v549) != 8) {
            goto LABEL_594;
          }
        }
        if (*(void *)v162 == 0x65736E6F70736572)
        {
          siri::dialogengine::EnclosingElement(&v518, (uint64_t)v544, (uint64_t)v545);
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v518.__r_.__value_.__l.__size_ == 3)
            {
              BOOL v381 = *(_WORD *)v518.__r_.__value_.__l.__data_ != 24931
                  || *(unsigned char *)(v518.__r_.__value_.__r.__words[0] + 2) != 116;
              operator delete(v518.__r_.__value_.__l.__data_);
              if (!v381)
              {
LABEL_1157:
                _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VisualResponseENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::VisualResponse **)&v518);
                uint64_t v382 = v518.__r_.__value_.__r.__words[0];
                *(void *)(v518.__r_.__value_.__r.__words[0] + 8) = *((void *)&v550 + 1);
                siri::dialogengine::LineNumberBase::SetFullPath(v382, (const std::string *)a4);
                uint64_t v383 = v552;
                v384 = (std::__shared_weak_count *)v518.__r_.__value_.__l.__size_;
                if (v518.__r_.__value_.__l.__size_)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v518.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v384->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v385 = *(std::__shared_weak_count **)(v383 + 264);
                *(void *)(v383 + 256) = v382;
                *(void *)(v383 + 264) = v384;
                if (v385) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v385);
                }
                if (v384)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v384);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v384);
                }
                int v345 = 4;
                goto LABEL_1057;
              }
            }
            else
            {
              operator delete(v518.__r_.__value_.__l.__data_);
            }
          }
          else if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) == 3 {
                 && LOWORD(v518.__r_.__value_.__l.__data_) == 24931
          }
                 && v518.__r_.__value_.__s.__data_[2] == 116)
          {
            goto LABEL_1157;
          }
        }
LABEL_594:
        uint64_t v167 = *(void *)(v552 + 256);
        v166 = *(std::__shared_weak_count **)(v552 + 264);
        uint64_t v465 = v552;
        if (v166)
        {
          atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v166);
        }
        uint64_t v467 = v167;
        if (!v167) {
          goto LABEL_1056;
        }
        v168 = (std::__shared_weak_count *)*((void *)&v552 + 1);
        if (*((void *)&v552 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v552 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        v474 = v168;
        if (HIBYTE(v551))
        {
          std::operator+<char>();
          v169 = std::string::append(&__str, "'");
          long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v170;
          v169->__r_.__value_.__l.__size_ = 0;
          v169->__r_.__value_.__r.__words[2] = 0;
          v169->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v518, 3u);
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_1044;
        }
        int v171 = v551;
        uint64_t data_low = v547;
        while (!v171 && data_low == 1)
        {
          siri::dialogengine::ReadNextNode(v4, (uint64_t)&v518);
          uint64_t data_low = LODWORD(v518.__r_.__value_.__l.__data_);
          unsigned int v547 = v518.__r_.__value_.__l.__data_;
          if (SHIBYTE(v549) < 0)
          {
            operator delete((void *)__p);
            uint64_t data_low = v547;
          }
          long long *p_p = *(_OWORD *)&v518.__r_.__value_.__r.__words[1];
          *((void *)p_p + 2) = v519;
          __int16 v551 = v520.__r_.__value_.__r.__words[2];
          long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
          int v171 = v520.__r_.__value_.__s.__data_[16];
        }
        if (data_low != 1)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Parsing a message field cannot beging when node.ret is %d", v14, data_low);
LABEL_1044:
          char v340 = 0;
          char v339 = 0;
          goto LABEL_1045;
        }
        v477 = (google::protobuf::Message *)(v467 + 208);
        uint64_t v174 = (*(uint64_t (**)(void))(*(void *)(v467 + 208) + 168))();
        if (!v174)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v173);
          uint64_t v174 = 0;
        }
        (*(void (**)(google::protobuf::Message *))(*(void *)v477 + 168))(v477);
        if (!v175)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
          uint64_t v175 = 0;
        }
        Reflection = v175;
        uint64_t Descriptor = v174;
        uint64_t v479 = (uint64_t)p_p;
        uint64_t v462 = a4;
        v463 = a1;
        v176 = 0;
        v475 = 0;
        int v464 = 0;
        char v177 = 0;
        uint64_t v178 = 0;
        v473 = (google::protobuf::Message **)operator new(8uLL);
        *v473 = v477;
        v179 = v473 + 1;
        v468 = 0;
        v469 = (char *)(v473 + 1);
        while (2)
        {
          if (v177)
          {
            int v180 = v551;
            int v181 = SHIBYTE(v551);
            siri::dialogengine::ReadNextNode(reader, (uint64_t)&v518);
            unsigned int v547 = v518.__r_.__value_.__l.__data_;
            if (SHIBYTE(v549) < 0) {
              operator delete((void *)__p);
            }
            uint64_t v182 = (v178 + v180 - v181);
            *(_OWORD *)uint64_t v479 = *(_OWORD *)&v518.__r_.__value_.__r.__words[1];
            *(void *)(v479 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v519;
            long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
            __int16 v551 = v520.__r_.__value_.__r.__words[2];
            char v177 = 1;
            v168 = v474;
            goto LABEL_1025;
          }
          siri::dialogengine::FieldNameFromElementName(v479, (uint64_t)&v574);
          uint64_t FieldByName = google::protobuf::Descriptor::FindFieldByName(Descriptor, (uint64_t)&v574);
          uint64_t OneofByName = google::protobuf::Descriptor::FindOneofByName(Descriptor, (uint64_t)&v574);
          if (!(_BYTE)v551)
          {
            char v177 = 0;
            goto LABEL_886;
          }
          if (v179 >= (google::protobuf::Message **)v469)
          {
            uint64_t v185 = v179 - v473;
            unint64_t v186 = v185 + 1;
            if ((unint64_t)(v185 + 1) >> 61) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            if ((v469 - (char *)v473) >> 2 > v186) {
              unint64_t v186 = (v469 - (char *)v473) >> 2;
            }
            if ((unint64_t)(v469 - (char *)v473) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v187 = v186;
            }
            if (v187)
            {
              if (v187 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v188 = (char *)operator new(8 * v187);
            }
            else
            {
              v188 = 0;
            }
            v189 = (google::protobuf::Message **)&v188[8 * v185];
            void *v189 = v477;
            v190 = v189 + 1;
            if (v179 == v473)
            {
              v191 = v473;
            }
            else
            {
              v191 = v473;
              do
              {
                v192 = *--v179;
                *--v189 = v192;
              }
              while (v179 != v473);
            }
            v469 = &v188[8 * v187];
            if (v191) {
              operator delete(v191);
            }
            v473 = v189;
            v179 = v190;
          }
          else
          {
            *v179++ = v477;
          }
          std::string::basic_string[abi:ne180100]<0>(&v572, "condition");
          siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v572, &v518);
          siri::dialogengine::StringTrim(" \t\n\r", &v518, &v573);
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v572.__r_.__value_.__l.__data_);
          }
          if (v475 == v176 || (uint64_t v194 = *(v176 - 1)) == 0)
          {
            char v177 = 0;
            if (FieldByName) {
              goto LABEL_685;
            }
            goto LABEL_741;
          }
          uint64_t v195 = *(unsigned int *)(v194 + 24);
          if ((int)v195 < 1) {
            goto LABEL_711;
          }
          uint64_t v196 = 0;
          uint64_t FieldByName = 0;
          char v177 = 0;
          do
          {
            v197 = *(unsigned __int8 ****)(*(void *)(v194 + 32) + 8 * v196);
            if (v197)
            {
              v198 = *v197;
              uint64_t v199 = HIBYTE(v574.__r_.__value_.__r.__words[2]);
              if ((v574.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v200 = HIBYTE(v574.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v200 = v574.__r_.__value_.__l.__size_;
              }
              v201 = (unsigned __int8 *)*((unsigned __int8 *)v198 + 23);
              int v202 = (char)v201;
              if ((char)v201 < 0) {
                v201 = v198[1];
              }
              if ((unsigned __int8 *)v200 == v201)
              {
                if (v202 >= 0) {
                  v184 = *v197;
                }
                else {
                  v184 = (unsigned __int8 **)*v198;
                }
                if ((*((unsigned char *)&v574.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (memcmp(v574.__r_.__value_.__l.__data_, v184, v574.__r_.__value_.__l.__size_)) {
                    goto LABEL_671;
                  }
LABEL_670:
                  uint64_t FieldByName = (uint64_t)v197;
                  goto LABEL_671;
                }
                if (!*((unsigned char *)&v574.__r_.__value_.__s + 23)) {
                  goto LABEL_670;
                }
                uint64_t v203 = &v574;
                while (v203->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v184)
                {
                  uint64_t v203 = (std::string *)((char *)v203 + 1);
                  v184 = (unsigned __int8 **)((char *)v184 + 1);
                  if (!--v199) {
                    goto LABEL_670;
                  }
                }
              }
            }
            else
            {
              uint64_t v204 = *(uint64_t **)(v194 + 8);
              if (*((char *)v204 + 23) < 0) {
                uint64_t v204 = (uint64_t *)*v204;
              }
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Oneof '%s' with %d fields did not return descriptor for index %d", (const char *)v184, v204, v195, v196);
              uint64_t v195 = *(unsigned int *)(v194 + 24);
              char v177 = 1;
            }
LABEL_671:
            ++v196;
          }
          while (v196 < (int)v195);
          if (FieldByName)
          {
            OneofFielduint64_t Descriptor = (uint64_t *)google::protobuf::Reflection::GetOneofFieldDescriptor((uint64_t)Reflection, (uint64_t)v477, v194);
            if (OneofFieldDescriptor)
            {
              std::string::size_type v206 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
              if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v206 = v573.__r_.__value_.__l.__size_;
              }
              if (!v206)
              {
                uint64_t v207 = *((void *)&v550 + 1);
                uint64_t v208 = xmlTextReaderConstBaseUri(reader);
                if (v208) {
                  uint64_t v209 = (char *)v208;
                }
                else {
                  uint64_t v209 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&__str, v209);
                siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v207, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                int v210 = *(long long **)v194;
                if (*(char *)(*(void *)v194 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v578, *(const std::string::value_type **)v210, *((void *)v210 + 1));
                }
                else
                {
                  long long v211 = *v210;
                  v578.__r_.__value_.__r.__words[2] = *((void *)v210 + 2);
                  *(_OWORD *)&v578.__r_.__value_.__l.__data_ = v211;
                }
                siri::dialogengine::ElementNameFromFieldName((uint64_t)&v578, (uint64_t)&__str);
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v578.__r_.__value_.__l.__data_);
                }
                siri::dialogengine::ElementNameFromFieldName(*OneofFieldDescriptor, (uint64_t)&v578);
                std::operator+<char>();
                v316 = std::string::append(&v567, ">' is already set to '<");
                long long v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
                v568.__r_.__value_.__r.__words[2] = v316->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v568.__r_.__value_.__l.__data_ = v317;
                v316->__r_.__value_.__l.__size_ = 0;
                v316->__r_.__value_.__r.__words[2] = 0;
                v316->__r_.__value_.__r.__words[0] = 0;
                if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v318 = &v578;
                }
                else {
                  v318 = (std::string *)v578.__r_.__value_.__r.__words[0];
                }
                if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v319 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v319 = v578.__r_.__value_.__l.__size_;
                }
                v320 = std::string::append(&v568, (const std::string::value_type *)v318, v319);
                long long v321 = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
                v569.__r_.__value_.__r.__words[2] = v320->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v569.__r_.__value_.__l.__data_ = v321;
                v320->__r_.__value_.__l.__size_ = 0;
                v320->__r_.__value_.__r.__words[2] = 0;
                v320->__r_.__value_.__r.__words[0] = 0;
                v322 = std::string::append(&v569, ">'.  The sibling '<");
                long long v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
                v570.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v570.__r_.__value_.__l.__data_ = v323;
                v322->__r_.__value_.__l.__size_ = 0;
                v322->__r_.__value_.__r.__words[2] = 0;
                v322->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v549) >= 0) {
                  v324 = (const std::string::value_type *)v479;
                }
                else {
                  v324 = (const std::string::value_type *)__p;
                }
                if (SHIBYTE(v549) >= 0) {
                  std::string::size_type v325 = HIBYTE(v549);
                }
                else {
                  std::string::size_type v325 = *((void *)&__p + 1);
                }
                v326 = std::string::append(&v570, v324, v325);
                long long v327 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
                v571.__r_.__value_.__r.__words[2] = v326->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v571.__r_.__value_.__l.__data_ = v327;
                v326->__r_.__value_.__l.__size_ = 0;
                v326->__r_.__value_.__r.__words[2] = 0;
                v326->__r_.__value_.__r.__words[0] = 0;
                v328 = std::string::append(&v571, ">' will be ignored unless a condition removes '<");
                long long v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
                v575.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v575.__r_.__value_.__l.__data_ = v329;
                v328->__r_.__value_.__l.__size_ = 0;
                v328->__r_.__value_.__r.__words[2] = 0;
                v328->__r_.__value_.__r.__words[0] = 0;
                if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v330 = &v578;
                }
                else {
                  v330 = (std::string *)v578.__r_.__value_.__r.__words[0];
                }
                if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v331 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v331 = v578.__r_.__value_.__l.__size_;
                }
                v332 = std::string::append(&v575, (const std::string::value_type *)v330, v331);
                long long v333 = *(_OWORD *)&v332->__r_.__value_.__l.__data_;
                v576.__r_.__value_.__r.__words[2] = v332->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v333;
                v332->__r_.__value_.__l.__size_ = 0;
                v332->__r_.__value_.__r.__words[2] = 0;
                v332->__r_.__value_.__r.__words[0] = 0;
                v334 = std::string::append(&v576, ">'");
                long long v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
                v577.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v335;
                v334->__r_.__value_.__l.__size_ = 0;
                v334->__r_.__value_.__r.__words[2] = 0;
                v334->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v577, (uint64_t)&v518);
                v168 = v474;
                if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v577.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v576.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v575.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v571.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v570.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v569.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v568.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v567.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v578.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
              }
            }
LABEL_685:
            int v212 = *(_DWORD *)(FieldByName + 60);
            v213 = *(std::once_flag::_State_type **)(FieldByName + 48);
            if (v213)
            {
              v578.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
              v577.__r_.__value_.__r.__words[0] = FieldByName;
              if (atomic_load_explicit((atomic_ullong *volatile)v213, memory_order_acquire) != -1)
              {
                v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v578;
                v518.__r_.__value_.__l.__size_ = (std::string::size_type)&v577;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v518;
                std::__call_once(v213, &__str, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
              }
            }
            if (google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(FieldByName + 56)] == 10)
            {
              if (v212 == 3)
              {
                v477 = (google::protobuf::Message *)google::protobuf::Reflection::AddMessage(Reflection, v477, (const std::string::value_type **)FieldByName, 0, v193);
                *(void *)&long long v566 = v465;
                *((void *)&v566 + 1) = v168;
                if (v168) {
                  atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v518, "");
                siri::dialogengine::ParseListAndIterator((uint64_t)v478, (uint64_t *)&v566, (uint64_t)&v547, reader, v477, (uint64_t)&v518);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (v168) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v168);
                }
              }
              else
              {
                v477 = (google::protobuf::Message *)google::protobuf::Reflection::MutableMessage(Reflection, v477, (const std::string::value_type **)FieldByName, 0, v193);
              }
              uint64_t v261 = (uint64_t)v477;
              if (!v477)
              {
                std::operator+<char>();
                uint64_t v262 = std::string::append(&v578, "' returned null ");
                long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v263;
                v262->__r_.__value_.__l.__size_ = 0;
                v262->__r_.__value_.__r.__words[2] = 0;
                v262->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::GetXmlLineString((uint64_t)&v547, &v577);
                if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v264 = &v577;
                }
                else {
                  v264 = (std::string *)v577.__r_.__value_.__r.__words[0];
                }
                if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v265 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v265 = v577.__r_.__value_.__l.__size_;
                }
                uint64_t v266 = std::string::append(&__str, (const std::string::value_type *)v264, v265);
                long long v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
                v518.__r_.__value_.__r.__words[2] = v266->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v267;
                v266->__r_.__value_.__l.__size_ = 0;
                v266->__r_.__value_.__r.__words[2] = 0;
                v266->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v518, 3u);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v577.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v578.__r_.__value_.__l.__data_);
                }
                char v177 = 1;
                uint64_t v261 = 0;
              }
              uint64_t Descriptor = siri::dialogengine::GetDescriptor(v261, v214);
              Reflection = (const std::string::value_type ***)siri::dialogengine::GetReflection((uint64_t)v477, v268);
              std::string::size_type v269 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
              if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v269 = v573.__r_.__value_.__l.__size_;
              }
              if (v269)
              {
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                LODWORD(v518.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)&v519, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                LODWORD(v518.__r_.__value_.__r.__words[2]) |= 2u;
                if ((uint64_t *)v520.__r_.__value_.__l.__data_ == &google::protobuf::internal::fixed_address_empty_string) {
                  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)&v520, (uint64_t)&v573);
                }
                std::string::operator=((std::string *)v520.__r_.__value_.__l.__data_, &v573);
                siri::dialogengine::StoreVisualCatItem(v477, (google::protobuf::Message *)&v518, v270);
                siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
              }
              std::string::basic_string[abi:ne180100]<0>(&v577, "id");
              siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v577, &v518);
              siri::dialogengine::StringTrim(" \t\n\r", &v518, &v578);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v577.__r_.__value_.__l.__data_);
              }
              std::string::size_type v271 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
              char v272 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
              if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v271 = v578.__r_.__value_.__l.__size_;
              }
              if (v271)
              {
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                LODWORD(v518.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)&v519, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (LODWORD(v520.__r_.__value_.__r.__words[2]) == 5)
                {
                  if ((uint64_t *)v520.__r_.__value_.__l.__size_ != &google::protobuf::internal::fixed_address_empty_string)
                  {
                    std::string::operator=((std::string *)v520.__r_.__value_.__l.__size_, &v578);
                    siri::dialogengine::StoreVisualCatItem(v477, (google::protobuf::Message *)&v518, v273);
                    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                    uint64_t v274 = *((void *)v478 + 63);
                    v275 = (std::__shared_weak_count *)*((void *)v478 + 64);
                    if (v275) {
                      atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (*(char *)(v274 + 127) < 0) {
                      std::string::__init_copy_ctor_external(&v576, *(const std::string::value_type **)(v274 + 104), *(void *)(v274 + 112));
                    }
                    else {
                      std::string v576 = *(std::string *)(v274 + 104);
                    }
                    if (v275) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v275);
                    }
                    uint64_t v276 = *((void *)v478 + 63);
                    long long v277 = (std::__shared_weak_count *)*((void *)v478 + 64);
                    if (v277) {
                      atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (*(char *)(v276 + 127) < 0) {
                      std::string::__init_copy_ctor_external(&v575, *(const std::string::value_type **)(v276 + 104), *(void *)(v276 + 112));
                    }
                    else {
                      std::string v575 = *(std::string *)(v276 + 104);
                    }
                    siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                    LODWORD(v518.__r_.__value_.__r.__words[2]) |= 1u;
                    std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)&v519, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    if (LODWORD(v520.__r_.__value_.__r.__words[2]) == 6)
                    {
                      if ((uint64_t *)v520.__r_.__value_.__l.__size_ != &google::protobuf::internal::fixed_address_empty_string)
                      {
                        std::string::operator=((std::string *)v520.__r_.__value_.__l.__size_, &v575);
                        siri::dialogengine::StoreVisualCatItem(v477, (google::protobuf::Message *)&v518, v278);
                        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                        if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v575.__r_.__value_.__l.__data_);
                        }
                        if (v277) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v277);
                        }
                        if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v576.__r_.__value_.__l.__data_);
                        }
                        char v272 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
                        goto LABEL_843;
                      }
                    }
                    else
                    {
                      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v518);
                      LODWORD(v520.__r_.__value_.__r.__words[2]) = 6;
                      v520.__r_.__value_.__l.__size_ = (std::string::size_type)&google::protobuf::internal::fixed_address_empty_string;
                    }
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)&v520.__r_.__value_.__l.__size_, (uint64_t)&v575);
                  }
                }
                else
                {
                  siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v518);
                  LODWORD(v520.__r_.__value_.__r.__words[2]) = 5;
                  v520.__r_.__value_.__l.__size_ = (std::string::size_type)&google::protobuf::internal::fixed_address_empty_string;
                }
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)&v520.__r_.__value_.__l.__size_, (uint64_t)&v578);
              }
LABEL_843:
              if (v272 < 0) {
                operator delete(v578.__r_.__value_.__l.__data_);
              }
              goto LABEL_865;
            }
            uint64_t v564 = v465;
            v565 = v168;
            if (v168) {
              atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::ParseListAndIterator((uint64_t)v478, &v564, (uint64_t)&v547, reader, v477, v479);
            if (v565) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v565);
            }
            siri::dialogengine::GetExpandedValue(&v576, reader);
            v217 = (const std::string::value_type ***)siri::dialogengine::GetReflection((uint64_t)v477, v215);
            if (v217)
            {
              siri::dialogengine::StringTrim(" \t\n\r", &v576, &v578);
              siri::dialogengine::ParseSpeakableString((uint64_t)&v578, (uint64_t *)&v577);
              if (siri::dialogengine::ChunkList::HasChildren((siri::dialogengine::ChunkList *)&v577)) {
                goto LABEL_705;
              }
              std::string::size_type v218 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
              if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v218 = v573.__r_.__value_.__l.__size_;
              }
              if (v218)
              {
LABEL_705:
                v219 = *(const std::string **)FieldByName;
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                LODWORD(v518.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                *(void *)&double v221 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)&v519, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str).n128_u64[0];
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (LODWORD(v520.__r_.__value_.__r.__words[2]) == 2)
                {
                  std::string::size_type v222 = v520.__r_.__value_.__l.__size_;
                  if (v520.__r_.__value_.__l.__size_) {
                    goto LABEL_709;
                  }
LABEL_801:
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable item expression", v220, v221);
                  siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                }
                else
                {
                  siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v518);
                  LODWORD(v520.__r_.__value_.__r.__words[2]) = 2;
                  std::string::size_type v222 = (std::string::size_type)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
                  v520.__r_.__value_.__l.__size_ = v222;
                  if (!v222) {
                    goto LABEL_801;
                  }
LABEL_709:
                  uint64_t v223 = *(std::string **)(v222 + 24);
                  *(_DWORD *)(v222 + 16) |= 1u;
                  if (v223 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v222 + 24, (uint64_t)v219);
                  }
                  std::string::operator=(v223, v219);
                  char v281 = *(uint64_t **)(v222 + 32);
                  uint64_t v280 = v222 + 32;
                  v279 = (std::string *)v281;
                  *(_DWORD *)(v280 - 16) |= 2u;
                  if (v281 == &google::protobuf::internal::fixed_address_empty_string) {
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v280, (uint64_t)&v578);
                  }
                  std::string::operator=(v279, &v578);
                  std::string::size_type v283 = HIBYTE(v573.__r_.__value_.__r.__words[2]);
                  if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v283 = v573.__r_.__value_.__l.__size_;
                  }
                  if (v283)
                  {
                    LODWORD(v518.__r_.__value_.__r.__words[2]) |= 2u;
                    if ((uint64_t *)v520.__r_.__value_.__l.__data_ == &google::protobuf::internal::fixed_address_empty_string) {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)&v520, (uint64_t)&v573);
                    }
                    std::string::operator=((std::string *)v520.__r_.__value_.__l.__data_, &v573);
                  }
                  siri::dialogengine::StoreVisualCatItem(v477, (google::protobuf::Message *)&v518, v282);
                  siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                  int HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)&v577);
                  int v285 = v464;
                  if (HasRequiredVariablesOrPhrases) {
                    int v285 = 1;
                  }
                  int v464 = v285;
                }
              }
              else
              {
                siri::dialogengine::ExpandToText((uint64_t)&v518, (uint64_t *)v577.__r_.__value_.__l.__data_, (uint64_t *)v577.__r_.__value_.__l.__size_);
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&__str, v518.__r_.__value_.__l.__data_, v518.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __str = v518;
                }
                siri::dialogengine::SetField((uint64_t)v478, v477, v217, (google::protobuf::FieldDescriptor *)FieldByName, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v529.__r_.__value_.__s.__data_[7] < 0) {
                  operator delete((void *)v525.__r_.__value_.__r.__words[2]);
                }
                if (v525.__r_.__value_.__s.__data_[15] < 0) {
                  operator delete(v524);
                }
                if (v523 < 0) {
                  operator delete((void *)v522.__r_.__value_.__r.__words[2]);
                }
                if (v522.__r_.__value_.__s.__data_[15] < 0) {
                  operator delete((void *)v521.__r_.__value_.__r.__words[2]);
                }
                if (v521.__r_.__value_.__s.__data_[15] < 0) {
                  operator delete((void *)v520.__r_.__value_.__r.__words[2]);
                }
                if (v520.__r_.__value_.__s.__data_[15] < 0) {
                  operator delete(v519);
                }
                if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v518.__r_.__value_.__l.__data_);
                }
              }
              v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v577;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v518);
              if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v578.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection", v216);
            }
            siri::dialogengine::SkipNodeBranch(reader, (int *)&v547);
            if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v576.__r_.__value_.__l.__data_);
            }
            v177 |= v217 == 0;
            v168 = v474;
            goto LABEL_865;
          }
LABEL_711:
          uint64_t v224 = *((void *)&v550 + 1);
          std::string v225 = xmlTextReaderConstBaseUri(reader);
          if (v225) {
            char v226 = (char *)v225;
          }
          else {
            char v226 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v226);
          siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v224, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          v227 = std::string::append(&v571, "' field name '");
          long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
          v575.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v575.__r_.__value_.__l.__data_ = v228;
          v227->__r_.__value_.__l.__size_ = 0;
          v227->__r_.__value_.__r.__words[2] = 0;
          v227->__r_.__value_.__r.__words[0] = 0;
          if ((v574.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v229 = &v574;
          }
          else {
            long long v229 = (std::string *)v574.__r_.__value_.__r.__words[0];
          }
          if ((v574.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v230 = HIBYTE(v574.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v230 = v574.__r_.__value_.__l.__size_;
          }
          v231 = std::string::append(&v575, (const std::string::value_type *)v229, v230);
          long long v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
          v576.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v576.__r_.__value_.__l.__data_ = v232;
          v231->__r_.__value_.__l.__size_ = 0;
          v231->__r_.__value_.__r.__words[2] = 0;
          v231->__r_.__value_.__r.__words[0] = 0;
          v233 = std::string::append(&v576, "' does not match any field of the oneof '");
          long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
          v577.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v234;
          v233->__r_.__value_.__l.__size_ = 0;
          v233->__r_.__value_.__r.__words[2] = 0;
          v233->__r_.__value_.__r.__words[0] = 0;
          uint64_t v235 = *(void *)(v194 + 8);
          int v236 = *(char *)(v235 + 23);
          if (v236 >= 0) {
            v237 = *(const std::string::value_type **)(v194 + 8);
          }
          else {
            v237 = *(const std::string::value_type **)v235;
          }
          if (v236 >= 0) {
            std::string::size_type v238 = *(unsigned __int8 *)(v235 + 23);
          }
          else {
            std::string::size_type v238 = *(void *)(v235 + 8);
          }
          v239 = std::string::append(&v577, v237, v238);
          long long v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
          v578.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v578.__r_.__value_.__l.__data_ = v240;
          v239->__r_.__value_.__l.__size_ = 0;
          v239->__r_.__value_.__r.__words[2] = 0;
          v239->__r_.__value_.__r.__words[0] = 0;
          v168 = v474;
          v241 = std::string::append(&v578, "' ");
          long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v242;
          v241->__r_.__value_.__l.__size_ = 0;
          v241->__r_.__value_.__r.__words[2] = 0;
          v241->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v578.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v577.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v576.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v575.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v571.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
          char v177 = 1;
LABEL_741:
          if (OneofByName)
          {
            if (v475 == v176 || !*(v176 - 1)) {
              goto LABEL_865;
            }
            uint64_t v243 = *((void *)&v550 + 1);
            long long v244 = xmlTextReaderConstBaseUri(reader);
            if (v244) {
              uint64_t v245 = (char *)v244;
            }
            else {
              uint64_t v245 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v245);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v243, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::operator+<char>();
            v246 = std::string::append(&v576, "' may not be a child of '");
            long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
            v577.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v247;
            v246->__r_.__value_.__l.__size_ = 0;
            v246->__r_.__value_.__r.__words[2] = 0;
            v246->__r_.__value_.__r.__words[0] = 0;
            uint64_t v248 = *(void *)(*(v176 - 1) + 8);
            int v249 = *(char *)(v248 + 23);
            if (v249 >= 0) {
              long long v250 = *(const std::string::value_type **)(*(v176 - 1) + 8);
            }
            else {
              long long v250 = *(const std::string::value_type **)v248;
            }
            if (v249 >= 0) {
              std::string::size_type v251 = *(unsigned __int8 *)(v248 + 23);
            }
            else {
              std::string::size_type v251 = *(void *)(v248 + 8);
            }
          }
          else
          {
            uint64_t v252 = *((void *)&v550 + 1);
            v253 = xmlTextReaderConstBaseUri(reader);
            if (v253) {
              v254 = (char *)v253;
            }
            else {
              v254 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v254);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v252, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::operator+<char>();
            long long v255 = std::string::append(&v576, "' does not allow child element '");
            long long v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
            v577.__r_.__value_.__r.__words[2] = v255->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v256;
            v255->__r_.__value_.__l.__size_ = 0;
            v255->__r_.__value_.__r.__words[2] = 0;
            v255->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v549) >= 0) {
              long long v250 = (const std::string::value_type *)v479;
            }
            else {
              long long v250 = (const std::string::value_type *)__p;
            }
            if (SHIBYTE(v549) >= 0) {
              std::string::size_type v251 = HIBYTE(v549);
            }
            else {
              std::string::size_type v251 = *((void *)&__p + 1);
            }
          }
          v257 = std::string::append(&v577, v250, v251);
          long long v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
          v578.__r_.__value_.__r.__words[2] = v257->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v578.__r_.__value_.__l.__data_ = v258;
          v257->__r_.__value_.__l.__size_ = 0;
          v257->__r_.__value_.__r.__words[2] = 0;
          v257->__r_.__value_.__r.__words[0] = 0;
          v259 = std::string::append(&v578, "' ");
          long long v260 = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v259->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v260;
          v259->__r_.__value_.__l.__size_ = 0;
          v259->__r_.__value_.__r.__words[2] = 0;
          v259->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v578.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v577.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v576.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
          char v177 = 1;
LABEL_865:
          if (v176 >= v468)
          {
            uint64_t v286 = v176 - v475;
            unint64_t v287 = v286 + 1;
            if ((unint64_t)(v286 + 1) >> 61) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)v468 - (char *)v475) >> 2 > v287) {
              unint64_t v287 = ((char *)v468 - (char *)v475) >> 2;
            }
            if ((unint64_t)((char *)v468 - (char *)v475) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v288 = v287;
            }
            if (v288)
            {
              if (v288 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v289 = (char *)operator new(8 * v288);
            }
            else
            {
              v289 = 0;
            }
            std::vector<std::string> v290 = (uint64_t *)&v289[8 * v286];
            *std::vector<std::string> v290 = OneofByName;
            std::string v291 = v290 + 1;
            if (v475 != v176)
            {
              do
              {
                uint64_t v292 = *--v176;
                *--std::vector<std::string> v290 = v292;
              }
              while (v176 != v475);
              v176 = v475;
            }
            v475 = v290;
            v468 = (uint64_t *)&v289[8 * v288];
            if (v176) {
              operator delete(v176);
            }
            v176 = v291;
          }
          else
          {
            *v176++ = OneofByName;
          }
          if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v573.__r_.__value_.__l.__data_);
          }
          uint64_t v178 = (v178 + 1);
LABEL_886:
          if (HIBYTE(v551))
          {
            if (v473 == v179)
            {
              uint64_t v293 = 0;
            }
            else
            {
              uint64_t v293 = (uint64_t)*(v179 - 1);
              if (v475 != v176)
              {
                --v176;
                --v179;
                goto LABEL_895;
              }
            }
            std::operator+<char>();
            v294 = std::string::append(&__str, "'");
            long long v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
            v518.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v295;
            v294->__r_.__value_.__l.__size_ = 0;
            v294->__r_.__value_.__r.__words[2] = 0;
            v294->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&v518, 3u);
            if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v518.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_895:
            if (v475 != v176)
            {
              uint64_t v296 = *(v176 - 1);
              if (v296)
              {
                if (v473 == v179) {
                  v297 = 0;
                }
                else {
                  v297 = *(v179 - 1);
                }
                v298 = *(char **)v296;
                if (*(char *)(*(void *)v296 + 23) >= 0) {
                  size_t v299 = *(unsigned __int8 *)(*(void *)v296 + 23);
                }
                else {
                  size_t v299 = *(void *)(*(void *)v296 + 8);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v576, v299 + 1);
                if ((v576.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v300 = &v576;
                }
                else {
                  v300 = (std::string *)v576.__r_.__value_.__r.__words[0];
                }
                if (v299)
                {
                  if (v298[23] >= 0) {
                    v301 = v298;
                  }
                  else {
                    v301 = *(char **)v298;
                  }
                  memmove(v300, v301, v299);
                }
                *(_WORD *)((char *)&v300->__r_.__value_.__l.__data_ + v299) = 32;
                if ((v574.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v302 = &v574;
                }
                else {
                  v302 = (std::string *)v574.__r_.__value_.__r.__words[0];
                }
                if ((v574.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v303 = HIBYTE(v574.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v303 = v574.__r_.__value_.__l.__size_;
                }
                v304 = std::string::append(&v576, (const std::string::value_type *)v302, v303);
                long long v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
                v577.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v305;
                v304->__r_.__value_.__l.__size_ = 0;
                v304->__r_.__value_.__r.__words[2] = 0;
                v304->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v306 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
                char v307 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
                v168 = v474;
                BOOL v308 = 0;
                if (v297)
                {
                  if ((v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v306 = v577.__r_.__value_.__l.__size_;
                  }
                  if (v477 && v306)
                  {
                    siri::dialogengine::GetMessageCondition(&v578, v477);
                    std::string::size_type v309 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
                    if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v309 = v578.__r_.__value_.__l.__size_;
                    }
                    if (v309)
                    {
                      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                      LODWORD(v518.__r_.__value_.__r.__words[2]) |= 1u;
                      std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                      *(void *)&double v311 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)&v519, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str).n128_u64[0];
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (LODWORD(v520.__r_.__value_.__r.__words[2]) == 2)
                      {
                        std::string::size_type v312 = v520.__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v518);
                        LODWORD(v520.__r_.__value_.__r.__words[2]) = 2;
                        std::string::size_type v312 = (std::string::size_type)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
                        v520.__r_.__value_.__l.__size_ = v312;
                      }
                      BOOL v308 = v312 != 0;
                      if (v312)
                      {
                        v313 = *(std::string **)(v312 + 24);
                        *(_DWORD *)(v312 + 16) |= 1u;
                        if (v313 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v312 + 24, (uint64_t)&v577);
                        }
                        std::string::operator=(v313, &v577);
                        google::protobuf::MessageLite::SerializeAsString(v477, (uint64_t)&__str);
                        *(_DWORD *)(v312 + 16) |= 2u;
                        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(v312 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        *(_DWORD *)(v312 + 16) |= 4u;
                        std::string::basic_string[abi:ne180100]<0>(&__str, "oneof_msg");
                        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(v312 + 40), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        std::string::size_type v315 = HIBYTE(v578.__r_.__value_.__r.__words[2]);
                        if ((v578.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v315 = v578.__r_.__value_.__l.__size_;
                        }
                        if (v315)
                        {
                          LODWORD(v518.__r_.__value_.__r.__words[2]) |= 2u;
                          if ((uint64_t *)v520.__r_.__value_.__l.__data_ == &google::protobuf::internal::fixed_address_empty_string) {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)&v520, (uint64_t)&v578);
                          }
                          std::string::operator=((std::string *)v520.__r_.__value_.__l.__data_, &v578);
                        }
                        siri::dialogengine::StoreVisualCatItem(v297, (google::protobuf::Message *)&v518, v314);
                      }
                      else
                      {
                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable item expression", v310, v311);
                      }
                      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v518);
                      if ((*((unsigned char *)&v578.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_1008:
                      }
                        operator delete(v578.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      BOOL v308 = 0;
                      if ((*((unsigned char *)&v578.__r_.__value_.__s + 23) & 0x80) != 0) {
                        goto LABEL_1008;
                      }
                    }
                    char v307 = HIBYTE(v577.__r_.__value_.__r.__words[2]);
                  }
                }
                if (v307 < 0) {
                  operator delete(v577.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v576.__r_.__value_.__l.__data_);
                  if (!v308) {
                    goto LABEL_1017;
                  }
                }
                else if (!v308)
                {
                  goto LABEL_1017;
                }
                (*(void (**)(siri::dialogengine *))(*(void *)v297 + 168))(v297);
                google::protobuf::Reflection::ClearOneof(v336, v297, v296);
              }
            }
LABEL_1017:
            if ((google::protobuf::Message *)v293 != v477)
            {
              uint64_t Descriptor = siri::dialogengine::GetDescriptor(v293, (const google::protobuf::Message *)v184);
              Reflection = (const std::string::value_type ***)siri::dialogengine::GetReflection(v293, v337);
              v477 = (google::protobuf::Message *)v293;
            }
            uint64_t v178 = (v178 - 1);
          }
          siri::dialogengine::ReadNextNode(reader, (uint64_t)&v518);
          unsigned int v547 = v518.__r_.__value_.__l.__data_;
          if (SHIBYTE(v549) < 0) {
            operator delete((void *)__p);
          }
          *(_OWORD *)uint64_t v479 = *(_OWORD *)&v518.__r_.__value_.__r.__words[1];
          *(void *)(v479 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v519;
          long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
          __int16 v551 = v520.__r_.__value_.__r.__words[2];
          if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v574.__r_.__value_.__l.__data_);
          }
          uint64_t v182 = v178;
LABEL_1025:
          uint64_t v178 = v182;
          if ((int)v182 >= 1 && v547 != -1) {
            continue;
          }
          break;
        }
        a4 = v462;
        a1 = v463;
        if (v475) {
          operator delete(v475);
        }
        p_p = (long long *)v479;
        __int16 v4 = reader;
        if (v473) {
          operator delete(v473);
        }
        char v339 = 1;
        char v340 = v464;
LABEL_1045:
        if (v474)
        {
          char v342 = v340;
          std::__shared_weak_count::__release_shared[abi:ne180100](v474);
          char v340 = v342;
        }
        if (v340) {
          *(unsigned char *)(v467 + 352) = 1;
        }
        if ((v339 & 1) == 0)
        {
          std::operator+<char>();
          v343 = std::string::append(&__str, "' is not an allowed child of 'response'");
          long long v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v344;
          v343->__r_.__value_.__l.__size_ = 0;
          v343->__r_.__value_.__r.__words[2] = 0;
          v343->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&v518, v467);
          goto LABEL_1051;
        }
LABEL_1056:
        int v345 = 0;
LABEL_1057:
        if (*((void *)&v562 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v562 + 1));
        }
        if (*((void *)&v563 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v563 + 1));
        }
        if (!v345)
        {
LABEL_1064:
          if (!HIBYTE(v551)) {
            goto LABEL_1145;
          }
          if ((SHIBYTE(v549) & 0x80000000) == 0)
          {
            int v346 = HIBYTE(v549);
            v347 = p_p;
            switch(HIBYTE(v549))
            {
              case 3:
                int v348 = BYTE2(__p);
                BOOL v349 = (unsigned __int16)__p == 27745;
                int v350 = 108;
                break;
              case 5:
                int v348 = BYTE4(__p);
                BOOL v349 = __p == 1936877926;
                int v350 = 116;
                break;
              case 6:
                if (__p == 1684955506 && WORD2(__p) == 28015) {
                  goto LABEL_1096;
                }
                int v348 = WORD2(__p);
                BOOL v349 = __p == 1953068915;
                int v350 = 26723;
                break;
              case 8:
                goto LABEL_1095;
              default:
                goto LABEL_1112;
            }
            if (!v349 || v348 != v350) {
              goto LABEL_1110;
            }
LABEL_1096:
            uint64_t v359 = v542;
            if (v541 == v542)
            {
              uint64_t v361 = *((void *)&v550 + 1);
              v362 = xmlTextReaderConstBaseUri(v4);
              if (v362) {
                v363 = (char *)v362;
              }
              else {
                v363 = "";
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, v363);
              siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v361, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::operator+<char>();
              v364 = std::string::append(&v578, "'");
              long long v365 = *(_OWORD *)&v364->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v364->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v365;
              v364->__r_.__value_.__l.__size_ = 0;
              v364->__r_.__value_.__r.__words[2] = 0;
              v364->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v578.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
            }
            else
            {
              v360 = *(std::__shared_weak_count **)(v542 - 8);
              if (v360) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v360);
              }
              uint64_t v542 = v359 - 16;
            }
            goto LABEL_1110;
          }
          uint64_t v351 = *((void *)&__p + 1);
          switch(*((void *)&__p + 1))
          {
            case 3:
              int v352 = *(unsigned __int8 *)(__p + 2);
              BOOL v353 = *(unsigned __int16 *)__p == 27745;
              int v354 = 108;
              break;
            case 5:
              int v352 = *(unsigned __int8 *)(__p + 4);
              BOOL v353 = *(_DWORD *)__p == 1936877926;
              int v354 = 116;
              break;
            case 6:
              if (*(_DWORD *)__p == 1684955506 && *(_WORD *)(__p + 4) == 28015) {
                goto LABEL_1096;
              }
              int v352 = *(unsigned __int16 *)(__p + 4);
              BOOL v353 = *(_DWORD *)__p == 1953068915;
              int v354 = 26723;
              break;
            case 8:
              v347 = (long long *)__p;
LABEL_1095:
              if (*(void *)v347 == 0x6B6361626C6C6166) {
                goto LABEL_1096;
              }
              goto LABEL_1110;
            default:
              goto LABEL_1115;
          }
          if (v353 && v352 == v354) {
            goto LABEL_1096;
          }
LABEL_1110:
          if (SHIBYTE(v549) < 0)
          {
            uint64_t v351 = *((void *)&__p + 1);
LABEL_1115:
            if (v351 != 7) {
              goto LABEL_1128;
            }
            v366 = (int *)__p;
          }
          else
          {
            int v346 = HIBYTE(v549);
LABEL_1112:
            v366 = (int *)p_p;
            if (v346 != 7) {
              goto LABEL_1128;
            }
          }
          int v367 = *v366;
          int v368 = *(int *)((char *)v366 + 3);
          if (v367 == 1634887792 && v368 == 1936028513)
          {
            uint64_t v370 = v541;
            for (uint64_t i = v542; i != v370; i -= 16)
            {
              v372 = *(std::__shared_weak_count **)(i - 8);
              if (v372) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v372);
              }
            }
            char v470 = 0;
            uint64_t v542 = v370;
          }
LABEL_1128:
          if (v544 == v545)
          {
            uint64_t v374 = *((void *)&v550 + 1);
            v375 = xmlTextReaderConstBaseUri(v4);
            if (v375) {
              v376 = (char *)v375;
            }
            else {
              v376 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v376);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v374, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::operator+<char>();
            v377 = std::string::append(&v578, "'");
            long long v378 = *(_OWORD *)&v377->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v377->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v378;
            v377->__r_.__value_.__l.__size_ = 0;
            v377->__r_.__value_.__r.__words[2] = 0;
            v377->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v578.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
          }
          else
          {
            v373 = v545 - 1;
            if (SHIBYTE(v545[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v373->__r_.__value_.__l.__data_);
            }
            v545 = v373;
          }
          uint64_t v379 = *((void *)&v550 + 1);
          if (*(void *)(v552 + 664) > *((void *)&v550 + 1)) {
            uint64_t v379 = *(void *)(v552 + 664);
          }
          *(void *)(v552 + 664) = v379;
          goto LABEL_1145;
        }
        if (v345 != 4) {
          goto LABEL_1460;
        }
LABEL_1145:
        siri::dialogengine::ReadNextNode(v4, (uint64_t)&v518);
        unsigned int data = v518.__r_.__value_.__l.__data_;
        unsigned int v547 = v518.__r_.__value_.__l.__data_;
        if (SHIBYTE(v549) < 0)
        {
          operator delete((void *)__p);
          unsigned int data = v547;
        }
        char v17 = 0;
        long long *p_p = *(_OWORD *)&v518.__r_.__value_.__r.__words[1];
        *((void *)p_p + 2) = v519;
        long long v550 = *(_OWORD *)&v520.__r_.__value_.__l.__data_;
        __int16 v551 = v520.__r_.__value_.__r.__words[2];
        if (data == 1) {
          continue;
        }
LABEL_1461:
        if (!data && v539 == v540)
        {
          *a1 = v552;
          a1 = &v552;
        }
        else
        {
          std::operator+<char>();
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v518, 3u);
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
        }
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v538);
        v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v541;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v518);
        v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v544;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v518);
        if (SHIBYTE(v549) < 0) {
          operator delete((void *)__p);
        }
        if (*((void *)&v552 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v552 + 1));
        }
        __int16 v4 = v553;
LABEL_1471:
        v553 = 0;
        if (v4) {
          xmlFreeTextReader(v4);
        }
        return;
      case 8:
        std::string v56 = (long long *)__p;
LABEL_210:
        if (*(void *)v56 == 0x6B6361626C6C6166)
        {
          if (v470)
          {
            uint64_t v74 = *((void *)&v550 + 1);
            std::string v75 = xmlTextReaderConstBaseUri(v4);
            if (v75) {
              uint64_t v76 = (char *)v75;
            }
            else {
              uint64_t v76 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v76);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v518, v74, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::GetXmlLineString((uint64_t)&v547, &v578);
            long long v77 = std::string::insert(&v578, 0, "Cannot use a 'fallback' element within the phrases section ");
            long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v478, (long long *)&__str, (uint64_t)&v518);
LABEL_218:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v578.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v518.__r_.__value_.__l.__data_);
            char v470 = 1;
          }
          else
          {
            int v99 = (char *)operator new(0x118uLL);
            char v470 = 0;
            *(_OWORD *)(v99 + 8) = 0u;
            *(void *)int v99 = &unk_1F21218F8;
            uint64_t v100 = (uint64_t)(v99 + 24);
            *((void *)v99 + 27) = 0;
            *((_OWORD *)v99 + 2) = 0u;
            *((_OWORD *)v99 + 3) = 0u;
            *((_OWORD *)v99 + 4) = 0u;
            *(_OWORD *)(v99 + 104) = 0u;
            *((void *)v99 + 12) = v99 + 104;
            *(_OWORD *)(v99 + 120) = 0u;
            *(_OWORD *)(v99 + 136) = 0u;
            *(_OWORD *)(v99 + 152) = 0u;
            *(_OWORD *)(v99 + 168) = 0u;
            *(_OWORD *)(v99 + 184) = 0u;
            *(_OWORD *)(v99 + 200) = 0u;
            *((_DWORD *)v99 + 54) = 1065353216;
            *((void *)v99 + 34) = 0;
            *((_OWORD *)v99 + 15) = 0u;
            *((_OWORD *)v99 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
            *((_OWORD *)v99 + 14) = 0u;
            *((void *)v99 + 3) = &unk_1F21260A0;
            *((void *)v99 + 10) = 0;
            *((void *)v99 + 11) = &unk_1F2126100;
            *(void *)&long long v101 = v99 + 24;
            *((void *)&v101 + 1) = v99;
            long long v562 = v101;
LABEL_517:
            *(void *)(v100 + 8) = *((void *)&v550 + 1);
            siri::dialogengine::LineNumberBase::SetFullPath(v100, (const std::string *)a4);
            uint64_t v138 = v552;
            if (*(void *)(v552 + 296))
            {
              std::string::basic_string[abi:ne180100]<0>(&v518, "Multiple fallback elements found in XML file");
              siri::dialogengine::Context::AddValidationWarning((uint64_t)v478, (long long *)&v518, v562);
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v139 = v562;
              if (*((void *)&v562 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v562 + 1) + 8), 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v139 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              v140 = *(std::__shared_weak_count **)(v138 + 304);
              *(_OWORD *)(v138 + 296) = v139;
              if (v140) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v140);
              }
              if (*((void *)&v139 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v139 + 1));
              }
            }
            std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100]((uint64_t)&v541, &v562);
          }
        }
        goto LABEL_527;
      default:
        goto LABEL_527;
    }
  }
}

void sub_1C5F6D704(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  if (SLOBYTE(STACK[0x6C7]) < 0) {
    operator delete((void *)STACK[0x6B0]);
  }
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  if (*(char *)(v3 - 153) < 0) {
    operator delete(*(void **)(v3 - 176));
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  if (v2 < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  if (STACK[0x5C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5C8]);
  }
  if (STACK[0x5D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5D8]);
  }
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&STACK[0x498]);
  STACK[0x498] = (unint64_t)&STACK[0x4B8];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x498]);
  STACK[0x498] = (unint64_t)&STACK[0x4D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x498]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (STACK[0x528]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x528]);
  }
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100]((xmlTextReader **)&STACK[0x538]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::EnclosingElement(std::string *a1, uint64_t a2, uint64_t a3)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3) < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  else
  {
    uint64_t v3 = a2 + 8 * ((a3 - a2) >> 3);
    if (*(char *)(v3 - 25) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v3 - 48), *(void *)(v3 - 40));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(v3 - 48);
      a1->__r_.__value_.__r.__words[2] = *(void *)(v3 - 32);
    }
  }
}

double _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ConditionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  int v2 = operator new(0xC0uLL);
  double result = 0.0;
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(void *)int v2 = &unk_1F2122850;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  *((void *)v2 + 12) = (char *)v2 + 104;
  *((void *)v2 + 3) = &unk_1F21264A0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 11) = &unk_1F21264C8;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *((void *)v2 + 23) = 0;
  *a1 = (char *)v2 + 24;
  a1[1] = v2;
  return result;
}

double std::allocate_shared[abi:ne180100]<siri::dialogengine::ConditionEntry,std::allocator<siri::dialogengine::ConditionEntry>,siri::dialogengine::ConditionEntry::Type,void>(void *a1, int a2)
{
  __int16 v4 = (char *)operator new(0x70uLL);
  double result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  *(void *)__int16 v4 = &unk_1F2121718;
  *((void *)v4 + 3) = &unk_1F2119CD8;
  *((void *)v4 + 4) = v4 + 40;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 14) = a2;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

uint64_t siri::dialogengine::AddConditionEntry(long long *a1, xmlTextReader *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "note");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)__p, &__str);
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  int v10 = *(void ***)a3;
  uint64_t v11 = *(void *)(a3 + 8);
  if (*(void *)a3 == v11)
  {
    uint64_t v15 = *a4;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *(void *)&long long v27 = *(void *)a1;
    *((void *)&v27 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v15 + 144), &v27);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v18 = *(void *)a1;
    char v17 = (std::__shared_weak_count *)*((void *)a1 + 1);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v24 = 0;
    std::string::size_type v25 = 0;
    long long v26 = 0;
    long long v30 = &v24;
    char v31 = 0;
    std::string v19 = operator new(0x10uLL);
    char v24 = v19;
    std::string::size_type v25 = v19;
    int v20 = v19 + 2;
    long long v26 = v19 + 2;
    uint64_t v34 = v19;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35;
    void *v19 = v18;
    v19[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v35 = v19 + 2;
    char v33 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::shared_ptr<siri::dialogengine::ChunkText>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__str);
    std::string::size_type v25 = v20;
    std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100]((void ***)a3, (uint64_t)&v24);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 3);
    if (v12 < 2)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid condition content in XML file!", v9);
      return 0;
    }
    uint64_t v13 = *((void *)v10[3 * v12 - 5] - 2);
    int v14 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *(void *)&long long v23 = *(void *)a1;
    *((void *)&v23 + 1) = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v13 + 64), &v23);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(*(void *)(a3 + 8) - 24), a1);
  }
  uint64_t v21 = *(void *)a1;
  siri::dialogengine::GetXmlAttrs(a2, (uint64_t)&__str);
  if ((std::string *)(v21 + 8) != &__str) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v21 + 8, (long long *)__str.__r_.__value_.__l.__data_, (long long *)&__str.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__str.__r_.__value_.__l.__size_);
  return 1;
}

void sub_1C5F6F148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  __int16 v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = 3 * v8;
    uint64_t v11 = (char *)operator new(24 * v8);
    unint64_t v12 = &v11[24 * v7];
    uint64_t v13 = (void **)&v11[8 * v10];
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    int v6 = (void **)(v12 + 24);
    int v14 = *a1;
    uint64_t v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)unint64_t v12 = v16;
        *((void *)v12 + 2) = v15[2];
        *uint64_t v15 = 0;
        v15[1] = 0;
        std::string v15[2] = 0;
      }
      while (v15 != v14);
      uint64_t v15 = *a1;
      char v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        uint64_t v18 = v17;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    char *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)__int16 v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    int v6 = v4 + 3;
  }
  a1[1] = v6;
}

void std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    __int16 v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        int v6 = v4;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  int v2 = operator new(0x118uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F2121858;
  siri::dialogengine::GroupFirst::GroupFirst((siri::dialogengine::GroupFirst *)(v2 + 3));
  *a1 = v3;
  a1[1] = v2;
}

void siri::dialogengine::ParseFullSupportingOrTextNode(uint64_t a1, uint64_t a2, xmlTextReaderPtr reader, uint64_t a4, uint64_t a5, uint64_t a6)
{
  siri::dialogengine::GetExpandedValue(&__p, reader);
  uint64_t v52 = (std::string *)a1;
  siri::dialogengine::SpeakableString::SpeakableString(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v66, 0, 24);
  memset(&v65, 0, sizeof(v65));
  LOBYTE(v55) = 0;
  if (*(unsigned char *)(a4 + 49))
  {
    BYTE4(v55) = 0;
    LOBYTE(v54) = 0;
    BYTE4(v54) = 0;
  }
  else
  {
    BYTE4(v55) = 0;
    LOBYTE(v54) = 0;
    BYTE4(v54) = 0;
    if (*(_DWORD *)a4 != -1)
    {
      char v53 = 0;
      uint64_t v51 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v10 = (void **)(a4 + 8);
      int v11 = 1;
      while (1)
      {
        siri::dialogengine::ReadNextNode(reader, (uint64_t)&__p);
        *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
        if (*(char *)(a4 + 31) < 0) {
          operator delete(*v10);
        }
        *(_OWORD *)uint64_t v10 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        *(void *)(a4 + 24) = v62;
        *(_OWORD *)(a4 + 32) = v63;
        *(_WORD *)(a4 + 48) = v64;
        int v12 = *(unsigned __int8 *)(a4 + 31);
        if ((*(char *)(a4 + 31) & 0x80000000) == 0) {
          break;
        }
        size_t v19 = *(void *)(a4 + 16);
        if (v19 == 5)
        {
          uint64_t v15 = (unsigned __int8 *)*v10;
          if (*(_DWORD *)*v10 != 2019914787 || *((unsigned char *)*v10 + 4) != 116)
          {
            if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
            {
LABEL_72:
              if (*(unsigned char *)(a4 + 48))
              {
                if (v55)
                {
                  std::operator+<char>();
                  uint64_t v39 = std::string::append(&v60, "> element");
                  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
                  v39->__r_.__value_.__l.__size_ = 0;
                  v39->__r_.__value_.__r.__words[2] = 0;
                  v39->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Context::AddValidationError(a2, (long long *)&__p, a6);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v60.__r_.__value_.__l.__data_);
                  }
                }
                siri::dialogengine::GetExpandedValue(&__p, reader);
                if (SHIBYTE(v66[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v66[0].__r_.__value_.__l.__data_);
                }
                v66[0] = __p;
                LOBYTE(v55) = 1;
                BYTE4(v51) = 1;
              }
              if (v11 < 1) {
                goto LABEL_116;
              }
              BYTE4(v51) &= *(unsigned char *)(a4 + 49) == 0;
              char v41 = BYTE4(v51) | v51;
              goto LABEL_108;
            }
            goto LABEL_18;
          }
LABEL_91:
          if ((v53 & 1) == 0)
          {
            uint64_t v42 = xmlTextReaderConstValue(reader);
            if (v42) {
              uint64_t v43 = (char *)v42;
            }
            else {
              uint64_t v43 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v43);
            siri::dialogengine::StringTrim(" \t\n\r", &__p, &v60);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            {
              BOOL v44 = v60.__r_.__value_.__l.__size_ == 0;
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            else
            {
              BOOL v44 = SHIBYTE(v60.__r_.__value_.__r.__words[2]) == 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            LOBYTE(v54) = !v44 | v54;
          }
LABEL_113:
          if (v11 < 1) {
            goto LABEL_116;
          }
LABEL_87:
          if (*(_DWORD *)a4 == -1) {
            goto LABEL_116;
          }
        }
        else
        {
LABEL_23:
          uint64_t v20 = *(unsigned __int8 *)(a4 + 31);
          if ((v12 & 0x80u) == 0) {
            size_t v21 = *(unsigned __int8 *)(a4 + 31);
          }
          else {
            size_t v21 = v19;
          }
          uint64_t v22 = *(unsigned __int8 *)(a5 + 23);
          int v23 = (char)v22;
          if ((v22 & 0x80u) != 0) {
            uint64_t v22 = *(void *)(a5 + 8);
          }
          if (v21 != v22) {
            goto LABEL_59;
          }
          if (v23 >= 0) {
            char v24 = (const std::string::value_type *)a5;
          }
          else {
            char v24 = *(const std::string::value_type **)a5;
          }
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*v10, v24, v19)) {
              goto LABEL_84;
            }
          }
          else if (*(unsigned char *)(a4 + 31))
          {
            std::string::size_type v25 = (unsigned __int8 *)(a4 + 8);
            while (*v25 == *(unsigned __int8 *)v24)
            {
              ++v25;
              ++v24;
              if (!--v20) {
                goto LABEL_37;
              }
            }
LABEL_59:
            if ((v12 & 0x80) != 0)
            {
LABEL_84:
              if (v19 != 8) {
                goto LABEL_89;
              }
              int v36 = *v10;
            }
            else
            {
              int v36 = (void *)(a4 + 8);
              if (v12 != 8)
              {
LABEL_89:
                if ((v53 & 1) == 0)
                {
                  siri::dialogengine::SkipNodeBranch(reader, (int *)a4);
                  BYTE4(v54) = 1;
                }
                goto LABEL_113;
              }
            }
            if (*v36 == 0x746E656D6D6F6323) {
              goto LABEL_87;
            }
            goto LABEL_89;
          }
LABEL_37:
          if (*(unsigned char *)(a4 + 48))
          {
            std::operator+<char>();
            long long v26 = std::string::append(&v58, "> element inside another <");
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            int v28 = *(char *)(a5 + 23);
            if (v28 >= 0) {
              char v29 = (const std::string::value_type *)a5;
            }
            else {
              char v29 = *(const std::string::value_type **)a5;
            }
            if (v28 >= 0) {
              std::string::size_type v30 = *(unsigned __int8 *)(a5 + 23);
            }
            else {
              std::string::size_type v30 = *(void *)(a5 + 8);
            }
            char v31 = std::string::append(&v59, v29, v30);
            long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
            v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            char v33 = std::string::append(&v60, "> element");
            long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError(a2, (long long *)&__p, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            ++v11;
          }
          v11 -= *(char *)(a4 + 49);
          if (v11 < 1 || *(_DWORD *)a4 == -1) {
            goto LABEL_116;
          }
        }
      }
      if (v12 != 5) {
        goto LABEL_22;
      }
      if (*(_DWORD *)v10 != 2019914787 || *(unsigned char *)(a4 + 12) != 116)
      {
        BOOL v14 = *(_DWORD *)v10 == 1852404336 && *(unsigned char *)(a4 + 12) == 116;
        uint64_t v15 = (unsigned __int8 *)(a4 + 8);
        if (v14) {
          goto LABEL_72;
        }
LABEL_18:
        int v16 = *(_DWORD *)v15;
        int v17 = v15[4];
        if (v16 == 1634037875 && v17 == 107)
        {
          if (*(unsigned char *)(a4 + 48))
          {
            if ((v55 & 0x100000000) != 0)
            {
              std::operator+<char>();
              std::string::size_type v45 = std::string::append(&v60, "> element");
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError(a2, (long long *)&__p, a6);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v60.__r_.__value_.__l.__data_);
              }
            }
            siri::dialogengine::GetExpandedValue(&__p, reader);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            std::string v65 = __p;
            BYTE4(v55) = 1;
            LOBYTE(v51) = 1;
          }
          if (v11 < 1) {
            goto LABEL_116;
          }
          LOBYTE(v51) = (*(unsigned char *)(a4 + 49) == 0) & v51;
          char v41 = BYTE4(v51) | v51;
LABEL_108:
          char v53 = v41;
          goto LABEL_87;
        }
LABEL_22:
        size_t v19 = *(void *)(a4 + 16);
        goto LABEL_23;
      }
      goto LABEL_91;
    }
  }
LABEL_116:
  if (v55 & 0x100000000) != 0 || (v55)
  {
    siri::dialogengine::SpeakableString::SetString(v52, v66, &v65);
    if (v54)
    {
      std::operator+<char>();
      std::string::value_type v47 = std::string::append(&v60, "> element cannot have extra text outside <speak> and <print> elements");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a2, (long long *)&__p, a6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    if ((v54 & 0x100000000) != 0)
    {
      std::operator+<char>();
      int v49 = std::string::append(&v60, "> element cannot have extra elements outside <speak> and <print> elements");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a2, (long long *)&__p, a6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    siri::dialogengine::CheckForEqualSpeakAndPrint((unsigned __int8 *)&v65, (unsigned __int8 *)v66, a2, a5, a6);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C5F6FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v41 - 137) < 0) {
    operator delete(*(void **)(v41 - 160));
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  siri::dialogengine::SpeakableString::~SpeakableString(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ParseDialogNode(uint64_t a1, xmlTextReader *a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v8 = a4;
  uint64_t v13 = *(void *)(a1 + 504);
  int v12 = *(std::__shared_weak_count **)(a1 + 512);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v14 = (void **)(a5 + 8);
  int v15 = *(char *)(a5 + 31);
  if (v15 < 0)
  {
    if (*(void *)(a5 + 16) != 6)
    {
LABEL_12:
      std::operator+<char>();
      uint64_t v20 = std::string::append(&v136, "\" node ");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::GetXmlLineString(a5, &v135);
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v135;
      }
      else {
        uint64_t v22 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v135.__r_.__value_.__l.__size_;
      }
      char v24 = std::string::append(&v82, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v136.__r_.__value_.__l.__data_);
      }
      goto LABEL_26;
    }
    int v16 = (unsigned __int16 *)*v14;
  }
  else
  {
    int v16 = (unsigned __int16 *)(a5 + 8);
    if (v15 != 6) {
      goto LABEL_12;
    }
  }
  int v17 = *(_DWORD *)v16;
  int v18 = v16[2];
  if (v17 != 1818323300 || v18 != 26479) {
    goto LABEL_12;
  }
  uint64_t v29 = *a6;
  uint64_t v28 = a6[1];
  if (*a6 == v28)
  {
    uint64_t v33 = *(void *)(v13 + 224);
    long long v32 = *(std::__shared_weak_count **)(v13 + 232);
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v33)
    {
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__p, *(void *)(a5 + 40), a4);
      std::string::basic_string[abi:ne180100]<0>(&v82, "Multiple root elements found. There can be only one.");
      siri::dialogengine::Context::AddValidationError(a1, (long long *)&v82, (uint64_t)&__p);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__p.__r_.__value_.__l.__data_);
LABEL_391:
      uint64_t v26 = 1;
      if (!v12) {
        return v26;
      }
      goto LABEL_27;
    }
    uint64_t v29 = *a6;
    uint64_t v28 = a6[1];
    unint64_t v8 = a4;
  }
  if (v29 == v28)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    std::string::size_type v30 = (void *)__p.__r_.__value_.__r.__words[0];
    *(void *)(__p.__r_.__value_.__r.__words[0] + 8) = *(void *)(a5 + 40);
    siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)v30, v8);
    long long v34 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v35 = *(std::__shared_weak_count **)(v13 + 232);
    *(void *)(v13 + 224) = v30;
    *(void *)(v13 + 232) = v34;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v34)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
  }
  else
  {
    std::string::size_type v30 = *(void **)(v28 - 16);
  }
  std::string v79 = v8;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine6DialogENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v134);
  uint64_t v37 = (std::__shared_weak_count *)*((void *)&v134 + 1);
  uint64_t v36 = v134;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v134;
  if (*((void *)&v134 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::Group::AddNode(v30, &__p);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::string::basic_string[abi:ne180100]<0>(v132, "id");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v132, &v82);
  siri::dialogengine::StringTrim(" \t\n\r", &v82, &__p);
  std::string::operator=((std::string *)(v36 + 96), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v130, "note");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v130, &v82);
  siri::dialogengine::StringTrim(" \t\n\r", &v82, &__p);
  std::string::operator=((std::string *)(v36 + 168), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v128, "condition");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v128, &__p);
  std::string::operator=((std::string *)(v36 + 120), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v126, "printOnly");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v126, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v38 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v38 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
  }
  if (v127 < 0)
  {
    operator delete(v126[0]);
    if (v38) {
      goto LABEL_75;
    }
  }
  else if (v38)
  {
    goto LABEL_75;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "printOnly");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v124, &__p);
  *(_WORD *)(v36 + 544) = siri::dialogengine::StringToBool(&__p) | 0x100;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
LABEL_75:
  std::string::basic_string[abi:ne180100]<0>(v122, "spokenOnly");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v122, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v39 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
  }
  if (v123 < 0)
  {
    operator delete(v122[0]);
    if (v39) {
      goto LABEL_86;
    }
  }
  else if (v39)
  {
    goto LABEL_86;
  }
  std::string::basic_string[abi:ne180100]<0>(v120, "spokenOnly");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v120, &__p);
  *(_WORD *)(v36 + 546) = siri::dialogengine::StringToBool(&__p) | 0x100;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v121 < 0) {
    operator delete(v120[0]);
  }
LABEL_86:
  std::string::basic_string[abi:ne180100]<0>(v118, "case");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v118, &__p);
  std::string::operator=((std::string *)(v36 + 144), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v116, "type");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v116, &__p);
  std::string::operator=((std::string *)(v36 + 552), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "keywords");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v114, &__p);
  std::string::operator=((std::string *)(v36 + 576), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v115 < 0) {
    operator delete(v114[0]);
  }
  *(void *)(v36 + 8) = *(void *)(a5 + 40);
  siri::dialogengine::LineNumberBase::SetFullPath(v36, v79);
  std::string::basic_string[abi:ne180100]<0>(v112, "weight");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v112, &v136);
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  std::string::size_type v40 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v40 = v136.__r_.__value_.__l.__size_;
  }
  if (v40)
  {
    float v41 = siri::dialogengine::StringToDouble(&v136, 0);
    *(float *)(v36 + 192) = fmaxf(v41, 0.0);
  }
  siri::dialogengine::GetExpandedValue(&v135, a2);
  if (*(void *)(a3 + 8) == *(void *)(a3 + 16))
  {
    memset(&v111, 0, sizeof(v111));
    memset(&v110, 0, sizeof(v110));
    LODWORD(v78) = 0;
    if (*(unsigned char *)(a5 + 49))
    {
      uint64_t v77 = 0;
      uint64_t v76 = 0;
      BYTE4(v78) = 0;
    }
    else
    {
      uint64_t v77 = 0;
      uint64_t v76 = 0;
      BYTE4(v78) = 0;
      if (*(_DWORD *)a5 != -1)
      {
        int v42 = 0;
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        uint64_t v76 = 0;
        int v80 = 0;
        int v81 = 1;
        while (2)
        {
          siri::dialogengine::ReadNextNode(a2, (uint64_t)&__p);
          *(_DWORD *)a5 = __p.__r_.__value_.__l.__data_;
          if (*(char *)(a5 + 31) < 0) {
            operator delete(*v14);
          }
          *(_OWORD *)BOOL v14 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          *(void *)(a5 + 24) = v98;
          *(_OWORD *)(a5 + 32) = v99;
          *(_WORD *)(a5 + 48) = (_WORD)v100;
          int v43 = *(unsigned __int8 *)(a5 + 31);
          if ((*(char *)(a5 + 31) & 0x80000000) == 0)
          {
            BOOL v44 = 0;
            int v45 = v43 - 4;
            long long v46 = (void *)(a5 + 8);
            switch(v45)
            {
              case 0:
                int v47 = *(_DWORD *)v14;
                goto LABEL_121;
              case 1:
                if (*(_DWORD *)v14 == 2019914787 && *(unsigned char *)(a5 + 12) == 116) {
                  goto LABEL_212;
                }
                if (*(_DWORD *)v14 == 1852404336 && *(unsigned char *)(a5 + 12) == 116) {
                  goto LABEL_222;
                }
                if (*(_DWORD *)v14 != 1634037875 || *(unsigned char *)(a5 + 12) != 107) {
                  goto LABEL_203;
                }
                goto LABEL_168;
              case 2:
                if (*(_DWORD *)v14 != 1818323300 || *(_WORD *)(a5 + 12) != 26479) {
                  goto LABEL_203;
                }
                goto LABEL_218;
              case 3:
                if (*(_DWORD *)v14 == 1953394531 && *(_DWORD *)(a5 + 11) == 1953391988) {
                  goto LABEL_193;
                }
                int v54 = *(_DWORD *)(a5 + 11);
                BOOL v55 = *(_DWORD *)v14 == 1953522019;
                int v56 = 1852795252;
                goto LABEL_149;
              case 4:
                goto LABEL_192;
              case 6:
                int v54 = *(unsigned __int16 *)(a5 + 16);
                BOOL v55 = *v14 == (void *)0x6974726F70707573;
                int v56 = 26478;
LABEL_149:
                if (!v55 || v54 != v56) {
                  goto LABEL_203;
                }
                goto LABEL_206;
              default:
                goto LABEL_204;
            }
          }
          uint64_t v48 = *(void *)(a5 + 16);
          switch(v48)
          {
            case 4:
              int v47 = *(_DWORD *)*v14;
LABEL_121:
              if (v47 != 1819047270) {
                goto LABEL_203;
              }
              goto LABEL_193;
            case 5:
              std::string v58 = (unsigned __int8 *)*v14;
              if (*(_DWORD *)*v14 == 2019914787 && *((unsigned char *)*v14 + 4) == 116)
              {
LABEL_212:
                if (((v42 | v80) & 1) == 0)
                {
                  long long v69 = xmlTextReaderConstValue(a2);
                  if (v69) {
                    std::string::size_type v70 = (char *)v69;
                  }
                  else {
                    std::string::size_type v70 = "";
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, v70);
                  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v82);
                  uint64_t v75 = v36;
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                  {
                    BOOL v71 = v82.__r_.__value_.__l.__size_ == 0;
                    operator delete(v82.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    BOOL v71 = SHIBYTE(v82.__r_.__value_.__r.__words[2]) == 0;
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  int v42 = 0;
                  int v80 = 0;
                  BYTE4(v76) |= !v71;
                  uint64_t v36 = v75;
                }
              }
              else if (*(_DWORD *)v58 == 1852404336 && v58[4] == 116)
              {
LABEL_222:
                if (*(unsigned char *)(a5 + 48))
                {
                  if (v77)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <print> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  siri::dialogengine::GetExpandedValue(&__p, a2);
                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v111.__r_.__value_.__l.__data_);
                  }
                  std::string v111 = __p;
                  LODWORD(v77) = 1;
                  LOBYTE(v42) = 1;
                }
                int v42 = (*(unsigned char *)(a5 + 49) == 0) & v42;
              }
              else
              {
                int v61 = *(_DWORD *)v58;
                int v62 = v58[4];
                if (v61 != 1634037875 || v62 != 107) {
                  goto LABEL_189;
                }
LABEL_168:
                if (*(unsigned char *)(a5 + 48))
                {
                  if (v76)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <speak> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  siri::dialogengine::GetExpandedValue(&__p, a2);
                  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v110.__r_.__value_.__l.__data_);
                  }
                  std::string v110 = __p;
                  LODWORD(v76) = 1;
                  char v64 = 1;
                }
                else
                {
                  char v64 = v80;
                }
                int v80 = (*(unsigned char *)(a5 + 49) == 0) & v64;
              }
              goto LABEL_274;
            case 6:
              if (*(_DWORD *)*v14 == 1818323300 && *((_WORD *)*v14 + 2) == 26479)
              {
LABEL_218:
                if (*(unsigned char *)(a5 + 48))
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot nest a <dialog> element inside another <dialog> element");
                  siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  int v72 = v81 + 1;
                }
                else
                {
                  int v72 = v81;
                }
                int v81 = v72 - *(char *)(a5 + 49);
                goto LABEL_274;
              }
              if ((v43 & 0x80) == 0) {
                goto LABEL_203;
              }
              goto LABEL_189;
            case 7:
              if (*(_DWORD *)*v14 == 1953394531 && *(_DWORD *)((char *)*v14 + 3) == 1953391988)
              {
LABEL_193:
                if (*(unsigned char *)(a5 + 48))
                {
                  if (v78)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <full> or <content> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v82, *(void *)(a5 + 40), v79);
                  if (*(char *)(a5 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
                  }
                  else
                  {
                    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *(_OWORD *)v14;
                    v96.__r_.__value_.__r.__words[2] = *(void *)(a5 + 24);
                  }
                  siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&__p, a1, a2, a5, (uint64_t)&v96, (uint64_t)&v82);
                  siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v36, &__p);
                  if (v109 < 0) {
                    operator delete(v108);
                  }
                  if (v107 < 0) {
                    operator delete(v106);
                  }
                  if (v105 < 0) {
                    operator delete(v104);
                  }
                  if (v103 < 0) {
                    operator delete(v102);
                  }
                  if (v101 < 0) {
                    operator delete(v100);
                  }
                  if (SHIBYTE(v99) < 0) {
                    operator delete(v98);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v96.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v82.__r_.__value_.__l.__data_);
                  LODWORD(v78) = 1;
                }
              }
              else if (*(_DWORD *)*v14 == 1953522019 && *(_DWORD *)((char *)*v14 + 3) == 1852795252)
              {
LABEL_206:
                if (*(unsigned char *)(a5 + 48))
                {
                  if ((v77 & 0x100000000) != 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <supporting> or <caption> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v82, *(void *)(a5 + 40), v79);
                  if (*(char *)(a5 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
                  }
                  else
                  {
                    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = *(_OWORD *)v14;
                    v95.__r_.__value_.__r.__words[2] = *(void *)(a5 + 24);
                  }
                  siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&__p, a1, a2, a5, (uint64_t)&v95, (uint64_t)&v82);
                  siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v36, &__p);
                  if (v109 < 0) {
                    operator delete(v108);
                  }
                  if (v107 < 0) {
                    operator delete(v106);
                  }
                  if (v105 < 0) {
                    operator delete(v104);
                  }
                  if (v103 < 0) {
                    operator delete(v102);
                  }
                  if (v101 < 0) {
                    operator delete(v100);
                  }
                  if (SHIBYTE(v99) < 0) {
                    operator delete(v98);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v95.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v82.__r_.__value_.__l.__data_);
                  HIDWORD(v77) = 1;
                }
              }
              else
              {
LABEL_189:
                uint64_t v48 = *(void *)(a5 + 16);
LABEL_190:
                if (v48 == 8)
                {
                  long long v46 = *v14;
LABEL_192:
                  BOOL v44 = *v46 == 0x746E656D6D6F6323;
                }
                else
                {
LABEL_203:
                  BOOL v44 = 0;
                }
LABEL_204:
                if (((v44 | v42 | v80) & 1) == 0)
                {
                  siri::dialogengine::SkipNodeBranch(a2, (int *)a5);
                  int v42 = 0;
                  int v80 = 0;
                  BYTE4(v78) = 1;
                }
              }
LABEL_274:
              if (v81 < 1 || *(_DWORD *)a5 == -1) {
                break;
              }
              continue;
            case 10:
              if (*(void *)*v14 != 0x6974726F70707573 || *((_WORD *)*v14 + 4) != 26478) {
                goto LABEL_203;
              }
              goto LABEL_206;
            default:
              goto LABEL_190;
          }
          break;
        }
      }
    }
    int v73 = v78 | HIDWORD(v77);
    if (((v78 | HIDWORD(v77)) & 1) == 0)
    {
      if (((v77 | v76) & 1) == 0)
      {
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v135);
        siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v36, &__p);
        if (v109 < 0) {
          operator delete(v108);
        }
        if (v107 < 0) {
          operator delete(v106);
        }
        if (v105 < 0) {
          operator delete(v104);
        }
        if (v103 < 0) {
          operator delete(v102);
        }
        if (v101 < 0) {
          operator delete(v100);
        }
        if (SHIBYTE(v99) < 0) {
          operator delete(v98);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v135);
        siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v36, &__p);
        if (v109 < 0) {
          operator delete(v108);
        }
        if (v107 < 0) {
          operator delete(v106);
        }
        if (v105 < 0) {
          operator delete(v104);
        }
        if (v103 < 0) {
          operator delete(v102);
        }
        if (v101 < 0) {
          operator delete(v100);
        }
        if (SHIBYTE(v99) < 0) {
          operator delete(v98);
        }
        goto LABEL_377;
      }
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, &v111, &v110);
      siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v36, &__p);
      if (v109 < 0) {
        operator delete(v108);
      }
      if (v107 < 0) {
        operator delete(v106);
      }
      if (v105 < 0) {
        operator delete(v104);
      }
      if (v103 < 0) {
        operator delete(v102);
      }
      if (v101 < 0) {
        operator delete(v100);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete(v98);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, &v111, &v110);
      siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v36, &__p);
      if (v109 < 0) {
        operator delete(v108);
      }
      if (v107 < 0) {
        operator delete(v106);
      }
      if (v105 < 0) {
        operator delete(v104);
      }
      if (v103 < 0) {
        operator delete(v102);
      }
      if (v101 < 0) {
        operator delete(v100);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete(v98);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "dialog");
      siri::dialogengine::CheckForEqualSpeakAndPrint((unsigned __int8 *)&v110, (unsigned __int8 *)&v111, a1, (uint64_t)&__p, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((v76 & 0x100000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have extra text outside its valid child elements");
      siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((v78 & 0x100000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have extra elements outside its valid child elements");
      siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v73 & (v77 | v76))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have both <full>/<supporting> elements and <print>/<speak> elements");
      siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((v73 & 1) == 0) {
      goto LABEL_379;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&__p, (const siri::dialogengine::SpeakableString *)(v36 + 208));
    siri::dialogengine::SpeakableString::SpeakableString(&v82, (const siri::dialogengine::SpeakableString *)(v36 + 376));
    int v74 = siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)&__p, (unsigned __int8 *)&v82);
    if (v94 < 0) {
      operator delete(v93);
    }
    if (v92 < 0) {
      operator delete(v91);
    }
    if (v90 < 0) {
      operator delete(v89);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (v109 < 0) {
      operator delete(v108);
    }
    if (v107 < 0) {
      operator delete(v106);
    }
    if (v105 < 0) {
      operator delete(v104);
    }
    if (v103 < 0) {
      operator delete(v102);
    }
    if (v101 < 0) {
      operator delete(v100);
    }
    if (SHIBYTE(v99) < 0) {
      operator delete(v98);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!v74) {
      goto LABEL_379;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "<dialog> element has equal <full> and <supporting> content; Consider replacing the child elements with their shared content");
    siri::dialogengine::Context::AddValidationNit(a1, (long long *)&__p, v36);
LABEL_377:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_379:
    siri::dialogengine::GetXmlAttrs(a2, (uint64_t)&__p);
    if ((std::string *)(v36 + 72) != &__p) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v36 + 72, (long long *)__p.__r_.__value_.__l.__data_, (long long *)&__p.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v111.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v134 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
    }
    goto LABEL_391;
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
LABEL_26:
  uint64_t v26 = 0;
  if (v12) {
LABEL_27:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  return v26;
}

void sub_1C5F710BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  if (*(char *)(v74 - 113) < 0) {
    operator delete(*(void **)(v74 - 136));
  }
  if (*(char *)(v74 - 89) < 0) {
    operator delete(*(void **)(v74 - 112));
  }
  if (*(void *)(v74 - 144)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v74 - 144));
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9VisualRefENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  int v2 = operator new(0x100uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F2121A18;
  siri::dialogengine::VisualRef::VisualRef((siri::dialogengine::VisualRef *)(v2 + 3));
  *a1 = v3;
  a1[1] = v2;
}

void siri::dialogengine::GetExpandedValue(std::string *this, xmlTextReaderPtr reader)
{
  InnerXml = xmlTextReaderReadInnerXml(reader);
  unint64_t v5 = InnerXml;
  if (InnerXml) {
    int v6 = (char *)InnerXml;
  }
  else {
    int v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v17, v6);
  unint64_t v7 = xmlTextReaderLookupNamespace(reader, 0);
  unint64_t v8 = v7;
  if (v7) {
    unint64_t v9 = (char *)v7;
  }
  else {
    unint64_t v9 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, v9);
  std::operator+<char>();
  uint64_t v10 = std::string::append(&v13, "\"");
  std::string v14 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)v17, (char *)&v14, (uint64_t)__p, 0, this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v16 < 0)
  {
    operator delete(v15);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v8) {
LABEL_17:
  }
    ((void (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(v8);
LABEL_18:
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (!v5) {
      return;
    }
    goto LABEL_22;
  }
  if (v5) {
LABEL_22:
  }
    ((void (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(v5);
}

void sub_1C5F71720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (v34) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(v34);
  }
  if (*(char *)(v35 - 33) < 0) {
    operator delete(*(void **)(v35 - 56));
  }
  if (v33) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseListAndIterator(uint64_t a1, uint64_t *a2, uint64_t a3, xmlTextReader *a4, siri::dialogengine *a5, uint64_t a6)
{
  std::string::basic_string[abi:ne180100]<0>(v97, "list");
  siri::dialogengine::GetXmlAttr(a4, (const xmlChar *)v97, &__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v94, "iterator");
  siri::dialogengine::GetXmlAttr(a4, (const xmlChar *)v94, &__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v96);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_15;
  }
  std::string::size_type v13 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  char v14 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = v96.__r_.__value_.__l.__size_;
  }
  if (v13)
  {
LABEL_15:
    uint64_t v15 = *(void *)(a3 + 40);
    char v16 = xmlTextReaderConstBaseUri(a4);
    if (v16) {
      int v17 = (char *)v16;
    }
    else {
      int v17 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)v93, v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v18 = __str.__r_.__value_.__l.__size_;
    }
    if (!v18)
    {
      std::operator+<char>();
      uint64_t v20 = std::string::append(&v100, "' has no sibling list declaration");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, (uint64_t)v93);
LABEL_31:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_152;
      }
      char v24 = (void *)v100.__r_.__value_.__r.__words[0];
      goto LABEL_151;
    }
    if (!siri::dialogengine::IsValidCompoundVariableName((uint64_t)&__str)) {
      goto LABEL_30;
    }
    if (!siri::dialogengine::IsValidVariableName((uint64_t)&v96))
    {
      std::string::size_type v19 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v19 = v96.__r_.__value_.__l.__size_;
      }
      if (v19)
      {
LABEL_30:
        std::operator+<char>();
        uint64_t v22 = std::string::append(&v100, "' is not a valid variable name (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, (uint64_t)v93);
        goto LABEL_31;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v92, "");
    uint64_t v25 = *(unsigned __int8 *)(a6 + 23);
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(a6 + 8);
    }
    if (v25)
    {
      uint64_t v27 = (*(uint64_t (**)(siri::dialogengine *))(*(void *)a5 + 168))(a5);
      if (!v27)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection descriptor", v26);
        goto LABEL_149;
      }
      siri::dialogengine::FieldNameFromElementName(a6, (uint64_t)&__p);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      std::string v92 = __p;
      if (!google::protobuf::Descriptor::FindFieldByName(v27, (uint64_t)&v92))
      {
        std::operator+<char>();
        uint64_t v36 = std::string::append(&v88, "' from element '");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        int v38 = *(char *)(a6 + 23);
        if (v38 >= 0) {
          BOOL v39 = (const std::string::value_type *)a6;
        }
        else {
          BOOL v39 = *(const std::string::value_type **)a6;
        }
        if (v38 >= 0) {
          std::string::size_type v40 = *(unsigned __int8 *)(a6 + 23);
        }
        else {
          std::string::size_type v40 = *(void *)(a6 + 8);
        }
        float v41 = std::string::append(&v89, v39, v40);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        int v43 = std::string::append(&v90, "' on message '");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        uint64_t v45 = *(void *)(v27 + 8);
        int v46 = *(char *)(v45 + 23);
        if (v46 >= 0) {
          int v47 = *(const std::string::value_type **)(v27 + 8);
        }
        else {
          int v47 = *(const std::string::value_type **)v45;
        }
        if (v46 >= 0) {
          std::string::size_type v48 = *(unsigned __int8 *)(v45 + 23);
        }
        else {
          std::string::size_type v48 = *(void *)(v45 + 8);
        }
        int v49 = std::string::append(&v91, v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v100, "'");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_149;
        }
        char v53 = (void *)v88.__r_.__value_.__r.__words[0];
        goto LABEL_148;
      }
    }
    siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
    LODWORD(__p.__r_.__value_.__r.__words[2]) |= 1u;
    std::string::basic_string[abi:ne180100]<0>(&v100, "VCPB");
    *(void *)&double v29 = google::protobuf::internal::ArenaStringPtr::SetNoArena(&v83, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v100).n128_u64[0];
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (v85 == 3)
    {
      std::string::size_type v30 = v84;
      if (v84) {
        goto LABEL_46;
      }
    }
    else
    {
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&__p);
      int v85 = 3;
      std::string::size_type v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
      char v84 = v30;
      if (v30)
      {
LABEL_46:
        char v31 = (std::string *)*((void *)v30 + 3);
        *((_DWORD *)v30 + 4) |= 1u;
        if (v31 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v30 + 24, (uint64_t)&__str);
        }
        std::string::operator=(v31, &__str);
        int v54 = (std::string *)*((void *)v30 + 4);
        *((_DWORD *)v30 + 4) |= 2u;
        if (v54 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v30 + 32, (uint64_t)&v96);
        }
        std::string::operator=(v54, &v96);
        std::string::size_type v56 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v92.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          std::string v59 = (uint64_t *)*((void *)v30 + 5);
          uint64_t v58 = (uint64_t)v30 + 40;
          int v57 = (std::string *)v59;
          *(_DWORD *)(v58 - 24) |= 4u;
          if (v59 == &google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v58, (uint64_t)&v92);
          }
          std::string::operator=(v57, &v92);
        }
        siri::dialogengine::StoreVisualCatItem(a5, (google::protobuf::Message *)&__p, v55);
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
        if (!*a2)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create parameter for iterator", v60);
          goto LABEL_149;
        }
        siri::dialogengine::ResolveType(0, a1, (uint64_t)&__str, 1, (uint64_t)&__p);
        siri::dialogengine::GetArrayElementType((uint64_t)&__p, &v100);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t Parameter = siri::dialogengine::File::GetParameter(*a2, (unsigned __int8 **)&v96);
        if (!Parameter)
        {
          std::string::basic_string[abi:ne180100]<0>(&v91, "Iterator parameter inserted at runtime");
          std::string::basic_string[abi:ne180100]<0>(&v90, "");
          std::string::basic_string[abi:ne180100]<0>(&v89, "");
          std::string::basic_string[abi:ne180100]<0>(&v88, "");
          std::string::basic_string[abi:ne180100]<0>(&v81, "");
          std::string::basic_string[abi:ne180100]<0>(&v80, "");
          siri::dialogengine::Parameter::Parameter((uint64_t)&__p, &v96, &v100, &v91, &v90, &v89, &v88, &v81, &v80, 1, 0, 0, 1);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          uint64_t v87 = 0;
          char v86 = 1;
          siri::dialogengine::File::AddParameter((siri::dialogengine::File *)*a2, (const siri::dialogengine::Parameter *)&__p);
          siri::dialogengine::Parameter::~Parameter((siri::dialogengine::Parameter *)&__p);
LABEL_146:
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          {
            char v53 = (void *)v100.__r_.__value_.__r.__words[0];
LABEL_148:
            operator delete(v53);
          }
LABEL_149:
          if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_152:
            siri::dialogengine::LineNumberBase::~LineNumberBase(v93);
            char v14 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
            goto LABEL_153;
          }
          char v24 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_151:
          operator delete(v24);
          goto LABEL_152;
        }
        if (*(char *)(Parameter + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(Parameter + 32), *(void *)(Parameter + 40));
        }
        else {
          std::string __p = *(std::string *)(Parameter + 32);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = __p.__r_.__value_.__l.__size_;
        }
        std::string::size_type v63 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v63 = v100.__r_.__value_.__l.__size_;
        }
        if (v62 == v63)
        {
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v64 = &v100;
          }
          else {
            char v64 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            int v70 = memcmp(__p.__r_.__value_.__l.__data_, v64, __p.__r_.__value_.__l.__size_);
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_131;
          }
          if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
            goto LABEL_146;
          }
          uint64_t v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
          p_p = &__p;
          do
          {
            int v68 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            int v67 = v68;
            int v69 = v64->__r_.__value_.__s.__data_[0];
            char v64 = (std::string *)((char *)v64 + 1);
            int v70 = v67 != v69;
          }
          while (v67 == v69 && v65-- != 0);
        }
        else
        {
          int v70 = 1;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v70 & 1) == 0) {
            goto LABEL_146;
          }
          goto LABEL_132;
        }
LABEL_131:
        if (!v70) {
          goto LABEL_146;
        }
LABEL_132:
        std::operator+<char>();
        int v72 = std::string::append(&v89, "' already exists and is not of type '");
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v74 = &v100;
        }
        else {
          uint64_t v74 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v75 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v75 = v100.__r_.__value_.__l.__size_;
        }
        uint64_t v76 = std::string::append(&v90, (const std::string::value_type *)v74, v75);
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        uint64_t v78 = std::string::append(&v91, "'.  Please choose a different name for your iterator");
        long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        goto LABEL_146;
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable repetition message", v28, v29);
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
    uint64_t v35 = *(void *)(a3 + 8);
    uint64_t v34 = a3 + 8;
    uint64_t v33 = v35;
    if (*(char *)(v34 + 23) >= 0) {
      uint64_t v33 = v34;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to store list repetition for '%s'", v32, v33);
    goto LABEL_149;
  }
LABEL_153:
  if (v14 < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F721BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)(v1 - 256));
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine6DialogENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  int v2 = operator new(0x270uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F21225C0;
  bzero(v2 + 3, 0x258uLL);
  siri::dialogengine::Dialog::Dialog((siri::dialogengine::Dialog *)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;
}

void siri::dialogengine::CheckForEqualSpeakAndPrint(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a1[23];
  }
  else {
    uint64_t v7 = *((void *)a1 + 1);
  }
  uint64_t v8 = a2[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  if (v7 != v8) {
    return;
  }
  if (v9 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return;
    }
    goto LABEL_15;
  }
  if (!a1[23])
  {
LABEL_15:
    std::operator+<char>();
    int v11 = std::string::append(&v13, "> element has equal <speak> and <print> content; Consider replacing the child elements with their shared content");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationNit(a3, (long long *)__p, a5);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    return;
  }
  while (*a1 == *a2)
  {
    ++a1;
    ++a2;
    if (!--v6) {
      goto LABEL_15;
    }
  }
}

void sub_1C5F726F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Dialog>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::Dialog>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21225C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::Dialog>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21225C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Text>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::Text>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::Text>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupFallback>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFallback>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21218F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFallback>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21218F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21218A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21218A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21217B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21217B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21228A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21228A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2121718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Condition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2122850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2122850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void siri::dialogengine::ParseXmlString(Context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X8>)
{
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  if (v7 >= 0) {
    int v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v9 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v10 = xmlReaderForMemory(v8, v9, 0, 0, 0);
  if (v10)
  {
    siri::dialogengine::ParseXmlInternal(a4, a1, v10, a3);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot parse CAT XML string", v11);
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
  }
}

uint64_t siri::dialogengine::ArrayValue::ArrayValue(uint64_t a1, void **a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(void *)a1 = &unk_1F2121BA8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 7;
  *(void *)a1 = &unk_1F2121BA8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void siri::dialogengine::ArrayValue::~ArrayValue(siri::dialogengine::ArrayValue *this)
{
  *(void *)this = &unk_1F2121BA8;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1C8796D70);
}

{
  void **v1;

  *(void *)this = &unk_1F2121BA8;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t siri::dialogengine::JSONValue::JSONValue(uint64_t result, int a2)
{
  *(void *)double result = &unk_1F2121CA8;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  *(void *)double result = &unk_1F2121CA8;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void siri::dialogengine::JSONValue::~JSONValue(siri::dialogengine::JSONValue *this)
{
}

uint64_t siri::dialogengine::ObjectValue::ObjectValue(uint64_t this)
{
  *(_DWORD *)(this + 8) = 6;
  *(void *)this = &unk_1F2121BC8;
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = this + 24;
  return this;
}

{
  *(_DWORD *)(this + 8) = 6;
  *(void *)this = &unk_1F2121BC8;
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = this + 24;
  return this;
}

void siri::dialogengine::ObjectValue::~ObjectValue(siri::dialogengine::ObjectValue *this)
{
  *(void *)this = &unk_1F2121BC8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 3));
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2121BC8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 3));
}

uint64_t siri::dialogengine::ObjectValue::ObjectValue(uint64_t a1, const void ***a2)
{
  *(_DWORD *)(a1 + 8) = 6;
  *(void *)a1 = &unk_1F2121BC8;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a1 + 16, a2);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 6;
  *(void *)a1 = &unk_1F2121BC8;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a1 + 16, a2);
  return a1;
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  __int16 v4 = a2 + 1;
  unint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t **)a1, v3, v5 + 4, (long long *)v5 + 2);
      uint64_t v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          int v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (const void ***)v5[2];
          BOOL v8 = *v7 == v5;
          unint64_t v5 = (const void **)v7;
        }
        while (!v8);
      }
      unint64_t v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1C5F73258(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IntValue::IntValue(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F2121BE8;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F2121BE8;
  return this;
}

void siri::dialogengine::IntValue::~IntValue(siri::dialogengine::IntValue *this)
{
}

uint64_t siri::dialogengine::UintValue::UintValue(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F2121C08;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F2121C08;
  return this;
}

void siri::dialogengine::UintValue::~UintValue(siri::dialogengine::UintValue *this)
{
}

uint64_t siri::dialogengine::Int64Value::Int64Value(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 8) = 2;
  *(void *)this = &unk_1F2121C28;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 2;
  *(void *)this = &unk_1F2121C28;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

void siri::dialogengine::Int64Value::~Int64Value(siri::dialogengine::Int64Value *this)
{
}

uint64_t siri::dialogengine::BoolValue::BoolValue(uint64_t this, char a2)
{
  *(_DWORD *)(this + 8) = 3;
  *(void *)this = &unk_1F2121C48;
  *(unsigned char *)(this + 12) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 3;
  *(void *)this = &unk_1F2121C48;
  *(unsigned char *)(this + 12) = a2;
  return this;
}

void siri::dialogengine::BoolValue::~BoolValue(siri::dialogengine::BoolValue *this)
{
}

uint64_t siri::dialogengine::StringValue::StringValue(uint64_t a1, long long *a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(void *)a1 = &unk_1F2121C68;
  uint64_t v3 = (std::string *)(a1 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void siri::dialogengine::StringValue::~StringValue(void **this)
{
  *this = &unk_1F2121C68;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F2121C68;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t siri::dialogengine::DoubleValue::DoubleValue(uint64_t this, double a2)
{
  *(_DWORD *)(this + 8) = 5;
  *(void *)this = &unk_1F2121C88;
  *(double *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 5;
  *(void *)this = &unk_1F2121C88;
  *(double *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2;
  return this;
}

void siri::dialogengine::DoubleValue::~DoubleValue(siri::dialogengine::DoubleValue *this)
{
}

uint64_t siri::dialogengine::JSONValue::GetValueType(siri::dialogengine::JSONValue *this)
{
  return *((unsigned int *)this + 2);
}

char *siri::dialogengine::ArrayValue::GetVal@<X0>(siri::dialogengine::ArrayValue *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)a2, *((void **)this + 2), *((void **)this + 3), (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 4);
}

uint64_t siri::dialogengine::ObjectValue::GetVal@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a2, this + 2);
}

void siri::dialogengine::ObjectValue::SetVal(uint64_t a1, void *a2)
{
  int v2 = (uint64_t **)(a1 + 16);
  if ((void *)(a1 + 16) != a2)
  {
    uint64_t v3 = a2 + 1;
    long long v4 = (void *)*a2;
    if (*(void *)(a1 + 32))
    {
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = (void *)(a1 + 24);
      int v7 = (void *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *unint64_t v5 = 0;
      v5[1] = 0;
      if (v7[1]) {
        BOOL v8 = (void *)v7[1];
      }
      else {
        BOOL v8 = v7;
      }
      uint64_t v22 = v2;
      long long v23 = v8;
      char v24 = v8;
      if (!v8 || (long long v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        std::string::size_type v15 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          uint64_t v10 = v4[7];
          uint64_t v9 = v4[8];
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          int v11 = (std::__shared_weak_count *)v8[8];
          v8[7] = v10;
          v8[8] = v9;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          long long v12 = v24;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v24 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v21, leaf_high, v12);
          BOOL v8 = v23;
          char v24 = v23;
          if (v23) {
            long long v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          char v14 = (void *)v4[1];
          if (v14)
          {
            do
            {
              std::string::size_type v15 = v14;
              char v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              std::string::size_type v15 = (void *)v4[2];
              BOOL v16 = *v15 == (void)v4;
              long long v4 = v15;
            }
            while (!v16);
          }
          if (!v8) {
            break;
          }
          long long v4 = v15;
        }
        while (v15 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      long long v4 = v15;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t)&v22, (uint64_t)v2, (long long *)v4 + 2);
        int v17 = (uint64_t *)v22;
        std::string::size_type v18 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v22 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v21, v18, v17);
        uint64_t v22 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
        std::string::size_type v19 = (void *)v4[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            std::string::size_type v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v4[2];
            BOOL v16 = *v20 == (void)v4;
            long long v4 = v20;
          }
          while (!v16);
        }
        long long v4 = v20;
      }
      while (v20 != v3);
    }
  }
}

void sub_1C5F7382C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectValue::InsertVal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v4 = (uint64_t **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  BOOL v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F738DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t siri::dialogengine::IntValue::GetVal(siri::dialogengine::IntValue *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t siri::dialogengine::UintValue::GetVal(siri::dialogengine::UintValue *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t siri::dialogengine::Int64Value::GetVal(siri::dialogengine::Int64Value *this)
{
  return *((void *)this + 2);
}

uint64_t siri::dialogengine::BoolValue::GetVal(siri::dialogengine::BoolValue *this)
{
  return *((unsigned __int8 *)this + 12);
}

void siri::dialogengine::StringValue::GetVal(siri::dialogengine::StringValue *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

double siri::dialogengine::DoubleValue::GetVal(siri::dialogengine::DoubleValue *this)
{
  return *((double *)this + 2);
}

void siri::dialogengine::PropertyBase::GetName(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

std::string *siri::dialogengine::PropertyBase::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void siri::dialogengine::PropertyBase::GetType(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

std::string *siri::dialogengine::PropertyBase::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::PropertyBase::GetDescription(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

std::string *siri::dialogengine::PropertyBase::SetDescription(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::dialogengine::PropertyBase::GetSampleValue(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 12);
  }
}

void siri::dialogengine::PropertyBase::GetSampleValueAsArray(siri::dialogengine::PropertyBase *this@<X0>, uint64_t *a2@<X8>)
{
  *(void *)&long long v10 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v9, "[");
  long long v4 = (std::string *)((char *)this + 80);
  BOOL v5 = siri::dialogengine::StringStartsWith(v4, (unsigned __int8 *)&v9);
  BOOL v6 = v5;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_3;
    }
LABEL_7:
    siri::dialogengine::StringTrim("\"", v4, &v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    __p.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v7 = (std::string *)operator new(0x18uLL);
    *a2 = (uint64_t)v7;
    a2[1] = (uint64_t)v7;
    a2[2] = (uint64_t)&v7[1];
    a2[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)&v9, &v10, v7);
    goto LABEL_8;
  }
  if (!v5) {
    goto LABEL_7;
  }
LABEL_3:
  siri::dialogengine::StringTrimLeft("[", v4, &__p);
  siri::dialogengine::StringTrimRight("]", &__p, &v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::ParseStringList((uint64_t *)&v9, 1, a2);
LABEL_8:
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F73B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v23 = v22;
  *(void *)(v21 + 8) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::PropertyBase::SetSampleValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void siri::dialogengine::PropertyBase::GetVersionAdded(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

std::string *siri::dialogengine::PropertyBase::SetVersionAdded(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::PropertyBase::GetDeprecated(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 18);
  }
}

std::string *siri::dialogengine::PropertyBase::SetDeprecated(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

uint64_t siri::dialogengine::PropertyBase::IsProfanityFilter(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t siri::dialogengine::PropertyBase::SetProfanityFilter(uint64_t this, char a2)
{
  *(unsigned char *)(this + 152) = a2;
  return this;
}

uint64_t siri::dialogengine::PropertyBase::IsOptional(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 153);
}

uint64_t siri::dialogengine::PropertyBase::SetOptional(uint64_t this, char a2)
{
  *(unsigned char *)(this + 153) = a2;
  return this;
}

uint64_t siri::dialogengine::PropertyBase::IsRedacted(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 154);
}

uint64_t siri::dialogengine::PropertyBase::SetRedacted(uint64_t this, char a2)
{
  *(unsigned char *)(this + 154) = a2;
  return this;
}

BOOL siri::dialogengine::PropertyBase::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  BOOL v8 = (const void **)(a1 + 8);
  if (v5 >= 0) {
    std::string v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    std::string v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      BOOL v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 40);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 55);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 40);
  }
  if (v11 != v12) {
    return 0;
  }
  char v14 = (const void **)(a1 + 32);
  if (v13 >= 0) {
    std::string::size_type v15 = (unsigned __int8 *)(a2 + 32);
  }
  else {
    std::string::size_type v15 = *(unsigned __int8 **)(a2 + 32);
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(void *)(a1 + 40))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      char v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  uint64_t v16 = *(unsigned __int8 *)(a1 + 79);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 64);
  }
  uint64_t v18 = *(unsigned __int8 *)(a2 + 79);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 64);
  }
  if (v17 != v18) {
    return 0;
  }
  uint64_t v20 = (const void **)(a1 + 56);
  if (v19 >= 0) {
    uint64_t v21 = (unsigned __int8 *)(a2 + 56);
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)(a2 + 56);
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v20, v21, *(void *)(a1 + 64))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      uint64_t v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16) {
        goto LABEL_46;
      }
    }
    return 0;
  }
LABEL_46:
  uint64_t v22 = *(unsigned __int8 *)(a1 + 103);
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v23 = *(void *)(a1 + 88);
  }
  uint64_t v24 = *(unsigned __int8 *)(a2 + 103);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 88);
  }
  if (v23 != v24) {
    return 0;
  }
  uint64_t v26 = (const void **)(a1 + 80);
  if (v25 >= 0) {
    uint64_t v27 = (unsigned __int8 *)(a2 + 80);
  }
  else {
    uint64_t v27 = *(unsigned __int8 **)(a2 + 80);
  }
  if ((v22 & 0x80) != 0)
  {
    if (memcmp(*v26, v27, *(void *)(a1 + 88))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 103))
  {
    while (*(unsigned __int8 *)v26 == *v27)
    {
      uint64_t v26 = (const void **)((char *)v26 + 1);
      ++v27;
      if (!--v22) {
        goto LABEL_61;
      }
    }
    return 0;
  }
LABEL_61:
  uint64_t v28 = *(unsigned __int8 *)(a1 + 127);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = *(unsigned __int8 *)(a1 + 127);
  }
  else {
    uint64_t v29 = *(void *)(a1 + 112);
  }
  uint64_t v30 = *(unsigned __int8 *)(a2 + 127);
  int v31 = (char)v30;
  if ((v30 & 0x80u) != 0) {
    uint64_t v30 = *(void *)(a2 + 112);
  }
  if (v29 != v30) {
    return 0;
  }
  long long v32 = (const void **)(a1 + 104);
  if (v31 >= 0) {
    uint64_t v33 = (unsigned __int8 *)(a2 + 104);
  }
  else {
    uint64_t v33 = *(unsigned __int8 **)(a2 + 104);
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v32, v33, *(void *)(a1 + 112))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 127))
  {
    while (*(unsigned __int8 *)v32 == *v33)
    {
      long long v32 = (const void **)((char *)v32 + 1);
      ++v33;
      if (!--v28) {
        goto LABEL_76;
      }
    }
    return 0;
  }
LABEL_76:
  uint64_t v34 = *(unsigned __int8 *)(a1 + 151);
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = *(unsigned __int8 *)(a1 + 151);
  }
  else {
    uint64_t v35 = *(void *)(a1 + 136);
  }
  uint64_t v36 = *(unsigned __int8 *)(a2 + 151);
  int v37 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    uint64_t v36 = *(void *)(a2 + 136);
  }
  if (v35 != v36) {
    return 0;
  }
  int v38 = (const void **)(a1 + 128);
  if (v37 >= 0) {
    BOOL v39 = (unsigned __int8 *)(a2 + 128);
  }
  else {
    BOOL v39 = *(unsigned __int8 **)(a2 + 128);
  }
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(void *)(a1 + 136))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 151))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      int v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34) {
        goto LABEL_91;
      }
    }
    return 0;
  }
LABEL_91:
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152)
    && *(unsigned __int8 *)(a1 + 153) == *(unsigned __int8 *)(a2 + 153))
  {
    return *(unsigned __int8 *)(a1 + 154) == *(unsigned __int8 *)(a2 + 154);
  }
  return 0;
}

uint64_t siri::dialogengine::PropertyBase::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) ^ 1;
}

void InitDefaultsscc_info_CoreChartElement_CoreChartElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", a4);
  SnippetUI::CoreChartElement::CoreChartElement((SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CoreChartElement_default_instance_, v4);
  qword_1EB68F958 = (uint64_t)&SnippetUI::_CoreChart_default_instance_;
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::CoreChartElement(SnippetUI::CoreChartElement *this)
{
  *(void *)this = &unk_1F2121D98;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (atomic_load_explicit(scc_info_CoreChartElement_CoreChartElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChartElement_CoreChartElement_2eproto);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5F740C4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CoreChartElement::GetMetadata(SnippetUI::CoreChartElement *this)
{
  return file_level_metadata_CoreChartElement_2eproto;
}

uint64_t SnippetUI::CoreChartElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::CoreChartElement::MergeFrom(SnippetUI::CoreChartElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", 283);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::CoreChartElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F741E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChartElement::MergeFrom(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", 298);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChartElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    BOOL v6 = (const SnippetUI::CoreChart *)*((void *)a2 + 5);
    if (v6)
    {
      char v7 = (SnippetUI::CoreChart *)*((void *)this + 5);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
        *((void *)this + 5) = v7;
        BOOL v6 = (const SnippetUI::CoreChart *)*((void *)a2 + 5);
      }
      if (v6) {
        BOOL v8 = v6;
      }
      else {
        BOOL v8 = (const SnippetUI::CoreChart *)&SnippetUI::_CoreChart_default_instance_;
      }
      SnippetUI::CoreChart::MergeFrom(v7, v8);
    }
  }
}

void sub_1C5F742D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChartElement::CopyFrom(SnippetUI::CoreChartElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChartElement::Clear(this);
    SnippetUI::CoreChartElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChartElement::Clear(SnippetUI::CoreChartElement *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  *((void *)v3 + 4) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::CoreChartElement::InternalSerializeWithCachedSizesToArray(SnippetUI::CoreChartElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    char v7 = (SnippetUI::CoreChart *)*((void *)this + 5);
    if (v7)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v7 = (SnippetUI::CoreChart *)*((void *)this + 5);
      }
      *uint64_t v5 = 10;
      unsigned int v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          uint64_t v11 = v5 + 2;
          do
          {
            uint64_t v12 = v11;
            *v11++ = v10 | 0x80;
            unsigned int v13 = v10 >> 7;
            unsigned int v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          char v9 = v12 + 2;
          unsigned char *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          char v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        char v9 = v5 + 2;
      }
      uint64_t v5 = (char *)SnippetUI::CoreChart::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
    }
  }
  unsigned int v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    unint64_t v16 = *(void *)a3;
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v16 = *(void *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      uint64_t v17 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    }
    *uint64_t v5 = 18;
    uint64_t v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        unsigned int v30 = v15 >> 14;
        v15 >>= 7;
      }
      while (v30);
      uint64_t v5 = v18 - 1;
    }
    v5 += 2;
    unsigned char *v18 = v15;
    int v19 = (int *)*((void *)this + 3);
    uint64_t v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      unint64_t v22 = *v19++;
      unint64_t v21 = v22;
      if (v22 > 0x7F)
      {
        *uint64_t v5 = v21 | 0x80;
        unint64_t v23 = v21 >> 7;
        if (v21 >> 14)
        {
          uint64_t v24 = v5 + 1;
          do
          {
            int v25 = v24;
            *v24++ = v23 | 0x80;
            unint64_t v26 = v23 >> 7;
            unint64_t v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          uint64_t v5 = v25 + 2;
          *uint64_t v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  uint64_t v28 = *((void *)this + 1);
  if (v28) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  }
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1C5F74604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::CoreChartElement::_InternalParse(SnippetUI::CoreChartElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v27 = a2;
  uint64_t v5 = (SnippetUI::CoreChartElement *)((char *)this + 16);
  BOOL v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)))return v27; {
        TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
        }
        unsigned int v10 = (char *)*(unsigned __int8 *)v27;
        if ((*(char *)v27 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_6:
          unint64_t v27 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v10);
        unint64_t v27 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        if (v10 >> 3 == 2) {
          break;
        }
        if (v10 >> 3 != 1 || v10 != 10) {
          goto LABEL_12;
        }
        unsigned int v14 = (SnippetUI::CoreChart *)*((void *)this + 5);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
          *((void *)this + 5) = v14;
          TagFallback = v27;
        }
        unsigned int v15 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            return 0;
          }
          unint64_t v16 = SizeFallback;
          unsigned int v15 = v18;
        }
        else
        {
          unint64_t v16 = (char *)TagFallback + 1;
        }
        int v19 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v16, v15);
        int v20 = *((_DWORD *)a3 + 22);
        BOOL v21 = __OFSUB__(v20--, 1);
        *((_DWORD *)a3 + 22) = v20;
        if (v20 < 0 != v21) {
          return 0;
        }
        int v22 = v19;
        unint64_t v23 = SnippetUI::CoreChart::_InternalParse(v14, (google::protobuf::internal *)v16, a3);
        if (!v23) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v24 = *((_DWORD *)a3 + 7) + v22;
        *((_DWORD *)a3 + 7) = v24;
        *(void *)a3 = *((void *)a3 + 1) + (v24 & (v24 >> 31));
        unint64_t v27 = v23;
      }
      if (v10 == 18)
      {
        unsigned int v13 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
        goto LABEL_19;
      }
      if (v10 != 16) {
        break;
      }
      int v25 = google::protobuf::internal::ReadVarint(&v27, (const char **)v10);
      if (!v27) {
        return 0;
      }
      SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v25);
    }
LABEL_12:
    if (!v10 || (v10 & 7) == 4) {
      break;
    }
    unsigned int v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
LABEL_19:
    unint64_t v27 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v10 - 1;
  return TagFallback;
}

uint64_t SnippetUI::CoreChartElement::GetCachedSize(SnippetUI::CoreChartElement *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::CoreChartElement::ByteSizeLong(SnippetUI::CoreChartElement *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  int v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_11:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5) {
    goto LABEL_11;
  }
  if ((v5 & 0x80000000) != 0) {
    uint64_t v8 = 11;
  }
  else {
    uint64_t v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  unsigned int v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    uint64_t v11 = (SnippetUI::CoreChart *)*((void *)this + 5);
    if (v11)
    {
      uint64_t v12 = SnippetUI::CoreChart::ByteSizeLong(v11);
      unsigned int v10 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CoreChartElement *)((char *)this + 8), v10, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v10;
    return (char *)v10;
  }
}

uint64_t SnippetUI::CoreChartElement::IsInitialized(SnippetUI::CoreChartElement *this)
{
  return 1;
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::New(SnippetUI::CoreChartElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(a2);
}

SnippetUI::CoreChartElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::CoreChartElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChartElement>);
  }
  SnippetUI::CoreChartElement::CoreChartElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F74A24(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChartElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::New(SnippetUI::CoreChartElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
}

void SnippetUI::CoreChartElement::~CoreChartElement(SnippetUI::CoreChartElement *this)
{
  SnippetUI::CoreChartElement::~CoreChartElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2121D98;
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::CoreChartElement::InitAsDefaultInstance(SnippetUI::CoreChartElement *this)
{
  qword_1EB68F958 = (uint64_t)&SnippetUI::_CoreChart_default_instance_;
}

uint64_t SnippetUI::CoreChartElement::_Internal::chart(SnippetUI::CoreChartElement::_Internal *this, const SnippetUI::CoreChartElement *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::CoreChartElement::clear_chart(SnippetUI::CoreChartElement *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::CoreChartElement(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  *(void *)this = &unk_1F2121D98;
  *((void *)this + 1) = 0;
  int v4 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_ && *((void *)a2 + 5)) {
    operator new();
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5F74C74(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C4084265165);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::CoreChartElement::default_instance(SnippetUI::CoreChartElement *this)
{
  if (atomic_load_explicit(scc_info_CoreChartElement_CoreChartElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChartElement_CoreChartElement_2eproto);
  }
  return &SnippetUI::_CoreChartElement_default_instance_;
}

void SnippetUI::CoreChartElement::CopyFrom(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChartElement::Clear(this);
    SnippetUI::CoreChartElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChartElement::InternalSwap(SnippetUI::CoreChartElement *this, SnippetUI::CoreChartElement *a2)
{
  int v4 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
}

uint64_t siri::dialogengine::IsValidVersionNumber(char *a1)
{
  int v1 = a1[23];
  if (v1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = *(char **)a1;
  }
  if (v1 >= 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  if (v3)
  {
    int v4 = 1;
    uint64_t v5 = MEMORY[0x1E4F14390];
    int v6 = 1;
    while (1)
    {
      unsigned int v7 = *v2;
      if ((v7 & 0x80000000) == 0) {
        break;
      }
      if (!__maskrune(v7, 0x4000uLL))
      {
        int v9 = 0;
LABEL_18:
        BOOL v8 = v9 == 0;
        BOOL v10 = v9 != 0;
        int v11 = v8;
        v6 &= v11;
        v4 &= v10;
      }
LABEL_22:
      ++v2;
      if (!--v3) {
        return v4 & ~v6 & 1;
      }
    }
    BOOL v8 = v7 != 46 && (*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0;
    if (!v8) {
      goto LABEL_22;
    }
    int v9 = (*(_DWORD *)(v5 + 4 * v7 + 60) >> 10) & 1;
    goto LABEL_18;
  }
  int v6 = 1;
  int v4 = 1;
  return v4 & ~v6 & 1;
}

void siri::dialogengine::GetMajorVersion(std::string *a1@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", v8);
  if (v8[0] == v8[1]) {
    goto LABEL_6;
  }
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__str);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  BOOL v4 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_6;
    }
LABEL_8:
    siri::dialogengine::StringTrim(" \t\n\r", v8[0], a2);
    goto LABEL_9;
  }
  if (!v4) {
    goto LABEL_8;
  }
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(a2, "0");
LABEL_9:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1C5F74F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = (void *)(v21 - 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetMinorVersion(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::StringSplit(a1, ".", v3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - v3[0]) >> 3) < 2) {
    goto LABEL_6;
  }
  if (*(char *)(v3[0] + 47) < 0)
  {
    if (*(void *)(v3[0] + 32)) {
      goto LABEL_4;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(a2, "0");
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v3[0] + 47)) {
    goto LABEL_6;
  }
LABEL_4:
  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v3[0] + 24), a2);
LABEL_7:
  BOOL v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1C5F7505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VersionGreaterThan(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    return 0;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", &v16);
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", v15);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
  int64_t v6 = v15[1] - v15[0];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * v6;
  if (v5 <= 0xAAAAAAAAAAAAAAABLL * v6) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * v6;
  }
  else {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
  }
  if (v8)
  {
    uint64_t v9 = 0;
    for (unint64_t i = 0; v8 != i; ++i)
    {
      int v11 = v5 <= i ? 0 : siri::dialogengine::StringToInt((const std::string *)(v16 + v9 * 8), 0, 0);
      int v12 = v7 <= i ? 0 : siri::dialogengine::StringToInt((const std::string *)&v15[0][v9], 0, 0);
      if (v11 < v12) {
        break;
      }
      if (v11 > v12)
      {
        uint64_t v13 = 1;
        goto LABEL_24;
      }
      v9 += 3;
    }
  }
  uint64_t v13 = 0;
LABEL_24:
  unsigned int v18 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v15[0] = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  return v13;
}

void sub_1C5F751E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VersionEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a1[23];
  }
  else {
    uint64_t v4 = *((void *)a1 + 1);
  }
  uint64_t v5 = a2[23];
  if (v4)
  {
    uint64_t v6 = *((void *)a2 + 1);
    if ((v5 & 0x80u) == 0) {
      uint64_t v7 = a2[23];
    }
    else {
      uint64_t v7 = *((void *)a2 + 1);
    }
    if (v7)
    {
      siri::dialogengine::StringSplit(a1, ".", &v24);
      siri::dialogengine::StringSplit(v2, ".", v23);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
      if (v8 == 0xAAAAAAAAAAAAAAABLL * (v23[1] - v23[0]))
      {
        if (v25 == v24)
        {
          BOOL v10 = 1;
        }
        else
        {
          uint64_t v9 = 0;
          BOOL v10 = 0;
          uint64_t v11 = 0;
          if (v8 <= 1) {
            unint64_t v12 = 1;
          }
          else {
            unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          }
          do
          {
            int v13 = siri::dialogengine::StringToInt((const std::string *)(v24 + v9 * 8), 0, 0);
            if (v13 != siri::dialogengine::StringToInt((const std::string *)&v23[0][v9], 0, 0)) {
              break;
            }
            BOOL v10 = ++v11 >= v8;
            v9 += 3;
          }
          while (v12 != v11);
        }
      }
      else
      {
        BOOL v10 = 0;
      }
      unint64_t v26 = v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      v23[0] = (void **)&v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
      return v10;
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
  }
  int v14 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = v6;
  }
  if (v4 == v5)
  {
    if (v14 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((v3 & 0x80) != 0)
    {
      return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      uint64_t v15 = v3 - 1;
      do
      {
        int v17 = *a1++;
        int v16 = v17;
        int v19 = *a2++;
        int v18 = v19;
        BOOL v21 = v15-- != 0;
        BOOL v10 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

void sub_1C5F753E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VersionNotEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !siri::dialogengine::VersionEqual(a1, a2);
}

uint64_t siri::dialogengine::VersionGreaterThanOrEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (siri::dialogengine::VersionEqual(a1, a2)) {
    return 1;
  }
  return siri::dialogengine::VersionGreaterThan((uint64_t)a1, (uint64_t)a2);
}

uint64_t siri::dialogengine::VersionLessThan(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (siri::dialogengine::VersionEqual(a1, a2)) {
    return 0;
  }
  else {
    return siri::dialogengine::VersionGreaterThan((uint64_t)a1, (uint64_t)a2) ^ 1;
  }
}

BOOL siri::dialogengine::VersionLessThanOrEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (siri::dialogengine::VersionLessThan(a1, a2)) {
    return 1;
  }
  return siri::dialogengine::VersionEqual(a1, a2);
}

void InitDefaultsscc_info_MultilineTextProperty_Line_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line((SnippetUI::MultilineTextProperty_Line *)&SnippetUI::_MultilineTextProperty_Line_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_MultilineTextProperty_Line_default_instance_, v4);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2121F30;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_MultilineTextProperty_Line_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_Line_TextProperty_2eproto);
  }
  return this;
}

void sub_1C5F75610(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::MultilineTextProperty_Line::GetMetadata(SnippetUI::MultilineTextProperty_Line *this)
{
  return qword_1EA3D96E8;
}

void InitDefaultsscc_info_TextProperty_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::TextProperty::TextProperty((SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextProperty_default_instance_, v4);
  qword_1EB690168 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690170 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::TextProperty *SnippetUI::TextProperty::TextProperty(SnippetUI::TextProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2121E70;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_TextProperty_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextProperty_TextProperty_2eproto);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1C5F75748(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextProperty::GetMetadata(SnippetUI::TextProperty *this)
{
  return file_level_metadata_TextProperty_2eproto;
}

uint64_t SnippetUI::TextProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::TextProperty::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 441);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextProperty::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F7586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextProperty::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 456);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_TextProperty_default_instance_)
  {
    uint64_t v6 = (int **)a2[5];
    if (v6)
    {
      char v7 = (int **)this[5];
      if (!v7)
      {
        char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        uint64_t v6 = (int **)a2[5];
      }
      if (v6) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    uint64_t v9 = (int **)a2[6];
    if (v9)
    {
      BOOL v10 = (int **)this[6];
      if (!v10)
      {
        BOOL v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        uint64_t v9 = (int **)a2[6];
      }
      if (v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((unsigned char *)a2 + 56)) {
    *((unsigned char *)this + 56) = 1;
  }
  if (*((unsigned char *)a2 + 57)) {
    *((unsigned char *)this + 57) = 1;
  }
}

void sub_1C5F759A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::TextProperty::Clear((SnippetUI::TextProperty *)this);
    SnippetUI::TextProperty::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::TextProperty::Clear((SnippetUI::TextProperty *)this);
    SnippetUI::TextProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::TextProperty::Clear(SnippetUI::TextProperty *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v5 = *((unsigned char *)this + 8);
  uint64_t v4 = (char *)this + 8;
  *((void *)v4 + 5) = 0;
  *((_WORD *)v4 + 24) = 0;
  if (v5)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::TextProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      uint64_t v9 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *(unsigned char *)a2 = 10;
      unsigned int v11 = *((_DWORD *)v9 + 24);
      if (v11 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          int v14 = (char *)a2 + 2;
          do
          {
            uint64_t v15 = v14;
            *v14++ = v13 | 0x80;
            unsigned int v16 = v13 >> 7;
            unsigned int v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          char v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *int v14 = v16;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v13;
          char v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v11;
        char v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  if (*((unsigned char *)this + 56))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v18 = *((unsigned char *)this + 56);
    }
    else
    {
      char v18 = 1;
    }
    *(unsigned char *)a2 = 16;
    *((unsigned char *)a2 + 1) = v18;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    int v19 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (!v19) {
      goto LABEL_30;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      int v19 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *(unsigned char *)a2 = 26;
    unsigned int v20 = *((_DWORD *)v19 + 12);
    if (v20 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v20 | 0x80;
      unsigned int v22 = v20 >> 7;
      if (v20 >> 14)
      {
        uint64_t v24 = (char *)a2 + 2;
        do
        {
          uint64_t v25 = v24;
          *v24++ = v22 | 0x80;
          unsigned int v26 = v22 >> 7;
          unsigned int v27 = v22 >> 14;
          v22 >>= 7;
        }
        while (v27);
        unint64_t v23 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
        *uint64_t v24 = v26;
        goto LABEL_29;
      }
      *((unsigned char *)a2 + 2) = v22;
      uint64_t v21 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v20;
      uint64_t v21 = 2;
    }
    unint64_t v23 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v21);
LABEL_29:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v23, a3, a4);
LABEL_30:
    uint64_t v28 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v28)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        uint64_t v28 = (SnippetUI::ActionProperty *)*((void *)this + 6);
      }
      *(unsigned char *)a2 = 34;
      unsigned int v29 = *((_DWORD *)v28 + 12);
      if (v29 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v29 | 0x80;
        unsigned int v31 = v29 >> 7;
        if (v29 >> 14)
        {
          long long v32 = (char *)a2 + 2;
          do
          {
            uint64_t v33 = v32;
            *v32++ = v31 | 0x80;
            unsigned int v34 = v31 >> 7;
            unsigned int v35 = v31 >> 14;
            v31 >>= 7;
          }
          while (v35);
          unsigned int v30 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
          unsigned char *v32 = v34;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v31;
          unsigned int v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v29;
        unsigned int v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v28, v30, a3, a4);
    }
  }
  if (*((unsigned char *)this + 57))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v36 = *((unsigned char *)this + 57);
    }
    else
    {
      char v36 = 1;
    }
    *(unsigned char *)a2 = 40;
    *((unsigned char *)a2 + 1) = v36;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  uint64_t v37 = *((void *)this + 1);
  if ((v37 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v37 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::TextProperty::_InternalParse(SnippetUI::TextProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  long long v32 = a2;
  char v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      uint64_t v9 = (char *)*(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v9);
          long long v32 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10) {
                goto LABEL_39;
              }
              BOOL v10 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v9 != 16) {
                goto LABEL_39;
              }
              char v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v19 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_25;
              }
              int v20 = *(char *)v18;
              unint64_t v19 = v19 + (v20 << 7) - 128;
              if (v20 < 0)
              {
                unsigned int v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
                long long v32 = v27;
                *((unsigned char *)this + 56) = v28 != 0;
                if (!v27) {
                  return 0;
                }
              }
              else
              {
                char v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_25:
                long long v32 = v18;
                *((unsigned char *)this + 56) = v19 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26) {
                goto LABEL_39;
              }
              uint64_t v21 = (SnippetUI::ActionProperty *)*((void *)this + 5);
              if (v21) {
                goto LABEL_33;
              }
              uint64_t v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 5) = v21;
              goto LABEL_32;
            case 4u:
              if (v9 != 34) {
                goto LABEL_39;
              }
              uint64_t v21 = (SnippetUI::ActionProperty *)*((void *)this + 6);
              if (v21) {
                goto LABEL_33;
              }
              uint64_t v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 6) = v21;
LABEL_32:
              TagFallback = v32;
LABEL_33:
              unsigned int v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v21, TagFallback);
              goto LABEL_44;
            case 5u:
              if (v9 != 40) {
                goto LABEL_39;
              }
              unint64_t v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v24 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_38;
              }
              int v25 = *(char *)v23;
              unint64_t v24 = v24 + (v25 << 7) - 128;
              if (v25 < 0)
              {
                unsigned int v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
                long long v32 = v29;
                *((unsigned char *)this + 57) = v30 != 0;
                if (!v29) {
                  return 0;
                }
              }
              else
              {
                unint64_t v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                long long v32 = v23;
                *((unsigned char *)this + 57) = v24 != 0;
              }
              continue;
            default:
LABEL_39:
              if (v9) {
                BOOL v26 = (v9 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v9 - 1;
                return TagFallback;
              }
              unsigned int v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
              long long v32 = (google::protobuf::internal *)v22;
              if (v22) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            unsigned int v11 = (google::protobuf::internal *)(v10 + 1);
            long long v32 = (google::protobuf::internal *)(v10 + 1);
            char v12 = (int *)*((void *)this + 4);
            if (!v12) {
              break;
            }
            uint64_t v13 = *((int *)this + 6);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
                char v12 = (int *)*((void *)this + 4);
                int v14 = *v12;
              }
              int *v12 = v14 + 1;
              uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                        + 2));
              uint64_t v16 = *((void *)this + 4);
              uint64_t v17 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              unsigned int v11 = v32;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v13 + 1;
            uint64_t v15 = *(SnippetUI::TextElement **)&v12[2 * v13 + 2];
LABEL_17:
            BOOL v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v15, v11);
            long long v32 = (google::protobuf::internal *)v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_2;
            }
          }
          int v14 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      long long v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

uint64_t SnippetUI::TextProperty::GetCachedSize(SnippetUI::TextProperty *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::TextProperty::ByteSizeLong(SnippetUI::TextProperty *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::TextElement **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    unint64_t v8 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    BOOL v10 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v10)
    {
      unsigned int v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 56)) {
    uint64_t v12 = v2 + 2;
  }
  else {
    uint64_t v12 = v2;
  }
  if (*((unsigned char *)this + 57)) {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  }
  else {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)v12;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v13;
    return (char *)v13;
  }
}

uint64_t SnippetUI::TextProperty::IsInitialized(SnippetUI::TextProperty *this)
{
  return 1;
}

SnippetUI::TextProperty *SnippetUI::TextProperty::New(SnippetUI::TextProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(a2);
}

SnippetUI::TextProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::TextProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextProperty>);
  }
  SnippetUI::TextProperty::TextProperty(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F762D4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextProperty>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::TextProperty *SnippetUI::TextProperty::New(SnippetUI::TextProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
}

void SnippetUI::TextProperty::~TextProperty(SnippetUI::TextProperty *this)
{
  SnippetUI::TextProperty::~TextProperty(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F2121E70;
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 6);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::TextProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::MultilineTextProperty_Line::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = a2;
  return this;
}

void SnippetUI::MultilineTextProperty_Line::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 651);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F764F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty_Line::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 666);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1C5F7659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty_Line::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty_Line::Clear((SnippetUI::MultilineTextProperty_Line *)this);
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty_Line::Clear((SnippetUI::MultilineTextProperty_Line *)this);
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, a2);
  }
}

void SnippetUI::MultilineTextProperty_Line::Clear(SnippetUI::MultilineTextProperty_Line *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::MultilineTextProperty_Line::InternalSerializeWithCachedSizesToArray(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      uint64_t v9 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *(unsigned char *)a2 = 10;
      unsigned int v11 = *((_DWORD *)v9 + 24);
      if (v11 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          int v14 = (char *)a2 + 2;
          do
          {
            uint64_t v15 = v14;
            *v14++ = v13 | 0x80;
            unsigned int v16 = v13 >> 7;
            unsigned int v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *int v14 = v16;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v13;
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v11;
        uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::MultilineTextProperty_Line::_InternalParse(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v20 = a2;
  unint64_t v5 = (unint64_t *)((char *)this + 8);
  char v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      int v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v9);
    int v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 == 10)
    {
      unsigned int v11 = (char *)TagFallback - 1;
      while (1)
      {
        uint64_t v12 = (google::protobuf::internal *)(v11 + 1);
        int v20 = (google::protobuf::internal *)(v11 + 1);
        unsigned int v13 = (int *)*((void *)this + 4);
        if (!v13) {
          break;
        }
        uint64_t v14 = *((int *)this + 6);
        int v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            unsigned int v13 = (int *)*((void *)this + 4);
            int v15 = *v13;
          }
          *unsigned int v13 = v15 + 1;
          unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                    + 2));
          uint64_t v17 = *((void *)this + 4);
          uint64_t v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(void *)(v17 + 8 * v18 + 8) = v16;
          uint64_t v12 = v20;
          goto LABEL_22;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        unsigned int v16 = *(SnippetUI::TextElement **)&v13[2 * v14 + 2];
LABEL_22:
        unsigned int v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v16, v12);
        int v20 = (google::protobuf::internal *)v11;
        if (!v11) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
          goto LABEL_2;
        }
      }
      int v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if (v9) {
      BOOL v10 = (v9 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    int v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v20) {
      return 0;
    }
  }
  return v20;
}

uint64_t SnippetUI::MultilineTextProperty_Line::GetCachedSize(SnippetUI::MultilineTextProperty_Line *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::MultilineTextProperty_Line::ByteSizeLong(SnippetUI::MultilineTextProperty_Line *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::TextElement **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      char v6 = *v4++;
      int v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::MultilineTextProperty_Line *)((char *)this + 8), v2, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::MultilineTextProperty_Line::IsInitialized(SnippetUI::MultilineTextProperty_Line *this)
{
  return 1;
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::New(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(a2);
}

SnippetUI::MultilineTextProperty_Line *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty_Line *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty_Line>);
  }
  SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F76A98(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty_Line>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::New(SnippetUI::MultilineTextProperty_Line *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(0);
}

void SnippetUI::MultilineTextProperty_Line::~MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this)
{
  *(void *)this = &unk_1F2121F30;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2121F30;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2121F30;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

void InitDefaultsscc_info_MultilineTextProperty_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::MultilineTextProperty::MultilineTextProperty((SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_MultilineTextProperty_default_instance_, v4);
  qword_1EB690D80 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690D88 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::MultilineTextProperty(SnippetUI::MultilineTextProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2121FF0;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_MultilineTextProperty_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_TextProperty_2eproto);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1C5F76CA0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::MultilineTextProperty::GetMetadata(SnippetUI::MultilineTextProperty *this)
{
  return qword_1EA3D96F8;
}

uint64_t SnippetUI::MultilineTextProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::MultilineTextProperty::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 977);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::MultilineTextProperty::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5F76DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 992);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    char v6 = (int **)a2[5];
    if (v6)
    {
      char v7 = (int **)this[5];
      if (!v7)
      {
        char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        char v6 = (int **)a2[5];
      }
      if (v6) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    uint64_t v9 = (int **)a2[6];
    if (v9)
    {
      BOOL v10 = (int **)this[6];
      if (!v10)
      {
        BOOL v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        uint64_t v9 = (int **)a2[6];
      }
      if (v9) {
        unsigned int v11 = v9;
      }
      else {
        unsigned int v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((unsigned char *)a2 + 56)) {
    *((unsigned char *)this + 56) = 1;
  }
  if (*((unsigned char *)a2 + 57)) {
    *((unsigned char *)this + 57) = 1;
  }
}

void sub_1C5F76EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unsigned int v13 = (int ***)(v6 + 8);
      uint64_t v14 = (int ***)v7;
      do
      {
        unsigned int v16 = *v13++;
        int v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (int ***)((char *)v8 + v20);
      unsigned int v22 = (int ***)(v20 + v6 + 8);
      do
      {
        unint64_t v23 = *v22++;
        unint64_t v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    BOOL v26 = this[2];
    if (*v26 < v25) {
      *BOOL v26 = v25;
    }
  }
}

void sub_1C5F7706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(int **a1, int **this)
{
}

void SnippetUI::MultilineTextProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty::Clear((SnippetUI::MultilineTextProperty *)this);
    SnippetUI::MultilineTextProperty::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty::Clear((SnippetUI::MultilineTextProperty *)this);
    SnippetUI::MultilineTextProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::MultilineTextProperty::Clear(SnippetUI::MultilineTextProperty *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (SnippetUI::MultilineTextProperty_Line **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::MultilineTextProperty_Line::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 5) = 0;
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = *((unsigned char *)this + 8);
  unint64_t v8 = (char *)this + 8;
  *((void *)v8 + 5) = 0;
  *((_WORD *)v8 + 24) = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v8);
  }
}

void sub_1C5F7720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::MultilineTextProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        char v10 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::MultilineTextProperty_Line **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 10);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          int v15 = (char *)a2 + 2;
          do
          {
            unsigned int v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          unsigned int v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *int v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          unsigned int v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        unsigned int v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::MultilineTextProperty_Line::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v9 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (*((unsigned char *)this + 56))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v19 = *((unsigned char *)this + 56);
    }
    else
    {
      char v19 = 1;
    }
    *(unsigned char *)a2 = 16;
    *((unsigned char *)a2 + 1) = v19;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    uint64_t v20 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (!v20) {
      goto LABEL_36;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v20 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *(unsigned char *)a2 = 26;
    unsigned int v21 = *((_DWORD *)v20 + 12);
    if (v21 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v21 | 0x80;
      unsigned int v23 = v21 >> 7;
      if (v21 >> 14)
      {
        int v25 = (char *)a2 + 2;
        do
        {
          BOOL v26 = v25;
          *v25++ = v23 | 0x80;
          unsigned int v27 = v23 >> 7;
          unsigned int v28 = v23 >> 14;
          v23 >>= 7;
        }
        while (v28);
        unint64_t v24 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *int v25 = v27;
        goto LABEL_35;
      }
      *((unsigned char *)a2 + 2) = v23;
      uint64_t v22 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v21;
      uint64_t v22 = 2;
    }
    unint64_t v24 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v22);
LABEL_35:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v20, v24, a3, a4);
LABEL_36:
    unsigned int v29 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v29)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unsigned int v29 = (SnippetUI::ActionProperty *)*((void *)this + 6);
      }
      *(unsigned char *)a2 = 34;
      unsigned int v30 = *((_DWORD *)v29 + 12);
      if (v30 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v30 | 0x80;
        unsigned int v32 = v30 >> 7;
        if (v30 >> 14)
        {
          uint64_t v33 = (char *)a2 + 2;
          do
          {
            unsigned int v34 = v33;
            *v33++ = v32 | 0x80;
            unsigned int v35 = v32 >> 7;
            unsigned int v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          unsigned int v31 = (google::protobuf::UnknownFieldSet *)(v34 + 2);
          *uint64_t v33 = v35;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v32;
          unsigned int v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v30;
        unsigned int v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v29, v31, a3, a4);
    }
  }
  if (*((unsigned char *)this + 57))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v37 = *((unsigned char *)this + 57);
    }
    else
    {
      char v37 = 1;
    }
    *(unsigned char *)a2 = 40;
    *((unsigned char *)a2 + 1) = v37;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  uint64_t v38 = *((void *)this + 1);
  if ((v38 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C5F775E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::MultilineTextProperty::_InternalParse(SnippetUI::MultilineTextProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  long long v42 = a2;
  int v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v42, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v42 + 1);
      char v9 = (char *)*(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        char v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, v9);
          long long v42 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10) {
                goto LABEL_45;
              }
              char v10 = (google::protobuf::internal *)((char *)TagFallback - 1);
              break;
            case 2u:
              if (v9 != 16) {
                goto LABEL_45;
              }
              unsigned int v28 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v29 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_31;
              }
              int v30 = *(char *)v28;
              unint64_t v29 = v29 + (v30 << 7) - 128;
              if (v30 < 0)
              {
                char v37 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v29);
                long long v42 = v37;
                *((unsigned char *)this + 56) = v38 != 0;
                if (!v37) {
                  return 0;
                }
              }
              else
              {
                unsigned int v28 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
                long long v42 = v28;
                *((unsigned char *)this + 56) = v29 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26) {
                goto LABEL_45;
              }
              unsigned int v31 = (SnippetUI::ActionProperty *)*((void *)this + 5);
              if (v31) {
                goto LABEL_39;
              }
              unsigned int v31 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 5) = v31;
              goto LABEL_38;
            case 4u:
              if (v9 != 34) {
                goto LABEL_45;
              }
              unsigned int v31 = (SnippetUI::ActionProperty *)*((void *)this + 6);
              if (v31) {
                goto LABEL_39;
              }
              unsigned int v31 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 6) = v31;
LABEL_38:
              TagFallback = v42;
LABEL_39:
              unsigned int v32 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v31, TagFallback);
              goto LABEL_50;
            case 5u:
              if (v9 != 40) {
                goto LABEL_45;
              }
              uint64_t v33 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v34 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_44;
              }
              int v35 = *(char *)v33;
              unint64_t v34 = v34 + (v35 << 7) - 128;
              if (v35 < 0)
              {
                BOOL v39 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v34);
                long long v42 = v39;
                *((unsigned char *)this + 57) = v40 != 0;
                if (!v39) {
                  return 0;
                }
              }
              else
              {
                uint64_t v33 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_44:
                long long v42 = v33;
                *((unsigned char *)this + 57) = v34 != 0;
              }
              continue;
            default:
LABEL_45:
              if (v9) {
                BOOL v36 = (v9 & 7) == 4;
              }
              else {
                BOOL v36 = 1;
              }
              if (v36)
              {
                *((_DWORD *)a3 + 20) = v9 - 1;
                return TagFallback;
              }
              unsigned int v32 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_50:
              long long v42 = (google::protobuf::internal *)v32;
              if (v32) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            int v11 = (google::protobuf::internal *)((char *)v10 + 1);
            long long v42 = v11;
            unsigned int v12 = (int *)*((void *)this + 4);
            if (!v12) {
              break;
            }
            uint64_t v13 = *((int *)this + 6);
            int v14 = *v12;
            if ((int)v13 < *v12)
            {
              *((_DWORD *)this + 6) = v13 + 1;
              int v15 = *(SnippetUI::MultilineTextProperty_Line **)&v12[2 * v13 + 2];
              goto LABEL_17;
            }
            if (v14 == *((_DWORD *)this + 7)) {
              goto LABEL_15;
            }
LABEL_16:
            int *v12 = v14 + 1;
            int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(*((google::protobuf::internal::ArenaImpl **)this + 2));
            uint64_t v16 = *((void *)this + 4);
            uint64_t v17 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v17 + 1;
            *(void *)(v16 + 8 * v17 + 8) = v15;
            int v11 = v42;
LABEL_17:
            unsigned int v18 = *(unsigned __int8 *)v11;
            if (*(char *)v11 < 0)
            {
              SizeFallback = google::protobuf::internal::ReadSizeFallback(v11, (const char *)*(unsigned __int8 *)v11);
              if (!SizeFallback) {
                return 0;
              }
              char v19 = SizeFallback;
              unsigned int v18 = v21;
            }
            else
            {
              char v19 = (char *)v11 + 1;
            }
            int v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
            int v23 = *((_DWORD *)a3 + 22);
            BOOL v24 = __OFSUB__(v23--, 1);
            *((_DWORD *)a3 + 22) = v23;
            if (v23 < 0 != v24) {
              return 0;
            }
            int v25 = v22;
            char v10 = SnippetUI::MultilineTextProperty_Line::_InternalParse(v15, (google::protobuf::internal *)v19, a3);
            if (!v10) {
              return 0;
            }
            ++*((_DWORD *)a3 + 22);
            if (*((_DWORD *)a3 + 20)) {
              return 0;
            }
            int v26 = *((_DWORD *)a3 + 7) + v25;
            *((_DWORD *)a3 + 7) = v26;
            unint64_t v27 = *((void *)a3 + 1) + (v26 & (v26 >> 31));
            *(void *)a3 = v27;
            long long v42 = v10;
            if (v27 <= (unint64_t)v10 || *(unsigned char *)v10 != 10) {
              goto LABEL_2;
            }
          }
          int v14 = *((_DWORD *)this + 7);
LABEL_15:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
          unsigned int v12 = (int *)*((void *)this + 4);
          int v14 = *v12;
          goto LABEL_16;
        }
        TagFallback = (google::protobuf::internal *)((char *)v42 + 2);
      }
      long long v42 = TagFallback;
      goto LABEL_7;
    }
    return v42;
  }
}

uint64_t SnippetUI::MultilineTextProperty::GetCachedSize(SnippetUI::MultilineTextProperty *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::MultilineTextProperty::ByteSizeLong(SnippetUI::MultilineTextProperty *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::MultilineTextProperty_Line **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::MultilineTextProperty_Line::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    int v8 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v8)
    {
      char v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    char v10 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v10)
    {
      int v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 56)) {
    uint64_t v12 = v2 + 2;
  }
  else {
    uint64_t v12 = v2;
  }
  if (*((unsigned char *)this + 57)) {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  }
  else {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)v12;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::MultilineTextProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v13;
    return (char *)v13;
  }
}

uint64_t SnippetUI::MultilineTextProperty::IsInitialized(SnippetUI::MultilineTextProperty *this)
{
  return 1;
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::New(SnippetUI::MultilineTextProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(a2);
}

SnippetUI::MultilineTextProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty>);
  }
  SnippetUI::MultilineTextProperty::MultilineTextProperty(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F77B90(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::New(SnippetUI::MultilineTextProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
}

void SnippetUI::MultilineTextProperty::~MultilineTextProperty(SnippetUI::MultilineTextProperty *this)
{
  SnippetUI::MultilineTextProperty::~MultilineTextProperty(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F2121FF0;
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 6);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::TextProperty::InitAsDefaultInstance(SnippetUI::TextProperty *this)
{
  qword_1EB690168 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690170 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::TextProperty::_Internal::focus_action(SnippetUI::TextProperty::_Internal *this, const SnippetUI::TextProperty *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::TextProperty::_Internal::selected_action(SnippetUI::TextProperty::_Internal *this, const SnippetUI::TextProperty *a2)
{
  return *((void *)this + 6);
}

void SnippetUI::TextProperty::clear_text_elements(SnippetUI::TextProperty *this)
{
}

uint64_t SnippetUI::TextProperty::clear_focus_action(SnippetUI::TextProperty *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::TextProperty::clear_selected_action(SnippetUI::TextProperty *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::TextProperty *SnippetUI::TextProperty::TextProperty(SnippetUI::TextProperty *this, const SnippetUI::TextProperty *a2)
{
  *(void *)this = &unk_1F2121E70;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::TextProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1C5F77EC8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::TextProperty::default_instance(SnippetUI::TextProperty *this)
{
  if (atomic_load_explicit(scc_info_TextProperty_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextProperty_TextProperty_2eproto);
  }
  return &SnippetUI::_TextProperty_default_instance_;
}

void SnippetUI::TextProperty::InternalSwap(SnippetUI::TextProperty *this, SnippetUI::TextProperty *a2)
{
  uint64_t v4 = (SnippetUI::TextProperty *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::TextProperty *)((char *)this + 16), (SnippetUI::TextProperty *)((char *)a2 + 16));
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v8;
}

void SnippetUI::MultilineTextProperty_Line::clear_text_elements(SnippetUI::MultilineTextProperty_Line *this)
{
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this, const SnippetUI::MultilineTextProperty_Line *a2)
{
  *(void *)this = &unk_1F2121F30;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5F780E8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::MultilineTextProperty_Line::default_instance(SnippetUI::MultilineTextProperty_Line *this)
{
  if (atomic_load_explicit(scc_info_MultilineTextProperty_Line_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_Line_TextProperty_2eproto);
  }
  return &SnippetUI::_MultilineTextProperty_Line_default_instance_;
}

void SnippetUI::MultilineTextProperty_Line::InternalSwap(SnippetUI::MultilineTextProperty_Line *this, SnippetUI::MultilineTextProperty_Line *a2)
{
  uint64_t v4 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16), (SnippetUI::MultilineTextProperty_Line *)((char *)a2 + 16));
}

void SnippetUI::MultilineTextProperty::InitAsDefaultInstance(SnippetUI::MultilineTextProperty *this)
{
  qword_1EB690D80 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690D88 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::MultilineTextProperty::_Internal::focus_action(SnippetUI::MultilineTextProperty::_Internal *this, const SnippetUI::MultilineTextProperty *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::MultilineTextProperty::_Internal::selected_action(SnippetUI::MultilineTextProperty::_Internal *this, const SnippetUI::MultilineTextProperty *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::MultilineTextProperty::clear_focus_action(SnippetUI::MultilineTextProperty *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::MultilineTextProperty::clear_selected_action(SnippetUI::MultilineTextProperty *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::MultilineTextProperty(SnippetUI::MultilineTextProperty *this, const SnippetUI::MultilineTextProperty *a2)
{
  *(void *)this = &unk_1F2121FF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::MultilineTextProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1C5F7845C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::MultilineTextProperty::default_instance(SnippetUI::MultilineTextProperty *this)
{
  if (atomic_load_explicit(scc_info_MultilineTextProperty_TextProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_TextProperty_2eproto);
  }
  return &SnippetUI::_MultilineTextProperty_default_instance_;
}

void SnippetUI::MultilineTextProperty::InternalSwap(SnippetUI::MultilineTextProperty *this, SnippetUI::MultilineTextProperty *a2)
{
  uint64_t v4 = (SnippetUI::MultilineTextProperty *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::MultilineTextProperty *)((char *)this + 16), (SnippetUI::MultilineTextProperty *)((char *)a2 + 16));
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v8;
}

void siri::dialogengine::ExecuteMultiLevelResultSet::Execute(siri::dialogengine::ExecuteMultiLevelResultSet *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v89, "multiLevelResultSetData");
  std::string::size_type v63 = this;
  siri::dialogengine::ExecutePatternBase::GetArrayParameter((uint64_t)this, (const void **)&v89, &v92);
  if (SHIBYTE(v91) < 0) {
    operator delete(v89);
  }
  if (v92)
  {
    int v57 = a2;
    uint64_t v5 = *(void *)(v92 + 80) - *(void *)(v92 + 72);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 >> 4;
      uint64_t v59 = v5 >> 4;
      uint64_t v58 = (v5 >> 4) - 1;
      uint64_t v8 = (siri::dialogengine::Log *)"Element %zul of the multiLevelResultSetData array is not a VariableObject";
      do
      {
        uint64_t v9 = *(void *)(v92 + 72);
        long long v10 = 0uLL;
        if (v6 >= (*(void *)(v92 + 80) - v9) >> 4) {
          goto LABEL_28;
        }
        long long v10 = *(_OWORD *)(v9 + 16 * v6);
        int v11 = *(std::__shared_weak_count **)(v9 + 16 * v6 + 8);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!(void)v10 {
          || (long long v61 = v10,
        }
        {
LABEL_28:
          if (*((void *)&v10 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
          }
          siri::dialogengine::Log::Error(v8, v4, *(double *)&v10, v6, v57);
          goto LABEL_31;
        }
        uint64_t v13 = (uint64_t)v12;
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v87);
        int v14 = v8;
        std::string v90 = 0;
        uint64_t v91 = 0;
        std::string v89 = &v90;
        std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v84, (const void ***)(v13 + 72));
        int v15 = v84;
        if (v84 != &v85)
        {
          uint64_t v16 = v87;
          do
          {
            uint64_t v17 = (std::__shared_weak_count *)v15[8];
            v83[0] = v15[7];
            v83[1] = v17;
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::VariableObject::AddProperty((uint64_t)v16, v83);
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            unsigned int v18 = (void *)v15[1];
            if (v18)
            {
              do
              {
                char v19 = (void **)v18;
                unsigned int v18 = (void *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                char v19 = (void **)v15[2];
                BOOL v52 = *v19 == v15;
                int v15 = v19;
              }
              while (!v52);
            }
            int v15 = v19;
          }
          while (v19 != &v85);
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v85);
        std::string::basic_string[abi:ne180100]<0>(&v84, "items");
        uint64_t v20 = std::__tree<std::string>::find<std::string>(v13 + 72, (const void **)&v84);
        if (v13 + 80 == v20)
        {
          BOOL v23 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(v20 + 56);
          unsigned int v21 = *(std::__shared_weak_count **)(v20 + 64);
          if (v21)
          {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v23 = v22 == 0;
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          else
          {
            BOOL v23 = v22 == 0;
          }
        }
        if (v86 < 0)
        {
          operator delete(v84);
          if (!v23) {
            goto LABEL_41;
          }
        }
        else if (!v23)
        {
          goto LABEL_41;
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "items");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v89, &v84, (uint64_t)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
LABEL_41:
        std::string::basic_string[abi:ne180100]<0>(&v84, "multiLevelResultSetData");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v89, &v84, (uint64_t)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "items");
        uint64_t v24 = std::__tree<std::string>::find<std::string>(v13 + 72, (const void **)&v84);
        if (v13 + 80 == v24)
        {
          unsigned int v31 = 0;
          unint64_t v29 = 0;
        }
        else
        {
          uint64_t v25 = v24;
          int v26 = *(const void **)(v24 + 56);
          unint64_t v27 = *(std::__shared_weak_count **)(v25 + 64);
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v26
          {
            int v30 = 0;
            unint64_t v29 = 0;
            unsigned int v31 = 0;
            if (!v27) {
              goto LABEL_53;
            }
            goto LABEL_51;
          }
          unint64_t v29 = v28;
          if (v27)
          {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            int v30 = v27;
LABEL_51:
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            unsigned int v31 = v30;
            goto LABEL_53;
          }
          unsigned int v31 = 0;
        }
LABEL_53:
        std::string::size_type v62 = v31;
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "windowSize");
        double NumberParameter = GetNumberParameter(v13, (const void **)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "isFirstWindow");
        BOOL BooleanParameter = GetBooleanParameter(v13, (const void **)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "isLastWindow");
        BOOL v60 = GetBooleanParameter(v13, (const void **)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "isConclusion");
        BOOL v34 = GetBooleanParameter(v13, (const void **)&v84);
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, "level");
        int v35 = (int)GetNumberParameter(v13, (const void **)&v84);
        if (v35 <= 1) {
          int v36 = 1;
        }
        else {
          int v36 = v35;
        }
        if (v86 < 0) {
          operator delete(v84);
        }
        std::string::basic_string[abi:ne180100]<0>(v80, "promptType");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)v63, v80, (char *)__p, &v82);
        siri::dialogengine::StringToUpper((uint64_t)&v82, (uint64_t)&v84);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (v79 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0)
        {
          operator delete((void *)v80[0]);
          if (v6) {
            goto LABEL_78;
          }
        }
        else if (v6)
        {
          goto LABEL_78;
        }
        if (!siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup((siri::dialogengine **)v63, v37, v38)|| (std::string::basic_string[abi:ne180100]<0>(&v82, "Sash"), siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82), (SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
        {
LABEL_78:
          if (v34) {
            goto LABEL_79;
          }
          goto LABEL_94;
        }
        operator delete(v82.__r_.__value_.__l.__data_);
        if (v34)
        {
LABEL_79:
          std::string::basic_string[abi:ne180100]<0>(&v82, "Conclusion");
          BOOL v39 = v87;
          uint64_t v40 = v88;
          v77[0] = (uint64_t)v87;
          v77[1] = (uint64_t)v88;
          uint64_t v8 = v14;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v77, &v89);
          uint64_t v7 = v59;
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v82, "Prompt");
          v76[0] = (uint64_t)v39;
          v76[1] = (uint64_t)v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v76, &v89);
LABEL_88:
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          goto LABEL_198;
        }
LABEL_94:
        if (v6) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v35 <= 1;
        }
        int v42 = !v41;
        if (NumberParameter >= 1.0)
        {
          if ((v42 | !BooleanParameter)) {
            goto LABEL_141;
          }
          std::string::basic_string[abi:ne180100]<0>(&v82, "Intro");
          uint64_t v45 = v88;
          v70[0] = (uint64_t)v87;
          v70[1] = (uint64_t)v88;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v70, &v89);
          if (v45) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v82.__r_.__value_.__l.__data_);
            if (v29) {
              goto LABEL_142;
            }
          }
          else
          {
LABEL_141:
            if (v29)
            {
LABEL_142:
              if (((*(uint64_t (**)(void *))(*(void *)v29 + 32))(v29) & 1) == 0)
              {
                if (!BooleanParameter || !v60)
                {
                  std::string::basic_string[abi:ne180100]<0>(v80, "WindowIntro");
                  BuildGroupName(&v82, (uint64_t)v80, v36);
                  int v46 = v88;
                  v69[0] = (uint64_t)v87;
                  v69[1] = (uint64_t)v88;
                  if (v88) {
                    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v69, &v89);
                  if (v46) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                  }
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v82.__r_.__value_.__l.__data_);
                  }
                  if (v81 < 0) {
                    operator delete((void *)v80[0]);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(v80, "Item");
                BuildGroupName(&v82, (uint64_t)v80, v36);
                std::string::size_type v48 = v87;
                int v47 = v88;
                v68[0] = (uint64_t)v87;
                v68[1] = (uint64_t)v88;
                if (v88) {
                  atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v68, &v89);
                if (v47) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                }
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v82.__r_.__value_.__l.__data_);
                }
                if (v81 < 0) {
                  operator delete((void *)v80[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v80, "Reference");
                BuildGroupName(&v82, (uint64_t)v80, v36);
                v67[0] = (uint64_t)v48;
                v67[1] = (uint64_t)v47;
                if (v47) {
                  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v67, &v89);
                if (v47) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                }
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v82.__r_.__value_.__l.__data_);
                }
                if (v81 < 0) {
                  operator delete((void *)v80[0]);
                }
              }
            }
          }
          uint64_t v8 = v14;
          uint64_t v7 = v59;
          if (!v60) {
            goto LABEL_179;
          }
          if ((v86 & 0x80000000) == 0)
          {
            if (v86 == 12)
            {
              int v49 = &v84;
              goto LABEL_175;
            }
            goto LABEL_179;
          }
          if (v85 != (void *)12) {
            goto LABEL_179;
          }
          int v49 = (void ***)v84;
LABEL_175:
          uint64_t v50 = (uint64_t)*v49;
          int v51 = *((_DWORD *)v49 + 2);
          BOOL v52 = v50 == 0x41554E49544E4F43 && v51 == 1313818964;
          if (!v52)
          {
LABEL_179:
            std::string::basic_string[abi:ne180100]<0>(v80, "WindowPrompt");
            BuildGroupName(&v82, (uint64_t)v80, v36);
            char v53 = v88;
            v66[0] = (uint64_t)v87;
            v66[1] = (uint64_t)v88;
            if (v88) {
              atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v66, &v89);
            if (v53) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
            if (v81 < 0) {
              operator delete((void *)v80[0]);
            }
          }
          if (v35 <= 1 && v6 == v58 && v60)
          {
            if (v86 < 0)
            {
              int v54 = (const void **)v84;
              if (v85 != (void *)12) {
                goto LABEL_200;
              }
            }
            else
            {
              if (v86 != 12) {
                goto LABEL_201;
              }
              int v54 = (const void **)&v84;
            }
            if (*v54 == (const void *)0x41554E49544E4F43 && *((_DWORD *)v54 + 2) == 1313818964)
            {
              std::string::basic_string[abi:ne180100]<0>(&v82, "Conclusion");
              std::string::size_type v56 = v87;
              uint64_t v40 = v88;
              v65[0] = (uint64_t)v87;
              v65[1] = (uint64_t)v88;
              if (v88) {
                atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v65, &v89);
              if (v40) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v40);
              }
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v82, "Prompt");
              v64[0] = (uint64_t)v56;
              v64[1] = (uint64_t)v40;
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v64, &v89);
              goto LABEL_88;
            }
          }
          goto LABEL_198;
        }
        uint64_t v8 = v14;
        uint64_t v7 = v59;
        if ((v42 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v82, "Intro");
          int v43 = v88;
          v75[0] = (uint64_t)v87;
          v75[1] = (uint64_t)v88;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v75, &v89);
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v80, "Item");
        BuildGroupName(&v82, (uint64_t)v80, v36);
        long long v44 = v87;
        uint64_t v40 = v88;
        v74[0] = (uint64_t)v87;
        v74[1] = (uint64_t)v88;
        if (v88) {
          atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v74, &v89);
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (v81 < 0) {
          operator delete((void *)v80[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v80, "Reference");
        BuildGroupName(&v82, (uint64_t)v80, v36);
        v73[0] = (uint64_t)v44;
        v73[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v73, &v89);
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (v81 < 0) {
          operator delete((void *)v80[0]);
        }
        if (v35 <= 1 && v6 == v58)
        {
          std::string::basic_string[abi:ne180100]<0>(&v82, "Conclusion");
          v72[0] = (uint64_t)v44;
          v72[1] = (uint64_t)v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v72, &v89);
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v82, "Prompt");
          v71[0] = (uint64_t)v44;
          v71[1] = (uint64_t)v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ExecutePatternBase::AddGroup(v63, (uint64_t)&v82, v71, &v89);
          goto LABEL_88;
        }
LABEL_198:
        if (v86 < 0)
        {
          int v54 = (const void **)v84;
LABEL_200:
          operator delete(v54);
        }
LABEL_201:
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        std::__tree<std::string>::destroy(v90);
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
LABEL_31:
        ++v6;
      }
      while (v6 != v7);
    }
    siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)v63, v57);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Parameter 'multiLevelResultSetData' either does not exist or is not an array", v4);
    siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  }
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
}

void sub_1C5F79270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (*(char *)(v54 - 201) < 0) {
    operator delete(*(void **)(v54 - 224));
  }
  if (*(char *)(v54 - 161) < 0) {
    operator delete(*(void **)(v54 - 184));
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__tree<std::string>::destroy(*(char **)(v54 - 136));
  std::string::size_type v56 = *(std::__shared_weak_count **)(v54 - 152);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  int v57 = *(std::__shared_weak_count **)(v54 - 112);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    unint64_t v6 = (uint64_t **)result;
    uint64_t v7 = operator new(0x38uLL);
    std::string v7[2] = *(_OWORD *)a3;
    *((void *)v7 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    uint64_t v8 = v9;
    return std::__tree<std::string>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

double GetNumberParameter(uint64_t a1, const void **a2)
{
  double v2 = 0.0;
  if (!a1) {
    return v2;
  }
  uint64_t v4 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v4) {
    return v2;
  }
  uint64_t v5 = v4;
  unint64_t v6 = *(const void **)(v4 + 56);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (!v7) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  if (v7) {
LABEL_7:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_8:
  if (v8) {
    return v8[9];
  }
  return v2;
}

BOOL GetBooleanParameter(BOOL result, const void **a2)
{
  if (result)
  {
    BOOL v2 = result;
    uint64_t v3 = std::__tree<std::string>::find<std::string>(result + 72, a2);
    if (v2 + 80 == v3) {
      return 0;
    }
    uint64_t v4 = v3;
    uint64_t v5 = *(const void **)(v3 + 56);
    unint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      if (!v6) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (!v6)
      {
LABEL_8:
        if (v7) {
          return v7[66] != 0;
        }
        return 0;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_8;
  }
  return result;
}

void BuildGroupName(std::string *a1, uint64_t a2, int __val)
{
  std::to_string(&v9, __val);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v6 = *(const std::string::value_type **)a2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = std::string::insert(&v9, 0, v6, v7);
  *a1 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F79740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteMultiLevelResultSet::~ExecuteMultiLevelResultSet(siri::dialogengine::ExecuteMultiLevelResultSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::MeCard::Preload(siri::dialogengine::MeCard *this)
{
  if (!siri::dialogengine::MeCard::Impl::sContactFetchedOnce)
  {
    siri::dialogengine::MeCard::Impl::sContactFetchedOnce = 1;
    bzero(v1, 0x2A8uLL);
    siri::dialogengine::MeCard::Impl::GetContact((siri::dialogengine::MeCard::Impl *)v1);
    if (v57 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    if (v53 < 0) {
      operator delete(v52);
    }
    if (v51 < 0) {
      operator delete(v50);
    }
    if (v49 < 0) {
      operator delete(v48);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (v7 < 0) {
      operator delete(v6);
    }
    if (v5 < 0) {
      operator delete(v4);
    }
    if (v3 < 0) {
      operator delete(v2);
    }
  }
}

void sub_1C5F799A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::MeCard::Impl::~Impl((void **)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::MeCard::Impl::GetContact(siri::dialogengine::MeCard::Impl *this)
{
  v29[7] = *MEMORY[0x1E4F143B8];
  int v1 = *(unsigned __int8 *)this;
  if (!*(unsigned char *)this)
  {
    uint64_t v3 = *MEMORY[0x1E4F1AEA0];
    v29[0] = *MEMORY[0x1E4F1ADF0];
    v29[1] = v3;
    uint64_t v4 = *MEMORY[0x1E4F1AEC0];
    v29[2] = *MEMORY[0x1E4F1ADE0];
    v29[3] = v4;
    uint64_t v5 = *MEMORY[0x1E4F1AF00];
    v29[4] = *MEMORY[0x1E4F1AEF8];
    v29[5] = v5;
    v29[6] = *MEMORY[0x1E4F1AEF0];
    unsigned int v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:7];
    unint64_t v6 = objc_opt_new();
    id v28 = 0;
    char v7 = [v6 _crossPlatformUnifiedMeContactWithKeysToFetch:v18 error:&v28];
    id v8 = v28;
    char v17 = v8;
    if (!v7 || v8)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 8), &__str);
      std::string::operator=((std::string *)((char *)this + 32), &v22);
      std::string::operator=((std::string *)((char *)this + 56), &v23);
      std::string::operator=((std::string *)((char *)this + 80), &v24);
      std::string::operator=((std::string *)((char *)this + 104), &v25);
      std::string::operator=((std::string *)((char *)this + 128), &v26);
      std::string::operator=((std::string *)((char *)this + 152), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 176), &__str);
      std::string::operator=((std::string *)((char *)this + 200), &v22);
      std::string::operator=((std::string *)((char *)this + 224), &v23);
      std::string::operator=((std::string *)((char *)this + 248), &v24);
      std::string::operator=((std::string *)((char *)this + 272), &v25);
      std::string::operator=((std::string *)((char *)this + 296), &v26);
      std::string::operator=((std::string *)((char *)this + 320), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 344), &__str);
      std::string::operator=((std::string *)((char *)this + 368), &v22);
      std::string::operator=((std::string *)((char *)this + 392), &v23);
      std::string::operator=((std::string *)((char *)this + 416), &v24);
      std::string::operator=((std::string *)((char *)this + 440), &v25);
      std::string::operator=((std::string *)((char *)this + 464), &v26);
      std::string::operator=((std::string *)((char *)this + 488), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 512), &__str);
      std::string::operator=((std::string *)((char *)this + 536), &v22);
      std::string::operator=((std::string *)((char *)this + 560), &v23);
      std::string::operator=((std::string *)((char *)this + 584), &v24);
      std::string::operator=((std::string *)((char *)this + 608), &v25);
      std::string::operator=((std::string *)((char *)this + 632), &v26);
      std::string::operator=((std::string *)((char *)this + 656), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      *(unsigned char *)this = 1;
    }
    else
    {
      objc_msgSend(v7, "givenName", 0);
      id v9 = objc_claimAutoreleasedReturnValue();
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)[v9 UTF8String]);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 8), &__str);
      std::string::operator=((std::string *)((char *)this + 32), &v22);
      std::string::operator=((std::string *)((char *)this + 56), &v23);
      std::string::operator=((std::string *)((char *)this + 80), &v24);
      std::string::operator=((std::string *)((char *)this + 104), &v25);
      std::string::operator=((std::string *)((char *)this + 128), &v26);
      std::string::operator=((std::string *)((char *)this + 152), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }

      id v10 = [v7 middleName];
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)[v10 UTF8String]);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 176), &__str);
      std::string::operator=((std::string *)((char *)this + 200), &v22);
      std::string::operator=((std::string *)((char *)this + 224), &v23);
      std::string::operator=((std::string *)((char *)this + 248), &v24);
      std::string::operator=((std::string *)((char *)this + 272), &v25);
      std::string::operator=((std::string *)((char *)this + 296), &v26);
      std::string::operator=((std::string *)((char *)this + 320), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }

      id v11 = [v7 familyName];
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)[v11 UTF8String]);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 344), &__str);
      std::string::operator=((std::string *)((char *)this + 368), &v22);
      std::string::operator=((std::string *)((char *)this + 392), &v23);
      std::string::operator=((std::string *)((char *)this + 416), &v24);
      std::string::operator=((std::string *)((char *)this + 440), &v25);
      std::string::operator=((std::string *)((char *)this + 464), &v26);
      std::string::operator=((std::string *)((char *)this + 488), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }

      id v12 = [v7 nickname];
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)[v12 UTF8String]);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 512), &__str);
      std::string::operator=((std::string *)((char *)this + 536), &v22);
      std::string::operator=((std::string *)((char *)this + 560), &v23);
      std::string::operator=((std::string *)((char *)this + 584), &v24);
      std::string::operator=((std::string *)((char *)this + 608), &v25);
      std::string::operator=((std::string *)((char *)this + 632), &v26);
      std::string::operator=((std::string *)((char *)this + 656), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }

      char v13 = [v7 phoneticGivenName];
      int v14 = [v7 phoneticMiddleName];
      char v15 = [v7 phoneticFamilyName];
      if ([v13 length])
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v13 UTF8String]);
        std::string::operator=((std::string *)((char *)this + 32), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      if ([v14 length])
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v14 UTF8String]);
        std::string::operator=((std::string *)((char *)this + 200), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      if ([v15 length])
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v15 UTF8String]);
        std::string::operator=((std::string *)((char *)this + 368), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      *(unsigned char *)this = 1;
    }
  }
  return v1 != 0;
}

void sub_1C5F7A48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::MeCard::Impl::~Impl(void **this)
{
}

void siri::dialogengine::MeCard::FormatFullName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  id v8 = objc_opt_new();
  id v9 = NSString;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  id v11 = [v9 stringWithUTF8String:p_str];
  [v8 setGivenName:v11];

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  id v12 = NSString;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v13 = &__str;
  }
  else {
    char v13 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v14 = [v12 stringWithUTF8String:v13];
  [v8 setFamilyName:v14];

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v15 = objc_opt_new();
  id v16 = objc_alloc(MEMORY[0x1E4F1CA20]);
  if (*((char *)a3 + 23) >= 0) {
    char v17 = a3;
  }
  else {
    char v17 = (uint64_t *)*a3;
  }
  unsigned int v18 = [NSString stringWithUTF8String:v17];
  char v19 = (void *)[v16 initWithLocaleIdentifier:v18];
  [v15 setLocale:v19];

  [v15 setStyle:0];
  id v20 = [v15 stringFromPersonNameComponents:v8];
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v20 UTF8String]);
  std::string::operator=((std::string *)a4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __str = *(std::string *)a4;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!size) {
      goto LABEL_139;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_139;
  }
  std::string v22 = (_OWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v22;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v24) {
      goto LABEL_34;
    }
LABEL_37:
    if (*(char *)(a2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    }
    else {
      std::string __str = *(std::string *)(a2 + 24);
    }
    goto LABEL_92;
  }
  if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
    goto LABEL_37;
  }
LABEL_34:
  std::string v23 = (_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v23;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v26)
    {
LABEL_42:
      siri::dialogengine::GetLocaleLanguage(&__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 2) {
          goto LABEL_53;
        }
        std::string v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 2) {
          goto LABEL_53;
        }
        std::string v25 = &__str;
      }
      if (LOWORD(v25->__r_.__value_.__l.__data_) == 26740)
      {
        int v27 = 1;
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_55:
          if (v27) {
            id v28 = " ";
          }
          else {
            id v28 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v48, v28);
          if (*(char *)(a4 + 23) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
          }
          else {
            std::string __str = *(std::string *)a4;
          }
          if (*(char *)(a1 + 23) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
          }
          else {
            std::string __p = *(std::string *)a1;
          }
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v47 = *(std::string *)a2;
          }
          std::string::size_type v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v29 = __str.__r_.__value_.__l.__size_;
          }
          if (!v29) {
            goto LABEL_78;
          }
          std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
          }
          if (!v30) {
            goto LABEL_78;
          }
          std::string::size_type v31 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = v47.__r_.__value_.__l.__size_;
          }
          if (v31 && siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v47)) {
            BOOL v32 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&__p);
          }
          else {
LABEL_78:
          }
            BOOL v32 = 0;
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            if (v32) {
              goto LABEL_85;
            }
          }
          else if (v32)
          {
LABEL_85:
            if (*(char *)(a2 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
            }
            else
            {
              *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *v23;
              v47.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
            }
            if ((v50 & 0x80u) == 0) {
              BOOL v34 = (const std::string::value_type *)&v48;
            }
            else {
              BOOL v34 = (const std::string::value_type *)v48;
            }
            if ((v50 & 0x80u) == 0) {
              std::string::size_type v35 = v50;
            }
            else {
              std::string::size_type v35 = v49;
            }
            int v36 = std::string::append(&v47, v34, v35);
            long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
            }
            else
            {
              *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *v22;
              v46.__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
            }
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v42 = &v46;
            }
            else {
              int v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
            }
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v43 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v43 = v46.__r_.__value_.__l.__size_;
            }
            goto LABEL_128;
          }
          if (*(char *)(a1 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
          }
          else
          {
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *v22;
            v47.__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
          }
          if ((v50 & 0x80u) == 0) {
            uint64_t v38 = (const std::string::value_type *)&v48;
          }
          else {
            uint64_t v38 = (const std::string::value_type *)v48;
          }
          if ((v50 & 0x80u) == 0) {
            std::string::size_type v39 = v50;
          }
          else {
            std::string::size_type v39 = v49;
          }
          uint64_t v40 = std::string::append(&v47, v38, v39);
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *v23;
            v46.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
          }
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v42 = &v46;
          }
          else {
            int v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v43 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v43 = v46.__r_.__value_.__l.__size_;
          }
LABEL_128:
          long long v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::string::operator=((std::string *)(a4 + 24), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          if ((char)v50 < 0)
          {
            char v33 = v48;
            goto LABEL_138;
          }
          goto LABEL_139;
        }
LABEL_54:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_55;
      }
LABEL_53:
      int v27 = siri::dialogengine::IsNonWhitespaceLocale() ^ 1;
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_42;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v22;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
  }
LABEL_92:
  std::string::operator=((std::string *)(a4 + 24), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    char v33 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_138:
    operator delete(v33);
  }
LABEL_139:
}

void sub_1C5F7ADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  siri::dialogengine::SpeakableString::~SpeakableString(v41);
  _Unwind_Resume(a1);
}

void siri::dialogengine::MeCard::MeCard(siri::dialogengine::MeCard *this)
{
}

{
  operator new();
}

void siri::dialogengine::MeCard::~MeCard(void ***this)
{
  int v1 = *this;
  if (*this)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 64);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 43);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 22);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 1);
    MEMORY[0x1C8796D70](v1, 0x1012C409FA91174);
  }
}

std::string *siri::dialogengine::MeCard::GetGivenName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  uint64_t v4 = (siri::dialogengine::MeCard::Impl *)((char *)*this + 8);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, v4);
}

std::string *siri::dialogengine::MeCard::GetMiddleName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  uint64_t v4 = (siri::dialogengine::MeCard::Impl *)((char *)*this + 176);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, v4);
}

std::string *siri::dialogengine::MeCard::GetFamilyName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  uint64_t v4 = (siri::dialogengine::MeCard::Impl *)((char *)*this + 344);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, v4);
}

std::string *siri::dialogengine::MeCard::GetNickname@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  uint64_t v4 = (siri::dialogengine::MeCard::Impl *)((char *)*this + 512);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, v4);
}

void siri::dialogengine::MeCard::GetGender(void *a1@<X8>)
{
  uint64_t v3 = [MEMORY[0x1E4F292A8] _currentGlobalUserInflection];
  if (v3)
  {
    id v6 = v3;
    unint64_t v4 = [v3 gender] - 1;
    if (v4 >= 4) {
      uint64_t v5 = "";
    }
    else {
      uint64_t v5 = off_1E651E950[v4];
    }
    std::string::basic_string[abi:ne180100]<0>(a1, v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1C5F7B230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDialogMetadata(uint64_t a1, const std::string *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  siri::dialogengine::GetCanonicalLocale(a2, 0, &__s1);
  std::string::basic_string[abi:ne180100]<0>(&v17, "metadata");
  siri::dialogengine::JoinPath(a1, (uint64_t)&v17, (uint64_t)&v19);
  siri::dialogengine::ListDirRecursively((const char *)&v19, (uint64_t)&v4);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete((void *)v17);
  }
  siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v3);
}

void sub_1C5F7BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,std::__shared_weak_count *a40,uint64_t a41,void *a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a43);
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v75 - 192 + i);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a46);
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  uint64_t v78 = a60;
  a60 = 0;
  if (v78) {
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v78);
  }
  a54 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  a70 = &a73;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  a73 = (uint64_t)&a74;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a73);
  a74 = (uint64_t)&a75;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__24568(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__24570(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5F7C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F7C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F7C714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F7C7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F7C8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F7C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F7CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F7CB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F7CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F7CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F7CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Reference_Button_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Button::Reference_Button((SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Button_default_instance_, v4);
  qword_1EB68F980 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F988 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::Reference_Button(SnippetUI::Reference_Button *this)
{
  *(void *)this = &unk_1F21223C8;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  if (atomic_load_explicit(scc_info_Reference_Button_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Button_Reference_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1C5F7CE94(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Button::GetMetadata(SnippetUI::Reference_Button *this)
{
  return qword_1EA3D9740;
}

void InitDefaultsscc_info_Reference_Standard_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Standard::Reference_Standard((SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Standard_default_instance_, v4);
  qword_1EB68FC48 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC50 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::Reference_Standard(SnippetUI::Reference_Standard *this)
{
  *(void *)this = &unk_1F2122188;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_Reference_Standard_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Standard_Reference_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F7CFC4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Standard::GetMetadata(SnippetUI::Reference_Standard *this)
{
  return file_level_metadata_Reference_2eproto;
}

uint64_t SnippetUI::Reference_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = a2;
  return this;
}

void SnippetUI::Reference_Standard::MergeFrom(SnippetUI::Reference_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 503);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Reference_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F7D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Standard::MergeFrom(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 518);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F7D23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Standard::CopyFrom(SnippetUI::Reference_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Standard::Clear(this);
    SnippetUI::Reference_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Standard::Clear(SnippetUI::Reference_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::Reference_Standard *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        uint64_t v20 = v5 + 2;
        do
        {
          char v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        char v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *uint64_t v20 = v22;
      }
      else
      {
        v5[2] = v19;
        char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      char v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  std::string::size_type v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    std::string v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    std::string::size_type v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  std::string v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Reference_Standard::_InternalParse(SnippetUI::Reference_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallback = v17;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v15;
        TagFallback = v17;
      }
      uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Reference_Standard::GetCachedSize(SnippetUI::Reference_Standard *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::Reference_Standard::ByteSizeLong(SnippetUI::Reference_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::Reference_Standard::IsInitialized(SnippetUI::Reference_Standard *this)
{
  return 1;
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::New(SnippetUI::Reference_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(a2);
}

SnippetUI::Reference_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Reference_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Standard>);
  }
  SnippetUI::Reference_Standard::Reference_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F7D908(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::New(SnippetUI::Reference_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(0);
}

void SnippetUI::Reference_Standard::~Reference_Standard(SnippetUI::Reference_Standard *this)
{
  SnippetUI::Reference_Standard::~Reference_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F2122188;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Reference_Rich_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Rich::Reference_Rich((SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Rich_default_instance_, v4);
  qword_1EB68F778 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F780 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F788 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F790 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::Reference_Rich(SnippetUI::Reference_Rich *this)
{
  *(void *)this = &unk_1F2122308;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load_explicit(scc_info_Reference_Rich_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Rich_Reference_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  return this;
}

void sub_1C5F7DB88(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Rich::GetMetadata(SnippetUI::Reference_Rich *this)
{
  return qword_1EA3D9730;
}

uint64_t SnippetUI::Reference_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void SnippetUI::Reference_Rich::MergeFrom(SnippetUI::Reference_Rich *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1189);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Reference_Rich::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F7DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Rich::MergeFrom(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1204);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    unsigned int v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      unsigned int v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        unsigned int v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 5) = v15;
        unsigned int v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v15, v16);
    }
    unsigned int v17 = (int **)*((void *)a2 + 6);
    if (v17)
    {
      char v18 = (int **)*((void *)this + 6);
      if (!v18)
      {
        char v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 6) = v18;
        unsigned int v17 = (int **)*((void *)a2 + 6);
      }
      if (v17) {
        unsigned int v19 = v17;
      }
      else {
        unsigned int v19 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v18, v19);
    }
  }
}

void sub_1C5F7DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Rich::CopyFrom(SnippetUI::Reference_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Rich::Clear(this);
    SnippetUI::Reference_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Rich::Clear(SnippetUI::Reference_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::Reference_Rich *)((char *)this + 8);
  *((void *)v7 + 5) = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_) {
    goto LABEL_49;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      char v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      char v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *char v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  char v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  std::string v25 = (SnippetUI::VisualProperty *)*((void *)this + 5);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    std::string v25 = (SnippetUI::VisualProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      std::string::size_type v30 = v5 + 2;
      do
      {
        std::string::size_type v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      std::string::size_type v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *std::string::size_type v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  std::string::size_type v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  BOOL v34 = (SnippetUI::ActionProperty *)*((void *)this + 6);
  if (v34)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      BOOL v34 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    }
    *uint64_t v5 = 34;
    unsigned int v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      unsigned int v37 = v35 >> 7;
      if (v35 >> 14)
      {
        uint64_t v38 = v5 + 2;
        do
        {
          std::string::size_type v39 = v38;
          *v38++ = v37 | 0x80;
          unsigned int v40 = v37 >> 7;
          unsigned int v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        int v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *uint64_t v38 = v40;
      }
      else
      {
        v5[2] = v37;
        int v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      int v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  int v42 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    std::string::size_type v43 = (const char *)*((void *)v42 + 1);
    if (!v43) {
      goto LABEL_55;
    }
    int v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  std::string::size_type v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((unsigned char *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.Reference_Rich.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 2), v5);
  }
LABEL_55:
  uint64_t v44 = *((void *)this + 1);
  if ((v44 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v44 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Reference_Rich::_InternalParse(SnippetUI::Reference_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v16 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23))) {
      return v16;
    }
    TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v16;
    if ((*(char *)v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
      uint64_t v16 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v9);
    uint64_t v16 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_28;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 3);
        if (v10) {
          goto LABEL_15;
        }
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v10;
        goto LABEL_14;
      case 2u:
        if (v9 != 18) {
          goto LABEL_28;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (!v10)
        {
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 4) = v10;
LABEL_14:
          TagFallback = v16;
        }
LABEL_15:
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_33;
      case 3u:
        if (v9 != 26) {
          goto LABEL_28;
        }
        uint64_t v12 = (SnippetUI::VisualProperty *)*((void *)this + 5);
        if (!v12)
        {
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 5) = v12;
          TagFallback = v16;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v12, TagFallback);
        goto LABEL_33;
      case 4u:
        if (v9 != 34) {
          goto LABEL_28;
        }
        uint64_t v13 = (SnippetUI::ActionProperty *)*((void *)this + 6);
        if (!v13)
        {
          uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 6) = v13;
          TagFallback = v16;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_33;
      case 5u:
        if (v9 != 42) {
          goto LABEL_28;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Rich.component_name");
        goto LABEL_33;
      default:
LABEL_28:
        if (v9) {
          BOOL v14 = (v9 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        uint64_t v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_33:
        uint64_t v16 = (google::protobuf::internal *)v11;
        if (v11) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Reference_Rich::GetCachedSize(SnippetUI::Reference_Rich *this)
{
  return *((unsigned int *)this + 14);
}

char *SnippetUI::Reference_Rich::ByteSizeLong(SnippetUI::Reference_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    uint64_t v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v10 = (SnippetUI::VisualProperty *)*((void *)this + 5);
    if (v10)
    {
      uint64_t v11 = SnippetUI::VisualProperty::ByteSizeLong(v10);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v11[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v12 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v12)
    {
      uint64_t v13 = SnippetUI::ActionProperty::ByteSizeLong(v12);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v13[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Rich *)((char *)this + 8), v5, (_DWORD *)this + 14);
  }
  else
  {
    *((_DWORD *)this + 14) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::Reference_Rich::IsInitialized(SnippetUI::Reference_Rich *this)
{
  return 1;
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::New(SnippetUI::Reference_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(a2);
}

SnippetUI::Reference_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Reference_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Rich>);
  }
  SnippetUI::Reference_Rich::Reference_Rich(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F7E7BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Rich>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::New(SnippetUI::Reference_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(0);
}

void SnippetUI::Reference_Rich::~Reference_Rich(SnippetUI::Reference_Rich *this)
{
  SnippetUI::Reference_Rich::~Reference_Rich(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F2122308;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    char v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Reference_Logo_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Logo::Reference_Logo((SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Logo_default_instance_, v4);
  qword_1EB68F748 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F750 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::Reference_Logo(SnippetUI::Reference_Logo *this)
{
  *(void *)this = &unk_1F2122248;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_Reference_Logo_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Logo_Reference_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F7EA80(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Logo::GetMetadata(SnippetUI::Reference_Logo *this)
{
  return qword_1EA3D9720;
}

uint64_t SnippetUI::Reference_Logo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = a2;
  return this;
}

void SnippetUI::Reference_Logo::MergeFrom(SnippetUI::Reference_Logo *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 801);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Reference_Logo::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F7EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Logo::MergeFrom(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 816);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Logo *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F7ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Logo::CopyFrom(SnippetUI::Reference_Logo *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Logo::Clear(this);
    SnippetUI::Reference_Logo::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Logo::Clear(SnippetUI::Reference_Logo *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::Reference_Logo *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Logo::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Logo *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::VisualProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        char v20 = v5 + 2;
        do
        {
          char v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *char v20 = v22;
      }
      else
      {
        v5[2] = v19;
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  unsigned int v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    std::string v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    unsigned int v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  std::string v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Logo.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Reference_Logo::_InternalParse(SnippetUI::Reference_Logo *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Logo.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallback = v17;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::VisualProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 3) = v15;
        TagFallback = v17;
      }
      uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Reference_Logo::GetCachedSize(SnippetUI::Reference_Logo *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::Reference_Logo::ByteSizeLong(SnippetUI::Reference_Logo *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    char v6 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Logo *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::Reference_Logo::IsInitialized(SnippetUI::Reference_Logo *this)
{
  return 1;
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::New(SnippetUI::Reference_Logo *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(a2);
}

SnippetUI::Reference_Logo *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Reference_Logo *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Logo>);
  }
  SnippetUI::Reference_Logo::Reference_Logo(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F7F3C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Logo>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::New(SnippetUI::Reference_Logo *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(0);
}

void SnippetUI::Reference_Logo::~Reference_Logo(SnippetUI::Reference_Logo *this)
{
  SnippetUI::Reference_Logo::~Reference_Logo(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F2122248;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Reference_Footnote_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Footnote::Reference_Footnote((SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Footnote_default_instance_, v4);
  qword_1EB68FC00 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC08 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FC18 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC20 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FC10 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::Reference_Footnote(SnippetUI::Reference_Footnote *this)
{
  *(void *)this = &unk_1F2122488;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  if (atomic_load_explicit(scc_info_Reference_Footnote_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Footnote_Reference_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return this;
}

void sub_1C5F7F644(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Footnote::GetMetadata(SnippetUI::Reference_Footnote *this)
{
  return qword_1EA3D9750;
}

uint64_t SnippetUI::Reference_Footnote::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = a2;
  return this;
}

void SnippetUI::Reference_Footnote::MergeFrom(SnippetUI::Reference_Footnote *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1955);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Reference_Footnote::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F7F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Footnote::MergeFrom(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1970);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Footnote *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    unsigned int v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      unsigned int v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        unsigned int v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 5) = v15;
        unsigned int v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
    unsigned int v17 = (int **)*((void *)a2 + 6);
    if (v17)
    {
      uint64_t v18 = (int **)*((void *)this + 6);
      if (!v18)
      {
        uint64_t v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 6) = v18;
        unsigned int v17 = (int **)*((void *)a2 + 6);
      }
      if (v17) {
        unsigned int v19 = v17;
      }
      else {
        unsigned int v19 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v18, v19);
    }
    char v20 = (int **)*((void *)a2 + 7);
    if (v20)
    {
      char v21 = (int **)*((void *)this + 7);
      if (!v21)
      {
        char v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v21;
        char v20 = (int **)*((void *)a2 + 7);
      }
      if (v20) {
        unsigned int v22 = v20;
      }
      else {
        unsigned int v22 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v21, v22);
    }
  }
}

void sub_1C5F7F93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Footnote::CopyFrom(SnippetUI::Reference_Footnote *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Footnote::Clear(this);
    SnippetUI::Reference_Footnote::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Footnote::Clear(SnippetUI::Reference_Footnote *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = *((unsigned char *)this + 8);
  unsigned int v8 = (SnippetUI::Reference_Footnote *)((char *)this + 8);
  *((void *)v8 + 6) = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Footnote::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Footnote *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_) {
    goto LABEL_37;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      char v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      char v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *char v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  char v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  std::string v25 = (SnippetUI::ActionProperty *)*((void *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      std::string v25 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *uint64_t v5 = 26;
    unsigned int v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      unsigned int v28 = v26 >> 7;
      if (v26 >> 14)
      {
        std::string::size_type v29 = v5 + 2;
        do
        {
          std::string::size_type v30 = v29;
          *v29++ = v28 | 0x80;
          unsigned int v31 = v28 >> 7;
          unsigned int v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        uint64_t v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *std::string::size_type v29 = v31;
      }
      else
      {
        v5[2] = v28;
        uint64_t v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      uint64_t v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  unsigned int v33 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v33 + 23) < 0)
  {
    BOOL v34 = (const char *)*((void *)v33 + 1);
    if (!v34) {
      goto LABEL_43;
    }
    unsigned int v33 = *(google::protobuf::internal **)v33;
    goto LABEL_42;
  }
  BOOL v34 = (const char *)*((unsigned __int8 *)v33 + 23);
  if (*((unsigned char *)v33 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (google::protobuf::internal *)"SnippetUI.Reference_Footnote.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 2), v5);
  }
LABEL_43:
  if (this == (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_) {
    goto LABEL_67;
  }
  unsigned int v35 = (SnippetUI::TextProperty *)*((void *)this + 6);
  if (v35)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v35 = (SnippetUI::TextProperty *)*((void *)this + 6);
    }
    *uint64_t v5 = 42;
    unsigned int v36 = *((_DWORD *)v35 + 15);
    if (v36 > 0x7F)
    {
      v5[1] = v36 | 0x80;
      unsigned int v38 = v36 >> 7;
      if (v36 >> 14)
      {
        unsigned int v40 = v5 + 2;
        do
        {
          unsigned int v41 = v40;
          *v40++ = v38 | 0x80;
          unsigned int v42 = v38 >> 7;
          unsigned int v43 = v38 >> 14;
          v38 >>= 7;
        }
        while (v43);
        std::string::size_type v39 = (google::protobuf::UnknownFieldSet *)(v41 + 2);
        *unsigned int v40 = v42;
        goto LABEL_55;
      }
      v5[2] = v38;
      uint64_t v37 = 3;
    }
    else
    {
      v5[1] = v36;
      uint64_t v37 = 2;
    }
    std::string::size_type v39 = (google::protobuf::UnknownFieldSet *)&v5[v37];
LABEL_55:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v35, v39, a3, a4);
  }
  uint64_t v44 = (SnippetUI::TextProperty *)*((void *)this + 7);
  if (v44)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v44 = (SnippetUI::TextProperty *)*((void *)this + 7);
    }
    *uint64_t v5 = 50;
    unsigned int v45 = *((_DWORD *)v44 + 15);
    if (v45 > 0x7F)
    {
      v5[1] = v45 | 0x80;
      unsigned int v47 = v45 >> 7;
      if (v45 >> 14)
      {
        std::string::size_type v48 = v5 + 2;
        do
        {
          std::string::size_type v49 = v48;
          *v48++ = v47 | 0x80;
          unsigned int v50 = v47 >> 7;
          unsigned int v51 = v47 >> 14;
          v47 >>= 7;
        }
        while (v51);
        std::string v46 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
        unsigned char *v48 = v50;
      }
      else
      {
        v5[2] = v47;
        std::string v46 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v45;
      std::string v46 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v44, v46, a3, a4);
  }
LABEL_67:
  uint64_t v52 = *((void *)this + 1);
  if ((v52 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v52 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Reference_Footnote::_InternalParse(SnippetUI::Reference_Footnote *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v15 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23))) {
      return v15;
    }
    TagFallback = (google::protobuf::internal *)((char *)v15 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      unsigned int v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v9);
    unsigned int v15 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_32;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 3);
        if (v10) {
          goto LABEL_29;
        }
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v10;
        goto LABEL_28;
      case 2u:
        if (v9 != 18) {
          goto LABEL_32;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v10) {
          goto LABEL_29;
        }
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v10;
        goto LABEL_28;
      case 3u:
        if (v9 != 26) {
          goto LABEL_32;
        }
        uint64_t v11 = (SnippetUI::ActionProperty *)*((void *)this + 5);
        if (!v11)
        {
          uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 5) = v11;
          TagFallback = v15;
        }
        uint64_t v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_30;
      case 4u:
        if (v9 != 34) {
          goto LABEL_32;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Footnote.component_name");
        goto LABEL_30;
      case 5u:
        if (v9 != 42) {
          goto LABEL_32;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 6);
        if (v10) {
          goto LABEL_29;
        }
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 6) = v10;
        goto LABEL_28;
      case 6u:
        if (v9 != 50) {
          goto LABEL_32;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 7);
        if (v10) {
          goto LABEL_29;
        }
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v10;
LABEL_28:
        TagFallback = v15;
LABEL_29:
        uint64_t v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_30;
      default:
LABEL_32:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        uint64_t v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_30:
        unsigned int v15 = (google::protobuf::internal *)v12;
        if (v12) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Reference_Footnote::GetCachedSize(SnippetUI::Reference_Footnote *this)
{
  return *((unsigned int *)this + 16);
}

char *SnippetUI::Reference_Footnote::ByteSizeLong(SnippetUI::Reference_Footnote *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    uint64_t v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v10 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v10)
    {
      uint64_t v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v11[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v12 = (SnippetUI::TextProperty *)*((void *)this + 6);
    if (v12)
    {
      BOOL v13 = SnippetUI::TextProperty::ByteSizeLong(v12);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v13[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v14 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v14)
    {
      unsigned int v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v15[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Footnote *)((char *)this + 8), v5, (_DWORD *)this + 16);
  }
  else
  {
    *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::Reference_Footnote::IsInitialized(SnippetUI::Reference_Footnote *this)
{
  return 1;
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::New(SnippetUI::Reference_Footnote *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(a2);
}

SnippetUI::Reference_Footnote *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Reference_Footnote *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Footnote>);
  }
  SnippetUI::Reference_Footnote::Reference_Footnote(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F803C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Footnote>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::New(SnippetUI::Reference_Footnote *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(0);
}

void SnippetUI::Reference_Footnote::~Reference_Footnote(SnippetUI::Reference_Footnote *this)
{
  SnippetUI::Reference_Footnote::~Reference_Footnote(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)this = &unk_1F2122488;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    unsigned int v8 = *((void *)this + 7);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Reference_Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void SnippetUI::Reference_Button::MergeFrom(SnippetUI::Reference_Button *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1518);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Reference_Button::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F8069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Button::MergeFrom(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1533);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    unsigned int v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        uint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        unsigned int v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        BOOL v13 = v11;
      }
      else {
        BOOL v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
  int v14 = *((_DWORD *)a2 + 10);
  if (v14) {
    *((_DWORD *)this + 10) = v14;
  }
}

void sub_1C5F80804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Button::CopyFrom(SnippetUI::Reference_Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Button::Clear(this);
    SnippetUI::Reference_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Button::Clear(SnippetUI::Reference_Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (char *)this + 8;
  *((void *)v5 + 3) = 0;
  *((_DWORD *)v5 + 8) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Button::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          BOOL v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        char v20 = v5 + 2;
        do
        {
          char v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *char v20 = v22;
      }
      else
      {
        v5[2] = v19;
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  unsigned int v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    std::string v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    unsigned int v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  std::string v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Button.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  unsigned int v26 = *((_DWORD *)this + 10);
  if (v26)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v26 = *((_DWORD *)this + 10);
    }
    *uint64_t v5 = 32;
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      unint64_t v27 = (unint64_t)(int)v26 >> 7;
      if (v26 >> 14)
      {
        unsigned int v28 = v5 + 2;
        do
        {
          std::string::size_type v29 = v28;
          *v28++ = v27 | 0x80;
          unint64_t v30 = v27 >> 7;
          unint64_t v31 = v27 >> 14;
          v27 >>= 7;
        }
        while (v31);
        uint64_t v5 = v29 + 2;
        unsigned char *v28 = v30;
      }
      else
      {
        v5[2] = v27;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v26;
      v5 += 2;
    }
  }
  uint64_t v32 = *((void *)this + 1);
  if ((v32 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v32 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Reference_Button::_InternalParse(SnippetUI::Reference_Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v18 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23))) {
      return v18;
    }
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      uint64_t v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    uint64_t v18 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_26;
        }
        unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 3);
        if (!v10)
        {
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 3) = v10;
          TagFallback = v18;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_31;
      case 2u:
        if (v9 != 18) {
          goto LABEL_26;
        }
        uint64_t v12 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v12)
        {
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v12;
          TagFallback = v18;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v12, TagFallback);
        goto LABEL_31;
      case 3u:
        if (v9 != 26) {
          goto LABEL_26;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Button.component_name");
        goto LABEL_31;
      case 4u:
        if (v9 != 32) {
          goto LABEL_26;
        }
        BOOL v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v14) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
        int v15 = *(char *)v13;
        unint64_t v14 = v14 + (v15 << 7) - 128;
        if (v15 < 0)
        {
          uint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
          if (!v18) {
            goto LABEL_36;
          }
        }
        else
        {
          BOOL v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
          uint64_t v18 = v13;
        }
        *((_DWORD *)this + 10) = v14;
        continue;
      default:
LABEL_26:
        if (v9) {
          BOOL v16 = (v9 & 7) == 4;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        uint64_t v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_31:
        uint64_t v18 = (google::protobuf::internal *)v11;
        if (v11) {
          continue;
        }
LABEL_36:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Reference_Button::GetCachedSize(SnippetUI::Reference_Button *this)
{
  return *((unsigned int *)this + 11);
}

char *SnippetUI::Reference_Button::ByteSizeLong(SnippetUI::Reference_Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v10 = *((_DWORD *)this + 10);
  if (v10)
  {
    if (v10 < 0) {
      uint64_t v11 = 11;
    }
    else {
      uint64_t v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v11);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Button *)((char *)this + 8), v5, (_DWORD *)this + 11);
  }
  else
  {
    *((_DWORD *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::Reference_Button::IsInitialized(SnippetUI::Reference_Button *this)
{
  return 1;
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::New(SnippetUI::Reference_Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(a2);
}

SnippetUI::Reference_Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Reference_Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Button>);
  }
  SnippetUI::Reference_Button::Reference_Button(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F81014(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Button>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::New(SnippetUI::Reference_Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(0);
}

void SnippetUI::Reference_Button::~Reference_Button(SnippetUI::Reference_Button *this)
{
  SnippetUI::Reference_Button::~Reference_Button(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F21223C8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Reference_Button_ButtonRole_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_Reference_2eproto;
}

BOOL SnippetUI::Reference_Button_ButtonRole_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::Reference_Standard::InitAsDefaultInstance(SnippetUI::Reference_Standard *this)
{
  qword_1EB68FC48 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC50 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Standard::_Internal::text_1(SnippetUI::Reference_Standard::_Internal *this, const SnippetUI::Reference_Standard *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Reference_Standard::_Internal::action(SnippetUI::Reference_Standard::_Internal *this, const SnippetUI::Reference_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Reference_Standard::clear_text_1(SnippetUI::Reference_Standard *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Standard::clear_action(SnippetUI::Reference_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::Reference_Standard(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  *(void *)this = &unk_1F2122188;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F813C8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Reference_Standard::default_instance(SnippetUI::Reference_Standard *this)
{
  if (atomic_load_explicit(scc_info_Reference_Standard_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Standard_Reference_2eproto);
  }
  return &SnippetUI::_Reference_Standard_default_instance_;
}

void SnippetUI::Reference_Standard::CopyFrom(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Standard::Clear(this);
    SnippetUI::Reference_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Standard::InternalSwap(SnippetUI::Reference_Standard *this, SnippetUI::Reference_Standard *a2)
{
  uint64_t v4 = (SnippetUI::Reference_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

void SnippetUI::Reference_Logo::InitAsDefaultInstance(SnippetUI::Reference_Logo *this)
{
  qword_1EB68F748 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F750 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Logo::_Internal::thumbnail(SnippetUI::Reference_Logo::_Internal *this, const SnippetUI::Reference_Logo *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Reference_Logo::_Internal::action(SnippetUI::Reference_Logo::_Internal *this, const SnippetUI::Reference_Logo *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Reference_Logo::clear_thumbnail(SnippetUI::Reference_Logo *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Logo::clear_action(SnippetUI::Reference_Logo *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::Reference_Logo(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  *(void *)this = &unk_1F2122248;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Logo *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F817B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Reference_Logo::default_instance(SnippetUI::Reference_Logo *this)
{
  if (atomic_load_explicit(scc_info_Reference_Logo_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Logo_Reference_2eproto);
  }
  return &SnippetUI::_Reference_Logo_default_instance_;
}

void SnippetUI::Reference_Logo::CopyFrom(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Logo::Clear(this);
    SnippetUI::Reference_Logo::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Logo::InternalSwap(SnippetUI::Reference_Logo *this, SnippetUI::Reference_Logo *a2)
{
  uint64_t v4 = (SnippetUI::Reference_Logo *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

void SnippetUI::Reference_Rich::InitAsDefaultInstance(SnippetUI::Reference_Rich *this)
{
  qword_1EB68F778 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F780 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F788 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F790 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Rich::_Internal::text_1(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Reference_Rich::_Internal::text_2(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Reference_Rich::_Internal::thumbnail(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::Reference_Rich::_Internal::action(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Reference_Rich::clear_text_1(SnippetUI::Reference_Rich *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_text_2(SnippetUI::Reference_Rich *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_thumbnail(SnippetUI::Reference_Rich *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_action(SnippetUI::Reference_Rich *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::Reference_Rich(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  *(void *)this = &unk_1F2122308;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C5F81CD8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Reference_Rich::default_instance(SnippetUI::Reference_Rich *this)
{
  if (atomic_load_explicit(scc_info_Reference_Rich_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Rich_Reference_2eproto);
  }
  return &SnippetUI::_Reference_Rich_default_instance_;
}

void SnippetUI::Reference_Rich::CopyFrom(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Rich::Clear(this);
    SnippetUI::Reference_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Rich::InternalSwap(SnippetUI::Reference_Rich *this, SnippetUI::Reference_Rich *a2)
{
  uint64_t v4 = (SnippetUI::Reference_Rich *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
}

void SnippetUI::Reference_Button::InitAsDefaultInstance(SnippetUI::Reference_Button *this)
{
  qword_1EB68F980 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F988 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Button::_Internal::label(SnippetUI::Reference_Button::_Internal *this, const SnippetUI::Reference_Button *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Reference_Button::_Internal::action(SnippetUI::Reference_Button::_Internal *this, const SnippetUI::Reference_Button *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Reference_Button::clear_label(SnippetUI::Reference_Button *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Button::clear_action(SnippetUI::Reference_Button *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::Reference_Button(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  *(void *)this = &unk_1F21223C8;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  return this;
}

void sub_1C5F820F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Reference_Button::default_instance(SnippetUI::Reference_Button *this)
{
  if (atomic_load_explicit(scc_info_Reference_Button_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Button_Reference_2eproto);
  }
  return &SnippetUI::_Reference_Button_default_instance_;
}

void SnippetUI::Reference_Button::CopyFrom(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Button::Clear(this);
    SnippetUI::Reference_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Button::InternalSwap(SnippetUI::Reference_Button *this, SnippetUI::Reference_Button *a2)
{
  uint64_t v4 = (SnippetUI::Reference_Button *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v14;
}

void SnippetUI::Reference_Footnote::InitAsDefaultInstance(SnippetUI::Reference_Footnote *this)
{
  qword_1EB68FC00 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC08 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FC18 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FC20 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FC10 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_1(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_2(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_3(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_4(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::action(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::Reference_Footnote::clear_text_1(SnippetUI::Reference_Footnote *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_2(SnippetUI::Reference_Footnote *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_3(SnippetUI::Reference_Footnote *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_4(SnippetUI::Reference_Footnote *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_action(SnippetUI::Reference_Footnote *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::Reference_Footnote(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  *(void *)this = &unk_1F2122488;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Footnote *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    *(_OWORD *)((char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
  }
  *((void *)this + 7) = 0;
  return this;
}

void sub_1C5F826B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Reference_Footnote::default_instance(SnippetUI::Reference_Footnote *this)
{
  if (atomic_load_explicit(scc_info_Reference_Footnote_Reference_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Footnote_Reference_2eproto);
  }
  return &SnippetUI::_Reference_Footnote_default_instance_;
}

void SnippetUI::Reference_Footnote::CopyFrom(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Footnote::Clear(this);
    SnippetUI::Reference_Footnote::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Footnote::InternalSwap(SnippetUI::Reference_Footnote *this, SnippetUI::Reference_Footnote *a2)
{
  uint64_t v4 = (SnippetUI::Reference_Footnote *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v18;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  _OWORD v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  uint64_t v17 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v17;
}

void siri::dialogengine::PatternSchemaComponent::GetName(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::PatternSchemaComponent::GetNameWithVariant(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = *a1;
      }
      memmove(p_p, v9, v7);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 95;
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      long long v11 = (const std::string::value_type *)a2;
    }
    else {
      long long v11 = *(const std::string::value_type **)a2;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a2 + 8);
    }
    uint64_t v13 = std::string::append(&__p, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (*((char *)a1 + 23) < 0)
  {
    uint64_t v15 = (const std::string::value_type *)*a1;
    std::string::size_type v16 = (std::string::size_type)a1[1];
    std::string::__init_copy_ctor_external(a3, v15, v16);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = (std::string::size_type)a1[2];
  }
}

void sub_1C5F82A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::PatternSchemaComponent::GetUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(a2, *((void **)this + 3), *((void **)this + 4), (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 4);
}

void siri::dialogengine::PatternSchemaComponent::SetUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::SetDefaultComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 18);
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::SetDefaultVariant(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

std::string *siri::dialogengine::PatternSchemaComponent::GetAllowedVariants@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[19], this[20], 0xAAAAAAAAAAAAAAABLL * (((char *)this[20] - (char *)this[19]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetAllowedVariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::vector<std::string> *)(a1 + 152);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void *siri::dialogengine::PatternSchemaComponent::GetFullUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = 48;
  if (*((void *)this + 6) == *((void *)this + 7))
  {
    uint64_t v3 = 24;
    uint64_t v2 = (char *)this + 24;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(a2, *(void **)((char *)this + v3), *((void **)v2 + 1), (uint64_t)(*((void *)v2 + 1) - *(void *)((char *)this + v3)) >> 4);
}

void siri::dialogengine::PatternSchemaComponent::SetFullUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 48);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void *siri::dialogengine::PatternSchemaComponent::GetSupportingUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (char *)this + 72;
  uint64_t v3 = 72;
  if (*((void *)this + 9) == *((void *)this + 10))
  {
    uint64_t v3 = 24;
    uint64_t v2 = (char *)this + 24;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(a2, *(void **)((char *)this + v3), *((void **)v2 + 1), (uint64_t)(*((void *)v2 + 1) - *(void *)((char *)this + v3)) >> 4);
}

void siri::dialogengine::PatternSchemaComponent::SetSupportingUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(siri::dialogengine::PatternSchemaComponent *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t siri::dialogengine::PatternSchemaComponent::SetAllowMultiple(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaComponent::GetFullOverrides@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>(a2, *((void **)this + 22), *((void **)this + 23), (uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 4);
}

void *std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5F82CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::dialogengine::PatternSchemaComponent::SetFullOverrides(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 176);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void *siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>(a2, *((void **)this + 25), *((void **)this + 26), (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 4);
}

void siri::dialogengine::PatternSchemaComponent::SetSupportingOverrides(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 200);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::GetFullExamples@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[28], this[29], 0xAAAAAAAAAAAAAAABLL * (((char *)this[29] - (char *)this[28]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetFullExamples(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::vector<std::string> *)(a1 + 224);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::GetSupportingExamples@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[31], this[32], 0xAAAAAAAAAAAAAAABLL * (((char *)this[32] - (char *)this[31]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetSupportingExamples(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::vector<std::string> *)(a1 + 248);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::GetDupes@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[34], this[35], 0xAAAAAAAAAAAAAAABLL * (((char *)this[35] - (char *)this[34]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetDupes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::vector<std::string> *)(a1 + 272);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

uint64_t siri::dialogengine::WriteCATSchemaYAML(void *a1)
{
  if (*a1) {
    YAML::Emitter::Emitter((YAML::Emitter *)&v2);
  }
  return 0;
}

void sub_1C5F83C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>(uint64_t a1)
{
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>(uint64_t a1)
{
  siri::dialogengine::PropertyBase::~PropertyBase((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

BOOL siri::dialogengine::WriteCATSchemaBinary(uint64_t *a1, std::string *a2, char a3)
{
  if (!*a1) {
    return 0;
  }
  siri::dialogengine::SchemaBinary::Schema::Schema((siri::dialogengine::SchemaBinary::Schema *)v49);
  v50 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v67, "SCHEMAPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v59, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  v50 |= 4u;
  std::string::basic_string[abi:ne180100]<0>(&v67, "1.0");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v61, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *a1;
  if (*(char *)(*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v67.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v7;
  }
  v50 |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v60, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (a3) {
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v9 = (std::string *)*a1;
    if (*(char *)(*a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v67, v9[2].__r_.__value_.__l.__data_, v9[2].__r_.__value_.__l.__size_);
    }
    else {
      std::string v67 = v9[2];
    }
    v50 |= 8u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena(&v62, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    goto LABEL_19;
  }
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((a3 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_19:
  int v10 = (std::string *)*a1;
  if (*(char *)(*a1 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v67, v10[3].__r_.__value_.__l.__data_, v10[3].__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v10[3];
  }
  v50 |= 0x10u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v63, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = *a1;
  BOOL v12 = *(_DWORD *)(*a1 + 120) == 1;
  int v13 = v50 | 0x40;
  v50 |= 0x40u;
  BOOL v65 = v12;
  if (*(char *)(v11 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v11 + 96), *(void *)(v11 + 104));
    int v13 = v50;
  }
  else
  {
    std::string v67 = *(std::string *)(v11 + 96);
  }
  int v50 = v13 | 0x20;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v64, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = *a1;
  int v15 = *(_DWORD *)(*a1 + 124);
  if (v15 == 2) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  if (v15 == 3) {
    int v17 = 0;
  }
  else {
    int v17 = v16;
  }
  v50 |= 0x80u;
  int v66 = v17;
  siri::dialogengine::ObjectSchema::GetInputs(v14, 0, 0, (uint64_t **)&v67);
  std::string::size_type v18 = v67.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v67.__r_.__value_.__l.__data_ != &v67.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      unsigned int v19 = v54;
      if (!v54) {
        break;
      }
      uint64_t v20 = v52;
      int v21 = *v54;
      if (v52 >= *v54)
      {
        if (v21 == v53)
        {
LABEL_41:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v51, v21 + 1);
          unsigned int v19 = v54;
          int v21 = *v54;
        }
        _DWORD *v19 = v21 + 1;
        unsigned int v22 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::SchemaBinary::Input>(v51);
        uint64_t v23 = v52++;
        *(void *)&v54[2 * v23 + 2] = v22;
        goto LABEL_43;
      }
      ++v52;
      unsigned int v22 = *(siri::dialogengine::SchemaBinary::Input **)&v54[2 * v20 + 2];
LABEL_43:
      unsigned int v24 = (const std::string *)(v18 + 32);
      std::string v25 = (std::string *)*((void *)v22 + 3);
      *((_DWORD *)v22 + 4) |= 1u;
      if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v22 + 24, (uint64_t)v24);
      }
      std::string::operator=(v25, v24);
      if (*(char *)(v18 + 111) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 88), *(void *)(v18 + 96));
      }
      else {
        std::string v48 = *(std::string *)(v18 + 88);
      }
      *((_DWORD *)v22 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      BOOL v26 = *(_DWORD *)(v18 + 212) == 1;
      *((_DWORD *)v22 + 4) |= 0x20u;
      *((_DWORD *)v22 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v26;
      if ((a3 & 1) == 0)
      {
        if (*(char *)(v18 + 135) < 0) {
          std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 112), *(void *)(v18 + 120));
        }
        else {
          std::string v48 = *(std::string *)(v18 + 112);
        }
        *((_DWORD *)v22 + 4) |= 8u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      if (*(char *)(v18 + 159) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 136), *(void *)(v18 + 144));
      }
      else {
        std::string v48 = *(std::string *)(v18 + 136);
      }
      *((_DWORD *)v22 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(v18 + 209)) {
        unint64_t v27 = "yes";
      }
      else {
        unint64_t v27 = "no";
      }
      std::string::basic_string[abi:ne180100]<0>(&v48, v27);
      *((_DWORD *)v22 + 4) |= 4u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      char v28 = *(unsigned char *)(v18 + 210);
      *((_DWORD *)v22 + 4) |= 0x40u;
      *((unsigned char *)v22 + 68) = v28;
      std::string::size_type v29 = *(std::string **)(v18 + 8);
      if (v29)
      {
        do
        {
          unint64_t v30 = v29;
          std::string::size_type v29 = (std::string *)v29->__r_.__value_.__r.__words[0];
        }
        while (v29);
      }
      else
      {
        do
        {
          unint64_t v30 = *(std::string **)(v18 + 16);
          BOOL v31 = v30->__r_.__value_.__r.__words[0] == v18;
          std::string::size_type v18 = (std::string::size_type)v30;
        }
        while (!v31);
      }
      std::string::size_type v18 = (std::string::size_type)v30;
      if (v30 == (std::string *)&v67.__r_.__value_.__r.__words[1]) {
        goto LABEL_73;
      }
    }
    int v21 = v53;
    goto LABEL_41;
  }
LABEL_73:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((void *)v67.__r_.__value_.__l.__size_);
  siri::dialogengine::ObjectSchema::GetProperties(*a1, 0, 0, &v67);
  std::string::size_type v32 = v67.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v67.__r_.__value_.__l.__data_ != &v67.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      unsigned int v33 = v58;
      if (!v58) {
        break;
      }
      uint64_t v34 = v56;
      int v35 = *v58;
      if (v56 < *v58)
      {
        ++v56;
        unsigned int v36 = *(siri::dialogengine::SchemaBinary::Property **)&v58[2 * v34 + 2];
        goto LABEL_81;
      }
      if (v35 == v57) {
        goto LABEL_79;
      }
LABEL_80:
      *unsigned int v33 = v35 + 1;
      unsigned int v36 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::SchemaBinary::Property>(v55);
      uint64_t v37 = v56++;
      *(void *)&v58[2 * v37 + 2] = v36;
LABEL_81:
      unsigned int v38 = (const std::string *)(v32 + 32);
      std::string::size_type v39 = (std::string *)*((void *)v36 + 3);
      *((_DWORD *)v36 + 4) |= 1u;
      if (v39 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v36 + 24, (uint64_t)v38);
      }
      std::string::operator=(v39, v38);
      if (*(char *)(v32 + 111) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 88), *(void *)(v32 + 96));
      }
      else {
        std::string v48 = *(std::string *)(v32 + 88);
      }
      *((_DWORD *)v36 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v48.__r_.__value_.__l.__data_);
        if ((a3 & 1) == 0)
        {
LABEL_91:
          if (*(char *)(v32 + 135) < 0) {
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 112), *(void *)(v32 + 120));
          }
          else {
            std::string v48 = *(std::string *)(v32 + 112);
          }
          *((_DWORD *)v36 + 4) |= 4u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
      }
      else if ((a3 & 1) == 0)
      {
        goto LABEL_91;
      }
      if (*(char *)(v32 + 239) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 216), *(void *)(v32 + 224));
      }
      else {
        std::string v48 = *(std::string *)(v32 + 216);
      }
      *((_DWORD *)v36 + 4) |= 8u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v32 + 183) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 160), *(void *)(v32 + 168));
      }
      else {
        std::string v48 = *(std::string *)(v32 + 160);
      }
      *((_DWORD *)v36 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(v32 + 209)) {
        unsigned int v40 = "yes";
      }
      else {
        unsigned int v40 = "no";
      }
      std::string::basic_string[abi:ne180100]<0>(&v48, v40);
      *((_DWORD *)v36 + 4) |= 0x40u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v32 + 207) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 184), *(void *)(v32 + 192));
      }
      else {
        std::string v48 = *(std::string *)(v32 + 184);
      }
      *((_DWORD *)v36 + 4) |= 0x20u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v32 + 159) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 136), *(void *)(v32 + 144));
      }
      else {
        std::string v48 = *(std::string *)(v32 + 136);
      }
      *((_DWORD *)v36 + 4) |= 0x80u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      char v41 = *(unsigned char *)(v32 + 210);
      *((_DWORD *)v36 + 4) |= 0x100u;
      *((unsigned char *)v36 + 88) = v41;
      unsigned int v42 = *(std::string **)(v32 + 8);
      if (v42)
      {
        do
        {
          unsigned int v43 = v42;
          unsigned int v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
        }
        while (v42);
      }
      else
      {
        do
        {
          unsigned int v43 = *(std::string **)(v32 + 16);
          BOOL v31 = v43->__r_.__value_.__r.__words[0] == v32;
          std::string::size_type v32 = (std::string::size_type)v43;
        }
        while (!v31);
      }
      std::string::size_type v32 = (std::string::size_type)v43;
      if (v43 == (std::string *)&v67.__r_.__value_.__r.__words[1]) {
        goto LABEL_127;
      }
    }
    int v35 = v57;
LABEL_79:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v55, v35 + 1);
    unsigned int v33 = v58;
    int v35 = *v58;
    goto LABEL_80;
  }
LABEL_127:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((void *)v67.__r_.__value_.__l.__size_);
  memset(&v67, 0, sizeof(v67));
  if (google::protobuf::MessageLite::SerializeToString(v49, &v67))
  {
    BOOL v8 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&v67.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    uint64_t v44 = std::string::append(&v47, " to protobuf...testxml");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v48, 3u);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    BOOL v8 = 0;
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)v49);
  return v8;
}

void sub_1C5F84990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *siri::dialogengine::ValidationBase::ValidationBase(void *this)
{
  this[3] = 0;
  this[2] = 0;
  *this = &unk_1F21271E8;
  this[1] = this + 2;
  return this;
}

void siri::dialogengine::ValidationBase::~ValidationBase(siri::dialogengine::ValidationBase *this)
{
  *(void *)this = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
}

uint64_t siri::dialogengine::ValidationBase::GetAttributes@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 1);
}

void siri::dialogengine::ValidationBase::GetAttribute(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  uint64_t v6 = std::__tree<std::string>::find<std::string>(v5, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 16 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 + 56), *(void *)(v6 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void siri::dialogengine::ValidationBase::SetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

void __assign_helper_atomic_property__24746(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__24748(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5F84D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F84E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F84EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F85020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  if (*(char *)(v5 - 57) < 0) {
    operator delete(*(void **)(v5 - 80));
  }
  if (*(char *)(v5 - 33) < 0) {
    operator delete(*(void **)(v5 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C5F8528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);

  _Unwind_Resume(a1);
}

void sub_1C5F852F0()
{
}

void sub_1C5F852F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1C5F852E4);
}

void sub_1C5F854D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  _Unwind_Resume(a1);
}

void sub_1C5F85534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1C5F8552CLL);
}

void sub_1C5F85694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  if (*(char *)(v5 - 57) < 0) {
    operator delete(*(void **)(v5 - 80));
  }
  if (*(char *)(v5 - 33) < 0) {
    operator delete(*(void **)(v5 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C5F85900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);

  _Unwind_Resume(a1);
}

void sub_1C5F85964()
{
}

void sub_1C5F8596C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1C5F85958);
}

void sub_1C5F85B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  _Unwind_Resume(a1);
}

void sub_1C5F85BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1C5F85BA0);
}

void sub_1C5F85C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F85D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F85DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F85E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPressure::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatPressure(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  uint64_t v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      uint64_t v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
LABEL_12:
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_12;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5F8656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a37);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPressure::approximate(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPressure::compactDecimalLong(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPressure::compactDecimalShort(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPressure::units(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5F86850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPressure::value(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&v6, (uint64_t)a2);
  uint64_t v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(v6);
    if (v5) {
LABEL_3:
    }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5F869D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

double siri::dialogengine::ObjectSchema::ObjectSchema(siri::dialogengine::ObjectSchema *this)
{
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(void *)&double result = 0x100000001;
  *((void *)this + 15) = 0x100000001;
  *((void *)this + 17) = 0;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = (char *)this + 136;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 2siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 22) = (char *)this + 184;
  return result;
}

{
  double result;

  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(void *)&double result = 0x100000001;
  *((void *)this + 15) = 0x100000001;
  *((void *)this + 17) = 0;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = (char *)this + 136;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 2siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 22) = (char *)this + 184;
  return result;
}

void siri::dialogengine::ObjectSchema::GetName(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::ObjectSchema::GetFilename(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetFilename(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::ObjectSchema::GetDescription(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::ObjectSchema::GetBaseObject(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetBaseObject(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::ObjectSchema::GetVersionAdded(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetVersionAdded(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::ObjectSchema::GetType(siri::dialogengine::ObjectSchema *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t siri::dialogengine::ObjectSchema::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

uint64_t siri::dialogengine::ObjectSchema::SetType(uint64_t a1, const char *a2)
{
  if ((a2[23] & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 4)
    {
      if (v2 != 6) {
        goto LABEL_14;
      }
      goto LABEL_7;
    }
LABEL_13:
    if (*(_DWORD *)a2 == 1836412517)
    {
      *(_DWORD *)(a1 + 120) = 2;
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v4 = a2;
  a2 = *(const char **)a2;
  uint64_t v3 = *((void *)v4 + 1);
  if (v3 == 4) {
    goto LABEL_13;
  }
  if (v3 != 6)
  {
LABEL_14:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized string for schema type: \"%s\"", a2, a2);
    return 0;
  }
LABEL_7:
  if (*(_DWORD *)a2 != 1701470831 || *((_WORD *)a2 + 2) != 29795) {
    goto LABEL_14;
  }
  uint64_t v6 = 1;
  *(_DWORD *)(a1 + 120) = 1;
  return v6;
}

uint64_t siri::dialogengine::ObjectSchema::GetEnumValueType(siri::dialogengine::ObjectSchema *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t siri::dialogengine::ObjectSchema::SetEnumValueType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  return result;
}

uint64_t siri::dialogengine::ObjectSchema::SetEnumValueType(uint64_t a1, uint64_t *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v3 = *((unsigned __int8 *)a2 + 23);
    if (v3 != 3)
    {
      if (v3 != 6) {
        goto LABEL_17;
      }
      goto LABEL_7;
    }
LABEL_13:
    if (*(_WORD *)a2 == 28265 && *((unsigned char *)a2 + 2) == 116)
    {
      uint64_t result = 1;
      int v8 = 2;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v5 = a2;
  a2 = (uint64_t *)*a2;
  uint64_t v4 = v5[1];
  if (v4 == 3) {
    goto LABEL_13;
  }
  if (v4 != 6)
  {
LABEL_17:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized string for enum value type: \"%s\"", (const char *)a2, a2);
    uint64_t result = 0;
    int v8 = 1;
    goto LABEL_18;
  }
LABEL_7:
  if (*(_DWORD *)a2 != 1769108595 || *((_WORD *)a2 + 2) != 26478) {
    goto LABEL_17;
  }
  uint64_t result = 1;
  int v8 = 3;
LABEL_18:
  *(_DWORD *)(a1 + 124) = v8;
  return result;
}

void siri::dialogengine::ObjectSchema::GetEnumerantNames(siri::dialogengine::ObjectSchema *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  int v3 = *((_DWORD *)this + 30);
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  if (v3 != 1)
  {
    std::vector<std::string>::reserve(a2, *((void *)this + 24));
    uint64_t v5 = (char *)*((void *)this + 22);
    uint64_t v6 = (char *)this + 184;
    if (v5 != (char *)this + 184)
    {
      unint64_t end = (unint64_t)a2->__end_;
      do
      {
        int v8 = (long long *)(v5 + 32);
        if ((std::string *)end >= a2->__end_cap_.__value_)
        {
          unint64_t end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v8);
          end += 24;
        }
        a2->__end_ = (std::vector<std::string>::pointer)end;
        char v9 = (char *)*((void *)v5 + 1);
        if (v9)
        {
          do
          {
            int v10 = v9;
            char v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int v10 = (char *)*((void *)v5 + 2);
            BOOL v11 = *(void *)v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v11);
        }
        uint64_t v5 = v10;
      }
      while (v10 != v6);
    }
  }
}

void sub_1C5F86E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1C5F86F38(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void siri::dialogengine::ObjectSchema::GetEnumerant(uint64_t a1@<X0>, char *a2@<X1>, siri::dialogengine::ObjectEnumerant *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 120) != 2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"GetEnumerant() is not valid for schema type %d", a2, *(unsigned int *)(a1 + 120));
LABEL_11:
    char v11 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = a1 + 184;
  uint64_t v5 = *(void *)(a1 + 184);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 192;
  uint64_t v8 = a1 + 184;
  do
  {
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), (const void **)a2);
    int v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      int v10 = (uint64_t *)v5;
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, (const void **)a2, (const void **)(v8 + 32))) {
    goto LABEL_11;
  }
  siri::dialogengine::ObjectEnumerant::ObjectEnumerant(a3, (const siri::dialogengine::ObjectEnumerant *)(v8 + 56));
  char v11 = 1;
LABEL_12:
  *((unsigned char *)a3 + 96) = v11;
}

siri::dialogengine::ObjectEnumerant *siri::dialogengine::ObjectEnumerant::ObjectEnumerant(siri::dialogengine::ObjectEnumerant *this, const siri::dialogengine::ObjectEnumerant *a2)
{
  *(void *)this = &unk_1F2125FA0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 1);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((_OWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v4;
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((_OWORD *)this + 3) = v5;
  }
  uint64_t v6 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *((void *)a2 + 11);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C5F87104(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::AddEnumerant(siri::dialogengine::ObjectSchema *this, const std::string *a2)
{
  if (*((_DWORD *)this + 30) != 2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot add enum value.  Object is not an enum", (const char *)a2);
    return;
  }
  long long v4 = (const std::string *)&a2->__r_.__value_.__r.__words[2];
  if (a2[1].__r_.__value_.__s.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__l.__size_;
  }
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v30.__r_.__value_.__s + 23)) {
      goto LABEL_10;
    }
LABEL_13:
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v32, "'");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v30, 3u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
LABEL_48:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v21 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_50;
  }
  std::string::size_type size = v30.__r_.__value_.__l.__size_;
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_13;
  }
LABEL_10:
  if (a2[1].__r_.__value_.__s.__data_[15] < 0) {
    std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  }
  else {
    std::string v29 = *v4;
  }
  siri::dialogengine::ObjectSchema::GetEnumerant((uint64_t)this, (char *)&v29, (siri::dialogengine::ObjectEnumerant *)&v30);
  int v9 = v31;
  if (v31) {
    siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)&v30.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_23:
    if (LODWORD(a2->__r_.__value_.__r.__words[1]) != *((_DWORD *)this + 31))
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot add enumerant of type that is different from schema enum value type", v8);
      return;
    }
    if (a2[1].__r_.__value_.__s.__data_[15] < 0) {
      std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
    }
    else {
      std::string v32 = *v4;
    }
    unsigned int v22 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)this + 176, &v28, (const void **)&v32.__r_.__value_.__l.__data_);
    uint64_t v23 = (char *)*v22;
    if (!*v22)
    {
      uint64_t v24 = (uint64_t **)v22;
      uint64_t v23 = (char *)operator new(0x98uLL);
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)this + 184;
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      std::string::size_type v25 = v32.__r_.__value_.__r.__words[2];
      memset(&v32, 0, sizeof(v32));
      *((void *)v23 + 6) = v25;
      *((void *)v23 + 7) = &unk_1F2125FA0;
      *((_DWORD *)v23 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 1;
      *((void *)v23 + 10) = 0;
      *((void *)v23 + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
      *((void *)v23 + 9) = 0;
      *((_DWORD *)v23 + 24) = 0;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      v30.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)this + 22, (uint64_t)v28.__r_.__value_.__l.__data_, v24, (uint64_t *)v23);
      v30.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>>>>::reset[abi:ne180100]((uint64_t)&v30);
    }
    *((_DWORD *)v23 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a2->__r_.__value_.__r.__words[1];
    std::string::operator=((std::string *)v23 + 3, v4);
    *((_DWORD *)v23 + 24) = a2[1].__r_.__value_.__r.__words[2];
    std::string::operator=((std::string *)(v23 + 104), a2 + 2);
    std::string::operator=((std::string *)(v23 + 128), a2 + 3);
    goto LABEL_48;
  }
LABEL_20:
  if (a2[1].__r_.__value_.__s.__data_[15] < 0) {
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  }
  else {
    std::string v26 = *v4;
  }
  int v10 = std::string::insert(&v26, 0, "Attempting to add duplicate enumerant name '");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  BOOL v12 = std::string::append(&v27, "' to object '");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = *((char *)this + 23);
  if (v14 >= 0) {
    int v15 = (const std::string::value_type *)this;
  }
  else {
    int v15 = *(const std::string::value_type **)this;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *((unsigned __int8 *)this + 23);
  }
  else {
    std::string::size_type v16 = *((void *)this + 1);
  }
  int v17 = std::string::append(&v28, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  unsigned int v19 = std::string::append(&v32, "'");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v30, 3u);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v21 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_50:
    operator delete(v21);
  }
}

void sub_1C5F87530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>(uint64_t a1)
{
  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void siri::dialogengine::ObjectSchema::GetProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = (const void ***)(a1 + 128);
  std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100]((uint64_t)&v21, (const void ***)(a1 + 128));
  if (a3) {
    goto LABEL_2;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_2;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    goto LABEL_2;
  }
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", v9);
    std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100]((uint64_t)a4, v8);
    int v10 = v22;
    goto LABEL_22;
  }
  siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)(a1 + 72), &v19);
  if (v19)
  {
    siri::dialogengine::ObjectSchema::GetProperties(&v17, v19, a2, 0);
    long long v13 = v17;
    if (v17 != (const void **)v18)
    {
      do
      {
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(&v21, (uint64_t)&v22, v13 + 4, (long long *)v13 + 2);
        int v14 = (const void **)v13[1];
        if (v14)
        {
          do
          {
            int v15 = (const void ***)v14;
            int v14 = (const void **)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (const void ***)v13[2];
            BOOL v16 = *v15 == v13;
            long long v13 = (const void **)v15;
          }
          while (!v16);
        }
        long long v13 = (const void **)v15;
      }
      while (v15 != v18);
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v18[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
LABEL_2:
  int v10 = v22;
  *a4 = v21;
  a4[1] = v10;
  long long v11 = a4 + 1;
  uint64_t v12 = v23;
  a4[2] = v23;
  if (v12)
  {
    std::string v10[2] = v11;
    uint64_t v21 = (uint64_t *)&v22;
    unsigned int v22 = 0;
    uint64_t v23 = 0;
    int v10 = 0;
  }
  else
  {
    *a4 = v11;
  }
LABEL_22:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v10);
}

void sub_1C5F87818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *a15)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  long long v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t **)a1, v3, v5 + 4, (long long *)v5 + 2);
      uint64_t v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (const void ***)v5[2];
          BOOL v8 = *v7 == v5;
          long long v5 = (const void **)v7;
        }
        while (!v8);
      }
      long long v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1C5F878EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(uint64_t **a1, uint64_t a2, const void **a3, long long *a4)
{
  uint64_t v6 = a2;
  BOOL v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v6 + 32), a3))
    {
      uint64_t v19 = v6;
      uint64_t v20 = v6;
      uint64_t v12 = (uint64_t **)&v19;
      if (v6) {
        return;
      }
LABEL_31:
      uint64_t v6 = v20;
      goto LABEL_32;
    }
    uint64_t v12 = (uint64_t **)(v6 + 8);
    long long v11 = *(uint64_t **)(v6 + 8);
    if (v11)
    {
      long long v13 = *(const void ***)(v6 + 8);
      do
      {
        int v14 = v13;
        long long v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v17 = v6;
      do
      {
        int v14 = *(const void ***)(v17 + 16);
        BOOL v16 = *v14 == (const void *)v17;
        uint64_t v17 = (uint64_t)v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, v14 + 4))
      {
LABEL_29:
        uint64_t v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v20, a3);
        goto LABEL_30;
      }
      long long v11 = *v12;
    }
    if (v11)
    {
      uint64_t v20 = (uint64_t)v14;
      uint64_t v12 = (uint64_t **)v14;
    }
    else
    {
      uint64_t v20 = v6;
    }
LABEL_30:
    if (*v12) {
      return;
    }
    goto LABEL_31;
  }
  if (*a1 == (uint64_t *)v6)
  {
    uint64_t v10 = v6;
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)v6;
  if (*(void *)v6)
  {
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    uint64_t v15 = v6;
    do
    {
      uint64_t v10 = *(void *)(v15 + 16);
      BOOL v16 = *(void *)v10 == v15;
      uint64_t v15 = v10;
    }
    while (v16);
  }
  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3)) {
    goto LABEL_29;
  }
LABEL_16:
  if (*(void *)v6)
  {
    uint64_t v20 = v10;
    uint64_t v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  uint64_t v20 = v6;
  uint64_t v12 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t)v18, (uint64_t)a1, a4);
  std::__tree<std::string>::__insert_node_at(a1, v6, v12, v18[0]);
  v18[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x128uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t result = std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 1;
  return result;
}

void sub_1C5F87B24(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ObjectProperty::ObjectProperty((siri::dialogengine::ObjectProperty *)&this[1], (const siri::dialogengine::ObjectProperty *)((char *)a2 + 24));
  return this;
}

void sub_1C5F87BEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::vector<std::string> *a4@<X8>)
{
  siri::dialogengine::ObjectSchema::GetProperties(a1, a2, a3, &v11);
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a4, (std::vector<std::string>::size_type)v12[1]);
  uint64_t v5 = v11;
  if (v11 != v12)
  {
    unint64_t end = (unint64_t)a4->__end_;
    do
    {
      long long v7 = (long long *)(v5 + 4);
      if ((std::string *)end >= a4->__end_cap_.__value_)
      {
        unint64_t end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v7);
        end += 24;
      }
      a4->__end_ = (std::vector<std::string>::pointer)end;
      BOOL v8 = v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void **)v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void **)v5[2];
          BOOL v10 = *v9 == v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v12);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v12[0]);
}

void sub_1C5F87CDC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::GetProperty(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, siri::dialogengine::ObjectProperty *a5@<X8>)
{
  if (*(_DWORD *)(a1 + 120) != 1) {
    goto LABEL_10;
  }
  uint64_t v10 = a1 + 136;
  uint64_t v11 = *(void *)(a1 + 136);
  if (v11)
  {
    uint64_t v12 = a1 + 136;
    do
    {
      BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a1 + 144, (const void **)(v11 + 32), a3);
      int v14 = (uint64_t *)(v11 + 8);
      if (!v13)
      {
        int v14 = (uint64_t *)v11;
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v14;
    }
    while (*v14);
    if (v12 != v10 && !std::less<std::string>::operator()[abi:ne180100](a1 + 144, a3, (const void **)(v12 + 32)))
    {
      siri::dialogengine::ObjectProperty::ObjectProperty(a5, (const siri::dialogengine::ObjectProperty *)(v12 + 56));
      *((unsigned char *)a5 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 1;
      return;
    }
  }
  if (a4) {
    goto LABEL_10;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80))
    {
LABEL_10:
      *(unsigned char *)a5 = 0;
      *((unsigned char *)a5 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0;
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    goto LABEL_10;
  }
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", a2);
    goto LABEL_10;
  }
  siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)(a1 + 72), &v15);
  if (!v15)
  {
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    goto LABEL_10;
  }
  siri::dialogengine::ObjectSchema::GetProperty(a5, v15, a2, a3, 0);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1C5F87E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::SetProperties(uint64_t a1, const char *a2)
{
  if (*(_DWORD *)(a1 + 120) == 1)
  {
    int v2 = (uint64_t **)(a1 + 128);
    if ((const char *)(a1 + 128) != a2)
    {
      uint64_t v3 = a2 + 8;
      long long v4 = *(const char **)a2;
      if (*(void *)(a1 + 144))
      {
        uint64_t v6 = *(void *)(a1 + 136);
        uint64_t v5 = (void *)(a1 + 136);
        long long v7 = (void *)*(v5 - 1);
        *(v5 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v5;
        *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
        *uint64_t v5 = 0;
        v5[1] = 0;
        if (v7[1]) {
          BOOL v8 = (void *)v7[1];
        }
        else {
          BOOL v8 = v7;
        }
        uint64_t v20 = v2;
        uint64_t v21 = v8;
        unsigned int v22 = v8;
        if (!v8 || (uint64_t v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
        {
          BOOL v13 = v4;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 32));
            std::string::operator=((std::string *)(v8 + 8), (const std::string *)(v4 + 64));
            std::string::operator=((std::string *)(v8 + 11), (const std::string *)(v4 + 88));
            std::string::operator=((std::string *)(v8 + 14), (const std::string *)(v4 + 112));
            std::string::operator=((std::string *)(v8 + 17), (const std::string *)(v4 + 136));
            std::string::operator=((std::string *)(v8 + 20), (const std::string *)(v4 + 160));
            std::string::operator=((std::string *)(v8 + 23), (const std::string *)(v4 + 184));
            __int16 v9 = *((_WORD *)v4 + 104);
            *((unsigned char *)v8 + 210) = v4[210];
            *((_WORD *)v8 + 104) = v9;
            std::string::operator=((std::string *)v8 + 9, (const std::string *)v4 + 9);
            std::string::operator=((std::string *)v8 + 10, (const std::string *)v4 + 10);
            std::string::operator=((std::string *)v8 + 11, (const std::string *)v4 + 11);
            *((_WORD *)v8 + 144) = *((_WORD *)v4 + 144);
            uint64_t v10 = v22;
            leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v22 + 4);
            std::__tree<std::string>::__insert_node_at(v2, v19, leaf_high, v10);
            BOOL v8 = v21;
            unsigned int v22 = v21;
            if (v21) {
              uint64_t v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v21);
            }
            uint64_t v12 = (const char *)*((void *)v4 + 1);
            if (v12)
            {
              do
              {
                BOOL v13 = v12;
                uint64_t v12 = *(const char **)v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                BOOL v13 = (const char *)*((void *)v4 + 2);
                BOOL v14 = *(void *)v13 == (void)v4;
                long long v4 = v13;
              }
              while (!v14);
            }
            if (!v8) {
              break;
            }
            long long v4 = v13;
          }
          while (v13 != v3);
        }
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v20);
        long long v4 = v13;
      }
      if (v4 != v3)
      {
        do
        {
          std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t)&v20, (uint64_t)v2, (long long *)v4 + 2);
          uint64_t v15 = (uint64_t *)v20;
          BOOL v16 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v20 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v19, v16, v15);
          uint64_t v20 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)&v20);
          uint64_t v17 = (const char *)*((void *)v4 + 1);
          if (v17)
          {
            do
            {
              long long v18 = v17;
              uint64_t v17 = *(const char **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              long long v18 = (const char *)*((void *)v4 + 2);
              BOOL v14 = *(void *)v18 == (void)v4;
              long long v4 = v18;
            }
            while (!v14);
          }
          long long v4 = v18;
        }
        while (v18 != v3);
      }
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Schema is of a type which cannot hold properties", a2);
  }
}

void sub_1C5F880E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v2);
  }
  return a1;
}

uint64_t siri::dialogengine::ObjectSchema::SetPropertyRedacted(uint64_t result, const void **a2, char a3)
{
  uint64_t v3 = result + 136;
  uint64_t v4 = *(void *)(result + 136);
  if (v4)
  {
    uint64_t v7 = result + 144;
    uint64_t v8 = result + 136;
    do
    {
      uint64_t result = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
      __int16 v9 = (uint64_t *)(v4 + 8);
      if (!result)
      {
        __int16 v9 = (uint64_t *)v4;
        uint64_t v8 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v8 != v3)
    {
      uint64_t result = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32));
      if ((result & 1) == 0) {
        *(unsigned char *)(v8 + 210) = a3;
      }
    }
  }
  return result;
}

void siri::dialogengine::ObjectSchema::AddProperty(uint64_t **this, const siri::dialogengine::ObjectProperty *a2)
{
  uint64_t v4 = (const std::string *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
    operator delete(v13.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_6;
    }
  }
  else if (*((unsigned char *)&v13.__r_.__value_.__s + 23))
  {
LABEL_6:
    if (*((char *)a2 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else {
      std::string __p = *v4;
    }
    uint64_t v8 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)(this + 16), &v14, (const void **)&__p.__r_.__value_.__l.__data_);
    __int16 v9 = (char *)*v8;
    if (!*v8)
    {
      uint64_t v10 = (uint64_t **)v8;
      __int16 v9 = (char *)operator new(0x128uLL);
      v13.__r_.__value_.__l.__size_ = (std::string::size_type)(this + 17);
      *(std::string *)(v9 + 32) = __p;
      memset(&__p, 0, sizeof(__p));
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 7) = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      *((_OWORD *)v9 + 9) = 0u;
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      *((_OWORD *)v9 + 14) = 0u;
      *((_OWORD *)v9 + 15) = 0u;
      *((_OWORD *)v9 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
      *((_OWORD *)v9 + 17) = 0u;
      *((void *)v9 + 36) = 0;
      *(_WORD *)(v9 + 209) = 257;
      *((void *)v9 + 7) = &unk_1F2127118;
      *(_OWORD *)(v9 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_OWORD *)(v9 + 248) = 0u;
      *(_OWORD *)(v9 + 2siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = 0u;
      *(_OWORD *)(v9 + 274) = 0u;
      v13.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at(this + 16, v14, v10, (uint64_t *)v9);
      v13.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)&v13);
    }
    std::string::operator=((std::string *)(v9 + 64), v4);
    std::string::operator=((std::string *)(v9 + 88), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)(v9 + 112), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)(v9 + 136), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)(v9 + 160), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)(v9 + 184), (const std::string *)((char *)a2 + 128));
    __int16 v11 = *((_WORD *)a2 + 76);
    v9[210] = *((unsigned char *)a2 + 154);
    *((_WORD *)v9 + 104) = v11;
    std::string::operator=((std::string *)v9 + 9, (const std::string *)((char *)a2 + 160));
    std::string::operator=((std::string *)v9 + 10, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)v9 + 11, (const std::string *)((char *)a2 + 208));
    *((_WORD *)v9 + 144) = *((_WORD *)a2 + 116);
    goto LABEL_15;
  }
  std::operator+<char>();
  uint64_t v6 = std::string::append(&__p, "'");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v13, 3u);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F88448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetInputs(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t **a4@<X8>)
{
  std::map<std::string,siri::dialogengine::ObjectInput>::map[abi:ne180100]((uint64_t)a4, (const void ***)(a1 + 152));
  if (!a3)
  {
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(void *)(a1 + 80)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 95))
    {
      return;
    }
    if (a2)
    {
      siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)(a1 + 72), &v15);
      if (v15)
      {
        siri::dialogengine::ObjectSchema::GetInputs(&v13, v15, a2, 0);
        __int16 v9 = v13;
        if (v13 != (const void **)v14)
        {
          do
          {
            std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(a4, (uint64_t)(a4 + 1), v9 + 4, (long long *)v9 + 2);
            uint64_t v10 = (const void **)v9[1];
            if (v10)
            {
              do
              {
                __int16 v11 = (const void ***)v10;
                uint64_t v10 = (const void **)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                __int16 v11 = (const void ***)v9[2];
                BOOL v12 = *v11 == v9;
                __int16 v9 = (const void **)v11;
              }
              while (!v12);
            }
            __int16 v9 = (const void **)v11;
          }
          while (v11 != v14);
        }
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v14[0]);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", v8);
    }
  }
}

void sub_1C5F885A0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::dialogengine::ObjectInput>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t **)a1, v3, v5 + 4, (long long *)v5 + 2);
      uint64_t v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (const void ***)v5[2];
          BOOL v8 = *v7 == v5;
          uint64_t v5 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1C5F88674(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(uint64_t **a1, uint64_t a2, const void **a3, long long *a4)
{
  uint64_t v6 = a2;
  BOOL v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v6 + 32), a3))
    {
      uint64_t v19 = v6;
      uint64_t v20 = v6;
      BOOL v12 = (uint64_t **)&v19;
      if (v6) {
        return;
      }
LABEL_31:
      uint64_t v6 = v20;
      goto LABEL_32;
    }
    BOOL v12 = (uint64_t **)(v6 + 8);
    __int16 v11 = *(uint64_t **)(v6 + 8);
    if (v11)
    {
      std::string v13 = *(const void ***)(v6 + 8);
      do
      {
        uint64_t v14 = v13;
        std::string v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v17 = v6;
      do
      {
        uint64_t v14 = *(const void ***)(v17 + 16);
        BOOL v16 = *v14 == (const void *)v17;
        uint64_t v17 = (uint64_t)v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, v14 + 4))
      {
LABEL_29:
        BOOL v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v20, a3);
        goto LABEL_30;
      }
      __int16 v11 = *v12;
    }
    if (v11)
    {
      uint64_t v20 = (uint64_t)v14;
      BOOL v12 = (uint64_t **)v14;
    }
    else
    {
      uint64_t v20 = v6;
    }
LABEL_30:
    if (*v12) {
      return;
    }
    goto LABEL_31;
  }
  if (*a1 == (uint64_t *)v6)
  {
    uint64_t v10 = v6;
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)v6;
  if (*(void *)v6)
  {
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    uint64_t v15 = v6;
    do
    {
      uint64_t v10 = *(void *)(v15 + 16);
      BOOL v16 = *(void *)v10 == v15;
      uint64_t v15 = v10;
    }
    while (v16);
  }
  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3)) {
    goto LABEL_29;
  }
LABEL_16:
  if (*(void *)v6)
  {
    uint64_t v20 = v10;
    BOOL v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  uint64_t v20 = v6;
  BOOL v12 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t)v18, (uint64_t)a1, a4);
  std::__tree<std::string>::__insert_node_at(a1, v6, v12, v18[0]);
  v18[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0xD8uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t result = std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 1;
  return result;
}

void sub_1C5F888AC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::PropertyBase::PropertyBase((siri::dialogengine::PropertyBase *)&this[1], (const siri::dialogengine::PropertyBase *)((char *)a2 + 24));
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F21270B8;
  HIDWORD(this[7].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 45);
  return this;
}

void sub_1C5F88998(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetInputNames(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::vector<std::string> *a4@<X8>)
{
  siri::dialogengine::ObjectSchema::GetInputs(a1, a2, a3, &v11);
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a4, (std::vector<std::string>::size_type)v12[1]);
  uint64_t v5 = v11;
  if (v11 != (uint64_t *)v12)
  {
    unint64_t end = (unint64_t)a4->__end_;
    do
    {
      long long v7 = (long long *)(v5 + 4);
      if ((std::string *)end >= a4->__end_cap_.__value_)
      {
        unint64_t end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v7);
        end += 24;
      }
      a4->__end_ = (std::vector<std::string>::pointer)end;
      BOOL v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != (uint64_t *)v12);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v12[0]);
}

void sub_1C5F88A88(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(a3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::GetInput(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1 + 160;
  uint64_t v11 = *(void *)(a1 + 160);
  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = a1 + 160;
  do
  {
    BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a1 + 168, (const void **)(v11 + 32), a3);
    uint64_t v14 = (uint64_t *)(v11 + 8);
    if (!v13)
    {
      uint64_t v14 = (uint64_t *)v11;
      uint64_t v12 = v11;
    }
    uint64_t v11 = *v14;
  }
  while (*v14);
  if (v12 == v10 || std::less<std::string>::operator()[abi:ne180100](a1 + 168, a3, (const void **)(v12 + 32)))
  {
LABEL_8:
    if (a4)
    {
LABEL_9:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 160) = 0;
      return;
    }
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(void *)(a1 + 80)) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a1 + 95))
    {
      goto LABEL_9;
    }
    if (!a2)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", a2);
      goto LABEL_9;
    }
    siri::dialogengine::ObjectRegistry::GetObject(&v15, a2, a1 + 72);
    if (!v15)
    {
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      goto LABEL_9;
    }
    siri::dialogengine::ObjectSchema::GetInput(v15, a2, a3, 0);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    siri::dialogengine::PropertyBase::PropertyBase((siri::dialogengine::PropertyBase *)a5, (const siri::dialogengine::PropertyBase *)(v12 + 56));
    *(void *)a5 = &unk_1F21270B8;
    *(_DWORD *)(a5 + 156) = *(_DWORD *)(v12 + 212);
    *(unsigned char *)(a5 + 160) = 1;
  }
}

void sub_1C5F88C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::ResolveInput(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v10 = (std::string *)(a5 + 8);
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_WORD *)(a5 + 152) = 256;
  *(unsigned char *)(a5 + 154) = 1;
  *(void *)a5 = &unk_1F21270B8;
  *(_DWORD *)(a5 + 156) = 0;
  siri::dialogengine::ObjectSchema::GetInput(a1, a2, a3, a4, (uint64_t)&v21);
  if (v31)
  {
    std::string::operator=(v10, &v22);
    std::string::operator=((std::string *)(a5 + 32), &v23);
    std::string::operator=((std::string *)(a5 + 56), &v24);
    std::string::operator=((std::string *)(a5 + 80), &v25);
    std::string::operator=((std::string *)(a5 + 104), &v26);
    std::string::operator=((std::string *)(a5 + 128), &v27);
    *(_WORD *)(a5 + 152) = v28;
    *(unsigned char *)(a5 + 154) = v29;
    *(_DWORD *)(a5 + 156) = v30;
    siri::dialogengine::ObjectSchema::GetProperty(a1, a2, a3, a4, (siri::dialogengine::ObjectProperty *)v16);
    if (!v20)
    {
LABEL_35:
      if (v31) {
        siri::dialogengine::PropertyBase::~PropertyBase(&v21);
      }
      return;
    }
    if (*(char *)(a5 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 32), *(void *)(a5 + 40));
    }
    else {
      std::string __p = *(std::string *)(a5 + 32);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (size) {
        goto LABEL_15;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_15;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v17;
    }
    std::string::operator=((std::string *)(a5 + 32), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_15:
    if (*(char *)(a5 + 79) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 56), *(void *)(a5 + 64));
    }
    else {
      std::string __p = *(std::string *)(a5 + 56);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v12) {
        goto LABEL_22;
      }
    }
    else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
LABEL_22:
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v18;
      }
      std::string::operator=((std::string *)(a5 + 56), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v29) {
      BOOL v13 = v19 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = !v13;
    *(unsigned char *)(a5 + 154) = v14;
    if (v20) {
      siri::dialogengine::ObjectProperty::~ObjectProperty(v16);
    }
    goto LABEL_35;
  }
}

void sub_1C5F88ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a46) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a16);
  }
  if (*(unsigned char *)(v47 - 88)) {
    siri::dialogengine::PropertyBase::~PropertyBase((void **)(v47 - 248));
  }
  siri::dialogengine::PropertyBase::~PropertyBase(v46);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::SetInputs(uint64_t a1, void *a2)
{
  int v2 = (uint64_t **)(a1 + 152);
  if ((void *)(a1 + 152) != a2)
  {
    uint64_t v3 = a2 + 1;
    long long v4 = (void *)*a2;
    if (*(void *)(a1 + 168))
    {
      uint64_t v6 = *(void *)(a1 + 160);
      uint64_t v5 = (void *)(a1 + 160);
      long long v7 = (void *)*(v5 - 1);
      *(v5 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v5;
      *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      if (v7[1]) {
        BOOL v8 = (void *)v7[1];
      }
      else {
        BOOL v8 = v7;
      }
      char v20 = v2;
      uint64_t v21 = v8;
      std::string v22 = v8;
      if (!v8 || (uint64_t v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        BOOL v13 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::string::operator=((std::string *)(v8 + 8), (const std::string *)(v4 + 8));
          std::string::operator=((std::string *)(v8 + 11), (const std::string *)(v4 + 11));
          std::string::operator=((std::string *)(v8 + 14), (const std::string *)(v4 + 14));
          std::string::operator=((std::string *)(v8 + 17), (const std::string *)(v4 + 17));
          std::string::operator=((std::string *)(v8 + 20), (const std::string *)(v4 + 20));
          std::string::operator=((std::string *)(v8 + 23), (const std::string *)(v4 + 23));
          __int16 v9 = *((_WORD *)v4 + 104);
          *((unsigned char *)v8 + 210) = *((unsigned char *)v4 + 210);
          *((_WORD *)v8 + 104) = v9;
          *((_DWORD *)v8 + 53) = *((_DWORD *)v4 + 53);
          uint64_t v10 = v22;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v22 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v19, leaf_high, v10);
          BOOL v8 = v21;
          std::string v22 = v21;
          if (v21) {
            uint64_t v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v21);
          }
          std::string::size_type v12 = (void *)v4[1];
          if (v12)
          {
            do
            {
              BOOL v13 = v12;
              std::string::size_type v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              BOOL v13 = (void *)v4[2];
              BOOL v14 = *v13 == (void)v4;
              long long v4 = v13;
            }
            while (!v14);
          }
          if (!v8) {
            break;
          }
          long long v4 = v13;
        }
        while (v13 != v3);
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v20);
      long long v4 = v13;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t)&v20, (uint64_t)v2, (long long *)v4 + 2);
        uint64_t v15 = (uint64_t *)v20;
        BOOL v16 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v20 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v19, v16, v15);
        char v20 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v20);
        std::string v17 = (void *)v4[1];
        if (v17)
        {
          do
          {
            std::string v18 = v17;
            std::string v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            std::string v18 = (void *)v4[2];
            BOOL v14 = *v18 == (void)v4;
            long long v4 = v18;
          }
          while (!v14);
        }
        long long v4 = v18;
      }
      while (v18 != v3);
    }
  }
}

void sub_1C5F89158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v2);
  }
  return a1;
}

void siri::dialogengine::ObjectSchema::AddInput(uint64_t **this, const siri::dialogengine::ObjectInput *a2)
{
  long long v4 = (const std::string *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
    operator delete(v14.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_6;
    }
  }
  else if (*((unsigned char *)&v14.__r_.__value_.__s + 23))
  {
LABEL_6:
    if (*((char *)a2 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else {
      std::string __p = *v4;
    }
    BOOL v8 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)(this + 19), &v15, (const void **)&__p.__r_.__value_.__l.__data_);
    __int16 v9 = (char *)*v8;
    if (!*v8)
    {
      uint64_t v10 = (uint64_t **)v8;
      __int16 v9 = (char *)operator new(0xD8uLL);
      v14.__r_.__value_.__l.__size_ = (std::string::size_type)(this + 20);
      *((_OWORD *)v9 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::string::size_type v11 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((void *)v9 + 26) = 0;
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 7) = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      *((_OWORD *)v9 + 9) = 0u;
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
      *((_OWORD *)v9 + 12) = 0u;
      *(_WORD *)(v9 + 209) = 257;
      *((void *)v9 + 6) = v11;
      *((void *)v9 + 7) = &unk_1F21270B8;
      v14.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at(this + 19, v15, v10, (uint64_t *)v9);
      v14.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
    }
    std::string::operator=((std::string *)(v9 + 64), v4);
    std::string::operator=((std::string *)(v9 + 88), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)(v9 + 112), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)(v9 + 136), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)(v9 + 160), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)(v9 + 184), (const std::string *)((char *)a2 + 128));
    __int16 v12 = *((_WORD *)a2 + 76);
    v9[210] = *((unsigned char *)a2 + 154);
    *((_WORD *)v9 + 104) = v12;
    *((_DWORD *)v9 + 53) = *((_DWORD *)a2 + 39);
    goto LABEL_15;
  }
  std::operator+<char>();
  uint64_t v6 = std::string::append(&__p, "'");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v14, 3u);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F893E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ObjectSchema::Validate(std::string *this, siri::dialogengine::Context *a2)
{
  if (!a2)
  {
    char v5 = 0;
    return v5 & 1;
  }
  siri::dialogengine::ObjectSchema::GetProperties((uint64_t)this, (uint64_t)a2, 0, &v193);
  siri::dialogengine::ObjectSchema::GetInputs((uint64_t)this, (uint64_t)a2, 0, (uint64_t **)&__s1);
  std::string::size_type v4 = __s1.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__s1.__r_.__value_.__l.__data_ != &__s1.__r_.__value_.__r.__words[1])
  {
    char v5 = 1;
    while (1)
    {
      std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](&__p, (long long *)(v4 + 32));
      if (v187 == 1) {
        break;
      }
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v192, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
      }
      else {
        std::string v192 = v186;
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v192.__r_.__value_.__l.__size_;
        operator delete(v192.__r_.__value_.__l.__data_);
        if (!size)
        {
LABEL_19:
          std::operator+<char>();
          uint64_t v10 = std::string::append(&v190, "' has no type definition in file: ");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v189, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
          }
          else {
            std::string v189 = *this;
          }
          if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v12 = &v189;
          }
          else {
            __int16 v12 = (std::string *)v189.__r_.__value_.__r.__words[0];
          }
          if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v13 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v13 = v189.__r_.__value_.__l.__size_;
          }
LABEL_35:
          std::string v14 = std::string::append(&v191, (const std::string::value_type *)v12, v13);
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v192);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v192.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
          char v5 = 0;
        }
      }
      else if (!*((unsigned char *)&v192.__r_.__value_.__s + 23))
      {
        goto LABEL_19;
      }
LABEL_44:
      siri::dialogengine::PropertyBase::~PropertyBase(&v184);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      BOOL v16 = *(std::string **)(v4 + 8);
      if (v16)
      {
        do
        {
          std::string v17 = v16;
          BOOL v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
        }
        while (v16);
      }
      else
      {
        do
        {
          std::string v17 = *(std::string **)(v4 + 16);
          BOOL v73 = v17->__r_.__value_.__r.__words[0] == v4;
          std::string::size_type v4 = (std::string::size_type)v17;
        }
        while (!v73);
      }
      std::string::size_type v4 = (std::string::size_type)v17;
      if (v17 == (std::string *)&__s1.__r_.__value_.__r.__words[1]) {
        goto LABEL_55;
      }
    }
    for (uint64_t i = v194; i; uint64_t i = (const void **)*i)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v195, (const void **)&__p.__r_.__value_.__l.__data_, i + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v195, i + 4, (const void **)&__p.__r_.__value_.__l.__data_))goto LABEL_44; {
        ++i;
        }
      }
    }
    std::operator+<char>();
    long long v7 = std::string::append(&v190, "' not present in declared properties in file: ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v191.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v189, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else {
      std::string v189 = *this;
    }
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v12 = &v189;
    }
    else {
      __int16 v12 = (std::string *)v189.__r_.__value_.__r.__words[0];
    }
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v189.__r_.__value_.__l.__size_;
    }
    goto LABEL_35;
  }
  char v5 = 1;
LABEL_55:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((void *)__s1.__r_.__value_.__l.__size_);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
LABEL_57:
      if (siri::dialogengine::IsValidTypeName((uint64_t)this)) {
        goto LABEL_67;
      }
      std::operator+<char>();
      std::string v18 = std::string::append(&__s1, "'");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        char v20 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_65:
        operator delete(v20);
        goto LABEL_66;
      }
      goto LABEL_66;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Type name is empty in schema file ('name:' field)");
  siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    char v20 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_65;
  }
LABEL_66:
  char v5 = 0;
LABEL_67:
  int v21 = SHIBYTE(this[3].__r_.__value_.__r.__words[2]);
  if (v21 < 0)
  {
    if (!this[3].__r_.__value_.__l.__size_) {
      goto LABEL_87;
    }
  }
  else if (!*((unsigned char *)&this[3].__r_.__value_.__s + 23))
  {
    goto LABEL_87;
  }
  if (!siri::dialogengine::IsValidTypeName((uint64_t)&this[3]))
  {
    std::operator+<char>();
    std::string v22 = std::string::append(&v191, "' in '");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v192.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    int v24 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v24 >= 0) {
      std::string v25 = this;
    }
    else {
      std::string v25 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v24 >= 0) {
      std::string::size_type v26 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = this->__r_.__value_.__l.__size_;
    }
    std::string v27 = std::string::append(&v192, (const std::string::value_type *)v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    char v29 = std::string::append(&__s1, "'");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v192.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    char v5 = 0;
    LOBYTE(v2siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *((unsigned char *)&this[3].__r_.__value_.__s + 23);
  }
LABEL_87:
  if ((v21 & 0x80) != 0)
  {
    if (this[3].__r_.__value_.__l.__size_) {
      goto LABEL_89;
    }
  }
  else if ((_BYTE)v21)
  {
LABEL_89:
    if (LODWORD(this[5].__r_.__value_.__l.__data_) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema must not specify a base class");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
    }
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)&this[3].__r_.__value_.__l.__data_, (uint64_t *)&__p);
    char v31 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    v172 = v31;
    if (!v32)
    {
      std::operator+<char>();
      unsigned int v33 = std::string::append(&v191, "' does not exist in '");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v192.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      int v35 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v35 >= 0) {
        unsigned int v36 = this;
      }
      else {
        unsigned int v36 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (v35 >= 0) {
        std::string::size_type v37 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = this->__r_.__value_.__l.__size_;
      }
      unsigned int v38 = std::string::append(&v192, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      unsigned int v40 = std::string::append(&__s1, "'");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      std::string::size_type v32 = 0;
      char v5 = 0;
    }
    goto LABEL_113;
  }
  v172 = 0;
  std::string::size_type v32 = 0;
LABEL_113:
  std::string::size_type v42 = this[5].__r_.__value_.__l.__size_;
  if ((std::string::size_type *)v42 != &this[5].__r_.__value_.__r.__words[2])
  {
    uint64_t v173 = v32;
    unsigned int v43 = &this[6].__r_.__value_.__s.__data_[16];
    do
    {
      std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100](&__p, (long long *)(v42 + 32));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v192, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v192 = __p;
      }
      std::string::size_type v44 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v44 = v192.__r_.__value_.__l.__size_;
      }
      if (v44)
      {
        uint64_t IsValidVariableName = siri::dialogengine::IsValidVariableName((uint64_t)&v192);
        if (IsValidVariableName) {
          goto LABEL_140;
        }
        std::operator+<char>();
        std::string v46 = std::string::append(&v189, "' in '");
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v190.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        int v48 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v48 >= 0) {
          std::string::size_type v49 = this;
        }
        else {
          std::string::size_type v49 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v48 >= 0) {
          std::string::size_type v50 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v50 = this->__r_.__value_.__l.__size_;
        }
        unsigned int v51 = std::string::append(&v190, (const std::string::value_type *)v49, v50);
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v191.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        int v53 = std::string::append(&v191, "' (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        uint64_t IsValidVariableName = siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v191.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v190.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        {
          char v55 = (void *)v189.__r_.__value_.__r.__words[0];
LABEL_138:
          operator delete(v55);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Property name is empty in schema file");
        uint64_t IsValidVariableName = siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          char v55 = (void *)__s1.__r_.__value_.__r.__words[0];
          goto LABEL_138;
        }
      }
      char v5 = 0;
LABEL_140:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string __s1 = __s;
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v56 = __s1.__r_.__value_.__l.__size_;
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (!v56) {
          goto LABEL_221;
        }
      }
      else if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        goto LABEL_221;
      }
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__s1, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
      }
      else {
        std::string __s1 = v186;
      }
      BOOL IsValidSemanticConceptType = siri::dialogengine::IsValidSemanticConceptType(IsValidVariableName, (uint64_t)&__s1);
      BOOL v58 = IsValidSemanticConceptType;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v58) {
          goto LABEL_169;
        }
      }
      else if (IsValidSemanticConceptType)
      {
        goto LABEL_169;
      }
      std::operator+<char>();
      uint64_t v59 = std::string::append(&v189, "' in '");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v190.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      int v61 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v61 >= 0) {
        uint64_t v62 = this;
      }
      else {
        uint64_t v62 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (v61 >= 0) {
        std::string::size_type v63 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = this->__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::string::append(&v190, (const std::string::value_type *)v62, v63);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v191.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      int v66 = std::string::append(&v191, "' is defined as a semantic concept but is not a string (or string array) type");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v189.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
LABEL_169:
      int v68 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v68 < 0)
      {
        if (this->__r_.__value_.__l.__size_ != 19) {
          goto LABEL_181;
        }
        int v69 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else
      {
        int v69 = this;
        if (v68 != 19) {
          goto LABEL_181;
        }
      }
      std::string::size_type v70 = v69->__r_.__value_.__r.__words[0];
      std::string::size_type v71 = v69->__r_.__value_.__l.__size_;
      uint64_t v72 = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 3);
      BOOL v73 = v70 == 0x502E676F6C616964 && v71 == 0x6E61486E6F737265;
      if (!v73 || v72 != 0x656C646E61486E6FLL) {
        goto LABEL_181;
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string __s1 = __s;
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__s1.__r_.__value_.__l.__size_ != 19)
        {
          operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_181:
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string __s1 = __s;
          }
          BOOL IsValidSemanticConcept = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
          BOOL v76 = IsValidSemanticConcept;
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__s1.__r_.__value_.__l.__data_);
            if (v76) {
              goto LABEL_221;
            }
LABEL_188:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v180, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v180 = __s;
            }
            long long v77 = std::string::insert(&v180, 0, "Invalid semantic concept category '");
            long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v181.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            char v79 = std::string::append(&v181, "'. No dialog metadata found for property '");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v182.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v81 = &v192;
            }
            else {
              char v81 = (std::string *)v192.__r_.__value_.__r.__words[0];
            }
            if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v82 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v82 = v192.__r_.__value_.__l.__size_;
            }
            uint64_t v83 = std::string::append(&v182, (const std::string::value_type *)v81, v82);
            long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v189.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            int v85 = std::string::append(&v189, "' in '");
            long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v190.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            int v87 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v87 >= 0) {
              std::string v88 = this;
            }
            else {
              std::string v88 = (std::string *)this->__r_.__value_.__r.__words[0];
            }
            if (v87 >= 0) {
              std::string::size_type v89 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v89 = this->__r_.__value_.__l.__size_;
            }
            std::string v90 = std::string::append(&v190, (const std::string::value_type *)v88, v89);
            long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v191.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            uint64_t v92 = std::string::append(&v191, "'");
            long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v93;
            v92->__r_.__value_.__l.__size_ = 0;
            v92->__r_.__value_.__r.__words[2] = 0;
            v92->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v191.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v190.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v189.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v182.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v181.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            {
              char v94 = (void *)v180.__r_.__value_.__r.__words[0];
              goto LABEL_219;
            }
            goto LABEL_220;
          }
          if (!IsValidSemanticConcept) {
            goto LABEL_188;
          }
          goto LABEL_221;
        }
        BOOL v130 = *(void *)__s1.__r_.__value_.__l.__data_ != 0x7079546C69616D65
            || *(void *)(__s1.__r_.__value_.__r.__words[0] + 8) != 0x54656E6F68707C65
            || *(void *)(__s1.__r_.__value_.__r.__words[0] + 11) != 0x65707954656E6F68;
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v130) {
          goto LABEL_181;
        }
      }
      else
      {
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) != 19) {
          goto LABEL_181;
        }
        BOOL v126 = __s1.__r_.__value_.__r.__words[0] == 0x7079546C69616D65
            && __s1.__r_.__value_.__l.__size_ == 0x54656E6F68707C65;
        if (!v126
          || *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 3) != 0x65707954656E6F68)
        {
          goto LABEL_181;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "emailType");
      BOOL v131 = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "phoneType");
      BOOL v132 = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (!v131 && !v132)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Invalid semantic concept category for special case of 'dialog.PersonHandle'");
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          char v94 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_219:
          operator delete(v94);
        }
LABEL_220:
        char v5 = 0;
      }
LABEL_221:
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v192.__r_.__value_.__l.__size_ != 8) {
          goto LABEL_227;
        }
        char v95 = (std::string *)v192.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) != 8) {
          goto LABEL_227;
        }
        char v95 = &v192;
      }
      if (v95->__r_.__value_.__r.__words[0] == 0x676E697274536F74)
      {
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__s1, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
        }
        else {
          std::string __s1 = v186;
        }
        size_t v110 = strlen(siri::dialogengine::TYPE_STRING);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v110 != __s1.__r_.__value_.__l.__size_)
          {
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_337:
            std::operator+<char>();
            char v133 = std::string::append(&v191, "'");
            long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v134;
            v133->__r_.__value_.__l.__size_ = 0;
            v133->__r_.__value_.__r.__words[2] = 0;
            v133->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__s1);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v191.__r_.__value_.__l.__data_);
            }
            char v5 = 0;
            goto LABEL_342;
          }
          if (v110 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          std::string v111 = (void *)__s1.__r_.__value_.__r.__words[0];
          int v112 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_STRING, v110);
          operator delete(v111);
          if (v112) {
            goto LABEL_337;
          }
        }
        else if (v110 != HIBYTE(__s1.__r_.__value_.__r.__words[2]) {
               || memcmp(&__s1, siri::dialogengine::TYPE_STRING, v110))
        }
        {
          goto LABEL_337;
        }
      }
LABEL_227:
      if (v173)
      {
        siri::dialogengine::ObjectSchema::GetProperty(v173, (const char *)a2, (const void **)&v192.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__s1);
        if (v179)
        {
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v191, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
          }
          else {
            std::string v191 = v177;
          }
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v190, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
          }
          else {
            std::string v190 = v186;
          }
          char v96 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v97 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v97 = v191.__r_.__value_.__l.__size_;
          }
          std::string::size_type v98 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          int v99 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v98 = v190.__r_.__value_.__l.__size_;
          }
          if (v97 == v98)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v100 = &v190;
            }
            else {
              std::string v100 = (std::string *)v190.__r_.__value_.__r.__words[0];
            }
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
            {
              BOOL v106 = memcmp(v191.__r_.__value_.__l.__data_, v100, v191.__r_.__value_.__l.__size_) != 0;
              if ((v99 & 0x80000000) == 0) {
                goto LABEL_255;
              }
            }
            else if (*((unsigned char *)&v191.__r_.__value_.__s + 23))
            {
              uint64_t v101 = HIBYTE(v191.__r_.__value_.__r.__words[2]) - 1;
              uint64_t v102 = &v191;
              do
              {
                int v104 = v102->__r_.__value_.__s.__data_[0];
                uint64_t v102 = (std::string *)((char *)v102 + 1);
                int v103 = v104;
                int v105 = v100->__r_.__value_.__s.__data_[0];
                std::string v100 = (std::string *)((char *)v100 + 1);
                BOOL v106 = v103 != v105;
              }
              while (v103 == v105 && v101-- != 0);
              if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_255:
                if ((v96 & 0x80) == 0) {
                  goto LABEL_256;
                }
LABEL_260:
                operator delete(v191.__r_.__value_.__l.__data_);
                if (v106) {
                  goto LABEL_261;
                }
                goto LABEL_302;
              }
            }
            else
            {
              BOOL v106 = 0;
              if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_255;
              }
            }
          }
          else
          {
            BOOL v106 = 1;
            if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_255;
            }
          }
          operator delete(v190.__r_.__value_.__l.__data_);
          if ((*((unsigned char *)&v191.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_260;
          }
LABEL_256:
          if (v106)
          {
LABEL_261:
            std::operator+<char>();
            long long v108 = std::string::append(&v180, "' has type '");
            long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
            v181.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v109;
            v108->__r_.__value_.__l.__size_ = 0;
            v108->__r_.__value_.__r.__words[2] = 0;
            v108->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v174, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
            }
            else {
              std::string v174 = v186;
            }
            if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v113 = &v174;
            }
            else {
              char v113 = (std::string *)v174.__r_.__value_.__r.__words[0];
            }
            if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v114 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v114 = v174.__r_.__value_.__l.__size_;
            }
            char v115 = std::string::append(&v181, (const std::string::value_type *)v113, v114);
            long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
            v182.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v116;
            v115->__r_.__value_.__l.__size_ = 0;
            v115->__r_.__value_.__r.__words[2] = 0;
            v115->__r_.__value_.__r.__words[0] = 0;
            char v117 = std::string::append(&v182, "' that differs from the same property in the base type for '");
            long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
            v189.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v118;
            v117->__r_.__value_.__l.__size_ = 0;
            v117->__r_.__value_.__r.__words[2] = 0;
            v117->__r_.__value_.__r.__words[0] = 0;
            int v119 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v119 >= 0) {
              std::string::size_type v120 = this;
            }
            else {
              std::string::size_type v120 = (std::string *)this->__r_.__value_.__r.__words[0];
            }
            if (v119 >= 0) {
              std::string::size_type v121 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v121 = this->__r_.__value_.__l.__size_;
            }
            std::string::size_type v122 = std::string::append(&v189, (const std::string::value_type *)v120, v121);
            long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
            v190.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v123;
            v122->__r_.__value_.__l.__size_ = 0;
            v122->__r_.__value_.__r.__words[2] = 0;
            v122->__r_.__value_.__r.__words[0] = 0;
            char v124 = std::string::append(&v190, "'");
            long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
            v191.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v125;
            v124->__r_.__value_.__l.__size_ = 0;
            v124->__r_.__value_.__r.__words[2] = 0;
            v124->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v191);
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v191.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v190.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v189.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v182.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v174.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v181.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v180.__r_.__value_.__l.__data_);
            }
            char v5 = 0;
          }
LABEL_302:
          if (v179) {
            siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__s1.__r_.__value_.__l.__data_);
          }
        }
      }
LABEL_342:
      std::string v135 = (long long *)this[6].__r_.__value_.__l.__size_;
      if (v135 != (long long *)v43)
      {
        while (1)
        {
          std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](&__s1, v135 + 2);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v191, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
          }
          else {
            std::string v191 = v177;
          }
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v136 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v136 = v192.__r_.__value_.__l.__size_;
          }
          std::string::size_type v137 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          int v138 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v137 = v191.__r_.__value_.__l.__size_;
          }
          if (v136 == v137) {
            break;
          }
          BOOL v148 = 0;
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_383;
          }
LABEL_364:
          if (v178) {
            BOOL v149 = 0;
          }
          else {
            BOOL v149 = v148;
          }
          if (v149)
          {
            std::operator+<char>();
            long long v150 = std::string::append(&v190, "', but you have not defined an access_mode to specify the intended behavior");
            long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
            v191.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v151;
            v150->__r_.__value_.__l.__size_ = 0;
            v150->__r_.__value_.__r.__words[2] = 0;
            v150->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v191);
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v191.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v190.__r_.__value_.__l.__data_);
            }
            char v5 = 0;
          }
          siri::dialogengine::PropertyBase::~PropertyBase(&v176);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s1.__r_.__value_.__l.__data_);
          }
          std::string::size_type v152 = (char *)*((void *)v135 + 1);
          if (v152)
          {
            do
            {
              v153 = v152;
              std::string::size_type v152 = *(char **)v152;
            }
            while (v152);
          }
          else
          {
            do
            {
              v153 = (char *)*((void *)v135 + 2);
              BOOL v73 = *(void *)v153 == (void)v135;
              std::string v135 = (long long *)v153;
            }
            while (!v73);
          }
          std::string v135 = (long long *)v153;
          if (v153 == v43) {
            goto LABEL_388;
          }
        }
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v139 = &v191;
        }
        else {
          long long v139 = (std::string *)v191.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v192.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v148 = memcmp(v192.__r_.__value_.__l.__data_, v139, v192.__r_.__value_.__l.__size_) == 0;
          if ((v138 & 0x80000000) == 0) {
            goto LABEL_364;
          }
        }
        else if (*((unsigned char *)&v192.__r_.__value_.__s + 23))
        {
          uint64_t v140 = HIBYTE(v192.__r_.__value_.__r.__words[2]) - 1;
          char v141 = &v192;
          do
          {
            int v143 = v141->__r_.__value_.__s.__data_[0];
            char v141 = (std::string *)((char *)v141 + 1);
            int v142 = v143;
            int v145 = v139->__r_.__value_.__s.__data_[0];
            long long v139 = (std::string *)((char *)v139 + 1);
            int v144 = v145;
            BOOL v147 = v140-- != 0;
            BOOL v148 = v142 == v144;
          }
          while (v142 == v144 && v147);
          if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_364;
          }
        }
        else
        {
          BOOL v148 = 1;
          if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_364;
          }
        }
LABEL_383:
        operator delete(v191.__r_.__value_.__l.__data_);
        goto LABEL_364;
      }
LABEL_388:
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::ObjectProperty::~ObjectProperty(&v184);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      long long v154 = *(siri::dialogengine::ObjectSchema **)(v42 + 8);
      if (v154)
      {
        do
        {
          BOOL v155 = v154;
          long long v154 = *(siri::dialogengine::ObjectSchema **)v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          BOOL v155 = *(siri::dialogengine::ObjectSchema **)(v42 + 16);
          BOOL v73 = *(void *)v155 == v42;
          std::string::size_type v42 = (std::string::size_type)v155;
        }
        while (!v73);
      }
      std::string::size_type v42 = (std::string::size_type)v155;
    }
    while (v155 != (siri::dialogengine::ObjectSchema *)&this[5].__r_.__value_.__r.__words[2]);
  }
  if (LODWORD(this[5].__r_.__value_.__l.__data_) == 2)
  {
    if (this[6].__r_.__value_.__r.__words[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema may not hold properites");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
    }
    if (this[7].__r_.__value_.__r.__words[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema may not hold Inputs");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
    }
    *(_OWORD *)&__s1.__r_.__value_.__r.__words[1] = 0uLL;
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1.__r_.__value_.__l.__size_;
    std::string::size_type v156 = this[7].__r_.__value_.__l.__size_;
    if ((std::string::size_type *)v156 == &this[7].__r_.__value_.__r.__words[2])
    {
      v169 = 0;
    }
    else
    {
      do
      {
        std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::pair[abi:ne180100](&__p, (long long *)(v156 + 32));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v192, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v192 = __p;
        }
        std::string::size_type v157 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v157 = v192.__r_.__value_.__l.__size_;
        }
        if (!v157)
        {
          std::string::basic_string[abi:ne180100]<0>(&v191, "Enumerant name is empty in schema file");
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v191);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          char v5 = 0;
        }
        if (HIDWORD(this[5].__r_.__value_.__r.__words[0]) == 2)
        {
          if (v185 == 2) {
            int v158 = v186.__r_.__value_.__r.__words[1];
          }
          else {
            int v158 = 0;
          }
          LODWORD(v189.__r_.__value_.__l.__data_) = v158;
          std::string::size_type v159 = __s1.__r_.__value_.__l.__size_;
          if (__s1.__r_.__value_.__l.__size_)
          {
            v160 = (std::string *)&__s1.__r_.__value_.__r.__words[1];
            do
            {
              std::string::size_type v161 = v159;
              v162 = v160;
              int v163 = *(_DWORD *)(v159 + 28);
              v164 = (std::string::size_type *)(v159 + 8);
              if (v163 >= v158)
              {
                v164 = (std::string::size_type *)v161;
                v160 = (std::string *)v161;
              }
              std::string::size_type v159 = *v164;
            }
            while (v159);
            if (v160 != (std::string *)&__s1.__r_.__value_.__r.__words[1])
            {
              if (v163 < v158) {
                std::string::size_type v161 = (std::string::size_type)v162;
              }
              if (v158 >= *(_DWORD *)(v161 + 28))
              {
                std::to_string(&v190, v158);
                long long v165 = std::string::insert(&v190, 0, "Non-unique integer enum value: ");
                long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
                v191.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v166;
                v165->__r_.__value_.__l.__size_ = 0;
                v165->__r_.__value_.__r.__words[2] = 0;
                v165->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v191);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v191.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v190.__r_.__value_.__l.__data_);
                }
                char v5 = 0;
              }
            }
          }
          std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&__s1, (int *)&v189, &v189);
        }
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v192.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(&v184);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v167 = *(siri::dialogengine::ObjectSchema **)(v156 + 8);
        if (v167)
        {
          do
          {
            v168 = v167;
            uint64_t v167 = *(siri::dialogengine::ObjectSchema **)v167;
          }
          while (v167);
        }
        else
        {
          do
          {
            v168 = *(siri::dialogengine::ObjectSchema **)(v156 + 16);
            BOOL v73 = *(void *)v168 == v156;
            std::string::size_type v156 = (std::string::size_type)v168;
          }
          while (!v73);
        }
        std::string::size_type v156 = (std::string::size_type)v168;
      }
      while (v168 != (siri::dialogengine::ObjectSchema *)&this[7].__r_.__value_.__r.__words[2]);
      v169 = (void *)__s1.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&__s1, v169);
    long long v170 = v172;
  }
  else
  {
    long long v170 = v172;
    if (this[8].__r_.__value_.__r.__words[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum values may be held only by schema of type enum");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v5 = 0;
    }
  }
  if (v170) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v170);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v194);
  return v5 & 1;
}

void sub_1C5F8AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v66 - 121) < 0) {
    operator delete(*(void **)(v66 - 144));
  }
  std::pair<std::string const,siri::dialogengine::ObjectProperty>::~pair((uint64_t)&a66);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*(void **)(v66 - 104));
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectInput>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectProperty>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ObjectEnumerant::ObjectEnumerant((siri::dialogengine::ObjectEnumerant *)&this[1], (const siri::dialogengine::ObjectEnumerant *)((char *)a2 + 24));
  return this;
}

void sub_1C5F8B1C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::ObjectRegistry::RegisterObject(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v4 = a1;
  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v44, (const siri::dialogengine::RequestInfo *)(a1 + 8));
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v46, (uint64_t)v44[1], v45, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v45 - (unint64_t)v44[1]) >> 5));
    siri::dialogengine::RequestInfo::~RequestInfo(v44);
    if (v47 != v46) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::GetTemplateDirs((uint64_t)&__p, 1, (uint64_t)v44);
  std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v46, (std::string *)v44[0], (std::string *)v44[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v44[1] - (char *)v44[0]) >> 5));
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_7:
  siri::dialogengine::GetRegistryObjects(v6);
  siri::dialogengine::GetObjectsMutexRef(v7);
  std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  long long v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>((const void **)a2);
  if (v8 != &qword_1EA3D7B28)
  {
    __int16 v9 = v8;
    std::operator+<char>();
    uint64_t v10 = std::string::append(&__p, "\"");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v45 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string::size_type v44 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v44);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = v9[8];
    *a3 = v9[7];
    a3[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
    goto LABEL_76;
  }
  std::operator+<char>();
  std::string::size_type v13 = std::string::append(&__p, "\"");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  uint64_t v45 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v44 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)v44);
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::FindSchemaFile(&v46, a2, (uint64_t)&__p);
  if (!siri::dialogengine::FileExists((uint64_t *)&__p))
  {
    std::operator+<char>();
    std::string v18 = std::string::append(&v40, "' for type: '");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      int v21 = (const std::string::value_type *)a2;
    }
    else {
      int v21 = *(const std::string::value_type **)a2;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 8);
    }
    long long v23 = std::string::append(&v41, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string v25 = std::string::append(&v42, "'");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    uint64_t v45 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string::size_type v44 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)v44, 3u);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_74;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "catschema.bin");
  BOOL v15 = siri::dialogengine::StringEndsWith(&__p, (unsigned __int8 *)v44);
  BOOL v16 = v15;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(v44[0]);
    if (v16) {
      goto LABEL_22;
    }
LABEL_39:
    std::string::basic_string[abi:ne180100]<0>(v44, "");
    siri::dialogengine::ParseCATSchemaYAML(v4, &__p, (std::string *)a2);
  }
  if (!v15) {
    goto LABEL_39;
  }
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(v44, "");
  siri::dialogengine::ParseCATSchemaBinary(&v42);
  long long v27 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(v44[0]);
    if ((void)v27)
    {
LABEL_42:
      siri::dialogengine::GetObjectsMutexRef(v17);
      std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
      uint64_t v28 = qword_1EA3D7B28;
      if (qword_1EA3D7B28)
      {
        char v29 = &qword_1EA3D7B28;
        while (1)
        {
          while (1)
          {
            long long v30 = (uint64_t *)v28;
            char v31 = (const void **)(v28 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D7B30, (const void **)a2, (const void **)(v28 + 32)))break; {
            uint64_t v28 = *v30;
            }
            char v29 = v30;
            if (!*v30) {
              goto LABEL_54;
            }
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D7B30, v31, (const void **)a2)) {
            break;
          }
          char v29 = v30 + 1;
          uint64_t v28 = v30[1];
          if (!v28) {
            goto LABEL_54;
          }
        }
        std::string::size_type v32 = (void *)*v29;
        if (*v29)
        {
LABEL_60:
          if (*((void *)&v27 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v35 = (std::__shared_weak_count *)v32[8];
          *(_OWORD *)(v32 + 7) = v27;
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          std::operator+<char>();
          unsigned int v36 = std::string::append(&v42, "\"");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          uint64_t v45 = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string::size_type v44 = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)v44);
          if (SHIBYTE(v45) < 0) {
            operator delete(v44[0]);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          unsigned int v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>((const void **)a2);
          if (v38 == &qword_1EA3D7B28)
          {
            *a3 = 0;
            a3[1] = 0;
          }
          else
          {
            uint64_t v39 = v38[8];
            *a3 = v38[7];
            a3[1] = v39;
            if (v39) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
            }
          }
          std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
          if (!*((void *)&v27 + 1)) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }
      }
      else
      {
        char v29 = &qword_1EA3D7B28;
        long long v30 = &qword_1EA3D7B28;
      }
LABEL_54:
      std::string::size_type v32 = operator new(0x48uLL);
      v44[0] = v32;
      v44[1] = &qword_1EA3D7B28;
      LOBYTE(v45) = 0;
      unsigned int v33 = (std::string *)(v32 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v32[6] = *(void *)(a2 + 16);
      }
      v32[7] = 0;
      void v32[8] = 0;
      LOBYTE(v45) = 1;
      void *v32 = 0;
      v32[1] = 0;
      std::string v32[2] = v30;
      *char v29 = (uint64_t)v32;
      long long v34 = v32;
      if (*(void *)siri::dialogengine::GetRegistryObjects(void)::objectRegistry)
      {
        siri::dialogengine::GetRegistryObjects(void)::objectRegistry = *(void *)siri::dialogengine::GetRegistryObjects(void)::objectRegistry;
        long long v34 = (uint64_t *)*v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EA3D7B28, v34);
      ++qword_1EA3D7B30;
      v44[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v44);
      goto LABEL_60;
    }
  }
  else if (v42.__r_.__value_.__r.__words[0])
  {
    goto LABEL_42;
  }
  *a3 = 0;
  a3[1] = 0;
  if (*((void *)&v27 + 1)) {
LABEL_73:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
LABEL_74:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_76:
  v44[0] = &v46;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
}

void sub_1C5F8B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a35);
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v41 - 104);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetRegistryObjects(siri::dialogengine *this)
{
  {
    qword_1EA3D7B30 = 0;
    qword_1EA3D7B28 = 0;
    siri::dialogengine::GetRegistryObjects(void)::objectRegistry = (uint64_t)&qword_1EA3D7B28;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>::~map[abi:ne180100], &siri::dialogengine::GetRegistryObjects(void)::objectRegistry, &dword_1C5C1E000);
  }
}

void siri::dialogengine::GetObjectsMutexRef(siri::dialogengine *this)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex, &dword_1C5C1E000);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>(const void **a1)
{
  uint64_t v1 = qword_1EA3D7B28;
  if (!qword_1EA3D7B28) {
    return &qword_1EA3D7B28;
  }
  uint64_t v3 = &qword_1EA3D7B28;
  do
  {
    BOOL v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D7B30, (const void **)(v1 + 32), a1);
    char v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      char v5 = (uint64_t *)v1;
      uint64_t v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EA3D7B28
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D7B30, a1, (const void **)v3 + 4))
  {
    return &qword_1EA3D7B28;
  }
  return v3;
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void siri::dialogengine::ObjectRegistry::GetObject(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *a2, (std::string::size_type)a2[1]);
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  if (siri::dialogengine::IsArrayType(&v14))
  {
    siri::dialogengine::GetArrayElementType((uint64_t)&v14, &v13);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    std::string v14 = v13;
    if (*((char *)a2 + 23) >= 0) {
      long long v7 = (uint64_t *)a2;
    }
    else {
      long long v7 = (uint64_t *)*a2;
    }
    long long v8 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v8 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Looking up a schema file for an array type (%s). Assuming %s instead.", v6, v7, v8);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::ObjectRegistry::RegisterObject(a1, (uint64_t)&v14, a3);
    if (a1)
    {
      uint64_t v10 = *a3;
      if (*a3)
      {
        uint64_t v11 = *(void *)(a1 + 3448);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 3456);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(char *)(v10 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
        }
        else {
          std::string v13 = *(std::string *)(v10 + 24);
        }
        siri::dialogengine::TraceWriter::CopySchemaFile(v11, (const void **)&v13.__r_.__value_.__l.__data_);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F8BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  long long v26 = *(std::__shared_weak_count **)(v23 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectRegistry::Preload(siri::dialogengine::ObjectRegistry *this, const siri::dialogengine::UpdatableDir *a2)
{
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v13);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  siri::dialogengine::UpdatableDir::ListDir((uint64_t)this, (uint64_t)&__p, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::vector<std::string>::pointer begin = v12.__begin_;
  std::vector<std::string>::pointer end = v12.__end_;
  while (begin != end)
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v5 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "catschema");
    if (siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v10))
    {
      BOOL HasExtension = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "catschema.bin");
      BOOL HasExtension = siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v9);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if (HasExtension)
      {
LABEL_15:
        siri::dialogengine::BaseName((uint64_t)&__p, &v9);
        siri::dialogengine::RemoveExtension((uint64_t)&v9, &v10);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::ObjectRegistry::GetObject((uint64_t)v13, (const std::string::value_type **)&v10.__r_.__value_.__l.__data_, &v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v9);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (HasExtension)
    {
      goto LABEL_15;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++begin;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v13);
}

void sub_1C5F8BF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectRegistry::Clear(siri::dialogengine::ObjectRegistry *this)
{
  siri::dialogengine::GetObjectsMutexRef(this);
  std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::GetRegistryObjects(v1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)qword_1EA3D7B28);
  siri::dialogengine::GetRegistryObjects(void)::objectRegistry = (uint64_t)&qword_1EA3D7B28;
  qword_1EA3D7B30 = 0;
  qword_1EA3D7B28 = 0;
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::ClearSearchPathCaches(v2);
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    __assert_rtn("OnMapEnd", "nodebuilder.cpp", 76, "m_mapDepth > 0");
  }
  *((void *)this + 13) = v1 - 1;
  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  int v2 = (char *)*((void *)this + 4);
  uint64_t v1 = (char *)*((void *)this + 5);
  if (v2 == v1) {
    __assert_rtn("Pop", "nodebuilder.cpp", 100, "!m_stack.empty()");
  }
  if (v1 - v2 == 8)
  {
    *((void *)this + 3) = *(void *)v2;
    *((void *)this + 5) = v1 - 8;
    return;
  }
  uint64_t v6 = (YAML::detail::node *)*((void *)v1 - 1);
  BOOL v4 = v1 - 8;
  long long v5 = v6;
  *((void *)this + 5) = v4;
  uint64_t v7 = (YAML::detail::node *)*((void *)v4 - 1);
  long long v8 = *(uint64_t **)v7;
  uint64_t v9 = **(void **)v7;
  if (!*(unsigned char *)v9) {
    goto LABEL_30;
  }
  int v10 = *(_DWORD *)(v9 + 16);
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        std::vector<std::string> v12 = *(uint64_t **)v7;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = *v12;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v13 = *v8;
      }
      YAML::detail::node_data::push_back(v13, (uint64_t)v5);
      if (v11)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      YAML::detail::node::add_dependency(v5, v7);
      if (v11)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      return;
    }
LABEL_30:
    __assert_rtn("Pop", "nodebuilder.cpp", 124, "false");
  }
  uint64_t v14 = *((void *)this + 11);
  if (*((void *)this + 10) == v14) {
    __assert_rtn("Pop", "nodebuilder.cpp", 115, "!m_keys.empty()");
  }
  if (*(unsigned char *)(v14 - 8))
  {
    BOOL v15 = *(YAML::detail::node **)(v14 - 16);
    uint64_t v16 = *((void *)this + 1);
    std::string v17 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string v18 = *(YAML::detail::node_data ***)v7;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v19 = *v18;
      uint64_t v20 = v16;
      int v21 = v17;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v19 = (YAML::detail::node_data *)*v8;
      uint64_t v20 = *((void *)this + 1);
      int v21 = 0;
    }
    YAML::detail::node_data::insert(v19, v15, v5, &v20);
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    YAML::detail::node::add_dependency(v15, v7);
    YAML::detail::node::add_dependency(v5, v7);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    *((void *)this + 11) -= 16;
  }
  else
  {
    *(unsigned char *)(v14 - 8) = 1;
  }
}

void sub_1C5F8C2F0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::OnMapStart(uint64_t a1)
{
}

void YAML::NodeBuilder::Push(uint64_t a1)
{
}

void YAML::NodeBuilder::RegisterAnchor(YAML::NodeBuilder *this, uint64_t a2, YAML::detail::node *a3)
{
  if (a2)
  {
    uint64_t v5 = *((void *)this + 7);
    uint64_t v6 = (void *)*((void *)this + 8);
    if (a2 != ((uint64_t)v6 - v5) >> 3) {
      __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
    }
    unint64_t v8 = *((void *)this + 9);
    if ((unint64_t)v6 >= v8)
    {
      if ((unint64_t)(a2 + 1) >> 61) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = v8 - v5;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(a2 + 1)) {
        uint64_t v11 = a2 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (void *)(v12 + 8 * a2);
      unint64_t v15 = v12 + 8 * v13;
      *uint64_t v14 = a3;
      uint64_t v9 = v14 + 1;
      std::string v17 = (char *)*((void *)this + 7);
      uint64_t v16 = (char *)*((void *)this + 8);
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *--uint64_t v14 = v18;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)*((void *)this + 7);
      }
      *((void *)this + 7) = v14;
      *((void *)this + 8) = v9;
      *((void *)this + 9) = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      void *v6 = a3;
      uint64_t v9 = v6 + 1;
    }
    *((void *)this + 8) = v9;
  }
}

void YAML::NodeBuilder::Push(YAML::NodeBuilder *this, YAML::detail::node *a2)
{
  BOOL v4 = (void *)*((void *)this + 4);
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v4 == v5 || (uint64_t v6 = **(void **)*(v5 - 1), !*(unsigned char *)v6) || *(_DWORD *)(v6 + 16) != 4)
  {
    unint64_t v12 = *((void *)this + 6);
    if ((unint64_t)v5 >= v12)
    {
      uint64_t v14 = v5 - v4;
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_57;
      }
      uint64_t v15 = v12 - (void)v4;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      long long v19 = (void *)(v17 + 8 * v14);
      unint64_t v20 = v17 + 8 * v18;
      void *v19 = a2;
      uint64_t v13 = v19 + 1;
      std::string::size_type v22 = (char *)*((void *)this + 4);
      int v21 = (char *)*((void *)this + 5);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--long long v19 = v23;
        }
        while (v21 != v22);
        int v21 = (char *)*((void *)this + 4);
      }
      *((void *)this + 4) = v19;
      *((void *)this + 5) = v13;
      *((void *)this + 6) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v5 = a2;
      uint64_t v13 = v5 + 1;
    }
    *((void *)this + 5) = v13;
    return;
  }
  uint64_t v8 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 11);
  unint64_t v9 = *((void *)this + 13);
  unint64_t v10 = *((void *)this + 6);
  if ((unint64_t)v5 >= v10)
  {
    uint64_t v24 = v5 - v4;
    if (!((unint64_t)(v24 + 1) >> 61))
    {
      uint64_t v25 = v10 - (void)v4;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v27);
      }
      else {
        uint64_t v28 = 0;
      }
      char v29 = (void *)(v27 + 8 * v24);
      unint64_t v30 = v27 + 8 * v28;
      *char v29 = a2;
      uint64_t v11 = v29 + 1;
      std::string::size_type v32 = (char *)*((void *)this + 4);
      char v31 = (char *)*((void *)this + 5);
      if (v31 != v32)
      {
        do
        {
          uint64_t v33 = *((void *)v31 - 1);
          v31 -= 8;
          *--char v29 = v33;
        }
        while (v31 != v32);
        char v31 = (char *)*((void *)this + 4);
      }
      *((void *)this + 4) = v29;
      *((void *)this + 5) = v11;
      *((void *)this + 6) = v30;
      if (v31) {
        operator delete(v31);
      }
      goto LABEL_38;
    }
LABEL_57:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  *uint64_t v5 = a2;
  uint64_t v11 = v5 + 1;
LABEL_38:
  *((void *)this + 5) = v11;
  if ((v7 - v8) >> 4 < v9)
  {
    int v35 = (unsigned char *)*((void *)this + 11);
    unint64_t v34 = *((void *)this + 12);
    if ((unint64_t)v35 >= v34)
    {
      long long v37 = (unsigned char *)*((void *)this + 10);
      uint64_t v38 = (v35 - v37) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v34 - (void)v37;
      if (v40 >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        if (v41 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        std::string v42 = (char *)operator new(16 * v41);
      }
      else
      {
        std::string v42 = 0;
      }
      unsigned int v43 = &v42[16 * v38];
      *(void *)unsigned int v43 = a2;
      v43[8] = 0;
      unsigned int v36 = v43 + 16;
      if (v35 != v37)
      {
        do
        {
          *((_OWORD *)v43 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *((_OWORD *)v35 - 1);
          v43 -= 16;
          v35 -= 16;
        }
        while (v35 != v37);
        int v35 = (unsigned char *)*((void *)this + 10);
      }
      *((void *)this + 10) = v43;
      *((void *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v36;
      *((void *)this + 12) = &v42[16 * v41];
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)int v35 = a2;
      v35[8] = 0;
      unsigned int v36 = v35 + 16;
    }
    *((void *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v36;
  }
}

void YAML::NodeBuilder::OnSequenceStart(uint64_t a1)
{
}

void YAML::NodeBuilder::OnScalar(uint64_t a1)
{
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
  YAML::NodeBuilder::Push(a1, *(YAML::detail::node **)(*((void *)a1 + 7) + 8 * a3));
  YAML::NodeBuilder::Pop(a1);
}

void YAML::NodeBuilder::OnNull(uint64_t a1)
{
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  YAML::NodeBuilder::~NodeBuilder(this);
  JUMPOUT(0x1C8796D70);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1F2122690;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = &unk_1F2122690;
  operator new();
}

void sub_1C5F8CB38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = v3;
      *(void *)(a2 + 48) = v2;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    else
    {
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0;
      *(void *)(a2 + 48) = v2;
    }
  }
  else
  {
    *(unsigned char *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  }
}

void *siri::dialogengine::CountAndTimestamp::CountAndTimestamp(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::CountAndTimestamp::CountAndTimestamp(uint64_t this, uint64_t a2, double a3)
{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

void *siri::dialogengine::CountAndTimestamp::SetCount(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::CountAndTimestamp::GetCount(siri::dialogengine::CountAndTimestamp *this)
{
  return *(void *)this;
}

uint64_t siri::dialogengine::CountAndTimestamp::SetTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::CountAndTimestamp::GetTimestamp(siri::dialogengine::CountAndTimestamp *this)
{
  return *((double *)this + 1);
}

double siri::dialogengine::GroundingInfo::GroundingInfo(siri::dialogengine::GroundingInfo *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void *siri::dialogengine::GroundingInfo::GroundingInfo(void *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1 + 1, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v6 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    a1[6] = *((void *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1C5F8CCC8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::GroundingInfo::SetCount(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::GroundingInfo::GetCount(siri::dialogengine::GroundingInfo *this)
{
  return *(void *)this;
}

void siri::dialogengine::GroundingInfo::AddTimestamp(siri::dialogengine::GroundingInfo *this, double a2)
{
  uint64_t v5 = (double *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if ((unint64_t)v5 >= v4)
  {
    long long v7 = (double *)*((void *)this + 1);
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
      long long v7 = (double *)*((void *)this + 1);
      uint64_t v5 = (double *)*((void *)this + 2);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (double *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    *uint64_t v14 = a2;
    uint64_t v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *((void *)v5-- - 1);
      *((void *)v14-- - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v16;
    }
    *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v14;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + 2) = v6;
}

void *siri::dialogengine::GroundingInfo::GetTimestamps@<X0>(siri::dialogengine::GroundingInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a2, *((const void **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
}

std::string *siri::dialogengine::GroundingInfo::SetText(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::GroundingInfo::GetText(siri::dialogengine::GroundingInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

uint64_t siri::dialogengine::GroundingInfo::GetCountInTimeRange(siri::dialogengine::GroundingInfo *this, double a2, double a3)
{
  uint64_t v3 = (double *)*((void *)this + 1);
  unint64_t v4 = (double *)*((void *)this + 2);
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    double v6 = *v3++;
    LODWORD(v7) = v6 >= a2;
    if (v6 <= a3) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0;
    }
    result += v7;
  }
  while (v3 != v4);
  return result;
}

uint64_t siri::dialogengine::GroundingInfo::RemoveTimestampsOlderThan(uint64_t this, double a2)
{
  uint64_t v3 = *(double **)(this + 8);
  uint64_t v2 = *(double **)(this + 16);
  if (v3 != v2)
  {
    while (*v3 >= a2)
    {
      if (++v3 == v2) {
        return this;
      }
    }
    if (v3 != v2)
    {
      for (uint64_t i = v3 + 1; i != v2; ++i)
      {
        if (*i >= a2) {
          *v3++ = *i;
        }
      }
    }
    if (v3 != v2) {
      *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v3;
    }
  }
  return this;
}

uint64_t siri::dialogengine::GroundingInfo::Clear(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = *(void *)(this + 8);
  if (*(char *)(this + 55) < 0)
  {
    **(unsigned char **)(this + 32) = 0;
    *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0;
  }
  else
  {
    *(unsigned char *)(this + 32) = 0;
    *(unsigned char *)(this + 55) = 0;
  }
  return this;
}

void *siri::dialogengine::DialogStateUseCase::DialogStateUseCase(void *this)
{
  *this = 0;
  this[1] = 0;
  this[3] = 0;
  this[2] = this + 3;
  this[6] = 0;
  this[4] = 0;
  this[5] = this + 6;
  this[10] = 0;
  this[9] = 0;
  this[7] = 0;
  this[8] = this + 9;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[3] = 0;
  this[2] = this + 3;
  this[6] = 0;
  this[4] = 0;
  this[5] = this + 6;
  this[10] = 0;
  this[9] = 0;
  this[7] = 0;
  this[8] = this + 9;
  return this;
}

uint64_t siri::dialogengine::DialogStateUseCase::DialogStateUseCase(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4, const void ***a5, double a6)
{
  *(void *)a1 = a2;
  *(double *)(a1 + 8) = a6;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 16), a4);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 40), a3);
  std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a1 + 64, a5);
  return a1;
}

void sub_1C5F8D000(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v3, *(char **)(v1 + 48));
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 24));
  _Unwind_Resume(a1);
}

void *siri::dialogengine::DialogStateUseCase::SetUseCaseUsageCount(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStateUseCase::GetUseCaseUsageCount(siri::dialogengine::DialogStateUseCase *this)
{
  return *(void *)this;
}

uint64_t siri::dialogengine::DialogStateUseCase::SetUseCaseLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStateUseCase::GetUseCaseLastTimestamp(siri::dialogengine::DialogStateUseCase *this)
{
  return *((double *)this + 1);
}

uint64_t *siri::dialogengine::DialogStateUseCase::AddAllRandomId(uint64_t a1, const void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 40), a2, (uint64_t)a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::GetAllRandomIds@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 5);
}

BOOL siri::dialogengine::DialogStateUseCase::HasAllRandomId(uint64_t a1, const void **a2)
{
  return a1 + 48 != std::__tree<std::string>::find<std::string>(a1 + 40, a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::AddLastRandomId(uint64_t a1, const void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 16), a2, (uint64_t)a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::GetLastRandomIds@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 2);
}

BOOL siri::dialogengine::DialogStateUseCase::HasLastRandomId(uint64_t a1, const void **a2)
{
  return a1 + 24 != std::__tree<std::string>::find<std::string>(a1 + 16, a2);
}

void siri::dialogengine::DialogStateUseCase::ClearLastRandomIds(char **this)
{
  uint64_t v1 = this + 3;
  std::__tree<std::string>::destroy((uint64_t)(this + 2), this[3]);
  *(v1 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

std::string *siri::dialogengine::DialogStateUseCase::SetGroundingUsage(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v7 = a2;
  unint64_t v4 = std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 64), (const void **)a2, &v7);
  uint64_t v5 = v4;
  *((void *)v4 + 7) = *(void *)a3;
  if (v4 + 56 != (char *)a3) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v4 + 64, *(char **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  }
  return std::string::operator=((std::string *)(v5 + 88), (const std::string *)(a3 + 32));
}

void siri::dialogengine::DialogStateUseCase::GetGroundingUsage(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1 + 72;
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = a1 + 80;
  uint64_t v8 = a1 + 72;
  do
  {
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
    uint64_t v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      uint64_t v10 = (uint64_t *)v5;
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32)))
  {
LABEL_8:
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    *(void *)a3 = *(void *)(v8 + 56);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a3 + 24) = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a3 + 8), *(const void **)(v8 + 64), *(void *)(v8 + 72), (uint64_t)(*(void *)(v8 + 72) - *(void *)(v8 + 64)) >> 3);
    BOOL v11 = (std::string *)(a3 + 32);
    if (*(char *)(v8 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v8 + 88), *(void *)(v8 + 96));
    }
    else
    {
      long long v12 = *(_OWORD *)(v8 + 88);
      *(void *)(a3 + 48) = *(void *)(v8 + 104);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
  }
}

void sub_1C5F8D28C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogStateUseCase::GetAllGroundings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a2, this + 8);
}

void *siri::dialogengine::DialogStateFamily::DialogStateFamily(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::DialogStateFamily::DialogStateFamily(uint64_t this, uint64_t a2, double a3)
{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

void *siri::dialogengine::DialogStateFamily::SetFamilyUsageCount(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStateFamily::GetFamilyUsageCount(siri::dialogengine::DialogStateFamily *this)
{
  return *(void *)this;
}

uint64_t siri::dialogengine::DialogStateFamily::SetFamilyLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStateFamily::GetFamilyLastTimestamp(siri::dialogengine::DialogStateFamily *this)
{
  return *((double *)this + 1);
}

void *siri::dialogengine::DialogStatePattern::DialogStatePattern(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::DialogStatePattern::DialogStatePattern(uint64_t this, uint64_t a2, double a3)
{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

void *siri::dialogengine::DialogStatePattern::SetPatternUsageCount(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStatePattern::GetPatternUsageCount(siri::dialogengine::DialogStatePattern *this)
{
  return *(void *)this;
}

uint64_t siri::dialogengine::DialogStatePattern::SetPatternLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStatePattern::GetPatternLastTimestamp(siri::dialogengine::DialogStatePattern *this)
{
  return *((double *)this + 1);
}

void siri::dialogengine::GetFamilyIdFromCatId(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  siri::dialogengine::StringSplit(a1, "#", &v14);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v14) >> 3) < 2) {
    goto LABEL_23;
  }
  uint64_t v4 = v15 - 3;
  if (*((char *)v15 - 1) < 0) {
    operator delete(*v4);
  }
  unint64_t v15 = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a2, v14, (uint64_t)v15, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = a1[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a1 + 1);
  }
  if (v6 != v7) {
    goto LABEL_24;
  }
  if (v8 >= 0) {
    BOOL v9 = a1;
  }
  else {
    BOOL v9 = *(unsigned __int8 **)a1;
  }
  if ((v5 & 0x80) != 0)
  {
    BOOL v11 = *(void **)a2;
    if (memcmp(*(const void **)a2, v9, *(void *)(a2 + 8))) {
      goto LABEL_24;
    }
    operator delete(v11);
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>((void *)a2, "");
    goto LABEL_24;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_23;
  }
  uint64_t v10 = (unsigned __int8 *)a2;
  while (*v10 == *v9)
  {
    ++v10;
    ++v9;
    if (!--v5) {
      goto LABEL_23;
    }
  }
LABEL_24:
  __p[0] = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C5F8D494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1C5F8D808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F8DC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C5F8E008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);

  _Unwind_Resume(a1);
}

void sub_1C5F8E2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);

  _Unwind_Resume(a1);
}

void sub_1C5F8E4BC(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

id DictionaryToValidationResult(NSArray *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v12 = a1;
  uint64_t v1 = objc_opt_new();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  obj = v12;
  uint64_t v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16, v12);
  if (v2)
  {
    uint64_t v3 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v15 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v6 = objc_opt_new();
        uint64_t v7 = [v5 objectForKey:@"text"];
        [v6 setText:v7];

        int v8 = [v5 objectForKey:@"textWithLineNumber"];
        [v6 setTextWithLineNumber:v8];

        BOOL v9 = [v5 objectForKey:@"lineNumber"];
        [v6 setLineNumber:v9];

        uint64_t v10 = [v5 objectForKey:@"filename"];
        [v6 setFilename:v10];

        [v1 addObject:v6];
      }
      uint64_t v2 = [(NSArray *)obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v2);
  }

  return v1;
}

void sub_1C5F8E70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5F8ED40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v20 - 105) < 0) {
    operator delete(*(void **)(v20 - 128));
  }
  siri::dialogengine::RequestInfo::~RequestInfo(&__p);
  std::string::size_type v22 = *(std::__shared_weak_count **)(v20 - 96);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F8EEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5F8EFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C5F8F494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char **a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  a30 = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a37 = &a43;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (v52 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(&a52);
  char v55 = *(std::__shared_weak_count **)(v53 - 152);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(a1);
}

void sub_1C5F8F5EC()
{
}

void sub_1C5F8F6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F8FE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  a29 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a33 = &a36;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (v46 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(&a46);
  std::string::size_type v49 = *(std::__shared_weak_count **)(v47 - 200);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Block_object_dispose((const void *)(v47 - 192), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25077(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1C5F9010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F903B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F90714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F908D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5F91CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (*(char *)(v37 - 121) < 0) {
    operator delete(*(void **)(v37 - 144));
  }
  unint64_t v39 = *(std::__shared_weak_count **)(v37 - 96);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

void NSDictToVariableObjectPtr(void *a1)
{
}

void sub_1C5F925E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5F9279C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void NSArrayToVariableArrayPtr(void *a1)
{
}

void sub_1C5F92C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5F92E60(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void sub_1C5F935E8(_Unwind_Exception *a1, std::string *a2, void *__p)
{
  _Unwind_Resume(a1);
}

void sub_1C5F93844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F93AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18 < 0) {
    operator delete(a13);
  }

  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  if (*(char *)(v39 - 25) < 0) {
    operator delete(*(void **)(v39 - 48));
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void __copy_helper_block_ea8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C5F93CF8(_Unwind_Exception *exception_object)
{
  if (v2[103] < 0) {
    operator delete(*v4);
  }
  if (v2[79] < 0) {
    operator delete(*v3);
  }
  if (v2[55] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F94428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *__p, int a18, int a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  a30 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a34 = &a38;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (a19 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(&a44);

  if (STACK[0x338]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x338]);
  }

  char v46 = *(std::__shared_weak_count **)(v44 - 152);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (*(char *)(v44 - 121) < 0) {
    operator delete(*(void **)(v44 - 144));
  }
  if (*(char *)(v44 - 97) < 0) {
    operator delete(*(void **)(v44 - 120));
  }

  _Unwind_Resume(a1);
}

void sub_1C5F947F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c55_ZTSNSt3__110shared_ptrIN4siri12dialogengine7ContextEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_48c55_ZTSNSt3__110shared_ptrIN4siri12dialogengine7ContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5F94B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F94CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5F9506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::mutex::unlock((std::mutex *)&+[DEExecutor preload]::sPreloadMutex);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExtractUserSettings(siri::dialogengine *this@<X0>, NSDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v5 = this;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  char v29 = v5;
  *(void *)a3 = a3 + 8;
  if (v3)
  {
    uint64_t v6 = siri::dialogengine::DefaultUserSettings(v5);
    if (v6 != a3) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a3, *(long long **)v6, (long long *)(v6 + 8));
    }
  }
  uint64_t v7 = v29;
  if (v29)
  {
    long long v8 = [(siri::dialogengine *)v29 objectForKey:@"userSettings"];
    if (v8)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v28 = v8;
      id v9 = v8;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v33 objects:v38 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v34;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v34 != v11) {
              objc_enumerationMutation(v9);
            }
            id v13 = *(id *)(*((void *)&v33 + 1) + 8 * i);
            long long v14 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v13 UTF8String]);
            uint64_t v15 = siri::dialogengine::DefaultUserSettings(v14);
            if (v15 + 8 == std::__tree<std::string>::find<std::string>(v15, (const void **)__p))
            {
              if (v32 >= 0) {
                uint64_t v25 = __p;
              }
              else {
                uint64_t v25 = (void **)__p[0];
              }
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported user setting '%s'", v16, v25);
            }
            else
            {
              long long v17 = [v9 objectForKey:v13];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v17 UTF8String]);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  uint64_t v37 = __p;
                  int v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)__p, (long long **)&v37);
                  std::string::operator=((std::string *)(v21 + 7), &__str);
                  if (v32 >= 0) {
                    uint64_t v23 = __p;
                  }
                  else {
                    uint64_t v23 = (void **)__p[0];
                  }
                  p_str = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parsed user setting '%s': '%s'", v22, v23, p_str);
                }
                else
                {
                  if (v32 >= 0) {
                    unint64_t v27 = __p;
                  }
                  else {
                    unint64_t v27 = (void **)__p[0];
                  }
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Ignoring user setting '%s' with empty string value", v19, v27);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                if (v32 >= 0) {
                  uint64_t v26 = __p;
                }
                else {
                  uint64_t v26 = (void **)__p[0];
                }
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Value for user setting '%s' is not a string", v18, v26);
              }
            }
            if (v32 < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v33 objects:v38 count:16];
        }
        while (v10);
      }

      long long v8 = v28;
    }

    uint64_t v7 = v29;
  }
}

void sub_1C5F95454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a13);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPersonHeight::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatPersonHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  long long v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      uint64_t v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
LABEL_12:
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_12;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5F95C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54)
{
  if (*(char *)(v55 - 161) < 0) {
    operator delete(*(void **)(v55 - 184));
  }
  MEMORY[0x1C8796D70](v54, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a46);
  if (a53 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPersonHeight::abbreviated(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPersonHeight::symbolic(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::CollectIteratorsVisitor::Visit(siri::dialogengine::CollectIteratorsVisitor *this, const siri::dialogengine::Text *a2)
{
  siri::dialogengine::SpeakableString::SpeakableString(&v3, (const siri::dialogengine::Text *)((char *)a2 + 208));
  siri::dialogengine::CollectIteratorsVisitor::GetIteratorAttributes(this, (const siri::dialogengine::SpeakableString *)&v3);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F96028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CollectIteratorsVisitor::GetIteratorAttributes(siri::dialogengine::CollectIteratorsVisitor *this, const siri::dialogengine::SpeakableString *a2)
{
  siri::dialogengine::SpeakableString::GetPrintChunks(a2, (const char *)a2, (uint64_t *)&v5);
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v7, v5, v6, (v6 - v5) >> 4);
  siri::dialogengine::CollectIteratorsVisitor::ProcessChunks((uint64_t)this, &v7);
  uint64_t v10 = (char **)&v7;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  uint64_t v10 = &v5;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (!siri::dialogengine::SpeakableString::SpeakEqualsPrint(a2))
  {
    siri::dialogengine::SpeakableString::GetSpeakChunks(a2, v4, (uint64_t *)&v5);
    char v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v7, v5, v6, (v6 - v5) >> 4);
    siri::dialogengine::CollectIteratorsVisitor::ProcessChunks((uint64_t)this, &v7);
    uint64_t v10 = (char **)&v7;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    uint64_t v10 = &v5;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  }
}

void sub_1C5F96124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v11 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = v10;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  *(void *)(v11 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = &a10;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::CollectIteratorsVisitor::ProcessChunks(uint64_t a1, const void ***a2)
{
  uint64_t v2 = *a2;
  std::string v3 = a2[1];
  if (*a2 != v3)
  {
    long long v4 = (uint64_t **)(a1 + 8);
    char v5 = (void *)(a1 + 16);
    do
    {
      if (*v2)
      {
        if (v6)
        {
          uint64_t v7 = (uint64_t)v6;
          std::string::basic_string[abi:ne180100]<0>(__p, "iterator");
          siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)__p, &v16);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          char v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v16.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            if (*(char *)(v7 + 223) < 0) {
              std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v7 + 200), *(void *)(v7 + 208));
            }
            else {
              std::string v15 = *(std::string *)(v7 + 200);
            }
            uint64_t v10 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v4, &v20, (const void **)&v16.__r_.__value_.__l.__data_);
            uint64_t v11 = (char *)*v10;
            if (!*v10)
            {
              long long v12 = (uint64_t **)v10;
              uint64_t v11 = (char *)operator new(0x50uLL);
              __p[0] = v11;
              __p[1] = v5;
              char v18 = 0;
              char v13 = (std::string *)(v11 + 32);
              if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v13, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
                *((void *)v11 + 6) = *((void *)&v16.__r_.__value_.__l + 2);
              }
              *((void *)v11 + 7) = 0;
              *((void *)v11 + 8) = 0;
              *((void *)v11 + 9) = 0;
              char v18 = 1;
              std::__tree<std::string>::__insert_node_at(v4, v20, v12, (uint64_t *)v11);
              __p[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
            }
            long long v14 = (void **)(v11 + 56);
            if (v11[79] < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)long long v14 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
            *((void *)v11 + 9) = *((void *)&v15.__r_.__value_.__l + 2);
            char v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          }
          if (v9 < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_1C5F96354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::CollectIteratorsVisitor::Visit(siri::dialogengine::CollectIteratorsVisitor *this, const siri::dialogengine::Dialog *a2)
{
  siri::dialogengine::SpeakableString::SpeakableString(&v17, (const siri::dialogengine::Dialog *)((char *)a2 + 208));
  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::Dialog *)((char *)a2 + 376));
  siri::dialogengine::CollectIteratorsVisitor::GetIteratorAttributes(this, (const siri::dialogengine::SpeakableString *)&v17);
  if ((siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)&v17, (unsigned __int8 *)&v4) & 1) == 0) {
    siri::dialogengine::CollectIteratorsVisitor::GetIteratorAttributes(this, (const siri::dialogengine::SpeakableString *)&v4);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F96500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

void siri::dialogengine::CollectIteratorsVisitor::~CollectIteratorsVisitor(siri::dialogengine::CollectIteratorsVisitor *this)
{
  *(void *)this = &unk_1F2122780;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2122780;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
}

void siri::dialogengine::CollectIteratorsVisitor::GetIterators(siri::dialogengine::CollectIteratorsVisitor *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (uint64_t **)(a2 + 8);
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a2 = a2 + 8;
  std::string v3 = (void *)*((void *)this + 1);
  std::string v4 = (char *)this + 16;
  if (v3 != (void *)((char *)this + 16))
  {
    uint64_t v6 = a2 + 16;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (*(uint64_t ***)a2 == v2) {
        break;
      }
      char v8 = v2;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t)v8[2];
          BOOL v10 = *(void *)v9 == (void)v8;
          char v8 = (uint64_t **)v9;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v9 + 32), (const void **)v3 + 4))
      {
        if (!*v2) {
          goto LABEL_10;
        }
LABEL_12:
        char v21 = (void *)v9;
        uint64_t v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      uint64_t v11 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a2, &v21, (const void **)v3 + 4);
LABEL_14:
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_22:
      std::string v17 = (char *)v3[1];
      if (v17)
      {
        do
        {
          char v18 = v17;
          std::string v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          char v18 = (char *)v3[2];
          BOOL v10 = *(void *)v18 == (void)v3;
          std::string v3 = v18;
        }
        while (!v10);
      }
      std::string v3 = v18;
      if (v18 == v4) {
        return;
      }
    }
    uint64_t v9 = (uint64_t)v2;
    if (!v7)
    {
LABEL_10:
      char v21 = v2;
      uint64_t v11 = v2;
LABEL_15:
      char v12 = (char *)operator new(0x50uLL);
      char v13 = (uint64_t *)v12;
      v19[0] = v12;
      v19[1] = v2;
      char v20 = 0;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        long long v14 = *((_OWORD *)v3 + 2);
        *((void *)v12 + 6) = v3[6];
        *((_OWORD *)v12 + 2) = v14;
      }
      std::string v15 = (std::string *)(v13 + 7);
      if (*((char *)v3 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v3[7], v3[8]);
      }
      else
      {
        long long v16 = *(_OWORD *)(v3 + 7);
        v13[9] = v3[9];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      char v20 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a2, (uint64_t)v21, v11, v13);
      v19[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
      goto LABEL_22;
    }
    goto LABEL_12;
  }
}

void sub_1C5F967A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 55) < 0) {
    operator delete(*v10);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FieldNameFromElementName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = *(void *)(a1 + 16);
  }
  siri::dialogengine::GetElementToSnippetUIAliasMap((siri::dialogengine *)a1);
  uint64_t v4 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, (const void **)a1);
  siri::dialogengine::GetElementToSnippetUIAliasMap((siri::dialogengine *)v4);
  if ((_UNKNOWN *)v4 != &unk_1EA3D9770) {
    std::string::operator=((std::string *)a2, (const std::string *)(v4 + 56));
  }
  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)a2, &v9);
  std::string::basic_string[abi:ne180100]<0>(v7, "-");
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  siri::dialogengine::StringReplace((uint64_t)&v9, (char *)v7, (uint64_t)__p, 0, &v10);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F9690C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetElementToSnippetUIAliasMap(siri::dialogengine *this)
{
  v1[6] = *(const void **)MEMORY[0x1E4F143B8];
  {
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v1);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, v1, 1);
      std::pair<std::string const,std::string>::~pair((uint64_t)v1);
      __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F96A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "intentsui-standard");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "intentsUI-standard");
  return a1;
}

void sub_1C5F96AA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElementNameFromFieldName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "_");
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  siri::dialogengine::StringReplace(a1, (char *)v6, (uint64_t)__p, 0, &v8);
  siri::dialogengine::StringToLower((uint64_t)&v8, a2);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1C5F96B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetDescriptor(uint64_t this, const google::protobuf::Message *a2)
{
  if (this)
  {
    this = (*(uint64_t (**)(uint64_t, const google::protobuf::Message *))(*(void *)this + 168))(this, a2);
    if (!this)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v2);
      return 0;
    }
  }
  return this;
}

uint64_t siri::dialogengine::GetReflection(uint64_t this, const google::protobuf::Message *a2)
{
  if (this)
  {
    (*(void (**)(uint64_t, const google::protobuf::Message *))(*(void *)this + 168))(this, a2);
    this = v2;
    if (!v2)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
      return 0;
    }
  }
  return this;
}

siri::dialogengine::TemporaryVariable *siri::dialogengine::TemporaryVariable::TemporaryVariable(siri::dialogengine::TemporaryVariable *this, siri::dialogengine::Context *a2, const siri::dialogengine::ListInfo *a3)
{
  *(void *)this = a2;
  siri::dialogengine::ListInfo::ListInfo((uint64_t)this + 8, (uint64_t)a3);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (a2)
  {
    uint64_t v6 = *((unsigned __int8 *)a3 + 71);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a3 + 7);
    }
    if (v6)
    {
      siri::dialogengine::Context::FindVariable((uint64_t)a2, (uint64_t)a3 + 48, &v9);
      char v7 = (std::__shared_weak_count *)*((void *)this + 16);
      *(_OWORD *)((char *)this + 120) = v9;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  return this;
}

void sub_1C5F96CF8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 128);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = *(std::__shared_weak_count **)(v1 + 112);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  siri::dialogengine::ListInfo::~ListInfo(v2);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ListInfo::ListInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v6;
  }
  char v7 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C5F96E00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ListInfo::~ListInfo(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void siri::dialogengine::TemporaryVariable::~TemporaryVariable(siri::dialogengine::TemporaryVariable *this)
{
  siri::dialogengine::TemporaryVariable::RemoveFromContext(this);
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
      uint64_t v2 = *((void *)this + 15);
    }
    else
    {
      long long v3 = *(_OWORD *)(v2 + 8);
      __str.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v3;
    }
    std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 56));
    uint64_t v4 = *(void *)this;
    long long v5 = (std::__shared_weak_count *)*((void *)this + 16);
    v11[0] = *((void *)this + 15);
    v11[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::Context::AddVariable(v4, v11);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    std::string::operator=((std::string *)(*((void *)this + 15) + 8), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = 0;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)this = 0;
  long long v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  std::string v10 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void siri::dialogengine::TemporaryVariable::RemoveFromContext(siri::dialogengine::TemporaryVariable *this)
{
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 13);
    if (v2)
    {
      std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 56));
      uint64_t v3 = *(void *)this;
      uint64_t v4 = *((void *)this + 13);
      long long v5 = (std::__shared_weak_count *)*((void *)this + 14);
      v6[0] = v4;
      v6[1] = (uint64_t)v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::Context::RemoveVariable(v3, v6);
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C5F9707C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::TemporaryVariable::SetIndex(siri::dialogengine::TemporaryVariable *this, const char *a2)
{
  if (*((char *)this + 55) < 0)
  {
    if (!*((void *)this + 5)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 55))
  {
    return;
  }
  if (*((char *)this + 79) < 0)
  {
    if (!*((void *)this + 8)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 79))
  {
    return;
  }
  if (*(void *)this)
  {
    siri::dialogengine::TemporaryVariable::RemoveFromContext(this);
    uint64_t v5 = *((void *)this + 2);
    if (!v5) {
      return;
    }
    uint64_t v7 = v5 + 72;
    uint64_t v6 = *(void *)(v5 + 72);
    long long v34 = 0u;
    if ((unint64_t)a2 >= (*(void *)(v7 + 8) - v6) >> 4) {
      goto LABEL_22;
    }
    long long v8 = *(_OWORD *)(v6 + 16 * (void)a2);
    long long v34 = v8;
    long long v9 = *(std::__shared_weak_count **)(v6 + 16 * (void)a2 + 8);
    if (*((void *)&v8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (!(void)v8)
    {
LABEL_22:
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get item %zu for iterator", v4, a2);
      long long v9 = (std::__shared_weak_count *)*((void *)&v34 + 1);
LABEL_96:
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      return;
    }
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v10 = (_OWORD *)(v8 + 32);
    if (*(char *)(v8 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v8 + 32), *(void *)(v8 + 40));
    }
    else
    {
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *v10;
      v38.__r_.__value_.__r.__words[2] = *(void *)(v8 + 48);
    }
    char v11 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v38.__r_.__value_.__l.__size_ != 12)
      {
        if (v38.__r_.__value_.__l.__size_ != 13)
        {
          if (v38.__r_.__value_.__l.__size_ == 14)
          {
            char v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
            std::string::size_type v13 = *(void *)v38.__r_.__value_.__l.__data_;
LABEL_33:
            uint64_t v14 = *(std::string::size_type *)((char *)v12->__r_.__value_.__r.__words + 6);
            if (v13 == 0x422E676F6C616964 && v14 == 0x6E61656C6F6F422ELL)
            {
              {
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              operator new();
            }
          }
LABEL_72:
          if (*(char *)(v34 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v34 + 8), *(void *)(v34 + 16));
            char v11 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
          }
          else
          {
            long long v26 = *(_OWORD *)(v34 + 8);
            __str.__r_.__value_.__r.__words[2] = *(void *)(v34 + 24);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
          }
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          BOOL v28 = v11 < 0;
          char v29 = &v38;
          if (v28) {
            char v29 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to duplicate variable '%s' of type '%s'", v4, p_str, v29);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
LABEL_81:
          if (*(char *)(v34 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v34 + 32), *(void *)(v34 + 40));
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
            __str.__r_.__value_.__r.__words[2] = *(void *)(v34 + 48);
          }
          std::string::operator=((std::string *)0x20, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          MEMORY[0x38] = *(void *)(v34 + 56);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 14);
          *((void *)this + 13) = 0;
          *((void *)this + 14) = 0;
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
          std::string::operator=((std::string *)(*((void *)this + 13) + 8), (const std::string *)((char *)this + 56));
          uint64_t v31 = *((void *)this + 13);
          *(unsigned char *)(v31 + siri::dialogengine::SpeakableString::~SpeakableString(this + 64) = 1;
          uint64_t v32 = *(void *)this;
          long long v33 = (std::__shared_weak_count *)*((void *)this + 14);
          v35[0] = v31;
          v35[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::Context::AddVariable(v32, v35);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          goto LABEL_96;
        }
        char v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if (*(void *)v38.__r_.__value_.__l.__data_ != 0x532E676F6C616964
          || *(void *)(v38.__r_.__value_.__r.__words[0] + 5) != 0x676E697274532E67)
        {
          if (*(void *)v38.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
            || *(void *)(v38.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67)
          {
            std::string::size_type v18 = *(void *)v38.__r_.__value_.__l.__data_;
LABEL_68:
            uint64_t v24 = *(std::string::size_type *)((char *)v12->__r_.__value_.__r.__words + 5);
            if (v18 == 0x4F2E676F6C616964 && v24 == 0x7463656A624F2E67)
            {
              {
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              operator new();
            }
            goto LABEL_72;
          }
LABEL_100:
          {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          operator new();
        }
LABEL_99:
        operator new();
      }
      char v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    else
    {
      char v12 = &v38;
      if (HIBYTE(v38.__r_.__value_.__r.__words[2]) != 12)
      {
        if (HIBYTE(v38.__r_.__value_.__r.__words[2]) != 13)
        {
          if (HIBYTE(v38.__r_.__value_.__r.__words[2]) == 14)
          {
            std::string::size_type v13 = v38.__r_.__value_.__r.__words[0];
            goto LABEL_33;
          }
          goto LABEL_72;
        }
        if (v38.__r_.__value_.__r.__words[0] != 0x532E676F6C616964
          || *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 5) != 0x676E697274532E67)
        {
          if (v38.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
            || *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
          {
            std::string::size_type v18 = v38.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          goto LABEL_100;
        }
        goto LABEL_99;
      }
    }
    std::string::size_type v19 = v12->__r_.__value_.__r.__words[0];
    int v20 = v12->__r_.__value_.__r.__words[1];
    if (v19 == 0x412E676F6C616964 && v20 == 2036429426)
    {
      std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableArray,siri::dialogengine::Variable>(&v37, (void *)v34, (uint64_t)v9);
      if (v37.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      if (v37.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37.__r_.__value_.__l.__size_);
      }
      goto LABEL_81;
    }
    goto LABEL_72;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Context must not be null when setting temporary value", a2);
}

void sub_1C5F97A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x1C8796D70](v24, 0x10B3C40C1072A30);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (*(char *)(v25 - 105) < 0) {
    operator delete(*(void **)(v25 - 128));
  }
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableArray,siri::dialogengine::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void siri::dialogengine::StoreVisualCatItem(siri::dialogengine *this, google::protobuf::Message *a2, const siri::dialogengine::CatBinary::vcat_item *a3)
{
  long long v8 = 0u;
  memset(v7, 0, sizeof(v7));
  siri::dialogengine::GetMessageInterface((siri::dialogengine *)v7, this);
  if (LOBYTE(v7[0]))
  {
    uint64_t v5 = (google::protobuf::UnknownFieldSet *)v8;
    google::protobuf::MessageLite::SerializeAsString(a2, (uint64_t)&__str);
    google::protobuf::UnknownFieldSet::AddLengthDelimited(v5);
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get valid message interface to store item", v4);
}

void sub_1C5F97E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetMessageInterface(siri::dialogengine *this, google::protobuf::Message *a2)
{
  *(unsigned char *)this = 0;
  if (!a2) {
    return;
  }
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = a2;
  uint64_t v4 = (*(uint64_t (**)(google::protobuf::Message *))(*(void *)a2 + 168))(a2);
  if (!v4)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v5);
    *((void *)this + 2) = 0;
    uint64_t v24 = "Could not get message descriptor";
LABEL_23:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v24, v23);
    return;
  }
  uint64_t v6 = v4;
  *((void *)this + 2) = v4;
  (*(void (**)(google::protobuf::Message *))(*(void *)a2 + 168))(a2);
  if (!v7)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
    *((void *)this + 3) = 0;
    uint64_t v24 = "Could not get message reflection";
    goto LABEL_23;
  }
  *((void *)this + 3) = v7;
  double v10 = google::protobuf::Reflection::MutableUnknownFields(v7, a2);
  *((void *)this + 4) = v8;
  if (v8)
  {
    char v11 = v8;
    v28[0] = 0;
    v28[1] = 0;
    char v27 = v28;
    uint64_t v12 = *v8;
    if ((int)((unint64_t)(v8[1] - *v8) >> 4) < 1)
    {
      long long v16 = (int *)((char *)this + 40);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        int v26 = *(_DWORD *)(v12 + v13);
        std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&v27, &v26, &v26);
        ++v14;
        uint64_t v12 = *v11;
        v13 += 16;
      }
      while (v14 < (int)((unint64_t)(v11[1] - *v11) >> 4));
      std::string v15 = v28[0];
      long long v16 = (int *)((char *)this + 40);
      if (v28[0])
      {
        for (int i = 20000; ; ++i)
        {
          std::string::size_type v18 = v28;
          std::string::size_type v19 = v28[0];
          do
          {
            int v20 = v19;
            uint64_t v21 = v18;
            int v22 = *((_DWORD *)v19 + 7);
            if (v22 >= i) {
              std::string::size_type v18 = (char **)v19;
            }
            else {
              v19 += 8;
            }
            std::string::size_type v19 = *(char **)v19;
          }
          while (v19);
          if (v18 == v28) {
            break;
          }
          if (v22 < i) {
            int v20 = (char *)v21;
          }
          if (i < *((_DWORD *)v20 + 7)) {
            break;
          }
          if (i == 32000)
          {
            *long long v16 = 32000;
            goto LABEL_35;
          }
        }
        *long long v16 = i;
        if (i >> 8 < 0x7D) {
          goto LABEL_31;
        }
LABEL_35:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Exceeded limit of unknown field numbers", v15);
        std::string v15 = v28[0];
        goto LABEL_36;
      }
    }
    std::string v15 = 0;
    *long long v16 = 20000;
LABEL_31:
    *(unsigned char *)this = 1;
LABEL_36:
    std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&v27, v15);
    return;
  }
  uint64_t v25 = *(uint64_t **)(v6 + 8);
  if (*((char *)v25 + 23) < 0) {
    uint64_t v25 = (uint64_t *)*v25;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"UnknownFieldSet is null for message '%s'", v9, v10, v25);
}

void sub_1C5F980F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void siri::dialogengine::GetMessageCondition(std::string *this, const google::protobuf::Message *a2)
{
  siri::dialogengine::GetConditionInfo((siri::dialogengine *)&v3, a2);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(this, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    if (SHIBYTE(v5) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = __p;
    this->__r_.__value_.__r.__words[2] = v5;
  }
}

void sub_1C5F98180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConditionInfo(siri::dialogengine *this, const google::protobuf::Message *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  uint64_t v3 = (std::string *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  siri::dialogengine::GetStoredItems(&v12, a2);
  uint64_t v4 = v12;
  if (v12 != (uint64_t *)v13)
  {
    while (1)
    {
      int v8 = *((_DWORD *)v4 + 8);
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9, (const siri::dialogengine::CatBinary::vcat_item *)(v4 + 5));
      if (v11 != 2 && (v9[16] & 2) != 0) {
        break;
      }
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9);
      std::string::size_type v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          std::string::size_type v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
      if (v6 == (uint64_t *)v13) {
        goto LABEL_12;
      }
    }
    std::string::operator=(v3, __str);
    *(_DWORD *)this = v8;
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9);
  }
LABEL_12:
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v13[0]);
}

void sub_1C5F98298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v21);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a19);
  if (*(char *)(v19 + 31) < 0) {
    operator delete(*v20);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetStoredItems(uint64_t **this, const google::protobuf::Message *a2)
{
  this[1] = 0;
  uint64_t v2 = this + 1;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a2)
  {
    (*(void (**)(const google::protobuf::Message *))(*(void *)a2 + 168))(a2);
    if (v5)
    {
      UnknownFields = (uint64_t *)google::protobuf::Reflection::GetUnknownFields(v5, a2);
      uint64_t v8 = *UnknownFields;
      if ((int)((unint64_t)(UnknownFields[1] - *UnknownFields) >> 4) >= 1)
      {
        uint64_t v9 = 0;
        while (1)
        {
          double v10 = (unsigned int *)(v8 + 16 * v9);
          if (v10[1] == 3) {
            break;
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unhandled field type '%d' for unknown field", v6, v10[1]);
LABEL_17:
          ++v9;
          uint64_t v8 = *UnknownFields;
          if (v9 >= (int)((unint64_t)(UnknownFields[1] - *UnknownFields) >> 4)) {
            return;
          }
        }
        uint64_t v11 = *((void *)v10 + 1);
        siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v24);
        google::protobuf::MessageLite::ParseFromString(v24, v11);
        uint64_t v12 = (_DWORD *)v25;
        int v13 = *(char *)(v25 + 23);
        if (v13 < 0)
        {
          if (*(void *)(v25 + 8) != 4) {
            goto LABEL_13;
          }
          uint64_t v12 = *(_DWORD **)v25;
        }
        else if (v13 != 4)
        {
          goto LABEL_13;
        }
        if (*v12 == 1112556374)
        {
          int v17 = *v10;
          uint64_t v18 = *v2;
          uint64_t v19 = v2;
          int v20 = v2;
          if (*v2)
          {
            while (1)
            {
              while (1)
              {
                int v20 = (void *)v18;
                int v21 = *(_DWORD *)(v18 + 32);
                if (v17 >= v21) {
                  break;
                }
                uint64_t v18 = *v20;
                uint64_t v19 = v20;
                if (!*v20) {
                  goto LABEL_26;
                }
              }
              if (v21 >= v17) {
                break;
              }
              uint64_t v18 = v20[1];
              if (!v18)
              {
                uint64_t v19 = v20 + 1;
                goto LABEL_26;
              }
            }
          }
          else
          {
LABEL_26:
            int v22 = operator new(0x60uLL);
            v26[0] = (uint64_t)v22;
            v26[1] = (uint64_t)v2;
            char v27 = 0;
            v22[8] = v17;
            siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)(v22 + 10));
            char v27 = 1;
            *(void *)int v22 = 0;
            *((void *)v22 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
            *((void *)v22 + 2) = v20;
            void *v19 = v22;
            char v23 = (uint64_t *)**this;
            if (v23)
            {
              *this = v23;
              int v22 = (_DWORD *)*v19;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[1], (uint64_t *)v22);
            this[2] = (uint64_t *)((char *)this[2] + 1);
            int v20 = (void *)v26[0];
            v26[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>>>>::reset[abi:ne180100](v26);
          }
          if (v24 != (unsigned char *)(v20 + 5))
          {
            siri::dialogengine::CatBinary::vcat_item::Clear((siri::dialogengine::CatBinary::vcat_item *)(v20 + 5));
            siri::dialogengine::CatBinary::vcat_item::MergeFrom((siri::dialogengine::CatBinary::vcat_item *)(v20 + 5), (const siri::dialogengine::CatBinary::vcat_item *)v24);
          }
          goto LABEL_16;
        }
LABEL_13:
        uint64_t v14 = *v10;
        long long v16 = *(uint64_t **)((*(uint64_t (**)(const google::protobuf::Message *))(*(void *)a2 + 168))(a2)
                          + 8);
        if (*((char *)v16 + 23) < 0) {
          long long v16 = (uint64_t *)*v16;
        }
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized field %d of message '%s'", v15, v14, v16);
LABEL_16:
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v24);
        goto LABEL_17;
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
    }
  }
}

void sub_1C5F98558(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*a1);
    std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a1[1]);
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)(a1 + 5));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)(v1 + 40));
    }
    operator delete((void *)v1);
  }
}

void siri::dialogengine::SetField(uint64_t a1, google::protobuf::Message *a2, const std::string::value_type ***a3, google::protobuf::FieldDescriptor *this, const std::string *a5)
{
  v125[7] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(__str);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v125);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, (const void **)&__str[0].__r_.__value_.__l.__data_, 2);
    for (unint64_t i = 48; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__str[i / 0x18]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, &dword_1C5C1E000);
  }
  if (a2 && a3)
  {
    int v10 = *((_DWORD *)this + 15);
    uint64_t v11 = (std::once_flag::_State_type *)*((void *)this + 6);
    if (v11)
    {
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
      if (atomic_load_explicit((atomic_ullong *volatile)v11, memory_order_acquire) != -1)
      {
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
        __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v119;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::__call_once(v11, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    unsigned int v12 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)this + 14)];
    switch(*((_DWORD *)this + 14))
    {
      case 1:
        double v20 = siri::dialogengine::StringToDouble(a5, 0);
        double v21 = v20;
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddDouble(a3, a2, (const std::string::value_type **)this, v20, v18, v19);
          char v23 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v23 + 23) < 0) {
            char v23 = (uint64_t *)*v23;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Double to repeated field '%s': %g", v22, v23, *(void *)&v21);
        }
        else
        {
          google::protobuf::Reflection::SetDouble(a3, a2, (const std::string::value_type **)this, v20, v18, v19);
          int v68 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v68 + 23) < 0) {
            int v68 = (uint64_t *)*v68;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Double field '%s' to %g", v67, v68, *(void *)&v21);
        }
        return;
      case 2:
        double v45 = siri::dialogengine::StringToDouble(a5, 0);
        float v46 = v45;
        if (v10 == 3)
        {
          float v47 = v45;
          google::protobuf::Reflection::AddFloat(a3, a2, (const std::string::value_type **)this, v47, v43, v44);
          std::string::size_type v49 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v49 + 23) < 0) {
            std::string::size_type v49 = (uint64_t *)*v49;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Float to repeated field '%s': %g", v48, v49, v46);
        }
        else
        {
          float v77 = v45;
          google::protobuf::Reflection::SetFloat(a3, a2, (const std::string::value_type **)this, v77, v43, v44);
          char v79 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v79 + 23) < 0) {
            char v79 = (uint64_t *)*v79;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Float field '%s' to %g", v78, v79, v46);
        }
        return;
      case 3:
      case 0x10:
      case 0x12:
        uint64_t v40 = (uint64_t *)siri::dialogengine::StringToInt64(a5, 0, 0);
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddInt64(a3, a2, (const std::string::value_type **)this, (uint64_t)v40, v39);
          std::string v42 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v42 + 23) < 0) {
            std::string v42 = (uint64_t *)*v42;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Int64 to repeated field '%s': %lld", v41, v42, v40);
        }
        else
        {
          google::protobuf::Reflection::SetInt64(a3, a2, (const std::string::value_type **)this, v40, v39);
          BOOL v76 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v76 + 23) < 0) {
            BOOL v76 = (uint64_t *)*v76;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Int64 field '%s' to %lld", v75, v76, v40);
        }
        return;
      case 4:
      case 6:
        uint64_t v30 = (uint64_t *)siri::dialogengine::StringToUInt64(a5, 0, 0);
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddUInt64(a3, a2, (const std::string::value_type **)this, (uint64_t)v30, v29);
          uint64_t v32 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v32 + 23) < 0) {
            uint64_t v32 = (uint64_t *)*v32;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added UInt64 to repeated field '%s': %llu", v31, v32, v30);
        }
        else
        {
          google::protobuf::Reflection::SetUInt64(a3, a2, (const std::string::value_type **)this, v30, v29);
          uint64_t v72 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v72 + 23) < 0) {
            uint64_t v72 = (uint64_t *)*v72;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set UInt64 field '%s' to %llu", v71, v72, v30);
        }
        return;
      case 5:
      case 0xF:
      case 0x11:
        uint64_t v14 = siri::dialogengine::StringToInt(a5, 0, 0);
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddInt32(a3, a2, (const std::string::value_type **)this, v14, v13);
          long long v16 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v16 + 23) < 0) {
            long long v16 = (uint64_t *)*v16;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Int32 to repeated field '%s': %d", v15, v16, v14);
        }
        else
        {
          google::protobuf::Reflection::SetInt32(a3, a2, (const std::string::value_type **)this, v14, v13);
          uint64_t v74 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v74 + 23) < 0) {
            uint64_t v74 = (uint64_t *)*v74;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Int32 field '%s' to %d", v73, v74, v14);
        }
        return;
      case 7:
      case 0xD:
        uint64_t v26 = siri::dialogengine::StringToUInt(a5, 0, 0);
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddUInt32(a3, a2, (const std::string::value_type **)this, v26, v25);
          BOOL v28 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v28 + 23) < 0) {
            BOOL v28 = (uint64_t *)*v28;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added UInt32 to repeated field '%s': %u", v27, v28, v26);
        }
        else
        {
          google::protobuf::Reflection::SetUInt32(a3, a2, (const std::string::value_type **)this, v26, v25);
          std::string::size_type v70 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v70 + 23) < 0) {
            std::string::size_type v70 = (uint64_t *)*v70;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set UInt32 field '%s' to %u", v69, v70, v26);
        }
        return;
      case 8:
        unsigned int v51 = siri::dialogengine::StringToBool(a5);
        if (v10 == 3)
        {
          google::protobuf::Reflection::AddBool(a3, a2, (const std::string::value_type **)this, v51, v50);
          uint64_t v53 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v53 + 23) < 0) {
            uint64_t v53 = (uint64_t *)*v53;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Bool to repeated field '%s': %d", v52, v53, v51);
        }
        else
        {
          google::protobuf::Reflection::SetBool(a3, a2, (const std::string::value_type **)this, v51, v50);
          char v81 = (uint64_t *)*((void *)this + 1);
          if (*((char *)v81 + 23) < 0) {
            char v81 = (uint64_t *)*v81;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Bool field '%s' to %d", v80, v81, v51);
        }
        return;
      case 9:
      case 0xC:
        siri::dialogengine::StringTrim(" \t\n\r", a5, __str);
        siri::dialogengine::StringTrim(" \t\n\r", __str, &__p);
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0 && __str[0].__r_.__value_.__l.__size_ >= 0x400)
        {
          std::string::basic_string(&v119, __str, 0, 0x28uLL, (std::allocator<char> *)&v118);
          int v57 = std::string::append(&v119, "...");
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v120.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::basic_string(&v118, __str, size - 40, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v122);
          if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v118;
          }
          else {
            long long v60 = (std::string *)v118.__r_.__value_.__r.__words[0];
          }
          if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v118.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v120, (const std::string::value_type *)v60, v61);
          std::string::size_type v63 = v62->__r_.__value_.__r.__words[0];
          v123[0] = v62->__r_.__value_.__l.__size_;
          *(void *)((char *)v123 + 7) = *(std::string::size_type *)((char *)&v62->__r_.__value_.__r.__words[1] + 7);
          char v64 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = v63;
          __p.__r_.__value_.__l.__size_ = v123[0];
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v123 + 7);
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v64;
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v118.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v120.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v119.__r_.__value_.__l.__data_);
          }
        }
        long long v65 = (void *)*((void *)this + 1);
        if (*((char *)v65 + 23) < 0)
        {
          uint64_t v82 = v65[1];
          if (v82 != 27)
          {
            if (v82 != 37) {
              goto LABEL_171;
            }
            long long v65 = (void *)*v65;
LABEL_105:
            if (memcmp(v65, "SnippetUI.Response.Component.group_id", 0x25uLL)
              || (siri::dialogengine::ResponseHasGroup(*(void *)(a1 + 504), *(std::__shared_weak_count **)(a1 + 512), (uint64_t)__str) & 1) != 0)
            {
              goto LABEL_171;
            }
            goto LABEL_167;
          }
          if (*(void *)*v65 != 0x5574657070696E53
            || *(void *)(*v65 + 8) != 0x6E6F707365522E49
            || *(void *)(*v65 + 16) != 0x70756F72472E6573
            || *(void *)(*v65 + 19) != 0x64692E70756F7247)
          {
            goto LABEL_171;
          }
        }
        else
        {
          int v66 = *((unsigned __int8 *)v65 + 23);
          if (v66 != 27)
          {
            if (v66 != 37) {
              goto LABEL_171;
            }
            goto LABEL_105;
          }
          if (*v65 != 0x5574657070696E53
            || v65[1] != 0x6E6F707365522E49
            || v65[2] != 0x70756F72472E6573
            || *(void *)((char *)v65 + 19) != 0x64692E70756F7247)
          {
            goto LABEL_171;
          }
        }
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v100 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v100 = __str[0].__r_.__value_.__l.__size_;
        }
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v101 = __str;
        }
        else {
          uint64_t v101 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
        }
        if (v100 >= 1)
        {
          uint64_t v102 = (char *)v101 + v100;
          int v103 = v101;
          while (1)
          {
            int v104 = memchr(v103, 35, v100);
            if (!v104) {
              goto LABEL_166;
            }
            if (*v104 == 35) {
              break;
            }
            int v103 = (std::string *)(v104 + 1);
            int64_t v100 = v102 - (unsigned char *)v103;
            if (v102 - (unsigned char *)v103 < 1) {
              goto LABEL_166;
            }
          }
          if (v104 != v102 && v104 - (unsigned char *)v101 != -1)
          {
            std::operator+<char>();
            int v105 = std::string::append(&v119, "'");
            long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
            v120.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v106;
            v105->__r_.__value_.__l.__size_ = 0;
            v105->__r_.__value_.__r.__words[2] = 0;
            v105->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError(a1, (long long *)&v120, 0);
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
          }
        }
LABEL_166:
        if (!siri::dialogengine::ResponseHasGroup(*(void *)(a1 + 504), *(std::__shared_weak_count **)(a1 + 512), (uint64_t)__str))
        {
LABEL_171:
          long long v109 = (std::once_flag::_State_type *)*((void *)this + 6);
          if (v109)
          {
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
            v123[0] = this;
            if (atomic_load_explicit((atomic_ullong *volatile)v109, memory_order_acquire) != -1)
            {
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
              v120.__r_.__value_.__l.__size_ = (std::string::size_type)v123;
              v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
              std::__call_once(v109, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
            }
          }
          if (*((_DWORD *)this + 14) == 12)
          {
            siri::dialogengine::DecodeBase64((std::string::size_type)__str, &v120);
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str[0].__r_.__value_.__l.__data_);
            }
            __str[0] = v120;
          }
          if (v10 == 3)
          {
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v117, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
            }
            else {
              std::string v117 = __str[0];
            }
            *(void *)&double v111 = google::protobuf::Reflection::AddString(a3, (uint64_t)a2, (const std::string::value_type **)this, (uint64_t)&v117, v56).n128_u64[0];
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v117.__r_.__value_.__l.__data_);
            }
            int v112 = (uint64_t *)*((void *)this + 1);
            if (*((char *)v112 + 23) < 0) {
              int v112 = (uint64_t *)*v112;
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v114 = "Added to repeated string '%s': '%s'";
          }
          else
          {
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v116, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
            }
            else {
              std::string v116 = __str[0];
            }
            google::protobuf::Reflection::SetString((uint64_t)a3, a2, (const std::string::value_type **)this, (uint64_t *)&v116, v56);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            int v112 = (uint64_t *)*((void *)this + 1);
            if (*((char *)v112 + 23) < 0) {
              int v112 = (uint64_t *)*v112;
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v114 = "Set string field '%s' to '%s'";
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v114, v110, v111, v112, p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v93 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_201;
          }
          goto LABEL_202;
        }
LABEL_167:
        std::operator+<char>();
        char v107 = std::string::append(&v119, "'");
        long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        v120.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)&v120, 0);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        goto LABEL_171;
      case 0xA:
      case 0xB:
        uint64_t v24 = (uint64_t *)*((void *)this + 1);
        if (*((char *)v24 + 23) < 0) {
          uint64_t v24 = (uint64_t *)*v24;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of type Message and should not be handled here", (const char *)a2, v24);
        return;
      case 0xE:
        uint64_t v33 = google::protobuf::FieldDescriptor::enum_type(this);
        if (!v33)
        {
          std::operator+<char>();
          siri::dialogengine::Log::LogWithLevel((uint64_t)__str, 3u);
          goto LABEL_202;
        }
        siri::dialogengine::StringTrim(" \t\n\r", a5, __str);
        uint64_t v34 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, (const void **)&__str[0].__r_.__value_.__l.__data_);
        if ((_UNKNOWN *)v34 != &unk_1EA3D9790) {
          std::string::operator=(__str, (const std::string *)(v34 + 56));
        }
        uint64_t ValueByName = google::protobuf::EnumDescriptor::FindValueByName(v33, (uint64_t)__str);
        if (ValueByName)
        {
          if (v10 == 3)
          {
            google::protobuf::Reflection::AddEnum((uint64_t *)a3, a2, (const std::string::value_type **)this, ValueByName);
            std::string v37 = (uint64_t *)*((void *)this + 1);
            std::string v38 = "Added to repeated enum '%s': %d";
            if (*((char *)v37 + 23) < 0) {
              goto LABEL_135;
            }
          }
          else
          {
            google::protobuf::Reflection::SetEnum((uint64_t *)a3, a2, (const std::string::value_type **)this, ValueByName);
            std::string v37 = (uint64_t *)*((void *)this + 1);
            std::string v38 = "Set enum field '%s' to %d";
            if (*((char *)v37 + 23) < 0) {
LABEL_135:
            }
              std::string v37 = (uint64_t *)*v37;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v38, v36, v37, *(unsigned int *)(ValueByName + 16));
          goto LABEL_202;
        }
        std::operator+<char>();
        uint64_t v83 = std::string::append(&v118, "\" for field '");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v119.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        uint64_t v85 = *((void *)this + 1);
        int v86 = *(char *)(v85 + 23);
        if (v86 >= 0) {
          int v87 = (const std::string::value_type *)*((void *)this + 1);
        }
        else {
          int v87 = *(const std::string::value_type **)v85;
        }
        if (v86 >= 0) {
          std::string::size_type v88 = *(unsigned __int8 *)(v85 + 23);
        }
        else {
          std::string::size_type v88 = *(void *)(v85 + 8);
        }
        std::string::size_type v89 = std::string::append(&v119, v87, v88);
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        v120.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        long long v91 = std::string::append(&v120, "'");
        long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v93 = (void *)v118.__r_.__value_.__r.__words[0];
LABEL_201:
          operator delete(v93);
        }
LABEL_202:
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        break;
      default:
        uint64_t v54 = (uint64_t *)*((void *)this + 1);
        if (*((char *)v54 + 23) < 0) {
          uint64_t v54 = (uint64_t *)*v54;
        }
        uint64_t v55 = (std::once_flag::_State_type *)*((void *)this + 6);
        if (v55)
        {
          v120.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v119.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
          if (atomic_load_explicit((atomic_ullong *volatile)v55, memory_order_acquire) != -1)
          {
            __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
            __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v119;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::__call_once(v55, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
          unsigned int v12 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)this + 14)];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of unhandled cpp type '%s'", (const char *)a2, v54, google::protobuf::FieldDescriptor::kCppTypeToName[v12]);
        return;
    }
  }
  else
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = (uint64_t *)a5;
    }
    else {
      int v17 = (uint64_t *)a5->__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Null value attempting to set field to '%s'", (const char *)a2, v17);
  }
}

void sub_1C5F9947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v58 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "FULL");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "CONTENT");
  return a1;
}

void sub_1C5F9966C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "SUPPORTING");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "CAPTION");
  return a1;
}

void sub_1C5F996C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ResponseHasGroup(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!a1)
  {
    uint64_t v14 = 0;
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)(a1 + 256);
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6 || *(int *)(v6 + 304) < 1)
  {
LABEL_25:
    uint64_t v14 = 0;
    if (v5) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  int v7 = 0;
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(v6 + 296, v7)+ 40);
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    if (v10 != v11) {
      goto LABEL_24;
    }
    int v13 = v12 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
    if ((v9 & 0x80) != 0) {
      break;
    }
    if (!v8[23]) {
      goto LABEL_28;
    }
    while (*v8 == *v13)
    {
      ++v8;
      ++v13;
      if (!--v9) {
        goto LABEL_28;
      }
    }
LABEL_24:
    if (++v7 >= *(_DWORD *)(v6 + 304)) {
      goto LABEL_25;
    }
  }
  if (memcmp(*(const void **)v8, v13, *((void *)v8 + 1))) {
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v14 = 1;
  if (v5) {
LABEL_29:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_30:
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v14;
}

void sub_1C5F99820(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    std::string::size_type v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C5F99904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ValidateSnippetUIMessage(siri::dialogengine *this, siri::dialogengine::Context *a2, const google::protobuf::Message *a3)
{
  if (!this)
  {
    LOBYTE(v28) = 0;
    return v28 & 1;
  }
  (*(void (**)(void **__return_ptr, siri::dialogengine::Context *))(*(void *)a2 + 16))(v101, a2);
  (*(void (**)(siri::dialogengine::Context *))(*(void *)a2 + 168))(a2);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = (*(uint64_t (**)(siri::dialogengine::Context *))(*(void *)a2 + 168))(a2)) == 0)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v103, 3u);
    if (SHIBYTE(v105) < 0) {
      operator delete(v103);
    }
    LOBYTE(v28) = 0;
    goto LABEL_169;
  }
  v100[0] = 0;
  v100[1] = 0;
  int v99 = v100;
  siri::dialogengine::GetStoredItems((uint64_t **)&v108, a2);
  std::string::size_type v8 = v108.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v108.__r_.__value_.__l.__data_ != &v108.__r_.__value_.__r.__words[1])
  {
    do
    {
      LODWORD(v103) = *(_DWORD *)(v8 + 32);
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v104, (const siri::dialogengine::CatBinary::vcat_item *)(v8 + 40));
      if (v107 == 2)
      {
        uint64_t v9 = *(void *)(v106 + 32);
        if ((*(char *)(v9 + 23) & 0x80000000) == 0)
        {
          if (!*(unsigned char *)(v9 + 23)) {
            goto LABEL_11;
          }
LABEL_10:
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v99, *(const void ***)(v106 + 24), *(void *)(v106 + 24));
          goto LABEL_11;
        }
        if (*(void *)(v9 + 8)) {
          goto LABEL_10;
        }
      }
LABEL_11:
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v104);
      uint64_t v10 = *(std::string **)(v8 + 8);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = *(std::string **)(v8 + 16);
          BOOL v62 = v11->__r_.__value_.__r.__words[0] == v8;
          std::string::size_type v8 = (std::string::size_type)v11;
        }
        while (!v62);
      }
      std::string::size_type v8 = (std::string::size_type)v11;
    }
    while (v11 != (std::string *)&v108.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy((void *)v108.__r_.__value_.__l.__size_);
  int v104 = 0;
  uint64_t v105 = 0;
  int v103 = &v104;
  int v12 = (uint64_t *)v99;
  if (v99 != v100)
  {
    do
    {
      if (*((char *)v12 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v108, (const std::string::value_type *)v12[4], v12[5]);
      }
      else {
        std::string v108 = *(std::string *)(v12 + 4);
      }
      uint64_t FieldByName = google::protobuf::Descriptor::FindFieldByName(v7, (uint64_t)&v108);
      if (FieldByName)
      {
        uint64_t v14 = *(const void ****)(FieldByName + 88);
        if (v14) {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v103, *v14, (uint64_t)*v14);
        }
      }
      else
      {
        std::operator+<char>();
        std::string v15 = std::string::append(&v94, " field '");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v17 = &v108;
        }
        else {
          int v17 = (std::string *)v108.__r_.__value_.__r.__words[0];
        }
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v108.__r_.__value_.__l.__size_;
        }
        uint64_t v19 = std::string::append(&v95, (const std::string::value_type *)v17, size);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        double v21 = std::string::append(&v96, "'");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        int64_t v98 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if (SHIBYTE(v98) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      char v23 = (char *)v12[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = (char **)v23;
          char v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (char **)v12[2];
          BOOL v62 = *v24 == (char *)v12;
          int v12 = (uint64_t *)v24;
        }
        while (!v62);
      }
      int v12 = (uint64_t *)v24;
    }
    while (v24 != v100);
  }
  RequiredFields = siri::dialogengine::vcat::GetRequiredFields((uint64_t)v101);
  uint64_t v26 = RequiredFields + 1;
  char v27 = (void *)*RequiredFields;
  int v28 = 1;
  if ((uint64_t *)*RequiredFields != RequiredFields + 1)
  {
    while (1)
    {
      if (*((char *)v27 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v108, (const std::string::value_type *)v27[4], v27[5]);
      }
      else {
        std::string v108 = *(std::string *)(v27 + 4);
      }
      if (v100 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v99, (const void **)&v108.__r_.__value_.__l.__data_))break; {
LABEL_51:
      }
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      char v29 = (uint64_t *)v27[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          char v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (uint64_t *)v27[2];
          BOOL v62 = *v30 == (void)v27;
          char v27 = v30;
        }
        while (!v62);
      }
      char v27 = v30;
      if (v30 == v26) {
        goto LABEL_117;
      }
    }
    uint64_t v31 = google::protobuf::Descriptor::FindFieldByName(v7, (uint64_t)&v108);
    uint64_t OneofByName = google::protobuf::Descriptor::FindOneofByName(v7, (uint64_t)&v108);
    if (v31)
    {
      long long v35 = *(std::once_flag::_State_type **)(v31 + 48);
      if (v35)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v94.__r_.__value_.__r.__words[0] = v31;
        if (atomic_load_explicit((atomic_ullong *volatile)v35, memory_order_acquire) != -1)
        {
          __p[0] = &v95;
          __p[1] = &v94;
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v35, &v96, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      unsigned int v36 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v31 + 56)];
      if (v36 == 7) {
        goto LABEL_51;
      }
      std::string v37 = *(std::once_flag::_State_type **)(v31 + 48);
      if (v37)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v94.__r_.__value_.__r.__words[0] = v31;
        if (atomic_load_explicit((atomic_ullong *volatile)v37, memory_order_acquire) != -1)
        {
          __p[0] = &v95;
          __p[1] = &v94;
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v37, &v96, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        unsigned int v36 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v31 + 56)];
      }
      if (v36 == 8) {
        goto LABEL_51;
      }
      if (*(_DWORD *)(v31 + 60) == 3)
      {
        if (!google::protobuf::Reflection::FieldSize(v6, a2, (const std::string::value_type **)v31, v32, v33))
        {
          siri::dialogengine::ElementNameFromFieldName((uint64_t)&v108, (uint64_t)__p);
          std::operator+<char>();
          std::string v38 = std::string::append(&v93, " is missing required element '");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          if (v98 >= 0) {
            uint64_t v40 = __p;
          }
          else {
            uint64_t v40 = (void **)__p[0];
          }
          if (v98 >= 0) {
            std::string::size_type v41 = HIBYTE(v98);
          }
          else {
            std::string::size_type v41 = (std::string::size_type)__p[1];
          }
LABEL_85:
          uint64_t v44 = std::string::append(&v94, (const std::string::value_type *)v40, v41);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          float v46 = std::string::append(&v95, "'");
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)this, (long long *)&v96, 0);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v98) < 0) {
            operator delete(__p[0]);
          }
          int v28 = 0;
        }
      }
      else if ((google::protobuf::Reflection::HasField(v6, a2, (const std::string::value_type **)v31, v32, v33) & 1) == 0)
      {
        siri::dialogengine::ElementNameFromFieldName((uint64_t)&v108, (uint64_t)__p);
        std::operator+<char>();
        std::string v42 = std::string::append(&v93, " is missing required element '");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        if (v98 >= 0) {
          uint64_t v40 = __p;
        }
        else {
          uint64_t v40 = (void **)__p[0];
        }
        if (v98 >= 0) {
          std::string::size_type v41 = HIBYTE(v98);
        }
        else {
          std::string::size_type v41 = (std::string::size_type)__p[1];
        }
        goto LABEL_85;
      }
    }
    if (OneofByName
      && !google::protobuf::Reflection::HasOneof((uint64_t)v6, (uint64_t)a2, OneofByName)
      && &v104 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v103, (const void **)&v108.__r_.__value_.__l.__data_))
    {
      siri::dialogengine::ElementNameFromFieldName((uint64_t)&v108, (uint64_t)__p);
      std::operator+<char>();
      uint64_t v48 = std::string::append(&v93, " is missing required oneof choice for element '");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if (v98 >= 0) {
        std::string::size_type v50 = __p;
      }
      else {
        std::string::size_type v50 = (void **)__p[0];
      }
      if (v98 >= 0) {
        std::string::size_type v51 = HIBYTE(v98);
      }
      else {
        std::string::size_type v51 = (std::string::size_type)__p[1];
      }
      char v52 = std::string::append(&v94, (const std::string::value_type *)v50, v51);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      uint64_t v54 = std::string::append(&v95, "'");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v96.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)this, (long long *)&v96, 0);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      int v28 = 0;
    }
    goto LABEL_51;
  }
LABEL_117:
  int v56 = v102;
  if (v102 < 0)
  {
    if (v101[1] != (void *)29) {
      goto LABEL_135;
    }
    int v57 = (void **)v101[0];
  }
  else
  {
    if (v102 != 29) {
      goto LABEL_135;
    }
    int v57 = v101;
  }
  uint64_t v58 = *v57;
  uint64_t v59 = v57[1];
  long long v60 = v57[2];
  uint64_t v61 = *(uint64_t *)((char *)v57 + 21);
  BOOL v62 = v58 == (void *)0x5574657070696E53 && v59 == (void *)0x456567616D492E49;
  if (v62 && v60 == (void *)0x422E746E656D656CLL && v61 == 0x656C646E75422E74)
  {
    if (v86)
    {
      uint64_t v88 = v86[3];
      if (*(char *)(v88 + 23) < 0) {
        uint64_t v89 = *(void *)(v88 + 8);
      }
      else {
        uint64_t v89 = *(unsigned __int8 *)(v88 + 23);
      }
      if (!v89)
      {
        uint64_t v91 = v86[4];
        if (!(*(char *)(v91 + 23) < 0 ? *(void *)(v91 + 8) : *(unsigned __int8 *)(v91 + 23)))
        {
          std::string::basic_string[abi:ne180100]<0>(&v108, "ImageElement.Bundle must have either bundle-id or bundle-path");
          siri::dialogengine::Context::AddValidationError((uint64_t)this, (long long *)&v108, 0);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v108.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else
    {
      long long v90 = (void **)v101[0];
      if (v56 >= 0) {
        long long v90 = v101;
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Could not get ImageElement.Bundle from message '%s'", v87, v90);
    }
  }
LABEL_135:
  memset(&v108, 0, sizeof(v108));
  google::protobuf::Reflection::ListFields((uint64_t)v6, a2, (uint64_t)&v108);
  std::string::size_type v68 = v108.__r_.__value_.__l.__size_;
  long long v67 = (const google::protobuf::FieldDescriptor **)v108.__r_.__value_.__r.__words[0];
  if (v108.__r_.__value_.__r.__words[0] == v108.__r_.__value_.__l.__size_) {
    goto LABEL_166;
  }
  do
  {
    int v69 = *v67;
    std::string::size_type v70 = *(uint64_t **)*v67;
    int v71 = *((char *)v70 + 23);
    if (v71 < 0)
    {
      if (v70[1] != 31) {
        goto LABEL_155;
      }
      std::string::size_type v70 = (uint64_t *)*v70;
    }
    else if (v71 != 31)
    {
      goto LABEL_155;
    }
    uint64_t v72 = (uint64_t *)*v70;
    uint64_t v73 = v70[1];
    uint64_t v74 = v70[2];
    uint64_t v75 = *(uint64_t *)((char *)v70 + 23);
    if (v72 == (uint64_t *)0x745F6D6574737973
      && v73 == 0x72616C635F747865
      && v74 == 0x6F69746163696669
      && v75 == 0x656C7469745F6E6FLL)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Visual CAT should not use 'SystemText_ClarificationTitle' until post 2022 OS release, except for Shortcuts.  Check with your designer");
      siri::dialogengine::Context::AddValidationWarning((uint64_t)this, (long long *)__p, 0);
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      int v28 = 0;
    }
LABEL_155:
    char v79 = (std::once_flag::_State_type *)*((void *)v69 + 6);
    if (v79)
    {
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      if (atomic_load_explicit((atomic_ullong *volatile)v79, memory_order_acquire) != -1)
      {
        __p[0] = &v95;
        __p[1] = &v94;
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v79, &v96, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if (google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)v69 + 14)] == 10)
    {
      if (*((_DWORD *)v69 + 15) == 3)
      {
        for (int i = 0;
              i < (int)google::protobuf::Reflection::FieldSize(v6, a2, (const std::string::value_type **)v69, v65, v66);
              ++i)
        {
          RepeatedMessage = (siri::dialogengine::Context *)google::protobuf::Reflection::GetRepeatedMessage(v6, a2, v69, i, v66);
          v28 &= siri::dialogengine::ValidateSnippetUIMessage(this, RepeatedMessage, v82);
        }
      }
      else
      {
        Message = (siri::dialogengine::Context *)google::protobuf::Reflection::GetMessage(v6, a2, (const std::string::value_type **)v69, 0, v66);
        v28 &= siri::dialogengine::ValidateSnippetUIMessage(this, Message, v84);
      }
    }
    ++v67;
  }
  while (v67 != (const google::protobuf::FieldDescriptor **)v68);
  long long v67 = (const google::protobuf::FieldDescriptor **)v108.__r_.__value_.__r.__words[0];
LABEL_166:
  if (v67)
  {
    v108.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
    operator delete(v67);
  }
  std::__tree<std::string>::destroy((uint64_t)&v103, v104);
  std::__tree<std::string>::destroy((uint64_t)&v99, v100[0]);
LABEL_169:
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  return v28 & 1;
}

void sub_1C5F9A568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,char *a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  std::__tree<std::string>::destroy(v54 - 192, *(char **)(v54 - 184));
  std::__tree<std::string>::destroy((uint64_t)&a46, a47);
  if (a54 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const google::protobuf::Message *siri::dialogengine::ExpandMessage(siri::dialogengine *this, siri::dialogengine::Context *a2, google::protobuf::Message *a3)
{
  if (!this)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Null Context while expanding message", (const char *)a2, a3);
    return 0;
  }
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  uint64_t v4 = this;
  if (!(*(unsigned int (**)(siri::dialogengine::Context *, siri::dialogengine::Context *, google::protobuf::Message *))(*(void *)a2 + 64))(a2, a2, a3))return 0; {
  (*(void (**)(void **__return_ptr, const google::protobuf::Message *))(*(void *)v3 + 16))(v210, v3);
  }
  uint64_t v5 = (*(uint64_t (**)(const google::protobuf::Message *))(*(void *)v3 + 168))(v3);
  uint64_t v7 = v5;
  if (!v5)
  {
    uint64_t v11 = v210;
    if (v211 < 0) {
      uint64_t v11 = (void **)v210[0];
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message descriptor for message type '%s'", v6, v11);
    uint64_t v3 = 0;
    goto LABEL_352;
  }
  std::string::size_type v8 = *(long long **)(v5 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v209.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v9;
  }
  (*(void (**)(const google::protobuf::Message *))(*(void *)v3 + 168))(v3);
  int v13 = v12;
  if (!v12)
  {
    uint64_t v89 = &v209;
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v89 = (std::string *)v209.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection for '%s'", 0, v89);
    uint64_t v3 = 0;
    goto LABEL_350;
  }
  siri::dialogengine::GetMessageCondition(&v208, v3);
  if (siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v208))
  {
    double v15 = google::protobuf::Reflection::MutableUnknownFields(v13, v3);
    int v17 = v16;
    if (v16)
    {
      siri::dialogengine::GetListInfo(&v205, v4, v3);
      uint64_t v18 = v205;
      if (v205 != (uint64_t *)&v206)
      {
        do
        {
          std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100]((std::string *)&v187, (long long *)v18 + 2);
          uint64_t v19 = v196;
          unsigned __int8 v20 = v196;
          if ((v196 & 0x80u) != 0) {
            uint64_t v19 = v195;
          }
          if (v19) {
            BOOL v21 = 1;
          }
          else {
            BOOL v21 = SDWORD2(v188) <= 19999;
          }
          if (v21)
          {
            google::protobuf::UnknownFieldSet::DeleteByNumber(v17, SDWORD2(v188));
            unsigned __int8 v20 = v196;
          }
          if ((v20 & 0x80) != 0) {
            operator delete(__p);
          }
          if (v193 < 0) {
            operator delete(v192);
          }
          if (v191 < 0) {
            operator delete(v190);
          }
          if (*((void *)&v189 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v189 + 1));
          }
          if (SBYTE7(v188) < 0) {
            operator delete((void *)v187);
          }
          long long v22 = (uint64_t *)v18[1];
          if (v22)
          {
            do
            {
              char v23 = v22;
              long long v22 = (uint64_t *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              char v23 = (uint64_t *)v18[2];
              BOOL v37 = *v23 == (void)v18;
              uint64_t v18 = v23;
            }
            while (!v37);
          }
          uint64_t v18 = v23;
        }
        while (v23 != (uint64_t *)&v206);
      }
      int v178 = (const std::string::value_type ***)v13;
      v204[1] = 0;
      uint64_t v203 = (uint64_t *)v204;
      v204[0] = 0;
      uint64_t v176 = v7;
      siri::dialogengine::GetStoredItems(&v201, v3);
      uint64_t v24 = v201;
      std::string v177 = v4;
      if (v201 != (uint64_t *)v202)
      {
        do
        {
          LODWORD(v181.__r_.__value_.__l.__data_) = *((_DWORD *)v24 + 8);
          siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v181.__r_.__value_.__r.__words[1], (const siri::dialogengine::CatBinary::vcat_item *)(v24 + 5));
          int data = (int)v181.__r_.__value_.__l.__data_;
          if ((v182 & 2) != 0)
          {
            if (*(char *)(v183 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v187, *(const std::string::value_type **)v183, *(void *)(v183 + 8));
            }
            else
            {
              long long v25 = *(_OWORD *)v183;
              *(void *)&long long v188 = *(void *)(v183 + 16);
              long long v187 = v25;
            }
            if ((siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v187) & 1) == 0)
            {
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v203, &data, &data);
              if (SBYTE7(v188) < 0)
              {
                char v29 = (void *)v187;
LABEL_88:
                operator delete(v29);
                goto LABEL_89;
              }
              goto LABEL_89;
            }
            if (SBYTE7(v188) < 0) {
              operator delete((void *)v187);
            }
          }
          if (v184 == 2)
          {
            uint64_t v26 = *((void *)&v183 + 1);
            char v27 = *(long long **)(*((void *)&v183 + 1) + 24);
            if (*((char *)v27 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)v27, *((void *)v27 + 1));
            }
            else
            {
              long long v28 = *v27;
              v199.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
              *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v28;
            }
            uint64_t v30 = *(long long **)(v26 + 32);
            if (*((char *)v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)v30, *((void *)v30 + 1));
            }
            else
            {
              long long v31 = *v30;
              v198.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
              *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v31;
            }
            uint64_t v32 = *(long long **)(v26 + 40);
            if (*((char *)v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)v32, *((void *)v32 + 1));
            }
            else
            {
              long long v33 = *v32;
              v197.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
              *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v33;
            }
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v203, &data, &data);
            if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) == 9)
              {
                uint64_t v34 = &v197;
                goto LABEL_67;
              }
              goto LABEL_71;
            }
            if (v197.__r_.__value_.__l.__size_ != 9) {
              goto LABEL_71;
            }
            uint64_t v34 = (std::string *)v197.__r_.__value_.__r.__words[0];
LABEL_67:
            std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
            int v36 = v34->__r_.__value_.__s.__data_[8];
            BOOL v37 = v35 == 0x736D5F666F656E6FLL && v36 == 103;
            if (v37)
            {
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              siri::dialogengine::GetMessageInterface((siri::dialogengine *)&v187, v3);
              if ((_BYTE)v187)
              {
                uint64_t v48 = v188;
                long long v49 = *(long long **)(v188 + 8);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)v49, *((void *)v49 + 1));
                }
                else
                {
                  long long v50 = *v49;
                  v179.__r_.__value_.__r.__words[2] = *((void *)v49 + 2);
                  *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v50;
                }
                siri::dialogengine::StringSplit((unsigned __int8 *)&v199, " \t\n\r", &v214);
                uint64_t v54 = v214;
                if ((char *)v215 - (char *)v214 == 48)
                {
                  if (*((char *)v214 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v213, (const std::string::value_type *)*v214, (std::string::size_type)v214[1]);
                    uint64_t v54 = v214;
                  }
                  else
                  {
                    long long v55 = *(_OWORD *)v214;
                    v213.__r_.__value_.__r.__words[2] = (std::string::size_type)v214[2];
                    *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v55;
                  }
                  if (*((char *)v54 + 47) < 0) {
                    std::string::__init_copy_ctor_external(&v212, (const std::string::value_type *)v54[3], (std::string::size_type)v54[4]);
                  }
                  else {
                    std::string v212 = *(std::string *)((unsigned char *)v54 + 1);
                  }
                  uint64_t OneofByName = google::protobuf::Descriptor::FindOneofByName(v48, (uint64_t)&v213);
                  if (OneofByName)
                  {
                    uint64_t v59 = *(unsigned int *)(OneofByName + 24);
                    long long v60 = (siri::dialogengine::Context *)HIBYTE(v212.__r_.__value_.__r.__words[2]);
                    uint64_t v61 = (std::string *)v212.__r_.__value_.__r.__words[0];
                    if ((int)v59 >= 1)
                    {
                      uint64_t v62 = 0;
                      uint64_t v173 = OneofByName;
                      uint64_t v63 = *(void *)(OneofByName + 32);
                      size_t size = v212.__r_.__value_.__l.__size_;
                      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v65 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v65 = v212.__r_.__value_.__l.__size_;
                      }
                      while (1)
                      {
                        int v66 = *(const std::string::value_type ***)(v63 + 8 * v62);
                        if (v66)
                        {
                          long long v67 = (unsigned __int8 *)*((unsigned __int8 *)*v66 + 23);
                          int v68 = (char)v67;
                          if ((char)v67 < 0) {
                            long long v67 = (unsigned __int8 *)*((void *)*v66 + 1);
                          }
                          if ((unsigned __int8 *)v65 == v67)
                          {
                            if (v68 >= 0) {
                              uint64_t v58 = *v66;
                            }
                            else {
                              uint64_t v58 = *(const std::string::value_type **)*v66;
                            }
                            if ((v60 & 0x80) != 0)
                            {
                              long long v170 = v61;
                              int v171 = v60;
                              uint64_t v168 = v59;
                              uint64_t v169 = v63;
                              std::string::size_type v167 = v65;
                              int v71 = memcmp(v61, v58, size);
                              std::string::size_type v65 = v167;
                              uint64_t v59 = v168;
                              uint64_t v63 = v169;
                              uint64_t v61 = v170;
                              long long v60 = v171;
                              if (!v71)
                              {
LABEL_148:
                                if (google::protobuf::FieldDescriptor::type((google::protobuf::FieldDescriptor *)v66) == 11)
                                {
                                  float v77 = (const std::string::value_type ***)*((void *)&v188 + 1);
                                  if (google::protobuf::Reflection::GetOneofFieldDescriptor(*((uint64_t *)&v188 + 1), (uint64_t)v3, v173))
                                  {
                                    long long v80 = *(uint64_t **)(v173 + 8);
                                    if (*((char *)v80 + 23) < 0) {
                                      long long v80 = (uint64_t *)*v80;
                                    }
                                    char v81 = (unsigned __int8 **)v66[1];
                                    if (*((char *)v81 + 23) < 0) {
                                      char v81 = (unsigned __int8 **)*v81;
                                    }
                                    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Oneof '%s' value is already set.  Ignoring value for field '%s'", v78, v80, v81);
                                  }
                                  else
                                  {
                                    uint64_t v82 = google::protobuf::Reflection::MutableMessage(v77, v3, v66, 0, v79);
                                    if (v82)
                                    {
                                      v172 = (siri::dialogengine::Context *)v82;
                                      if ((google::protobuf::MessageLite::ParseFromString(v82, &v198) & 1) == 0)
                                      {
                                        int v86 = (unsigned __int8 **)v66[1];
                                        if (*((char *)v86 + 23) < 0) {
                                          int v86 = (unsigned __int8 **)*v86;
                                        }
                                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not set message contents for oneof field '%s'", v84, v86);
                                      }
                                      if (!siri::dialogengine::ExpandMessage(v4, v172, v85)) {
                                        google::protobuf::Reflection::ClearOneof((uint64_t)v77, v3, v173);
                                      }
                                    }
                                    else
                                    {
                                      int v87 = (unsigned __int8 **)v66[1];
                                      if (*((char *)v87 + 23) < 0) {
                                        int v87 = (unsigned __int8 **)*v87;
                                      }
                                      uint64_t v88 = *(uint64_t **)(v173 + 8);
                                      if (*((char *)v88 + 23) < 0) {
                                        uint64_t v88 = (uint64_t *)*v88;
                                      }
                                      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create message '%s' in oneof '%s'", v83, v87, v88);
                                    }
                                  }
                                  goto LABEL_161;
                                }
                                uint64_t v72 = *(std::string **)(v173 + 8);
                                if (SHIBYTE(v72->__r_.__value_.__r.__words[2]) < 0) {
                                  uint64_t v72 = (std::string *)v72->__r_.__value_.__r.__words[0];
                                }
                                uint64_t v73 = &v212;
                                if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  uint64_t v73 = (std::string *)v212.__r_.__value_.__r.__words[0];
                                }
                                uint64_t v74 = "Oneof '%s' field '%s' is not a message type";
LABEL_160:
                                siri::dialogengine::Log::Error((siri::dialogengine::Log *)v74, v58, v72, v73);
                                goto LABEL_161;
                              }
                            }
                            else
                            {
                              if (!v60) {
                                goto LABEL_148;
                              }
                              int v69 = &v212;
                              std::string::size_type v70 = v60;
                              while (v69->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v58)
                              {
                                int v69 = (std::string *)((char *)v69 + 1);
                                ++v58;
                                std::string::size_type v70 = (siri::dialogengine::Context *)((char *)v70 - 1);
                                if (!v70) {
                                  goto LABEL_148;
                                }
                              }
                            }
                          }
                        }
                        if (++v62 == v59)
                        {
                          uint64_t v61 = (std::string *)v212.__r_.__value_.__r.__words[0];
                          uint64_t OneofByName = v173;
                          break;
                        }
                      }
                    }
                    uint64_t v72 = &v212;
                    if ((char)v60 < 0) {
                      uint64_t v72 = v61;
                    }
                    uint64_t v73 = *(std::string **)(OneofByName + 8);
                    if (SHIBYTE(v73->__r_.__value_.__r.__words[2]) < 0) {
                      uint64_t v73 = (std::string *)v73->__r_.__value_.__r.__words[0];
                    }
                    uint64_t v74 = "Could not get oneof field '%s' from '%s'";
                    goto LABEL_160;
                  }
                  uint64_t v75 = &v179;
                  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v75 = (std::string *)v179.__r_.__value_.__r.__words[0];
                  }
                  BOOL v76 = &v213;
                  if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    BOOL v76 = (std::string *)v213.__r_.__value_.__r.__words[0];
                  }
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get oneof descriptor for message '%s' field '%s'", v58, v75, v76);
LABEL_161:
                  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v212.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v213.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  int v56 = &v199;
                  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    int v56 = (std::string *)v199.__r_.__value_.__r.__words[0];
                  }
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Oneof field name '%s' does not have two parts", v53, v56);
                }
                v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
                if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v179.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message interface", v47);
              }
            }
            else
            {
LABEL_71:
              std::string v38 = v206;
              if (!v206) {
                goto LABEL_81;
              }
              long long v39 = &v206;
              do
              {
                uint64_t v40 = v39;
                std::string::size_type v41 = (const void **)(v38 + 4);
                BOOL v42 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v207, (const void **)v38 + 4, (const void **)&v199.__r_.__value_.__l.__data_);
                long long v43 = v38 + 1;
                if (!v42)
                {
                  long long v43 = v38;
                  long long v39 = (void **)v38;
                }
                std::string v38 = (void *)*v43;
              }
              while (*v43);
              if (v39 == &v206
                || (!v42 ? (uint64_t v44 = v41) : (uint64_t v44 = (const void **)(v40 + 4)),
                    std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v207, (const void **)&v199.__r_.__value_.__l.__data_, v44)))
              {
LABEL_81:
                uint64_t v4 = v177;
                siri::dialogengine::ExpandField(v177, v3, (uint64_t)&v199, (uint64_t)&v198);
              }
              else
              {
                uint64_t v4 = v177;
                siri::dialogengine::TemporaryVariable::TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v187, v177, (const siri::dialogengine::ListInfo *)(v39 + 7));
                for (int i = 0; ; ++i)
                {
                  unint64_t v52 = (unint64_t)v39[8];
                  if (v52) {
                    unint64_t v52 = (uint64_t)(*(void *)(v52 + 80) - *(void *)(v52 + 72)) >> 4;
                  }
                  if ((unint64_t)i >= v52) {
                    break;
                  }
                  siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v187, i);
                  siri::dialogengine::ExpandField(v177, v3, (uint64_t)&v199, (uint64_t)&v198);
                }
                siri::dialogengine::TemporaryVariable::~TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v187);
              }
            }
            if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v197.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v198.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_89;
            }
            char v29 = (void *)v199.__r_.__value_.__r.__words[0];
            goto LABEL_88;
          }
LABEL_89:
          siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v181.__r_.__value_.__r.__words[1]);
          long long v45 = (uint64_t *)v24[1];
          if (v45)
          {
            do
            {
              float v46 = v45;
              long long v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              float v46 = (uint64_t *)v24[2];
              BOOL v37 = *v46 == (void)v24;
              uint64_t v24 = v46;
            }
            while (!v37);
          }
          uint64_t v24 = v46;
        }
        while (v46 != (uint64_t *)v202);
      }
      long long v90 = v203;
      if (v203 != (uint64_t *)v204)
      {
        do
        {
          google::protobuf::UnknownFieldSet::DeleteByNumber(v17, *((_DWORD *)v90 + 7));
          uint64_t v91 = (uint64_t *)v90[1];
          if (v91)
          {
            do
            {
              long long v92 = v91;
              uint64_t v91 = (uint64_t *)*v91;
            }
            while (v91);
          }
          else
          {
            do
            {
              long long v92 = (uint64_t *)v90[2];
              BOOL v37 = *v92 == (void)v90;
              long long v90 = v92;
            }
            while (!v37);
          }
          long long v90 = v92;
        }
        while (v92 != (uint64_t *)v204);
      }
      v214 = 0;
      v215 = 0;
      uint64_t v216 = 0;
      google::protobuf::Reflection::ListFields((uint64_t)v13, v3, (uint64_t)&v214);
      std::string v93 = v214;
      std::string v174 = v215;
      if (v214 != v215)
      {
        do
        {
          uint64_t v175 = v93;
          std::string v94 = *v93;
          if (*v93 && google::protobuf::FieldDescriptor::message_type(*v93))
          {
            if (*((_DWORD *)v94 + 15) == 3)
            {
              int v98 = google::protobuf::Reflection::FieldSize(v178, v3, (const std::string::value_type **)v94, v95, v96);
              if (v98 >= 1)
              {
                int v99 = 0;
                while (1)
                {
                  uint64_t v100 = google::protobuf::Reflection::MutableRepeatedMessage(v178, v3, v94, v99, v97);
                  uint64_t v101 = (const google::protobuf::Message *)v100;
                  if (v100)
                  {
                    if ((*(uint64_t (**)(uint64_t))(*(void *)v100 + 64))(v100)) {
                      break;
                    }
                  }
LABEL_290:
                  if (++v99 >= v98) {
                    goto LABEL_297;
                  }
                }
                uint64_t v102 = (*(uint64_t (**)(const google::protobuf::Message *))(*(void *)v101 + 168))(v101);
                if (!v102)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v103);
                  uint64_t v102 = 0;
                }
                int v104 = *(long long **)(v102 + 8);
                if (*((char *)v104 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)v104, *((void *)v104 + 1));
                }
                else
                {
                  long long v105 = *v104;
                  v213.__r_.__value_.__r.__words[2] = *((void *)v104 + 2);
                  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v105;
                }
                siri::dialogengine::GetListInfo((uint64_t **)&v179, v4, v101);
                std::string::size_type v106 = v179.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v179.__r_.__value_.__l.__data_ == &v179.__r_.__value_.__r.__words[1])
                {
LABEL_227:
                  LODWORD(v181.__r_.__value_.__l.__data_) = 0;
                  *(_OWORD *)&v181.__r_.__value_.__r.__words[1] = 0u;
                  long long v182 = 0u;
                  long long v183 = 0u;
                  long long v184 = 0u;
                  long long v185 = 0u;
                  uint64_t v186 = 0;
                }
                else
                {
                  while (1)
                  {
                    std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100]((std::string *)&v187, (long long *)(v106 + 32));
                    uint64_t v107 = v196;
                    if ((v196 & 0x80u) != 0) {
                      uint64_t v107 = v195;
                    }
                    if (!v107 && SDWORD2(v188) >= 20000) {
                      break;
                    }
                    if ((char)v196 < 0) {
                      operator delete(__p);
                    }
                    if (v193 < 0) {
                      operator delete(v192);
                    }
                    if (v191 < 0) {
                      operator delete(v190);
                    }
                    if (*((void *)&v189 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v189 + 1));
                    }
                    if (SBYTE7(v188) < 0) {
                      operator delete((void *)v187);
                    }
                    long long v109 = *(std::string **)(v106 + 8);
                    if (v109)
                    {
                      do
                      {
                        size_t v110 = v109;
                        long long v109 = (std::string *)v109->__r_.__value_.__r.__words[0];
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        size_t v110 = *(std::string **)(v106 + 16);
                        BOOL v37 = v110->__r_.__value_.__r.__words[0] == v106;
                        std::string::size_type v106 = (std::string::size_type)v110;
                      }
                      while (!v37);
                    }
                    std::string::size_type v106 = (std::string::size_type)v110;
                    if (v110 == (std::string *)&v179.__r_.__value_.__r.__words[1]) {
                      goto LABEL_227;
                    }
                  }
                  siri::dialogengine::ListInfo::ListInfo((uint64_t)&v181, (uint64_t)&v188 + 8);
                  if ((char)v196 < 0) {
                    operator delete(__p);
                  }
                  if (v193 < 0) {
                    operator delete(v192);
                  }
                  if (v191 < 0) {
                    operator delete(v190);
                  }
                  if (*((void *)&v189 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v189 + 1));
                  }
                  if (SBYTE7(v188) < 0) {
                    operator delete((void *)v187);
                  }
                }
                std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy((void *)v179.__r_.__value_.__l.__size_);
                siri::dialogengine::GetConditionInfo((siri::dialogengine *)&v179, v101);
                siri::dialogengine::ClearUnknownField(v101, (google::protobuf::Message *)LODWORD(v181.__r_.__value_.__l.__data_));
                if (SBYTE7(v183) < 0)
                {
                  if (!*((void *)&v182 + 1)) {
                    goto LABEL_244;
                  }
                }
                else if (!BYTE7(v183))
                {
                  goto LABEL_244;
                }
                if (!v181.__r_.__value_.__l.__size_
                  || *(void *)(v181.__r_.__value_.__l.__size_ + 80) == *(void *)(v181.__r_.__value_.__l.__size_ + 72))
                {
                  char v113 = &v213;
                  if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v113 = (std::string *)v213.__r_.__value_.__r.__words[0];
                  }
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clearing message '%s' based on empty or missing list parameter", v111, v113);
                  int v112 = 1;
                }
                else
                {
LABEL_244:
                  int v112 = 0;
                }
                if (siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v179.__r_.__value_.__l.__size_))
                {
                  if (!v112)
                  {
                    siri::dialogengine::TemporaryVariable::TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v187, v4, (const siri::dialogengine::ListInfo *)&v181);
                    int v116 = 0;
                    for (unint64_t j = 1; ; ++j)
                    {
                      std::string::size_type v118 = v181.__r_.__value_.__l.__size_;
                      if (v181.__r_.__value_.__l.__size_) {
                        std::string::size_type v118 = (uint64_t)(*(void *)(v181.__r_.__value_.__l.__size_ + 80)
                      }
                                       - *(void *)(v181.__r_.__value_.__l.__size_ + 72)) >> 4;
                      if (j >= v118) {
                        break;
                      }
                      char v122 = (siri::dialogengine::Context *)google::protobuf::Reflection::AddMessage(v178, v3, (const std::string::value_type **)v94, 0, v115);
                      if (v122)
                      {
                        int v98 = google::protobuf::Reflection::FieldSize(v178, v3, (const std::string::value_type **)v94, v120, v121);
                        google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef((uint64_t **)&v212, (uint64_t)v3, v94);
                        ++v116;
                        for (int k = v98 - 2; k + 1 > v116 + v99; int k = v124)
                        {
                          int v124 = k - 1;
                          (*(void (**)(std::string::size_type, std::string::size_type))(*(void *)v212.__r_.__value_.__l.__size_
                                                                                                 + 56))(v212.__r_.__value_.__l.__size_, v212.__r_.__value_.__r.__words[0]);
                        }
                        (*(void (**)(siri::dialogengine::Context *, const google::protobuf::Message *))(*(void *)v122 + 128))(v122, v101);
                        uint64_t v4 = v177;
                        siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v187, (const char *)j);
                        siri::dialogengine::ExpandMessage(v177, v122, v125);
                      }
                      else
                      {
                        BOOL v126 = *(uint64_t **)(v176 + 8);
                        if (*((char *)v126 + 23) < 0) {
                          BOOL v126 = (uint64_t *)*v126;
                        }
                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create list instance %zu for '%s'", v119, j, v126);
                      }
                    }
                    siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v187, 0);
                    siri::dialogengine::ExpandMessage(v4, v101, v136);
                    siri::dialogengine::ClearUnknownField(v101, (google::protobuf::Message *)LODWORD(v179.__r_.__value_.__l.__data_));
                    v99 += v116;
                    siri::dialogengine::TemporaryVariable::~TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v187);
LABEL_278:
                    if (v180 < 0) {
                      operator delete((void *)v179.__r_.__value_.__l.__size_);
                    }
                    if (SHIBYTE(v186) < 0) {
                      operator delete((void *)v185);
                    }
                    if (SHIBYTE(v184) < 0) {
                      operator delete(*((void **)&v183 + 1));
                    }
                    if (SBYTE7(v183) < 0) {
                      operator delete((void *)v182);
                    }
                    if (v181.__r_.__value_.__r.__words[2]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v181.__r_.__value_.__r.__words[2]);
                    }
                    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v213.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_290;
                  }
                }
                else
                {
                  char v127 = &v213;
                  if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v127 = (std::string *)v213.__r_.__value_.__r.__words[0];
                  }
                  p_size_t size = (std::string::size_type)&v179.__r_.__value_.__l.__size_;
                  if (v180 < 0) {
                    p_size_t size = v179.__r_.__value_.__l.__size_;
                  }
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clearing message '%s' based on unmet condition '%s'", v114, v127, p_size);
                }
                (*(void (**)(const google::protobuf::Message *))(*(void *)v101 + 56))(v101);
                google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef((uint64_t **)&v187, (uint64_t)v3, v94);
                if (v99 <= --v98) {
                  int v129 = v98;
                }
                else {
                  int v129 = v99;
                }
                for (int m = v99; v129 != m; int m = v131)
                {
                  int v131 = m + 1;
                  (*(void (**)(void, void))(**((void **)&v187 + 1) + 56))(*((void *)&v187 + 1), v187);
                }
                (*(void (**)(void, void))(**((void **)&v187 + 1) + 48))(*((void *)&v187 + 1), v187);
                long long v134 = google::protobuf::Reflection::FieldSize(v178, v3, (const std::string::value_type **)v94, v132, v133);
                if (v134 != v98) {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Bad field count %d after removing null message", v135, v134);
                }
                --v99;
                goto LABEL_278;
              }
            }
            else if (google::protobuf::Reflection::HasField(v178, v3, (const std::string::value_type **)v94, v95, v96))
            {
              int v138 = (siri::dialogengine::Context *)google::protobuf::Reflection::MutableMessage(v178, v3, (const std::string::value_type **)v94, 0, v137);
              if (!siri::dialogengine::ExpandMessage(v4, v138, v139))
              {
                char v141 = (uint64_t *)*((void *)v94 + 1);
                if (*((char *)v141 + 23) < 0) {
                  char v141 = (uint64_t *)*v141;
                }
                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Removing field '%s'", v140, v141);
                google::protobuf::Reflection::ClearField(v178, v3, (const std::string::value_type **)v94, v142, v143);
              }
            }
          }
LABEL_297:
          std::string v93 = v175 + 1;
        }
        while (v175 + 1 != v174);
      }
      long long v187 = 0uLL;
      *(void *)&long long v188 = 0;
      uint64_t v144 = (*(uint64_t (**)(const google::protobuf::Message *))(*(void *)v3 + 168))(v3);
      if (v144)
      {
        (*(void (**)(const google::protobuf::Message *))(*(void *)v3 + 168))(v3);
        v146 = v145;
        if (v145)
        {
          RequiredFields = siri::dialogengine::vcat::GetRequiredFields(*(void *)(v144 + 8));
          BOOL v148 = RequiredFields + 1;
          BOOL v149 = (void *)*RequiredFields;
          if ((uint64_t *)*RequiredFields != RequiredFields + 1)
          {
            do
            {
              if (*((char *)v149 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v181, (const std::string::value_type *)v149[4], v149[5]);
              }
              else {
                std::string v181 = *(std::string *)(v149 + 4);
              }
              uint64_t FieldByName = google::protobuf::Descriptor::FindFieldByName(v144, (uint64_t)&v181);
              std::string::size_type v154 = FieldByName;
              if (FieldByName)
              {
                if (*(_DWORD *)(FieldByName + 60) == 3)
                {
                  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    BOOL v155 = &v181;
                  }
                  else {
                    BOOL v155 = (std::string *)v181.__r_.__value_.__r.__words[0];
                  }
                  std::string::size_type v156 = *(uint64_t **)(v144 + 8);
                  if (*((char *)v156 + 23) < 0) {
                    std::string::size_type v156 = (uint64_t *)*v156;
                  }
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Setting missing required repeated field '%s' of message '%s' is not implemented", v151, v155, v156);
                }
                else if ((google::protobuf::Reflection::HasField(v146, v3, (const std::string::value_type **)FieldByName, v152, v153) & 1) == 0)
                {
                  int v158 = *(std::once_flag::_State_type **)(v154 + 48);
                  if (v158)
                  {
                    v212.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
                    v199.__r_.__value_.__r.__words[0] = v154;
                    if (atomic_load_explicit((atomic_ullong *volatile)v158, memory_order_acquire) != -1)
                    {
                      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
                      v179.__r_.__value_.__l.__size_ = (std::string::size_type)&v199;
                      v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
                      std::__call_once(v158, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
                    }
                  }
                  uint64_t v159 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v154 + 56)];
                  if (v159 > 0xA)
                  {
LABEL_326:
                    v162 = *(uint64_t **)(v154 + 8);
                    if (*((char *)v162 + 23) < 0) {
                      v162 = (uint64_t *)*v162;
                    }
                    int v163 = *(std::once_flag::_State_type **)(v154 + 48);
                    if (v163)
                    {
                      v212.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
                      v199.__r_.__value_.__r.__words[0] = v154;
                      if (atomic_load_explicit((atomic_ullong *volatile)v163, memory_order_acquire) != -1)
                      {
                        v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
                        v179.__r_.__value_.__l.__size_ = (std::string::size_type)&v199;
                        v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
                        std::__call_once(v163, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
                      }
                      uint64_t v159 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v154 + 56)];
                    }
                    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of unhandled cpp type '%s'", v157, v162, google::protobuf::FieldDescriptor::kCppTypeToName[v159]);
                    goto LABEL_333;
                  }
                  if (((1 << v159) & 0x2FE) != 0)
                  {
                    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v160 = &v181;
                    }
                    else {
                      v160 = (std::string *)v181.__r_.__value_.__r.__words[0];
                    }
                    std::string::size_type v161 = *(uint64_t **)(v144 + 8);
                    if (*((char *)v161 + 23) < 0) {
                      std::string::size_type v161 = (uint64_t *)*v161;
                    }
                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Setting missing required field '%s' of message '%s' to string ' '\n", v157, v160, v161);
                    std::string::basic_string[abi:ne180100]<0>(&v179, " ");
                    siri::dialogengine::SetField((uint64_t)v177, v3, v146, (google::protobuf::FieldDescriptor *)v154, &v179);
                    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v179.__r_.__value_.__l.__data_);
                    }
                  }
                  else if (((1 << v159) & 0x500) == 0)
                  {
                    goto LABEL_326;
                  }
                }
              }
LABEL_333:
              if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v181.__r_.__value_.__l.__data_);
              }
              v164 = (uint64_t *)v149[1];
              if (v164)
              {
                do
                {
                  long long v165 = v164;
                  v164 = (uint64_t *)*v164;
                }
                while (v164);
              }
              else
              {
                do
                {
                  long long v165 = (uint64_t *)v149[2];
                  BOOL v37 = *v165 == (void)v149;
                  BOOL v149 = v165;
                }
                while (!v37);
              }
              BOOL v149 = v165;
            }
            while (v165 != v148);
          }
        }
      }
      v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
      if (v214)
      {
        v215 = v214;
        operator delete(v214);
      }
      std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v202[0]);
      std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&v203, v204[0]);
      std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(v206);
      goto LABEL_348;
    }
    long long v166 = &v209;
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v166 = (std::string *)v209.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get unknown field set from message '%s", v14, v15, v166);
  }
  else
  {
    (*(void (**)(const google::protobuf::Message *))(*(void *)v3 + 56))(v3);
  }
  uint64_t v3 = 0;
LABEL_348:
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
LABEL_350:
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
LABEL_352:
  if (v211 < 0) {
    operator delete(v210[0]);
  }
  return v3;
}

void sub_1C5F9BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (*(char *)(v77 - 153) < 0) {
    operator delete(*(void **)(v77 - 176));
  }
  if (*(char *)(v77 - 121) < 0) {
    operator delete(*(void **)(v77 - 144));
  }
  *(void *)(v77 - 144) = v77 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 144));
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v76);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a75);
  std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&a76, (void *)STACK[0x200]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy((void *)STACK[0x218]);
  if (*(char *)(v77 - 225) < 0) {
    operator delete(*(void **)(v77 - 248));
  }
  if (*(char *)(v77 - 201) < 0) {
    operator delete(*(void **)(v77 - 224));
  }
  if (*(char *)(v77 - 177) < 0) {
    operator delete(*(void **)(v77 - 200));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionIsTrue(siri::dialogengine *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    char v8 = 1;
    return v8 & 1;
  }
  uint64_t v6 = *((void *)a1 + 63);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 64);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (!v6) {
      goto LABEL_21;
    }
    uint64_t v7 = *((void *)a1 + 63);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 64);
    char v8 = v5 == 0;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_21;
    }
    uint64_t v7 = *((void *)a1 + 63);
    char v8 = 1;
  }
  uint64_t v9 = std::__tree<std::string>::find<std::string>(v7 + 272, (const void **)a2);
  if (v7 + 280 == v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if ((v8 & 1) == 0) {
LABEL_15:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 64);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_20;
    }
LABEL_19:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_20;
  }
  int v13 = *(siri::dialogengine::Context ***)(v12 + 144);
  if (v13 != *(siri::dialogengine::Context ***)(v12 + 152))
  {
    char v8 = siri::dialogengine::EvaluateConditionEntry(a1, *v13, 0, v10);
    if (!v11) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  char v8 = 0;
  if (v11) {
    goto LABEL_19;
  }
LABEL_20:
  if (v12) {
    return v8 & 1;
  }
LABEL_21:
  siri::dialogengine::ResolveType(0, (uint64_t)a1, a2, 1, (uint64_t)__s1);
  uint64_t v14 = (void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((char)v29 < 0)
  {
    if (v14 == __s1[1])
    {
      if (v14 == (void *)-1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      long long v16 = __s1[0];
      int v17 = memcmp(__s1[0], siri::dialogengine::TYPE_UNKNOWN, (size_t)v14);
      operator delete(v16);
      if (!v17) {
        goto LABEL_32;
      }
    }
    else
    {
      operator delete(__s1[0]);
    }
  }
  else if (v14 == (void *)v29 && !memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v14))
  {
LABEL_32:
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v18 = (const void *)a2;
    }
    else {
      uint64_t v18 = *(const void **)a2;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Could not resolve type for condition '%s', result will be false", v15, v18);
    char v8 = 0;
    return v8 & 1;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ConditionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v25);
  uint64_t v19 = v25;
  std::string::operator=(v25 + 4, (const std::string *)a2);
  unsigned __int8 v20 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21228A0;
  std::string::basic_string[abi:ne180100]<0>(__s1, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ConditionExpression::ConditionExpression((uint64_t)&v20[1], (const std::string *)a2, (uint64_t)__s1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(__s1[0]);
  }
  *(void *)&long long v24 = v20 + 1;
  *((void *)&v24 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(&v19[6].__r_.__value_.__l.__data_, &v24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  int data = (siri::dialogengine::Context **)v19[6].__r_.__value_.__l.__data_;
  if (data == (siri::dialogengine::Context **)v19[6].__r_.__value_.__l.__size_) {
    char v8 = 0;
  }
  else {
    char v8 = siri::dialogengine::EvaluateConditionEntry(a1, *data, 0, v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  return v8 & 1;
}

void sub_1C5F9C17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetListInfo(uint64_t **this, siri::dialogengine::Context *a2, const google::protobuf::Message *a3)
{
  this[1] = 0;
  uint64_t v3 = this + 1;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  siri::dialogengine::GetStoredItems(&v78, a3);
  uint64_t v4 = v78;
  if (v78 == (uint64_t *)v79) {
    goto LABEL_153;
  }
  uint64_t v5 = this + 2;
  std::string::size_type v65 = v3;
  do
  {
    int v74 = *((_DWORD *)v4 + 8);
    siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v75, (const siri::dialogengine::CatBinary::vcat_item *)(v4 + 5));
    if (v77 != 3) {
      goto LABEL_119;
    }
    long long v71 = 0u;
    long long v72 = 0u;
    memset(&__p, 0, sizeof(__p));
    long long v69 = 0u;
    long long v70 = 0u;
    std::string::operator=((std::string *)&v70, v76[3]);
    uint64_t v6 = (const std::string **)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
    if (v77 == 3) {
      uint64_t v6 = v76;
    }
    std::string::operator=((std::string *)((char *)&v71 + 8), v6[4]);
    int v68 = v74;
    uint64_t v7 = (const std::string **)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
    if (v77 == 3) {
      uint64_t v7 = v76;
    }
    std::string::operator=(&__p, v7[5]);
    siri::dialogengine::StringSplit((unsigned __int8 *)&v70, ".", &v83);
    uint64_t v9 = v83;
    if (v84 == v83)
    {
      uint64_t v12 = 0;
LABEL_77:
      long long v39 = &v70;
      if (SBYTE7(v71) < 0) {
        long long v39 = (long long *)v70;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Did not find input variable for '%s'", v8, v39);
      goto LABEL_80;
    }
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    std::string::size_type v13 = 0;
    do
    {
      siri::dialogengine::StringSplit((unsigned __int8 *)&v9[v10], "[]", &__s1);
      if (*(char *)(__s1.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)__s1.__r_.__value_.__l.__data_, *(void *)(__s1.__r_.__value_.__r.__words[0] + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)__s1.__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = *(void *)(__s1.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v14;
      }
      if (!v13)
      {
        siri::dialogengine::Context::FindVariable((uint64_t)a2, (uint64_t)&v81, &v80);
        std::string::size_type size = v80.__r_.__value_.__l.__size_;
        std::string::size_type v13 = v80.__r_.__value_.__r.__words[0];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0uLL;
        if (!v12) {
          goto LABEL_26;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        uint64_t v19 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
        if (!v80.__r_.__value_.__l.__size_) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (!v15) {
        goto LABEL_28;
      }
      long long v16 = v15;
      uint64_t v17 = std::__tree<std::string>::find<std::string>((uint64_t)(v15 + 72), (const void **)&v81.__r_.__value_.__l.__data_);
      if (v16 + 80 != (char *)v17)
      {
        std::string::size_type v13 = *(void *)(v17 + 56);
        std::string::size_type size = *(void *)(v17 + 64);
        if (size) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
        }
        if (!v12) {
          goto LABEL_26;
        }
LABEL_24:
        uint64_t v19 = v12;
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        goto LABEL_26;
      }
      std::string::size_type v13 = 0;
      std::string::size_type size = 0;
      if (v12) {
        goto LABEL_24;
      }
LABEL_26:
      if (!v13) {
        goto LABEL_54;
      }
      uint64_t v12 = (std::__shared_weak_count *)size;
LABEL_28:
      if (*(char *)(v13 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v13 + 32), *(void *)(v13 + 40));
      }
      else {
        std::string v80 = *(std::string *)(v13 + 32);
      }
      size_t v20 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
      size_t v21 = v20;
      char v22 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v20 != v80.__r_.__value_.__l.__size_) {
          goto LABEL_68;
        }
        if (v20 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        char v23 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v20 != HIBYTE(v80.__r_.__value_.__r.__words[2])) {
          goto LABEL_69;
        }
        char v23 = &v80;
      }
      int v24 = memcmp(v23, (const void *)siri::dialogengine::TYPE_ARRAY, v21);
      long long v25 = (const std::string *)__s1.__r_.__value_.__r.__words[0];
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0] == 48;
      }
      int v27 = v26;
      if (v22 < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if (!v27) {
          goto LABEL_69;
        }
        long long v25 = (const std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      else if (!v27)
      {
        goto LABEL_69;
      }
      int v28 = siri::dialogengine::StringToInt(v25 + 1, 0, 0);
      if (v29)
      {
        long long v31 = v29;
        uint64_t v32 = v29[9];
        unint64_t v33 = (v29[10] - v32) >> 4;
        if (v33 > v28)
        {
          long long v34 = *(_OWORD *)(v32 + 16 * v28);
          std::string::size_type size = *(void *)(v32 + 16 * v28 + 8);
          if (size) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
          }
          std::string::size_type v13 = v34;
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
LABEL_54:
          uint64_t v12 = (std::__shared_weak_count *)size;
          goto LABEL_69;
        }
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
          unint64_t v33 = (uint64_t)(v31[10] - v31[9]) >> 4;
        }
        else
        {
          long long v36 = *(_OWORD *)(v13 + 8);
          v80.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v36;
        }
        std::string v38 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v38 = &v80;
        }
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Array '%s' of length %zu has no element for index '%zu'", v30, v38, v33, v28);
      }
      else
      {
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
        }
        else
        {
          long long v35 = *(_OWORD *)(v13 + 8);
          v80.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v35;
        }
        BOOL v37 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v37 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get array from Variable '%s'", v30, v37);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
LABEL_68:
      }
        operator delete(v80.__r_.__value_.__l.__data_);
LABEL_69:
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      if (!v13)
      {
        uint64_t v3 = v65;
        goto LABEL_77;
      }
      ++v11;
      uint64_t v9 = v83;
      v10 += 3;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * (v84 - v83));
    if (*(char *)(v13 + 55) < 0)
    {
      uint64_t v3 = v65;
      std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v13 + 32), *(void *)(v13 + 40));
    }
    else
    {
      std::string __s1 = *(std::string *)(v13 + 32);
      uint64_t v3 = v65;
    }
    size_t v55 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
    if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v55 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
        && !memcmp(&__s1, (const void *)siri::dialogengine::TYPE_ARRAY, v55))
      {
        goto LABEL_134;
      }
      goto LABEL_138;
    }
    if (v55 != __s1.__r_.__value_.__l.__size_)
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_138;
    }
    if (v55 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v57 = (void *)__s1.__r_.__value_.__r.__words[0];
    int v58 = memcmp(__s1.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_ARRAY, v55);
    operator delete(v57);
    if (v58)
    {
LABEL_138:
      if (*(char *)(v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
      }
      else
      {
        long long v61 = *(_OWORD *)(v13 + 8);
        __s1.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v61;
      }
      p_s1 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"List variable '%s' is not an array", v56, p_s1);
      goto LABEL_144;
    }
LABEL_134:
    if (!v59)
    {
      if (*(char *)(v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
      }
      else
      {
        long long v63 = *(_OWORD *)(v13 + 8);
        __s1.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v63;
      }
      char v64 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v64 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get array from array variable '%s'", v60, v64);
LABEL_144:
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
LABEL_80:
      if (v12)
      {
        uint64_t v40 = 0;
        std::string::size_type v41 = 0;
        goto LABEL_82;
      }
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      std::string::size_type v41 = 0;
LABEL_87:
      long long v43 = &v70;
      if (SBYTE7(v71) < 0) {
        long long v43 = (long long *)v70;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not find list array variable '%s'", v42, v43);
      goto LABEL_90;
    }
    uint64_t v40 = v59;
    if (!v12)
    {
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      std::string::size_type v41 = 0;
      goto LABEL_85;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v41 = v12;
LABEL_82:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    if (!v40) {
      goto LABEL_87;
    }
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_85:
    *(void *)&long long v69 = v40;
    *((void *)&v69 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v41;
LABEL_90:
    uint64_t v44 = *v3;
    long long v45 = (void **)v3;
    float v46 = v3;
    if (!*v3) {
      goto LABEL_99;
    }
    long long v45 = (void **)v3;
    while (1)
    {
      while (1)
      {
        float v46 = v44;
        long long v47 = (const void **)(v44 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v5, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v44 + 4))break; {
        uint64_t v44 = (uint64_t *)*v46;
        }
        long long v45 = (void **)v46;
        if (!*v46) {
          goto LABEL_99;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v5, v47, (const void **)&__p.__r_.__value_.__l.__data_))break; {
      long long v45 = (void **)(v46 + 1);
      }
      uint64_t v44 = (uint64_t *)v46[1];
      if (!v44) {
        goto LABEL_99;
      }
    }
    uint64_t v48 = (char *)*v45;
    if (!*v45)
    {
LABEL_99:
      uint64_t v48 = (char *)operator new(0x98uLL);
      uint64_t v83 = (uint64_t **)v48;
      long long v84 = v3;
      char v85 = 0;
      long long v49 = (std::string *)(v48 + 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v48 + 6) = *((void *)&__p.__r_.__value_.__l + 2);
      }
      *((_DWORD *)v48 + 14) = 0;
      *((_OWORD *)v48 + 4) = 0u;
      *((_OWORD *)v48 + 5) = 0u;
      *((_OWORD *)v48 + 6) = 0u;
      *((_OWORD *)v48 + 7) = 0u;
      *((_OWORD *)v48 + 8) = 0u;
      *((void *)v48 + 18) = 0;
      char v85 = 1;
      *(void *)uint64_t v48 = 0;
      *((void *)v48 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
      *((void *)v48 + 2) = v46;
      uint64_t *v45 = v48;
      long long v50 = (uint64_t *)v48;
      std::string::size_type v51 = (uint64_t *)**this;
      if (v51)
      {
        *this = v51;
        long long v50 = (uint64_t *)*v45;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v3, v50);
      ++*v5;
      uint64_t v83 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v83);
    }
    *((_DWORD *)v48 + 14) = v68;
    if (*((void *)&v69 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v52 = (std::__shared_weak_count *)*((void *)v48 + 9);
    *((_OWORD *)v48 + 4) = v69;
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    std::string::operator=((std::string *)(v48 + 80), (const std::string *)&v70);
    std::string::operator=((std::string *)(v48 + 104), (const std::string *)((char *)&v71 + 8));
    std::string::operator=((std::string *)(v48 + 128), &__p);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72) < 0) {
      operator delete(*((void **)&v71 + 1));
    }
    if (SBYTE7(v71) < 0) {
      operator delete((void *)v70);
    }
    if (*((void *)&v69 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
    }
LABEL_119:
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v75);
    long long v53 = (uint64_t *)v4[1];
    if (v53)
    {
      do
      {
        uint64_t v54 = v53;
        long long v53 = (uint64_t *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        uint64_t v54 = (uint64_t *)v4[2];
        BOOL v26 = *v54 == (void)v4;
        uint64_t v4 = v54;
      }
      while (!v26);
    }
    uint64_t v4 = v54;
  }
  while (v54 != (uint64_t *)v79);
LABEL_153:
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v79[0]);
}

void sub_1C5F9CBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, siri::dialogengine::CatBinary::vcat_item *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)(v13 - 144) = v13 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 144));
  siri::dialogengine::ListInfo::~ListInfo((void **)va);
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(a8);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*(void **)(v13 - 224));
  std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(*a6);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ListInfo::ListInfo((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1C5F9CD58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::ListInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::ExpandField(siri::dialogengine::Context *a1, google::protobuf::Message *a2, uint64_t a3, uint64_t a4)
{
  long long v87 = 0u;
  long long v88 = 0u;
  long long v86 = 0u;
  siri::dialogengine::GetMessageInterface((siri::dialogengine *)&v86, a2);
  if ((_BYTE)v86)
  {
    uint64_t v8 = v87;
    uint64_t v9 = *(long long **)(v87 + 8);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v85.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t FieldByName = google::protobuf::Descriptor::FindFieldByName(v8, a3);
    double v15 = (google::protobuf::FieldDescriptor *)FieldByName;
    if (!FieldByName)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v46 = a3;
      }
      else {
        uint64_t v46 = *(void *)a3;
      }
      long long v47 = &v85;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v47 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v48 = a4;
      }
      else {
        uint64_t v48 = *(void *)a4;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get field '%s' from message '%s' with stored expression '%s'", v12, v46, v47, v48);
      goto LABEL_133;
    }
    if (*(_DWORD *)(FieldByName + 60) != 3
      && google::protobuf::Reflection::HasField(*((const std::string::value_type ****)&v87 + 1), a2, (const std::string::value_type **)FieldByName, v13, v14))
    {
      uint64_t v17 = &v85;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v17 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      uint64_t v18 = *(void **)v15;
      if (*(char *)(*(void *)v15 + 23) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Message '%s' field '%s' has already been set", v16, v17, v18);
LABEL_133:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      return;
    }
    siri::dialogengine::ParseSpeakableString(a4, (uint64_t *)&v83);
    memset(&v58, 0, sizeof(v58));
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v58, v83, v84, (v84 - v83) >> 4);
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
    std::string::size_type v19 = v58.__r_.__value_.__r.__words[0];
    if (v58.__r_.__value_.__r.__words[0] == v58.__r_.__value_.__l.__size_)
    {
LABEL_90:
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      siri::dialogengine::ChunkList::Expand((uint64_t *)&v81, (siri::dialogengine::ChunkList *)&v83, a1);
      siri::dialogengine::ExpandToText((uint64_t)&v58, v81, v82);
      long long v45 = (std::once_flag::_State_type *)*((void *)v15 + 6);
      if (v45)
      {
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        if (atomic_load_explicit((atomic_ullong *volatile)v45, memory_order_acquire) != -1)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v76;
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::__call_once(v45, &v80, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if (*((_DWORD *)v15 + 14) == 9) {
        siri::dialogengine::Dialog::ProcessString((siri::dialogengine::Context *)&v58, (uint64_t)&__str);
      }
      long long v49 = (uint64_t *)*((void *)v15 + 1);
      if (*((char *)v49 + 23) < 0) {
        long long v49 = (uint64_t *)*v49;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"String processing not appropriate for field '%s'", v44, v49);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = v58;
      }
      std::string::size_type v51 = (uint64_t *)*((void *)v15 + 1);
      if (*((char *)v51 + 23) < 0) {
        std::string::size_type v51 = (uint64_t *)*v51;
      }
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v52 = a4;
      }
      else {
        uint64_t v52 = *(void *)a4;
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Expanded field '%s' expression '%s' to '%s'", v50, v51, v52, p_str);
      siri::dialogengine::SetField((uint64_t)a1, a2, *((const std::string::value_type ****)&v87 + 1), v15, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v70 < 0) {
        operator delete(v69);
      }
      if (v68 < 0) {
        operator delete(v67);
      }
      if (v66 < 0) {
        operator delete(v65);
      }
      if (v64 < 0) {
        operator delete(v63);
      }
      if (v62 < 0) {
        operator delete(v61);
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      goto LABEL_133;
    }
    while (1)
    {
      size_t v21 = *(const void **)v19;
      char v22 = *(std::__shared_weak_count **)(v19 + 8);
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v21
      {
        if (!v22) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
      uint64_t v24 = (uint64_t)v23;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23[223] < 0) {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v23 + 25), *((void *)v23 + 26));
      }
      else {
        std::string __str = *(std::string *)(v23 + 200);
      }
      siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ".", &v81);
      if (v82 != v81) {
        break;
      }
LABEL_83:
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v22) {
          goto LABEL_89;
        }
LABEL_87:
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_88:
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        goto LABEL_89;
      }
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v22) {
        goto LABEL_87;
      }
LABEL_89:
      v19 += 16;
      if (v19 == size) {
        goto LABEL_90;
      }
    }
    if (*((char *)v81 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)*v81, v81[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v81;
      v80.__r_.__value_.__r.__words[2] = v81[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v25;
    }
    BOOL v26 = a1;
    siri::dialogengine::Context::FindVariable((uint64_t)a1, (uint64_t)&v80, &v78);
    uint64_t v27 = v78;
    if (v78)
    {
      int v28 = (long long *)(v78 + 8);
      if (*(char *)(v78 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v78 + 8), *(void *)(v78 + 16));
      }
      else
      {
        long long v29 = *v28;
        v77.__r_.__value_.__r.__words[2] = *(void *)(v78 + 24);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v29;
      }
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v77.__r_.__value_.__l.__size_;
      }
      std::string::size_type v31 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v31 = v80.__r_.__value_.__l.__size_;
      }
      if (v30 != v31)
      {
        if ((*((unsigned char *)&v77.__r_.__value_.__s + 23) & 0x80) != 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        goto LABEL_58;
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v80;
      }
      else {
        uint64_t v32 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v77.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (!*((unsigned char *)&v77.__r_.__value_.__s + 23)) {
          goto LABEL_79;
        }
        uint64_t v33 = 0;
        do
        {
          int v34 = v77.__r_.__value_.__s.__data_[v33];
          int v35 = v32->__r_.__value_.__s.__data_[v33];
        }
        while (v34 == v35 && HIBYTE(v77.__r_.__value_.__r.__words[2]) - 1 != v33++);
        if (v34 == v35) {
          goto LABEL_79;
        }
LABEL_58:
        std::string::basic_string[abi:ne180100]<0>(&v77, ".");
        if ((char *)v82 - (char *)v81 == 24) {
          MEMORY[0x1C8796900](&v77, "");
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v80.__r_.__value_.__l.__data_, (const void **)&v77.__r_.__value_.__l.__data_, (uint64_t)v74);
        if (*(char *)(v27 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
        }
        else
        {
          long long v39 = *v28;
          v71.__r_.__value_.__r.__words[2] = *(void *)(v27 + 24);
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v39;
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = &v77;
        }
        else {
          uint64_t v40 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v41 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v41 = v77.__r_.__value_.__l.__size_;
        }
        BOOL v42 = std::string::append(&v71, (const std::string::value_type *)v40, v41);
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        std::string::size_type v73 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::StringReplace((uint64_t)&__str, (char *)v74, (uint64_t)__p, 0, &v76);
        if (SHIBYTE(v73) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        siri::dialogengine::ChunkVariable::SetName(v24, &v76);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        goto LABEL_79;
      }
      size_t v55 = v15;
      std::string::size_type v37 = v77.__r_.__value_.__r.__words[0];
      int v54 = memcmp(v77.__r_.__value_.__l.__data_, v32, v77.__r_.__value_.__l.__size_);
      std::string v38 = (void *)v37;
      double v15 = v55;
      operator delete(v38);
      if (v54) {
        goto LABEL_58;
      }
    }
LABEL_79:
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    a1 = v26;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    goto LABEL_83;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message interface", v7);
}

void sub_1C5F9D5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a38);
  a38 = v38 - 224;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  *(void *)(v38 - 224) = v38 - 200;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 224));
  if (*(char *)(v38 - 153) < 0) {
    operator delete(*(void **)(v38 - 176));
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::ClearUnknownField(siri::dialogengine *this, google::protobuf::Message *a2)
{
  if (!a2) {
    return;
  }
  int v2 = (int)a2;
  (*(void (**)(siri::dialogengine *))(*(void *)this + 168))(this);
  if (v4)
  {
    google::protobuf::Reflection::MutableUnknownFields(v4, this);
    if (v5)
    {
      google::protobuf::UnknownFieldSet::DeleteByNumber(v5, v2);
      return;
    }
    uint64_t v6 = "Could not get unknown field set";
  }
  else
  {
    uint64_t v6 = "Could not get message reflection";
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)v6, (const char *)v4);
}

uint64_t **google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef(uint64_t **a1, uint64_t a2, google::protobuf::FieldDescriptor *a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 168))(a2);
  uint64_t v7 = (google::protobuf::Reflection *)v6;
  *a1 = google::protobuf::Reflection::RepeatedFieldData(v6, a2, a3, 10, 0);
  a1[1] = google::protobuf::Reflection::RepeatedFieldAccessor(v7, a3);
  uint64_t MessageFactory = google::protobuf::Reflection::GetMessageFactory(v7);
  uint64_t v9 = google::protobuf::FieldDescriptor::message_type(a3);
  a1[2] = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)MessageFactory + 16))(MessageFactory, v9);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void siri::dialogengine::FilterVisualResponse(siri::dialogengine *this, const siri::dialogengine::Context *a2, SnippetUI::Response *a3)
{
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v79, (siri::dialogengine *)((char *)this + 8));
  uint64_t v4 = v80;
  if (v80)
  {
    if (v80 > 4) {
      uint64_t v5 = "";
    }
    else {
      uint64_t v5 = off_1E651E420[v80 - 1];
    }
    std::string::basic_string[abi:ne180100]<0>(&v82, v5);
    if (v84[0] >= 0) {
      uint64_t v7 = (void **)&v82;
    }
    else {
      uint64_t v7 = v82;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering visuals according to response mode '%s'", v6, v7);
    int v9 = *((_DWORD *)a2 + 6);
    if (v9)
    {
      std::string __p = 0;
      std::string v77 = 0;
      uint64_t v78 = 0;
      if (v9 >= 1)
      {
        int v10 = 0;
        while (2)
        {
          uint64_t v12 = (int *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)a2 + 16, v10)+ 40);
          if (*v12 < 1)
          {
            char v15 = 0;
            char v14 = 0;
          }
          else
          {
            int v13 = 0;
            char v14 = 0;
            char v15 = 0;
            do
            {
              v15 |= *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v12, v13) == 0;
              v14 |= *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v12, v13++) == 1;
            }
            while (v13 < *v12);
          }
          switch((int)v4)
          {
            case 1:
              goto LABEL_22;
            case 2:
              if (v14) {
                goto LABEL_39;
              }
              goto LABEL_22;
            case 3:
            case 4:
              if (v15) {
                goto LABEL_39;
              }
              goto LABEL_22;
            default:
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized response mode: %d", v11, v4);
LABEL_22:
              long long v16 = v77;
              if (v77 >= v78)
              {
                uint64_t v18 = (int *)__p;
                uint64_t v19 = ((char *)v77 - (unsigned char *)__p) >> 2;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 62) {
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v21 = (char *)v78 - (unsigned char *)__p;
                if (((char *)v78 - (unsigned char *)__p) >> 1 > v20) {
                  unint64_t v20 = v21 >> 1;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22)
                {
                  char v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78, v22);
                  uint64_t v18 = (int *)__p;
                  long long v16 = v77;
                }
                else
                {
                  char v23 = 0;
                }
                uint64_t v24 = (int *)&v23[4 * v19];
                *uint64_t v24 = v10;
                uint64_t v17 = v24 + 1;
                while (v16 != v18)
                {
                  int v25 = *--v16;
                  *--uint64_t v24 = v25;
                }
                std::string __p = v24;
                std::string v77 = v17;
                uint64_t v78 = (int *)&v23[4 * v22];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                int *v77 = v10;
                uint64_t v17 = v16 + 1;
              }
              std::string v77 = v17;
LABEL_39:
              if (++v10 < *((_DWORD *)a2 + 6)) {
                continue;
              }
              BOOL v26 = v77;
              if (v77 != __p)
              {
                unint64_t v27 = (((char *)v77 - (unsigned char *)__p) >> 2) - 1;
                BOOL v26 = (int *)__p;
                do
                {
                  uint64_t v28 = v26[v27];
                  long long v29 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)a2 + 16, v28);
                  siri::dialogengine::GetVisualElementId(&v75, v29);
                  google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange((const siri::dialogengine::Context *)((char *)a2 + 16), v28);
                  if (v84[0] >= 0) {
                    std::string::size_type v31 = (void **)&v82;
                  }
                  else {
                    std::string::size_type v31 = v82;
                  }
                  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v32 = &v75;
                  }
                  else {
                    uint64_t v32 = (std::string *)v75.__r_.__value_.__r.__words[0];
                  }
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed Visual CAT section at index %d whose id is '%s'", v30, v31, v28, v32);
                  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v75.__r_.__value_.__l.__data_);
                  }
                  --v27;
                  BOOL v26 = (int *)__p;
                }
                while (v27 < ((char *)v77 - (unsigned char *)__p) >> 2);
              }
              if (v26)
              {
                std::string v77 = v26;
                operator delete(v26);
              }
              break;
          }
          break;
        }
      }
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"There are no sections to filter!", v8);
    }
    if (SHIBYTE(v84[0]) < 0)
    {
      operator delete(v82);
      if (!v9) {
        goto LABEL_121;
      }
    }
    else if (!v9)
    {
      goto LABEL_121;
    }
  }
  if (v81)
  {
    LODWORD(v33) = *((_DWORD *)a2 + 6);
    if ((int)v33 >= 1)
    {
      uint64_t v34 = 0;
      do
      {
        if (v34 >= (int)v33)
        {
          int v35 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v82, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1561);
          long long v36 = google::protobuf::internal::LogMessage::operator<<(v35, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v36->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v82);
        }
        uint64_t v37 = *(void *)(*((void *)a2 + 4) + 8 * v34 + 8);
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        v84[0] = 0;
        if (*(int *)(v37 + 24) >= 1)
        {
          int v38 = 0;
          long long v39 = (google::protobuf::internal::RepeatedPtrFieldBase *)(v37 + 16);
          do
          {
            if (*(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(v37 + 16, v38)+ 36) == 49)
            {
              uint64_t v40 = v83;
              if ((unint64_t)v83 >= v84[0])
              {
                BOOL v42 = v82;
                uint64_t v43 = ((char *)v83 - (char *)v82) >> 2;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62) {
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v45 = v84[0] - (void)v82;
                if ((uint64_t)(v84[0] - (void)v82) >> 1 > v44) {
                  unint64_t v44 = v45 >> 1;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46)
                {
                  long long v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v84, v46);
                  BOOL v42 = v82;
                  uint64_t v40 = v83;
                }
                else
                {
                  long long v47 = 0;
                }
                uint64_t v48 = (int *)&v47[4 * v43];
                int *v48 = v38;
                std::string::size_type v41 = v48 + 1;
                while (v40 != (int *)v42)
                {
                  int v49 = *--v40;
                  *--uint64_t v48 = v49;
                }
                uint64_t v82 = (void **)v48;
                uint64_t v83 = v41;
                v84[0] = &v47[4 * v46];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                int *v83 = v38;
                std::string::size_type v41 = v40 + 1;
              }
              uint64_t v83 = v41;
            }
            ++v38;
          }
          while (v38 < *(_DWORD *)(v37 + 24));
          long long v50 = v83;
          if (v83 != (int *)v82)
          {
            unint64_t v51 = (((char *)v83 - (char *)v82) >> 2) - 1;
            long long v50 = (int *)v82;
            do
            {
              uint64_t v52 = v50[v51];
              google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(v39, v52);
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Spotlight filtering removed sash component at index %d", v53, v52);
              --v51;
              long long v50 = (int *)v82;
            }
            while (v51 < ((char *)v83 - (char *)v82) >> 2);
          }
          if (v50)
          {
            uint64_t v83 = v50;
            operator delete(v50);
          }
        }
        ++v34;
        uint64_t v33 = *((int *)a2 + 6);
      }
      while (v34 < v33);
    }
    LODWORD(v54) = *((_DWORD *)a2 + 24);
    if ((int)v54 >= 1)
    {
      uint64_t v55 = 0;
      do
      {
        if (v55 >= (int)v54)
        {
          int v56 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v82, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1561);
          int v57 = google::protobuf::internal::LogMessage::operator<<(v56, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v57->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v82);
        }
        uint64_t v58 = *(void *)(*((void *)a2 + 13) + 8 * v55 + 8);
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        v84[0] = 0;
        if (*(int *)(v58 + 24) >= 1)
        {
          int v59 = 0;
          char v60 = (google::protobuf::internal::RepeatedPtrFieldBase *)(v58 + 16);
          do
          {
            if (*(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(v58 + 16, v59)+ 36) == 49)
            {
              long long v61 = v83;
              if ((unint64_t)v83 >= v84[0])
              {
                long long v63 = v82;
                uint64_t v64 = ((char *)v83 - (char *)v82) >> 2;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62) {
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v66 = v84[0] - (void)v82;
                if ((uint64_t)(v84[0] - (void)v82) >> 1 > v65) {
                  unint64_t v65 = v66 >> 1;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  char v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v84, v67);
                  long long v63 = v82;
                  long long v61 = v83;
                }
                else
                {
                  char v68 = 0;
                }
                long long v69 = (int *)&v68[4 * v64];
                int *v69 = v59;
                char v62 = v69 + 1;
                while (v61 != (int *)v63)
                {
                  int v70 = *--v61;
                  *--long long v69 = v70;
                }
                uint64_t v82 = (void **)v69;
                uint64_t v83 = v62;
                v84[0] = &v68[4 * v67];
                if (v63) {
                  operator delete(v63);
                }
              }
              else
              {
                int *v83 = v59;
                char v62 = v61 + 1;
              }
              uint64_t v83 = v62;
            }
            ++v59;
          }
          while (v59 < *(_DWORD *)(v58 + 24));
          std::string v71 = v83;
          if (v83 != (int *)v82)
          {
            unint64_t v72 = (((char *)v83 - (char *)v82) >> 2) - 1;
            std::string v71 = (int *)v82;
            do
            {
              uint64_t v73 = v71[v72];
              google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(v60, v73);
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Spotlight filtering removed sash component in group %d at index %d", v74, v55, v73);
              --v72;
              std::string v71 = (int *)v82;
            }
            while (v72 < ((char *)v83 - (char *)v82) >> 2);
          }
          if (v71)
          {
            uint64_t v83 = v71;
            operator delete(v71);
          }
        }
        ++v55;
        uint64_t v54 = *((int *)a2 + 24);
      }
      while (v55 < v54);
    }
  }
LABEL_121:
  siri::dialogengine::RequestInfo::~RequestInfo(v79);
}

void sub_1C5F9E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
}

void siri::dialogengine::GetVisualElementId(std::string *this, const google::protobuf::Message *a2)
{
  siri::dialogengine::GetStoredItems(&v11, a2);
  uint64_t v3 = v11;
  if (v11 == (uint64_t *)v12)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(this, "");
  }
  else
  {
    while (1)
    {
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8, (const siri::dialogengine::CatBinary::vcat_item *)(v3 + 5));
      if (v10 == 5) {
        break;
      }
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8);
      uint64_t v4 = (uint64_t *)v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (uint64_t *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
      if (v5 == (uint64_t *)v12) {
        goto LABEL_9;
      }
    }
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v7 = *v9;
      this->__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
    }
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8);
  }
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v12[0]);
}

void sub_1C5F9E2F4(_Unwind_Exception *a1)
{
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v1);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2041);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2043);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1567);
    BOOL v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1568);
    long long v7 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)(*((void *)this + 2) + 8 * a2 + 8);
  if (v8) {
    BOOL v9 = *(void *)this == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2063);
    int v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2065);
    unint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)this, a2, 1);
}

void sub_1C5F9E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C5F9E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2041);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2043);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1567);
    BOOL v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1568);
    char v7 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)(*((void *)this + 2) + 8 * a2 + 8);
  if (v8) {
    BOOL v9 = *(void *)this == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2063);
    int v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2065);
    unint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)this, a2, 1);
}

void sub_1C5F9E864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::JsonFromResponseMessage(std::string::size_type a1@<X0>, void *a2@<X8>)
{
  SnippetUI::Response::Response((SnippetUI::Response *)v11);
  siri::dialogengine::DecodeBase64(a1, &v10);
  char v4 = google::protobuf::MessageLite::ParseFromString(v11, &v10);
  char v6 = v4;
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode response", v5);
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    goto LABEL_7;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  if ((v6 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  google::protobuf::util::MessageToJsonString((google::protobuf::util::_anonymous_namespace_ *)v11, (uint64_t)a2, (uint64_t)&v10, (uint64_t)v7);
  if (v9 < 0) {
    operator delete(__p);
  }
LABEL_7:
  SnippetUI::Response::~Response((SnippetUI::Response *)v11);
}

void sub_1C5F9E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  SnippetUI::Response::~Response((SnippetUI::Response *)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::MergeSnippetUIResults(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a3 + 32));
  SnippetUI::Response::Response((SnippetUI::Response *)v62);
  SnippetUI::Response::Response((SnippetUI::Response *)v55);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8)
  {
    siri::dialogengine::DecodeBase64(a1, &__p);
    char v9 = google::protobuf::MessageLite::ParseFromString(v62, &__p);
    char v11 = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v11) {
        goto LABEL_6;
      }
    }
    else if (v9)
    {
LABEL_6:
      char v13 = (char *)(a2 + 23);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
      if (!v12)
      {
LABEL_78:
        siri::dialogengine::SetVisualInfo(v62, a3);
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        {
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          std::string::size_type v48 = *(void *)(a1 + 16);
LABEL_83:
          a4->__r_.__value_.__r.__words[2] = v48;
          goto LABEL_86;
        }
LABEL_85:
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        goto LABEL_86;
      }
      char v14 = 1;
      goto LABEL_16;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode first response", v10);
  }
  char v13 = (char *)(a2 + 23);
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  if (!v15) {
    goto LABEL_80;
  }
  char v14 = 0;
LABEL_16:
  siri::dialogengine::DecodeBase64(a2, &__p);
  char v16 = google::protobuf::MessageLite::ParseFromString(v55, &__p);
  char v18 = v16;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v16) {
      goto LABEL_18;
    }
LABEL_77:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode second response", v17);
    if (v14) {
      goto LABEL_78;
    }
LABEL_80:
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    goto LABEL_86;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v18 & 1) == 0) {
    goto LABEL_77;
  }
LABEL_18:
  if ((v14 & 1) == 0)
  {
    siri::dialogengine::SetVisualInfo(v55, a3);
    if ((*v13 & 0x80000000) == 0)
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      std::string::size_type v48 = *(void *)(a2 + 16);
      goto LABEL_83;
    }
    a1 = a2;
    goto LABEL_85;
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v53 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  unint64_t v51 = &v52;
  uint64_t v52 = 0;
  if (v70 >= 1)
  {
    for (int i = 0; i < v70; ++i)
    {
      unint64_t v20 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i);
      google::protobuf::MessageLite::SerializeAsString(v20, (uint64_t)v49);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&__p, (const void **)v49, (uint64_t)v49);
      if (v50 < 0) {
        operator delete(v49[0]);
      }
      uint64_t v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, *(const void ***)(v21 + 40), *(void *)(v21 + 40));
      char v23 = *(uint64_t **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i)+ 40);
      if (*((char *)v23 + 23) < 0) {
        char v23 = (uint64_t *)*v23;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Destination has SnippetUI group '%s'", v22, v23);
    }
  }
  if (v60 >= 1)
  {
    for (int j = 0; j < v60; ++j)
    {
      int v25 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j);
      google::protobuf::MessageLite::SerializeAsString(v25, (uint64_t)v49);
      if (&__p.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&__p, (const void **)v49))
      {
        uint64_t v28 = *(const void ***)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j)+ 40);
        if (&v52 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v51, v28))
        {
          std::string::size_type v30 = v72;
          if (v72)
          {
            uint64_t v31 = v70;
            int v32 = *v72;
            if (v70 < *v72)
            {
              ++v70;
              uint64_t v33 = *(SnippetUI::Response_Group **)&v72[2 * v31 + 2];
              if (v33) {
                goto LABEL_46;
              }
LABEL_39:
              if (*((char *)v28 + 23) < 0) {
                uint64_t v28 = (const void **)*v28;
              }
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create Response Group while merging, ID: %s", v29, v28);
              goto LABEL_49;
            }
            if (v32 == v71)
            {
LABEL_44:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v69, v32 + 1);
              std::string::size_type v30 = v72;
              int v32 = *v72;
            }
            *std::string::size_type v30 = v32 + 1;
            uint64_t v33 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(v69);
            uint64_t v34 = v70++;
            *(void *)&v72[2 * v34 + 2] = v33;
            if (v33)
            {
LABEL_46:
              google::protobuf::MessageLite::ParseFromString(v33, v49);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, v28, (uint64_t)v28);
              if (*((char *)v28 + 23) < 0) {
                uint64_t v28 = (const void **)*v28;
              }
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged SnippetUI group '%s'", v35, v28);
              goto LABEL_49;
            }
            goto LABEL_39;
          }
          int v32 = v71;
          goto LABEL_44;
        }
        if (*((char *)v28 + 23) < 0) {
          uint64_t v28 = (const void **)*v28;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Two different Response Groups have the same ID: %s", v29, v28);
      }
      else
      {
        unint64_t v27 = *(uint64_t **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j)+ 40);
        if (*((char *)v27 + 23) < 0) {
          unint64_t v27 = (uint64_t *)*v27;
        }
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Skipping merge of identical response group '%s'", v26, v27);
      }
LABEL_49:
      if (v50 < 0) {
        operator delete(v49[0]);
      }
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v51, v52);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  if (v66 >= 1)
  {
    for (int k = 0; k < v66; ++k)
    {
      uint64_t v37 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)&v65, k);
      google::protobuf::MessageLite::SerializeAsString(v37, (uint64_t)&v51);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&__p, (const void **)&v51, (uint64_t)&v51);
      if (SHIBYTE(v53) < 0) {
        operator delete(v51);
      }
    }
  }
  if (v58 >= 1)
  {
    uint64_t v38 = 0;
    while (1)
    {
      long long v39 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)&v57, v38);
      google::protobuf::MessageLite::SerializeAsString(v39, (uint64_t)&v51);
      if (&__p.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&__p, (const void **)&v51))break; {
LABEL_69:
      }
      if (SHIBYTE(v53) < 0) {
        operator delete(v51);
      }
      uint64_t v38 = (v38 + 1);
      if ((int)v38 >= v58) {
        goto LABEL_72;
      }
    }
    std::string::size_type v41 = v68;
    if (v68)
    {
      uint64_t v42 = v66;
      int v43 = *v68;
      if (v66 < *v68)
      {
        ++v66;
        unint64_t v44 = *(SnippetUI::OrnamentElement **)&v68[2 * v42 + 2];
        if (v44) {
          goto LABEL_68;
        }
LABEL_63:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create Response Ornament while merging", v40);
        goto LABEL_69;
      }
      if (v43 != v67)
      {
LABEL_67:
        *std::string::size_type v41 = v43 + 1;
        unint64_t v44 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(v65);
        uint64_t v45 = v66++;
        *(void *)&v68[2 * v45 + 2] = v44;
        if (v44)
        {
LABEL_68:
          google::protobuf::MessageLite::ParseFromString(v44, &v51);
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged response ornament %d", v46, v38);
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }
    else
    {
      int v43 = v67;
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v65, v43 + 1);
    std::string::size_type v41 = v68;
    int v43 = *v68;
    goto LABEL_67;
  }
LABEL_72:
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(&v63, (uint64_t)&v56);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged SnippetUI response has %d sections", v47, v64);
  if (v61) {
    char v73 = 1;
  }
  siri::dialogengine::SetVisualInfo(v62, a3);
  google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)v62, (uint64_t)&__p);
  siri::dialogengine::EncodeBase64((uint64_t)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_86:
  SnippetUI::Response::~Response((SnippetUI::Response *)v55);
  SnippetUI::Response::~Response((SnippetUI::Response *)v62);
}

void sub_1C5F9F000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  SnippetUI::Response::~Response((SnippetUI::Response *)&a29);
  SnippetUI::Response::~Response((SnippetUI::Response *)&a47);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SetVisualInfo(int *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = a1[6];
  *(void *)(a2 + 8) = a1[24];
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = a1[18];
  *(void *)(a2 + 24) = a1[12];
  memset(&v36, 0, sizeof(v36));
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(&v33, (uint64_t)(a1 + 4));
  if ((int)v34 >= 1)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)&v33, v2);
      siri::dialogengine::GetVisualElementId(&__p, v3);
      siri::dialogengine::GetStoredItems((uint64_t **)&v40, v3);
      std::string::size_type v4 = v40.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v40.__r_.__value_.__l.__data_ == &v40.__r_.__value_.__r.__words[1])
      {
LABEL_11:
        std::string::basic_string[abi:ne180100]<0>(&v31, "");
      }
      else
      {
        while (1)
        {
          LODWORD(__v.__first_) = *(_DWORD *)(v4 + 32);
          siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_, (const siri::dialogengine::CatBinary::vcat_item *)(v4 + 40));
          if (v39 == 6) {
            break;
          }
          siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_);
          uint64_t v5 = *(std::string **)(v4 + 8);
          if (v5)
          {
            do
            {
              char v6 = v5;
              uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
            }
            while (v5);
          }
          else
          {
            do
            {
              char v6 = *(std::string **)(v4 + 16);
              BOOL v7 = v6->__r_.__value_.__r.__words[0] == v4;
              std::string::size_type v4 = (std::string::size_type)v6;
            }
            while (!v7);
          }
          std::string::size_type v4 = (std::string::size_type)v6;
          if (v6 == (std::string *)&v40.__r_.__value_.__r.__words[1]) {
            goto LABEL_11;
          }
        }
        if (*((char *)v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v38, *((void *)v38 + 1));
        }
        else
        {
          long long v8 = *v38;
          v31.__r_.__value_.__r.__words[2] = *((void *)v38 + 2);
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v8;
        }
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_);
      }
      std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy((void *)v40.__r_.__value_.__l.__size_);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v31.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v40, size + 1);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v10 = &v40;
      }
      else {
        std::string v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v11 = &v31;
        }
        else {
          char v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        memmove(v10, v11, size);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + size) = 35;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
      }
      char v14 = std::string::append(&v40, (const std::string::value_type *)p_p, v13);
      uint64_t v15 = (char *)v14->__r_.__value_.__r.__words[0];
      v41.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer end = v36.__end_;
      if (v36.__end_ >= v36.__end_cap_.__value_)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v20) {
          unint64_t v20 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v20;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
        if (v21) {
          unint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36.__end_cap_, v21);
        }
        else {
          unint64_t v22 = 0;
        }
        char v23 = v22 + v19;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v23->__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        v23->__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v23->__r_.__value_.__s + 23) = v16;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v36, &__v);
        char v18 = v36.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v36.__end_->__r_.__value_.__l.__data_ = v15;
        end->__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = v16;
        char v18 = end + 1;
      }
      v36.__end_ = v18;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      uint64_t v24 = std::string::append(&v41, ", Visual Element (Section) ID: ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v26 = &__p;
      }
      else {
        BOOL v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__v.__first_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__v, 0);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v2;
    }
    while (v2 < (int)v34);
  }
  if ((std::vector<std::string> *)(a2 + 32) != &v36) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a2 + 32), v36.__begin_, (long long *)v36.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3));
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v33);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C5F9F568(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__pa, char a18, uint64_t a19, char *a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  a20 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    std::string::size_type v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C5F9F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FilterSnippetUISections(std::string::size_type a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a3 + 32));
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8)
  {
    SnippetUI::Response::Response((SnippetUI::Response *)v25);
    siri::dialogengine::DecodeBase64(a1, &__p);
    char v9 = google::protobuf::MessageLite::ParseFromString(v25, &__p);
    char v11 = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v11) {
        goto LABEL_6;
      }
    }
    else if (v9)
    {
LABEL_6:
      siri::dialogengine::SetVisualInfo(v25, a3);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = (uint64_t *)a2;
      }
      else {
        std::string::size_type v13 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering Visual CAT for sections matching '%s'", v12, v13);
      if (v27 >= 1)
      {
        int v14 = 0;
        while (1)
        {
          uint64_t v15 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)&v26, v14);
          siri::dialogengine::GetVisualElementId(&__p, v15);
          std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          char v18 = size;
          if ((size & 0x80u) != 0) {
            std::string::size_type size = a2->__r_.__value_.__l.__size_;
          }
          if (!size) {
            goto LABEL_16;
          }
          if (siri::dialogengine::StringGlobMatch(&__p, a2)) {
            break;
          }
          google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange((google::protobuf::internal::RepeatedPtrFieldBase *)&v26, v14);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v23 = (uint64_t *)a2;
          }
          else {
            char v23 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Visual CAT section '%s' does not match '%s'; Excluding it from result",
            v21,
            p_p,
            v23);
          --v14;
LABEL_30:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (++v14 >= v27) {
            goto LABEL_33;
          }
        }
        char v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
LABEL_16:
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v19 = &__p;
        }
        else {
          unint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v18 >= 0) {
          unint64_t v20 = (uint64_t *)a2;
        }
        else {
          unint64_t v20 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Visual CAT section '%s' matches '%s'; Including it in result",
          v16,
          v19,
          v20);
        goto LABEL_30;
      }
LABEL_33:
      siri::dialogengine::SetVisualInfo(v25, a3);
      google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)v25, (uint64_t)&__p);
      siri::dialogengine::EncodeBase64((uint64_t)&__p, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_42;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode response", v10);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
LABEL_42:
    SnippetUI::Response::~Response((SnippetUI::Response *)v25);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(a4, "");
}

void sub_1C5F9F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  SnippetUI::Response::~Response((SnippetUI::Response *)&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformText(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void (**v16[16])(std::basic_string<char16_t> *__return_ptr, void);
  std::string v17;
  uint64_t vars8;

  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7)
    {
      uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a3 + 8);
      }
      if (v9)
      {
        siri::dialogengine::GetCanonicalLocale((const std::string *)a1, 0, &v17);
        siri::dialogengine::RegisterMorphunData(&v17);
        v14[0] = 0;
        v14[1] = 0;
        uint64_t v15 = 0;
        memset(&v13, 0, sizeof(v13));
        morphun::util::ULocale::ULocale();
        morphun::util::StringUtils::to_u16string();
        siri::dialogengine::TransformText(&v13, (uint64_t)v14, v16, (uint64_t *)a3, 1);
        morphun::util::StringUtils::to_string();
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(v14[0]);
        }
        morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v16);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        return;
      }
      std::string v10 = "TransformText: No op specified";
    }
    else
    {
      std::string v10 = "TransformText: Input string is empty";
    }
  }
  else
  {
    std::string v10 = "TransformText: No locale specified";
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)v10, (const char *)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    char v11 = *(const std::string::value_type **)a2;
    std::string::size_type v12 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external(a4, v11, v12);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void sub_1C5F9FBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformText(std::basic_string<char16_t> *this, uint64_t a2, void (***a3)(std::basic_string<char16_t> *__return_ptr, void), uint64_t *a4, int a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::basic_string<char16_t> *)a2;
  }
  int v10 = *((unsigned __int8 *)a4 + 23);
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    switch(*((unsigned char *)a4 + 23))
    {
      case 9:
        if (*a4 == 0x7361637265707075 && *((unsigned char *)a4 + 8) == 101) {
          goto LABEL_125;
        }
        if (*a4 != 0x7361637265776F6CLL || *((unsigned char *)a4 + 8) != 101) {
          return;
        }
        goto LABEL_26;
      case 0xA:
        if (*a4 == 0x7269667265776F6CLL && *((_WORD *)a4 + 4) == 29811) {
          goto LABEL_127;
        }
        if (*a4 != 0x7269667265707075 || *((_WORD *)a4 + 4) != 29811) {
          goto LABEL_60;
        }
        goto LABEL_80;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x10:
      case 0x11:
        return;
      case 0xF:
        if (*a4 == 0x696C617469706163 && *(uint64_t *)((char *)a4 + 7) == 0x7473726966657A69 && a5 == 1) {
          goto LABEL_81;
        }
        return;
      case 0x12:
        if (*a4 == 0x696C617469706163 && a4[1] == 0x6E65746E6573657ALL && *((_WORD *)a4 + 8) == 25955 && a5 == 1) {
          goto LABEL_151;
        }
        return;
      default:
        goto LABEL_102;
    }
  }
  switch(a4[1])
  {
    case 9:
      std::basic_string<char16_t> v13 = (uint64_t *)*a4;
      if (*(void *)*a4 == 0x7361637265707075 && *(unsigned char *)(*a4 + 8) == 101)
      {
LABEL_125:
        if (a5 == 1) {
          morphun::util::StringUtils::uppercase();
        }
      }
      else
      {
        uint64_t v15 = *v13;
        int v16 = *((unsigned __int8 *)v13 + 8);
        if (v15 != 0x7361637265776F6CLL || v16 != 101) {
          goto LABEL_96;
        }
LABEL_26:
        morphun::util::StringUtils::lowercase();
      }
      return;
    case 10:
      long long v29 = (uint64_t *)*a4;
      if (*(void *)*a4 == 0x7269667265776F6CLL && *(_WORD *)(*a4 + 8) == 29811)
      {
LABEL_127:
        std::string::basic_string[abi:ne180100]<0>(&v57, "");
        morphun::util::StringUtils::to_u16string();
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
        if ((v43 & 0x80u) != 0) {
          uint64_t v43 = *(void *)(a2 + 8);
        }
        if (v43)
        {
          LODWORD(v44) = 0;
          do
          {
            unsigned int v45 = morphun::util::StringUtils::codePointAt();
            if (!v44)
            {
              memset(&v57, 0, sizeof(v57));
              morphun::util::StringUtils::appendCodePoint();
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                std::basic_string<char16_t>::__init_copy_ctor_external(&v61, (const std::basic_string<char16_t>::value_type *)v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
              }
              else {
                std::basic_string<char16_t> v61 = (std::basic_string<char16_t>)v57;
              }
              morphun::util::StringUtils::lowercase();
              if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v61.__r_.__value_.__l.__data_);
              }
              morphun::util::StringUtils::codePointAt();
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v57.__r_.__value_.__l.__data_);
              }
            }
            morphun::util::StringUtils::appendCodePoint();
            if (v45 < 0x10000) {
              int v46 = 1;
            }
            else {
              int v46 = 2;
            }
            unint64_t v44 = (v46 + v44);
            unint64_t v47 = *(unsigned __int8 *)(a2 + 23);
            if ((v47 & 0x80u) != 0) {
              unint64_t v47 = *(void *)(a2 + 8);
            }
          }
          while (v47 > v44);
        }
        std::basic_string<char16_t>::operator=(this, &__str);
        goto LABEL_148;
      }
      uint64_t v31 = *v29;
      int v32 = *((unsigned __int16 *)v29 + 4);
      if (v31 == 0x7269667265707075 && v32 == 29811) {
        goto LABEL_80;
      }
      goto LABEL_96;
    case 15:
      if (*(void *)*a4 != 0x696C617469706163 || *(void *)(*a4 + 7) != 0x7473726966657A69) {
        goto LABEL_96;
      }
LABEL_80:
      if (a5 == 1)
      {
LABEL_81:
        if (!siri::dialogengine::IsUpperFirstException())
        {
          siri::dialogengine::CapitalizeFirstInternal(&__str, (const std::basic_string<char16_t> *)a2);
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(this->__r_.__value_.__l.__data_);
          }
          *this = __str;
        }
      }
      return;
    case 18:
      if (*(void *)*a4 != 0x696C617469706163
        || *(void *)(*a4 + 8) != 0x6E65746E6573657ALL
        || *(_WORD *)(*a4 + 16) != 25955)
      {
        if ((v10 & 0x80) != 0)
        {
LABEL_96:
          if (a4[1] != 10) {
            goto LABEL_104;
          }
          if (*(void *)*a4 == 0x696C617469706163 && *(_WORD *)(*a4 + 8) == 25978)
          {
LABEL_116:
            if (a5 != 1) {
              return;
            }
            morphun::util::StringUtils::to_string();
            (**a3)(&v61, a3);
            morphun::util::StringUtils::to_string();
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v61.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::ICUTitleCase((uint64_t)&__str, &__p);
            morphun::util::StringUtils::to_u16string();
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(this->__r_.__value_.__l.__data_);
            }
            *this = v61;
            *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
            v61.__r_.__value_.__s.__data_[0] = 0;
            if (v60 < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
LABEL_148:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
            std::string::size_type v48 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_164:
            operator delete(v48);
            return;
          }
          if ((v10 & 0x80) != 0)
          {
LABEL_104:
            if (a4[1] != 5) {
              return;
            }
            a4 = (uint64_t *)*a4;
          }
          else
          {
LABEL_102:
            if (v10 != 5) {
              return;
            }
          }
        }
        else if (v10 != 5)
        {
          if (v10 != 10) {
            return;
          }
LABEL_60:
          if (*a4 != 0x696C617469706163 || *((_WORD *)a4 + 4) != 25978) {
            return;
          }
          goto LABEL_116;
        }
        BOOL v38 = *(_DWORD *)a4 != 1953461617 || *((unsigned char *)a4 + 4) != 101;
        if (a5 == 1 && !v38)
        {
          uint64_t DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider((morphun::dialog::LocalizedCommonConceptFactoryProvider *)this);
          uint64_t v41 = (*(uint64_t (**)(uint64_t, void))(*(void *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, a3);
          if (v41)
          {
            morphun::dialog::SpeakableString::SpeakableString();
            (*(void (**)(std::string *__return_ptr, uint64_t, std::basic_string<char16_t> *))(*(void *)v41 + 96))(&v57, v41, &__str);
            Print = (const std::basic_string<char16_t> *)morphun::dialog::SpeakableString::getPrint((morphun::dialog::SpeakableString *)&v57);
            std::basic_string<char16_t>::operator=(this, Print);
            morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&v57);
            morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
          }
          else
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create morphun concept factory to add quotes. Morphun data not found?", v40);
          }
        }
        return;
      }
      if (a5 != 1) {
        return;
      }
LABEL_151:
      if (!siri::dialogengine::IsUpperFirstException())
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "[[CAPITALIZE_SENTENCE]]");
        morphun::util::StringUtils::to_u16string();
        int v49 = *(char *)(a2 + 23);
        char v50 = v49 >= 0
            ? (const std::basic_string<char16_t>::value_type *)a2
            : *(const std::basic_string<char16_t>::value_type **)a2;
        std::basic_string<char16_t>::size_type v51 = v49 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
        std::basic_string<char16_t>::append(&__str, v50, v51);
        v61.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__l.__size_;
        std::basic_string<char16_t>::size_type v52 = __str.__r_.__value_.__r.__words[0];
        *(std::basic_string<char16_t>::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7);
        char v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        memset(&__str, 0, sizeof(__str));
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(this->__r_.__value_.__l.__data_);
          int v55 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          std::basic_string<char16_t>::size_type v56 = v61.__r_.__value_.__r.__words[0];
          this->__r_.__value_.__r.__words[0] = v52;
          this->__r_.__value_.__l.__size_ = v56;
          *(std::basic_string<char16_t>::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&this->__r_.__value_.__s + 23) = v53;
          if (v55 < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::basic_string<char16_t>::size_type v54 = v61.__r_.__value_.__r.__words[0];
          this->__r_.__value_.__r.__words[0] = v52;
          this->__r_.__value_.__l.__size_ = v54;
          *(std::basic_string<char16_t>::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&this->__r_.__value_.__s + 23) = v53;
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v48 = (void *)v57.__r_.__value_.__r.__words[0];
          goto LABEL_164;
        }
      }
      return;
    default:
      goto LABEL_96;
  }
}

void sub_1C5FA05D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C5FA0678);
}

void sub_1C5FA0610(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C5FA0688);
}

void sub_1C5FA0628()
{
}

void sub_1C5FA0630()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x1C5FA0640);
  }
  JUMPOUT(0x1C5FA064CLL);
}

void sub_1C5FA0648(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5FA0668);
}

void sub_1C5FA0660(_Unwind_Exception *a1)
{
  if (v4 < 0) {
    operator delete(v3);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::operator=(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::basic_string<char16_t>::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        std::basic_string<char16_t>::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::basic_string<char16_t> __str = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
        std::basic_string<char16_t>::size_type v4 = size;
      }
      return std::basic_string<char16_t>::__assign_no_alias<false>(this, (const std::basic_string<char16_t>::value_type *)__str, v4);
    }
    else if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char16_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

BOOL siri::dialogengine::IsUpperFirstException()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::flag, memory_order_acquire) != -1)
  {
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    int v10 = &v8;
    std::__call_once(v0, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::$_0 &&>>);
  }
  morphun::util::StringUtils::to_string();
  uint64_t v1 = *(unsigned __int8 **)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::sUpperFirstExceptions;
  long long v2 = *(unsigned __int8 **)(siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::sUpperFirstExceptions
                           + 8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v8;
  }
  if (v1 == v2)
  {
    BOOL v4 = 0;
  }
  else
  {
    do
    {
      BOOL v3 = siri::dialogengine::StringStartsWith(&__p, v1);
      BOOL v4 = v3;
      v1 += 24;
      int v5 = v1 == v2 || v3;
    }
    while (v5 != 1);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C5FA0884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void siri::dialogengine::CapitalizeFirstInternal(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *a2)
{
  char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    if (!a2->__r_.__value_.__l.__size_)
    {
      uint64_t v35 = (const std::basic_string<char16_t>::value_type *)a2->__r_.__value_.__r.__words[0];
      std::basic_string<char16_t>::__init_copy_ctor_external(this, v35, 0);
      return;
    }
  }
  else if (!*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    *this = *a2;
    return;
  }
  std::basic_string<char16_t>::size_type v5 = 0;
  std::string __p = 0;
  unint64_t v43 = 0;
  int64_t v44 = 0;
  while (1)
  {
    uint64_t v6 = v4 >= 0 ? (unsigned __int16 *)a2 : (unsigned __int16 *)a2->__r_.__value_.__r.__words[0];
    int8_t v7 = u_charType(v6[v5]);
    char v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (((1 << v7) & 0x3E) != 0) {
      break;
    }
    int v10 = v9 >= 0 ? (unsigned __int16 *)a2 : (unsigned __int16 *)a2->__r_.__value_.__r.__words[0];
    if (!v10[v5]) {
      break;
    }
    int8_t v11 = u_charType(v10[v5]);
    int v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (((1 << v11) & 0xE00) != 0)
    {
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_76;
      }
      std::basic_string<char16_t>::size_type size = a2->__r_.__value_.__l.__size_;
LABEL_96:
      std::basic_string<char16_t>::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, size);
      goto LABEL_101;
    }
    if (v12 >= 0) {
      std::basic_string<char16_t> v13 = a2;
    }
    else {
      std::basic_string<char16_t> v13 = (const std::basic_string<char16_t> *)a2->__r_.__value_.__r.__words[0];
    }
    std::basic_string<char16_t>::value_type v14 = v13->__r_.__value_.__s.__data_[v5];
    if ((SHIBYTE(v44) & 0x80000000) == 0)
    {
      if (HIBYTE(v44) != 10)
      {
        unint64_t v16 = HIBYTE(v44);
        HIBYTE(v44) = (HIBYTE(v44) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_42;
      }
      uint64_t v15 = &__p;
      unint64_t v16 = 10;
LABEL_27:
      if (v16 + 1 > 2 * v16) {
        unint64_t v18 = v16 + 1;
      }
      else {
        unint64_t v18 = 2 * v16;
      }
      uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v18 | 3) != 0xB) {
        uint64_t v19 = v18 | 3;
      }
      if (v18 >= 0xB) {
        uint64_t v17 = v19 + 1;
      }
      else {
        uint64_t v17 = 11;
      }
LABEL_35:
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v17);
      p_p = v20;
      uint64_t v23 = v22;
      if (!v16 || (memmove(v20, v15, 2 * v16), v16 != 10)) {
        operator delete(v15);
      }
      std::string __p = p_p;
      int64_t v44 = v23 | 0x8000000000000000;
      goto LABEL_41;
    }
    unint64_t v16 = (v44 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v43 == v16)
    {
      if ((v44 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v44 >= 0) {
        uint64_t v15 = &__p;
      }
      else {
        uint64_t v15 = __p;
      }
      uint64_t v17 = 0x7FFFFFFFFFFFFFF7;
      if (v16 <= 0x3FFFFFFFFFFFFFF2) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
    p_p = (char *)__p;
    unint64_t v16 = v43;
LABEL_41:
    unint64_t v43 = v16 + 1;
LABEL_42:
    uint64_t v24 = &p_p[2 * v16];
    *(_WORD *)uint64_t v24 = v14;
    *((_WORD *)v24 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
    ++v5;
    char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v25 = HIBYTE(v44);
  if (v44 < 0) {
    unint64_t v25 = v43;
  }
  std::basic_string<char16_t>::size_type size = a2->__r_.__value_.__l.__size_;
  if (v9 >= 0) {
    std::basic_string<char16_t>::size_type v27 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::basic_string<char16_t>::size_type v27 = a2->__r_.__value_.__l.__size_;
  }
  if (v25 == v27)
  {
    if (!v25)
    {
LABEL_58:
      if ((*((unsigned char *)&a2->__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_76:
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        goto LABEL_101;
      }
      goto LABEL_96;
    }
    if (v9 >= 0) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = (const std::basic_string<char16_t> *)a2->__r_.__value_.__r.__words[0];
    }
    long long v29 = (unsigned __int16 *)&__p;
    if (v44 < 0) {
      long long v29 = (unsigned __int16 *)__p;
    }
    unint64_t v30 = v25;
    while ((unsigned __int16)v28->__r_.__value_.__s.__data_[0] == *v29)
    {
      ++v29;
      uint64_t v28 = (const std::basic_string<char16_t> *)((char *)v28 + 2);
      if (!--v30) {
        goto LABEL_58;
      }
    }
  }
  if (v25)
  {
    std::basic_string<char16_t>::basic_string(&v41, a2, v5, v27 - 1, v8);
    morphun::util::StringUtils::capitalizeFirst();
    if (v44 >= 0) {
      uint64_t v31 = (std::basic_string<char16_t> *)&__p;
    }
    else {
      uint64_t v31 = (std::basic_string<char16_t> *)__p;
    }
    if (v44 >= 0) {
      std::basic_string<char16_t>::size_type v32 = HIBYTE(v44);
    }
    else {
      std::basic_string<char16_t>::size_type v32 = v43;
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char16_t>::size_type v33 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::basic_string<char16_t>::size_type v33 = v40.__r_.__value_.__l.__size_;
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char16_t>::size_type v34 = 10;
    }
    else {
      std::basic_string<char16_t>::size_type v34 = (v40.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if (v34 - v33 >= v32)
    {
      if (v32)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::vector<std::string> v36 = &v40;
        }
        else {
          std::vector<std::string> v36 = (std::basic_string<char16_t> *)v40.__r_.__value_.__r.__words[0];
        }
        if (v33)
        {
          if ((std::basic_string<char16_t> *)((char *)v36 + 2 * v33) <= v31 || v36 > v31) {
            std::basic_string<char16_t>::size_type v38 = 0;
          }
          else {
            std::basic_string<char16_t>::size_type v38 = v32;
          }
          uint64_t v31 = (std::basic_string<char16_t> *)((char *)v31 + 2 * v38);
          memmove((char *)v36 + 2 * v32, v36, 2 * v33);
        }
        memmove(v36, v31, 2 * v32);
        std::basic_string<char16_t>::size_type v39 = v33 + v32;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          v40.__r_.__value_.__l.__size_ = v33 + v32;
        }
        else {
          *((unsigned char *)&v40.__r_.__value_.__s + 23) = v39 & 0x7F;
        }
        v36->__r_.__value_.__s.__data_[v39] = 0;
      }
    }
    else
    {
      std::basic_string<char16_t>::__grow_by_and_replace(&v40, v34, v33 + v32 - v34, v33, 0, 0, v32, (const std::basic_string<char16_t>::value_type *)v31);
    }
    *this = v40;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    morphun::util::StringUtils::capitalizeFirst();
  }
LABEL_101:
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
}

void sub_1C5FA0D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char16_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char16_t>::size_type v6 = 10;
    std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      std::string v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      std::basic_string<char16_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (__old_cap > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  unint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v19);
  std::basic_string<char16_t>::size_type v21 = (std::basic_string<char16_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 2 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  }
  std::basic_string<char16_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  }
  if (__old_cap != 10) {
    operator delete(v15);
  }
  std::basic_string<char16_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5FA109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  *(void *)(v11 + 8) = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v14 = 0;
  while (1)
  {
    if (*(&a11 + v14 + 71) < 0) {
      operator delete(*(void **)(&a11 + v14 + 48));
    }
    v14 -= 24;
    if (v14 == -72)
    {
      MEMORY[0x1C8796D70](v11, 0x20C40960023A9);
      _Unwind_Resume(a1);
    }
  }
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<true>(std::basic_string<char16_t> *__dst, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  BOOL v5 = __n_add > 0xA;
  std::basic_string<char16_t>::size_type v6 = __n_add - 10;
  if (v5)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(__dst, 0xAuLL, v6, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add) {
      memmove(__dst, __src, 2 * __n_add);
    }
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<false>(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t>::size_type v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    std::basic_string<char16_t>::size_type v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add) {
      memmove(v6, __src, 2 * __n_add);
    }
    *((_WORD *)v6 + __n_add) = 0;
  }
  return this;
}

void siri::dialogengine::TransformText(siri::dialogengine::SpeakableString *a1@<X1>, siri::dialogengine *a2@<X0>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void (**v37[16])(std::basic_string<char16_t> *__return_ptr, void);
  void *v38[2];
  unsigned __int8 v39;
  uint64_t vars8;

  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6)
  {
    siri::dialogengine::RegisterMorphunData(a2, a1);
    if (a2) {
      siri::dialogengine::Context::GetLocale(a2, v9, (uint64_t)v38);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v38, "");
    }
    unint64_t v11 = v39;
    if ((v39 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)v38[1];
    }
    if (v11)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v36, 0, sizeof(v36));
      memset(&v35, 0, sizeof(v35));
      morphun::util::ULocale::ULocale();
      if (*((char *)a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((void *)a1 + 1));
      }
      else {
        std::string __p = *(std::string *)a1;
      }
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((char *)a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)a1 + 1);
      }
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::StringSplit((unsigned __int8 *)a3, ",", &v33);
      uint64_t v12 = *((unsigned __int8 *)a1 + 71);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)a1 + 7);
      }
      if (v12)
      {
        BOOL v13 = 0;
      }
      else
      {
        uint64_t v14 = *((unsigned __int8 *)a1 + 95);
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *((void *)a1 + 10);
        }
        BOOL v13 = v14 == 0;
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint(a1, &__p);
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::SpeakableString::GetRedactedSpeak(a1, &__p);
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = v33;
      for (int i = v34; v15 != i; ++v15)
      {
        siri::dialogengine::StringTrim(" \t\n\r", v15, &__str);
        siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v36, v37, (uint64_t *)&__p, 1);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        std::string v36 = __str;
        siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v35, v37, (uint64_t *)&__p, 0);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        std::string v35 = __str;
        if (!v13)
        {
          siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v32, v37, (uint64_t *)&__p, 1);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          std::string v32 = __str;
          siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v31, v37, (uint64_t *)&__p, 0);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          std::string v31 = __str;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      siri::dialogengine::SpeakableStringFromMorphun((uint64_t)a4);
      if (!v13)
      {
        siri::dialogengine::SpeakableStringFromMorphun((uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = __p;
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else {
          std::string v17 = v19;
        }
        std::string::operator=(a4 + 2, &__str);
        std::string::operator=(a4 + 3, &v17);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v29 < 0) {
          operator delete(v28);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        if (v21 < 0) {
          operator delete(v20);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v37);
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"TransformText has empty locale", v10);
      siri::dialogengine::SpeakableString::SpeakableString(a4, a1);
    }
    if ((char)v39 < 0) {
      operator delete(v38[0]);
    }
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString(a4, a1);
  }
}

void sub_1C5FA1768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a16);
  siri::dialogengine::SpeakableString::~SpeakableString(v61);
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  a16 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v62 - 233) < 0) {
    operator delete(*(void **)(v62 - 256));
  }
  if (*(char *)(v62 - 201) < 0) {
    operator delete(*(void **)(v62 - 224));
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(v62 - 200));
  if (*(char *)(v62 - 49) < 0) {
    operator delete(*(void **)(v62 - 72));
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsValidTransformMode(const std::string *a1)
{
  {
    operator new();
  }
  long long v2 = (std::once_flag::_State_type *)siri::dialogengine::IsValidTransformMode(std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::IsValidTransformMode(std::string const&)::flag, memory_order_acquire) != -1)
  {
    v7[0] = &v9;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    std::__call_once(v2, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsValidTransformMode(std::string const&)::$_0 &&>>);
  }
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = std::__tree<std::string>::find<std::string>(siri::dialogengine::IsValidTransformMode(std::string const&)::sValidModes, (const void **)v7);
  uint64_t v4 = siri::dialogengine::IsValidTransformMode(std::string const&)::sValidModes;
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v4 + 8 != v3;
}

void sub_1C5FA1A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsValidTransformMode(std::string const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5FA1BFC(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 215) < 0) {
      operator delete(*(void **)(v2 + v4 + 192));
    }
    v4 -= 24;
    if (v4 == -216)
    {
      MEMORY[0x1C8796D70](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::TransformTextLower(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    morphun::util::ULocale::ULocale();
    morphun::util::StringUtils::to_u16string();
    morphun::util::StringUtils::lowercase();
    morphun::util::StringUtils::to_string();
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v3);
    return;
  }
  uint64_t v2 = *(const std::string::value_type **)a1;
  std::string::__init_copy_ctor_external(a2, v2, 0);
}

void sub_1C5FA1DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a28);
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformTextCapitalize(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    memset(&v4, 0, sizeof(v4));
    memset(&v3, 0, sizeof(v3));
    morphun::util::ULocale::ULocale();
    morphun::util::StringUtils::to_u16string();
    siri::dialogengine::CapitalizeFirstInternal(&v3, &v4);
    morphun::util::StringUtils::to_string();
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v3.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
    return;
  }
  uint64_t v2 = *(const std::string::value_type **)a1;
  std::string::__init_copy_ctor_external(a2, v2, 0);
}

void sub_1C5FA1F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a25);
  _Unwind_Resume(a1);
}

void sub_1C5FA1FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1C5FA1FB4);
}

void siri::dialogengine::TransformTextMatch(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  void (**v12[16])(std::basic_string<char16_t> *__return_ptr, void);
  uint64_t vars8;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = 0;
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    morphun::util::ULocale::ULocale();
    morphun::util::StringUtils::to_u16string();
    morphun::util::StringUtils::to_u16string();
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v7 = 0;
    morphun::util::StringUtils::lowercase();
    std::string::basic_string[abi:ne180100]<0>(v3, "lowercase");
    siri::dialogengine::TransformText(&v5, (uint64_t)v10, v12, (uint64_t *)v3, 1);
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    morphun::util::StringUtils::to_string();
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v12);
    return;
  }
  uint64_t v2 = *(const std::string::value_type **)a1;
  std::string::__init_copy_ctor_external(a2, v2, 0);
}

void sub_1C5FA22C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a40);
  _Unwind_Resume(a1);
}

void sub_1C5FA236C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  JUMPOUT(0x1C5FA2364);
}

void siri::dialogengine::HandleCapitalizeSentence(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0) {
    uint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v4) {
    std::basic_string<char16_t> v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else {
    std::basic_string<char16_t> v5 = a2;
  }
  if (size >= 23)
  {
    uint64_t v6 = (char *)v5 + size;
    uint64_t v7 = v5;
    while (1)
    {
      char v8 = (char *)memchr(v7, 91, size - 22);
      if (!v8) {
        return;
      }
      BOOL v9 = *(void *)v8 == 0x4154495041435B5BLL && *((void *)v8 + 1) == 0x4E45535F455A494CLL;
      if (v9 && *(void *)(v8 + 15) == 0x5D5D45434E45544ELL) {
        break;
      }
      uint64_t v7 = (std::string *)(v8 + 1);
      uint64_t size = v6 - (char *)v7;
      if (v6 - (char *)v7 < 23) {
        return;
      }
    }
    if (v8 != v6)
    {
      std::string::size_type v11 = v8 - (char *)v5;
      if (v8 - (char *)v5 != -1)
      {
        while (1)
        {
          std::string::basic_string(&v30, a2, 0, v11, (std::allocator<char> *)&v29);
          std::string::basic_string(&v29, a2, v11 + 23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
          siri::dialogengine::StringTrimRight(" \t\n\r", &v30, &__p);
          morphun::util::StringUtils::to_u16string();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::basic_string<char16_t>::size_type v13 = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
LABEL_27:
              std::basic_string<char16_t>::basic_string((std::basic_string<char16_t> *)&__p, &__str, v13 - 1, 0xFFFFFFFFFFFFFFFFLL, v12);
              goto LABEL_30;
            }
          }
          else
          {
            std::basic_string<char16_t>::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if (*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
              goto LABEL_27;
            }
          }
          std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, byte_1C61DDC4A);
LABEL_30:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_40;
            }
            if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
              goto LABEL_43;
            }
            unsigned int data_low = LOWORD(__p.__r_.__value_.__l.__data_);
            if (LOWORD(__p.__r_.__value_.__l.__data_) > 0x3Fu) {
              goto LABEL_73;
            }
            uint64_t v15 = 1 << __p.__r_.__value_.__s.__data_[0];
            goto LABEL_39;
          }
          if (!__p.__r_.__value_.__l.__size_) {
            goto LABEL_40;
          }
          if (__p.__r_.__value_.__l.__size_ != 1) {
            goto LABEL_43;
          }
          unsigned int data_low = *(unsigned __int16 *)__p.__r_.__value_.__l.__data_;
          if (data_low <= 0x3F)
          {
            uint64_t v15 = 1 << data_low;
LABEL_39:
            if ((v15 & 0x8000400200000000) != 0) {
              goto LABEL_40;
            }
          }
LABEL_73:
          if (data_low == 191)
          {
LABEL_40:
            siri::dialogengine::TransformTextCapitalize((uint64_t)&v29, &v26);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            std::string v29 = v26;
          }
LABEL_43:
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v30.__r_.__value_.__l.__data_, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v26);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          unint64_t v16 = v26.__r_.__value_.__r.__words[2];
          a2->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
          uint64_t v17 = HIBYTE(v16);
          BOOL v18 = (v17 & 0x80u) != 0;
          if ((v17 & 0x80u) != 0) {
            uint64_t v17 = a2->__r_.__value_.__l.__size_;
          }
          if (v18) {
            std::string v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          else {
            std::string v19 = a2;
          }
          unint64_t v20 = (char *)v19 + v17;
          if (v17 >= 23)
          {
            char v21 = v19;
            do
            {
              uint64_t v22 = memchr(v21, 91, v17 - 22);
              if (!v22) {
                break;
              }
              char v23 = (char *)v22;
              if (*v22 == 0x4154495041435B5BLL
                && v22[1] == 0x4E45535F455A494CLL
                && *(void *)((char *)v22 + 15) == 0x5D5D45434E45544ELL)
              {
                goto LABEL_62;
              }
              char v21 = (std::string *)((char *)v22 + 1);
              uint64_t v17 = v20 - (v23 + 1);
            }
            while (v17 > 22);
          }
          char v23 = v20;
LABEL_62:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          if (v23 != v20)
          {
            std::string::size_type v11 = v23 - (char *)v19;
            if (v11 != -1) {
              continue;
            }
          }
          return;
        }
      }
    }
  }
}

void sub_1C5FA2700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 + 23) < 0) {
    operator delete(*(void **)v36);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WritePatternBinaryFile(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::basic_string<char16_t> v5 = (std::__shared_weak_count *)a1[1];
  v13[0] = *a1;
  v13[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternbin");
  siri::dialogengine::PatternIdToPath(a3, (uint64_t)v8, v10);
  siri::dialogengine::JoinPath(a2, (uint64_t)v10, (uint64_t)&__p);
  BOOL v6 = siri::dialogengine::WritePatternBinaryFile(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v6;
}

void sub_1C5FA2860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WritePatternBinaryFile(uint64_t *a1, std::string *a2)
{
  siri::dialogengine::PatternBinary::Pattern::Pattern((siri::dialogengine::PatternBinary::Pattern *)v56);
  v57 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v74, "PATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v70, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  v57 |= 2u;
  std::string::basic_string[abi:ne180100]<0>(&v74, "1.0");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v71, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v4 + 64), *(void *)(v4 + 72));
  }
  else {
    std::string v74 = *(std::string *)(v4 + 64);
  }
  v57 |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v72, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *a1;
  if (*(char *)(*a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v5 + 112), *(void *)(v5 + 120));
  }
  else {
    std::string v74 = *(std::string *)(v5 + 112);
  }
  v57 |= 8u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v73, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 184));
  std::string::size_type v6 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      uint64_t v7 = v61;
      if (!v61) {
        break;
      }
      uint64_t v8 = v59;
      int v9 = *v61;
      if (v59 >= *v61)
      {
        if (v9 == v60)
        {
LABEL_21:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v58, v9 + 1);
          uint64_t v7 = v61;
          int v9 = *v61;
        }
        *uint64_t v7 = v9 + 1;
        int v10 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Metadata>(v58);
        uint64_t v11 = v59++;
        *(void *)&v61[2 * v11 + 2] = v10;
        goto LABEL_23;
      }
      ++v59;
      int v10 = *(siri::dialogengine::PatternBinary::Metadata **)&v61[2 * v8 + 2];
LABEL_23:
      uint64_t v12 = (const std::string *)(v6 + 32);
      std::basic_string<char16_t>::size_type v13 = (std::string *)*((void *)v10 + 3);
      *((_DWORD *)v10 + 4) |= 1u;
      if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v10 + 24, (uint64_t)v12);
      }
      std::string::operator=(v13, v12);
      uint64_t v14 = (const std::string *)(v6 + 56);
      uint64_t v17 = (uint64_t *)*((void *)v10 + 4);
      uint64_t v16 = (uint64_t)v10 + 32;
      uint64_t v15 = (std::string *)v17;
      *(_DWORD *)(v16 - 16) |= 2u;
      if (v17 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v14);
      }
      std::string::operator=(v15, v14);
      BOOL v18 = *(std::string **)(v6 + 8);
      if (v18)
      {
        do
        {
          std::string v19 = v18;
          BOOL v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
        }
        while (v18);
      }
      else
      {
        do
        {
          std::string v19 = *(std::string **)(v6 + 16);
          BOOL v20 = v19->__r_.__value_.__r.__words[0] == v6;
          std::string::size_type v6 = (std::string::size_type)v19;
        }
        while (!v20);
      }
      std::string::size_type v6 = (std::string::size_type)v19;
      if (v19 == (std::string *)&v74.__r_.__value_.__r.__words[1]) {
        goto LABEL_35;
      }
    }
    int v9 = v60;
    goto LABEL_21;
  }
LABEL_35:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v74.__r_.__value_.__l.__size_);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 160));
  std::string::size_type v21 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      uint64_t v22 = v65;
      if (!v65) {
        break;
      }
      uint64_t v23 = v63;
      int v24 = *v65;
      if (v63 >= *v65)
      {
        if (v24 == v64)
        {
LABEL_41:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v62, v24 + 1);
          uint64_t v22 = v65;
          int v24 = *v65;
        }
        *uint64_t v22 = v24 + 1;
        char v25 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Setting>(v62);
        uint64_t v26 = v63++;
        *(void *)&v65[2 * v26 + 2] = v25;
        goto LABEL_43;
      }
      ++v63;
      char v25 = *(siri::dialogengine::PatternBinary::Setting **)&v65[2 * v23 + 2];
LABEL_43:
      char v27 = (const std::string *)(v21 + 32);
      uint64_t v28 = (std::string *)*((void *)v25 + 3);
      *((_DWORD *)v25 + 4) |= 1u;
      if (v28 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v25 + 24, (uint64_t)v27);
      }
      std::string::operator=(v28, v27);
      std::string v29 = (const std::string *)(v21 + 56);
      std::string v32 = (uint64_t *)*((void *)v25 + 4);
      uint64_t v31 = (uint64_t)v25 + 32;
      std::string v30 = (std::string *)v32;
      *(_DWORD *)(v31 - 16) |= 2u;
      if (v32 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v31, (uint64_t)v29);
      }
      std::string::operator=(v30, v29);
      std::basic_string<char16_t>::size_type v33 = *(std::string **)(v21 + 8);
      if (v33)
      {
        do
        {
          std::basic_string<char16_t>::size_type v34 = v33;
          std::basic_string<char16_t>::size_type v33 = (std::string *)v33->__r_.__value_.__r.__words[0];
        }
        while (v33);
      }
      else
      {
        do
        {
          std::basic_string<char16_t>::size_type v34 = *(std::string **)(v21 + 16);
          BOOL v20 = v34->__r_.__value_.__r.__words[0] == v21;
          std::string::size_type v21 = (std::string::size_type)v34;
        }
        while (!v20);
      }
      std::string::size_type v21 = (std::string::size_type)v34;
      if (v34 == (std::string *)&v74.__r_.__value_.__r.__words[1]) {
        goto LABEL_55;
      }
    }
    int v24 = v64;
    goto LABEL_41;
  }
LABEL_55:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v74.__r_.__value_.__l.__size_);
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 208));
  std::string::size_type v35 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      uint64_t v36 = v69;
      if (!v69) {
        break;
      }
      uint64_t v37 = v67;
      int v38 = *v69;
      if (v67 < *v69)
      {
        ++v67;
        std::basic_string<char16_t>::size_type v39 = *(siri::dialogengine::PatternBinary::Group **)&v69[2 * v37 + 2];
        goto LABEL_63;
      }
      if (v38 == v68) {
        goto LABEL_61;
      }
LABEL_62:
      *uint64_t v36 = v38 + 1;
      std::basic_string<char16_t>::size_type v39 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Group>(v66);
      uint64_t v40 = v67++;
      *(void *)&v69[2 * v40 + 2] = v39;
LABEL_63:
      uint64_t v41 = *(void *)(v35 + 56);
      if (*(char *)(v41 + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v41 + 64), *(void *)(v41 + 72));
      }
      else {
        std::string __p = *(std::string *)(v41 + 64);
      }
      *((_DWORD *)v39 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v39 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v42 = *(void *)(v35 + 56);
      if (*(char *)(v42 + 159) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v42 + 136), *(void *)(v42 + 144));
      }
      else {
        std::string __p = *(std::string *)(v42 + 136);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_80;
        }
      }
      else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_80;
      }
      uint64_t v44 = *(void *)(v35 + 56);
      if (*(char *)(v44 + 159) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v44 + 136), *(void *)(v44 + 144));
      }
      else {
        std::string __p = *(std::string *)(v44 + 136);
      }
      *((_DWORD *)v39 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v39 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_80:
      uint64_t v45 = *(void *)(v35 + 56);
      if (*(char *)(v45 + 111) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v45 + 88), *(void *)(v45 + 96));
      }
      else {
        std::string __p = *(std::string *)(v45 + 88);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v46) {
          goto LABEL_91;
        }
      }
      else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_91;
      }
      *((_DWORD *)v39 + 4) |= 4u;
      unint64_t v47 = (siri::dialogengine::PatternBinary::Component *)*((void *)v39 + 5);
      if (!v47)
      {
        unint64_t v47 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Component>(0);
        *((void *)v39 + 5) = v47;
      }
      siri::dialogengine::PatternGroup::GetDialogIdWithComponent(*(siri::dialogengine::PatternGroup **)(v35 + 56), &__p);
      *((_DWORD *)v47 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v47 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_91:
      uint64_t v48 = *(void *)(v35 + 56);
      if (*(char *)(v48 + 135) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v48 + 112), *(void *)(v48 + 120));
      }
      else {
        std::string __p = *(std::string *)(v48 + 112);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v49)
        {
LABEL_98:
          *((_DWORD *)v39 + 4) |= 8u;
          char v50 = (siri::dialogengine::PatternBinary::Component *)*((void *)v39 + 6);
          if (!v50)
          {
            char v50 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Component>(0);
            *((void *)v39 + 6) = v50;
          }
          siri::dialogengine::PatternGroup::GetVisualIdWithComponent(*(siri::dialogengine::PatternGroup **)(v35 + 56), &__p);
          *((_DWORD *)v50 + 4) |= 1u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v50 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_98;
      }
      std::basic_string<char16_t>::size_type v51 = *(std::string **)(v35 + 8);
      if (v51)
      {
        do
        {
          std::basic_string<char16_t>::size_type v52 = v51;
          std::basic_string<char16_t>::size_type v51 = (std::string *)v51->__r_.__value_.__r.__words[0];
        }
        while (v51);
      }
      else
      {
        do
        {
          std::basic_string<char16_t>::size_type v52 = *(std::string **)(v35 + 16);
          BOOL v20 = v52->__r_.__value_.__r.__words[0] == v35;
          std::string::size_type v35 = (std::string::size_type)v52;
        }
        while (!v20);
      }
      std::string::size_type v35 = (std::string::size_type)v52;
      if (v52 == (std::string *)&v74.__r_.__value_.__r.__words[1]) {
        goto LABEL_108;
      }
    }
    int v38 = v68;
LABEL_61:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v66, v38 + 1);
    uint64_t v36 = v69;
    int v38 = *v69;
    goto LABEL_62;
  }
LABEL_108:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v74.__r_.__value_.__l.__size_);
  memset(&v74, 0, sizeof(v74));
  if (google::protobuf::MessageLite::SerializeToString(v56, &v74))
  {
    BOOL v53 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&v74.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    BOOL v53 = 0;
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::PatternBinary::Pattern::~Pattern((siri::dialogengine::PatternBinary::Pattern *)v56);
  return v53;
}

void sub_1C5FA3098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void (***siri::dialogengine::GetMeasurementSystemByType(uint64_t a1))(siri::dialogengine::CountryMetric *__hidden this)
{
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryUK::~CountryUK, siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUK, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryUS::~CountryUS, siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUS, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryMetric::~CountryMetric, siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryMetric, &dword_1C5C1E000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "uk");
  BOOL v2 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  BOOL v3 = v2;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUK;
    }
  }
  else if (v2)
  {
    return siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUK;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "us");
  BOOL v5 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    return siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUS;
  }
  else {
    return siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryMetric;
  }
}

void sub_1C5FA3320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CountryMetric::GetAreaUnit(siri::dialogengine::CountryMetric *this)
{
  return 3;
}

uint64_t siri::dialogengine::CountryMetric::GetWeightUnit(siri::dialogengine::CountryMetric *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryMetric::GetPressureUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetSpeedUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetLengthUnit(siri::dialogengine::CountryMetric *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryMetric::GetTemperatureUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetPersonLengthUnit(siri::dialogengine::CountryMetric *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryMetric::GetType(siri::dialogengine::CountryMetric *this)
{
  return 5;
}

void siri::dialogengine::CountryMetric::~CountryMetric(siri::dialogengine::CountryMetric *this)
{
}

uint64_t siri::dialogengine::CountryUS::GetAreaUnit(siri::dialogengine::CountryUS *this)
{
  return 5;
}

uint64_t siri::dialogengine::CountryUS::GetWeightUnit(siri::dialogengine::CountryUS *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryUS::GetPressureUnit(siri::dialogengine::CountryUS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryUS::GetSpeedUnit(siri::dialogengine::CountryUS *this)
{
  return 3;
}

uint64_t siri::dialogengine::CountryUS::GetLengthUnit(siri::dialogengine::CountryUS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUS::GetTemperatureUnit(siri::dialogengine::CountryUS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryUS::GetPersonLengthUnit(siri::dialogengine::CountryUS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUS::GetType(siri::dialogengine::CountryUS *this)
{
  return 8;
}

void siri::dialogengine::CountryUS::~CountryUS(siri::dialogengine::CountryUS *this)
{
}

uint64_t siri::dialogengine::CountryUK::GetPressureUnit(siri::dialogengine::CountryUK *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUK::GetTemperatureUnit(siri::dialogengine::CountryUK *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryUK::GetType(siri::dialogengine::CountryUK *this)
{
  return 7;
}

void siri::dialogengine::CountryUK::~CountryUK(siri::dialogengine::CountryUK *this)
{
}

void (***siri::dialogengine::GetMeasurementSystemForLocale())(siri::dialogengine::CountryMetric *__hidden this)
{
  {
    qword_1EA3D9800 = 0;
    qword_1EA3D97F8 = 0;
    siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap = (uint64_t)&qword_1EA3D97F8;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::dialogengine::MeasurementSystem *>::~map[abi:ne180100], &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryCentimetersKPH::~CountryCentimetersKPH, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersKPH, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryCentimetersMPS::~CountryCentimetersMPS, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryFeetKPH::~CountryFeetKPH, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryFeetKPH, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryIN::~CountryIN, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryIN, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryMetric::~CountryMetric, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryMetricMillibars::~CountryMetricMillibars, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryMetersMPS::~CountryMetersMPS, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryUK::~CountryUK, siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUK, &dword_1C5C1E000);
  }
  {
    __cxa_atexit((void (*)(void *))siri::dialogengine::CountryUS::~CountryUS, &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUS, &dword_1C5C1E000);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::flag, memory_order_acquire) != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    p_p = &__p;
    std::__call_once(&siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::flag, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::$_0 &&>>);
  }
  siri::dialogengine::GetLocaleCountry(&__p);
  uint64_t v1 = qword_1EA3D97F8;
  if (!qword_1EA3D97F8) {
    goto LABEL_20;
  }
  BOOL v2 = &qword_1EA3D97F8;
  do
  {
    BOOL v3 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9800, (const void **)(v1 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
    uint64_t v4 = (uint64_t *)(v1 + 8);
    if (!v3)
    {
      uint64_t v4 = (uint64_t *)v1;
      BOOL v2 = (uint64_t *)v1;
    }
    uint64_t v1 = *v4;
  }
  while (*v4);
  if (v2 == &qword_1EA3D97F8
    || (BOOL v5 = v2 + 4,
        std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9800, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v2 + 4)))
  {
LABEL_20:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v6 = &__p;
    }
    else {
      std::string::size_type v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No MeasurementSystem found for country '%s'; Using ICU fallback",
      v0,
      v6);
    ICUMeasurementSysteint m = siri::dialogengine::GetICUMeasurementSystem();
    uint64_t v8 = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUS;
    if (ICUMeasurementSystem == 2) {
      uint64_t v8 = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUK;
    }
    if (ICUMeasurementSystem) {
      int v9 = v8;
    }
    else {
      int v9 = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
    }
  }
  else
  {
    if (*((char *)v2 + 55) < 0) {
      BOOL v5 = (void *)*v5;
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Found MeasurementSystem for country '%s'", v0, v5);
    int v9 = (void (***)(siri::dialogengine::CountryMetric *__hidden))v2[7];
  }
  uint64_t v10 = ((uint64_t (*)(void))(*v9)[2])(v9);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"MeasurementSystem type: %d", v11, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1C5FA3930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::$_0 &&>>()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "AT");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AU");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersKPH;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "BE");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "BR");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CA");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryFeetKPH;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CH");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CL");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CN");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DE");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DK");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ES");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FI");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FR");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GB");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUK;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ID");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "IL");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "IN");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryIN;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "IT");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HK");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "JP");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "KR");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MX");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MY");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "NL");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "NO");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PL");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RU");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SA");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SE");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TH");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TW");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "US");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUS;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "VN");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ZA");
  BOOL v2 = __p;
  *((void *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5FA413C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(const void **a1, _OWORD **a2)
{
  uint64_t v3 = qword_1EA3D97F8;
  if (!qword_1EA3D97F8)
  {
    BOOL v5 = &qword_1EA3D97F8;
    std::string::size_type v6 = &qword_1EA3D97F8;
LABEL_11:
    uint64_t v8 = operator new(0x40uLL);
    int v9 = *a2;
    uint64_t v10 = *((void *)*a2 + 2);
    std::string v8[2] = **a2;
    *((void *)v8 + 6) = v10;
    void *v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = 0;
    *((void *)v8 + 7) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
    *((void *)v8 + 2) = v6;
    *BOOL v5 = (uint64_t)v8;
    uint64_t v11 = (uint64_t *)v8;
    if (*(void *)siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap)
    {
      siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap = *(void *)siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap;
      uint64_t v11 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EA3D97F8, v11);
    ++qword_1EA3D9800;
    return v8;
  }
  BOOL v5 = &qword_1EA3D97F8;
  while (1)
  {
    while (1)
    {
      std::string::size_type v6 = (uint64_t *)v3;
      char v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9800, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      BOOL v5 = v6;
      if (!*v6) {
        goto LABEL_11;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9800, v7, a1)) {
      break;
    }
    BOOL v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v8 = (_OWORD *)*v5;
  if (!*v5) {
    goto LABEL_11;
  }
  return v8;
}

uint64_t siri::dialogengine::CountryMetersMPS::GetSpeedUnit(siri::dialogengine::CountryMetersMPS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryMetersMPS::GetType(siri::dialogengine::CountryMetersMPS *this)
{
  return 4;
}

void siri::dialogengine::CountryMetersMPS::~CountryMetersMPS(siri::dialogengine::CountryMetersMPS *this)
{
}

uint64_t siri::dialogengine::CountryMetricMillibars::GetPressureUnit(siri::dialogengine::CountryMetricMillibars *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryMetricMillibars::GetType(siri::dialogengine::CountryMetricMillibars *this)
{
  return 6;
}

void siri::dialogengine::CountryMetricMillibars::~CountryMetricMillibars(siri::dialogengine::CountryMetricMillibars *this)
{
}

uint64_t siri::dialogengine::CountryIN::GetPressureUnit(siri::dialogengine::CountryIN *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryIN::GetLengthUnit(siri::dialogengine::CountryIN *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryIN::GetPersonLengthUnit(siri::dialogengine::CountryIN *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryIN::GetType(siri::dialogengine::CountryIN *this)
{
  return 3;
}

void siri::dialogengine::CountryIN::~CountryIN(siri::dialogengine::CountryIN *this)
{
}

uint64_t siri::dialogengine::CountryFeetKPH::GetLengthUnit(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryFeetKPH::GetPersonLengthUnit(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryFeetKPH::GetType(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

void siri::dialogengine::CountryFeetKPH::~CountryFeetKPH(siri::dialogengine::CountryFeetKPH *this)
{
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetSpeedUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetLengthUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetPersonLengthUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetType(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

void siri::dialogengine::CountryCentimetersMPS::~CountryCentimetersMPS(siri::dialogengine::CountryCentimetersMPS *this)
{
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetLengthUnit(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetPersonLengthUnit(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetType(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 0;
}

void siri::dialogengine::CountryCentimetersKPH::~CountryCentimetersKPH(siri::dialogengine::CountryCentimetersKPH *this)
{
}

uint64_t std::map<std::string,siri::dialogengine::MeasurementSystem *>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void sub_1C5FA533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v24, 0x10B3C40D3060B95);
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (STACK[0x2A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A8]);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (STACK[0x2D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }

  if (*(char *)(v25 - 217) < 0) {
    operator delete(*(void **)(v25 - 240));
  }
  if (*(char *)(v25 - 193) < 0) {
    operator delete(*(void **)(v25 - 216));
  }
  if (*(char *)(v25 - 169) < 0) {
    operator delete(*(void **)(v25 - 192));
  }
  if (*(char *)(v25 - 145) < 0) {
    operator delete(*(void **)(v25 - 168));
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::VariableArray>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5FA5914(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void __assign_helper_atomic_property__25599(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__25601(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  std::string *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5FA5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  siri::dialogengine::PropertyBase::~PropertyBase(&a18);

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void sub_1C5FA600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA61A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA6364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA64C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  BOOL v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5FA65E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  BOOL v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5FA6710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  BOOL v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5FA67D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA6864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA6980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5FA6C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5FA70AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C5FA72B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCanonicalOperator(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v8, "lt", "<");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v9, "le", "<=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v10, "gt", ">");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v11, "ge", ">=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v12, "eq", "=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v13, "ne", "!=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v14, "&lt;", "<");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v15, "&le;", "<=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v16, "&gt;", ">");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v17, "&ge;", ">=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v18, "==", "=");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, (const void **)&v8[0].__r_.__value_.__l.__data_, 11);
    for (unint64_t i = 480; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v8[i / 0x18]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, &dword_1C5C1E000);
  }
  siri::dialogengine::StringToLower(a1, (uint64_t)&__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, (const void **)&v8[0].__r_.__value_.__l.__data_);
  if ((_UNKNOWN *)v4 == &unk_1EA3D75B0)
  {
    *a2 = v8[0];
    memset(v8, 0, 24);
  }
  else if (*(char *)(v4 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v4 + 56), *(void *)(v4 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C5FA759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  for (uint64_t i = 480; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v20 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5FA7660(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5FA76B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5FA7708(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5FA775C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatQuantity(siri::dialogengine *a1, siri::dialogengine::Context *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, char a9, siri::dialogengine::SpeakableString *a10, uint64_t a11, int a12, uint64_t a13)
{
  siri::dialogengine::RegisterMorphunData(a1, a2);
  if (a1) {
    siri::dialogengine::Context::GetLocale(a1, v15, (uint64_t)v19);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(v19, "");
  }
  unint64_t v17 = v20;
  if ((v20 & 0x80u) != 0) {
    unint64_t v17 = (unint64_t)v19[1];
  }
  if (!v17) {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"FormatQuantity has empty locale", v16);
  }
  uint64_t v18 = *(unsigned __int8 *)(a3 + 23);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a3 + 8);
  }
  if (v18)
  {
    morphun::util::StringUtils::to_u16string();
    operator new();
  }
  operator new();
}

void sub_1C5FA9590()
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C5FA97F0);
}

void sub_1C5FA95FC()
{
}

void sub_1C5FA960C()
{
}

void sub_1C5FA9620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

void sub_1C5FA9634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 209) < 0) {
    operator delete(*(void **)(v28 - 232));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  JUMPOUT(0x1C5FA997CLL);
}

void sub_1C5FA9670()
{
}

void sub_1C5FA967C()
{
}

void sub_1C5FA977C()
{
}

void sub_1C5FA9A90()
{
}

void siri::dialogengine::FormatUnlocalizedResult(std::basic_string<char16_t> *a1, uint64_t a2)
{
  siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)&v9);
  uint64_t v4 = std::string::append(&v9, " ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  morphun::util::StringUtils::to_u16string();
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    char v7 = (const std::basic_string<char16_t>::value_type *)a2;
  }
  else {
    char v7 = *(const std::basic_string<char16_t>::value_type **)a2;
  }
  if (v6 >= 0) {
    std::basic_string<char16_t>::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::basic_string<char16_t>::size_type v8 = *(void *)(a2 + 8);
  }
  std::basic_string<char16_t>::append(&v12, v7, v8);
  *a1 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5FA9B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t YAML::GraphBuilderAdapter::OnMapEnd(YAML::GraphBuilderAdapter *this)
{
  uint64_t v2 = *((void *)this + 7) - 1;
  uint64_t v3 = *(void *)(*((void *)this + 3) + (((unint64_t)(v2 + *((void *)this + 6)) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (v2 + *((unsigned char *)this + 48));
  uint64_t v4 = *(void **)v3;
  *((void *)this + 12) = *(void *)(v3 + 8);
  *((void *)this + 7) = v2;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
  return YAML::GraphBuilderAdapter::DispositionNode((uint64_t)this, v4);
}

void std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 32 * (v1 - v2) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x200)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t YAML::GraphBuilderAdapter::DispositionNode(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(this + 56);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(this + 24)
                   + (((unint64_t)(v3 + *(void *)(this + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (v3 + *(unsigned char *)(this + 48) - 1);
    if (*(_UNKNOWN **)(v4 + 8) == &YAML::GraphBuilderAdapter::ContainerFrame::sequenceMarker)
    {
      int v6 = *(uint64_t (**)(void))(**(void **)(this + 8) + 40);
      return v6();
    }
    else
    {
      uint64_t v5 = *(void *)(this + 96);
      if (v5)
      {
        this = (*(uint64_t (**)(void, void, uint64_t, void *))(**(void **)(this + 8) + 64))(*(void *)(this + 8), *(void *)v4, v5, a2);
        *(void *)(v2 + 96) = 0;
      }
      else
      {
        *(void *)(this + 96) = a2;
      }
    }
  }
  else
  {
    *(void *)(this + 88) = a2;
  }
  return this;
}

void YAML::GraphBuilderAdapter::OnMapStart(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[7];
  if (v7) {
    uint64_t v8 = *(void *)(*(void *)(a1[3] + (((unint64_t)(v7 + a1[6] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
  }
                   + 16 * (v7 + *((unsigned char *)a1 + 48) - 1));
  else {
    uint64_t v8 = 0;
  }
  std::string v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, a2, a3, v8);
  unint64_t v10 = a1[12];
  v11.n128_u64[0] = (unint64_t)v9;
  v11.n128_u64[1] = v10;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(a1 + 2, &v11);
  a1[12] = 0;
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v9);
}

__n128 std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          char v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unsigned __int8 v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            uint64_t v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            uint64_t v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    uint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      char v27 = operator new(0x1000uLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          BOOL v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          std::basic_string<char16_t>::size_type v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            std::basic_string<char16_t>::size_type v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          std::basic_string<char16_t> v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v28;
        uint64_t v62 = (char *)a1[1];
        int v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            uint64_t v100 = &v98[8 * (v97 >> 2)];
            uint64_t v101 = (uint64_t *)a1[1];
            int v63 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              int v63 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              int v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)int v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            std::string::size_type v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v63;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              int v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            int v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)int v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    std::string v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v29);
    uint64_t v32 = v31;
    std::basic_string<char16_t>::size_type v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v33;
    long long v110 = v34;
    std::string::size_type v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v110;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      std::string v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v74);
      std::basic_string<char16_t>::size_type v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v107 = v36;
      long long v110 = v38;
      operator delete(v30);
      long long v36 = v107;
    }
    long long v38 = v110;
LABEL_56:
    *(void *)std::basic_string<char16_t>::size_type v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        unsigned int v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          long long v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v85);
          char v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            long long v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            uint64_t v91 = v79;
            long long v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)uint64_t v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v108 = v36;
            long long v112 = v38;
            operator delete(v78);
            long long v36 = v108;
            long long v38 = v112;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          char v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            unsigned int v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v36 + 1);
            uint64_t v111 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v109;
            *(void *)&long long v38 = v111;
          }
          *((void *)&v38 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        char v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    uint64_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  __n128 result = *a2;
  *(__n128 *)(*(void *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  ++a1[5];
  return result;
}

void sub_1C5FAA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void YAML::GraphBuilderAdapter::RegisterAnchor(YAML::GraphBuilderAdapter *this, unint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v6 = (unsigned char *)*((void *)this + 8);
    unint64_t v8 = (char *)*((void *)this + 9);
    uint64_t v7 = (void **)((char *)this + 64);
    uint64_t v9 = v8 - v6;
    if (a2 > (v8 - v6) >> 3)
    {
      uint64_t v10 = v9 >> 3;
      unint64_t v11 = a2 - (v9 >> 3);
      uint64_t v12 = (char *)this + 80;
      uint64_t v13 = *((void *)this + 10);
      if (v11 <= (v13 - (uint64_t)v8) >> 3)
      {
        bzero(v8, 8 * v11);
        *((void *)this + 9) = &v8[8 * v11];
      }
      else
      {
        if (a2 >> 61) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v13 - (void)v6;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= a2) {
          uint64_t v15 = a2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v12, v16);
        uint64_t v18 = &v17[8 * v10];
        unsigned __int8 v20 = &v17[8 * v19];
        bzero(v18, 8 * v11);
        int64_t v21 = &v18[8 * v11];
        uint64_t v23 = (char *)*((void *)this + 8);
        uint64_t v22 = (char *)*((void *)this + 9);
        if (v22 != v23)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v18 - siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v24;
            v18 -= 8;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*v7;
        }
        *((void *)this + 8) = v18;
        *((void *)this + 9) = v21;
        *((void *)this + 10) = v20;
        if (v22) {
          operator delete(v22);
        }
      }
      uint64_t v6 = *v7;
    }
    *(void *)&v6[8 * a2 - 8] = a3;
  }
}

uint64_t YAML::GraphBuilderAdapter::OnSequenceEnd(YAML::GraphBuilderAdapter *this)
{
  uint64_t v2 = *((void *)this + 7) - 1;
  uint64_t v3 = *(void **)(*(void *)(*((void *)this + 3)
                            + (((unint64_t)(v2 + *((void *)this + 6)) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (v2 + *((unsigned char *)this + 48)));
  *((void *)this + 7) = v2;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
  return YAML::GraphBuilderAdapter::DispositionNode((uint64_t)this, v3);
}

void YAML::GraphBuilderAdapter::OnSequenceStart(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[7];
  if (v7) {
    uint64_t v8 = *(void *)(*(void *)(a1[3] + (((unint64_t)(v7 + a1[6] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
  }
                   + 16 * (v7 + *((unsigned char *)a1 + 48) - 1));
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a3, v8);
  v10.n128_u64[0] = (unint64_t)v9;
  v10.n128_u64[1] = (unint64_t)&YAML::GraphBuilderAdapter::ContainerFrame::sequenceMarker;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(a1 + 2, &v10);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v9);
}

uint64_t YAML::GraphBuilderAdapter::OnScalar(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 24)
  }
                               + (((unint64_t)(v6 + *(void *)(a1 + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v6 + *(unsigned char *)(a1 + 48) - 1));
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, v7);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v8);
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v8);
}

uint64_t YAML::GraphBuilderAdapter::OnAlias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a2, *(void *)(*(void *)(a1 + 64) + 8 * a3 - 8));
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v4);
}

uint64_t YAML::GraphBuilderAdapter::OnNull(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 24)
  }
                               + (((unint64_t)(v5 + *(void *)(a1 + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v5 + *(unsigned char *)(a1 + 48) - 1));
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2, v6);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a3, v7);
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v7);
}

uint64_t YAML::GraphBuilderAdapter::GetCurrentParent(YAML::GraphBuilderAdapter *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    return *(void *)(*(void *)(*((void *)this + 3)
  }
                                 + (((unint64_t)(v1 + *((void *)this + 6) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((unsigned char *)this + 48) - 1));
  else {
    return 0;
  }
}

void InitDefaultsscc_info_Asset_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Asset::Asset((siri::dialogengine::CatUpdater::Asset *)&siri::dialogengine::CatUpdater::_Asset_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Asset_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::Asset(siri::dialogengine::CatUpdater::Asset *this)
{
  *(void *)this = &unk_1F2122E48;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Asset_CatUpdater_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Asset_CatUpdater_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1C5FAAA10(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::CatUpdater::Asset::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Asset *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      unint64_t v7 = *((int *)this + 14);
      char *v4 = 24;
      if (v7 > 0x7F)
      {
        v4[1] = v7 | 0x80;
        unint64_t v8 = v7 >> 7;
        if (v7 >> 14)
        {
          uint64_t v9 = v4 + 2;
          do
          {
            __n128 v10 = v9;
            *v9++ = v8 | 0x80;
            unint64_t v11 = v8 >> 7;
            unint64_t v12 = v8 >> 14;
            v8 >>= 7;
          }
          while (v12);
          uint64_t v4 = v10 + 2;
          unsigned char *v9 = v11;
          if ((v6 & 4) != 0) {
            goto LABEL_20;
          }
        }
        else
        {
          v4[2] = v8;
          v4 += 3;
          if ((v6 & 4) != 0) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        v4[1] = v7;
        v4 += 2;
        if ((v6 & 4) != 0) {
          goto LABEL_20;
        }
      }
LABEL_5:
      if ((v6 & 8) == 0) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 4), v4);
  if ((v6 & 0x10) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v6 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 5), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_21:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  unint64_t v13 = *((void *)this + 6);
  char *v4 = 40;
  if (v13 > 0x7F)
  {
    v4[1] = v13 | 0x80;
    unint64_t v14 = v13 >> 7;
    if (v13 >> 14)
    {
      uint64_t v15 = v4 + 2;
      do
      {
        unint64_t v16 = v15;
        *v15++ = v14 | 0x80;
        unint64_t v17 = v14 >> 7;
        unint64_t v18 = v14 >> 14;
        v14 >>= 7;
      }
      while (v18);
      uint64_t v4 = v16 + 2;
      *uint64_t v15 = v17;
    }
    else
    {
      v4[2] = v14;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v13;
    v4 += 2;
  }
LABEL_30:
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v21 + 23) < 0)
  {
    uint64_t v23 = *(void **)v21;
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else
  {
    LODWORD(vsiri::dialogengine::SpeakableString::~SpeakableString(this + 22) = *(unsigned __int8 *)(v21 + 23);
    uint64_t v23 = (void *)v21;
  }
  if (*(void *)a3 - (void)v4 >= (int)v22)
  {
    uint64_t v24 = (int)v22;
    memcpy(v4, v23, (int)v22);
    v4 += v24;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v23, v22, (unsigned __int8 *)v4);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Asset::_InternalParse(siri::dialogengine::CatUpdater::Asset *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5 = 0;
  char v27 = a2;
  int v6 = (char *)this + 40;
  unint64_t v7 = (unint64_t *)((char *)this + 8);
  unint64_t v8 = (char *)this + 32;
  uint64_t v9 = (char *)this + 24;
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacint k = (google::protobuf::internal *)((char *)v27 + 1);
    LODWORD(v1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *(unsigned __int8 *)v27;
    if (*(char *)v27 < 0)
    {
      unint64_t v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if (*(char *)TagFallback < 0)
      {
        TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v11);
        char v27 = TagFallback;
        if (!TagFallback) {
          goto LABEL_48;
        }
        goto LABEL_7;
      }
      TagFallbacint k = (google::protobuf::internal *)((char *)v27 + 2);
    }
    char v27 = TagFallback;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) |= 1u;
        unint64_t v12 = (std::string *)*((void *)this + 3);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_24;
      case 2u:
        if (v11 != 18) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) |= 2u;
        unint64_t v12 = (std::string *)*((void *)this + 4);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_24;
      case 3u:
        if (v11 != 24) {
          goto LABEL_30;
        }
        unint64_t v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v14 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_18;
        }
        int v15 = *(char *)v13;
        unint64_t v14 = v14 + (v15 << 7) - 128;
        if (v15 < 0)
        {
          char v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
          if (!v27) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_18:
          char v27 = v13;
        }
        if (v14 > 2)
        {
          if (*v7)
          {
            uint64_t v23 = (std::string *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            unint64_t v26 = v14;
            google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v7);
            unint64_t v14 = v26;
            uint64_t v23 = v24;
          }
          google::protobuf::internal::WriteVarint(3, v14, v23);
        }
        else
        {
          *((_DWORD *)this + 4) |= 0x10u;
          *((_DWORD *)this + 14) = v14;
        }
        continue;
      case 4u:
        if (v11 != 34) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) |= 4u;
        unint64_t v12 = (std::string *)*((void *)this + 5);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_24:
        unint64_t v16 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_35;
      case 5u:
        if (v11 != 40) {
          goto LABEL_30;
        }
        v5 |= 8u;
        unint64_t v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v18 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_29;
        }
        int v19 = *(char *)v17;
        unint64_t v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          unint64_t v21 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          char v27 = v21;
          *((void *)this + 6) = v22;
          if (!v21) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_29:
          char v27 = v17;
          *((void *)this + 6) = v18;
        }
        continue;
      default:
LABEL_30:
        if (v11) {
          BOOL v20 = (v11 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v11 - 1;
          goto LABEL_48;
        }
        unint64_t v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v7, TagFallback, a3);
LABEL_35:
        char v27 = v16;
        if (!v16)
        {
LABEL_50:
          TagFallbacint k = 0;
          goto LABEL_48;
        }
        break;
    }
  }
  TagFallbacint k = v27;
LABEL_48:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

uint64_t siri::dialogengine::CatUpdater::Asset::GetCachedSize(siri::dialogengine::CatUpdater::Asset *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::CatUpdater::Asset::ByteSizeLong(siri::dialogengine::CatUpdater::Asset *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_24;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  v2 += ((9 * (__clz(*((void *)this + 6) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v1 & 0x10) == 0) {
    goto LABEL_24;
  }
LABEL_20:
  int v12 = *((_DWORD *)this + 14);
  if (v12 < 0) {
    uint64_t v13 = 11;
  }
  else {
    uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v2 += v13;
LABEL_24:
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 23) < 0) {
      uint64_t v17 = *(void *)(v16 + 8);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
    }
    v2 += v17;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void siri::dialogengine::CatUpdater::Asset::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Asset *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Asset::MergeFrom(this, lpsrc);
}

void siri::dialogengine::CatUpdater::Asset::MergeFrom(siri::dialogengine::CatUpdater::Asset *this, const siri::dialogengine::CatUpdater::Asset *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 506);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 4);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 4);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 5);
      *((_DWORD *)this + 4) |= 4u;
      int v12 = (const std::string *)*((void *)a2 + 5);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0) {
      *((void *)this + 6) = *((void *)a2 + 6);
    }
    if ((v6 & 0x10) != 0) {
      *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_1C5FAB30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Asset::IsInitialized(siri::dialogengine::CatUpdater::Asset *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Asset::Clear(siri::dialogengine::CatUpdater::Asset *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    if ((v1 & 1) == 0)
    {
      if ((v1 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = *((void *)this + 4);
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((v1 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
        if ((v1 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    uint64_t v2 = *((void *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    uint64_t v4 = *((void *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_17:
  if ((v1 & 0x18) != 0)
  {
    *((_DWORD *)this + 14) = 0;
    *((void *)this + 6) = 0;
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (siri::dialogengine::CatUpdater::Asset *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if (v6) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
  }
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::New(siri::dialogengine::CatUpdater::Asset *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(a2);
}

siri::dialogengine::CatUpdater::Asset *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Asset *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Asset>);
  }
  siri::dialogengine::CatUpdater::Asset::Asset(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5FAB480(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4040ECADADLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Asset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::New(siri::dialogengine::CatUpdater::Asset *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(0);
}

void *siri::dialogengine::CatUpdater::Asset::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Asset");
}

void siri::dialogengine::CatUpdater::Asset::~Asset(siri::dialogengine::CatUpdater::Asset *this)
{
  siri::dialogengine::CatUpdater::Asset::~Asset(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(void *)this = &unk_1F2122E48;
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  char v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Encrypted_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Encrypted::Encrypted((siri::dialogengine::CatUpdater::Encrypted *)&siri::dialogengine::CatUpdater::_Encrypted_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Encrypted_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::Encrypted(siri::dialogengine::CatUpdater::Encrypted *this)
{
  *(void *)this = &unk_1F21231A8;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Encrypted_CatUpdater_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Encrypted_CatUpdater_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((unsigned char *)this + 80) = 0;
  return this;
}

void sub_1C5FAB710(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::CatUpdater::Encrypted::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Encrypted *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 5), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 6), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_6:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_16:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v9 = *((unsigned char *)this + 80);
  char *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 0x10) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 7), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 8), v4);
  if ((v6 & 0x40) != 0) {
LABEL_9:
  }
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 9), v4);
LABEL_10:
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    int v12 = *(void **)v10;
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else
  {
    LODWORD(v1siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *(unsigned __int8 *)(v10 + 23);
    int v12 = (void *)v10;
  }
  if (*(void *)a3 - (void)v4 >= (int)v11)
  {
    uint64_t v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Encrypted::_InternalParse(siri::dialogengine::CatUpdater::Encrypted *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5 = 0;
  uint64_t v25 = (char *)this + 72;
  unint64_t v26 = a2;
  uint64_t v23 = (char *)this + 56;
  uint64_t v24 = (char *)this + 64;
  int v6 = (char *)this + 48;
  uint64_t v7 = (char *)this + 40;
  uint64_t v8 = (char *)this + 32;
  char v9 = (char *)this + 24;
  unint64_t v10 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v26, *((_DWORD *)a3 + 23)))
    {
      TagFallbacint k = v26;
      break;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v26 + 1);
    LODWORD(v12) = *(unsigned __int8 *)v26;
    if ((*(char *)v26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v26 + 2);
LABEL_6:
      unint64_t v26 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v26, v12);
    unint64_t v26 = TagFallback;
    if (!TagFallback) {
      break;
    }
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 1u;
        uint64_t v13 = (std::string *)*((void *)this + 3);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_37;
      case 2u:
        if (v12 != 18) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 2u;
        uint64_t v13 = (std::string *)*((void *)this + 4);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_37;
      case 3u:
        if (v12 != 26) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 4u;
        uint64_t v13 = (std::string *)*((void *)this + 5);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_37;
      case 4u:
        if (v12 != 34) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 8u;
        uint64_t v13 = (std::string *)*((void *)this + 6);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_37;
      case 5u:
        if (v12 != 40) {
          goto LABEL_40;
        }
        v5 |= 0x80u;
        uint64_t v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v15 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_26;
        }
        int v16 = *(char *)v14;
        unint64_t v15 = v15 + (v16 << 7) - 128;
        if (v16 < 0)
        {
          BOOL v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
          unint64_t v26 = v20;
          *((unsigned char *)this + 80) = v21 != 0;
          if (!v20) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          unint64_t v26 = v14;
          *((unsigned char *)this + 80) = v15 != 0;
        }
        continue;
      case 6u:
        if (v12 != 50) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 0x10u;
        uint64_t v13 = (std::string *)*((void *)this + 7);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_37;
        }
        uint64_t v17 = (uint64_t)v23;
        goto LABEL_36;
      case 7u:
        if (v12 != 58) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 0x20u;
        uint64_t v13 = (std::string *)*((void *)this + 8);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_37;
        }
        uint64_t v17 = (uint64_t)v24;
        goto LABEL_36;
      case 8u:
        if (v12 != 66) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) |= 0x40u;
        uint64_t v13 = (std::string *)*((void *)this + 9);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          uint64_t v17 = (uint64_t)v25;
LABEL_36:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_37:
        unint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_38;
      default:
LABEL_40:
        if (v12) {
          BOOL v19 = (v12 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          goto LABEL_48;
        }
        unint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_38:
        unint64_t v26 = v18;
        if (v18) {
          continue;
        }
LABEL_46:
        TagFallbacint k = 0;
        break;
    }
    break;
  }
LABEL_48:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::GetCachedSize(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::ByteSizeLong(siri::dialogengine::CatUpdater::Encrypted *this)
{
  if (!*((unsigned char *)this + 16))
  {
    uint64_t v2 = 0;
    goto LABEL_23;
  }
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v1 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
LABEL_9:
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v1 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((*((unsigned char *)this + 16) & 4) != 0)
  {
    uint64_t v14 = *((void *)this + 5);
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v1 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((unsigned char *)this + 16) & 8) == 0)
    {
LABEL_14:
      if ((*((unsigned char *)this + 16) & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }
  else if ((*((unsigned char *)this + 16) & 8) == 0)
  {
    goto LABEL_14;
  }
  uint64_t v17 = *((void *)this + 6);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v1 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((unsigned char *)this + 16) & 0x10) == 0)
  {
LABEL_15:
    if ((*((unsigned char *)this + 16) & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_34:
    uint64_t v23 = *((void *)this + 8);
    uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
    uint64_t v25 = *(void *)(v23 + 8);
    if ((v24 & 0x80u) == 0) {
      uint64_t v25 = v24;
    }
    v1 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((unsigned char *)this + 16) & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_31:
  uint64_t v20 = *((void *)this + 7);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v1 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((unsigned char *)this + 16) & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_16:
  if ((*((unsigned char *)this + 16) & 0x40) != 0)
  {
LABEL_17:
    uint64_t v9 = *((void *)this + 9);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v1 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  if ((*((unsigned char *)this + 16) & 0x80) != 0) {
    uint64_t v2 = v1 + 2;
  }
  else {
    uint64_t v2 = v1;
  }
LABEL_23:
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v26 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v26 + 23) < 0) {
      uint64_t v27 = *(void *)(v26 + 8);
    }
    else {
      uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
    }
    v2 += v27;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void siri::dialogengine::CatUpdater::Encrypted::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Encrypted *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Encrypted::MergeFrom(this, lpsrc);
}

void siri::dialogengine::CatUpdater::Encrypted::MergeFrom(siri::dialogengine::CatUpdater::Encrypted *this, const siri::dialogengine::CatUpdater::Encrypted *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 2612);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 4);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 4);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 5);
      *((_DWORD *)this + 4) |= 4u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 5);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      uint64_t v13 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 6);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      uint64_t v15 = (std::string *)*((void *)this + 7);
      *((_DWORD *)this + 4) |= 0x10u;
      uint64_t v16 = (const std::string *)*((void *)a2 + 7);
      if (v15 != v16)
      {
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v16);
        }
        std::string::operator=(v15, v16);
      }
    }
    if ((v6 & 0x20) != 0)
    {
      uint64_t v17 = (std::string *)*((void *)this + 8);
      *((_DWORD *)this + 4) |= 0x20u;
      uint64_t v18 = (const std::string *)*((void *)a2 + 8);
      if (v17 != v18)
      {
        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v18);
        }
        std::string::operator=(v17, v18);
      }
    }
    if ((v6 & 0x40) != 0)
    {
      uint64_t v19 = (std::string *)*((void *)this + 9);
      *((_DWORD *)this + 4) |= 0x40u;
      uint64_t v20 = (const std::string *)*((void *)a2 + 9);
      if (v19 != v20)
      {
        if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v20);
        }
        std::string::operator=(v19, v20);
      }
    }
    if ((v6 & 0x80) != 0) {
      *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_1C5FAC1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::IsInitialized(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Encrypted::Clear(siri::dialogengine::CatUpdater::Encrypted *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0) {
    goto LABEL_37;
  }
  if (v1)
  {
    uint64_t v2 = *((void *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t v4 = *((void *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
    }
LABEL_6:
    if ((v1 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v6 = *((void *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
LABEL_8:
    if ((v1 & 0x40) == 0) {
      goto LABEL_37;
    }
LABEL_34:
    uint64_t v8 = *((void *)this + 9);
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
    goto LABEL_37;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_14:
  uint64_t v3 = *((void *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
  }
LABEL_5:
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_22:
  uint64_t v5 = *((void *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
LABEL_7:
  if ((v1 & 0x20) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v7 = *((void *)this + 8);
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    if ((v1 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  *(unsigned char *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 23) = 0;
  if ((v1 & 0x40) != 0) {
    goto LABEL_34;
  }
LABEL_37:
  char v10 = *((unsigned char *)this + 8);
  uint64_t v9 = (char *)this + 8;
  v9[72] = 0;
  *((_DWORD *)v9 + 2) = 0;
  if (v10) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v9);
  }
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::New(siri::dialogengine::CatUpdater::Encrypted *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(a2);
}

siri::dialogengine::CatUpdater::Encrypted *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Encrypted *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Encrypted>);
  }
  siri::dialogengine::CatUpdater::Encrypted::Encrypted(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5FAC3F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4002BE25B0);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Encrypted>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::New(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(0);
}

void *siri::dialogengine::CatUpdater::Encrypted::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Encrypted");
}

void siri::dialogengine::CatUpdater::Encrypted::~Encrypted(siri::dialogengine::CatUpdater::Encrypted *this)
{
  *(void *)this = &unk_1F21231A8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F21231A8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F21231A8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

void *siri::dialogengine::CatUpdater::Encrypted::SharedDtor(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[3];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[4];
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (void *)MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = v1[5];
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    this = (void *)MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = v1[6];
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    this = (void *)MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = v1[7];
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    this = (void *)MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[8];
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x1C8796D70](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = v1[9];
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    JUMPOUT(0x1C8796D70);
  }
  return this;
}

void InitDefaultsscc_info_MatchCriteria_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria((siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_, v4);
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  *(void *)this = &unk_1F2122FF8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load_explicit(scc_info_MatchCriteria_CatUpdater_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_MatchCriteria_CatUpdater_2eproto);
  }
  return this;
}

void sub_1C5FAC7D4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::MatchCriteria *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(void *)a3 - (void)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, a2);
    }
  }
  int v11 = *((_DWORD *)this + 14);
  if (v11 >= 1)
  {
    for (int j = 0; v11 != j; ++j)
    {
      uint64_t v13 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v13 + 23) < 0)
      {
        int64_t v14 = *(void *)(v13 + 8);
        if (v14 > 127) {
          goto LABEL_26;
        }
      }
      else
      {
        int64_t v14 = *(unsigned __int8 *)(v13 + 23);
      }
      if (*(void *)a3 - (void)a2 + 14 >= v14)
      {
        *a2 = 18;
        a2[1] = v14;
        if (*(char *)(v13 + 23) >= 0) {
          uint64_t v15 = (const void *)v13;
        }
        else {
          uint64_t v15 = *(const void **)v13;
        }
        memcpy(a2 + 2, v15, v14);
        a2 += v14 + 2;
        continue;
      }
LABEL_26:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v13, a2);
    }
  }
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    uint64_t v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    uint64_t v20 = (void *)v18;
  }
  if (*(void *)a3 - (void)a2 >= (int)v19)
  {
    uint64_t v21 = (int)v19;
    memcpy(a2, v20, (int)v19);
    a2 += v21;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)a2);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::MatchCriteria::_InternalParse(siri::dialogengine::CatUpdater::MatchCriteria *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = (unsigned int *)((char *)this + 48);
  int v6 = (unsigned int *)((char *)this + 24);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v31, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacint k = (google::protobuf::internal *)((char *)v31 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v31;
    if ((*(char *)v31 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int64_t v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v31 + 2);
LABEL_6:
      uint64_t v31 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, v9);
    uint64_t v31 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 != 18) {
        goto LABEL_12;
      }
      uint64_t v12 = (char *)TagFallback - 1;
LABEL_20:
      uint64_t v13 = v12 + 1;
      uint64_t v31 = (google::protobuf::internal *)(v12 + 1);
      int64_t v14 = (int *)*((void *)this + 8);
      if (v14)
      {
        uint64_t v15 = *((int *)this + 14);
        int v16 = *v14;
        if ((int)v15 < *v14)
        {
          *((_DWORD *)this + 14) = v15 + 1;
          AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
          goto LABEL_31;
        }
        if (v16 == *((_DWORD *)this + 15))
        {
LABEL_25:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
          int64_t v14 = (int *)*((void *)this + 8);
          int v16 = *v14;
        }
        *int64_t v14 = v16 + 1;
        unint64_t v18 = *(atomic_ullong **)v5;
        if (!*(void *)v5) {
          operator new();
        }
        if (v18[14]) {
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        uint64_t v19 = *((void *)this + 8);
        uint64_t v20 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v20 + 1;
        *(void *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
        uint64_t v13 = (std::string::value_type *)v31;
LABEL_31:
        uint64_t v12 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)a3);
        uint64_t v31 = (google::protobuf::internal *)v12;
        if (!v12) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v12 || *v12 != 18) {
          continue;
        }
        goto LABEL_20;
      }
      int v16 = *((_DWORD *)this + 15);
      goto LABEL_25;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      uint64_t v21 = (char *)TagFallback - 1;
      while (1)
      {
        uint64_t v22 = v21 + 1;
        uint64_t v31 = (google::protobuf::internal *)(v21 + 1);
        uint64_t v23 = (int *)*((void *)this + 5);
        if (!v23) {
          break;
        }
        uint64_t v24 = *((int *)this + 8);
        int v25 = *v23;
        if ((int)v24 >= *v23)
        {
          if (v25 == *((_DWORD *)this + 9))
          {
LABEL_41:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v25 + 1);
            uint64_t v23 = (int *)*((void *)this + 5);
            int v25 = *v23;
          }
          *uint64_t v23 = v25 + 1;
          uint64_t v27 = *(atomic_ullong **)v6;
          if (!*(void *)v6) {
            operator new();
          }
          if (v27[14]) {
          unint64_t v26 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v27, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          v26->__r_.__value_.__r.__words[0] = 0;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          uint64_t v28 = *((void *)this + 5);
          uint64_t v29 = *((int *)this + 8);
          *((_DWORD *)this + 8) = v29 + 1;
          *(void *)(v28 + 8 * v29 + 8) = v26;
          uint64_t v22 = (std::string::value_type *)v31;
          goto LABEL_47;
        }
        *((_DWORD *)this + 8) = v24 + 1;
        unint64_t v26 = *(std::string **)&v23[2 * v24 + 2];
LABEL_47:
        uint64_t v21 = google::protobuf::internal::InlineGreedyStringParser(v26, v22, (uint64_t)a3);
        uint64_t v31 = (google::protobuf::internal *)v21;
        if (!v21) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v21 || *v21 != 10) {
          goto LABEL_2;
        }
      }
      int v25 = *((_DWORD *)this + 9);
      goto LABEL_41;
    }
LABEL_12:
    if (v9) {
      BOOL v11 = (v9 & 7) == 4;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    uint64_t v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
    if (!v31) {
      return 0;
    }
  }
  return v31;
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::GetCachedSize(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    uint64_t v4 = *((unsigned int *)this + 8);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 8);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  uint64_t v7 = *((unsigned int *)this + 14);
  uint64_t v8 = v4 + v7;
  if ((int)v7 >= 1)
  {
    int v9 = 0;
    do
    {
      uint64_t v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v9);
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      v8 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while (v7 != v9);
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0) {
      uint64_t v15 = *(void *)(v14 + 8);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    }
    v8 += v15;
  }
  *((_DWORD *)this + 5) = v8;
  return v8;
}

void siri::dialogengine::CatUpdater::MatchCriteria::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::MatchCriteria *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(this, lpsrc);
}

void siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(siri::dialogengine::CatUpdater::MatchCriteria *this, const siri::dialogengine::CatUpdater::MatchCriteria *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1447);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
}

void sub_1C5FACFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::IsInitialized(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::MatchCriteria::Clear(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  char v3 = *((unsigned char *)this + 8);
  int v2 = (siri::dialogengine::CatUpdater::MatchCriteria *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::New(siri::dialogengine::CatUpdater::MatchCriteria *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(a2);
}

siri::dialogengine::CatUpdater::MatchCriteria *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::MatchCriteria *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::MatchCriteria>);
  }
  siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5FAD0FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400FAF5ACDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::MatchCriteria>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::New(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
}

void *siri::dialogengine::CatUpdater::MatchCriteria::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.MatchCriteria");
}

void siri::dialogengine::CatUpdater::MatchCriteria::~MatchCriteria(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  siri::dialogengine::CatUpdater::MatchCriteria::~MatchCriteria(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v2;

  *(void *)this = &unk_1F2122FF8;
  int v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
}

void InitDefaultsscc_info_Filter_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Filter::Filter((siri::dialogengine::CatUpdater::Filter *)&siri::dialogengine::CatUpdater::_Filter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Filter_default_instance_, v4);
  qword_1EA3DAFB8 = (uint64_t)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
  unk_1EA3DAFC0 = &siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::Filter(siri::dialogengine::CatUpdater::Filter *this)
{
  *(void *)this = &unk_1F2123088;
  *((void *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Filter_CatUpdater_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Filter_CatUpdater_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5FAD2D0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::CatUpdater::Filter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Filter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v7 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 3);
    char *v4 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v11 = v4 + 2;
        do
        {
          uint64_t v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        int v9 = v12 + 2;
        unsigned char *v11 = v13;
      }
      else
      {
        v4[2] = v10;
        int v9 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v8;
      int v9 = v4 + 2;
    }
    uint64_t v4 = (char *)siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(void *)a3) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    uint64_t v15 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 4);
    char *v4 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v19 = v4 + 2;
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        uint64_t v17 = v20 + 2;
        unsigned char *v19 = v21;
      }
      else
      {
        v4[2] = v18;
        uint64_t v17 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v16;
      uint64_t v17 = v4 + 2;
    }
    uint64_t v4 = (char *)siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
  }
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v25 + 23) < 0)
  {
    uint64_t v27 = *(void **)v25;
    uint64_t v26 = *(void *)(v25 + 8);
  }
  else
  {
    LODWORD(v26) = *(unsigned __int8 *)(v25 + 23);
    uint64_t v27 = (void *)v25;
  }
  if (*(void *)a3 - (void)v4 >= (int)v26)
  {
    uint64_t v28 = (int)v26;
    memcpy(v4, v27, (int)v26);
    v4 += v28;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v27, v26, (unsigned __int8 *)v4);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Filter::_InternalParse(siri::dialogengine::CatUpdater::Filter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v13 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23))) {
      return v13;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v13 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      unsigned int v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v7);
    unsigned int v13 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v7 >> 3 == 2)
    {
      if (v7 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 4);
        if (!matched)
        {
          matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
          *((void *)this + 4) = matched;
          goto LABEL_22;
        }
LABEL_23:
        unsigned int v10 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::MatchCriteria>(a3, matched, TagFallback);
        goto LABEL_24;
      }
    }
    else if (v7 >> 3 == 1 && v7 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 3);
      if (!matched)
      {
        matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((void *)this + 3) = matched;
LABEL_22:
        TagFallbacint k = v13;
      }
      goto LABEL_23;
    }
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    unsigned int v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v5, TagFallback, a3);
LABEL_24:
    unsigned int v13 = v10;
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v7 - 1;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::MatchCriteria>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatUpdater::MatchCriteria *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)siri::dialogengine::CatUpdater::MatchCriteria::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t siri::dialogengine::CatUpdater::Filter::GetCachedSize(siri::dialogengine::CatUpdater::Filter *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::CatUpdater::Filter::ByteSizeLong(siri::dialogengine::CatUpdater::Filter *this)
{
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(*((siri::dialogengine::CatUpdater::MatchCriteria **)this
                                                                     + 3));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(*((siri::dialogengine::CatUpdater::MatchCriteria **)this
                                                                     + 4));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
    }
    v3 += v9;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void siri::dialogengine::CatUpdater::Filter::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Filter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Filter::MergeFrom(this, lpsrc);
}

void siri::dialogengine::CatUpdater::Filter::MergeFrom(siri::dialogengine::CatUpdater::Filter *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1694);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      *((_DWORD *)this + 4) |= 1u;
      matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 3);
      if (!matched)
      {
        matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((void *)this + 3) = matched;
      }
      if (*((void *)a2 + 3)) {
        unint64_t v8 = (const siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)a2 + 3);
      }
      else {
        unint64_t v8 = (const siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
      }
      siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(matched, v8);
    }
    if ((v6 & 2) != 0)
    {
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v9 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 4);
      if (!v9)
      {
        uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((void *)this + 4) = v9;
      }
      if (*((void *)a2 + 4)) {
        int v10 = (const siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)a2 + 4);
      }
      else {
        int v10 = (const siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
      }
      siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(v9, v10);
    }
  }
}

void sub_1C5FAD974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Filter::IsInitialized(siri::dialogengine::CatUpdater::Filter *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Filter::Clear(siri::dialogengine::CatUpdater::Filter *this)
{
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      uint64_t v3 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 3);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1567);
        uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: include_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
        uint64_t v3 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 3);
      }
      siri::dialogengine::CatUpdater::MatchCriteria::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v5 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 4);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1571);
        int v6 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: exclude_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
        uint64_t v5 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((void *)this + 4);
      }
      siri::dialogengine::CatUpdater::MatchCriteria::Clear(v5);
    }
  }
  char v8 = *((unsigned char *)this + 8);
  uint64_t v7 = (siri::dialogengine::CatUpdater::Filter *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
  }
}

void sub_1C5FADA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::New(siri::dialogengine::CatUpdater::Filter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(a2);
}

siri::dialogengine::CatUpdater::Filter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Filter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Filter>);
  }
  siri::dialogengine::CatUpdater::Filter::Filter(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5FADB34(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Filter>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::New(siri::dialogengine::CatUpdater::Filter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(0);
}

void *siri::dialogengine::CatUpdater::Filter::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Filter");
}

void siri::dialogengine::CatUpdater::Filter::~Filter(siri::dialogengine::CatUpdater::Filter *this)
{
  siri::dialogengine::CatUpdater::Filter::~Filter(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F2123088;
  if (this != (siri::dialogengine::CatUpdater::Filter *)&siri::dialogengine::CatUpdater::_Filter_default_instance_)
  {
    int v2 = *((void *)this + 3);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 4);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Manifest_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Manifest::Manifest((siri::dialogengine::CatUpdater::Manifest *)&siri::dialogengine::CatUpdater::_Manifest_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Manifest_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Manifest *siri::dialogengine::CatUpdater::Manifest::Manifest(siri::dialogengine::CatUpdater::Manifest *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2122ED8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_Manifest_CatUpdater_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Manifest_CatUpdater_2eproto);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5FADD7C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::CatUpdater::Manifest::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Manifest *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      char v8 = (siri::dialogengine::CatUpdater::Asset *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      unsigned int v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          int v12 = (unsigned __int8 *)(a2 + 2);
          do
          {
            BOOL v13 = v12;
            *v12++ = v11 | 0x80;
            unsigned int v14 = v11 >> 7;
            unsigned int v15 = v11 >> 14;
            v11 >>= 7;
          }
          while (v15);
          int v10 = v13 + 2;
          unsigned __int8 *v12 = v14;
        }
        else
        {
          a2[2] = v11;
          int v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        int v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)siri::dialogengine::CatUpdater::Asset::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  int v16 = *((_DWORD *)this + 4);
  if (v16)
  {
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 6), a2);
    if ((v16 & 2) == 0)
    {
LABEL_15:
      if ((v16 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_15;
  }
  a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 7), a2);
  if ((v16 & 0x10) == 0)
  {
LABEL_16:
    if ((v16 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_27:
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    unint64_t v20 = *((int *)this + 21);
    *a2 = 40;
    if (v20 > 0x7F)
    {
      a2[1] = v20 | 0x80;
      unint64_t v21 = v20 >> 7;
      if (v20 >> 14)
      {
        unsigned int v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v23 = v22;
          *v22++ = v21 | 0x80;
          unint64_t v24 = v21 >> 7;
          unint64_t v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        a2 = (char *)(v23 + 2);
        *unsigned int v22 = v24;
        if ((v16 & 4) != 0) {
          goto LABEL_38;
        }
      }
      else
      {
        a2[2] = v21;
        a2 += 3;
        if ((v16 & 4) != 0) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      a2[1] = v20;
      a2 += 2;
      if ((v16 & 4) != 0) {
        goto LABEL_38;
      }
    }
LABEL_18:
    if ((v16 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_24:
  if ((unint64_t)a2 >= *(void *)a3) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unsigned __int8 v19 = *((unsigned char *)this + 80);
  *a2 = 32;
  a2[1] = v19;
  a2 += 2;
  if ((v16 & 0x20) != 0) {
    goto LABEL_27;
  }
LABEL_17:
  if ((v16 & 4) == 0) {
    goto LABEL_18;
  }
LABEL_38:
  a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 8), a2);
  if ((v16 & 8) != 0) {
LABEL_19:
  }
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 9), a2);
LABEL_20:
  uint64_t v17 = *((void *)this + 1);
  if ((v17 & 1) == 0) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v26 + 23) < 0)
  {
    uint64_t v28 = *(void **)v26;
    uint64_t v27 = *(void *)(v26 + 8);
  }
  else
  {
    LODWORD(v27) = *(unsigned __int8 *)(v26 + 23);
    uint64_t v28 = (void *)v26;
  }
  if (*(void *)a3 - (void)a2 >= (int)v27)
  {
    uint64_t v29 = (int)v27;
    memcpy(a2, v28, (int)v27);
    a2 += v29;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v28, v27, (unsigned __int8 *)a2);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Manifest::_InternalParse(siri::dialogengine::CatUpdater::Manifest *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5 = 0;
  uint64_t v37 = a2;
  int v6 = (char *)this + 72;
  uint64_t v7 = (char *)this + 64;
  char v8 = (unint64_t *)((char *)this + 8);
  unsigned int v9 = (char *)this + 56;
  int v10 = (char *)this + 48;
  unsigned int v11 = (unsigned int *)((char *)this + 24);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v37, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v37 + 1);
      LODWORD(v13) = *(unsigned __int8 *)v37;
      if (*(char *)v37 < 0)
      {
        BOOL v13 = (const char *)(v13 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v13);
          uint64_t v37 = TagFallback;
          if (!TagFallback) {
            goto LABEL_64;
          }
LABEL_7:
          switch(v13 >> 3)
          {
            case 1u:
              if (v13 != 10) {
                goto LABEL_50;
              }
              unsigned int v14 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v13 != 18) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 4) |= 1u;
              unsigned int v22 = (std::string *)*((void *)this + 6);
              if (v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_47;
            case 3u:
              if (v13 != 26) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 4) |= 2u;
              unsigned int v22 = (std::string *)*((void *)this + 7);
              if (v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_47;
            case 4u:
              if (v13 != 32) {
                goto LABEL_50;
              }
              v5 |= 0x10u;
              uint64_t v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v24 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_33;
              }
              int v25 = *(char *)v23;
              unint64_t v24 = v24 + (v25 << 7) - 128;
              if (v25 < 0)
              {
                uint64_t v31 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
                uint64_t v37 = v31;
                *((unsigned char *)this + 80) = v32 != 0;
                if (!v31) {
                  goto LABEL_66;
                }
              }
              else
              {
                uint64_t v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_33:
                uint64_t v37 = v23;
                *((unsigned char *)this + 80) = v24 != 0;
              }
              continue;
            case 5u:
              if (v13 != 40) {
                goto LABEL_50;
              }
              unint64_t v26 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v27 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_38;
              }
              int v28 = *(char *)v26;
              unint64_t v27 = v27 + (v28 << 7) - 128;
              if (v28 < 0)
              {
                uint64_t v37 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v27);
                if (!v37) {
                  goto LABEL_66;
                }
              }
              else
              {
                unint64_t v26 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                uint64_t v37 = v26;
              }
              if (v27 > 2)
              {
                if (*v8)
                {
                  std::basic_string<char16_t>::size_type v33 = (std::string *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  unint64_t v36 = v27;
                  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v8);
                  unint64_t v27 = v36;
                  std::basic_string<char16_t>::size_type v33 = v34;
                }
                google::protobuf::internal::WriteVarint(5, v27, v33);
              }
              else
              {
                *((_DWORD *)this + 4) |= 0x20u;
                *((_DWORD *)this + 2siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = v27;
              }
              continue;
            case 6u:
              if (v13 != 50) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 4) |= 4u;
              unsigned int v22 = (std::string *)*((void *)this + 8);
              if (v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_47;
            case 7u:
              if (v13 != 58) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 4) |= 8u;
              unsigned int v22 = (std::string *)*((void *)this + 9);
              if (v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
LABEL_47:
              uint64_t v29 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v22, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_48;
            default:
LABEL_50:
              if (v13) {
                BOOL v30 = (v13 & 7) == 4;
              }
              else {
                BOOL v30 = 1;
              }
              if (v30)
              {
                *((_DWORD *)a3 + 20) = v13 - 1;
                goto LABEL_64;
              }
              uint64_t v29 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v13, v8, TagFallback, a3);
LABEL_48:
              uint64_t v37 = v29;
              if (!v29)
              {
LABEL_66:
                TagFallbacint k = 0;
                goto LABEL_64;
              }
              continue;
          }
          while (1)
          {
            unsigned int v15 = (google::protobuf::internal *)(v14 + 1);
            uint64_t v37 = (google::protobuf::internal *)(v14 + 1);
            int v16 = (int *)*((void *)this + 5);
            if (!v16) {
              break;
            }
            uint64_t v17 = *((int *)this + 8);
            int v18 = *v16;
            if ((int)v17 >= *v16)
            {
              if (v18 == *((_DWORD *)this + 9))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v11, v18 + 1);
                int v16 = (int *)*((void *)this + 5);
                int v18 = *v16;
              }
              *int v16 = v18 + 1;
              unsigned __int8 v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(*((google::protobuf::internal::ArenaImpl **)this + 3));
              uint64_t v20 = *((void *)this + 5);
              uint64_t v21 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v21 + 1;
              *(void *)(v20 + 8 * v21 + 8) = v19;
              unsigned int v15 = v37;
              goto LABEL_17;
            }
            *((_DWORD *)this + 8) = v17 + 1;
            unsigned __int8 v19 = *(siri::dialogengine::CatUpdater::Asset **)&v16[2 * v17 + 2];
LABEL_17:
            unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::Asset>(a3, v19, v15);
            uint64_t v37 = (google::protobuf::internal *)v14;
            if (!v14) {
              goto LABEL_66;
            }
            if (*(void *)a3 <= (unint64_t)v14 || *v14 != 10) {
              goto LABEL_2;
            }
          }
          int v18 = *((_DWORD *)this + 9);
          goto LABEL_15;
        }
        TagFallbacint k = (google::protobuf::internal *)((char *)v37 + 2);
      }
      uint64_t v37 = TagFallback;
      goto LABEL_7;
    }
    break;
  }
  TagFallbacint k = v37;
LABEL_64:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::Asset>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatUpdater::Asset *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    char v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    char v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + siri::dialogengine::SpeakableString::~SpeakableString(this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)siri::dialogengine::CatUpdater::Asset::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t siri::dialogengine::CatUpdater::Manifest::GetCachedSize(siri::dialogengine::CatUpdater::Manifest *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::CatUpdater::Manifest::ByteSizeLong(siri::dialogengine::CatUpdater::Manifest *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (siri::dialogengine::CatUpdater::Asset **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = siri::dialogengine::CatUpdater::Asset::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x3F) == 0) {
    goto LABEL_34;
  }
  if (v8)
  {
    uint64_t v14 = *((void *)this + 6);
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
LABEL_28:
      uint64_t v20 = *((void *)this + 8);
      uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
      uint64_t v22 = *(void *)(v20 + 8);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = v21;
      }
      v2 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 8) == 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v17 = *((void *)this + 7);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) != 0) {
    goto LABEL_28;
  }
LABEL_13:
  if ((v8 & 8) != 0)
  {
LABEL_14:
    uint64_t v9 = *((void *)this + 9);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  if ((v8 & 0x10) != 0) {
    v2 += 2;
  }
  if ((v8 & 0x20) != 0)
  {
    int v12 = *((_DWORD *)this + 21);
    if (v12 < 0) {
      uint64_t v13 = 11;
    }
    else {
      uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v13;
  }
LABEL_34:
  uint64_t v23 = *((void *)this + 1);
  if (v23)
  {
    unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    }
    v2 += v26;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void siri::dialogengine::CatUpdater::Manifest::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Manifest *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Manifest::MergeFrom(this, lpsrc);
}

void siri::dialogengine::CatUpdater::Manifest::MergeFrom(siri::dialogengine::CatUpdater::Manifest *this, const siri::dialogengine::CatUpdater::Manifest *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 910);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x3F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      int v8 = (const std::string *)*((void *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 7);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 7);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 8);
      *((_DWORD *)this + 4) |= 4u;
      int v12 = (const std::string *)*((void *)a2 + 8);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      uint64_t v13 = (std::string *)*((void *)this + 9);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 9);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0) {
      *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
    }
    if ((v6 & 0x20) != 0) {
      *((_DWORD *)this + 2siri::dialogengine::SpeakableString::~SpeakableString(this + 1) = *((_DWORD *)a2 + 21);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_1C5FAE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (siri::dialogengine::CatUpdater::Asset **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::CatUpdater::Asset **)v7;
      do
      {
        uint64_t v16 = *v13++;
        char v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatUpdater::Asset>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (siri::dialogengine::CatUpdater::Asset **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::CatUpdater::Asset **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        unint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatUpdater::Asset>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      *uint64_t v26 = v25;
    }
  }
}

void sub_1C5FAEB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}